// This file has been generated by the SAPUI5 'AllInOne' Builder
sap.ui.controller("sap.ushell.components.factsheet.views.ThingViewer", {

    setService : function(sUri) {
        this.getView().setModel(new sap.ui.model.odata.ODataModel(sUri));
    }

});
/**
 * Created by i041099 on 14/08/13.
 * Performance UI monitor
 */
window.f2pMonitor = (function () {
    'use strict';
    /*global jQuery, sap, window, document, f2p */

    jQuery.sap.declare("sap.ushell.components.perf.monitor");
    jQuery.sap.require("sap.m.library");

    var oPerfMonitorApp,
        sRootPageId,
        oItemTemplate,
        oPerfMonitorModel;

    function setItemsIconColor (aItems){
        for (var i = 0; i < aItems.length;i++){
            var icon = aItems[i].getIcon();
            if (icon && icon.indexOf('alert') !== -1){
                aItems[i].addStyleClass('PerfMonitorRedIcon');
            }else if(icon && icon.indexOf('accept') !== -1){
                aItems[i].addStyleClass('PerfMonitorGreenIcon');
            }
        }
    }

    function _navigate(event) {
        event.stopImmediatePropagation();
        var oCtx, sCurrentPath, sNewPath, oNewData;
        oCtx = event.srcControl.getBindingContext();
        sCurrentPath = oPerfMonitorModel.getProperty('/currentListPath');
        sNewPath = sCurrentPath + oCtx.sPath.replace('/currentModel','');
        oNewData = oPerfMonitorModel.getProperty('/data' + sNewPath);
        if (oNewData.items && oNewData.items.length){
            oPerfMonitorModel.setProperty('/currentListPath', sNewPath);
            oPerfMonitorModel.setProperty('/currentModel', oNewData);
        }
    }
    
    function _navigateBack(event){
        var sNewPath, oNewData,
            sCurrentPath = oPerfMonitorModel.getProperty('/currentListPath');
        if (sCurrentPath){
            sNewPath = sCurrentPath.substring(0,sCurrentPath.lastIndexOf('/'));
            sNewPath = sNewPath.substring(0,sNewPath.lastIndexOf('/'));
            oNewData = oPerfMonitorModel.getProperty('/data' + sNewPath);
            oPerfMonitorModel.setProperty('/currentListPath', sNewPath);
            oPerfMonitorModel.setProperty('/currentModel', oNewData);
        }else{
            oPerfMonitorApp.backToTop();
        }
    }

    oItemTemplate = new sap.m.ObjectListItem({
        title: "{title}",
        type: "{type}",
        number: "{number}",
        numberUnit: "{i18n>milliseconds}",
        icon : "{icon}"
    }).addEventDelegate({
        onclick: _navigate    // workaround, press event should be used
    });

    function _addPage(oData, sPath, showNavButton) {
        var oPage ,oList = new sap.m.List({
            inset: false
        });
        oPerfMonitorModel.setProperty("/currentListPath","");
        oPerfMonitorModel.setProperty('/currentModel', oPerfMonitorModel.getProperty('/data'));
        oList.setModel(oPerfMonitorModel);
        oList.bindItems("/currentModel/items", oItemTemplate);
        oList.onBeforeRendering  = function (event){
            setItemsIconColor(event.srcControl.getItems());
        };
        oPage = new sap.m.Page(oData.id, {
            title: "{i18n>fioriLaunchPadMonitor}",
            showNavButton: showNavButton,
            content: [oList]
        }).addEventDelegate({
            onclick: _navigateBack
        });
        oPerfMonitorApp.addPage(oPage);
    }

    return {
        _getStaticJSON : function () {
        return {
            id: "overview",
            title: "Overview",
            items: [
                {
                    id: "homepage",
                    title: "All Groups",
                    type: "Navigation",
                    number: 10500,
                    items: [
                        {
                            title: "Self Service Group",
                            /*  type: "Navigation",*/
                            number: 100
                        },
                        {
                            id: "salesGroup",
                            title: "Sales Group",
                            type: "Navigation",
                            number: 10250,
                            items: [
                                {
                                    title: "Create Sales Order Tile",
                                    number: 300
                                },
                                {
                                    title: "Product HT-1000 Tile",
                                    number: 250
                                },
                                {
                                    title: "Approve Shopping Cart Tile",
                                    number: 350
                                },
                                {
                                    title: "Sales Order 27 Tile",
                                    number: 8000
                                },
                                {
                                    title: "Npr News Tile",
                                    number: 250
                                }
                            ]
                        }
                    ]
                },
                {
                    id: "shell",
                    title: "Shell bootstrap",
                    /*type: "Navigation",*/
                    number: 1000
                },
                {
                    id: "searches",
                    title: "Searches Terms",
                    /*type: "Navigation",*/
                    number: 1000
                },
                {
                    id: "appNavigation",
                    title: "App Navigation",
                    /*type: "Navigation",*/
                    number: 250
                }
            ]
        };
    },
        open: function () {
            if (!oPerfMonitorApp) {
                this.init();
            }
            else {
               this.update();                    
            }
            oPerfMonitorApp.to(sRootPageId);
        },
        close: function () {
            if (oPerfMonitorApp) {
                oPerfMonitorApp.backToTop();
            }

        },
        load: function (loadDataFunction) {
            var data = loadDataFunction();
            if (!oPerfMonitorModel){
                oPerfMonitorModel = new sap.ui.model.json.JSONModel();
            }
            oPerfMonitorModel.setProperty('/data',data);
            sRootPageId = data.id;
            _addPage(data, "/items/", true);
        },
        registerWindowKeyCombo: function () {
            jQuery(document).keydown(function (e) {
                //CTRL + ALT +  L keydown combo
                if (e.ctrlKey && e.altKey && e.keyCode === 76) {
                    if (!oPerfMonitorApp) {
                        this.init();
                    }
                    else {
                        this.update();
                    }
                    oPerfMonitorApp.to(sRootPageId);
                }
                //ESC
                if (e.keyCode === 27) {
                    if (oPerfMonitorApp) {
                        oPerfMonitorApp.backToTop();
                    }
                }
            }.bind(this));
        },
        update: function() {
            if (window.f2p) {
                var oData = f2p.get();
                oPerfMonitorModel.setProperty('/data', oData);
                oPerfMonitorModel.setProperty('/currentModel', oData);
            }
        },
        /***
         *
         * @param {object}
         *   navigationApp
         */
        init: function (navigationApp) {
//            this.registerWindowKeyCombo();
            if (navigationApp) {
                oPerfMonitorApp = navigationApp;
            } else {
                return;
            }
            
            if (window.f2p)
                this.load(f2p.get);
            else
                this.load(this._getStaticJSON);
        }

    };
}());
//Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */

    sap.ui.jsview("sap.ushell.components.tiles.applauncher.StaticTile", {
        getControllerName: function () {
            return "sap.ushell.components.tiles.applauncher.StaticTile";
        },
        createContent: function (oController) {
        	jQuery.sap.require('sap.ushell.ui.tile.StaticTile');
            this.setHeight('100%');
            this.setWidth('100%');
            return new sap.ushell.ui.tile.StaticTile(
                {
                    title: "{/config/display_title_text}",
                    subtitle: "{/config/display_subtitle_text}",
                    info: "{/config/display_info_text}",
                    actions: "{/config/actions}",
                    infoState: "Neutral",
                    icon: "{/config/display_icon_url}",
                    targetURL: "{/nav/navigation_target_url}",
                    highlightTerms: "{/search/display_highlight_terms}",
                    press: [ oController.onPress, oController ]
                }
            );
        }
    });
}());
//Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */

    sap.ui.jsview("sap.ushell.components.tiles.applauncherdynamic.DynamicTile", {
        getControllerName: function () {
            return "sap.ushell.components.tiles.applauncherdynamic.DynamicTile";
        },
        createContent: function (oController) {
        	jQuery.sap.require('sap.ushell.ui.tile.DynamicTile');
            this.setHeight('100%');
            this.setWidth('100%');
            return new sap.ushell.ui.tile.DynamicTile(
                {
                    title: "{/data/display_title_text}",
                    subtitle: "{/data/display_subtitle_text}",
                    info: "{/data/display_info_text}",
                    infoState: "{/data/display_info_state}",
                    icon: "{/data/display_icon_url}",
                    numberUnit: "{/data/display_number_unit}",
                    numberValue: "{/data/display_number_value}",
                    numberDigits: "{/data/display_number_digits}",
                    numberState: "{/data/display_number_state}",
                    numberFactor: "{/data/display_number_factor}",
                    actions: "{/data/actions}",
                    stateArrow: "{/data/display_state_arrow}",
                    targetURL: "{/nav/navigation_target_url}",
                    highlightTerms: "{/search/display_highlight_terms}",
                    press : [ oController.onPress, oController ]
                }
            );
        }
    });
}());
(function () {
    "use strict";
    sap.ui.controller("tiles.indicatorArea.AreaChartTile", {
        onInit: function () {
            var that = this;
            this.firstTimeVisible = false;
            this.oKpiTileView = this.getView();
            this.oViewData = this.oKpiTileView.getViewData(),
            this.oTileApi = this.oViewData.chip; // instance specific CHIP API
            if (this.oTileApi.visible) {
                this.oTileApi.visible.attachVisible(this.visibleHandler.bind(this));
            }
            this.system = this.oTileApi.url.getApplicationSystem();
            this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loading);
            try {
                sap.ushell.components.tiles.indicatorTileUtils.util.getParsedChip(
                        this.oTileApi.configuration.getParameterValueAsString("tileConfiguration"),function(config){
                            that.oConfig = config;
                            that.setTextInTile();
                            if (that.oTileApi.preview) {
                                that.oTileApi.preview.setTargetUrl(sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system));
                            }
                            if (that.oTileApi.preview.isEnabled()) {
                                that._updateTileModel({
                                    footer : "",
                                    description: "",

                                    width: "100%",
                                    height: "100%",
                                    chart: {
                                        color:"Good",
                                        data: [
                                               {day: 0, balance: 0},
                                               {day: 30, balance: 20},
                                               {day: 60, balance: 20},
                                               {day: 100, balance: 80}
                                               ]
                                    },
                                    target: {
                                        color:"Error",
                                        data: [
                                               {day: 0, balance: 0},
                                               {day: 30, balance: 30},
                                               {day: 60, balance: 40},
                                               {day: 100, balance: 90}
                                               ]
                                    },
                                    maxThreshold: {
                                        color: "Good",
                                        data: [
                                               {day: 0, balance: 0},
                                               {day: 30, balance: 40},
                                               {day: 60, balance: 50},
                                               {day: 100, balance: 100}
                                               ]
                                    },
                                    innerMaxThreshold: {
                                        color: "Error",
                                        data: [
                                               ]
                                    },
                                    innerMinThreshold: {
                                        color: "Neutral",
                                        data: [
                                               ]
                                    },
                                    minThreshold: {
                                        color: "Error",
                                        data: [
                                               {day: 0, balance: 0},
                                               {day: 30, balance: 20},
                                               {day: 60, balance: 30},
                                               {day: 100, balance: 70},
                                               ]
                                    },
                                    minXValue: 0,
                                    maxXValue: 100,
                                    minYValue: 0,
                                    maxYValue: 100,
                                    firstXLabel: { label: "June 123", color: "Error"   },
                                    lastXLabel: { label: "June 30", color: "Error" },
                                    firstYLabel: { label: "0M", color: "Good" },
                                    lastYLabel: { label: "80M", color: "Critical" },
                                    minLabel: { },
                                    maxLabel: { }
                                });
                                that.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                            } 
                            else{
                                that.oKpiTileView.oGenericTile.attachPress(function(){
                                    sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(that.trendChartODataReadRef);
                                    sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, null);
                                    window.location.hash = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                                });
                                if(Number(that.oTileApi.configuration.getParameterValueAsString("isSufficient"))){
                                    sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                                    that.flowWithoutDesignTimeCall();
                                }
                                else{
                                    that.flowWithDesignTimeCall();
                                }
                            }
                        });
            } catch (e) {
                this.logError(e);
            }
        },
        getTile: function () {
            return this.oKpiTileView.oGenericTile;
        },

        _setLocalModelToTile: function () {
            if (this.getTile().getModel()) {

            } else {
                this.getTile().setModel(new sap.ui.model.json.JSONModel({}));
            }
        },



        _updateTileModel: function (newData) {
            var modelData = this.getTile().getModel().getData();
            jQuery.extend(modelData, newData);
            this.getTile().getModel().setData(modelData);
        },


        onAfterFinalEvaluation: function () {
            var that = this;
            var sUri = this.DEFINITION_DATA.EVALUATION.ODATA_URL;
            var sEntitySet = this.DEFINITION_DATA.EVALUATION.ODATA_ENTITYSET;
            var sMeasure = this.DEFINITION_DATA.EVALUATION.COLUMN_NAME;
            var variantData = sap.ushell.components.tiles.indicatorTileUtils.util.prepareFilterStructure(this.DEFINITION_DATA.EVALUATION_FILTERS,this.DEFINITION_DATA.ADDITIONAL_FILTERS);
            var dimensionName = this.DEFINITION_DATA.TILE_PROPERTIES.dimension;
            if(dimensionName == undefined){
                this.logError();
                return;
            }
            var scaleFactor = this.DEFINITION_DATA.EVALUATION.SCALING;
            var goaltype = this.DEFINITION_DATA.EVALUATION.GOAL_TYPE;
            var evaluationValues = this.DEFINITION_DATA.EVALUATION_VALUES;
            var numberOfDecimals = null;
            if(this.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                var fullyFormedMeasure = sMeasure;
                switch(goaltype){
                case "MI" :
                    that.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                    that.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                    that.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    that.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    if(that.sWarningHigh && that.sCriticalHigh && that.sTarget)
                        fullyFormedMeasure += ","+that.sWarningHigh +"," +that.sCriticalHigh+","+ that.sTarget;
                    break;
                case "MA" :
                    that.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                    that.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                    that.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    that.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    if(that.sWarningLow && that.sCriticalLow && that.sTarget)
                        fullyFormedMeasure += ","+that.sWarningLow +"," +that.sCriticalLow+","+ that.sTarget;
                    break;
                case "RA" :
                    that.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                    that.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                    that.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    that.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    that.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                    that.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                    if(that.sWarningLow && that.sCriticalLow && that.sTarget && that.sWarningHigh && that.sCriticalHigh)
                        fullyFormedMeasure += ","+that.sWarningLow +"," +that.sCriticalLow+","+ that.sTarget + "," + that.sWarningHigh + "," + that.sCriticalHigh;
                    break;
                }
                var oQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(that.oTileApi.url.addSystemToServiceUrl(sUri), sEntitySet, fullyFormedMeasure, dimensionName, variantData);
            }
            else{
                var oQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(that.oTileApi.url.addSystemToServiceUrl(sUri), sEntitySet, sMeasure, dimensionName, variantData);
            }
            var cachedValue = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
            if(!cachedValue){
                if (oQuery) {
                    this.queryUriForTrendChart = oQuery.uri;
                    var writeData = {};
                    try{
                        this.trendChartODataReadRef = oQuery.model.read(oQuery.uri, null, null, true, function (data) {
                            if(data && data.results && data.results.length){
                                if (oQuery.unit){
                                    that.unit = data.results[0][oQuery.unit.name];
                                    writeData.unit = oQuery.unit;
                                    writeData.unit.name = oQuery.unit.name;
                                }
                                that.queryUriResponseForTrendChart = data;
                                dimensionName = sap.ushell.components.tiles.indicatorTileUtils.util.findTextPropertyForDimension(that.oTileApi.url.addSystemToServiceUrl(sUri), sEntitySet, dimensionName);
                                data.firstXlabel = data.results[0][dimensionName];
                                data.lastXlabel = data.results[data.results.length - 1][dimensionName];
                                writeData.data = data;
                                writeData.dimensionName = dimensionName;
                                sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, writeData);
                                var navTarget = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                                that.oKpiTileView.oGenericTile.$().wrap("<a href ='" + navTarget + "'/>")
                                that.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                                _applyData(data,that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE);
                            }
                            else {                                
                                that.logError("no Response from QueryServiceUri");
                            }
                        },function(eObject) {
                            if(eObject && eObject.response) {                                
                                that.logError("Data call failed");
                            }
                        });
                    }
                    catch(e){
                        that.logError(e);
                    }
                }
                else{
                    that.logError();
                }
            }
            else{
                try{
                    if (cachedValue.unit){
                        that.unit = cachedValue.data.results[0][cachedValue.unit.name];
                    }
                    that.queryUriResponseForTrendChart = cachedValue.data;
                    dimensionName = cachedValue.dimensionName;
                    that.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                    _applyData(cachedValue.data,that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE);
                }
                catch(e){
                    that.logError(e);
                }
            }
            function _applyData(data,type) {
                var dimensionArray = [];
                var measureArray = [];
                var wHArray = [];
                var cHArray = [];
                var cLArray = [];
                var wLArray = [];
                var dataLength = data.results.length;
                var firstXlabel = data.firstXlabel;
                var minThresholdMeasure, maxThresholdMeasure, innerMinThresholdMeasure, innerMaxThresholdMeasure, targetMeasure;
                var lastXlabel = data.lastXlabel;
                var firstYLabelValue = Number(data.results[0][sMeasure]);
                var lastYLabelValue = Number(data.results[data.results.length - 1][sMeasure]);

                for (i in data.results) {
                    data.results[i][dimensionName] = Number(i);
                    data.results[i][sMeasure] = Number(data.results[i][sMeasure]);
                    that.sWarningHigh ? data.results[i][that.sWarningHigh] = Number(data.results[i][that.sWarningHigh]) :"";
                    that.sCriticalHigh ? data.results[i][that.sCriticalHigh] = Number(data.results[i][that.sCriticalHigh]) :"";
                    that.sCriticalLow ? data.results[i][that.sCriticalLow] = Number(data.results[i][that.sCriticalLow]) :"";
                    that.sWarningLow ? data.results[i][that.sWarningLow] = Number(data.results[i][that.sWarningLow]) :"";
                    that.sTarget ? data.results[i][that.sTarget] = Number(data.results[i][that.sTarget]) :"";
                    that.sWarningHigh ? wHArray.push(data.results[i][that.sWarningHigh]) :"";
                    that.sCriticalHigh ? cHArray.push(data.results[i][that.sCriticalHigh]) :"";
                    that.sCriticalLow ? cLArray.push(data.results[i][that.sCriticalLow]):"";
                    that.sWarningLow ?  wLArray.push(data.results[i][that.sWarningLow]) :"";
                    dimensionArray.push(data.results[i][dimensionName]);
                    measureArray.push(data.results[i][sMeasure]);
                }
                try {
                    firstXlabel = sap.ushell.components.tiles.indicatorTileUtils.util.formatOdataObjectToString(firstXlabel);
                    lastXlabel =sap.ushell.components.tiles.indicatorTileUtils.util.formatOdataObjectToString(lastXlabel);
                } catch (e) {
                    that.logError(e);
                }
                var firstCalculatedValueForScaling = Number(firstYLabelValue);
                if(that.oConfig.EVALUATION.SCALING == -2)
                    firstCalculatedValueForScaling *= 100;
                var minMeasure = Math.min.apply(Math, measureArray); //to obtain the starting value
                var formattedFirstYLabel = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(firstCalculatedValueForScaling, that.oConfig.EVALUATION.SCALING);
                if(that.oConfig.EVALUATION.SCALING == -2)
                    formattedFirstYLabel += " %";
                var firstYLabel = formattedFirstYLabel.toString();

                var lastCalculatedValueForScaling = Number(lastYLabelValue);
                if(that.oConfig.EVALUATION.SCALING == -2)
                    lastCalculatedValueForScaling *= 100;
                var maxMeasure = Math.max.apply(Math, measureArray); //to obtain the last value
                var formattedLastYLabel = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(lastCalculatedValueForScaling, that.oConfig.EVALUATION.SCALING);
                if(that.oConfig.EVALUATION.SCALING == -2)
                    formattedLastYLabel += " %";
                var lastYLabel = formattedLastYLabel.toString();

                try {
                    var minDimension = sap.ushell.components.tiles.indicatorTileUtils.util.formatOdataObjectToString(Math.min.apply(Math, dimensionArray)); //to obtain the starting value 
                    var maxDimension = sap.ushell.components.tiles.indicatorTileUtils.util.formatOdataObjectToString(Math.max.apply(Math, dimensionArray)); //to obtain the last value
                } catch (e) {
                    that.logError(e);
                }
                if(type == "MEASURE"){
                    (wHArray.length !=0) ? (that.firstwH = wHArray[minDimension]) &&  (that.lastwH = wHArray[maxDimension]) :""; 
                    (cHArray.length !=0) ? (that.firstcH = cHArray[minDimension]) && (that.lastcH = cHArray[maxDimension]) : ""; 
                    (cLArray.length !=0) ? (that.firstcL = cLArray[minDimension]) && (that.lastcL = cLArray[maxDimension]) :"";
                    (wLArray.length !=0) ? ( that.firstwL = wLArray[minDimension]) && (that.lastwL = wLArray[maxDimension]):"";
                }
                var updatedModel = {
                        width: "100%",
                        height: "100%",
                        unit: that.unit || "",
                        chart: {
                            color: "Neutral",
                            data: data.results
                        },
                        size: "Auto",
                        minXValue: minDimension,
                        maxXValue: maxDimension,
                        minYValue: minMeasure,
                        maxYValue: maxMeasure,
                        firstXLabel: {
                            label: firstXlabel + "",
                            color: "Neutral"
                        },
                        lastXLabel: {
                            label: lastXlabel + "",
                            color: "Neutral"
                        },
                        firstYLabel: {
                            label: firstYLabel + "",
                            color: "Neutral"
                        },
                        lastYLabel: {
                            label: lastYLabel + "",
                            color: "Neutral"
                        },
                        minLabel: {},
                        maxLabel: {}
                };

                switch (goaltype) {
                case "MA":
                    for (i in evaluationValues) {
                        if (evaluationValues[i].TYPE == "CL") {
                            updatedModel.minThreshold = {
                                    color: "Error",
                            };
                            var newObj = new Object();
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.cl = Number(evaluationValues[i].FIXED);
                            updatedModel.minThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                            minThresholdMeasure = (type  == "MEASURE") ? that.sCriticalLow : sMeasure;

                        } else if (evaluationValues[i].TYPE == "WL") {
                            updatedModel.maxThreshold = {
                                    color: "Good"
                            };
                            var newObj = new Object();
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            updatedModel.maxThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                            maxThresholdMeasure= (type  == "MEASURE") ?  that.sWarningLow : sMeasure;
                            that.wl = Number(evaluationValues[i].FIXED);

                        }
                        else if (evaluationValues[i].TYPE == "TA") {
                            var newObj = new Object();
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            updatedModel.target = {
                                    color: "Neutral",
                            };
                            updatedModel.target.data = (type  == "MEASURE") ? data.results : [newObj];
                            targetMeasure= (type  == "MEASURE") ? that.sTarget : sMeasure;
                        }
                    }
                    updatedModel.innerMinThreshold = {
                            data: [

                                   ]
                    };
                    updatedModel.innerMaxThreshold = {
                            data: [

                                   ]
                    };
                    if(type  == "FIXED"){
                        updatedModel.firstYLabel.color =  firstYLabelValue < that.cl ? "Error" : ((that.cl <= firstYLabelValue) && (firstYLabelValue <= that.wl)) ? "Critical" : (firstYLabelValue > that.wl) ? "Good" : "Neutral" ;
                        updatedModel.lastYLabel.color = lastYLabelValue < that.cl ? "Error" : ((that.cl <= lastYLabelValue) && (lastYLabelValue <= that.wl)) ? "Critical" : (lastYLabelValue > that.wl) ? "Good" : "Neutral" ;
                    }
                    else if(type == "MEASURE" && that.firstwL && that.lastwL && that.firstcL && that.lastcL){
                        updatedModel.firstYLabel.color = firstYLabelValue < that.firstcL ? "Error" : ((that.firstcL <= firstYLabelValue) && (firstYLabelValue <= that.firstwL)) ? "Critical" : (firstYLabelValue > that.firstwL) ? "Good": "Neutral" ;
                        updatedModel.lastYLabel.color = lastYLabelValue < that.lastcL ? "Error" : ((that.lastcL <= lastYLabelValue) && (lastYLabelValue <= that.lastwL)) ? "Critical" : (lastYLabelValue > that.lastwL) ? "Good" : "Neutral" ;
                    }
                    break;
                case "MI":
                    for (i in evaluationValues) {

                        if (evaluationValues[i].TYPE == "CH") {
                            var newObj = new Object();
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.ch =  Number(evaluationValues[i].FIXED);
                            updatedModel.maxThreshold = {
                                    color: "Error",
                            };
                            updatedModel.maxThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                            maxThresholdMeasure= (type  == "MEASURE") ? that.sCriticalHigh : sMeasure;
                        } else if (evaluationValues[i].TYPE == "WH") {
                            var newObj = new Object();
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.wh = Number(evaluationValues[i].FIXED);
                            updatedModel.minThreshold = {
                                    color: "Good",
                            };
                            updatedModel.minThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                            minThresholdMeasure= (type  == "MEASURE") ? that.sWarningHigh : sMeasure;

                        } else if (evaluationValues[i].TYPE == "TA") {
                            var newObj = new Object();
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            updatedModel.target = {
                                    color: "Neutral",
                            };
                            updatedModel.target.data = (type  == "MEASURE") ? data.results : [newObj];
                            targetMeasure= (type  == "MEASURE") ? that.sTarget : sMeasure;
                        }


                    }
                    if(type  == "FIXED"){
                        updatedModel.firstYLabel.color = firstYLabelValue > that.ch ? "Error" : ((that.wh <= firstYLabelValue) && (firstYLabelValue <= that.ch)) ? "Critical" : (firstYLabelValue < that.wh) ? "Good" : "Neutral" ;
                        updatedModel.lastYLabel.color = lastYLabelValue > that.ch ? "Error" : ((that.wh <= lastYLabelValue) && (lastYLabelValue <= that.ch)) ? "Critical" : (lastYLabelValue < that.wh) ? "Good" : "Neutral" ;
                    }
                    else if(type == "MEASURE" && that.firstwH && that.lastwH && that.firstcH && that.lastcH){
                        updatedModel.firstYLabel.color = firstYLabelValue > that.firstcH ? "Error" : ((that.firstwH <= firstYLabelValue) && (firstYLabelValue <= that.firstcH)) ? "Critical" : (firstYLabelValue < that.firstwH) ? "Good" : "Neutral" ;
                        updatedModel.lastYLabel.color = lastYLabelValue > that.lastcH ? "Error" : ((that.lastwH <= lastYLabelValue) && (lastYLabelValue <= that.lastcH)) ? "Critical" : (lastYLabelValue < that.lastwH) ? "Good" : "Neutral" ;

                    }
                    updatedModel.innerMaxThreshold = {
                            data: [

                                   ]
                    };
                    updatedModel.innerMinThreshold = {
                            data: [

                                   ]
                    };
                    break;
                case "RA":
                    for (i in evaluationValues) {

                        if (evaluationValues[i].TYPE == "CH") {
                            var newObj = new Object();
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.ch = Number(evaluationValues[i].FIXED);
                            updatedModel.maxThreshold = {
                                    color: "Error",
                            };
                            updatedModel.maxThreshold.data = (type  == "MEASURE") ?  data.results : [newObj];
                            maxThresholdMeasure= (type  == "MEASURE") ? that.sCriticalHigh : sMeasure;
                        } else if (evaluationValues[i].TYPE == "WH") {
                            var newObj = new Object();
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.wh = Number(evaluationValues[i].FIXED);
                            updatedModel.innerMaxThreshold = {
                                    color: "Good",
                            };
                            updatedModel.innerMaxThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                            innerMaxThresholdMeasure= (type  == "MEASURE") ? that.sWarningHigh : sMeasure;
                        } else if (evaluationValues[i].TYPE == "WL") {
                            var newObj = new Object();
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.wl = Number(evaluationValues[i].FIXED);
                            updatedModel.innerMinThreshold = {
                                    color: "Good",
                            };
                            updatedModel.innerMinThreshold.data = (type  == "MEASURE") ?  data.results : [newObj];
                            innerMinThresholdMeasure= (type  == "MEASURE") ? that.sWarningLow : sMeasure;
                        } else if (evaluationValues[i].TYPE == "CL") {
                            var newObj = new Object();
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.cl = Number(evaluationValues[i].FIXED);
                            updatedModel.minThreshold = {
                                    color: "Error",
                            };
                            updatedModel.minThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                            minThresholdMeasure= (type  == "MEASURE") ? that.sCriticalLow : sMeasure;
                        } else if (evaluationValues[i].TYPE == "TA") {
                            var newObj = new Object();
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            updatedModel.target = {
                                    color: "Neutral",
                            };
                            updatedModel.target.data = (type  == "MEASURE") ? data.results : [newObj];
                            targetMeasure= (type  == "MEASURE") ? that.sTarget : sMeasure;
                        }
                    }
                    if(type  == "FIXED"){
                        updatedModel.firstYLabel.color = (firstYLabelValue > that.ch || firstYLabelValue < that.cl ) ? "Error" : ((that.wh <= firstYLabelValue) && (firstYLabelValue <= that.ch)) || ((that.cl <= firstYLabelValue) && (firstYLabelValue <= that.wl))  ? "Critical" : ((firstYLabelValue >= that.wl) && (firstYLabelValue <= that.wh)) ? "Good" : "Neutral" ;
                        updatedModel.lastYLabel.color = (lastYLabelValue > that.ch || lastYLabelValue < that.cl ) ? "Error" : ((that.wh <= lastYLabelValue) && (lastYLabelValue <= that.ch)) || ((that.cl <= lastYLabelValue) && (lastYLabelValue <= that.wl))  ? "Critical" : ((lastYLabelValue >= that.wl) && (lastYLabelValue <= that.wh)) ? "Good"  : "Neutral" ;
                    }
                    else if(type == "MEASURE" && that.firstwL && that.lastwL && that.firstcL && that.lastcL && that.firstwH && that.lastwH && that.firstcH && that.lastcH){
                        updatedModel.firstYLabel.color = (firstYLabelValue > that.firstcH || firstYLabelValue < that.firstcL ) ? "Error" : ((that.firstwH <= firstYLabelValue) && (firstYLabelValue <= that.firstcH)) || ((that.firstcL <= firstYLabelValue) && (firstYLabelValue <= that.firstwL))  ? "Critical" : ((firstYLabelValue >= that.firstwL) && (firstYLabelValue <= that.firstwH)) ? "Good" : "Neutral" ;
                        updatedModel.lastYLabel.color = (lastYLabelValue > that.lastcH || lastYLabelValue < that.lastcL ) ? "Error" : ((that.lastwH <= lastYLabelValue) && (lastYLabelValue <= that.lastcH)) || ((that.lastcL <= lastYLabelValue) && (lastYLabelValue <= that.lastwL))  ? "Critical" : ((lastYLabelValue >= that.lastwL) && (lastYLabelValue <= that.lastwH)) ? "Good" : "Neutral" ;
                    }
                    break;

                }




                var buildChartItem = function (sName, a, b, type) {
                    return new sap.suite.ui.commons.MicroAreaChartItem({
                        color: "{/" + sName + "/color}",
                        points: {
                            path: "/" + sName + "/data",
                            template: new sap.suite.ui.commons.MicroAreaChartPoint({
                                x: "{" + a + "}",
                                y: "{" + b + "}"

                            })
                        }
                    });
                };
                that.getTile().getTileContent()[0].getContent().setTarget(buildChartItem("target", dimensionName, targetMeasure));
                that.getTile().getTileContent()[0].getContent().setInnerMinThreshold(buildChartItem("innerMinThreshold", dimensionName, innerMinThresholdMeasure));
                that.getTile().getTileContent()[0].getContent().setInnerMaxThreshold(buildChartItem("innerMaxThreshold", dimensionName, innerMaxThresholdMeasure));
                that.getTile().getTileContent()[0].getContent().setMinThreshold(buildChartItem("minThreshold", dimensionName, minThresholdMeasure));
                that.getTile().getTileContent()[0].getContent().setMaxThreshold(buildChartItem("maxThreshold", dimensionName, maxThresholdMeasure));
                that.getTile().getTileContent()[0].getContent().setChart(buildChartItem("chart", dimensionName, sMeasure));



                that._updateTileModel(updatedModel);
            }
        },

        flowWithoutDesignTimeCall: function () {
            var that = this;
            this.DEFINITION_DATA = this.oConfig;
            this._updateTileModel(this.DEFINITION_DATA);
            if(this.oTileApi.visible.isVisible() && !this.firstTimeVisible)
                this.firstTimeVisible = true;
            this.onAfterFinalEvaluation();

        },

        flowWithDesignTimeCall: function () {
            var that = this;
            try {
                var evaluationData = sap.ushell.components.tiles.indicatorTileUtils.cache.getEvaluationById(this.oConfig.EVALUATION.ID)
                if (evaluationData) {
                    that.oConfig.EVALUATION_FILTERS = evaluationData.EVALUATION_FILTERS;
                    that.flowWithoutDesignTimeCall();
                } else {
                    sap.ushell.components.tiles.indicatorTileUtils.util.getFilterFromRunTimeService(this.oConfig, function (filter) {
                        that.oConfig.EVALUATION_FILTERS = filter;
                        sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id, that.oConfig);
                        that.flowWithoutDesignTimeCall();
                    });
                }
            } catch (e) {
                this.logError(e);
            }
        },

        setTextInTile: function () {
            var that = this;
            this._updateTileModel({
                header: that.oTileApi.preview.getTitle() || sap.ushell.components.tiles.indicatorTileUtils.util.getChipTitle(that.oConfig),
                subheader: that.oTileApi.preview.getDescription() || sap.ushell.components.tiles.indicatorTileUtils.util.getChipSubTitle(that.oConfig)
            });
        },
        logError: function (err) {
            this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
            this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
            sap.ushell.components.tiles.indicatorTileUtils.util.logError(err);
        },
        refreshHandler: function (oController) {
            if(!oController.firstTimeVisible){
                if(Number(this.oTileApi.configuration.getParameterValueAsString("isSufficient")))
                    oController.flowWithoutDesignTimeCall();
                else
                    oController.flowWithDesignTimeCall();
            }


        },
        visibleHandler: function (isVisible) {
            var that = this;
            if (!isVisible) {
                this.firstTimeVisible = false;
                sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.trendChartODataReadRef);
            }
            if (isVisible) {
                this.refreshHandler(this);
            }
        },
        onExit : function(){
            sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.trendChartODataReadRef);
        }
    });
}());

sap.ui.controller("tiles.indicatorcomparison.ComparisonTile", {

    onInit:function(){

        var that = this;
        this.firstTimeVisible = false;
        this.oComparisonTileView = this.getView();
        this.oChip = this.oComparisonTileView.getViewData().chip;
        if (this.oChip.visible) {
            this.oChip.visible.attachVisible(this.visibleHandler.bind(this));
        }
        this.system = this.oChip.url.getApplicationSystem();
        this.oComparisonTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loading);
        try{
            sap.ushell.components.tiles.indicatorTileUtils.util.getParsedChip(
                    this.oChip.configuration.getParameterValueAsString("tileConfiguration"), function(config){
                        that.oConfig = config;
                        if (that.oChip.preview) {
                            that.oChip.preview.setTargetUrl(sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system));
                        }
                        if(that.oChip.preview.isEnabled()){
                            that.setTitle();
                            that._updateTileModel({
                                value: 8888,
                                size: sap.suite.ui.commons.InfoTileSize.Auto,
                                frameType:"OneByOne",
                                state: sap.suite.ui.commons.LoadState.Loading,
                                valueColor:sap.suite.ui.commons.InfoTileValueColor.Error,
                                indicator: sap.suite.ui.commons.DeviationIndicator.None,
                                title : "Liquidity Structure",
                                footer : "Current Quarter",
                                description: "Apr 1st 2013 (B$)",
                                data: [
                                       { title: "Measure 1", value: 1.2, color: "Good" },
                                       { title: "Measure 2", value: 0.78, color: "Good" },
                                       { title: "Measure 3", value: 1.4, color: "Error" }
                                       ],
                            });
                            that.oComparisonTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                        }
                        else {

                            that.oConfig.TILE_PROPERTIES.FINALVALUE;
                            that.setTitle();
                            that.oComparisonTileView.oGenericTile.attachPress(function(){
                                sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(that.comparisionChartODataRef);
                                sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, null);
                                window.location.hash = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                            });
                            if(Number(that.oChip.configuration.getParameterValueAsString("isSufficient"))){
                                sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                                that.flowWithoutDesignTimeCall();
                            }
                            else{
                                that.flowWithDesignTimeCall();
                            }
                        }
                    }
            );            
        }
        catch(e){
            this.logError(e);
        }
    },   

    getTile : function() {
        return this.oComparisonTileView.oGenericTile;
    },

    setTitle : function(){         
        var that =this;
        this._updateTileModel({
            header : that.oChip.preview.getTitle() || sap.ushell.components.tiles.indicatorTileUtils.util.getChipTitle(that.oConfig ),
            subheader : that.oChip.preview.getDescription() || sap.ushell.components.tiles.indicatorTileUtils.util.getChipSubTitle(that.oConfig )
        });
    },

    _updateTileModel : function(newData) {
        var modelData  = this.getTile().getModel().getData();
        jQuery.extend(modelData,newData);
        this.getTile().getModel().setData(modelData);
    },

    flowWithoutDesignTimeCall: function(){
        var that = this;
        this.DEFINITION_DATA = this.oConfig;
        this._updateTileModel(this.DEFINITION_DATA);
        if(this.oChip.visible.isVisible() && !this.firstTimeVisible){
            this.firstTimeVisible = true;
            this.fetchKpiValue(function(kpiValue){
                this.CALCULATED_KPI_VALUE=kpiValue;
                if(that.oConfig.TILE_PROPERTIES.frameType == "TwoByOne"){
                    that.oComparisonTileView.oGenericTile.setFrameType("TwoByOne");
                    that.oComparisonTileView.oGenericTile.removeAllTileContent();
                    that.oComparisonTileView.oGenericTile.addTileContent(that.oComparisonTileView.oNumericTile);
                    that.oComparisonTileView.oGenericTile.addTileContent(that.oComparisonTileView.oComparisonTile);
                }
                else {
                    that.oComparisonTileView.oGenericTile.setFrameType("OneByOne");
                    that.oComparisonTileView.oGenericTile.removeAllTileContent();
                    that.oComparisonTileView.oGenericTile.addTileContent(that.oComparisonTileView.oComparisonTile);
                }
                this._updateTileModel({
                    data : this.CALCULATED_KPI_VALUE
                });
                var navTarget = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                that.oComparisonTileView.oGenericTile.$().wrap("<a href ='" + navTarget + "'/>")
                this.oComparisonTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
            }, this.logError);  
        }
    },

    flowWithDesignTimeCall: function() {
        var that = this;
        try{
            var evaluationData = sap.ushell.components.tiles.indicatorTileUtils.cache.getEvaluationById(this.oConfig.EVALUATION.ID)
            if(evaluationData){
                that.oConfig.EVALUATION_FILTERS = evaluationData.EVALUATION_FILTERS;
                that.flowWithoutDesignTimeCall();
            }
            else{
                sap.ushell.components.tiles.indicatorTileUtils.util.getFilterFromRunTimeService(this.oConfig,function(filter){
                    that.oConfig.EVALUATION_FILTERS = filter;
                    sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                    that.flowWithoutDesignTimeCall();
                });
            }
        }
        catch(e){
            this.logError(e);
        }
    },

    fetchKpiValue: function(fnSuccess, fnError){

        var that = this;

        try {
            /* Preparing arguments for the prepareQueryServiceUri function */
            var sUri= this.oConfig.EVALUATION.ODATA_URL;
            var entitySet= this.oConfig.EVALUATION.ODATA_ENTITYSET;
            if(this.oConfig.TILE_PROPERTIES.semanticMeasure){
                /* 
                 * Semantic Measure Inclusion (for Future use)
                 * var measure = [];
                 * measure.push(this.oConfig.EVALUATION.COLUMN_NAME);
                 * measure.push(this.oConfig.TILE_PROPERTIES.semanticMeasure);
                 * */             
                var measure=this.oConfig.EVALUATION.COLUMN_NAME+","+this.oConfig.TILE_PROPERTIES.semanticMeasure;
            }
            else {

                var measure=this.oConfig.EVALUATION.COLUMN_NAME;
                var measures=measure;

                for(var j=0;j<this.oConfig.EVALUATION.COLUMN_NAMES.length;j++){
                    if(this.oConfig.EVALUATION.COLUMN_NAMES[j].COLUMN_NAME != this.oConfig.EVALUATION.COLUMN_NAME)
                        measures = measures + "," +this.oConfig.EVALUATION.COLUMN_NAMES[j].COLUMN_NAME ;

                }

            }

            var data= this.oConfig.EVALUATION_VALUES;
            var cachedValue = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
            if(!cachedValue){
                var variants = sap.ushell.components.tiles.indicatorTileUtils.util.prepareFilterStructure(this.oConfig.EVALUATION_FILTERS,this.oConfig.ADDITIONAL_FILTERS);

                var orderByObject = {};
                orderByObject["0"] = measure+",asc";
                orderByObject["1"] = measure+",desc";

                var orderByElement = orderByObject[this.oConfig.TILE_PROPERTIES.sortOrder||"0"].split(",");
                var finalQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(that.oChip.url.addSystemToServiceUrl(sUri), entitySet, measures,null, variants, 3);        
                if(this.oConfig.TILE_PROPERTIES.semanticMeasure)
                    finalQuery.uri += "&$top=3&$orderby="+orderByElement[0]+" "+orderByElement[2];
                else
                    finalQuery.uri += "&$top=3&$orderby="+orderByElement[0]+" "+orderByElement[1] ;


                this.comparisionChartODataRef = finalQuery.model.read(finalQuery.uri, null, null, false, function(data) {
                    var writeData = {};
                    if(finalQuery.unit){
                        that._updateTileModel({
                            unit : data.results[0][finalQuery.unit.name]
                        });
                        writeData.unit = finalQuery.unit;
                        writeData.unit.name = finalQuery.unit.name;
                    }

                    if(data && data.results && data.results.length) {


                        that.oConfig.TILE_PROPERTIES.FINALVALUE = data;
                        that.oConfig.TILE_PROPERTIES.FINALVALUE = that._processDataForComparisonChart(that.oConfig.TILE_PROPERTIES.FINALVALUE,measures.split(",")[0]);
                        writeData.data = data;
                        sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, writeData);
                        fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                    } 
                    else if(data.results.length == 0){
                        that.oConfig.TILE_PROPERTIES.FINALVALUE = data;
                        writeData.data = data;
                        sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, writeData);
                        fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                    }
                    else {
                        fnError.call(that,"no Response from QueryServiceUri");
                    }
                },function(eObject) {
                    if(eObject && eObject.response) {
                        jQuery.sap.log.error(eObject.message +" : "+eObject.request.requestUri);
                        fnError.call(that,eObject);
                    }
                });
            }
            else{
                if(cachedValue.unit){
                    that._updateTileModel({
                        unit : cachedValue.data.results[0][cachedValue.unit.name]
                    });
                }
                if(cachedValue.data && cachedValue.data.results && cachedValue.data.results.length) {
                    //dimension = cachedValue.dimension;
                    that.oConfig.TILE_PROPERTIES.FINALVALUE = cachedValue.data;
                    that.oConfig.TILE_PROPERTIES.FINALVALUE = that._processDataForComparisonChart(that.oConfig.TILE_PROPERTIES.FINALVALUE,measures);
                    fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                } 
                else if(data.results.length == 0){
                    that.oConfig.TILE_PROPERTIES.FINALVALUE = cachedValue.data;
                    fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                }
                else {
                    fnError.call(that,"no Response from QueryServiceUri");
                }
            }
        }
        catch(e){
            fnError.call(that,e);
        }
    },

    _processDataForComparisonChart: function(data,measure){
        //var semanticMeasure = this.oConfig.TILE_PROPERTIES.semanticObject;
        var finalOutput= [], LABEL_MAPPING={}, i, tempObject, l;
        var tempVar;
        var aTitles = [];
        var that = this;

        for(i=0;i<data.results.length;i++) {
            var eachData=data.results[i];
        }
        aTitles = sap.ushell.components.tiles.indicatorTileUtils.util.getAllMeasuresWithLabelText(this.oConfig.EVALUATION.ODATA_URL, this.oConfig.EVALUATION.ODATA_ENTITYSET);
        for(i = 0 , l=aTitles.length; i< l;i++) {
            tempObject = aTitles[i];
            LABEL_MAPPING[tempObject.key] = tempObject.value;
        }

        for(i=0;i<that.oConfig.EVALUATION.COLUMN_NAMES.length; i++){
            var temp={};
            var columnObject = that.oConfig.EVALUATION.COLUMN_NAMES[i];
            temp.value=Number(eachData[columnObject.COLUMN_NAME]);
            var calculatedValueForScaling = Number(eachData[columnObject.COLUMN_NAME]);
            if(that.oConfig.EVALUATION.SCALING == -2)
                calculatedValueForScaling *= 100;
            tempVar = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(calculatedValueForScaling, that.oConfig.EVALUATION.SCALING);
            if(that.oConfig.EVALUATION.SCALING == -2)
                tempVar += " %";
            temp.displayValue = tempVar.toString();

            temp.color = columnObject.semanticColor;
            temp.title = LABEL_MAPPING[columnObject.COLUMN_NAME] || columnObject.COLUMN_NAME;

            finalOutput.push(temp);

        }

        return finalOutput;
    },

    logError: function(err){
        this.oComparisonTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
        this.oComparisonTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
        sap.ushell.components.tiles.indicatorTileUtils.util.logError(err);
    },
    refreshHandler: function (oController) {
        if(!oController.firstTimeVisible){
            if(Number(this.oChip.configuration.getParameterValueAsString("isSufficient")))
                oController.flowWithoutDesignTimeCall();
            else
                oController.flowWithDesignTimeCall();
        }
            
    },
    visibleHandler: function (isVisible) {
        if (!isVisible) {
            this.firstTimeVisible = false;
            sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.comparisionChartODataRef);
        }
        if (isVisible) {
            this.refreshHandler(this);
        }
    },
    onExit : function(){
        sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.comparisionChartODataRef);
    }
});

sap.ui.controller("tiles.indicatorcontribution.ContributionTile", {

    onInit:function(){

        var that = this;
        this.firstTimeVisible = false;
        this.oContributionTileView = this.getView();
        this.oChip = this.oContributionTileView.getViewData().chip;
        if (this.oChip.visible) {
            this.oChip.visible.attachVisible(this.visibleHandler.bind(this));
        }
        this.system = this.oChip.url.getApplicationSystem();
        this.oContributionTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loading);
        try{
            sap.ushell.components.tiles.indicatorTileUtils.util.getParsedChip(
                    this.oChip.configuration.getParameterValueAsString("tileConfiguration"), function(config){
                        that.oConfig = config;
                        if (that.oChip.preview) {
                            that.oChip.preview.setTargetUrl(sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system));
                        }
                        if(that.oChip.preview.isEnabled()){
                            that.setTitle();
                            that._updateTileModel({
                                value: 8888,
                                size: sap.suite.ui.commons.InfoTileSize.Auto,
                                frameType:"OneByOne",
                                state: sap.suite.ui.commons.LoadState.Loading,
                                valueColor:sap.suite.ui.commons.InfoTileValueColor.Error,
                                indicator: sap.suite.ui.commons.DeviationIndicator.None,
                                title : "US Profit Margin",
                                footer : "Current Quarter",
                                description: "Maximum deviation",
                                data: [
                                       { title: "Americas", value: 10, color: "Neutral" },
                                       { title: "EMEA", value: 50, color: "Neutral" },
                                       { title: "APAC", value: -20, color: "Neutral" }
                                       ],
                            });
                            that.oContributionTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                        }
                        else {
                            that.oConfig.TILE_PROPERTIES.FINALVALUE;
                            that.setTitle();
                            that.oContributionTileView.oGenericTile.attachPress(function(){
                                sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(that.comparisionChartODataRef);
                                sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, null);
                                window.location.hash = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                            });
                            if(Number(that.oChip.configuration.getParameterValueAsString("isSufficient"))){
                                sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                                that.flowWithoutDesignTimeCall();
                            }
                            else{
                                that.flowWithDesignTimeCall();
                            }
                        }
                    }
            );            
        }
        catch(e){
            this.logError(e);
        }
    },   

    getTile : function() {
        return this.oContributionTileView.oGenericTile;
    },

    setTitle : function(){         
        var that =this;
        this._updateTileModel({
            header : that.oChip.preview.getTitle() || sap.ushell.components.tiles.indicatorTileUtils.util.getChipTitle(that.oConfig ),
            subheader : that.oChip.preview.getDescription() || sap.ushell.components.tiles.indicatorTileUtils.util.getChipSubTitle(that.oConfig )
        });
    },

    _updateTileModel : function(newData) {
        var modelData  = this.getTile().getModel().getData();
        jQuery.extend(modelData,newData);
        this.getTile().getModel().setData(modelData);
    },

    flowWithoutDesignTimeCall: function(){
        var that = this;
        this.DEFINITION_DATA = this.oConfig;
        this._updateTileModel(this.DEFINITION_DATA);
        if(this.oChip.visible.isVisible() && !this.firstTimeVisible){
            this.firstTimeVisible = true;
            this.fetchKpiValue(function(kpiValue){
                this.CALCULATED_KPI_VALUE=kpiValue;
                if(that.oConfig.TILE_PROPERTIES.frameType == "TwoByOne"){
                    that.oContributionTileView.oGenericTile.setFrameType("TwoByOne");
                    that.oContributionTileView.oGenericTile.removeAllTileContent();
                    that.oContributionTileView.oGenericTile.addTileContent(that.oContributionTileView.oNumericTile);
                    that.oContributionTileView.oGenericTile.addTileContent(that.oContributionTileView.oComparisonTile);
                }
                else {
                    that.oContributionTileView.oGenericTile.setFrameType("OneByOne");
                    that.oContributionTileView.oGenericTile.removeAllTileContent();
                    that.oContributionTileView.oGenericTile.addTileContent(that.oContributionTileView.oComparisonTile);
                }
                this._updateTileModel({
                    data : this.CALCULATED_KPI_VALUE
                });
                var navTarget = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                that.oContributionTileView.oGenericTile.$().wrap("<a href ='" + navTarget + "'/>")
                this.oContributionTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
            }, this.logError);  
        }
    },

    flowWithDesignTimeCall: function() {
        var that = this;
        try{
            var evaluationData = sap.ushell.components.tiles.indicatorTileUtils.cache.getEvaluationById(this.oConfig.EVALUATION.ID)
            if(evaluationData){
                that.oConfig.EVALUATION_FILTERS = evaluationData.EVALUATION_FILTERS;
                that.flowWithoutDesignTimeCall();
            }
            else{
                sap.ushell.components.tiles.indicatorTileUtils.util.getFilterFromRunTimeService(this.oConfig,function(filter){
                    that.oConfig.EVALUATION_FILTERS = filter;
                    sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                    that.flowWithoutDesignTimeCall();
                });
            }
        }
        catch(e){
            this.logError(e);
        }
    },

    fetchKpiValue: function(fnSuccess, fnError){

        var that = this;

        try {
            /* Preparing arguments for the prepareQueryServiceUri function */
            var sUri= this.oConfig.EVALUATION.ODATA_URL;
            var entitySet= this.oConfig.EVALUATION.ODATA_ENTITYSET;
            if(this.oConfig.TILE_PROPERTIES.semanticMeasure){
                /* 
                 * Semantic Measure Inclusion (for Future use)
                 * var measure = [];
                 * measure.push(this.oConfig.EVALUATION.COLUMN_NAME);
                 * measure.push(this.oConfig.TILE_PROPERTIES.semanticMeasure);
                 * */             
                var measure=this.oConfig.EVALUATION.COLUMN_NAME+","+this.oConfig.TILE_PROPERTIES.semanticMeasure;
            }
            else {
                var measure= this.oConfig.EVALUATION.COLUMN_NAME;
            }
            var dimension = this.oConfig.TILE_PROPERTIES.dimension;
            var data= this.oConfig.EVALUATION_VALUES;
            var cachedValue = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
            if(!cachedValue){
                var variants = sap.ushell.components.tiles.indicatorTileUtils.util.prepareFilterStructure(this.oConfig.EVALUATION_FILTERS,this.oConfig.ADDITIONAL_FILTERS);
                var orderByObject = {};
                orderByObject["0"] = measure+",asc";
                orderByObject["1"] = measure+",desc";
                orderByObject["2"] = dimension+",asc";
                orderByObject["3"] = dimension+",desc";
                var orderByElement = orderByObject[this.oConfig.TILE_PROPERTIES.sortOrder||"0"].split(",");
                var finalQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(that.oChip.url.addSystemToServiceUrl(sUri), entitySet, measure, dimension, variants, 3);        
                if(this.oConfig.TILE_PROPERTIES.semanticMeasure)
                    finalQuery.uri += "&$top=3&$orderby="+orderByElement[0]+" "+orderByElement[2];
                else
                    finalQuery.uri += "&$top=3&$orderby="+orderByElement[0]+" "+orderByElement[1];             

                this.comparisionChartODataRef = finalQuery.model.read(finalQuery.uri, null, null, false, function(data) {
                    var writeData = {};
                    if(finalQuery.unit){
                        that._updateTileModel({
                            unit : data.results[0][finalQuery.unit.name]
                        });
                        writeData.unit = finalQuery.unit;
                        writeData.unit.name = finalQuery.unit.name;
                    }
                    if(data && data.results && data.results.length) {
                        dimension = sap.ushell.components.tiles.indicatorTileUtils.util.findTextPropertyForDimension(that.oChip.url.addSystemToServiceUrl(sUri), entitySet, dimension);
                        writeData.dimension = dimension;                        
                        that.oConfig.TILE_PROPERTIES.FINALVALUE = data;
                        that.oConfig.TILE_PROPERTIES.FINALVALUE = that._processDataForComparisonChart(that.oConfig.TILE_PROPERTIES.FINALVALUE,measure.split(",")[0],dimension);
                        writeData.data = data;
                        sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, writeData);
                        fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                    } 
                    else if(data.results.length == 0){
                        that.oConfig.TILE_PROPERTIES.FINALVALUE = data;
                        writeData.data = data;
                        sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, writeData);
                        fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                    }
                    else {
                        fnError.call(that,"no Response from QueryServiceUri");
                    }
                },function(eObject) {
                    if(eObject && eObject.response) {
                        jQuery.sap.log.error(eObject.message +" : "+eObject.request.requestUri);
                        fnError.call(that,eObject);
                    }
                });
            }
            else{
                if(cachedValue.unit){
                    that._updateTileModel({
                        unit : cachedValue.data.results[0][cachedValue.unit.name]
                    });
                }
                if(cachedValue.data && cachedValue.data.results && cachedValue.data.results.length) {
                    dimension = cachedValue.dimension;
                    that.oConfig.TILE_PROPERTIES.FINALVALUE = cachedValue.data;
                    that.oConfig.TILE_PROPERTIES.FINALVALUE = that._processDataForComparisonChart(that.oConfig.TILE_PROPERTIES.FINALVALUE,measure.split(",")[0],dimension);
                    fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                } 
                else if(data.results.length == 0){
                    that.oConfig.TILE_PROPERTIES.FINALVALUE = cachedValue.data;
                    fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                }
                else {
                    fnError.call(that,"no Response from QueryServiceUri");
                }
            }
        }
        catch(e){
            fnError.call(that,e);
        }
    },

    _processDataForComparisonChart: function(data,measure,dimension){
        var semanticColor = this.oConfig.TILE_PROPERTIES.semanticColorContribution;
        var finalOutput= [];
        var tempVar;
        var that = this;
        for(var i=0;i<data.results.length;i++) {
            var eachData=data.results[i];
            var temp={};
            try {
                temp.title = eachData[dimension].toString();
            } 
            catch(e){
                temp.title = "";
            };
            temp.value=Number(eachData[measure]);
            var calculatedValueForScaling = Number(eachData[measure]);
            if(this.oConfig.EVALUATION.SCALING == -2)
                calculatedValueForScaling *= 100;
            tempVar = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(calculatedValueForScaling,this.oConfig.EVALUATION.SCALING);
            if(this.oConfig.EVALUATION.SCALING == -2)
                tempVar += " %"
            temp.displayValue = tempVar.toString();
            if(typeof semanticColor === 'undefined'){
                temp.color= "Neutral";
            }
            else {
                temp.color= semanticColor;
             /*   if(this.oConfig.EVALUATION.GOAL_TYPE === "MA"){
                    if(temp.value > eachData[semanticMeasure]){
                        temp.color= "Good";
                    }
                    else {
                        temp.color= "Error";
                    }
                }
                else if(this.oConfig.EVALUATION.GOAL_TYPE === "MI"){
                    if(temp.value < eachData[semanticMeasure]){
                        temp.color= "Good";
                    }
                    else {
                        temp.color= "Error";
                    }
                }
                else {
                    temp.color= "Neutral";
                }*/
            }
            finalOutput.push(temp);
        }
        return finalOutput;        
    },

    logError: function(err){
        this.oContributionTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
        this.oContributionTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
        sap.ushell.components.tiles.indicatorTileUtils.util.logError(err);
    },
    refreshHandler: function (oController) {
        if(!oController.firstTimeVisible){
            if(Number(this.oChip.configuration.getParameterValueAsString("isSufficient")))
                oController.flowWithoutDesignTimeCall();
            else
                oController.flowWithDesignTimeCall();
        }
            
    },
    visibleHandler: function (isVisible) {
        if (!isVisible) {
            this.firstTimeVisible =  false;
            sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.comparisionChartODataRef);
        }
        if (isVisible) {
            this.refreshHandler(this);
        }
    },
    onExit : function(){
        sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.comparisionChartODataRef);
    }
});
(function () {  
    "use strict";
    sap.ui.controller("tiles.indicatordeviation.DeviationTile", {
        onInit : function () {
            var that = this;
            this.firstTimeVisible = false;
            this.oKpiTileView = this.getView();
            this.oViewData = this.oKpiTileView.getViewData(),
            this.oTileApi = this.oViewData.chip; // instance specific CHIP API
            if (this.oTileApi.visible) {
                this.oTileApi.visible.attachVisible(this.visibleHandler.bind(this));
            }
            this.system = this.oTileApi.url.getApplicationSystem();
            this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loading);
            try{
                sap.ushell.components.tiles.indicatorTileUtils.util.getParsedChip(
                        this.oTileApi.configuration.getParameterValueAsString("tileConfiguration"),function(config){
                            that.oConfig = config;
                            that.setTextInTile();
                            if (that.oTileApi.preview) {
                                that.oTileApi.preview.setTargetUrl(sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system));
                            }
                            if(that.oTileApi.preview.isEnabled()){
                                that._updateTileModel({
                                    actual: { value: 120, color: sap.suite.ui.commons.InfoTileValueColor.Good},
                                    targetValue: 100,
                                    thresholds: [
                                                 { value: 0, color: sap.suite.ui.commons.InfoTileValueColor.Error },
                                                 { value: 50, color: sap.suite.ui.commons.InfoTileValueColor.Critical },
                                                 { value: 150, color: sap.suite.ui.commons.InfoTileValueColor.Critical },
                                                 { value: 200, color: sap.suite.ui.commons.InfoTileValueColor.Error }
                                                 ],
                                                 showActualValue: true,
                                                 showTargetValue: true
                                });
                                that.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                            }
                            else{
                                that.oKpiTileView.oGenericTile.attachPress(function(){
                                    sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(that.queryServiceUriODataReadRef);
                                    sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, null);
                                    window.location.hash = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                                });
                                if(Number(that.oTileApi.configuration.getParameterValueAsString("isSufficient"))){
                                    sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                                    that.flowWithoutDesignTimeCall();
                                }
                                else{
                                    that.flowWithDesignTimeCall();
                                }
                            }
                        });
            }
            catch(e){
                this.logError(e);
            }
        },

        _setLocalModelToTile : function() {
            if(this.getTile().getModel()) {

            } else {
                this.getTile().setModel(new sap.ui.model.json.JSONModel({}));
            }
        },

        getTile : function() {
            return this.oKpiTileView.oGenericTile;
        },

        _updateTileModel : function(newData) {
            var modelData  = this.getTile().getModel().getData();
            jQuery.extend(modelData,newData);
            this.getTile().getModel().setData(modelData);
        },

        fetchKpiValue : function(fnSuccess, fnError) {
            var that = this;
            var kpiValue = 0;
            try {
                var sUri = this.DEFINITION_DATA.EVALUATION.ODATA_URL;
                var sEntitySet = this.DEFINITION_DATA.EVALUATION.ODATA_ENTITYSET;
                var sThresholdObject = this.setThresholdValues();
                var sMeasure = sThresholdObject.fullyFormedMeasure;
                var cachedValue = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
                if(!cachedValue){
                    var variantData = sap.ushell.components.tiles.indicatorTileUtils.util.prepareFilterStructure(
                            this.DEFINITION_DATA.EVALUATION_FILTERS,this.DEFINITION_DATA.ADDITIONAL_FILTERS);
                    var oQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(
                            that.oTileApi.url.addSystemToServiceUrl(sUri), sEntitySet, sMeasure, null, variantData);
                    if(oQuery) {
                        this.QUERY_SERVICE_MODEL = oQuery.model;
                        this.queryUriForKpiValue = oQuery.uri;
                        try {
                            this.queryServiceUriODataReadRef = this.QUERY_SERVICE_MODEL.read(oQuery.uri, null, null, true, function(data) {  
                                var writeData = {};
                                if(data && data.results && data.results.length) {
                                    kpiValue=data.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME];
                                    if(oQuery.unit){
                                        that._updateTileModel({
                                            unit : data.results[0][oQuery.unit.name]
                                        });
                                        writeData.unit = oQuery.unit;
                                        writeData.unit.name = oQuery.unit.name;
                                    }
                                    writeData.data = data;
                                    sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, writeData);
                                    if(that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                                        sThresholdObject.criticalHighValue = data.results[0][sThresholdObject.sCriticalHigh];
                                        sThresholdObject.criticalLowValue = data.results[0][sThresholdObject.sCriticalLow] ;
                                        sThresholdObject.warningHighValue = data.results[0][sThresholdObject.sWarningHigh];
                                        sThresholdObject.warningLowValue = data.results[0][sThresholdObject.sWarningLow];
                                        sThresholdObject.targetValue = data.results[0][sThresholdObject.sTarget];
                                        sThresholdObject.trendValue = data.results[0][sThresholdObject.sTrend];
                                    }
                                    fnSuccess.call(that, kpiValue, sThresholdObject);
                                } else {
                                    fnError.call(that,"no Response from QueryServiceUri");
                                }
                            },function(eObject) {
                                if(eObject && eObject.response) {
                                    fnError.call(that,eObject.message);
                                }
                            });
                        } catch(e){
                            that.logError("Error in Query Service URI");
                        }                                      
                    }
                }
                else{
                    if(cachedValue.data && cachedValue.data.results && cachedValue.data.results.length) {
                        kpiValue=cachedValue.data.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME];
                        if(cachedValue.unit){
                            that._updateTileModel({
                                unit : cachedValue.data.results[0][cachedValue.unit.name]
                            });
                        }
                        if(that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                            sThresholdObject.criticalHighValue = cachedValue.data.results[0][sThresholdObject.sCriticalHigh];
                            sThresholdObject.criticalLowValue = cachedValue.data.results[0][sThresholdObject.sCriticalLow] ;
                            sThresholdObject.warningHighValue = cachedValue.data.results[0][sThresholdObject.sWarningHigh];
                            sThresholdObject.warningLowValue = cachedValue.data.results[0][sThresholdObject.sWarningLow];
                            sThresholdObject.targetValue = cachedValue.data.results[0][sThresholdObject.sTarget];
                            sThresholdObject.trendValue = cachedValue.data.results[0][sThresholdObject.sTrend];
                        }
                        fnSuccess.call(that, kpiValue, sThresholdObject);
                    } else {
                        fnError.call(that,"no Response from QueryServiceUri");
                    }
                }
            }catch(e) {
                fnError.call(that,e);
            }
        },



        getThresholdsObjAndColor : function(thresholdObject) {            
            try {
                var oThresholdObjAndColor = {};
                oThresholdObjAndColor.arrObj = [];
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Neutral;
                var improvementDirection = this.DEFINITION_DATA.EVALUATION.GOAL_TYPE;
                var evalValue = this.DEFINITION_DATA.EVALUATION_VALUES;
                var wL,cL,cH,wH; 
                if(improvementDirection === "MI") {
                    cH = Number(thresholdObject.criticalHighValue) || 0;
                    wH = Number(thresholdObject.warningHighValue) || 0;
                    if(cH && wH) {
                        cH = window.parseFloat(cH);
                        wH = window.parseFloat(wH);
                        oThresholdObjAndColor.arrObj.push({value:cH,color:sap.suite.ui.commons.InfoTileValueColor.Error});
                        oThresholdObjAndColor.arrObj.push({value:wH,color:sap.suite.ui.commons.InfoTileValueColor.Critical});
                        if(this.CALCULATED_KPI_VALUE < wH) {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
                        } else if(this.CALCULATED_KPI_VALUE <= cH) {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                        } else {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                        }
                    }

                } else if(improvementDirection === "MA") {
                    cL = Number(thresholdObject.criticalLowValue) || 0;
                    wL = Number(thresholdObject.warningLowValue) || 0;    
                    if(cL && wL) {
                        cL = window.parseFloat(cL);
                        wL = window.parseFloat(wL);
                        oThresholdObjAndColor.arrObj.push({value:cL,color:sap.suite.ui.commons.InfoTileValueColor.Error});
                        oThresholdObjAndColor.arrObj.push({value:wL,color:sap.suite.ui.commons.InfoTileValueColor.Critical});
                        if(this.CALCULATED_KPI_VALUE < cL) {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                        } else if(this.CALCULATED_KPI_VALUE <= wL) {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                        } else {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
                        }
                    }
                } else {
                    cH = Number(thresholdObject.criticalHighValue) || 0;
                    wH = Number(thresholdObject.warningHighValue) || 0;
                    cL = Number(thresholdObject.criticalLowValue) || 0;
                    wL = Number(thresholdObject.warningLowValue) || 0;    
                    if(wL && wH && cL && cL) {
                        cH = window.parseFloat(cH);
                        wH = window.parseFloat(wH);
                        wL = window.parseFloat(wL);
                        cL = window.parseFloat(cL);
                        oThresholdObjAndColor.arrObj.push({value:cH,color:sap.suite.ui.commons.InfoTileValueColor.Error});
                        oThresholdObjAndColor.arrObj.push({value:wH,color:sap.suite.ui.commons.InfoTileValueColor.Critical});
                        oThresholdObjAndColor.arrObj.push({value:wL,color:sap.suite.ui.commons.InfoTileValueColor.Critical});
                        oThresholdObjAndColor.arrObj.push({value:cL,color:sap.suite.ui.commons.InfoTileValueColor.Error});
                        if(this.CALCULATED_KPI_VALUE < cL || this.CALCULATED_KPI_VALUE > cH) {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                        } else if((this.CALCULATED_KPI_VALUE >= cL && this.CALCULATED_KPI_VALUE <= wL) || 
                                (this.CALCULATED_KPI_VALUE >= wH && this.CALCULATED_KPI_VALUE <= cH)
                        ) {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                        } else {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
                        }
                    }
                }
                return oThresholdObjAndColor;

            } catch(e) {
                this.logError(e);
            }

        },

        flowWithoutDesignTimeCall : function() {
            var that = this;
            var formattedValue, formattedTargetvalue;
            this.DEFINITION_DATA = this.oConfig;
            this._updateTileModel(this.DEFINITION_DATA);
            if(this.oTileApi.visible.isVisible() && !this.firstTimeVisible){

                this.firstTimeVisible = true;
                this.fetchKpiValue(function(kpiValue, thresholdObject){
                    var calculatedValueForScaling = Number(kpiValue);
                    if(this.oConfig.EVALUATION.SCALING == -2)
                        calculatedValueForScaling *= 100;
                    formattedValue = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(Number(calculatedValueForScaling), this.oConfig.EVALUATION.SCALING);
                    if(this.oConfig.EVALUATION.SCALING == -2) 
                        formattedValue += " %";
                    this.CALCULATED_KPI_VALUE=Number(kpiValue);
                    var deviationTileObj={};
                    var thresholdsArrayObjAndColor = this.getThresholdsObjAndColor(thresholdObject);
                    var actualKpiObj={value:Number(kpiValue),color:thresholdsArrayObjAndColor.returnColor};

                    deviationTileObj.actualValueLabel = formattedValue.toString();
                    deviationTileObj.actual=actualKpiObj;
                    deviationTileObj.thresholds = [];
                    deviationTileObj.thresholds = thresholdsArrayObjAndColor.arrObj;
                    var evalValue = this.DEFINITION_DATA.EVALUATION_VALUES;
                    if(this.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                        var calculatedTargetValue = Number(thresholdObject.targetValue);
                        if(this.oConfig.EVALUATION.SCALING == -2)
                            calculatedTargetValue *= 100; 
                        formattedTargetvalue = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(calculatedTargetValue, this.oConfig.EVALUATION.SCALING);
                        if(this.oConfig.EVALUATION.SCALING == -2) 
                            formattedTargetvalue += "%";
                        deviationTileObj.targetValue = Number(thresholdObject.targetValue);
                        deviationTileObj.targetValueLabel = formattedTargetvalue.toString();
                    } else {
                        for(var itr = 0; itr < evalValue.length; itr++){
                            if(evalValue[itr].TYPE==="TA") {
                                var calculatedTargetValue = Number(evalValue[itr].FIXED);
                                if(this.oConfig.EVALUATION.SCALING == -2)
                                    calculatedTargetValue *= 100; 
                                formattedTargetvalue = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(calculatedTargetValue);
                                if(this.oConfig.EVALUATION.SCALING == -2) 
                                    formattedTargetvalue += "%";
                                deviationTileObj.targetValue =  Number(evalValue[itr].FIXED);
                                deviationTileObj.targetValueLabel = formattedTargetvalue.toString();
                            } 
                        }  
                    } 
                    this._updateTileModel(deviationTileObj);
                    var navTarget = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                    that.oKpiTileView.oGenericTile.$().wrap("<a href ='" + navTarget + "'/>")
                    this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                }, this.logError);
            }
        },

        flowWithDesignTimeCall: function() {
            var that = this;    
            try{
                var evaluationData = sap.ushell.components.tiles.indicatorTileUtils.cache.getEvaluationById(this.oConfig.EVALUATION.ID)
                if(evaluationData){
                    that.oConfig.EVALUATION_FILTERS = evaluationData.EVALUATION_FILTERS;
                    that.flowWithoutDesignTimeCall();
                }
                else{
                    sap.ushell.components.tiles.indicatorTileUtils.util.getFilterFromRunTimeService(this.oConfig,function(filter){
                        that.oConfig.EVALUATION_FILTERS = filter;
                        sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                        that.flowWithoutDesignTimeCall();
                    });
                }
            }
            catch(e){
                this.logError(e);
            }
        },

        setTextInTile : function(){
            var that =this;
            this._updateTileModel({
                header : that.oTileApi.preview.getTitle() || sap.ushell.components.tiles.indicatorTileUtils.util.getChipTitle(that.oConfig ),
                subheader : that.oTileApi.preview.getDescription() || sap.ushell.components.tiles.indicatorTileUtils.util.getChipSubTitle(that.oConfig )
            });
        },

        logError: function(err){
            this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
            this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
            sap.ushell.components.tiles.indicatorTileUtils.util.logError(err);
        },

        setThresholdValues : function(){
            var that = this;
            var oThresholdObject = {};
            oThresholdObject.fullyFormedMeasure = this.DEFINITION_DATA.EVALUATION.COLUMN_NAME;
            if(this.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                switch(this.DEFINITION_DATA.EVALUATION.GOAL_TYPE){
                case "MI" :
                    oThresholdObject.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                    oThresholdObject.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                    oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                    break;
                case "MA" :
                    oThresholdObject.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                    oThresholdObject.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                    oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                    break;
                case "RA" :
                    oThresholdObject.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                    oThresholdObject.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                    oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    oThresholdObject.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                    oThresholdObject.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                    oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                    break;
                }
            } else {
                oThresholdObject.criticalHighValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "FIXED");
                oThresholdObject.criticalLowValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "FIXED");
                oThresholdObject.warningHighValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "FIXED");
                oThresholdObject.warningLowValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "FIXED");
                oThresholdObject.targetValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "FIXED");
                oThresholdObject.trendValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "FIXED");
            }
            return oThresholdObject;
        },

        formSelectStatement : function(object) {
            var tmpArray = Object.keys(object);
            var sFormedMeasure = "";
            for(var i=0;i<tmpArray.length;i++)
                if((object[tmpArray[i]] !== undefined) && (object.fullyFormedMeasure))sFormedMeasure+=","+object[tmpArray[i]];
            return sFormedMeasure;
        },
        refreshHandler: function (oController) {
            if(!oController.firstTimeVisible){
                if(Number(this.oTileApi.configuration.getParameterValueAsString("isSufficient")))
                    oController.flowWithoutDesignTimeCall();
                else
                    oController.flowWithDesignTimeCall();
            }

        },
        visibleHandler: function (isVisible) {
            if (!isVisible) {
                this.firstTimeVisible = false;
                sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.queryServiceUriODataReadRef);
            }
            if (isVisible) {
                this.refreshHandler(this);
            }
        },
        onExit : function(){
            sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.queryServiceUriODataReadRef);
        }

    });
}());
(function () {
    "use strict";
    sap.ui.controller("tiles.indicatornumeric.NumericTile", {
        onInit : function () {
            var that = this;
            this.firstTimeVisible = false; 
            this.oKpiTileView = this.getView();
            this.oViewData = this.oKpiTileView.getViewData();
            this.oTileApi = this.oViewData.chip; // instance specific CHIP API
            if (this.oTileApi.visible) {
                this.oTileApi.visible.attachVisible(this.visibleHandler.bind(this));
            }
            this.system = this.oTileApi.url.getApplicationSystem();
            this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loading);
            try{
                sap.ushell.components.tiles.indicatorTileUtils.util.getParsedChip(
                        that.oTileApi.configuration.getParameterValueAsString("tileConfiguration"),function(config){
                            that.oConfig = config;
                            that.setTextInTile();
                            if (that.oTileApi.preview) {
                                that.oTileApi.preview.setTargetUrl(sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system));
                            }
                            if(that.oTileApi.preview.isEnabled()){
                                that._updateTileModel({
                                    value : "10.34",
                                    scale : "M",
                                    valueColor : sap.suite.ui.commons.InfoTileValueColor.Neutral,
                                    indicator : sap.suite.ui.commons.DeviationIndicator.None
                                });
                                that.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                            }
                            else{
                                that.oKpiTileView.oGenericTile.attachPress(function(){
                                    sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(that.queryServiceUriODataReadRef);
                                    sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, null);
                                    window.location.hash = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                                });
                                if(Number(that.oTileApi.configuration.getParameterValueAsString("isSufficient"))){
                                    sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                                    that.flowWithoutDesignTimeCall();
                                }
                                else{
                                    that.flowWithDesignTimeCall();
                                }
                            }
                        });
            }
            catch(e){
                this.logError(e);
            }
        },

        _setLocalModelToTile : function() {
            if(this.getTile().getModel()) {

            } else {
                this.getTile().setModel(new sap.ui.model.json.JSONModel({}));
            }
        },

        getTile : function() {
            return this.oKpiTileView.oGenericTile;
        },

        _updateTileModel : function(newData) {
            var modelData  = this.getTile().getModel().getData();
            jQuery.extend(modelData,newData);
            this.getTile().getModel().setData(modelData);
        },

        fetchKpiValue : function(fnSuccess, fnError) {
            var that = this;
            var kpiValue = 0;
            var targetValue = 0;
            var criticalHighValue = 0;
            var criticalLowValue = 0;
            var warningHighValue = 0;
            var warningLowValue = 0;
            var trendValue = 0;
            try {
                var sUri = this.DEFINITION_DATA.EVALUATION.ODATA_URL;
                var sEntitySet = this.DEFINITION_DATA.EVALUATION.ODATA_ENTITYSET;
                var sThresholdObject = this.setThresholdValues();
                var sMeasure = sThresholdObject.fullyFormedMeasure;
                var cachedValue = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
                if(!cachedValue){
                    var variantData = sap.ushell.components.tiles.indicatorTileUtils.util.prepareFilterStructure(
                            this.DEFINITION_DATA.EVALUATION_FILTERS,this.DEFINITION_DATA.ADDITIONAL_FILTERS);
                    var oQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(
                            that.oTileApi.url.addSystemToServiceUrl(sUri), sEntitySet, sMeasure, null, variantData);
                    if(oQuery) {
                        this.QUERY_SERVICE_MODEL = oQuery.model;
                        this.queryUriForKpiValue = oQuery.uri;
                        this.queryServiceUriODataReadRef = this.QUERY_SERVICE_MODEL.read(oQuery.uri, null, null, true, function(data) {
                            if(data && data.results && data.results.length) {
                                kpiValue=data.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME];
                                var writeData = {};
                                if(oQuery.unit){
                                    that._updateTileModel({
                                        unit : data.results[0][oQuery.unit.name]
                                    });
                                    writeData.unit = oQuery.unit;
                                    writeData.unit.name = oQuery.unit.name;
                                } 
                                writeData.data = data;
                                sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, writeData);
                                if(that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                                    sThresholdObject.criticalHighValue = data.results[0][sThresholdObject.sCriticalHigh];
                                    sThresholdObject.criticalLowValue = data.results[0][sThresholdObject.sCriticalLow] ;
                                    sThresholdObject.warningHighValue = data.results[0][sThresholdObject.sWarningHigh];
                                    sThresholdObject.warningLowValue = data.results[0][sThresholdObject.sWarningLow];
                                    sThresholdObject.targetValue = data.results[0][sThresholdObject.sTarget];
                                    sThresholdObject.trendValue = data.results[0][sThresholdObject.sTrend];
                                }
                                fnSuccess.call(that, kpiValue, sThresholdObject);
                            } else {
                                fnError.call(that,"no Response from QueryServiceUri");
                            }
                        },function(eObject) {
                            if(eObject && eObject.response) {
                                fnError.call(that,eObject.message);
                            }
                        });
                    }
                    else{
                        fnError.call(that,"Error Preparing Query Service URI");
                    }
                }
                else{
                    if(cachedValue.data && cachedValue.data.results && cachedValue.data.results.length) {
                        kpiValue=cachedValue.data.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME];
                        if(cachedValue.unit){
                            that._updateTileModel({
                                unit : cachedValue.data.results[0][cachedValue.unit.name]
                            });
                        }                        
                        if(that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                            sThresholdObject.criticalHighValue = cachedValue.data.results[0][sThresholdObject.sCriticalHigh];
                            sThresholdObject.criticalLowValue = cachedValue.data.results[0][sThresholdObject.sCriticalLow] ;
                            sThresholdObject.warningHighValue = cachedValue.data.results[0][sThresholdObject.sWarningHigh];
                            sThresholdObject.warningLowValue = cachedValue.data.results[0][sThresholdObject.sWarningLow];
                            sThresholdObject.targetValue = cachedValue.data.results[0][sThresholdObject.sTarget];
                            sThresholdObject.trendValue = cachedValue.data.results[0][sThresholdObject.sTrend];
                        }
                        fnSuccess.call(that, kpiValue, sThresholdObject);
                    } else {
                        fnError.call(that,"no Response from QueryServiceUri");
                    }
                }
            }catch(e) {
                fnError.call(that,e);
            }
        },

        getTrendColor : function(criticalHighValue, criticalLowValue, warningHighValue, warningLowValue, targetValue){
            var that = this;
            try{
                var improvementDirection = this.DEFINITION_DATA.EVALUATION.GOAL_TYPE;
                var evalValue = this.DEFINITION_DATA.EVALUATION_VALUES;
                var returnColor = sap.suite.ui.commons.InfoTileValueColor.Neutral;
                if(improvementDirection === "MI") {
                    if(criticalHighValue && warningHighValue) {
                        criticalHighValue = Number(criticalHighValue);
                        warningHighValue = Number(warningHighValue);
                        if(this.CALCULATED_KPI_VALUE < warningHighValue) {
                            returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
                        } else if(this.CALCULATED_KPI_VALUE <= criticalHighValue) {
                            returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                        } else {
                            returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                        }
                    }
                } else if(improvementDirection === "MA") {
                    if(criticalLowValue && warningLowValue) {
                        criticalLowValue = Number(criticalLowValue);
                        warningLowValue = Number(warningLowValue);
                        if(this.CALCULATED_KPI_VALUE < criticalLowValue) {
                            returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                        } else if(this.CALCULATED_KPI_VALUE <= warningLowValue) {
                            returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                        } else {
                            returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
                        }
                    }
                } else {
                    if(warningLowValue && warningHighValue && criticalLowValue && criticalHighValue) {
                        criticalHighValue = Number(criticalHighValue);
                        warningHighValue = Number(warningHighValue);
                        warningLowValue = Number(warningLowValue);
                        criticalLowValue = Number(criticalLowValue);
                        if(this.CALCULATED_KPI_VALUE < criticalLowValue || this.CALCULATED_KPI_VALUE > criticalHighValue) {
                            returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                        } else if((this.CALCULATED_KPI_VALUE >= criticalLowValue && this.CALCULATED_KPI_VALUE <= warningLowValue) || 
                                (this.CALCULATED_KPI_VALUE >= warningHighValue && this.CALCULATED_KPI_VALUE <= criticalHighValue)
                        ) {
                            returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                        } else {
                            returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
                        }
                    }
                }
                return returnColor;
            }
            catch(e){
                that.logError(e);
            }
        },

        getTrendIndicator : function(trendValue) {
            var that = this;
            trendValue = Number(trendValue);
            try{
                var trendIndicator = sap.suite.ui.commons.DeviationIndicator.None;
                if(trendValue > this.CALCULATED_KPI_VALUE){
                    trendIndicator = sap.suite.ui.commons.DeviationIndicator.Down;
                }
                else if(trendValue < this.CALCULATED_KPI_VALUE){
                    trendIndicator = sap.suite.ui.commons.DeviationIndicator.Up;
                }
                return trendIndicator;
            }
            catch(e){
                that.logError(e);
            }
        },

        flowWithoutDesignTimeCall : function() {
            var that = this;
            this.DEFINITION_DATA = this.oConfig;
            this._updateTileModel(this.DEFINITION_DATA);
            if(this.oTileApi.visible.isVisible() && !this.firstTimeVisible ){
                this.firstTimeVisible = true;
                this.fetchKpiValue(function(kpiValue, sThresholdObject){
                    this.CALCULATED_KPI_VALUE=kpiValue;
                    var evalValue = this.DEFINITION_DATA.EVALUATION_VALUES;
                    var applyColor = this.getTrendColor(sThresholdObject.criticalHighValue, sThresholdObject.criticalLowValue, 
                            sThresholdObject.warningHighValue, sThresholdObject.warningLowValue ,sThresholdObject.targetValue);
                    var trendIndicator = this.getTrendIndicator(sThresholdObject.trendValue); 
                    var oScaledValue = "";
                    var calculatedValueForScaling = this.CALCULATED_KPI_VALUE;
                    if(this.oConfig.EVALUATION.SCALING == -2){
                        calculatedValueForScaling *= 100;
                        this.getView().oNVConfContS.setFormatterValue(false);
                    }
                    oScaledValue = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(Number(calculatedValueForScaling),this.oConfig.EVALUATION.SCALING);
                    if(this.oConfig.EVALUATION.SCALING == -2) 
                        this._updateTileModel({
                            scale : "%"
                        });
                    this._updateTileModel({
                        value : oScaledValue.toString(),
                        valueColor : applyColor,
                        indicator : trendIndicator
                    });
                    var navTarget = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                    that.oKpiTileView.oGenericTile.$().wrap("<a href ='" + navTarget + "'/>");
                    this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                }, this.logError);}
        },

        flowWithDesignTimeCall: function() {            
            var that = this;
            try{
                var evaluationData = sap.ushell.components.tiles.indicatorTileUtils.cache.getEvaluationById(this.oConfig.EVALUATION.ID)
                if(evaluationData){
                    that.oConfig.EVALUATION_FILTERS = evaluationData.EVALUATION_FILTERS;
                    that.flowWithoutDesignTimeCall();
                }
                else{
                    sap.ushell.components.tiles.indicatorTileUtils.util.getFilterFromRunTimeService(this.oConfig,function(filter){
                        that.oConfig.EVALUATION_FILTERS = filter;
                        sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                        that.flowWithoutDesignTimeCall();
                    });
                }
            }
            catch(e){
                this.logError(e);
            }
        },

        setThresholdValues : function(){
            var that = this;
            try{ 
                var oThresholdObject = {};
                oThresholdObject.fullyFormedMeasure = this.DEFINITION_DATA.EVALUATION.COLUMN_NAME;
                if(this.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                    switch(this.DEFINITION_DATA.EVALUATION.GOAL_TYPE){
                    case "MI" :
                        oThresholdObject.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                        oThresholdObject.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                        oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                        oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                        oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                        break;
                    case "MA" :
                        oThresholdObject.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                        oThresholdObject.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                        oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                        oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                        oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                        break;
                    case "RA" :
                        oThresholdObject.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                        oThresholdObject.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                        oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                        oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                        oThresholdObject.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                        oThresholdObject.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                        oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                        break;
                    }
                } else {
                    oThresholdObject.criticalHighValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "FIXED");
                    oThresholdObject.criticalLowValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "FIXED");
                    oThresholdObject.warningHighValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "FIXED");
                    oThresholdObject.warningLowValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "FIXED");
                    oThresholdObject.targetValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "FIXED");
                    oThresholdObject.trendValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "FIXED");
                }
                return oThresholdObject;
            }
            catch(e){
                that.logError(e);
            }
        },

        formSelectStatement : function(object) {
            var tmpArray = Object.keys(object);
            var sFormedMeasure = "";
            for(var i=0;i<tmpArray.length;i++)
                if((object[tmpArray[i]] !== undefined) && (object.fullyFormedMeasure))sFormedMeasure+=","+object[tmpArray[i]];
            return sFormedMeasure;
        },

        setTextInTile : function(){
            var that =this;
            this._updateTileModel({
                header : that.oTileApi.preview.getTitle() || sap.ushell.components.tiles.indicatorTileUtils.util.getChipTitle(that.oConfig ),
                subheader : that.oTileApi.preview.getDescription() || sap.ushell.components.tiles.indicatorTileUtils.util.getChipSubTitle(that.oConfig )
            });
        },
        logError: function(err){
            this._updateTileModel({
                value : "",
                scale : "",
                unit: ""
            });
            this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
            this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
            sap.ushell.components.tiles.indicatorTileUtils.util.logError(err);
        },
        refreshHandler: function (oController) {
            if(!oController.firstTimeVisible){
                if(Number(this.oTileApi.configuration.getParameterValueAsString("isSufficient")))
                    oController.flowWithoutDesignTimeCall();
                else
                    oController.flowWithDesignTimeCall();
            }

        },
        visibleHandler: function (isVisible) {
            if (!isVisible) {
                this.firstTimeVisible = false;
                sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.queryServiceUriODataReadRef);
            }
            if (isVisible) {
                this.refreshHandler(this);
            }
        },
        onExit : function(){
            sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.queryServiceUriODataReadRef);
        }
    });
}());
(function () {
    "use strict";
    /*global self*/
    //use a XHR to load any resource
    function loadResource(sUrl, fnSuccess, fnError) {
        var oXHR = new XMLHttpRequest();
        oXHR.open("GET", sUrl, true);
        oXHR.onreadystatechange = function () {
            if (this.readyState !== 4) {
                return; // not yet DONE
            }
            if (this.status === 200) {
                fnSuccess(oXHR.responseText);
            } else {
                fnError(oXHR.responseText);
            }
        };
        oXHR.send();
    }

    //general listener for messages to this Web Worker
    //any message sent to this Worker will get to this listener
    //this Worker can be extended to do more actions by extending the switch
    self.onmessage = function (oEvent) {
        if (oEvent.data.action) {
            switch (oEvent.data.action) {
            case 'loadResource':
                loadResource(oEvent.data.url,
                    function (response) {
                        self.postMessage(response);
                    },
                    function (message) {
                        self.postMessage({error: message});
                    }
                    );
                break;
            }
        }
    };
}());

// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, $, sap, console, window */
    /*jslint nomen: true */

    sap.ui.controller("sap.ushell.renderers.fiori2.launchpad.catalog.Catalog", {

        onInit: function () {
            sap.ui.getCore().getEventBus().subscribe("showCatalogEvent", this.onShow, this);
            sap.ui.getCore().byId("catalogSelect").addEventDelegate({
                onBeforeRendering : this.onBeforeSelectRendering
            }, this);
        },

        onExit: function () {
            sap.ui.getCore().getEventBus().unsubscribe("showCatalogEvent", this.onShow);
            this.getView().aDanglingControls.forEach(function (oControl) {
                oControl.destroy();
            });
        },

        onAfterRendering: function () {
            // disable swipe gestures -> never show master in Portait mode
            var oModel = sap.ui.getCore().byId("navContainer").getModel(),
                that = this;
            //check if the catalogs were already loaded, if so, we don't need the loading message 
            if (!oModel.getProperty('/catalogs').length) {
                //add the loading message right after the catalog is rendered
                oModel.setProperty('/catalogs', [{
                    title: sap.ushell.resources.i18n.getText('catalogsLoading'),
                    "static": true,
                    tiles: [],
                    numIntentSupportedTiles : -1//only in order to present this option in the Catalog.view (dropdown menu)since there is a filter there on this property
                }]);
            }
            sap.ui.getCore().byId("catalogSelect").setSelectedItemId();

            if (!this.PagingManager) {
                this.lastCatalogId = 0;
                jQuery.sap.require("sap.ushell.renderers.fiori2.launchpad.PagingManager");
                this.PagingManager = new sap.ushell.renderers.fiori2.launchpad.PagingManager('catalogPaging', {
                    elementClassName: 'sapUshellTile',
                    containerHeight: window.innerHeight,
                    containerWidth: window.innerWidth
                });
            }

            //just the first time
            if (this.PagingManager.currentPageIndex === 0) {
                that.allocateNextPage();
            }

            if (sap.ui.Device.system.desktop) {
                jQuery("#catalogTilesPage-cont").scroll(function (event) {
                    var oPage = sap.ui.getCore().byId('catalogTilesPage'),
                        scroll = oPage.getScrollDelegate(),
                        currentPos = scroll.getScrollTop(),
                        max = scroll.getMaxScrollTop();

                    if (max - currentPos <= 30 + that.PagingManager.getTileHeight()) {
                        that.allocateNextPage();
                    }
                });
            } else {
                // Register scroll event handler for mobile devices use-case
                setTimeout(function () {
                    var that = this;
                    this.oCatalogTilesPage = sap.ui.getCore().byId("catalogTilesPage");
                    this.oScroller = this.oCatalogTilesPage.getScrollDelegate();

                    if (this.oScroller && this.oScroller._scroller) {
                        // Keep the original onScrollMove event
                        if (!this.oOriginalScrollMove) {
                            this.oOriginalScrollMove = this.oScroller._scroller.options.onScrollMove;
                        }
                        // Set a new event handler for onScrollMove
                        this.oScroller._scroller.options.onScrollMove = function (oEvent) {

                            // Calling the original onScrollMove event
                            that.oOriginalScrollMove.apply(that.oScroller);
                            //call the paging
                            var currentPos = that.oScroller.getScrollTop(),
                                max = that.oScroller.getMaxScrollTop();

                            if (max - currentPos <= 30 + that.PagingManager.getTileHeight()) {
                                that.allocateNextPage();
                            }
                        };
                    } else {
                        jQuery("#catalogTilesPage-cont").scroll(function (event) {
                            var oPage = sap.ui.getCore().byId('catalogTilesPage'),
                                scroll = oPage.getScrollDelegate(),
                                currentPos = scroll.getScrollTop(),
                                max = scroll.getMaxScrollTop();
                            //call the paging
                            if (max - currentPos <= 30 + that.PagingManager.getTileHeight()) {
                                that.allocateNextPage();
                            }
                        });
                    }
                }.bind(this), 1500);
            }
        },

        onShow: function (sChannelId, sEventId, oData) {
            //if the user goes to the catalog directly (not via the dashboard) 
            //we must close the loading dialog
            var oLoadingDialog = sap.ui.getCore().byId('loadingDialog');
            oLoadingDialog.close();

            // reset active tiles
            var oModel = sap.ui.getCore().byId("navContainer").getModel(),
                aCatalogTiles = oModel.getProperty("/catalogTiles") || [],
                oDataParam = oData.params,
                sPath = (oDataParam && oDataParam.targetGroup && oDataParam.targetGroup.length && oDataParam.targetGroup[0]) || "/groups/0",
                i;
            oData.groupContext = oModel.getContext(sPath);
            $.extend(this.getView().getViewData(), oData);

            if (this.PagingManager) {
                this.resetPageFilter();
            }
            this.categoryFilter = (oDataParam && oDataParam.catalogSelector && oDataParam.catalogSelector.length && oDataParam.catalogSelector[0]) || null;
            this.searchFilter = (oDataParam && oDataParam.tileFilter && oDataParam.tileFilter.length && oDataParam.tileFilter[0]) || "";

            oModel.setProperty("/showCatalogHeaders", true);
            oModel.setProperty("/catalogSearchFilter", this.searchFilter);

            for (i = 0; i < aCatalogTiles.length; i = i + 1) {
                aCatalogTiles[i].active = false;
            }

            if (this.categoryFilter || this.searchFilter) {
                // selected category does not work with data binding
                // we need to rerender it manually and then set the selection
                // see function onBeforeSelectRendering
                sap.ui.getCore().byId("catalogSelect").rerender();
            } else {
                //display all
                sap.ui.getCore().byId("catalogSelect").setSelectedItemId("");
            }

            this.oRenderingFilter = new sap.ui.model.Filter('', 'EQ', 'a');
            this.oRenderingFilter.fnTest = function (val) {
                if (val.catalogIndex < this.lastCatalogId) {
                    return true;
                }

                if (this.allocateTiles > 0) {
                    this.lastCatalogId = val.catalogIndex;
                    this.allocateTiles--;
                    return true;
                }

                return false;
            }.bind(this);

            if (this.PagingManager) {
                this.applyTileFilters();
            }
        },
        resetPageFilter : function () {
            this.lastCatalogId = 0;
            this.allocateTiles = this.PagingManager.getNumberOfAllocatedElements();
        },
        allocateNextPage : function () {
            //calculate the number of tiles in the page.
            this.PagingManager.moveToNextPage();
            this.allocateTiles = this.PagingManager._calcElementsPerPage();
            this.applyTileFilters();
        },

        onBeforeSelectRendering : function () {
            var oSelect = sap.ui.getCore().byId("catalogSelect"),
                aItems = jQuery.grep(oSelect.getItems(), jQuery.proxy(function (oItem) {
                    return oItem.getBindingContext().getObject().id === this.categoryFilter;
                }, this));

            if (!aItems.length) {
                aItems.push(oSelect.getItemAt(0));
            }

            if (aItems[0] && oSelect.getSelectedItemId() !== aItems[0].getId()) {
                window.setTimeout($.proxy(oSelect.setSelectedItem, oSelect, aItems[0].getId()), 500);
            }
        },

        setCategoryFilter : function (aFilter) {
            sap.ushell.renderers.fiori2.Navigation.openCatalogByHash({
                groupContext : this.getView().getViewData().groupContext,
                categoryFilter : aFilter,
                searchFilter : this.searchFilter
            }, false);
        },

        setSearchFilter : function (aFilter) {
            sap.ushell.renderers.fiori2.Navigation.openCatalogByHash({
                groupContext : this.getView().getViewData().groupContext,
                categoryFilter : this.categoryFilter,
                searchFilter : aFilter
            }, false);
        },

        applyTileFilters : function () {
            var aFilters = [],
                oSearchFilter,
                oCategoryFilter;
            if (this.searchFilter) {
                oSearchFilter = new sap.ui.model.Filter($.map(this.searchFilter.split(/[\s,]+/), function (v) {
                    return (v && new sap.ui.model.Filter("keywords", sap.ui.model.FilterOperator.Contains, v)) ||
                        (v && new sap.ui.model.Filter("title", sap.ui.model.FilterOperator.Contains, v))|| undefined;
                }), true);
                aFilters.push(oSearchFilter);
            }
            if (this.categoryFilter) {
                oCategoryFilter = new sap.ui.model.Filter("catalogId", sap.ui.model.FilterOperator.EQ, this.categoryFilter);
                aFilters.push(oCategoryFilter);
            }
            //Anyway we would like to filter out tiles which are not supported on current device
            aFilters.push(new sap.ui.model.Filter("isTileIntentSupported", sap.ui.model.FilterOperator.EQ, true));

            //Adding the page filter.
            if (this.oRenderingFilter) {
                aFilters.push(this.oRenderingFilter);
            }

            sap.ui.getCore().byId("catalogTiles").getBinding("tiles").filter(aFilters);
        },

        onLiveFilter : function (oEvent) {
            var sQuery = oEvent.getParameter("newValue");
            if (sQuery) {
                this.setSearchFilter(sQuery);
            } else {
                this.setSearchFilter();
            }
        },

        onCategoryFilter : function (oEvent) {
            var oSource = oEvent.getParameter("selectedItem"),
                oSourceContext = oSource.getBindingContext(),
                oModel = oSourceContext.getModel();
            if (oModel.getProperty("static", oSourceContext)) { // show all categories
                oModel.setProperty("/showCatalogHeaders", true);
                this.setCategoryFilter();
                this.selectedCategory = undefined;
            } else { // filter to category
                oModel.setProperty("/showCatalogHeaders", false);
                this.setCategoryFilter(oSource.getBindingContext().getObject().id);
                this.selectedCategory = oSource.getId();
            }
        },

        onTileAfterRendering : function (oEvent) {
            var footItem = oEvent.getSource().getFootItems()[0];
            if (footItem !== undefined) {
                if (footItem.getIcon() == "sap-icon://add") {
                    footItem.addStyleClass("sapUshellCatalogPlusIcon");
                } else {
                    footItem.addStyleClass("sapUshellCatalogVIcon");
                }
            }
        },

        /**
         * Event handler triggered if tile should be added to the default group.
         *
         * @param {sap.ui.base.Event} oEvent
         *     the event object. It is expected that the binding context of the event source points to the tile to add.
         */
        onTileFooterClick : function (oEvent) {
            var oSource = oEvent.getSource(),
                oSourceContext = oSource.getBindingContext(),
                that = this,
                ourModel,
                oOkBtn,
                oCancelBtn,
                oHBox,
                oPopover,
                placement,
                clickedObject = oEvent.oSource,
                clickedObjectDomRef = clickedObject.getDomRef(),
                oNewGroupNameInput,
                popoverData = this.createPopoverData(oEvent),
                popoverDataSectionHeight = 192,
                shellView = sap.ui.getCore().byId("mainShell"),
                dashboardMgr = shellView.oDashboardManager,
                oList = new sap.m.List({
                    mode : sap.m.ListMode.MultiSelect
                }),
                oListItemTemplate = new sap.m.DisplayListItem({
                    label : "{title}",
                    selected : "{selected}",
                    tooltip: "{title}"
                });

            var hideGroupsFilter = null; //Add filter only if the feature is enabled.
            if(this.getView().getModel().getProperty('/enableHideGroups'))
            {
                hideGroupsFilter = [new sap.ui.model.Filter("isGroupVisible", sap.ui.model.FilterOperator.EQ, true)];
            }
            oList.bindItems("/", oListItemTemplate, null, hideGroupsFilter);
            ourModel = new sap.ui.model.json.JSONModel(popoverData.userGroupList);
            oList.setModel(ourModel);

            oList.addEventDelegate({
                onsapup: function(oEvent){
                    try {
                        oEvent.preventDefault();

                        if (sap.ui.getCore().byId('shell').getModel().getData().groups.length) {
                            var currentFocusGroup = jQuery(":focus");
                            if (currentFocusGroup.index() == 0){   //first group in the list
                                var jqNewGroupItem = jQuery("#newGroupItem");
                                jqNewGroupItem.focus();
                                oEvent._bIsStopHandlers = true;
                            }
                        }
                    } catch (e) {
                    }
                }
            });

            //new group Input
            oNewGroupNameInput = new sap.m.Input({
                id : "newGroupNameInput",
                type : "Text",
                placeholder : sap.ushell.resources.i18n.getText("newGroupPlaceholder")
            });

            // new group panel - back button
            var oBackButton = new sap.m.Button({
                icon: sap.ui.core.IconPool.getIconURI("nav-back"),
                press : function (oEvent) {
                    oPopover.removeAllContent();

                    if (!sap.ui.Device.system.phone) {
                        oPopover.setContentHeight(popoverDataSectionHeight + "px");
                    } else {
                        oPopover.setContentHeight("100%");
                    }

                    oPopover.setVerticalScrolling(true);

                    oPopover.addContent(popoverContainer);
                    oPopover.setTitle(sap.ushell.resources.i18n.getText("addTileToGroups_popoverTitle"));
                    oPopover.setCustomHeader();

                    oNewGroupNameInput.enabled = false;
                    oNewGroupNameInput.setValue('');
                },
                tooltip : sap.ushell.resources.i18n.getText("newGroupGoBackBtn_tooltip")
            });
            oBackButton.addStyleClass("catalogNewGroupBackButton");

            // new group panel's label
            var oNewGroupLabel = new sap.m.Label({
                    text : sap.ushell.resources.i18n.getText("newGroup_popoverTitle")
                }),

            // new group panel's header
                oHeadBar = new sap.m.Bar({
                    contentLeft : [oBackButton],
                    contentMiddle : [oNewGroupLabel]
                }),

                // popover container Item - "New Group"
                newGroupItem = new sap.m.StandardListItem({
                    id : "newGroupItem",
                    title : sap.ushell.resources.i18n.getText("newGroup_listItemText"),
                    type : "Navigation",
                    press : function () {
                        that._navigateToCreateNewGroupPanel(oPopover, oNewGroupNameInput, oHeadBar);
                    }
                }),

                oNewGroupItemList = new sap.m.List({});

            oNewGroupItemList.addItem(newGroupItem);
            oNewGroupItemList.addEventDelegate({
                onsapdown: function(oEvent){
                    try {
                        oEvent.preventDefault();
                        oEvent._bIsStopHandlers = true;
                        if (sap.ui.getCore().byId('shell').getModel().getData().groups.length) {
                            var jqFirstGroupListItem = jQuery("#popoverContainer .sapMListModeMultiSelect li").first();
                            jqFirstGroupListItem.focus();
                        }
                    } catch (e) {
                    }
                },
                onsaptabnext: function(oEvent){
                    try {
                        oEvent.preventDefault();
                        oEvent._bIsStopHandlers = true;
                        var jqOkButton = jQuery("#okButton");
                        jqOkButton.focus();
                    } catch (e) {
                    }
                }
            });

            var popoverContainer = this._setPopoverContainer(oNewGroupItemList, oList, popoverDataSectionHeight);

            if (document.body.clientHeight - clickedObjectDomRef.getBoundingClientRect().bottom >= 310) {
                placement = "Bottom";
            } else {
                placement = "Auto";
            }

            oPopover = new sap.m.ResponsivePopover({
                id : "groupsPopover",
                placement : placement,
                content : [popoverContainer],
                enableScrolling : true,
                title: sap.ushell.resources.i18n.getText("addTileToGroups_popoverTitle"),
                contentWidth: '20rem',
                afterClose: function () {
                    oPopover.destroy();
                    oNewGroupNameInput.destroy();
                    newGroupItem.destroy();
                    oOkBtn.destroy();
                    oCancelBtn.destroy();
                    popoverContainer.destroy();
                }
            });

            if (!sap.ui.Device.system.phone) {
                oPopover.setContentHeight(popoverDataSectionHeight + "px");
            } else {
                oPopover.setContentHeight("100%");
            }

            oOkBtn = this.createOkButton(oSourceContext, ourModel, popoverData, that, oPopover, oNewGroupNameInput, oHeadBar);
            oOkBtn.addEventDelegate({
                onsaptabprevious: function(oEvent){
                    try {
                        oEvent.preventDefault();
                        oEvent._bIsStopHandlers = true;
                        var jqNewGroupItem = jQuery("#newGroupItem");
                        if (!jqNewGroupItem.length){
                            jqNewGroupItem = jQuery("#newGroupNameInput input");
                        }
                        jqNewGroupItem.focus();
                    } catch (e) {
                    }
                }
            });

            oCancelBtn = new sap.m.Button({
                id : "cancelButton",
                press : function (oEvent) {
                    oEvent.preventDefault();
                    oEvent._bIsStopHandlers = true;
                    oPopover.close();
                },
                text : sap.ushell.resources.i18n.getText("cancelBtn")
            });

            oPopover.setBeginButton(oOkBtn);
            oPopover.setEndButton(oCancelBtn);
            oPopover.setInitialFocus('newGroupItem');
            oPopover.openBy(clickedObject);
        },

        _navigateToCreateNewGroupPanel : function (oPopover, oNewGroupNameInput, oHeadBar) {

            oPopover.removeAllContent();
            oPopover.addContent(oNewGroupNameInput.addStyleClass("catalogNewGroupInput"));
            oPopover.setCustomHeader(oHeadBar);
            oPopover.setContentHeight("");
            oNewGroupNameInput.setValueState(sap.ui.core.ValueState.None);
            oNewGroupNameInput.setPlaceholder(sap.ushell.resources.i18n.getText("newGroupPlaceholder"));
            oNewGroupNameInput.enabled = true;
            oNewGroupNameInput.focus();
        },

        createOkButton : function (oSourceContext, ourModel, popoverData, generalContext, oPopover, oNewGroupNameInput, oHeadBar) {
            var oOkBtn = new sap.m.Button({
                id : "okButton",
                press : function ( oEvent ) {

                    oEvent.preventDefault();
                    oEvent._bIsStopHandlers = true;

                    var selectedGroupsIDsArray = [],
                        deselectedGroupsIDsArray = [],
                        groupsIdTitleMap = {},
                        srvc = sap.ushell.Container.getService("LaunchPage"),
                        detailedMessage,
                        index,
                        tempGroup,
                        groupCtx,
                        realGroupID,
                        numberOfAddedGroups = 0,
                        numberOfRemovedGroups = 0,
                        firstAddedGroupTitle,
                        firstRemovedGroupTitle,
                        tileCataogId = oSourceContext.getModel().getProperty(oSourceContext.getPath()).id,
                        oEventBus = sap.ui.getCore().getEventBus(),
                        newGroupName,
                        groupNameFromInput = oNewGroupNameInput.getValue().trim(),
                        emptyGroupName = sap.ushell.resources.i18n.getText("newGroup_listItemText"),
                        promises = [],
                        that = this;

                    for (index = 0; index < popoverData.userGroupList.length; index = index + 1) {
                        tempGroup = this.oData[index];
                        realGroupID = srvc.getGroupId(tempGroup.object);

                        // Add the real group Id and title to the map  
                        // in order to support the detailed message that follows the user gourp selection    
                        groupsIdTitleMap[realGroupID] = tempGroup.title;

                        if (tempGroup.selected) {
                            selectedGroupsIDsArray.push(realGroupID);
                            //var groupIndex = dashboardMgr.getIndexOfGroup();
                            groupCtx = new sap.ui.model.Context(oSourceContext.getModel(), "/groups/" + index);
                            if (!ourModel.oData[index].initiallySelected) {
                                promises.push(generalContext._addTile(oSourceContext, groupCtx));
                                ourModel.oData[index].initiallySelected = true;
                                numberOfAddedGroups = numberOfAddedGroups + 1;
                                if (numberOfAddedGroups == 1) {
                                    firstAddedGroupTitle = tempGroup.title;
                                }
                            }
                        } else if ( (!tempGroup.selected) && (ourModel.oData[index].initiallySelected) ) {
                            promises.push(generalContext._removeTile(tileCataogId, index));
                            ourModel.oData[index].initiallySelected = false;
                            numberOfRemovedGroups = numberOfRemovedGroups + 1;
                            if (numberOfRemovedGroups == 1) {
                                firstRemovedGroupTitle = tempGroup.title;
                            }
                        }
                    }

                    // we are in the new group creation panel
                    if (oNewGroupNameInput.enabled) {
                        if (groupNameFromInput.length > 0) {
                            newGroupName = groupNameFromInput;
                        } else {
                            newGroupName = emptyGroupName;
                        }

                        promises.push(generalContext._createGroupAndSaveTile(oSourceContext, newGroupName));
                        numberOfAddedGroups++;
                        firstAddedGroupTitle = newGroupName;
                    }



                    jQuery.when.apply(jQuery, promises).then(
                        function(){
                            if (!(numberOfAddedGroups == 0 && numberOfRemovedGroups == 0)) {

                                var isOperationFailed = false,
                                    isNewGroupAdded = false,
                                    aErrorIndexes= [];

                                for (index = 0; index < arguments.length && (!isOperationFailed || !isNewGroupAdded); index++) {
                                    // check if tile was added to the new group successfully
                                    if (arguments[index].action == "addTileToNewGroup" && arguments[index].status == 1){
                                        var tempGroup = that.oData[that.oData.length - 1],
                                            srvc = sap.ushell.Container.getService("LaunchPage"),
                                            realGroupID = srvc.getGroupId(tempGroup.object);
                                        selectedGroupsIDsArray.push(realGroupID);
                                        isNewGroupAdded = true;
                                    }
                                    // Check if the operation failed
                                    //  The Data (i.e. arguments[index]) for each operation includes: 
                                    //   - group: The relevant group object 
                                    //   - status: A boolean value stating if the operation succeeded of failed
                                    //   - action: A String with the value 'add' or 'remove' or 'createNewGroup'
                                    if ( !arguments[index].status ) {
                                        isOperationFailed = true;
                                        aErrorIndexes.push(arguments[index]);
                                    }
                                }
                                if (isOperationFailed){
                                    var shellView = sap.ui.getCore().byId("mainShell"),
                                    	oErrorMessageObj = generalContext.prepareErrorMessage(aErrorIndexes, popoverData.tileTitle),
                                        dashboardMgr = shellView.oDashboardManager;
                                        dashboardMgr._resetGroupsOnFailure(oErrorMessageObj.messageId, oErrorMessageObj.parameters);

                                } else {
                                    // Update the model with the changes
                                    oSourceContext.getModel().setProperty("/catalogTiles/" + popoverData.tileIndex + "/associatedGroups", selectedGroupsIDsArray);

                                    // Get the detailed message
                                    detailedMessage = generalContext.prepareDetailedMessage(popoverData.tileTitle, numberOfAddedGroups, numberOfRemovedGroups, firstAddedGroupTitle, firstRemovedGroupTitle);

                                    sap.m.MessageToast.show( detailedMessage, {
                                        duration: 3000,// default
                                        width: "15em",
                                        my: "center bottom",
                                        at: "center bottom",
                                        of: window,
                                        offset: "0 -50",
                                        collision: "fit fit"
                                    });
                                }
                            }
                        });


                    oPopover.close();

                }.bind(ourModel),
                text : sap.ushell.resources.i18n.getText("okBtn")
            });
            return oOkBtn;
        },
        
        prepareErrorMessage : function (aErroneousActions, sTileTitle) {
        	var oGroup,
        		sAction,
        		sFirstErroneousAddGroup,
        		sFirstErroneousRemoveGroup,
        		iNumberOfFailAddActions = 0,
        		iNumberOfFailDeleteActions = 0,
        		bCreateNewGroupFailed = false,
        		message;

        	for(var index in aErroneousActions) {
        		
        		// Get the data of the error (i.e. action name and group object)

        		oGroup = aErroneousActions[index].group;
        		sAction = aErroneousActions[index].action;
        		
        		if(sAction == 'add') {
        			iNumberOfFailAddActions++;
        			if(iNumberOfFailAddActions == 1) {
        				sFirstErroneousAddGroup = oGroup.title;
        			}
        		} else if (sAction == 'remove') {
        			iNumberOfFailDeleteActions++;
        			if(iNumberOfFailDeleteActions == 1) {
        				sFirstErroneousRemoveGroup = oGroup.title;
        			}
        		} else if (sAction == 'addTileToNewGroup') {
                    iNumberOfFailAddActions++;
                    if(iNumberOfFailAddActions == 1) {
                        sFirstErroneousAddGroup = oGroup.title;
                    }
                }  else {
                    bCreateNewGroupFailed = true;
                }
        	}

        	// First - Handle bCreateNewGroupFailed 
        	if(bCreateNewGroupFailed) {
              	if (aErroneousActions.length == 1) {
              		message = sap.ushell.resources.i18n.getText({messageId: "fail_tile_operation_create_new_group"});
              	} else {
              		message = sap.ushell.resources.i18n.getText({messageId: "fail_tile_operation_some_actions"});
              	} 
            // Single error - it can be either one add action or one remove action
        	} else if (aErroneousActions.length == 1) { 
        		if (iNumberOfFailAddActions) {
        			message = sap.ushell.resources.i18n.getText({messageId: "fail_tile_operation_add_to_group", parameters: [sTileTitle, sFirstErroneousAddGroup]});
        		} else {
        			message = sap.ushell.resources.i18n.getText({messageId: "fail_tile_operation_remove_from_group", parameters: [sTileTitle, sFirstErroneousRemoveGroup]});
        		}
        	// 	Many errors (iErrorCount > 1) - it can be several remove actions, or several add actions, or a mix of both
        	} else {
        		if (iNumberOfFailDeleteActions == 0) {
                    message = sap.ushell.resources.i18n.getText({messageId: "fail_tile_operation_add_to_several_groups", parameters: [sTileTitle]});
        		} else if (iNumberOfFailAddActions == 0) {
                    message = sap.ushell.resources.i18n.getText({messageId: "fail_tile_operation_remove_from_several_groups", parameters: [sTileTitle]});
        		} else {
              		message = sap.ushell.resources.i18n.getText({messageId: "fail_tile_operation_some_actions"});
        		}
        	}
            return message;
        }, 
        
        prepareDetailedMessage : function (tileTitle, numberOfAddedGroups, numberOfRemovedGroups, firstAddedGroupTitle, firstRemovedGroupTitle) {
            var message;

            if (numberOfAddedGroups == 0) {
                if (numberOfRemovedGroups == 1) {
                    message = sap.ushell.resources.i18n.getText("tileRemovedFromSingleGroup", [tileTitle, firstRemovedGroupTitle]);
                } else if (numberOfRemovedGroups > 1) {
                    message = sap.ushell.resources.i18n.getText("tileRemovedFromSeveralGroups", [tileTitle, numberOfRemovedGroups]);
                }
            } else if (numberOfAddedGroups == 1) {
                if (numberOfRemovedGroups == 0) {
                    message = sap.ushell.resources.i18n.getText("tileAddedToSingleGroup", [tileTitle, firstAddedGroupTitle]);
                } else if (numberOfRemovedGroups == 1) {
                    message = sap.ushell.resources.i18n.getText("tileAddedToSingleGroupAndRemovedFromSingleGroup", [tileTitle, firstAddedGroupTitle, firstRemovedGroupTitle]);
                } else if (numberOfRemovedGroups > 1) {
                    message = sap.ushell.resources.i18n.getText("tileAddedToSingleGroupAndRemovedFromSeveralGroups", [tileTitle, firstAddedGroupTitle, numberOfRemovedGroups]);
                }
            } else if (numberOfAddedGroups > 1) {
                if (numberOfRemovedGroups == 0) {
                    message = sap.ushell.resources.i18n.getText("tileAddedToSeveralGroups", [tileTitle, numberOfAddedGroups]);
                } else if (numberOfRemovedGroups == 1) {
                    message = sap.ushell.resources.i18n.getText("tileAddedToSeveralGroupsAndRemovedFromSingleGroup", [tileTitle, numberOfAddedGroups, firstRemovedGroupTitle]);
                } else if (numberOfRemovedGroups > 1) {
                    message = sap.ushell.resources.i18n.getText("tileAddedToSeveralGroupsAndRemovedFromSeveralGroups", [tileTitle, numberOfAddedGroups, numberOfRemovedGroups]);
                }
            }
            return message;
        },

        /**
         * Returns an object that contains:
         *  - An array of user groups, each one contains a "selected" property
         *  - An array ID's of the groups that contain the relevant Tile
         *
         * @param {sap.ui.base.Event} oEvent
         */
        createPopoverData : function (oEvent) {
            var oSource = oEvent.getSource(),
                oSourceContext = oSource.getBindingContext(),
                srvc = sap.ushell.Container.getService("LaunchPage"),
                index,
                model,
                path,
                tileTitle,
                realGroupID,

                // The popover basically contains an entry for each user group
                userGroupList = oSourceContext.getModel().getProperty("/groups"),

                // the relevant Catalog Tile form the model: e.g. /catalogTiles/5
                catalogTile = this.getCatalogTileDataFromModel(oSourceContext),

                // e.g. /catalogTiles/5/associatedGroups
                tileGroups = catalogTile.tileData.associatedGroups,

                // g.e. 5
                 tileIndex = catalogTile.tileIndex;

            // In order to decide which groups (in the popover) will be initially selected: 
            for (index = 0; index < userGroupList.length; index = index + 1) {

                // Get the group's real ID
                realGroupID = srvc.getGroupId(userGroupList[index].object);

                // Check if the group (i.e. real group ID) exists in the array of groups that contain the relevant Tile
                // if so - the check box that re[resents this group should be initially selected 
                userGroupList[index].selected = !($.inArray(realGroupID, tileGroups) == -1);

                // In order to know if the group was selected before user action    
                userGroupList[index].initiallySelected = userGroupList[index].selected;
            }
            path = oSourceContext.getPath(0);
            model = oSourceContext.getModel();
            tileTitle = model.getProperty(path).title;

            return {userGroupList : userGroupList, catalogTile : catalogTile, tileTitle : tileTitle, tileIndex : tileIndex};
        },

        /**
         * Returns the part of the model that contains the IDs of the groups that contain the relevant Tile
         *
         * @param {} oSourceContext
         *     model context
         */
        getCatalogTileDataFromModel : function (oSourceContext) {
            var tilePath = oSourceContext.sPath,
                tilePathPartsArray = tilePath.split("/"),
                tileIndex = tilePathPartsArray[tilePathPartsArray.length - 1];

            // Return an object containing the Tile in the CatalogTiles Array (in the model) and its index
            return {tileData : oSourceContext.getModel().getProperty("/catalogTiles/" + tileIndex), tileIndex : tileIndex};
        },

        /**
         * Event handler triggered if tile should be added to a specified group.
         *
         * @param {sap.ui.base.Event} oEvent
         *     the event object. It is expected that the binding context of the event source points to the group. Also,
         *     the event must contain a "control" parameter whose binding context points to the tile.
         */
        onAddTile : function (oEvent) {
            var oSourceContext = oEvent.getParameter("control").getBindingContext();
            if (!oSourceContext.getProperty("active")) {
                this._addTile(oSourceContext, oEvent.getSource().getBindingContext());
            }
        },

        onNavButtonPress : function (oEvent) {
            var oNavContainer = sap.ui.getCore().byId("navContainer");
            if (location.hash === '' || location.hash === '#') {
                oNavContainer.to("dashboardPage");
            } else {
                location.hash = '';
            }
        },

        /**
         * Send request to add a tile to a group. Request is triggered asynchronously, so UI is not blocked.
         *
         * @param {sap.ui.model.Context} oTileContext
         *     the catalog tile to add
         * @param {sap.ui.model.Context} oGroupContext
         *     the group where the tile should be added
         * @private
         */
        _addTile : function (oTileContext, oGroupContext) {
            var shellView = sap.ui.getCore().byId("mainShell"),
                dashboardMgr = shellView.oDashboardManager,
                deferred = jQuery.Deferred(),
                promise = dashboardMgr._createTile({
                catalogTileContext : oTileContext,
                groupContext: oGroupContext
            });

            promise.done(function(data){
                deferred.resolve(data);
            });

            return deferred;
        },

        /**
         * Send request to delete a tile from a group. Request is triggered asynchronously, so UI is not blocked.
         *
         * @param tileCatalogId
         *     the id of the tile
         * @param index
         *     the index of the group in the model
         * @private
         */
        _removeTile : function (tileCatalogId, index) {
            var shellView = sap.ui.getCore().byId("mainShell"),
                dashboardMgr = shellView.oDashboardManager,
                deferred = jQuery.Deferred(),
                promise = dashboardMgr._deleteCatalogTileFromGroup({
                    tileId : tileCatalogId,
                    groupIndex : index
                });
            
            // The function _deleteCatalogTileFromGroup always results in deferred.resolve 
            // and the actual result of the action (success/failure) is contained in the data object   
            promise.done(function(data){
                deferred.resolve(data);
            });

            return deferred;
        },

        /**
         * Send request to create a new group and add a tile to this group. Request is triggered asynchronously, so UI is not blocked.
         *
         * @param {sap.ui.model.Context} oTileContext
         *     the catalog tile to add
         * @param newGroupName
         *     the name of the new group where the tile should be added
         * @private
         */
        _createGroupAndSaveTile : function (oTileContext, newGroupName) {
            var shellView = sap.ui.getCore().byId("mainShell"),
                dashboardMgr = shellView.oDashboardManager,
                deferred = jQuery.Deferred(),
                promise = dashboardMgr._createGroupAndSaveTile({
                    catalogTileContext : oTileContext,
                    newGroupName: newGroupName
                });

            promise.done(function(data){
                deferred.resolve(data);
            });

            return deferred;
        },

        _setPopoverContainer : function (oNewGroupItemList, oList, popoverDataSectionHeight) {
            var popoverContainerId = "popoverContainer",
                popoverContainer = new sap.m.ScrollContainer({
                    id: popoverContainerId,
                    horizontal : false,
                    vertical : true
                });

            if (!sap.ui.Device.system.phone) {
                popoverContainer.setHeight((popoverDataSectionHeight - 2) + "px");
            } else {
                popoverContainer.setHeight("100%");
            }

            popoverContainer.addContent(oNewGroupItemList);
            popoverContainer.addContent(oList);

            return popoverContainer;
        }
    });
}());

// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, console, window, $ */
    /*jslint plusplus: true, nomen: true*/

    sap.ui.controller("sap.ushell.renderers.fiori2.launchpad.group_list.GroupList", {
        onInit : function () {
            // #groupList
            this.sViewId = "#" + this.getView().getId();
            // #__list4
            this.sGroupListId = "#" + this.getView().oGroupList.getId();

            jQuery(".sapUshellGroupList").data("dropGroup", null);

            //Internal counter for over and out events thrown by GroupListItems
            //This is needed because of a jQuery bug that throws over and out events in the wrong order
            this.iOutEventCounter = 0;
            this.iOverEventCounter = 0;
            //Internal flag to detect "real" GroupListOut-events
            this.iOutEventFlag = false;
            this.oDashboard = document.getElementById('dashboard');
            this.handleMobileScroll = this._fHandleMobileScroll.bind(this);
        },
        onAfterRendering : function () {
            this.jqView = jQuery(this.sViewId);
            this.jgGroupList = jQuery(this.sGroupListId);

            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.unsubscribe("grouplist", "ScrollAnimationEnd", this._handleScrollAnimationEnd, this);
            oEventBus.subscribe("grouplist", "ScrollAnimationEnd", this._handleScrollAnimationEnd, this);

            // The delete area is moved out of the scrollable area            
            jQuery("#__area1").appendTo("#shellPage");

            // Use a resize-handler to fix the size of input-fields (necessary for ie).
            if (sap.ui.Device.browser.internet_explorer){
                this._bindResizeHandler();
            }

            var oDashboardPageContent = jQuery("#dashboardPage-cont"),
            that = this;
            if (sap.ui.Device.system.desktop) {
	            var timer;
				oDashboardPageContent.unbind('scroll');
	            oDashboardPageContent.scroll(function () {
	                //call fHandleScroll only when the scrolling in the dashboard has finished to avoid // highlighting wrong groups on selection.
	                clearTimeout(timer);
	                timer = setTimeout(function () {
	                    var nScrollTop = jQuery("#dashboardPage-cont").scrollTop();
	                    that._fHandleScroll(nScrollTop);
	                }, 300);
	            });
	        }
            else {
                this.oDashboard.addEventListener('scroll',that.handleMobileScroll);
            }
        },
        onGroupTitleChange : function (oEvent) {
            this._publishAsync("launchpad", "changeGroupTitle", {
                groupId : oEvent.getSource().getGroupId(),
                newTitle : oEvent.getParameter("newTitle")
            });
            oEvent.getSource().addStyleClass('sapUshellOver');
        },
        makeSortable : function () {
            this.jgGroupList = jQuery(this.sGroupListId);
            this._sortable();
        },
        _getJqAllListItems : function () {
            this.jqView = jQuery(this.sViewId);
            return this.jqView.find(".sapUshellGroupListItem");
        },
        _getJqGroupListItems : function () {
            this.jgGroupList = jQuery(this.sGroupListId);
            return this.jgGroupList.find(".sapUshellGroupListItem");
        },

        _getGroupTopOffset : function (oGroup) {
            var iGroupTopOffset = 0,
                oDashboardPage = sap.ui.getCore().byId("groupListPage");

            iGroupTopOffset += oGroup.parent().parent().position().top;
            iGroupTopOffset += oGroup.position().top;
            iGroupTopOffset -= oGroup.parent().parent().parent().position().top;

            return iGroupTopOffset;
        },
     
        _sortable : function () {
            var that = this,
              //  jqParentGroupListPage = jQuery("#groupListPage").parent();
              jqParentGroupListPage = jQuery("#shell-container");

            that.bActive = false;

            this.jgGroupList.find(".sapMListUl").sortable({
                containment: jqParentGroupListPage,
                items: '>:not(.sapUshellDefaultGroupItem)',
                placeholder: "sapUshellGroupLI-placeholder",
                helper: function (event, element) {
                    var clone = element.clone(),
                        jqGroupListItem = jQuery(".sapUshellGroupListItem");
                    clone.addClass("sapUshellSortableHelperClone");
                    clone.addClass("sapUshellClonedGrouplistItem");
                    clone.removeClass("li");
                    clone.css("font-size", element.css("font-size"));
                    clone.css("width", jqGroupListItem.first().parent().width());
                    clone.css("height", jqGroupListItem.first().height() + parseInt(jqGroupListItem.first().css("border-bottom-width")));

                    clone.hide();
                    window.setTimeout(function () {
                        clone.appendTo('body');
                        clone.show();
                    }, 1);

                    return clone;
                },
                revert: jQuery.proxy(this._handleSortableRevert, this),
                start: jQuery.proxy(this._handleSortableStart, this),
                stop: jQuery.proxy(this._handleSortableStop, this),
                change: jQuery.proxy(this._handleSortableChange, this)
            });

            if (!sap.ui.Device.system.desktop) {
                this.jgGroupList.find(".sapMListUl").sortable('disable');
            }
        },

        _bindGroupListItemEvents : function(oEvent) {
            var oGroupListItem = oEvent.getSource();

            if (!sap.ui.Device.system.tablet) {
                return;
            }

            var that = this;

            jQuery.sap.byId(oGroupListItem.sId).bind("mousedown", function (event) {
                var _this = jQuery(this);

                if (that.bActive === false && !_this.hasClass("sapUshellDefaultGroupItem")) {
                    var _event = event;

                    jQuery(".sapUshellGroupItemList").find(".ui-sortable").sortable('disable');

                    clearTimeout(this.fdownTimer);
                    this.fdownTimer = setTimeout(function () {
                        that.bActive = true;
                        jQuery(_this).effect("shake", {
                            times: 1,
                            distance: 5,
                            complete: function () {
                                if( !that.bActive ) {
                                    return;
                                }
                                jQuery(".sapUshellGroupItemList").find(".ui-sortable").sortable('enable');

                                //deactivate scrolling during drag and drop on mobile devices
                                var oGroupListPage = sap.ui.getCore().byId("groupListPage"),
                                oScroller = oGroupListPage.getScrollDelegate();

                                if (oScroller && oScroller._scroller) {
                                	oScroller._scroller.disable();
                                }

                                _this.trigger(_event);
                            }
                        }, 50);
                    }, 150);
                }
            });

            jQuery.sap.byId(oGroupListItem.sId).bind("mouseup", function (event) {
                clearTimeout(this.fdownTimer);
                that.bActive = false;

                if (!sap.ui.Device.system.desktop) {
                    //activate scrolling after drag and drop on mobile devices
                    var oGroupListPage = sap.ui.getCore().byId("groupListPage"),
                    oScroller = oGroupListPage.getScrollDelegate();

                    if (oScroller && oScroller._scroller) {
                    	
                    	if(!oScroller._scroller.enabled) {
                        	oScroller._scroller.enable();
                        	//workaround to enable addGroup on iOS after enabling iScroll
                        	oScroller._scroller.scrollTo(oScroller._scroller.absStartX, oScroller._scroller.absStartY);
                    	}
                    	
                    }
                }
            });

            jQuery.sap.byId(oGroupListItem.sId).bind("mousemove", function (event) {
                clearTimeout(this.fdownTimer);
                that.bActive = false;
            });
        },

        _handleSortableRevert : function (event, ui) {
            //Return desired return duration
            return 250;
        },

        _handleSortableStart : function (event, ui) {
            var UI5groupList = this.getView().oGroupList;
            var UI5items =  UI5groupList.getItems();
            var that = this;
            this.sortableInfo = {
                jqGroupPage: jQuery(this.getView().getDomRef()),
                jqGroupList: jQuery(UI5groupList.getDomRef())
            }
            this.sortableInfo.jqCloneArea = this.sortableInfo.jqGroupPage.find(".sapUshellCloneArea");
            if (!this.sortableInfo.jqCloneArea.length) {
                this.sortableInfo.jqCloneArea = jQuery("<div id='cloneArea' class='sapUshellCloneArea'></div>").appendTo(this.sortableInfo.jqGroupList);
            }
            this.sortableInfo.jqGroupListItems = [];
            for (var i=0, length=UI5items.length; i<length; i++) {
                var item = UI5items[i].getDomRef();
                if (item.id == ui.item.id) continue;
                this.sortableInfo.jqGroupListItems.push(jQuery(item));
            }
            this.sortableInfo.jqFirstItem = this.sortableInfo.jqGroupListItems[0];
            this.sortableInfo.fontSize = this.sortableInfo.jqFirstItem.css("font-size");
            this.sortableInfo.width = this.sortableInfo.jqFirstItem.parent().width();
            this.sortableInfo.height = this.sortableInfo.jqFirstItem.height()+parseInt(this.sortableInfo.jqFirstItem.css("border-bottom-width"));

            sap.ui.getCore().getEventBus().publish("launchpad", "sortableStart");

            //Clone all existing groups
            //Iterate through all groups
            this.sortableInfo.cloneGroupsArr = [];
            for (var i=0, length=this.sortableInfo.jqGroupListItems.length; i<length; i++) {
                //Clone the current group (including style)
                var jqGroup = this.sortableInfo.jqGroupListItems[i];
                var jqClonedGroup = jqGroup.clone();
                //Position the clone inside the cloneArea
                var iGroupTopOffset = that._getGroupTopOffset(jqGroup);
                jqClonedGroup.addClass("sapUshellClonedGrouplistItem");
                //Save the clone and the current group (sapUshellDashboardGroupsContainerItem)
                jqGroup.data("clone", jqClonedGroup);
                //Set the new position
                jqClonedGroup.css("top", iGroupTopOffset + "px");
                //Fix some styling
                jqClonedGroup.css({"font-size": this.sortableInfo.fontSize, "width": this.sortableInfo.width, "height": this.sortableInfo.height});
                //Append the clone...
                that.sortableInfo.jqCloneArea.append(jqClonedGroup);
                jqGroup.css("visibility", "hidden");
                this.sortableInfo.cloneGroupsArr.push(jqClonedGroup);
            }

            //Get the clone that is under the current original tile and hide it...
            ui.item.startPos = ui.item.index();
            //show delete-area
            this.oView.oGrouplistDeleteArea.show();
        },

        _updateGroupSelection : function () {
            // Nothing to do if Grouplist is not shown.
            var oModel = this.getView().getModel();
            if(!oModel || !oModel.getProperty("/currentState/showPane")) {
                return;
            }

            //Check if something is currently being dragged or sorted (there is a helper in the dom)
            //If so, cancel this whole update action
            if (jQuery(".ui-sortable-helper").length > 0) {
                return;
            }
            if (sap.ui.Device.system.desktop){
                var nScrollTop = jQuery("#dashboardPage-cont").scrollTop();
            }
            else {
                var nScrollTop = this.oDashboard.scrollTop;
            }
            this._fHandleScroll(nScrollTop);
        },

        _fHandleMobileScroll : function () {
        	var nScrollTop = this.oDashboard.scrollTop;
            this._fHandleScroll(nScrollTop);
        },

        _fHandleScroll : function (nScrollTop) {
            var jqContainer = jQuery('#dashboardGroups').find('.sapUshellTileContainer'),
                oOffset = jQuery('#dashboardGroups').offset(),
                firstContainerOffset = oOffset && oOffset.top || 0,
                edgeMargin = oOffset && oOffset.top,
                animationTime = 1200,
                contentTop = [],
            	oModel = this.getView().getModel();
            	
            // In some weird corner cases, those may not be defined -> bail out.
            if(!jqContainer || !oOffset) {
                return;
            }

            jqContainer.each(function () {
                var nContainerTopPos = jQuery(this).parent().offset().top;
                contentTop.push([nContainerTopPos, nContainerTopPos + jQuery(this).parent().height()]);
            });

            if(!oModel.getProperty("/groupList-skipScrollToGroup")) {
                var winTop = nScrollTop + firstContainerOffset;
                jQuery.each(contentTop, function (i, currentPos) {
                    if (currentPos[0] <= winTop && winTop <= currentPos[1]) {
                        jQuery('#groupList .sapUshellDefaultGroupItem, #groupList .sapUshellGroupListItem')
                            .removeClass('sapUshellOver')
                            .eq(i).addClass('sapUshellOver');
                    }
                });
            }
            sap.ushell.utils.handleTilesVisibility();
        },
        
        _handleSortableStop : function (event, ui) {
            //Delete all clones
            for(var i= 0, length=this.sortableInfo.cloneGroupsArr.length; i<length; i++) {
                this.sortableInfo.cloneGroupsArr[i].remove();
            }

            //hide delete-area
            this.oView.oGrouplistDeleteArea.hide();
            var oGroupListItem = sap.ui.getCore().byId(ui.item[0].id),
                toIndex = ui.item.index();

            if (oGroupListItem) {
                if (!oGroupListItem.bDeletionFlag) {
                    this._handleGroupMove(event, ui);
                } else {
                    oGroupListItem.bDeletionFlag = false;
                }
            }

            //make sure all hidden item are visible again
            for(var i= 0, length=this.sortableInfo.jqGroupListItems.length; i<length; i++) {
                this.sortableInfo.jqGroupListItems[i].css("visibility", "");
            }

            //we need to cancel the sortable as changes to the model already position the item in the right order
            this.jgGroupList.find(".sapMListUl").sortable('cancel');

            if (!sap.ui.Device.system.desktop) {
                this.bActive = false;
                this.jgGroupList.find(".sapMListUl").sortable('disable');
            }

            //do not scroll in case of delete.
            if (event.scrollToGroup === undefined || event.scrollToGroup == true) {
                // Wait until dashboard is rerendered
                window.setTimeout(jQuery.proxy(function () {
                    //when the dashboard scrolls to the selected group, highlighting the selected group also happens by the "fHandleScroll" function
                    this._handleScrollToGroup(this.oView.oGroupList.getItems()[toIndex], true);
                }, this), 500);
            }
            delete this.sortableInfo;
            sap.ui.getCore().getEventBus().publish("launchpad", "sortableStop");
        },

        _handleDrop : function(event, ui) {
            var jqGroupListItem = jQuery(ui);
            //hide delete-area
            this.oView.oGrouplistDeleteArea.hide();
            //Update model
            var oGroupListItem = sap.ui.getCore().byId(jqGroupListItem.attr("id")),
                oGroupList = oGroupListItem.getParent(),
                wrappedItem,
                bRemovable,
                deleteArea = jQuery(".sapUshellDeleteArea_grouplist_functional"),
                oEventBus = sap.ui.getCore().getEventBus(),
                nNewIndex = jqGroupListItem.index();

            if (oGroupListItem) {
                if (deleteArea.data("groupOver") === true) {
                    bRemovable = oGroupListItem.getRemovable();
                    oEventBus.publish("launchpad", bRemovable ? "deleteGroup" : "resetGroup", {
                        groupId : oGroupListItem.getGroupId()
                    });

                    deleteArea.data("groupOver", false);
                }
                else {
                    jqGroupListItem.startPos = parseInt(jqGroupListItem.attr('startPos'));
                    oGroupList.removeItem(oGroupListItem, true);
                    oGroupList.insertItem(oGroupListItem, nNewIndex, true);
                    this.getView().getModel().setProperty("/groupList-skipScrollToGroup", true);
                    wrappedItem = {item : jqGroupListItem};
                    this._handleGroupMove(event, wrappedItem);
                    setTimeout(function() {oGroupListItem.firePress();}, 1);
                }
            }
        },

        _handleSortableChange : function (event, ui) {

            for(var i= 0, length=this.sortableInfo.jqGroupListItems.length; i<length; i++) {
                //Get the original tile and its clone
                var jqItem = this.sortableInfo.jqGroupListItems[i];
                var oClonedGroup = jqItem.data("clone");
                var iGroupTopOffset = this._getGroupTopOffset(jqItem);
                if (oClonedGroup) {
                    //Stop currently running animations
                    //Without this, animations would queue up
                    oClonedGroup.stop(true, false);

                    //Get the invisible tile that has snapped to the new
                    //location, get its position, and animate the visible
                    //clone to it

                    //Animate everything to their new locations
                    oClonedGroup.animate({
                        top: iGroupTopOffset + "px"
                    }, {
                        duration: 250
                    }, {
                        easing: "swing"
                    });
                }

            }
        },

        // Model Event Handlers
        _handleGroupCreate : function () {
            var focused = jQuery(':focus');
            if (focused) {
                focused.blur();
            }

            this._publishAsync("launchpad", "createGroup", {
                title : sap.ushell.resources.i18n.getText("new_group_name")
            });
        },

        _handleGroupListItemPress : function (oEvent) {
            var oSource = oEvent.getSource();
            //to support accessibility tab order we set focus in press in case edit mode is off
            var focus = oEvent.getParameter("action") === "sapenter"
            this._handleScrollToGroup(oSource, false, focus);
            this._updateGroupSelection();
           // }
        },

        _handleScrollToGroup : function (oGroupItem, groupChanged, focus) {
            if (!oGroupItem) {
                return;
            }
            var that = this;
            this.oDashboard.removeEventListener('scroll',that.handleMobileScroll);

            this._publishAsync("launchpad", "scrollToGroup", {
                group : oGroupItem,
                groupChanged : groupChanged,
                focus : focus
            });
        },

        _handleScrollAnimationEnd : function() {
            var that = this;
            this.oDashboard.addEventListener('scroll',that.handleMobileScroll);
        },

        _handleGroupMove : function (event, ui) {
            var fromIndex = ui.item.startPos,
                toIndex = ui.item.index();

            if (fromIndex !== toIndex && toIndex !== -1) {
                this._publishAsync("launchpad", "moveGroup", {
                    fromIndex  : fromIndex,
                    toIndex    : toIndex
                });
            }
        },

        // TODO: This is done in _mouseStop in the view.js, but should be handled here.
        /*
        _handleGroupDelete : function (event, ui) {
            var oEventBus = sap.ui.getCore().getEventBus(),
                oGroup = sap.ui.getCore().byId(ui.draggable[0].id);
            oEventBus.publish("launchpad", "deleteGroup", {
                groupId : oGroup.getGroupId()
            });
        },
        */

        onCategoryFilter : function (oEvent) {
            var oBus = sap.ui.getCore().getEventBus(),
                sQuery = oEvent.getParameter("selectedItem").getText();

            // Async publication of category filter
            window.setTimeout(jQuery.proxy(oBus.publish, oBus, "catalog", "categoryFilter", {
                category : (sQuery !== "All") ? sQuery : null
            }), 1);
        },

        _publishAsync : function (sChannelId, sEventId, oData) {
            var oBus = sap.ui.getCore().getEventBus();
            window.setTimeout($.proxy(oBus.publish, oBus, sChannelId, sEventId, oData), 1);
        },

        //Group List Items
        _handleGroupListItemOver : function (oEvent) {
            //If this is the first GroupListItemOver, then the tile probably just started hovering the group list
            //Due to wrong order and number of events we still have to check if this has already happened
            if (this.iOutEventCounter === 0 && this.iOverEventCounter === 0) {
                this._handleGroupListOver(oEvent);
            }

            //Flag that this event has happened
            this.iOutEventFlag = true;

            //Notify dashboard
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.publish("grouplist", "GroupListItemOver", oEvent);

            this.iOutEventCounter++;
        },
        _handleGroupListItemOut : function (oEvent) {
            this.iOutEventCounter--;

            //Check if there is an OVER-event happening within the next few ms
            this.iOutEventFlag = false;
            var that = this;
            setTimeout(function () {
                if (that.iOutEventFlag === false) {
                    //There was NO next over event, it could be a GroupListOut
                    //but we still have to check if the order and number of the events was correct
                    //If every over has an out, the tile cannot be over the group list anymore
                    if (that.iOutEventCounter === 0 && that.iOverEventCounter === 1) {
                        that._handleGroupListOut(oEvent);
                    }
                }
            }, 1);

            //Notify dashboard
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.publish("grouplist", "GroupListItemOut", oEvent);
        },
        _handleGroupListItemDrop : function (oEvent) {
            //Reset some stuff
            this.iOutEventCounter = 0;
            this.iOverEventCounter = 0;
            this.iOutEventFlag = false;

            //Notify dashboard
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.publish("grouplist", "GroupListItemDrop", oEvent);
        },

        //Group List
        _handleGroupListOver : function (oEvent) {
            this.iOverEventCounter++;

            //Notify dashboard
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.publish("grouplist", "GroupListOver", oEvent);
        },
        _handleGroupListOut : function (oEvent) {
            this.iOverEventCounter = 0;

            //Notify dashboard
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.publish("grouplist", "GroupListOut", oEvent);
        },
        _bindResizeHandler : function () {
            var fResizeHandler = function (event) {
                var jqGrouplist = jQuery("#groupList"),
                    jqTitleOnly = jQuery(".sapMSLITitleOnly"),
                    jqInputField = jQuery(".sapUshellGroupLI").find(".sapMInput");

                jqTitleOnly.css("width", (jqGrouplist.width() - parseInt(jqTitleOnly.css("padding-left"), 10)) + "px");
                jqInputField.css("width", (jqGrouplist.width() - (2 * parseInt(jqInputField.css("margin-left"), 10))) + "px");
            };
            jQuery(window).unbind("resize", fResizeHandler);
            jQuery(window).bind("resize", fResizeHandler);
        }
    });
}());

//Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview
 *
 * @version
 */
(function (global) {
    "use strict";
    /*global jQuery, sap */
    


        sap.m.Link.extend("sap.ushell.renderers.fiori2.search.DataSourcePill", {
        metadata : {
            properties : {
                dataSourceName: "string", // closed (default) or open
            },
            events: {
                press: {}
            }
        },
        renderer : function(oRm, oControl) { // static function, so use the given "oControl" instance instead of "this" in the renderer function
            /// outer div
            oRm.write('<div tabindex=0');
            oRm.writeControlData(oControl);  // writes the Control ID
            oRm.addClass("sapUshellDataSourcePill");
            oRm.addClass("sapUshellDataSourceListPill");
            oRm.writeClasses();              // this call writes the above class plus enables support for Square.addStyleClass(...)
            oRm.write(">");

            oRm.write('<div class="sapUiUfdShellSearchBoxPillDsName">'+oControl.getDataSourceName()+'</div>');

            oRm.write("</div>");
        },
        onclick : function(evt) {
            this.firePress();
        },
        onkeyup : function(evt) {
        	if(event.keyCode == 13){
        		this.firePress();
        	}
        }
    });

    sap.ui.core.Control.extend("sap.ushell.renderers.fiori2.search.DataSourceList", {
        // the control API:
        metadata : {
            properties : {
                "dataSources" : {type : "object[]"}
            },
            events: {
                dsPress: {}
            }
        },

        // the part creating the HTML:
        renderer : function(oRm, oControl) { // static function, so use the given "oControl" instance instead of "this" in the renderer function
            

            /// outer div
            oRm.write("<div");
            oRm.writeControlData(oControl);  // writes the Control ID
            oRm.addClass("sapUshellDataSourceList");
            oRm.writeClasses();              // this call writes the above class plus enables support for Square.addStyleClass(...)
            oRm.write('>');

            var sDevice = sap.ui.Device.media.getCurrentRange(sap.ushell.renderers.fiori2.search.DataSourceList.RANGESET);
            var numColums = sap.ushell.renderers.fiori2.search.DataSourceList._columns[sDevice.name];
            
            
            //Build table Columns
            var columns = []; 
            for (var i = 0; i < numColums; i++) {

                var hAlign;
                if (i === 0) {
                    hAlign = "Left";
                }else if(i === numColums-1){
                    hAlign = "Left";
                }else{
                    hAlign = "Left";
                }

                columns.push(new sap.m.Column({
                  hAlign: hAlign
                }));


            }

            var dss = oControl.getDataSources();
            if (dss && dss.length !== 0) {

                $.each(dss, function( i, value ) {

                    var dsLabel = value.label || value.objectName.label || value.objectName.value;
                    if (!dsLabel || dsLabel === "") 
                        dsLabel = value.objectName.value;
                    
                    var pill = new sap.ushell.renderers.fiori2.search.DataSourcePill({
                        dataSourceName: dsLabel,
                        press:function(){
                            oControl.fireDsPress({ds:value});
                        }
                    }).addStyleClass("sapUshellDataSourcePill");

                    oRm.renderControl(pill);
                });
            }

            // var currentColumnListItem;
            // //Build table columncontent
            // var dss = oControl.getDataSources();
            // var emptyCells = 0;
            // if (dss && dss.length !== 0) {

            //     var table = new sap.m.Table({
            //       columns: columns,
            //       showNoData : false,
            //     });

            //     $.each(dss, function( i, value ) {
            //         if(i%numColums === 0){ // new row
            //             currentColumnListItem = new sap.m.ColumnListItem();
            //             table.addItem(currentColumnListItem);
            //         }
            //         var dsLabel = value.label || value.objectName.label || value.objectName.value;
            //         if (!dsLabel || dsLabel === "") 
            //             dsLabel = value.objectName.value;
                    
            //         currentColumnListItem.addCell(
            //             new sap.ushell.renderers.fiori2.search.DataSourcePill({
            //                 dataSourceName: dsLabel,
            //                 press:function(){
            //                     oControl.fireDsPress({ds:value});
            //                 }
            //             }).addStyleClass("sapUshellDataSourcePill")
            //         );
            //         emptyCells = (i+1)%numColums;
            //     });

            //     for (i = 0; i < emptyCells; i++) {
            //         currentColumnListItem.addCell(
            //             new sap.m.Text()
            //         );
            //     }
            //     oRm.renderControl(table);
                
            // }

            /// close outer div
            oRm.write("</div>"); // end of the complete control
        },

        _handleMediaChange: function() {
            this.rerender();
        },



    });
            
    sap.ushell.renderers.fiori2.search.DataSourceList.RANGESET = "DataSourceLayoutRangeSet";
    sap.ushell.renderers.fiori2.search.DataSourceList._columns = {
        Phone : 1,
        Tablet : 2,
        Desktop : 3
    };

    

    sap.ushell.renderers.fiori2.search.DataSourceList.prototype.init = function () {
        // if (sap.m.Table.prototype.init) {
        //     sap.m.Table.prototype.init.call(this);
        // }

        sap.ui.Device.media.initRangeSet(
            sap.ushell.renderers.fiori2.search.DataSourceList.RANGESET,
            [500, 1024],
            "px",
            ["Phone", "Tablet", "Desktop"]
        );
        // sap.ui.Device.media.attachHandler(sap.ushell.renderers.fiori2.search.DataSourceList, this, sap.ushell.renderers.fiori2.search.DataSourceList.RANGESET );
        sap.ui.Device.media.attachHandler(this._handleMediaChange, this, sap.ushell.renderers.fiori2.search.DataSourceList.RANGESET );
    };


}(window));

// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, console */

    /**
     * @name "sap.ushell.renderers.fiori2.SearchFilter
     * @extends sap.ui.core.mvc.Controller
     * @public
     */
    sap.ui.controller("sap.ushell.renderers.fiori2.search.ResultFilterInfo", {

        /**
         * SAPUI5 lifecycle hook.
         * @public
         */
        onInit: function () {
            var oModel = new sap.ui.model.json.JSONModel();
            oModel.setData({filter: []});
            this.getView().setModel(oModel, "filter");

            sap.ui.getCore().getEventBus().subscribe("search", this.searchInvoked, this);
            sap.ui.getCore().getEventBus().subscribe("searchDataSourceChange", this.dataSourceSelected, this);
        },

        onExit: function () {
            sap.ui.getCore().getEventBus().unsubscribe("search", this.searchInvoked, this);
            sap.ui.getCore().getEventBus().unsubscribe("searchDataSourceChange", this.dataSourceSelected, this);
        },

        dataSourceSelected: function (sChannelId, sEventId, oData) {
            this.setResultFilterInfo([oData]);
        },

        searchInvoked: function (sChannelId, sEventId, oData) {
            if (oData.dataSource && oData.dataSource.label) {
                this.setResultFilterInfo([oData.dataSource]);
            } else {
                this.setResultFilterInfo([]);
            }
        },

        setResultFilterInfo: function (aFilters) {
            var oModel = this.getView().getModel("filter");

            // do not display "$$ALL$$" filter
            if (aFilters.length > 0 && aFilters[0].objectName && (aFilters[0].objectName === "$$ALL$$"
                || aFilters[0].objectName.value === "$$ALL$$")) {
                aFilters.splice(0, 1);
            }

            if (aFilters.length > 0) {
                sap.ui.getCore().byId("searchResultPage").removeStyleClass("sapSearchResultFilterInfoHidden");
                this.showCategoryMarker = true;
                oModel.setProperty("/filter", aFilters);
            } else {
                sap.ui.getCore().byId("searchResultPage").addStyleClass("sapSearchResultFilterInfoHidden");
                this.showCategoryMarker = false;
                oModel.setProperty("/filter", []);
            }
        },

        onBeforeRendering: function () {
            this.getView().getModel().setProperty("/states/searchResults/showCategoryMarker", this.showCategoryMarker);
        }
    });
}());

//Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap */

    sap.ui.jsview("sap.ushell.renderers.fiori2.search.ResultFilterInfo", {

        createContent: function (controller) {
            return new sap.m.HBox({
                visible: {
                    path: "/currentState/showCurtainPane",
                    formatter: function (bShowCurtainPane) {
                        return !bShowCurtainPane;
                    }
                },
                items: {
                    path: "filter>/filter",
                    factory: function (sId, oContext) {
                        var oFilter = new sap.m.HBox(),
                            aFilter = oContext.getModel().getProperty("/filter");

                        if (aFilter.indexOf(oContext.getObject()) === 0) {
                            oFilter.addItem(new sap.m.Text({
                                text: {path: "i18n>searchedIn"},
                                layoutData: new sap.m.FlexItemData({
                                    alignSelf: sap.m.FlexAlignSelf.Center
                                })
                            }));
                        }

                        return oFilter.addItem(new sap.m.Text({
                            text: {path: "filter>label"},
                            layoutData: new sap.m.FlexItemData({
                                alignSelf: sap.m.FlexAlignSelf.Center
                            })
                        }).addStyleClass("sapSearchResultFilterInfoLabel"));
                    }
                }
            }).addStyleClass("sapSearchResultFilterInfo");
        },

        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.search.ResultFilterInfo";
        }
    });
}());
// // Copyright (c) 2013 SAP AG, All Rights Reserved

// (function () {
//     "use strict";
//     /*global jQuery, sap, console */

//     /**
//      * @name "sap.ushell.renderers.fiori2.SearchFilter
//      * @extends sap.ui.core.mvc.Controller
//      * @public
//      */
//     sap.ui.controller("sap.ushell.renderers.fiori2.search.SearchFilter", {

//         /**
//          * SAPUI5 lifecycle hook.
//          * @public
//          */
//         onInit: function () {
//             var self = this;
//             if(self.getView().getModel()){
//                 var facets = self.getView().getModel().getFacets();
//                 var dataSources = facets.filter(function(element){
//                     return element.facetType === "datasource";
//                 });
//                 if(dataSources.length>0){
//                     dataSources = dataSources[0];
//                 }
                
//             }

//         },


//         selectCategory : function(event,category){
//             sap.ushell.Container.getService("Search").setDataSource(category.dataSource, this.getView().getModel('SearchFilter'));
//             sap.ui.getCore().getEventBus().publish("selectCategory", category.dataSource);
//         },


//         buildCategoryTreeForSuggestion: function (sChannelId, sEventId, oData) {
//             var self = this;
//             self.getView().getModel("SearchFilter").setProperty("/currentState/showCurtainPane", false);
//             if(oData.categorySuggested){
//                 sap.ushell.Container.getService("Search").setSearchCategoryTree(oData);
//             }
//         },

//         buildCategoryTreeForNoSearchTerm: function(sChannelId, sEventId, oData){
//             var self = this;
//                 if(oData.searchTerm === ""){
//                     sap.ushell.Container.getService("Search").setQueryForAll(this.getView().getModel('SearchFilter'), false);
//                 } else {
//                     sap.ushell.Container.getService("Search").setSearchTermWithoutQuery(oData.searchTerm);
//                 };
//         },

// //        buildCategoryTreeForCloseCurtain: function(){
// //            sap.ushell.Container.getService("Search").setQueryForAll(this.getView().getModel('SearchFilter'), true);
// //        }



//     });
// }());

// //Copyright (c) 2013 SAP AG, All Rights Reserved
// (function () {
//     "use strict";
//     /*global jQuery, sap */

//     sap.m.ListItemBase.extend("sap.search.CategoryTreeItem", {
//         metadata : {
//             aggregations: {
//                 left: {multiple:false },
//                 right: {multiple:false }
//             }
//         },

//         renderer : function(oRm, oControl) {      // the part creating the HTML

//             oRm.write("<div");
//             oRm.writeControlData(oControl);  // writes the Control ID
//             oRm.writeClasses();
//             oRm.write(">");

//             oRm.write("<div class=treeRight>");
//             if (oControl.getRight())
//             {
//                 oRm.renderControl( oControl.getRight());
//             }
//             oRm.write("</div>");

//             oRm.write("<div class=treeLeft>");
//             if (oControl.getLeft()){
//                 oRm.renderControl( oControl.getLeft());
//             }
//             oRm.write("</div>");

//             oRm.write("</div>");

//         }
//     });

//     sap.m.FacetFilterItem.extend("sap.search.SearchFacetFilterItem", {
//         metadata : {
//             aggregations: {
//                 left: {multiple:false },
//                 right: {multiple:false }
//             }
//         },

//         renderer : function(oRm, oControl) {      // the part creating the HTML

//             oRm.write("<div");
//             oRm.writeControlData(oControl);  // writes the Control ID
//             oRm.writeClasses();
//             oRm.write(">");

//             oRm.write("<div class=treeRight>");
//             if (oControl.getRight())
//             {
//                 oRm.renderControl( oControl.getRight());
//             }
//             oRm.write("</div>");

//             oRm.write("<div class=treeLeft>");
//             if (oControl.getLeft()){
//                 oRm.renderControl( oControl.getLeft());
//             }
//             oRm.write("</div>");

//             oRm.write("</div>");

//         }
//     });

//     sap.ui.jsview("sap.ushell.renderers.fiori2.search.SearchFilter", {

//         createContent: function (controller) {

//             var self = this;
//             var list = new sap.m.List({

//             });


//             list.bindAggregation("items", "SearchFilter>/categoryTree", function (sId, oContext) {
//                 var category = oContext.getObject();
//                 var item= self.assembleCategoryListItem(controller,category);
//                 return item;
//             });


//             list.addStyleClass("searchFilterList");
//             return list;
//         },

//         assembleCategoryListItem: function (controller,category) {
//             // var item = new sap.m.CustomListItem();

//             var content = [];

//             var link;
//             var number;


//             if(category.dataSource.label === ''){
//                 return null;
//             }

//             if(category.dataSource.level === 0){
//                 link = new sap.m.Link({text : "All Content"});
// //              link = new sap.m.Link({text :category.dataSource.label+" + "+category.current.toString() + " + " + category.dataSource.level});
// //                item.addContent(link);

//             }else{
//                 link = new sap.m.Link({text :category.dataSource.label});
// //              link = new sap.m.Link({text :category.dataSource.label+" + "+category.current.toString() + " + " + category.dataSource.level});
//             }
//             // item.addContent(link);
//             content.push(link);
//             link.attachPress(category,controller.selectCategory,controller);
//             link.addStyleClass("link");


//             if(category.value !== undefined){
//                 number = new sap.m.Label({text :category.value.toString()});
//                 number.addStyleClass("number");
//                 if(category.value === -1){
//                     number.addStyleClass("hide");
//                 }else{
//                     number.removeStyleClass("hide");
//                 }
//                 // item.addContent(number);
//                 content.push(number);
//             }

//             var item = new sap.search.CategoryTreeItem({
//                 left : link,
//                 right: number
//             });


//             item.addStyleClass("searchFilterItem");
//             item.addStyleClass("searchFilterItemLevel" + category.dataSource.level);
//             if(category.current){
//                 item.addStyleClass("active");
//             }
//             return item;
//         },

//         getControllerName: function () {
//             return "sap.ushell.renderers.fiori2.search.SearchFilter";
//         },

//     });
// }());
//Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview
 *
 * @version
 */
(function (global) {
    "use strict";
    /*global jQuery, sap */

    sap.ui.core.Control.extend("SearchResultListWithDetail", {
        // the control API:
        metadata : {
            properties : {

            },
            aggregations : {
                "resultList":      {type: "sap.ui.core.Control", multiple: false},
                "preview":         {type: "sap.ui.core.Control", multiple: false}
            }
        },

        // the part creating the HTML:
        renderer : function(oRm, oControl) { // static function, so use the given "oControl" instance instead of "this" in the renderer function
            /// outer div
            oRm.write("<div");
            oRm.writeControlData(oControl);  // writes the Control ID
            oRm.addClass("searchResultListWithDetail");
            oRm.writeClasses();              // this call writes the above class plus enables support for Square.addStyleClass(...)
            oRm.write('>');

            oRm.write('<div class="searchLayout-left">');
            if (oControl.getResultList())
            {
                oRm.renderControl(oControl.getResultList());
            }
            oRm.write('</div>');

            oRm.write('<div');
            oRm.addClass("searchLayout-right");
            oRm.writeClasses();
            oRm.write('>');
            if (oControl.getPreview())
            {
                oRm.renderControl(oControl.getPreview());
            }
            oRm.write('</div>');


            /// close outer div
            oRm.write("</div>"); // end of the complete control
        },

        onAfterRendering: function() {
            var self = this;
            var preview = $(this.getDomRef()).find('.searchResultListItemDetail');
            // var resultList = $(this.getDomRef()).find('.searchResultListWithDetail');
            // var headerSize = 50; // offset() calculates the offset to the window, we have to consider the fat header as well
            
            var headerSize = $("#searchPage-cont") ? $("#searchPage-cont").offset().top : $("#searchResultPage-cont").offset().top;

            //App Case
            // if ($("#searchPage-scroll").length > 0) headerSize = 90;

            var updatePos = function(){

                //searchPage-scroll
                if ($("#searchResultPage-scroll").length > 0 || $("#searchPage-scroll").length > 0) {

                    var resultList = $('.searchResultListWithDetail');
                    if (resultList.length > 0)
                    {
                        if (resultList.offset().top - headerSize < 0) //resultlist scrolled outside, fix detail to top
                        {
                            preview.css('margin-top', -resultList.offset().top +headerSize );
                        }else{
                            preview.css('margin-top', 0 );
                        }
                    }
                }

                delayedUpdatePos();

            };

            var delayedUpdatePos = function(){
                //****** This is a bugfix for the iPad, which triggers no event in the deceleration phase *******/
                if (self.lastScrollTimeout)
                {
                    window.clearTimeout(self.lastScrollTimeout);
                }
                self.lastScrollTimeout = setTimeout(function(){
                    updatePos();
                }, 1000);
            };

            $("#searchResultPage-cont").on("scroll", updatePos);

            $("#searchResultPage-cont").bind('touchmove', function(e){
                e.preventDefault();
                updatePos();
            });

            $("#searchPage-cont").on("scroll", updatePos);

            $("#searchPage-cont").bind('touchmove', function(e){
                e.preventDefault();
                updatePos();
            });

            updatePos();

        }

    });



    sap.ui.core.Control.extend("SearchLayout", {
        // the control API:
        metadata : {
            properties : {
                showMainHeader  : {type : "boolean", defaultValue : false},
                enableNoResults  : {type : "boolean", defaultValue : false},
                searchTerm      : "string",
                topHeader       : "string",
                topCount        : "int",
                bottomHeader    : "string",
                bottomHeaderIsUnspecific: {type : "boolean", defaultValue : true}, // DatasorurceIsAll $$ALL$$
                bottomCount     : "int",
                searchBusy      : {type : "boolean", defaultValue : false},
                showBottomList	: {type : "boolean", defaultValue : true}
            },
            aggregations : {
                "topList"       : {type: "sap.ui.core.Control", multiple: false},
                "bottomList"    : {type: "sap.ui.core.Control", multiple: false},
                "facets"        : {type: "sap.ui.core.Control", multiple: false}
            }
        },


        // the part creating the HTML:
        renderer : function(oRm, oControl) { // static function, so use the given "oControl" instance instead of "this" in the renderer function
            oControl.renderResultPage = false;
            oControl.renderNoResultPage = false;

            /// outer div
            oRm.write("<div");
            oRm.writeControlData(oControl);  // writes the Control ID
            oRm.addClass("searchLayout");
            oRm.writeClasses();              // this call writes the above class plus enables support for Square.addStyleClass(...)
            oRm.write('>');


            this.busy = new sap.m.BusyIndicator({
                size:"50px"
            });
            this.busy.addStyleClass('searchBusyIcon');
            this.busy.addStyleClass('hidden');

            if (oControl.getSearchBusy() === true){
                this.busy.removeStyleClass('hidden');


                oRm.write("<div");
                oRm.addClass("searchBusy");
                oRm.writeClasses();              // this call writes the above class plus enables support for Square.addStyleClass(...)
                oRm.write('>');
                oRm.renderControl(this.busy);
                oRm.write("</div>");

                oRm.write("<div");
                oRm.addClass("searchBusyBG");
                oRm.writeClasses();              // this call writes the above class plus enables support for Square.addStyleClass(...)
                oRm.write('>');
                oRm.write("</div>");

                oControl.renderResultPage = false;
                oControl.renderNoResultPage = false;
            }


            //Show main header when there are two lists, or no list
            // var topAndBottomList = oControl.getTopList() && oControl.getBottomList();
            // var noTopAndBottomList = !(oControl.getTopList() || oControl.getBottomList());
            var totalCount = 0;
            if (oControl.getTopCount()) totalCount = totalCount + oControl.getTopCount();
            if (oControl.getBottomCount()) totalCount = totalCount + oControl.getBottomCount();

            var showNoResultsScreen = totalCount === 0 && oControl.getEnableNoResults();

            if (oControl.getShowMainHeader() === true && oControl.getSearchBusy() === false){

                oRm.write('<div class="searchLayout-mainHeader">');
                oRm.renderControl((new sap.m.Label({text: sap.ushell.resources.i18n.getText("searchResults") })).addStyleClass('searchLayout-mainHeaderName'));
                oRm.renderControl((new sap.m.Label({text: '('+totalCount+')' })).addStyleClass('searchLayout-mainHeaderCount'));
                oRm.write('</div>');                    

            }

            // no result page                
            if(showNoResultsScreen && oControl.getSearchBusy() === false){                    
                var escapedSearchTerm = $('<div>').text(oControl.getSearchTerm()).html();
                // render no result page
                oRm.write('<div class="no-result"><div class="no-result-icon">');
                oRm.writeIcon(sap.ui.core.IconPool.getIconURI("travel-request"));
                oRm.write('</div><div class="no-result-text">');
                oRm.write('<div class="no-result-info">' + sap.ushell.resources.i18n.getText("no_results_info").replace('&1', escapedSearchTerm) + '</div>');
                oRm.write('<div class="no-result-tips">' + sap.ushell.resources.i18n.getText("no_results_tips") + '</div> ');
                oRm.write('</div></div>');

                oControl.renderNoResultPage = true;
                oControl.renderResultPage = false;
            }



            if (oControl.getFacets())
            {
                oRm.write('<div class="searchLayout-facets">');
                oRm.renderControl(oControl.getFacets());
                oRm.write('</div>');
            }


            if (oControl.getTopList() && oControl.getTopHeader() && oControl.getSearchBusy() === false) // no header without list or while busy
            {
                oRm.write('<div class="searchLayout-bucket">');
                if(oControl.getTopHeader() && oControl.getTopList()){
                    oRm.renderControl((new sap.m.Label({text: oControl.getTopHeader()})).addStyleClass('searchLayout-bucketName'));
                }
                if (oControl.getTopCount())
                    oRm.renderControl((new sap.m.Label({text: '('+oControl.getTopCount()+')' })).addStyleClass('searchLayout-bucketCount'));
                oRm.write('</div>');
            }

            if (oControl.getTopList() && oControl.getSearchBusy() === false) // No Toplist, when still busy
            {
                oRm.renderControl(oControl.getTopList());
            }

            if (oControl.getShowBottomList() && oControl.getBottomList() && oControl.getBottomHeader()  && oControl.getSearchBusy() === false) // no header without list or while busy
            {   ///Don't Show header if no results above and no datasource selected, or no resultsscreen is shown
                if (oControl.getBottomHeaderIsUnspecific() === true && oControl.getTopCount() === 0 || showNoResultsScreen) 
                {

                }else{
                    oRm.write('<div class="searchLayout-bucket">');
                    if(oControl.getBottomHeader() && oControl.getBottomList())
                        oRm.renderControl((new sap.m.Label({text: oControl.getBottomHeader()})).addStyleClass('searchLayout-bucketName'));

                    if (oControl.getBottomCount())
                        oRm.renderControl((new sap.m.Label({text: '('+oControl.getBottomCount()+')' })).addStyleClass('searchLayout-bucketCount'));                    

                    oRm.write('</div>');
                }

            }

            if (oControl.getShowBottomList() && oControl.getBottomList())
            {
                oRm.renderControl(oControl.getBottomList());
            }

            if(totalCount !== 0){
                oControl.renderResultPage = true;
            }else{
                oControl.renderResultPage = false;
            }
            
            /// close outer div
            oRm.write("</div>"); // end of the complete control
        }

    });

}(window));

(function(global) {
    "use strict";

    var sap = global.sap;
    var console = global.console;

    // =======================================================================
    // helper class for highlight x
    // =======================================================================
    var Text = function() {
        this.init.apply(this, arguments);
    };

    Text.prototype = {

        init: function(text) {
            // store text
            this.text = text || "";
            // normalized text
            this.lower = this.text.toLocaleLowerCase();
            // global flag is there is any bold char
            this.globalBold = false;
            // create array which stores flag whether character is bold or not
            this.bold = new Array(this.text.length);
            for (var i = 0; i < this.bold.length; ++i) {
                this.bold[i] = false;
            }
        },

        highlight: function(term) {

            // prevent endless loop
            if (term === "" || this.lower === "") return;

            // normalize to lower case
            term = term.toLowerCase();

            // loop at all occurences of term in this.lower
            var index = -1;
            while (index < this.lower.length) {
                index = this.lower.indexOf(term, index);
                if (index >= 0) {
                    // mark bold characters in global array 
                    for (var i = index; i < index + term.length; ++i) {
                        this.bold[i] = true;
                        this.globalBold = true;
                    }
                    index += term.length;
                } else {
                    break;
                }
            }
        },

        render: function() {

            // short cut if there is nothing to do
            if (!this.globalBold) {
                return this.text;
            }

            // highlight this.text according to information in this.bold
            var bold = false;
            var result = [];
            var start = 0;
            for (var i = 0; i < this.text.length; ++i) {
                if (bold && !this.bold[i] || !bold && this.bold[i]) {
                    result.push(this.text.substring(start, i));
                    if (bold) {
                        // bold section ends
                        result.push("</b>");
                    } else {
                        // bold section starts
                        result.push("<b>");
                    }
                    bold = !bold;
                    start = i;
                }
            }

            // add last part
            result.push(this.text.substring(start, i));
            if (bold) {
                result.push("</b>");
            }
            return result.join("");
        }

    };

    // =======================================================================
    // search model
    // =======================================================================
    sap.ui.model.json.JSONModel.extend("sap.ushell.renderers.fiori2.search.SearchModel", {

        searchInit: function() {
            var self = this;
            self.sina = sap.ushell.Container.getService("Search").getSina();
            var properties = {
                templateFactsheet: true
            };

            self.suggestionid = 0;
            self.suggestionQuery = self.sina.createSuggestionQuery();

            //Searchconnector datasource for the 
            this.oUserRecentsService = sap.ushell.Container.getService("UserRecents");

            self.query = self.sina.createPerspectiveQuery(properties);

            self.searchRequestID = 0;

            self.setProperty('/dataSourceName', '');
            self.setProperty('/dataSourceLabelRaw', '');
            self.setProperty('/searchBoxTerm', '');
            self.setProperty('/headSelectedDataSource', {});
            self.setProperty('/facets', {});
            self.setProperty('/facets/dataSources', []);
            self.setProperty('/facets/attributes', []);
            self.setProperty('/results', []);
            self.setProperty('/detail', {});
            self.setProperty('/detail', {});
            self.setProperty('/detail/title', "");
            self.setProperty('/detail/titleUrl', "");
            self.setProperty('/detail/type', "");
            self.setProperty('/detail/data', {});
            self.setProperty('/count', 0);
            self.setProperty('/isResultAppended', false);
            self.setProperty('/attributeFacetFilterLists', []);
            self.resetDataSource(false);

            self.resetDataSources(false);
            self.resetAttributeFacets(false);
            self.resetFilterConditions(false);
            // self.setProperty("/suggestionTerm", "");
            // self.dsSuggestionQuery = self.sina.createSuggestionQuery();
            self.dsSuggestionQuery = self.sina.createPerspectiveQuery(properties);

            if (jQuery.device.is.phone) {
                this.appSuggestionLimit = 3;
                this.normalAppSuggestionLimit = 3;
                this.singleAppSuggestionLimit = 5;
                this.normalSuggestionLimit = 5;
                this.dataSourceSuggestionLimit = 5;

            } else {
                this.appSuggestionLimit = 3;
                this.normalAppSuggestionLimit = 3;
                this.singleAppSuggestionLimit = 7;
                this.normalSuggestionLimit = 7;
                this.dataSourceSuggestionLimit = 7;
            }


            //Set isNormalSearchEnable
            if (sap.ui.getCore().byId("mainShell").getViewData().config.searchBusinessObjects) {
                self.setProperty('/isNormalSearchEnable', sap.ui.getCore().byId("mainShell").getViewData().config.searchBusinessObjects !== "hidden");
            } else {
                self.setProperty('/isNormalSearchEnable', true);
            }


            //App Service
            self.setProperty("/tiles", []);

            //Connectors in Category
            var defaultConnector = [];
            if (self.isNormalSearchEnable()) {
                defaultConnector.push({
                    dataSourceLabel: sap.ushell.resources.i18n.getText("label_all"),
                    label: sap.ushell.resources.i18n.getText("label_all"),
                    labelRaw: "$$ALL$$"
                });
            }
            defaultConnector.push({
                dataSourceLabel: sap.ushell.resources.i18n.getText("label_apps"),
                label: sap.ushell.resources.i18n.getText("label_apps"),
                labelRaw: "$$APP$$"
            });
            self.setProperty("/connectors", defaultConnector);

            var handleConnectors = function(searchResults) {

                var items = [];

                items.push({
                    dataSourceLabel: sap.ushell.resources.i18n.getText("label_all"),
                    label: sap.ushell.resources.i18n.getText("label_all"),
                    labelRaw: "$$ALL$$"
                });
                items.push({
                    dataSourceLabel: sap.ushell.resources.i18n.getText("label_apps"),
                    label: sap.ushell.resources.i18n.getText("label_apps"),
                    labelRaw: "$$APP$$"
                });

                for (var i = 0; i < searchResults.length; i++) {
                    var searchItem = searchResults[i];

                    if (searchItem.DESCRIPTION && searchItem.OBJECT_NAME) {

                        var item;

                        if (searchItem.DESCRIPTION.value !== null) {
                            item = {
                                dataSourceLabel: self.getHighlightingForTerms(searchItem.DESCRIPTION.value, "*"),
                                label: searchItem.DESCRIPTION.value,
                                labelRaw: searchItem.OBJECT_NAME.value,
                            };
                        } else {
                            item = {
                                dataSourceLabel: self.getHighlightingForTerms(searchItem.DESCRIPTION.value, "*"),
                                label: searchItem.OBJECT_NAME.value,
                                labelRaw: searchItem.OBJECT_NAME.value,
                            };
                        }

                        if (item.label && item.labelRaw) {
                            items.push(item);
                        }
                    }

                }

                self.setProperty("/connectors", items);
            };

            if (self.isNormalSearchEnable()) {
                self.getConnectors(handleConnectors, function() {});
            };
        },



        isNormalSearchEnable: function() {
            return this.getProperty("/isNormalSearchEnable");
        },

        doSuggestion: function() {
            var self = this;

            if (self.suggestionTimeoutId) {
                global.clearTimeout(self.suggestionTimeoutId);
            }
            self.suggestionTimeoutId = global.setTimeout(function() {

                var suggestionTerm = self.getProperty("/searchBoxTerm");

                self.setProperty("/appSection", []);
                self.setProperty("/dataSourceSection", []);
                self.setProperty("/suggestSection", []);
                self.setProperty("/mixedSection", []);

                self.suggestionid = self.suggestionid + 1;
                // self.setProperty("/searchTerm", suggestionTerm);

                if (self.isNormalSearchEnable()) {
                    if ((suggestionTerm.length >= 3 || !self.isAllCategory()) && !self.isAppCategory()) {
                        self.doNormalSuggestions(suggestionTerm, self.suggestionid);
                    }

                    if (!self.isAppCategory()) {
                        self.appSuggestionLimit = self.normalAppSuggestionLimit;
                    } else {
                        self.appSuggestionLimit = self.singleAppSuggestionLimit;
                    }

                    if (self.isAllCategory() || self.isAppCategory()) {
                        self.doAppSuggestions(suggestionTerm, self.suggestionid);
                    }
                    
                    if(self.isAllCategory()){
                        self.doDataSourceSuggestions(suggestionTerm);
                    }
                } else {
                    self.appSuggestionLimit = self.singleAppSuggestionLimit;
                    self.doAppSuggestions(suggestionTerm, self.suggestionid);
                }

            }, 400);


        },

        isAllCategory: function() {
            var ds = this.getProperty("/dataSource");
            if ((ds && ds.objectName && ds.objectName.value && ds.objectName.value.toLowerCase() === "$$all$$") ||
                (ds && ds.objectName && ds.objectName.toLowerCase && ds.objectName.toLowerCase() === "$$all$$"))
                return true;
            return false;
        },

        isAppCategory: function() {
            var ds = this.getProperty("/dataSource");
            if (ds && ds.objectName && ds.objectName.value === "$$APP$$")
                return true;
            return false;
        },

        doAppSuggestions: function(suggestionTerm, suggestionid) {
            var self = this;
            var queryProperties = {
                searchTerm: suggestionTerm,
                top: self.appSuggestionLimit
            };
            var appQuery = sap.ushell.Container.getService("Search").queryApplications(queryProperties).done(function(resultset) {
                var aResult = resultset.getElements();
                var aUIResult = [];

                if (suggestionid !== self.suggestionid)
                    return;

                for (var i = 0; i < aResult.length; ++i) {
                    var appSuggest = aResult[i];
                    var item = {
                        pos: i,
                        label: appSuggest.title,
                        icon: appSuggest.icon,
                        targetURL: appSuggest.url,
                        labelRaw: "",
                        mixedLabel: appSuggest.title
                    };
                    aUIResult.push(item);
                }

                self.setProperty("/appSection", aUIResult);
//                var sItems = self.getProperty("/suggestSection");
//                var mixedItems = aUIResult.concat(sItems);
                
                // mixed items and mixed labels
                var appItems = self.getProperty("/appSection");
                var dsItems = self.getProperty("/dataSourceSection");
                var normalItems = self.getProperty("/suggestSection");
                var mixedItems = appItems.concat(dsItems).concat(normalItems);
                
                for (var j = 0; j < mixedItems.length; j++) {
                    var mixedItem = mixedItems[j];
                    if (self.isAllCategory() && mixedItem.dataSourceLabel) {
                        mixedItem.mixedLabel = mixedItem.label + " <i>in " + mixedItem.dataSourceLabel + "</i>";
                    } else {
                        mixedItem.mixedLabel = mixedItem.label;
                    }
                }
                self.setProperty("/mixedSection", mixedItems);
            });

        },

        doDataSourceSuggestions: function(suggestionTerm) {

            var self = this;

            // get ds suggestions
            self.suggestDataSources(suggestionTerm, 2);
        },


        suggestDataSources: function(searchTerm, limit) {

            var self = this;

            // prepare regexp for matching
            var searchTermHelper = searchTerm.replace(/([.+?^=!:${}()|\[\]\/\\])/g, "\\$1");
            searchTermHelper = searchTermHelper.replace(/\*/g, ".*");
            var searchTermRegExp = new RegExp('\\b' + searchTermHelper, 'i');

            var terms = self.tokenizeSuggestionTerm(searchTerm);
            
            var dataSources = self.getProperty("/connectors");
            if (dataSources) {
                // check all connectors for matching
                var dsSuggestions = [];
                for (var i = 0; i < dataSources.length; ++i) {
                    var dataSource = dataSources[i];
                    if (searchTermRegExp.test(dataSource.label) && dataSource.label.toLowerCase() !== 'all' && dataSource.label.toLowerCase() !== 'apps') {
                        var suggestion = {};
                        suggestion.label = '<i>' + sap.ushell.resources.i18n.getText("searchIn") + ': </i>' + self.getHighlightingForTerms(dataSource.label, terms);
                        suggestion.labelRaw = dataSource.labelRaw;
                        suggestion.mixedLabel = suggestion.label;
                        suggestion.suggestType = "dataSourceSuggest";
                        dsSuggestions.push(suggestion);
                        if (dsSuggestions.length === limit) {
                            break;
                        }
                    }
                }
                
                self.setProperty("/dataSourceSection", dsSuggestions);

                // mixed items and mixed labels
                var appItems = self.getProperty("/appSection");
                var dsItems = self.getProperty("/dataSourceSection");
                var normalItems = self.getProperty("/suggestSection");
                var mixedItems = appItems.concat(dsItems).concat(normalItems);
                
                self.setProperty("/mixedSection", mixedItems);
            }
        },
        
        getConnectors: function(onSuccess, onError) {
            var self = this;

            var system = self.sina.sinaSystem();

            system.getServerInfo().done(function() {

                var systemId;
                if (system && system.properties && system.properties.rawServerInfo && system.properties.rawServerInfo.ServerInfo)
                    systemId = system.properties.rawServerInfo.ServerInfo.SystemId;

                var sapclient = system.properties.rawServerInfo.ServerInfo.Client;
                self.searchConnector = systemId + sapclient + "~ESH_CONNECTOR~";

                var dsSuggestionDataSource = self.sina.createDataSource({
                    objectName: self.searchConnector,
                    packageName: "ABAP",
                    type: "Connector",
                    label: ""
                });
                self.dsSuggestionQuery.setDataSource(dsSuggestionDataSource);

                // self.dsSuggestionQuery.setSuggestionTerm(suggestionTerm);
                self.dsSuggestionQuery.setSearchTerms("*");
                self.dsSuggestionQuery.setTop(1000);
                self.dsSuggestionQuery.setOrderBy({
                    orderBy: 'DESCRIPTION',
                    sortOrder: 'ASC'
                });

                self.dsSuggestionQuery.getResultSet(jQuery.proxy(function(resultset) {

                        var elements = resultset.searchresultset.getElements();
                        onSuccess(elements);

                    }, this),

                    function(error) {
                        onError(error);
                    });


            });


        },

        getDataSourceSuggestions: function(suggestionTerm, onSuccess, onError) {
            var self = this;

            var system = self.sina.sinaSystem();

            // TO DO: delete duplicated getServerInfo()
            system.getServerInfo().done(function() {

                var systemId;
                if (system && system.properties && system.properties.rawServerInfo && system.properties.rawServerInfo.ServerInfo)
                    systemId = system.properties.rawServerInfo.ServerInfo.SystemId;

                var sapclient = system.properties.rawServerInfo.ServerInfo.Client;
                self.searchConnector = systemId + sapclient + "~ESH_CONNECTOR~";

                var dsSuggestionDataSource = self.sina.createDataSource({
                    objectName: self.searchConnector,
                    packageName: "ABAP",
                    type: "Connector",
                    label: ""
                });
                self.dsSuggestionQuery.setDataSource(dsSuggestionDataSource);

                // self.dsSuggestionQuery.setSuggestionTerm(suggestionTerm);
                self.dsSuggestionQuery.setSearchTerms(suggestionTerm);
                self.dsSuggestionQuery.setTop(1000);
                self.dsSuggestionQuery.setOrderBy({
                    orderBy: 'DESCRIPTION',
                    sortOrder: 'ASC'
                });

                self.dsSuggestionQuery.getResultSet(jQuery.proxy(function(resultset) {

                        var elements = resultset.searchresultset.getElements();
                        onSuccess(elements);

                    }, this),
                    function(error) {
                        onError(error);
                    });


            });


        },

        doNormalSuggestions: function(suggestionTerm, suggestionid) {

            var self = this;
            self.suggestionQuery.setSuggestionTerm(suggestionTerm);

            self.suggestionQuery.setDataSource(self.getProperty("/dataSource"));

            // self.suggestionQuery.dataSource(self.getDataSource());
            self.suggestionQuery.getResultSet(function(resultset) {

                if (suggestionid !== self.suggestionid)
                    return;

                var suggestions = resultset.getElements();
                var items = [];

                // var items = self.buildSuggestions(suggestions, suggestionTerm);
                var terms = self.tokenizeSuggestionTerm(suggestionTerm);

                for (var i = 0; i < suggestions.length; i++) {
                    var suggestion = suggestions[i];
                    var firstSuggestionTerm;
                    if (i === 0) {
                        firstSuggestionTerm = suggestion.labelRaw;
                    }

                    if (suggestion.attribute.value !== "$$AllAttributes$$") {
                        continue;
                    }
                    //Show DS in suggestions only when not yet selected
                    if (self.isAllCategory()) {
                        if (suggestion.dataSource.getObjectName().value !== "$$AllDataSources$$") {
                            if (firstSuggestionTerm !== suggestion.labelRaw) {
                                continue;
                            }
                            suggestion.dataSourceLabel = self.getLabelForSinaDataSource(suggestion.dataSource);
                        } else {
                            suggestion.dataSource = self.sina.createDataSource({
                                objectName: "$$ALL$$",
                                packageName: "ABAP",
                                type: "Category",
                                label: "All Categories"
                            });
                        }
                    } else {
                        if (suggestion.dataSource.getObjectName().value !== "$$AllDataSources$$") {
                            continue;
                        } else {
                            suggestion.dataSource = self.sina.createDataSource({
                                objectName: "$$ALL$$",
                                packageName: "ABAP",
                                type: "Category",
                                label: "All Categories"
                            });
                        }
                        suggestion.dataSource = self.getProperty("/dataSource");
                        suggestion.dataSourceLabel = self.getLabelForSinaDataSource(suggestion.dataSource);
                    }

                    // suggestion.label = self.correctServerErrorHighlighting(suggestion.labelRaw, newTerms);
                    suggestion.label = self.getHighlightingForTerms(suggestion.labelRaw, terms);
                    items.push(suggestion);

                    if (self.normalSuggestionLimit === items.length) break;
                }

                self.setProperty("/suggestSection", items);

//                // mixed items and mixed labels
//                var appItems = self.getProperty("/appSection");
//                var mixedItems = appItems.concat(items);
                
                // mixed items and mixed labels
                var appItems = self.getProperty("/appSection");
                var dsItems = self.getProperty("/dataSourceSection");
                var normalItems = self.getProperty("/suggestSection");
                var mixedItems = appItems.concat(dsItems).concat(normalItems);
                
                for (var i = 0; i < mixedItems.length; i++) {
                    var item = mixedItems[i];
                    if (self.isAllCategory() && item.dataSourceLabel) {
                        item.mixedLabel = item.label + " <i>in " + item.dataSourceLabel + "</i>";
                    } else {
                        item.mixedLabel = item.label;
                    }
                }
                self.setProperty("/mixedSection", mixedItems);

            });

        },


        addTitle: function(title, items) {
            if (items.length !== 0) {
                items.unshift({
                    isTitle: true,
                    title: title
                });
            }
        },

        createAllDataSource: function() {
            return this.sina.createDataSource({
                objectName: {
                    label: "$$ALL$$",
                    value: "$$ALL$$"
                },
                packageName: {
                    label: "ABAP",
                    value: "ABAP"
                },
                type: "Category",
                label: "All Categories"
            });
        },

        createAppDataSource: function() {
            return this.sina.createDataSource({
                objectName: {
                    label: "$$APP$$",
                    value: "$$APP$$"
                },
                packageName: "",
                type: "",
                label: "App Category"
            });
        },

        getLabelForSinaDataSource: function(dataSource) {

            var dataSourceLabel = dataSource.label || dataSource.objectName.label || dataSource.objectName.value;
            // if (!dataSourceLabel || dataSourceLabel === "")
            //     dataSourceLabel = dataSource.objectName.value;

            return dataSourceLabel;

        },

        getHighlightingForTerms: function(textToHighlight, terms) {
            var myText = new Text(textToHighlight);
            for (var j = 0; j < terms.length; ++j) {
                var term = terms[j];
                myText.highlight(term);
            }
            return myText.render();

        },

        tokenizeSuggestionTerm: function(suggestionTerm) {

            var terms = suggestionTerm;
            var termsSeparatedBySpace = terms.split(" ");
            var newTerms = [];
            //Split search terms with space and wildcard into array
            $.each(termsSeparatedBySpace, function(i, termSpace) {
                termSpace = $.trim(termSpace);
                if (termSpace.length > 0) {
                    var termsSeparatedByWildcard = termSpace.split("*");
                    $.each(termsSeparatedByWildcard, function(i, term) {
                        if (term.length > 0) {
                            //                            //Escape special characters
                            //                            term = term.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"); // Not necessary because of using normal index in text.highlight instead of regex
                            newTerms.push(term);
                        }
                    });
                }
            });

            return newTerms;

        },

        correctServerErrorHighlighting: function(suggestionLabel, terms) {

            var match;
            var bTagPattern = /<b>[^<]+<\/b>/igm;

            // 2 highlight search terms
            // -----------------------------
            //Does suggestion label contain <b> tag
            while (match = bTagPattern.exec(suggestionLabel)) {
                var startPosB = match.index;
                var endPosB = bTagPattern.lastIndex - 4;
                //get the content inside <b></b>
                var bString = suggestionLabel.substring(startPosB + 3, endPosB);
                // Instanciate helper class for highlight
                var myText = new Text(bString);

                for (var i = 0; i < terms.length; ++i) {
                    match = {};
                    var term = terms[i];
                    myText.highlight(term);

                    // var searchTermPattern = new RegExp(term, "ig");
                    // if (bString !== term) {
                    //     var searchTermInOrigCase = bString.match(searchTermPattern);
                    //     if (searchTermInOrigCase && searchTermInOrigCase instanceof Array && searchTermInOrigCase.length>0) {
                    //         //Tag bold positions
                    //         myText.highlight(term);
                    //     }
                    // }
                }
                //Render according the bold tags 
                bString = myText.render();
                //Get rid of old server-side <b>content</b> with bString
                suggestionLabel = suggestionLabel.substring(0, startPosB) + bString + suggestionLabel.substring(endPosB + 4);
            }
            return suggestionLabel;

        },

        buildSuggestions: function(aSuggestions, suggestionTerm) {
            var oResult = {};

            // 1 prepare search search terms
            // -----------------------------
            var terms = suggestionTerm;
            var termsSeparatedBySpace = terms.split(" ");
            var newTerms = [];
            //Split search terms with space and wildcard into array
            $.each(termsSeparatedBySpace, function(i, termSpace) {
                termSpace = $.trim(termSpace);
                if (termSpace.length > 0) {
                    var termsSeparatedByWildcard = termSpace.split("*");
                    $.each(termsSeparatedByWildcard, function(i, term) {
                        if (term.length > 0) {
                            //Escape special characters
                            term = term.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
                            newTerms.push(term);
                        }
                    });
                }
            });
            terms = newTerms;
            //            var bTagPattern = new RegExp("/<b>[^<]+<\/b>/", "ig"); 
            var bTagPattern = /<b>[^<]+<\/b>/igm;

            jQuery.each(aSuggestions, function(i, value) {

                if (value.filter.attribute !== "$$AllAttributes$$") {
                    return;
                }

                if (!oResult[value.labelRaw]) {
                    oResult[value.labelRaw] = value;
                    oResult[value.labelRaw].categories = [];
                    oResult[value.labelRaw].visible = true;
                    oResult[value.labelRaw].type = "suggestion";
                }

                var suggestionLabel = oResult[value.labelRaw].label;
                if (suggestionLabel.length === 0) {
                    oResult[value.labelRaw].label = value.labelRaw;
                    suggestionLabel = oResult[value.labelRaw].label;
                }

                var match;
                // 2 highlight search terms
                // -----------------------------
                //Does suggestion label contain <b> tag
                while (match = bTagPattern.exec(suggestionLabel)) {
                    var startPosB = match.index;
                    var endPosB = bTagPattern.lastIndex - 4;
                    //get the content inside <b></b>
                    var bString = suggestionLabel.substring(startPosB + 3, endPosB);
                    // Instanciate helper class for highlight
                    var myText = new Text(bString);

                    for (i = 0; i < terms.length; ++i) {
                        match = {};
                        var searchTermLocal = terms[i];
                        var searchTermPattern = new RegExp(searchTermLocal, "ig");
                        if (bString !== searchTermLocal) {
                            var searchTermInOrigCase = bString.match(searchTermPattern);
                            if (searchTermInOrigCase && searchTermInOrigCase instanceof Array && searchTermInOrigCase.length > 0) {
                                //Tag bold positions
                                myText.highlight(searchTermLocal);
                            }
                        }
                    }
                    //Render according the bold tags 
                    bString = myText.render();
                    //Get rid of old server-side <b>content</b> with bString
                    suggestionLabel = suggestionLabel.substring(0, startPosB) + bString + suggestionLabel.substring(endPosB + 4);
                }

                oResult[value.labelRaw].label = suggestionLabel;


                if (value.dataSource.getObjectName().value !== "$$AllDataSources$$") {
                    oResult[value.labelRaw].categories.push({
                        label: value.dataSource.getObjectName().label,
                        data: value
                    });
                }
            });

            return jQuery.map(oResult, function(v, k) {
                return [v];
            });
        },

        addFilterCondition: function(attribute, operator, value, fireQuery) {
            var self = this;
            self.query.addFilterCondition(attribute, operator, value);
            // var conditions = self.getProperty('/filterConditions').length;
            // self.setProperty('/filterConditions/'+conditions,{
            //     attribute: attribute,
            //     operator: operator,
            //     value: value
            // });
            if (fireQuery || fireQuery === undefined) {
                self._searchFireQuery();
            }
        },

        addFilterConditionGroup: function(group, fireQuery) {
            var self = this;
            self.query.getFilter().addFilterConditionGroup(group);
            if (fireQuery || fireQuery === undefined) {
                self._searchFireQuery();
            }
        },

        resetFilterConditions: function(fireQuery) {
            var self = this;
            // self.setProperty('/filterConditions',[]);
            self.query.resetFilterConditions();

            self.query.addFilterCondition('$$RenderingTemplatePlatform$$', '=', 'html');
            self.query.addFilterCondition('$$RenderingTemplateTechnology$$', '=', 'Tempo');
            self.query.addFilterCondition('$$RenderingTemplateVariant$$', '=', '');
            self.query.addFilterCondition('$$RenderingTemplateType$$', '=', 'ItemDetails');
            self.query.addFilterCondition('$$RenderingTemplateType$$', '=', 'ResultItem');

            if (fireQuery || fireQuery === undefined) {
                self._searchFireQuery();
            }
        },

        resetAttributeFacets: function(fireQuery) {
            var self = this;
            self.setProperty('/facets/attributes', []);
            if (fireQuery || fireQuery === undefined) {
                self._searchFireQuery();
            }
        },

        getDataSources: function() {
            var self = this;
            return self.getProperty("/facets/dataSources");
        },

        resetDataSources: function(fireQuery) {
            var self = this;
            self.setProperty('/facets/dataSources', []);
            if (fireQuery || fireQuery === undefined) {
                self._searchFireQuery();
            }
        },

        getResultList: function() {
            var self = this;
            return self.perspective.getSearchResultSet();
        },

        getFacets: function() {
            var self = this;
            return self.perspective.getChartFacets();
        },

        getFilter: function() {
            var self = this;
            return self.query.getFilter();
        },

        setFilter: function(filter, fireQuery) {
            var self = this;
            self.query.setFilter(filter);
            if (fireQuery || fireQuery === undefined) {
                self._searchFireQuery();
            }
        },

        getTop: function() {
            var self = this;
            return self.query.getTop();
        },

        setTop: function(top, fireQuery) {
            var self = this;
            self.query.setTop(top);
            if (fireQuery || fireQuery === undefined) {
                self._searchFireQuery();
            }
        },

        getSkip: function() {
            var self = this;
            return self.query.getSkip();
        },

        setSkip: function(skip, fireQuery) {
            var self = this;
            self.query.setSkip(skip);
            if (fireQuery || fireQuery === undefined) {
                self._searchFireQuery();
            }
        },

        resetDataSource: function(fireQuery) {
            var self = this;
            if (sap.bc === undefined)
                return;
            var dataSource = self.sina.createDataSource({
                objectName: "$$ALL$$",
                packageName: "ABAP",
                type: "Category",
                label: "All Categories"
            });
            self.setDataSource(dataSource, fireQuery);
        },

        getDataSource: function() {
            var self = this;
            return self.query.getDataSource();
        },

        getDataSourceJson: function() {
            var self = this;
            var dataSource = self.getProperty("/dataSource");
            var json = {
                "SchemaName": {
                    "label": dataSource.getSchemaName().label,
                    "value": dataSource.getSchemaName().value
                },
                "PackageName": {
                    "label": dataSource.getPackageName().label,
                    "value": dataSource.getPackageName().value
                },
                "ObjectName": {
                    "label": dataSource.getObjectName().label,
                    "value": dataSource.getObjectName().value
                }
            };
            if (dataSource.getType().value) {
                json.Type = dataSource.getType().value;
            }
            return json;
        },

        setDataSource: function(dataSource, fireQuery) {
            var self = this;
            dataSource = self.sina.createDataSource(dataSource);
            var dataSourceLabel = dataSource.getLabel();
            self.setProperty('/dataSourceName', dataSourceLabel);
            self.setProperty('/dataSourceLabelRaw', dataSource.objectName.value);

            // if(dataSource.equals(self.query.getDataSource())){
            //     return;
            // }
            self.setSkip(0, false);
            self.setProperty("/dataSource", dataSource);

            if (self.isAllCategory()) {
                self.setProperty('/dataSourceName', "");
                self.setProperty('/dataSourceLabelRaw', "$$ALL$$");
            }


            this.oUserRecentsService.noticeDataSource(dataSource);

            // self.query.setDataSource(dataSource);
            // self.suggestionQuery.setDataSource(dataSource);

            if (fireQuery || fireQuery === undefined) {
                self._searchFireQuery();
            }
        },

        getSearchTerm: function() {
            var self = this;
            return self.getProperty("/searchBoxTerm");
        },

        setSearchTerm: function(searchTerm, fireQuery) {
            var self = this;

            self.setProperty("/searchBoxTerm", searchTerm);
            // sap.ui.getCore().getEventBus().publish("searchTermChanged", {searchTerm:searchTerm});

            if (fireQuery || fireQuery === undefined) {
                self._searchFireQuery();
            }
        },

        getResultsForDataSource: function(dataSource, results) {
            var resultsForDS = [];
            for (var i = 0; i < results.length; i++) {
                var result = results[i];
                var resultDS = result.$$DataSourceMetaData$$;
                if (dataSource.objectName.value === resultDS.objectName.value) {
                    resultsForDS.push(result);
                }
            }
            return resultsForDS;
        },

        // itemPressed: function (item) {
        //     var self = this;
        //     self.setProperty("/detail", item);
        // },

        _searchFireQuery: function() {
            var self = this;
            if (!self.sina) {
                jQuery.sap.log.info("Current Search adapter does not support Sina queries");
                return;
            }

            var searchTerm = self.getProperty('/searchBoxTerm');
            var dataSource = self.getProperty("/dataSource");

            // this.oUserRecentsService.noticeSearch({
            // });

            sap.ui.getCore().getEventBus().publish("search", {
                searchTerm: searchTerm,
                dataSource: dataSource
            });

            if (self.getSkip() > 0 && self.query.getSearchTerms() === searchTerm && self.query.getDataSource().equals(dataSource)) {
                //result is appended
                self.setProperty("/isResultAppended", true);
            } else {
                self.setProperty("/results", []);
                self.setProperty("/isResultAppended", false);
            }
            self.query.setSearchTerms(searchTerm);
            self.query.setDataSource(dataSource);

            //if Apps is selected as datasource, then disable normal search
            //          if(self.isAppCategory()){
            //          	self.setProperty("/isNormalSearchEnable", false);
            //          }else{
            //          	self.setProperty("/isNormalSearchEnable", true);
            //          }

            // increment request id
            self.searchRequestID = self.searchRequestID + 1;
            var currentSearchRequestID = self.searchRequestID;

            // notify view
            // self.fireRequestSent();
            sap.ui.getCore().getEventBus().publish("searchStarted");

            var pending = 2;
            var checkFinished = function() {
                if (!--pending) {
                    sap.ui.getCore().getEventBus().publish("allSearchFinished");
                }
            };

            //App Search
            self.setProperty("/tiles", []);
            if (self.isAllCategory() || self.isAppCategory()) {
                var appQueryProps = {
                    searchTerm: self.getProperty('/searchBoxTerm'),
                    searchInKeywords: true
                };
                sap.ushell.Container.getService("Search").queryApplications(appQueryProps).done(function(oResult) {
                    if (currentSearchRequestID !== self.searchRequestID) //Request is deprecated
                    {
                        jQuery.sap.log.debug("Searchrequest deprecated");
                        return;
                    }

                    var aModelTiles = [];
                    var aTiles = oResult.getElements();
                    self.setProperty("/tiles", aTiles);

                    sap.ui.getCore().getEventBus().publish("appSearchFinished", oResult);
                });
            } else {
                sap.ui.getCore().getEventBus().publish("appSearchFinished");
            }
            checkFinished();

            //Invalidate old perspective
            self.perspective = self.getEmptyPerspective();

            // Normal Search
            if (self.isNormalSearchEnable() && !self.isAppCategory()) {
                var deferredResultSet = self.query.getResultSet();
                deferredResultSet.always(function(perspective) {
                    if (this.state() !== "resolved") {
                        //show empty result list in case of error
                        perspective = self.getEmptyPerspective();
                    }
                    //                    if (!self.isNormalSearchEnable()) { //Nomal search is hidden
                    //                    	return;
                    //                    }
                    if (currentSearchRequestID !== self.searchRequestID) //Request is deprecated
                    {
                        jQuery.sap.log.debug("Searchrequest deprecated");
                        return;
                    }
                    self.perspective = perspective;
                    self._afterSearchPrepareResultList(perspective, self.getProperty("/isResultAppended"));
                    // self._afterSearchPrepareFacets(perspective);
                    sap.ui.getCore().getEventBus().publish("searchFinished", {
                        append: self.getProperty("/isResultAppended"),
                        resultset: perspective
                    });
                });
                // example error:
                // var error = {};
                // error.responseText = '{"Error":{"Code":200,"Message":"Engine-Fehler"},"ErrorDetails":[{"Code":"ESH_FED_MSG020","Message":"Suchumfang ist nicht gültig HT3360~EPM_EMPLOYEES_DEMO~"}]}';
                // error.responseText = '{"Error":{"Code":200,"Message":"Engine error"},"ErrorDetails":[{"Code":"ESH_FED_MSG016","Message":"No authorization for the given list of connectors"}]}';
                deferredResultSet.fail(function(error) {
                    //these ina service errors shall not appear as popups:
                    var ignoredErrors = ["ESH_FED_MSG016"]; //<- No authorization for the given list of connectors, or no connectors active (i.e. only app search is used)
                    if (error && error.responseText) {
                        var showErrorPopup = true;
                        var inaErr = jQuery.parseJSON(error.responseText);
                        var errMsg = 'Search Error: ';
                        var detailMsg = '';
                        if (inaErr.Error) {
                            if (inaErr.Error.Message) {
                                errMsg += '' + inaErr.Error.Message;
                            }
                            if (inaErr.Error.Code) {
                                errMsg += ' (Code ' + inaErr.Error.Code + ').';
                            }
                        }
                        if (inaErr.ErrorDetails) {
                            detailMsg += '';
                            for (var i = 0; i < inaErr.ErrorDetails.length; i++) {
                                detailMsg += inaErr.ErrorDetails[i].Message + ' (Code ' + inaErr.ErrorDetails[i].Code + ')';
                                if (ignoredErrors.indexOf(inaErr.ErrorDetails[i].Code) !== -1) {
                                    showErrorPopup = false;
                                }
                            }
                        }
                        jQuery.sap.log.error(errMsg + ' Details: ' + detailMsg);
                        if (showErrorPopup) {
                            jQuery.sap.require("sap.ca.ui.message.message");
                            sap.ca.ui.message.showMessageBox({
                                type: sap.ca.ui.message.Type.ERROR,
                                message: errMsg,
                                details: detailMsg
                            });
                        }
                    }
                });
                deferredResultSet.always(function(perspective) {
                    checkFinished();
                });
            } else {
                checkFinished();
            }

        },

        getEmptyPerspective: function(results) {
            return {
                getSearchResultSet: function() {
                    return {
                        getElements: function() {
                            return [];
                        },
                        totalcount: 0
                    };
                }
            };
        },

        _searchGetGenericResults: function(results) {

            function getImageUrl(result) {
                var imageAttr = {
                    imageUrl: '',
                    name: ''
                };
                for (var prop in result) {
                    if (result[prop].label && result[prop].value) {
                        if (result[prop].value && jQuery.type(result[prop].value) === 'string' &&
                            (result[prop].value.split('.').pop() === 'jpg' || result[prop].value.split('.').pop() === 'png')) {
                            imageAttr.imageUrl = result[prop].value;
                            imageAttr.name = prop;
                            return imageAttr;
                        }
                    }
                }
                return imageAttr;

            }

            var moveWhyFound2ResponseAttr = function(whyfounds, property) {
                var l = whyfounds.length;
                while (l--) {
                    if (whyfounds[l].labelRaw === property.labelRaw && property !== undefined) {
                        property.value = whyfounds[l].value;
                        property.whyfound = true;
                        whyfounds.splice(l, 1);
                    }
                }
            };

            //sort against displayOrder
            var sortDisplayOrder = function(a, b) {
                return a.displayOrder - b.displayOrder;
            };

            var genericResults = [];
            for (var i = 0; i < results.length; i++) {
                var result = results[i];

                var uri = '';
                var relatedActions = result.$$RelatedActions$$;
                for (var relatedAction in relatedActions) {
                    if (relatedActions[relatedAction].type === "Navigation") {
                        uri = relatedActions[relatedAction].uri;
                        //                        uri = "#SalesOrder-DisplayFactSheet?SalesOrder=27";
                        //                        uri = "/sap/bc/ui5_ui5/ui2/ushell/shells/abap/FioriLaunchpad.html?sap-client=111#SalesOrder-DisplayFactSheet?SalesOrder=27"
                    }
                }
                var whyfounds = result.$$WhyFound$$ || [];

                var summaryAttrs = [];
                var detailAttrs = [];
                var title = '';

                for (var prop in result) {
                    if (result[prop].label && result[prop].$$MetaData$$) {
                        var presentationUsage = result[prop].$$MetaData$$.presentationUsage || [];
                        if (presentationUsage && presentationUsage.length > 0) {
                            if (presentationUsage.indexOf("Title") > -1 && result[prop].value) {
                                moveWhyFound2ResponseAttr(whyfounds, result[prop]);
                                title = title + " " + result[prop].value;
                            }
                            if (presentationUsage.indexOf("Summary") > -1) {
                                summaryAttrs.push({
                                    property: prop,
                                    displayOrder: result[prop].$$MetaData$$.displayOrder
                                });
                            } else if (presentationUsage.indexOf("Detail") > -1) {
                                detailAttrs.push({
                                    property: prop,
                                    displayOrder: result[prop].$$MetaData$$.displayOrder
                                });
                            }
                        }
                    }
                }


                summaryAttrs.sort(sortDisplayOrder);
                detailAttrs.sort(sortDisplayOrder);

                var displayRelevantAttrs = summaryAttrs.concat(detailAttrs);
                var attNum = 1;
                var listResult = {};
                var imageAttr = getImageUrl(result);
                listResult.imageUrl = imageAttr.imageUrl;
                listResult.dataSourceName = this._highlight(result.$$DataSourceMetaData$$.label);
                listResult.uri = uri;
                listResult.$$Name$$ = '';

                for (var z = 0; z < displayRelevantAttrs.length; z++) {
                    var propDisplay = displayRelevantAttrs[z].property;
                    // image attribute shall not be displayed as a normal key value pair
                    if (propDisplay !== imageAttr.name) {
                        moveWhyFound2ResponseAttr(whyfounds, result[propDisplay]);
                        listResult["attr" + attNum + "Name"] = result[propDisplay].label;
                        listResult["attr" + attNum] = result[propDisplay].value;
                        if (result[propDisplay].whyfound) {
                            listResult["attr" + attNum + "Whyfound"] = result[propDisplay].whyfound;
                        }
                        attNum = attNum + 1;
                    }
                }

                listResult.$$Name$$ = title.trim();
                listResult.numberofattributes = displayRelevantAttrs.length;
                //TODO: replace it with dataSourceName + $$Name$$ in view
                listResult.title = result.title;
                listResult.whyfounds = whyfounds;
                genericResults.push(listResult);
            }

            return genericResults;

        },

        _highlight: function(text) {

            // 1 prepare search search terms
            // -----------------------------
            var terms = this.query.filter.searchTerms;
            terms = terms.replace(new RegExp("[*]", "g"), "");
            terms = terms.split(" ");
            var newTerms = [];
            terms = $.each(terms, function(i, term) {
                term = $.trim(term);
                if (term.length > 0) {
                    newTerms.push(term);
                }
            });
            terms = newTerms;

            // 2 highlight search terms
            // -----------------------------
            var myText = new Text(text);
            for (var i = 0; i < terms.length; ++i) {
                var term = terms[i];
                myText.highlight(term);
            }
            return myText.render();

        },

        _afterSearchPrepareResultList: function(resultset, append) {
            var self = this;
            var visibleResults = self.getProperty("/results");
            var resultsForList;

            if (append) {
                visibleResults.pop(); //Remove footer
            }

            var results = resultset.getSearchResultSet().getElements();
            results = self._searchGetGenericResults(results);
            resultsForList = visibleResults.concat(results);

            //Add footer
            if (resultsForList.length < resultset.getSearchResultSet().totalcount) // There is more
            {
                var resultListFooter = {};
                resultListFooter.type = "footer";
                resultsForList.push(resultListFooter);
            }

            self.setProperty("/resultListHeading", sap.ushell.resources.i18n.getText("searchResults"));
            self.setProperty("/count", resultset.getSearchResultSet().totalcount);
            self.setProperty("/results", resultsForList);

            if (window.f2p) window.f2p.add(window.f2p.m.endSearch, {
                st: ""
            });

        },

        mockScopes: function() {

            var scopes = [{
                label: 'Supplier',
                labelRaw: 'Q7D004~VENDOR_H~',
                objectName: {
                    label: 'Supplier',
                    value: 'Q7D004~VENDOR_H~'
                },
                packageName: {
                    label: "",
                    value: ""
                },
                schemaName: {
                    label: "",
                    value: ""
                }
            }, {
                label: 'Goods Issue',
                labelRaw: 'Q7D004~GOODS_ISSUE_H~',
                objectName: {
                    label: 'Goods Issue',
                    value: 'Q7D004~GOODS_ISSUE_H~'
                },
                packageName: {
                    label: "",
                    value: ""
                },
                schemaName: {
                    label: "",
                    value: ""
                }
            }, {
                label: 'Material',
                labelRaw: 'Q7D004~MATERIAL_H~',
                objectName: {
                    label: 'Material',
                    value: 'Q7D004~MATERIAL_H~'
                },
                packageName: {
                    label: "",
                    value: ""
                },
                schemaName: {
                    label: "",
                    value: ""
                }
            }, {
                label: 'Purchasing Info Record',
                labelRaw: 'Q7D004~PURCHASE_INFO_REC_H~',
                objectName: {
                    label: 'Purchasing Info Record',
                    value: 'Q7D004~PURCHASE_INFO_REC_H~'
                },
                packageName: {
                    label: "",
                    value: ""
                },
                schemaName: {
                    label: "",
                    value: ""
                }
            }, {
                label: 'Purchase Order',
                labelRaw: 'Q7D004~PURCHASE_ORDER_H~',
                objectName: {
                    label: 'Purchase Order',
                    value: 'Q7D004~PURCHASE_ORDER_H~'
                },
                packageName: {
                    label: "",
                    value: ""
                },
                schemaName: {
                    label: "",
                    value: ""
                }
            }, {
                label: 'Sales Order',
                labelRaw: 'Q7D004~SALES_ORDER_H~',
                objectName: {
                    label: 'Sales Order',
                    value: 'Q7D004~SALES_ORDER_H~'
                },
                packageName: {
                    label: "",
                    value: ""
                },
                schemaName: {
                    label: "",
                    value: ""
                }
            }];

            return scopes;

        },

        //         searchPrepareCategoryFacet: function (resultset, oModel) {
        //             var self = this;
        //             self.oModel = oModel;
        //             // remove old categories
        // //            self.searchCategoryTree = self.searchCategoryTree || [];
        // search was invoked through SAPUI5 event bus -> update model
        _searchInvoked: function(sChannelId, sEventId, oData) {
            var self = this;

            //TODO: whats this?
            if (window.f2p) {
                window.f2p.add(window.f2p.m.startSearch, {
                    st: oData.searchTerm
                });
            }

            //reset datasource if searchterm does not contain old search term
            if (oData.searchTerm.toLowerCase().indexOf(self.getSearchTerm().toLowerCase()) === -1) {
                self.resetDataSource(false);
            }
            self.setSearchTerm(oData.searchTerm, false);
            if (oData.dataSource) {
                self.setDataSource(oData.dataSource, false);
            }
            self.setSkip(0, false);
            self.setTop(10);

        },

        _afterSearchPrepareFacets: function() {
            var self = this;
            var facets = self.getFacets();

            var dataSources = facets.filter(function(element) {
                return element.facetType === "datasource";
            });
            self._afterSearchPrepareDataSourceFacet(dataSources);

            var attributeFacets = facets.filter(function(element) {
                return element.facetType === "attribute";
            });
            self._afterSearchPrepareAttributeFacet(attributeFacets);
        },

        _afterSearchPrepareDataSourceFacet: function(dataSources) {
            var self = this;
            var items = self.getProperty("/facets/dataSources");
            if (dataSources.length > 0) {
                dataSources = dataSources[0];
                if (dataSources.query.resultSet && dataSources.query.resultSet.elements && dataSources.query.resultSet.elements.length > 0) {
                    for (var i = 0; i < dataSources.query.resultSet.elements.length; i++) {
                        var item = {
                            id: dataSources.query.resultSet.elements[i].dataSource.label + (i + 1),
                            text: dataSources.query.resultSet.elements[i].dataSource.label,
                            count: dataSources.query.resultSet.elements[i].valueRaw,
                            dataSource: dataSources.query.resultSet.elements[i].dataSource,
                            selected: self.getDataSource() === dataSources.query.resultSet.elements[i].dataSource
                        };
                        items.push(item);
                    }
                }
            }
            self.setProperty("/facets/dataSources", items);
        },

        _afterSearchPrepareAttributeFacet: function(serverSideAttributeFacets) {
            var self = this;

            function facetsWithSelections(elem) {
                var hasSelections = false;
                for (var i = 0, len = elem.items.length; i < len; i++) {
                    var item = elem.items[i];
                    if (item.selected) {
                        hasSelections = true;
                        break;
                    }
                }
                return hasSelections;
            }
            var allAttributeFacets = self.getProperty("/facets/attributes").filter(facetsWithSelections);
            for (var i = 0, len = serverSideAttributeFacets.length; i < len; i++) {
                var serverSideFacet = {
                    title: serverSideAttributeFacets[i].title,
                    dimension: serverSideAttributeFacets[i].dimension,
                    items: [],
                    allCount: 0
                };
                for (var j = 0, lenJ = serverSideAttributeFacets[j].query.resultSet.elements.length; j < lenJ; j++) {
                    var elem = serverSideAttributeFacets[i].query.resultSet.elements[j];
                    var item = {
                        text: elem.label,
                        count: elem.valueRaw,
                        filterCondition: elem.labelRaw,
                        selected: false
                    };
                    serverSideFacet.items.push(item);
                    serverSideFacet.allCount += item.count;
                }
                var facetFound = false; // search for duplicates
                for (var k = 0, lenK = allAttributeFacets.length; k < lenK; k++) {
                    var localFacet = allAttributeFacets[k];
                    if (localFacet.title === serverSideFacet.title && localFacet.dimension === serverSideFacet.dimension) {
                        facetFound = true;
                        break;
                    }
                }
                if (!facetFound) {
                    allAttributeFacets.push(serverSideFacet);
                }
            }

            self.setProperty("/facets/attributes", allAttributeFacets);
        }


    });

})(window);

// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview
 *
 * @version 1.24.5
 */
(function () {
    "use strict";
    /*global jQuery, sap */

    //////////  Internally-Used Button //////////

    sap.ui.core.Control.extend("SearchResultListItemButton", {
        metadata : {
            properties : {
                status: "string", // closed (default) or open
            },
            events: {
                press: {}
            }
        },
        renderer : function(oRm, oControl) { // static function, so use the given "oControl" instance instead of "this" in the renderer function
            /// outer div
            oRm.write('<a href="javascript:void(0);"');
            oRm.writeControlData(oControl);  // writes the Control ID
            oRm.addClass("searchResultListItemButton");
            oRm.writeClasses();              // this call writes the above class plus enables support for Square.addStyleClass(...)
            oRm.write(">");

            var open = new sap.ui.core.Icon({
                src: sap.ui.core.IconPool.getIconURI("open-command-field")
            });
            oRm.renderControl(open);
            // oRm.write('<span data-sap-ui-icon-content="'+"\ue1c6"+'" style="font-family:\'SAP-icons\'" class="sapMBtnCustomIcon sapUiIcon sapUiIconMirrorInRTL');
            // if (oControl.getStatus() !== "open") {
                // oRm.write(" searchResultListItemButton-closed");
            // }
            // oRm.write('"></span>');

            oRm.write("</a>");
        },
        onclick : function(evt) {
            this.firePress();
        }
    });


    //////////  The ResultListItem Control //////////

    sap.m.ListItemBase.extend("SearchResultListItem", {
        // the control API:
        metadata : {
            properties : {
                title: "string",
                titleUrl: "string",
                type: "string",
                imageUrl: "string",
                status: "string",  // closed (default) or open
                previewButton: "string", // true (default) or false, implemented for tablet only acc. to. visual design
                data: "object",
                visibleAttributes: "int"
            },
            events: {
                navigate: {},
                previewOpen: {},
                previewClose: {}
            }
        },

        // the part creating the HTML:
        renderer : function(oRm, oControl) { // static function, so use the given "oControl" instance instead of "this" in the renderer function
            var labelText,
                valueText,
                label,
                value;

            /// outer div
            oRm.write("<div");
            oRm.writeAttribute("tabindex","-1");
            oRm.writeControlData(oControl);  // writes the Control ID
            if (oControl.getStatus() === "open" || oControl.getData()['selected'] === true ) {
                oRm.addClass("searchResultListItem-open");
            }
            oRm.addClass("searchResultListItem");
            oRm.writeClasses();              // this call writes the above class plus enables support for Square.addStyleClass(...)
            oRm.write(">");

            oRm.write('<div class="searchResultListItem-main"><div>');
            oRm.write('<div class="searchResultListItem-left">');

            /// /// image1 (phone)
            /// use as background because of cover feature
            if (oControl.getImageUrl()) {
            	oRm.write('<div class="searchResultListItem-image searchResultListItem-image1" style="background-image:url(\'');
                oRm.write(oControl.getImageUrl());
                oRm.write('\')"></div>');
            }

            /// /// title
            var title = new sap.m.Text({text: oControl.getTitle(), href: oControl.getTitleUrl()});
            title.setTooltip((''+oControl.getTitle()).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
            title.addStyleClass("searchResultListItem-title");
            oRm.renderControl(title);
            //oControl._setSaveText(title.getDomRef(), oControl.getTitle());

            /// /// type 1 (phone)
            var type1 = new sap.m.Text({text: oControl.getType()});
            type1.setTooltip((''+oControl.getType()).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
            type1.addStyleClass("searchResultListItem-type searchResultListItem-type1");
            oRm.renderControl(type1);

            /// /// type 2 (table)
            var type2 = new sap.m.Text({text: oControl.getType()});
            type2.setTooltip((''+oControl.getType()).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
            type2.addStyleClass("searchResultListItem-type searchResultListItem-type2");
            oRm.renderControl(type2);

            /// /// attributes
            oRm.write('<div class="searchResultListItem-attributes">');
            for (var i = 1; i <= oControl.getVisibleAttributes(); i++) {
                var attrName = "attr"+i+"Name";
                var attr = "attr"+i;
                labelText = oControl.getData()[attrName];
                valueText = oControl.getData()[attr];
                if(labelText===undefined||valueText===undefined){
                    continue;
                }
                oRm.write('<div class="searchResultListItem-attribute">');
                label = new sap.m.Label({text: labelText});
                label.setTooltip((''+labelText).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
                label.addStyleClass("searchResultListItem-attribute-label");
                oRm.renderControl(label);
                value = new sap.m.Text({text: valueText});
                value.setTooltip((''+valueText).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
                value.addStyleClass("searchResultListItem-attribute-value");
                oRm.renderControl(value);
                oRm.write("</div>");
            }
            oRm.write("</div>");

            /// why found attributes
            // oRm.write('<div class="searchResultListItem-attributes">');
            // for (i = 0; i < oControl.getData().whyfounds.length; i++) {
            //     labelText = oControl.getData().whyfounds[i].label;
            //     valueText = oControl.getData().whyfounds[i].valueHighlighted;
            //     if(labelText===undefined||valueText===undefined){
            //         continue;
            //     }
            //     oRm.write('<div class="searchResultListItem-attribute">');
            //     label = new sap.m.Label({text: labelText});
            //     label.setTooltip((''+labelText).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
            //     label.addStyleClass("searchResultListItem-attribute-label");
            //     oRm.renderControl(label);
            //     value = new sap.m.Text({text: valueText});
            //     value.setTooltip((''+valueText).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
            //     value.addStyleClass("searchResultListItem-attribute-value");
            //     oRm.renderControl(value);
            //     oRm.write("</div>");
            // }
            // oRm.write("</div>");

            oRm.write("</div>");

            /// /// image2 (tablet+)
            /// use as background because of cover feature
            if (oControl.getImageUrl()) {
            	oRm.write('<div class="searchResultListItem-image2Container"><div class="searchResultListItem-image searchResultListItem-image2" style="background-image:url(\'');
                oRm.write(oControl.getImageUrl());
                oRm.write('\')"></div></div>');
            }

            oRm.write("</div></div>"); // close main

            /// /// button
            if (oControl.getPreviewButton() !== "false") {
                this.button = new SearchResultListItemButton({
                    status: oControl.getStatus(),
                    press: function(){
                        if (oControl.getStatus() === "open") {
                            oControl.firePreviewClose();
                            // oControl.setStatus("closed");
                        } else {
                            oControl.firePreviewOpen();
                            // oControl.setStatus("open");

                        }
                    }
                });
                oRm.renderControl(this.button);
            }

            /// close outer div
            oRm.write("</div>"); // end of the complete control
        },

        // handler of  result list item left and image column
        // ===================================================================        
        fireNavigate: function (uri) {
        	return function() {
                if (uri) {
//                	sap.ui.getCore().byId("shellOverlay").close();
                    window.location.href = uri;
                } 
//                else {
//                	window.location.href = "/sap/bc/ui5_ui5/ui2/ushell/shells/abap/FioriLaunchpad.html?sap-client=111#SalesOrder-DisplayFactSheet?SalesOrder=27"
//                }      		
        	};

        },
        
        // allow <b> in title and attributes
//        onAfterRendering: function() {
//            var self = this;
//            $(this.getDomRef()).find(".searchResultListItem-main").bind('click', self.fireNavigate(self.getTitleUrl()));
//            this._setSafeText(
//                $(this.getDomRef()).find(".searchResultListItem-title, .searchResultListItem-attribute-value, .searchResultListItem-type"));
//        },

          
        setSafeText: function(objs) {
            objs.each(function(i,d) {
                var $d = $(d);
                var s = $d.text().replace(/<b>/gi, '').replace(/<\/b>/gi, '');  /// Only those two HTML tags are allowed.
                if (s.indexOf('<') === -1) {
                    $d.html($d.text());
                }
                //emphasize whyfound in case of ellipsis
                var posOfWhyfound = $d.html().indexOf("<b>");
                if (posOfWhyfound>-1 && d.offsetWidth < d.scrollWidth) {
                    var emphasizeWhyfound = "..." + $d.html().substring(posOfWhyfound);
                    $d.html(emphasizeWhyfound);                    
                }
            });
        }

    });
    
    sap.m.ListItemBase.extend("SearchResultListItemFooter", {
        // the control API:
        metadata : {
            properties : {
                showSpinner: {type : "boolean", defaultValue : false},
                text: "string"
            },
            aggregations: {
                content: {singularName: "content"} // default type is "sap.ui.core.Control", multiple is "true"
            },
            events: {
                showMore: {}
            }
        },

        // the part creating the HTML:
        renderer : function(oRm, oControl) { // static function, so use the given "oControl" instance instead of "this" in the renderer function

            var footertext = new sap.m.Label({
                text: oControl.getText()
            });
            footertext.addStyleClass('resultListMoreFooter');

            var dotted = new sap.ui.core.Icon({
                src: sap.ui.core.IconPool.getIconURI("sys-overflow")
            });

            this.busy = new sap.m.BusyIndicator({
                // visible: false
                size:"22px"
            });
            this.busy.addStyleClass('resultListBusyFooter');
            if (oControl.getShowSpinner() === false)
            {
                this.busy.addStyleClass('hidden');
            }


            oRm.write("<div");
            oRm.writeAttribute("tabindex","-1");
            oRm.writeControlData(oControl);  // writes the Control ID
            oRm.addClass("resultListFooterContainer");
            oRm.writeClasses();
            oRm.write(">");

            oRm.write("<div class='resultListFooterContent'>");
            oRm.renderControl(dotted);
            oRm.renderControl(footertext);
            oRm.renderControl(this.busy);
            oRm.write("</div>");

            oRm.write("</div>");
        },

        // allow <b> in title and attributes
        onAfterRendering: function(oRm, oControl) {
            var self = this;
            var $item = $(this.getDomRef());
            $item.click(function(){
                self.setShowSpinner(true);
                self.fireShowMore();
                $item.off('click'); // Prevent multiple more clicks
            });
            $item.keyup(function(){
            	if(event.keyCode == 13){
                	this.click();
                }
            });
        }
    });


    sap.m.ListItemBase.extend("CategoryTreeItem", {
        // the control API:
        metadata : {
            properties : {
                name: "string",
                count: "int"
            },
            events: {
                clicked: {}
            }
        },

        // the part creating the HTML:
        renderer : function(oRm, oControl) { // static function, so use the given "oControl" instance instead of "this" in the renderer function

            oRm.write("<div");
            oRm.writeControlData(oControl);  // writes the Control ID
            oRm.addClass("resultListFooterContainer");
            oRm.writeClasses();
            oRm.write(">");

            oRm.write("<div class='resultListFooterContent'>");
            oRm.write("</div>");

            oRm.write("</div>");
        },

        // allow <b> in title and attributes
        onAfterRendering: function(oRm, oControl) {
            var self = this;
            var $item = $(this.getDomRef());
            $item.click(function(){
                self.fireClicked();
            });
        }
    });



}());
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview
 *
 * @version
 */
(function () {
    "use strict";
    /*global jQuery, sap */


    //////////  The ResultListItemDetail Control //////////
    sap.ui.core.Control.extend("SearchResultListItemDetail", {
        // the control API:
        metadata : {
            properties : {
                itemTitle: "string",
                itemTitleUrl: "string",
                itemType: "string",
                itemData: "object",
                firstDetailAttribute: {type:"int", defaultValue:4},
                maxDetailAttributes: {type:"int", defaultValue:8}
            }
        },

        // the part creating the HTML:
        renderer : function(oRm, oControl) { // static function, so use the given "oControl" instance instead of "this" in the renderer function
            /// outer div
            oRm.write('<div');
            oRm.writeControlData(oControl);  // writes the Control ID
            oRm.addClass('searchResultListItemDetail');
            oRm.writeClasses();
            oRm.write('>');

            // detail title and attributes (aka the detail)
            oRm.write('<div class="searchResultListItemDetail-content">');

            // header of the item
            oRm.write('<div class="searchResultListItemDetail-contentTitle">');

            // item type
            // if ( oControl.getItemType() )
            // {
            //     oRm.write('<div>');
            //     var type1 = new sap.m.Text({text: oControl.getItemType()});
            //     type1.addStyleClass("searchResultListItemDetail-type");
            //     oRm.renderControl(type1);
            //     oRm.write("</div>");
            // }


            // // item title
            // if (oControl.getItemTitle())
            // {
            //     oRm.write('<div>');
            //     var title = new sap.m.Link({text: oControl.getItemTitle(), href: oControl.getItemTitleUrl()});
            //     title.addStyleClass("searchResultListItemDetail-title");
            //     oRm.renderControl(title);
            //     oRm.write("</div>");
            // }


            // close header
            oRm.write("</div>");

            // detail attributes
            oRm.write('<div class="searchResultListItemDetail-attributes">');
            if (oControl.getItemData())
            {
                var detailAttributes = oControl.getFirstDetailAttribute() + oControl.getMaxDetailAttributes();
                //container of whyfounds
                var whyFoundAttributesDict = {}; 
                
                var prepareLabelValue = function(pLabelText, pValueText, whyfoundFlag) {
//                	if (whyfoundFlag === true) {
//                		oRm.write('<div class="searchResultListItemDetail-attribute searchResultListItemDetail-whyfound">');
//                	} else {
                		oRm.write('<div class="searchResultListItemDetail-attribute">');
//                	}
                    

                    var label = new sap.m.Label({text: pLabelText});
                    label.setTooltip((''+pLabelText).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
                    label.addStyleClass("searchResultListItemDetail-attribute-label");
                    oRm.renderControl(label);

                    var value = new sap.m.Text({text: pValueText});
                    value.setTooltip((''+pValueText).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
                    value.addStyleClass("searchResultListItemDetail-attribute-value");
                    oRm.renderControl(value);

                    // close detail content block
                    oRm.write("</div>");

                };
                
                for (var j = oControl.getFirstDetailAttribute(); j < detailAttributes; j++) {
                    var attrName = "attr"+j+"Name";
                    var attr = "attr"+j;
                    var labelText = oControl.getItemData()[attrName];
                    var valueText = oControl.getItemData()[attr];
                    if(labelText===undefined||valueText===undefined){
                        continue;
                    }
                    prepareLabelValue(labelText, valueText, false);

                }
                
                //push undisplayable whyfound attributes into whyFoundAttributesDict
                for (var z = detailAttributes; z<=oControl.getItemData().numberofattributes; z++) {
//                for (var z = 1; z<=oControl.getItemData().numberofattributes; z++) {
                	var attrWhyfound = "attr"+z+"Whyfound";

                	if (oControl.getItemData()[attrWhyfound] === true) {
                        var attrNameUD = "attr"+z+"Name";
                        var attrUD = "attr"+z;
                        if (!(oControl.getItemData()[attrNameUD] in whyFoundAttributesDict)) {
                        	whyFoundAttributesDict[oControl.getItemData()[attrNameUD]] = oControl.getItemData()[attrUD];
                        }
                	}
                }
                
                // add request attrs without corresponding respond attr to whyfound container, they have subordinate prio than the above native ones 
                if ($.isArray(oControl.getItemData().whyfounds) &&  oControl.getItemData().whyfounds.length > 0) {
                	oControl.getItemData().whyfounds.forEach(function(wf, i) {
                		whyFoundAttributesDict[wf.label] = wf.valueHighlighted;
                	});
                }
                
                // whyfound attributes container
                var empty = true;
                for (var prop4EmptyCheck in whyFoundAttributesDict) {
                	empty = false;
                	break;
                }
                if (empty === false) {
                    oRm.write('<div class="searchResultListItemDetail-whyfound-container">');
                    // display the first 2 whyfound attributes
                    var wfCounter = 0;
                    for (var prop in whyFoundAttributesDict) {
                            var whyFoundLabelText = prop;
                            var whyFoundValueText = whyFoundAttributesDict[prop];
                            if(whyFoundLabelText===undefined||whyFoundValueText===undefined){
                                continue;
                            } else {
                            	wfCounter = wfCounter + 1;
                            	if (wfCounter<3) {
                            		 prepareLabelValue(whyFoundLabelText, whyFoundValueText, true);                    		
                            	} else {
                            		break;
                            	}
                            }
                    }
                    // close whyfound-container div
                    oRm.write("</div>");                	
                }
            }
            
            // close attributes div
            oRm.write("</div>");
            // close detail div
            oRm.write("</div>");
            // close outer div
            oRm.write("</div>"); // end of the complete control
        },

//        // allow <b> in title and attributes
//        onAfterRendering: function() {
//            var self = this;
//            // $(this.getDomRef()).find(".searchResultListItem-left").on("click", function(){ self.fireNavigate(); });
//            this._setSafeText(
//                $(this.getDomRef()).find(".searchResultListItemDetail-title, .searchResultListItemDetail-attribute-value"));
//        },

        setSafeText: function(objs) {
            objs.each(function(i,d) {
                var $d = $(d);
                var s = $d.text().replace(/<b>/gi, '').replace(/<\/b>/gi, '');  /// Only those two HTML tags are allowed.
                if (s.indexOf('<') === -1) {
                    $d.html($d.text());
                }
                //emphasize whyfound in case of ellipsis
                var posOfWhyfound = $d.html().indexOf("<b>");
                if (posOfWhyfound>-1 && d.offsetWidth < d.scrollWidth) {
                    var emphasizeWhyfound = "..." + $d.html().substring(posOfWhyfound);
                    $d.html(emphasizeWhyfound);                    
                }
            });
        }


    });

}());
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, console, window */
    
//    jQuery.sap.require("sap.ushell.renderers.fiori2.search.SearchModel");

    /**
     * @name "sap.ushell.renderers.fiori2.SearchFilter
     * @extends sap.ui.core.mvc.Controller
     * @public
     */
    sap.ui.controller("sap.ushell.renderers.fiori2.search.SearchSuggestions", {

        /**
         * SAPUI5 lifecycle hook.
         * @public
         */
        onInit: function () {

            // var oModel = new sap.ui.model.json.JSONModel();
            // this.getView().setModel(oModel, "suggestions");
            // this.appSuggestionLimit = this.getView().appSuggestionLimit;
            // this.objSuggestionLimit = this.getView().objSuggestionLimit;           
            //this.closeSuggestions();
            //this.query = sap.ushell.Container.getService("Search").getSina().createSuggestionQuery();
            //sap.ui.getCore().getEventBus().subscribe("searchSuggest", this.doSuggestion, this);
//            sap.ui.getCore().getEventBus().subscribe("search", function(){this.closeSuggestions(); this.removeFocus();}, this);
//            sap.ui.getCore().getEventBus().subscribe("searchFinished", this.closeSuggestions, this);
            //sap.ui.getCore().getEventBus().subscribe("searchFinished", function(){this.closeSuggestions(); this.removeFocus();}, this);
        },

        onExit: function () {

            sap.ui.getCore().getEventBus().unsubscribe("searchSuggest", this.doSuggestion, this);
            sap.ui.getCore().getEventBus().unsubscribe("search", this.closeSuggestions, this);
        },

        
        removeFocus: function(){
            sap.ui.getCore().byId("sfOverlay").getFocusDomRef().blur();
        },
        
        closeSuggestions: function (sChannelId, sEventId, oData) {
                        
            // object suggestions
            var items = [];
            for(var i=0;i< this.objSuggestionLimit;++i){
                items.push({visible: false, type: "suggestion"});
            }
            
            // footer for object suggestions            
            items.push({visible: false, type: "suggestion", isGroupFooter: true});
            
            // header for app suggestions
            items.push({visible: false, type: "app", isGroupHeader: true, label: sap.ushell.resources.i18n.getText("suggestion_found_apps")});
            
            // app suggestions
            for(i=0;i< this.appSuggestionLimit;++i){
                items.push({visible: false, type: "app"});
            }
            
            // set suggestions in model
            this.getView().getModel("suggestions").setData({
                items: items,
                suggestionsVisible: false,
                visible: false
                
            });
            
        },

        dataSourceSelected: function (sChannelId, sEventId, oData) {
            if (this.getView().getModel("suggestions").getProperty("/visible")) {
                this.doSuggestion(null, null, {searchTerm: this.lastSearchTerm});
            }
        },

        onClickSuggestion: function (oEvent) {
            var oSuggestion = oEvent.getSource().getBindingContext("suggestions").getObject(),
                oDataSource,
                sSearchTerm,
                bCategorySuggested = false;

            if (oSuggestion.type === "app") {
                if (oSuggestion.targetURL) {
                    window.location = oSuggestion.targetURL;
                }
            } else {
                if (oSuggestion.data) {
                    sSearchTerm = oSuggestion.data.labelRaw;
                    oDataSource = oSuggestion.data.dataSource;
                    oDataSource.label = oDataSource.objectName.label;
                    bCategorySuggested = true;
                } else {
                    sSearchTerm = oSuggestion.labelRaw;
//                    oDataSource = sap.ushell.Container.getService("Search").getDataSource();
                    oDataSource = {
                            label: "All",
                            level: 0,
                            objectName: {
                                label: "ALL",
                                value: "$$ALL$$"
                            },
                            packageName: {
                                label: "ABAP",
                                value: "ABAP"
                            },
                            schemaName: {
                                label: "",
                                value: ""
                            },
                            type: {
                                label: "Category",
                                value: "Category"
                            }
                    }; 
                }
                sap.ui.getCore().getEventBus().publish("externalSearch", {
                    searchTerm: sSearchTerm,
                    dataSource: oDataSource,
                    categorySuggested: bCategorySuggested
                });
            }
        },

        doSuggestion: function (sChannelId, sEventId, oData) {
            var oFilter = new sap.ui.model.Filter("visible", sap.ui.model.FilterOperator.EQ, true),
                oModel = this.getView().getModel("suggestions"),
                appQuery,
                query;

            // do not trigger requests twice if view is not visible at the moment
            if (oData.activeViews && oData.activeViews.indexOf(this.getView().getId()) === -1) {
                return;
            }

            // suggestions only if there is at least 1 character
            if (oData.searchTerm.length === 0) {
                this.closeSuggestions();
                return;
            }

            // make visible
            oModel.setProperty("/visible", true);
       
            this.lastSearchTerm = oData.searchTerm;

            // app suggestions
            this.doAppSuggestions(oData);

            // business object suggestions
            if (oData.searchTerm.length >=3 && this.objSuggestionsActive()) {
                this.doObjSuggestions(oData);
            }else{
                this.clearObjSuggestions(oModel);
            }

        },

        objSuggestionsActive : function(){
            if(window.searchConfig && window.searchConfig.objSuggestions!==undefined){
                return window.searchConfig.objSuggestions;                
            } else  {
                return true;
            }
        },
        
        clearObjSuggestions : function(oModel){

            var oFilter = new sap.ui.model.Filter("visible", sap.ui.model.FilterOperator.EQ, true);
            // hide object suggestions + footer
            for (var i=0; i <= this.objSuggestionLimit; i = i + 1) {
                oModel.setProperty("/items/" + i + "/visible", false);
            }     
            this.getView().getContent()[0].getBinding("items").filter([oFilter]);
        },
        
        doAppSuggestions : function(oData){

            var oFilter = new sap.ui.model.Filter("visible", sap.ui.model.FilterOperator.EQ, true),
                oModel = this.getView().getModel("suggestions"),
                appQuery;

            appQuery = sap.ushell.Container.getService("Search").queryApplications(oData.searchTerm, jQuery.proxy(function (resultset) {
                var result = resultset.getElements();

                //TODO: uncomment
                // if (resultset.searchTerm !== this.lastSearchTerm) {
                //     return;
                // }

                for(var i=0;i<this.appSuggestionLimit;++i){
                    if(i<result.length){
                    var appSuggest = result[i];
                    oModel.setProperty("/items/"+(this.objSuggestionLimit+2+i), {
                        label: appSuggest.label,
                        icon: appSuggest.icon,
                        targetURL: appSuggest.targetURL,
                        app: appSuggest,
                        visible: true,
                        type: "app"
                    });                                            
                    }else{
                        oModel.setProperty("/items/"+(this.objSuggestionLimit+2+i)+"/visible", false);
                    }
                }
                
                if(result.length>0){
                     oModel.setProperty("/items/"+(this.objSuggestionLimit+1)+"/visible", true);
                }else{
                     oModel.setProperty("/items/"+(this.objSuggestionLimit+1)+"/visible", false);
                }
                
                this.getView().getContent()[0].getBinding("items").filter([oFilter]);
            }, this), this.appSuggestionLimit);
            
        },
        
        doObjSuggestions : function(oData){
            
            var oFilter = new sap.ui.model.Filter("visible", sap.ui.model.FilterOperator.EQ, true),
                oModel = this.getView().getModel("suggestions"),
                self = this;

            
            self.query.setSuggestionTerm(oData.searchTerm);
            self.query.dataSource({
                objectName: "$$ALL$$",
                packageName: "ABAP",
                type: "Category"
            });
            self.query.getResultSet(jQuery.proxy(function (resultset) {
                var suggestions = resultset.getElements(),
                    oSuggestions = [],
                    i = 0;

                //TODO: find out how to get the suggestionterm from ina service
                // if (resultset.searchTerm !== this.lastSearchTerm) {
                //     return;
                // }

                if (suggestions.length > 0) {
                    oSuggestions = this.buildSuggestions(suggestions, oData);
                    oModel.setProperty("/suggestionsVisible", true);
                } else {
                    oModel.setProperty("/suggestionsVisible", false);
                }

                for (i; i < this.objSuggestionLimit; i = i + 1) {
                    if (oSuggestions[i] && i < this.objSuggestionLimit) {
                        oModel.setProperty("/items/" + i, oSuggestions[i]);
                    } else {
                        oModel.setProperty("/items/" + i + "/visible", false);
                    }
                }

                if (oSuggestions.length > 0) {
                    oModel.setProperty("/items/" + (this.objSuggestionLimit), {visible: true, type: "suggestion", isGroupFooter: true});
                } else {
                    oModel.setProperty("/items/" + (this.objSuggestionLimit) + "/visible", false);
                }

                this.getView().getContent()[0].getBinding("items").filter([oFilter]);
            }, this));
            
        },
        
        buildSuggestions: function (aSuggestions, oData) {
            var oResult = {};
            
            // 1 prepare search search terms
            // -----------------------------
            var terms = oData.searchTerm;
            var termsSeparatedBySpace = terms.split(" ");
            var newTerms = [];
            //Split search terms with space and wildcard into array
            $.each(termsSeparatedBySpace, function (i,termSpace) {
                termSpace = $.trim(termSpace);
                if(termSpace.length>0){
                    var termsSeparatedByWildcard = termSpace.split("*");
                    $.each(termsSeparatedByWildcard, function (i,term) {
                        if(term.length>0){
                            //Escape special characters
                            term = term.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
                            newTerms.push(term);                        
                        }
                    });
                }
            });
            terms = newTerms;
//            var bTagPattern = new RegExp("/<b>[^<]+<\/b>/", "ig"); 
            var bTagPattern = /<b>[^<]+<\/b>/igm;
            
            jQuery.each(aSuggestions, function (i, value) {

                if (value.filter.attribute !== "$$AllAttributes$$") {
                    return;
                }
                
                if (!oResult[value.labelRaw]) {
                    oResult[value.labelRaw] = value;
                    oResult[value.labelRaw].categories = [];
                    oResult[value.labelRaw].visible = true;
                    oResult[value.labelRaw].type = "suggestion";
                }
                
                var suggestionLabel = oResult[value.labelRaw].label;
                if (suggestionLabel.length === 0) {
                    oResult[value.labelRaw].label = value.labelRaw;
                    suggestionLabel = oResult[value.labelRaw].label;
                }
                
                // 2 highlight search terms
                // -----------------------------
                //Does suggestion label contain <b> tag
                while (match=bTagPattern.exec(suggestionLabel)) {
                    var startPosB = match.index; 
                    var endPosB   = bTagPattern.lastIndex-4; 
                    //get the content inside <b></b>
                    var bString   = suggestionLabel.substring(startPosB+3, endPosB);
                    // Instanciate helper class for highlight
                    var myText = new Text(bString);
                    
                    for (var i = 0; i < terms.length; ++i) {
                        var match = {};
                        var searchTermLocal = terms[i];
                        var searchTermPattern = new RegExp(searchTermLocal, "ig");
                        if (bString !== searchTermLocal) {
                            var searchTermInOrigCase = bString.match(searchTermPattern);
                            if (searchTermInOrigCase && searchTermInOrigCase instanceof Array && searchTermInOrigCase.length>0) {
                                //Tag bold positions
                                myText.highlight(searchTermLocal);
                            }
                        }
                    }
                    //Render according the bold tags 
                    bString = myText.render();
                    //Get rid of old server-side <b>content</b> with bString
                    suggestionLabel = suggestionLabel.substring(0, startPosB) + bString + suggestionLabel.substring(endPosB+4);
                }
                
                oResult[value.labelRaw].label = suggestionLabel;
                
                
                if (value.dataSource.getObjectName().value !== "$$AllDataSources$$") {
                    oResult[value.labelRaw].categories.push({
                        label: value.dataSource.getObjectName().label,
                        data: value
                    });
                }
            });

            return jQuery.map(oResult, function (v, k) {
                return [v];
            });
        }
    });
    
    // =======================================================================
    // helper class for highlight x
    // =======================================================================
    var Text = function () {
        this.init.apply(this, arguments);
    };

    Text.prototype = {

        init: function (text) {
            // store text
            this.text = text;
            // normalized text
            this.lower = text.toLocaleLowerCase();
            // global flag is there is any bold char
            this.globalBold = false;
            // create array which stores flag whether character is bold or not
            this.bold = new Array(this.text.length);
            for (var i = 0; i < this.bold.length; ++i) {
                this.bold[i] = false;
            }
        },

        highlight: function (term) {

            // normalize to lower case
            term = term.toLowerCase();

            // loop at all occurences of term in this.lower
            var index = -1;
            while (index < this.lower.length) {
                var index = this.lower.indexOf(term, index);
                if (index >= 0) {
                    // mark bold characters in global array 
                    for (var i = index; i < index + term.length; ++i) {
                        this.bold[i] = true;
                        this.globalBold = true;
                    }
                    index += term.length;
                } else {
                    break;
                }
            }
        },

        render: function () {

            // short cut if there is nothing to do
            if (!this.globalBold) {
                return this.text;
            }

            // highlight this.text according to information in this.bold
            var bold = false;
            var result = [];
            var start = 0;
            for (var i = 0; i < this.text.length; ++i) {
                if (bold && !this.bold[i] || !bold && this.bold[i]) {
                    result.push(this.text.substring(start, i));
                    if (bold) {
                        // bold section ends
                        result.push("</b>");
                    } else {
                        // bold section starts
                        result.push("<b>");
                    }
                    bold = !bold;
                    start = i;
                }
            }

            // add last part
            result.push(this.text.substring(start, i));
            if (bold) {
                result.push("</b>");
            }
            return result.join("");
        }

    };
}());

//Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview
 *
 * @version
 */
(function (global) {
	"use strict";
	/* global jQuery, sap, console, SearchLayout, SearchResultListWithDetail,
    SearchResultListItem, SearchResultListItemFooter, SearchResultListItemDetail */

	sap.ui.jsview("sap.ushell.renderers.fiori2.search.container.App", {

		// create content
		// ===================================================================
		createContent: function() {
			var self = this;
			self.aDanglingControls = [];
			self.suggestionsEnabled = true;
			sap.ui.getCore().getEventBus().subscribe("search", function(){this.onSearch();}, this);
			sap.ui.getCore().getEventBus().subscribe("allSearchFinished", function(){this.onSearchFinished();}, this);

			/*
			 * Search Model
			 */
			var searchModel = sap.ui.getCore().getModel("searchModel");
			if (!searchModel) {
				searchModel = new sap.ushell.renderers.fiori2.search.SearchModel();
				searchModel.setSizeLimit(200);

				sap.ui.getCore().setModel(searchModel, "searchModel");
				searchModel.searchInit();
			}
			searchModel.setSkip(0, false);
			self.setModel(searchModel, "searchModel");
			self.setModel(sap.ushell.resources.i18nModel, "i18n");


			/*
			 * Search Select
			 */
			if (!self.oSearchSelect) {
				self.oSearchSelect = new sap.m.Select("containerSs", { 
					name : "SearchSelect",
					autoAdjustWidth : true,
					items : {
						path : "searchModel>/connectors",
						template: new sap.ui.core.Item({
							key: "{searchModel>labelRaw}",
							text: "{searchModel>label}"
						})
					}
				}).addStyleClass('sapUshellContainerSearchSelect');

				self.oSearchSelect.addEventDelegate({                	                	
					onAfterRendering: function(){
						self.oSearchSelect.setSelectedKey(searchModel.getProperty("/dataSourceLabelRaw"));
					}
				}, self.oSearchSelect);
			}
			self.oSearchSelect.attachChange(function (oEvent) {
				var selectedDS = self.oSearchSelect.getSelectedItem();
				var json = {};

				if(selectedDS.getKey() === "$$ALL$$"){
					json = searchModel.createAllDataSource();

				}else if(selectedDS.getKey() === "$$APP$$"){
					json = searchModel.createAppDataSource();

				}else{
					json = searchModel.sina.createDataSource({
						objectName : {label: selectedDS.getText(), value: selectedDS.getKey()},
						packageName : {label: "", value:""},
						schemaName : {label: "", value:""},
						label: ""
					});
				}

				//set input box placeholder
				if(selectedDS.getKey() !== "$$ALL$$"){
					self.oSearchInput.setPlaceholder(sap.ushell.resources.i18n.getText("searchIn") + ": " + selectedDS.getText());					
				}else{
					self.oSearchInput.setPlaceholder(sap.ushell.resources.i18n.getText("search"));										
				}

				//new feature: after change datasource trigger search
//				searchModel.setSearchTerm(self.oSearchInput.getValue());
//				searchModel.setDataSource(json, true);
				searchModel.setProperty("/dataSource", json);

				self.handleHash(searchModel);
				self.oSearchInput.destroySuggestionRows();
//				self.closeHeadSearchBox();

			}, this);


			/*
			 * Search Input
			 */
			if (!self.oSearchInput) {
				self.oSearchInput = new sap.m.Input("containerSi", { 
					name : "SearchInput",
					width: "50%",
//					placeholder : sap.ushell.resources.i18n.getText("search"),
					// value:  "{searchModel>/searchBoxTerm}",
					showValueStateMessage: false,
					showTableSuggestionValueHelp: false,
					showSuggestion: true,
					filterSuggests: true,
					suggestionColumns: [new sap.m.Column({})],
					liveChange: function(oEvent){
						self.inputLiveChange(oEvent);
					},
					suggest: function(oEvent){
						self.handleSuggest(oEvent);
					},
					suggestionItemSelected: function(oEvent){
						if(self.changeTimer){
							window.clearTimeout(self.changeTimer);
							self.changeTimer = null;
						}
						self.selectSuggest(oEvent);
					}, 
					change: function(oEvent) {
						//workaround because suggestionItemSelected event will fire soon and
						//we must avoid to fire 2 searches. Just using suggestionItemSelected
						//does also not work since we cannot get the selected row from this event.
						self.changeTimer = window.setTimeout(function(){
							var searchModel = self.getModel("searchModel");	
							self.handleHash(searchModel);
							self.oSearchInput.destroySuggestionRows();
							self.changeTimer = null;
						},100);
					}
				})
				.addStyleClass('sapUshellContainerSearchInput')
				.setFilterFunction(function(){
					return self.suggestionsEnabled;
				});




				self.oSearchInput.addEventDelegate({                	                	
					onAfterRendering: function(){
						//set input box placeholder
						var selectedDS = self.oSearchSelect.getSelectedItem();
						if (selectedDS) {
							if(selectedDS.getKey() !== "$$ALL$$"){
								self.oSearchInput.setPlaceholder(sap.ushell.resources.i18n.getText("searchIn") + ": " + selectedDS.getText());					
							}else{
								self.oSearchInput.setPlaceholder(sap.ushell.resources.i18n.getText("search"));										
							}
						}
					}
				}, self.oSearchInput);
			}

			self.oSearchInput.bindAggregation("suggestionRows", "searchModel>/mixedSection", function (path, bData) {
				var label = new sap.m.Label({
					text: "{searchModel>mixedLabel}"
				}).addStyleClass ('sapUshellSuggestText').addStyleClass('sapUshellSearchSuggestionNavItem');
				label.addEventDelegate({                	                	
					onAfterRendering: function(){
						self.bTagUnescaper(this.getDomRef());                			
					}
				}, label);
				label.data("labelRaw", "{searchModel>labelRaw}");
				label.data("targetURL", "{searchModel>targetURL}");
				label.data("dataSource", "{searchModel>dataSource}");
                label.data("suggestType", "{searchModel>suggestType}");
				var icon = new sap.ui.core.Icon ({
					src: "{searchModel>icon}"
				}).addStyleClass('sapUshellSuggestIcon');
				var app = new sap.m.Label({
					text: {
						path: "searchModel>icon",
						formatter: function(sValue) {
							if (sValue) {
								return "<i>"+sap.ushell.resources.i18n.getText("label_app")+"</i>";
							}
							return "";
						}
					}
				}).addStyleClass ('sapUshellSuggestText').addStyleClass('sapUshellSearchSuggestionNavItem');
				app.addEventDelegate({                	                	
					onAfterRendering: function(){
						self.bTagUnescaper(this.getDomRef());                			
					}
				}, app);
				var cell =  new sap.m.CustomListItem({
					type:sap.m.ListType.Active,
					content: [app,icon,label]
				});
				cell.getText = function(){
					return label.data("labelRaw");
				};
				if (!self.oSearchInput.getValue())
					return null;
				return new sap.m.ColumnListItem({
					cells: [cell],
					type: "Active"
				});
			});
			self.oSearchInput.addEventDelegate({
//				onkeyup : function(oEvent) {
//				if(oEvent.keyCode == 13){
//				self.handleHash(searchModel);
//				self.oSearchInput.destroySuggestionRows();
//				//		    			self.closeHeadSearchBox();
//				}
//				},
				onfocusin : function(oEvent) {
					self.closeHeadSearchBox();
				}
			}, self.oSearchInput);


			/*
			 * Search Button
			 */
			if (!self.oSearchBtn) {
				self.oSearchBtn = new sap.m.Button("containerSb", { 
					name : "SearchBtn",
					icon: sap.ui.core.IconPool.getIconURI("search"),
					press: function (event) {
						self.handleHash(searchModel);
						self.oSearchInput.destroySuggestionRows();
//						self.closeHeadSearchBox();
					}
				});
			}


			/*
			 * Search Result
			 */
			self.oSearchResults = sap.ui.getCore().byId("searchContainerResultsView");
			if (!self.oSearchResults) {
				self.oSearchResults = sap.ui.view({
					id : "searchContainerResultsView",
					tooltip: "{i18n>searchResultsView_tooltip}",
					viewName : "sap.ushell.renderers.fiori2.search.Search",
					type : sap.ui.core.mvc.ViewType.JS
				});
			}
			self.oSearchResults.viewSwitcher = self.getController();
			self.aDanglingControls.push(self.oSearchResults);


			self.oSearchResults.setModel(searchModel);

//			self.oSubContainer = self.containerFactory("searchSubContainer", []);
//			self.oSubContainer = self.containerFactory("searchSubContainer", [self.getDataSourceBadge(searchModel)]);
//			self.oPage = self.pageFactory("searchPage", [self.oSearchSelect, self.oSearchInput, self.oSearchBtn, self.oSubContainer]);
			self.oPage = self.pageFactory("searchPage", [self.oSearchSelect, self.oSearchInput, self.oSearchBtn, self.oSearchResults]);
			self.updateSearchModelFromURL(searchModel);


			return self.oPage;
		},

		onSearch: function(){
			var self = this;
			self.suggestionsEnabled = false;
		},

		onSearchFinished: function(){
			var self = this;
			self.suggestionsEnabled = true;
		},

		bTagUnescaper: function (domref) {
			var innerhtml = domref.innerHTML;
			while( innerhtml.indexOf('&lt;b&gt;')+innerhtml.indexOf('&lt;/b&gt;') >= -1  ){ // while these tags are found
				innerhtml = innerhtml.replace('&lt;b&gt;', '<b>');
				innerhtml = innerhtml.replace('&lt;/b&gt;', '</b>');
			}
			while( innerhtml.indexOf('&lt;i&gt;')+innerhtml.indexOf('&lt;/i&gt;') >= -1  ){ // while these tags are found
				innerhtml = innerhtml.replace('&lt;i&gt;', '<i>');
				innerhtml = innerhtml.replace('&lt;/i&gt;', '</i>');
			}
			domref.innerHTML = innerhtml;
		},

		closeHeadSearchBox: function(){
			if(sap.ui.getCore().byId('headSearchBox') !== undefined){
				if(sap.ui.getCore().byId('headSearchBox').getVisible()){
					jQuery('.headSearchDiv').animate(
							{'maxWidth':'38rem'}, 
							{duration: 100, complete: function(){
								sap.ui.getCore().byId('headSearchBox').setVisible(false);
							}});         			
				}	
			}

		},

		handleHash: function(searchModel){
			var self = this;

			if (self.oSearchInput.getValue() === "")
				return;
			var sHash = "#Action-search&/searchTerm=" + encodeURIComponent(self.oSearchInput.getValue()) + "&dataSource=" + encodeURIComponent(JSON.stringify(searchModel.getDataSourceJson()));
			if (window.location.hash === sHash) {
				return;
			}
			else {
				window.location.href = sHash;
				searchModel.setProperty("/searchBoxTerm", self.oSearchInput.getValue());
				self.closeHeadSearchBox();
			}
		},

		inputLiveChange: function (oEvent) {
			//destroy suggetion box items
			var searchModel = this.getModel("searchModel");
			if (!this.oSearchInput.getValue()) {
				searchModel.setProperty("/appSection", []);
				searchModel.setProperty("/suggestSection", []);
				searchModel.setProperty("/mixedSection", []);
			}
		},

		handleSuggest: function (oEvent) {
			this.oSearchInput.destroySuggestionItems();
			var suggestTerm = this.oSearchInput.getValue();
			var searchModel = this.getModel("searchModel");
			searchModel.setProperty("/searchBoxTerm", suggestTerm);
			searchModel.doSuggestion();
		},

		selectSuggest: function (oEvent) {
			var searchModel = sap.ui.getCore().getModel("searchModel");
            
            var suggestType = oEvent.getParameter("selectedRow").getCells()[0].getContent()[2].data("suggestType");                
			var searchTerm = oEvent.getParameter("selectedRow").getCells()[0].getContent()[2].data("labelRaw");
			var dataSource = oEvent.getParameter("selectedRow").getCells()[0].getContent()[2].data("dataSource");
			var targetURL = oEvent.getParameter("selectedRow").getCells()[0].getContent()[2].data("targetURL");
            
            if(suggestType === "dataSourceSuggest"){
                
                //Reset Text Empty
			     searchModel.setProperty("/searchBoxTerm", "");
			     this.oSearchInput.setValue("");

                
                //set select and datasource in model
                this.oSearchSelect.setSelectedKey(searchTerm);

                var selectedDS = this.oSearchSelect.getSelectedItem();
				var json = {};

				if(selectedDS.getKey() === "$$ALL$$"){
					json = searchModel.createAllDataSource();

				}else if(selectedDS.getKey() === "$$APP$$"){
					json = searchModel.createAppDataSource();

				}else{
					json = searchModel.sina.createDataSource({
						objectName : {label: selectedDS.getText(), value: selectedDS.getKey()},
						packageName : {label: "", value:""},
						schemaName : {label: "", value:""},
						label: ""
					});
				}

				searchModel.setProperty("/dataSource", json);

                //set input box placeholder
				if(selectedDS.getKey() !== "$$ALL$$"){
					this.oSearchInput.setPlaceholder(sap.ushell.resources.i18n.getText("searchIn") + ": " + selectedDS.getText());					
				}else{
					this.oSearchInput.setPlaceholder(sap.ushell.resources.i18n.getText("search"));										
				}
                
                return;
            }
            
			var sHash;
			if (targetURL) {
				sHash = targetURL;
			}
			else {
				searchModel.setSearchTerm(searchTerm, false);
				searchModel.setDataSource(dataSource, false);
				sHash = "#Action-search&/searchTerm=" + encodeURIComponent(searchModel.getProperty("/searchBoxTerm")) + "&dataSource=" + encodeURIComponent(JSON.stringify(searchModel.getDataSourceJson()));
			}
			if (window.location.hash !== sHash) {
                if (sHash.charAt(0) === '#')
				    window.location.href = sHash;
                else 
                    window.open(sHash);
			}
		},

		updateSearchModelFromURL: function (searchModel) {
			var oURLParsing = sap.ushell.Container.getService("URLParsing");

			var appSpecificRoute = oURLParsing.splitHash(window.location.hash).appSpecificRoute;
			if (!appSpecificRoute)
				return;
			var oParameters = oURLParsing.parseParameters("?"+appSpecificRoute.substring(2));

			if (!oParameters.searchTerm)
				return;
			var searchTerm = decodeURI(oParameters.searchTerm[0]);
			searchModel.setSearchTerm(searchTerm, false);

			var dataSource;
			if (oParameters.dataSource) {
				var dataSourceJson = JSON.parse(decodeURI(oParameters.dataSource[0]));
				dataSource = searchModel.sina.createDataSource(dataSourceJson);
				searchModel.setDataSource(dataSource, false);
			}
			else {
				searchModel.resetDataSource(false);
			}

			this.oSearchResults.searchLayout.setShowBottomList(searchModel.getProperty("/isNormalSearchEnable"));
			if (!searchModel.getProperty("/isNormalSearchEnable"))
				this.oSearchResults.searchLayout.setBottomCount(0);

//			this.oSearchSelect.setSelectedKey(searchModel.getProperty("/dataSourceLabelRaw"));
			this.oSearchInput.setValue(searchModel.getProperty('/searchBoxTerm'));     

			searchModel._searchFireQuery();	
		},


		containerFactory: function (sId, oControl, bDisableBouncing) {
			var oContainer = new sap.m.ScrollContainer({
				id: sId,
				content: oControl
			});

			oContainer.addStyleClass('sapUshellSubContainer');

			return oContainer;
		},


		pageFactory: function (sId, oControl, bDisableBouncing) {
//			var self = this;

			var oPage = new sap.m.Page({
				id: sId,
				showNavButton: true,
				content: oControl,
				enableScrolling: true,
				navButtonPress: function (event) {
					window.history.back(1);
				}
			}),
			aEvents = ["onAfterHide", "onAfterShow", "onBeforeFirstShow", "onBeforeHide", "onBeforeShow"],
			oDelegates = {};

			// Pass navigation container events to children.
			jQuery.each(aEvents, function (iIndex, sEvent) {
				oDelegates[sEvent] = jQuery.proxy(function (evt) {
					jQuery.each(this.getContent(), function (iIndex, oControl) {
						/*jslint nomen: true */
						oControl._handleEvent(evt);
					});
				}, oPage);
			});

			oPage.addEventDelegate(oDelegates);
			if (!sap.ui.Device.system.desktop) {
				oPage._bUseIScroll = true;
			}
			if (bDisableBouncing) {
				this.disableBouncing(oPage);
			}
			oPage.setTitle("{i18n>search}");
//			oPage.addHeaderContent(self.oSearchField);

			return oPage;
		},

		getControllerName: function () {
			return "sap.ushell.renderers.fiori2.search.container.App";
		}
	});

}(window));

jQuery.sap.declare('sap.ushell.library-all');
jQuery.sap.declare('sap.ushell.components.factsheet.views.ThingViewer.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.perf.monitor'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.tiles.applauncher.StaticTile.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.tiles.applauncherdynamic.DynamicTile.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.tiles.indicatorArea.AreaChartTile.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.tiles.indicatorcomparison.ComparisonTile.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.tiles.indicatorcontribution.ContributionTile.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.tiles.indicatordeviation.DeviationTile.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.tiles.indicatornumeric.NumericTile.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.loader'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.launchpad.catalog.Catalog.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.launchpad.group_list.GroupList.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.DataSourceList'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.ResultFilterInfo.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.ResultFilterInfo.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchFilter.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchFilter.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchLayout'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchModel'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchResultListItem'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchResultListItemDetail'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchSuggestions.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.container.App.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.ushell.System') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The <code>sap.ushell.System</code> object with related functions.
 */

(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.System");

    // "private" methods (static) without need to access properties -------------


    // "public class" -----------------------------------------------------------

    /**
     * Constructs a new system object representing a system used in the Unified Shell.
     *
     * @param {object} oData
     *     An object containing the system data
     * @param {string} oData.alias
     *     The unique system alias such as <code>'ENTERPRISE_SEARCH'</code>.
     * @param {string} oData.baseUrl
     *     The server relative base URL of this system such as <code>'/ENTERPRISE_SEARCH'</code>.
     *     <b>Note:</b> This has to correspond to an SAP Web Dispatcher routing rule.
     * @param {string} oData.platform
     *         The system platform such as <code>'abap'</code> or <code>'hana'</code>.
     *
     * @class A representation of a system
     * @constructor
     * @since 1.15.0
     * @public
     */
    sap.ushell.System = function (oData) {

        // BEWARE: constructor code below!

        // "private" or hidden methods --------------------------------------------

        // "public" methods -------------------------------------------------------

        /**
         * Returns this system's alias.
         *
         * @returns {string}
         *   this system's alias
         * @since 1.15.0
         */
        this.getAlias = function () {
            return oData.alias;
        };

        /**
         * Returns this system's base URL.
         *
         * @returns {string}
         *   this system's base URL
         * @since 1.15.0
         */
        this.getBaseUrl = function () {
            return oData.baseUrl;
        };

        /**
         * Returns this system's client.
         *
         * @returns {string}
         *   this system's client
         * @since 1.15.0
         */
        this.getClient = function () {
            return oData.client;
        };

        /**
         * Returns this system's name.
         *
         * @returns {string}
         *   this system's name
         * @since 1.15.0
         */
        this.getName = function () {
            return oData.system;
        };

        /**
         * Returns this system's platform.
         *
         * @returns {string}
         *   this system's platform ("abap", "hana" etc.)
         * @since 1.15.0
         */
        this.getPlatform = function () {
            return oData.platform;
        };

        /**
         * Adjusts the given URL so that it will be passed to this system.
         *
         * @param {string} sUrl
         *      the URL (which must be server-absolute)
         * @returns {string}
         *      the adjusted URL
         * @since 1.15.0
         */
        this.adjustUrl = function (sUrl) {
            /*jslint regexp:true */
            if (sUrl.indexOf('/') !== 0 || sUrl === '/') {
                throw new Error("Invalid URL: " + sUrl);
            }
            if (oData.baseUrl === ";o=") {
                if (oData.alias) {
                    sUrl = sUrl + ";o=" + oData.alias;
                }
            } else if (oData.baseUrl) {
                sUrl = oData.baseUrl.replace(/\/$/, "") + sUrl;
            }
            if (oData.client) {
                sUrl += (sUrl.indexOf("?") >= 0 ? "&" : "?") + "sap-client=" + oData.client;
            }
            return sUrl;
        };

        this.toString = function () {
            return JSON.stringify(oData);
        };

        // constructor code -------------------------------------------------------

        // "public" methods (static) ------------------------------------------------

    };

}());

}; // end of sap/ushell/System.js
if ( !jQuery.sap.isDeclared('sap.ushell.UserActivityLog') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
* @fileOverview Implementation of FLP User Activity Log.
* Records the User's last _maxLoggedMessages (currently set to 30) Actions and Errors,
*  and last Navigation action details.
* Implementing API for adding a message (either ACTION or ERROR) and retrieving the logged data
*  or the enhanced logged data.
*
* The data is kept on localStorage, hence it is session-based and is cleaned on browser refresh action
*
* Logged Errors and actions:
* Kept on the localStorage in sap.ushell.UserActivityLog.loggingQueue
*  - Any call to jQuery.sap.log is logged using a LogListener
*  - Any Error Message is logged using jQuery.sap.log.error call in the "error" function of Message Service
*  - User Actions that invoke any of the events in _observedLaunchpadActions or _observedGeneralActions are logged
*     using and additional listener (i.e. _handleAction) that is subscribed to those events
*  - Failure in functions of LaunchPage that return Deffered.promise are logged using an additional fail handler
*     that call jQuery.sap.log.error
*
*  Last navigation action's details are kept on the localStorage in sap.ushell.UserActivityLog.lastNavigationActionData
*  and collected using:
*   - Decorator function (i.e. _tileOnTapDecorator) of sap.ushell.ui.tile.TileBase.prototype.ontap event of TileBase
*   - Event handler subscribed to openApp event
*
* Created by I305848 on 2/18/14.
*/

(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.UserActivityLog");

    //Constructor
    var UserActivityLogClass =  function () {};

    //Prototype for constructor
    UserActivityLogClass.prototype = {
        _maxLoggedMessages : 30,
        _maxMessageByteSize : 2048,
        _maxQueueByteSize : 30720,
        _isActive : false,

        // Launchpad action events that should trigger logging 
        _observedLaunchpadActions: ["createGroup",
                                    "deleteGroup",
                                    "resetGroup",
                                    "changeGroupTitle",
                                    "moveGroup",
                                    "addTile",
                                    "deleteTile",
                                    "moveTile",
                                    "externalSearch",
                                    "openApp",
                                    "addBookmarkTile"],

        _observedGeneralActions: ["showCatalog",
                                     "openApp"],

        // API - Begin
        messageType : {ACTION: 0, ERROR : 1},

        _tileOntapOrigFunc : undefined,

        activate: function (clean) {
            if (this._isActive) {
                return;
            }

            this._isActive = true;

            var oEventBus = sap.ui.getCore().getEventBus(),
                self = this;

            // Action logging: Subscribe to all the events in  _observedLaunchpadActions - User actions 
            this._observedLaunchpadActions.forEach(function (item, i, arr) {
                oEventBus.subscribe("launchpad", item, self._handleAction, self);
            });

            // Action logging: Subscribe to all the events in  _observedGeneralActions - User actions 
            this._observedGeneralActions.forEach(function (item, i, arr) {
                oEventBus.subscribe(item, self._handleAction, self);
            });

            // Error logging: Add listener to jQuery.sap.log
            jQuery.sap.log.addLogListener(this);
            setTimeout(function () {
                self._tileOntapOrigFunc = sap.ushell.ui.launchpad.Tile.prototype.ontap;
                sap.ushell.ui.launchpad.Tile.prototype.ontap = self._tileOnTapDecorator(self._tileOntapOrigFunc);
            }, 0);
        },

        deactivate: function () {
            if (!this._isActive) {
                return;
            }

            this._isActive = false;

            var oEventBus = sap.ui.getCore().getEventBus(),
                self = this;

            // Action logging: Unsubscribe to all the events in  _observedLaunchpadActions - User actions
            this._observedLaunchpadActions.forEach(function (item, i, arr) {
                oEventBus.unsubscribe("launchpad", item, self._handleAction, self);
            });

            // Action logging: Unsubscribe to all the events in  _observedGeneralActions - User actions
            this._observedGeneralActions.forEach(function (item, i, arr) {
                oEventBus.unsubscribe(item, self._handleAction, self);
            });

            // Error logging: Remove listener to jQuery.sap.log
            jQuery.sap.log.removeLogListener(this);

            sap.ushell.ui.launchpad.Tile.prototype.ontap = this._tileOntapOrigFunc;
        },

        addMessage : function (type, messageText, messageID) {
            if (this._isActive) {
                this._addMessageInternal(type, messageText, messageID);
            }
        },

        /**
         * Returns the queue that contains the last _maxLoggedMessages (currently - 30) user actions and errors
         */
        getLog: function () {
            // return this._loggingQueue;
            return this._getLoggingQueueFromStorage();
        },

        /**
         * Returns a JSON that contains the last _maxLoggedMessages (currently - 30) user actions and errors,
         * the details of the last navigation actions, user details and shell state
         */
        getMessageInfo : function (sUserText) {
            var result = {
                userDetails: this._getUserDetails(),
                shellState: this._getShellState(),
                navigationData: this._getLastNavActionFromStorage(),
                userLog: this.getLog()
            };
            return result;
        },

        /**
         * Returns a JSON as String that contains the last _maxLoggedMessages (currently - 30) user actions and errors,
         * the details of the last navigation actions, user details and shell state
         */
        getMessageInfoAsString : function (sUserText) {
            return JSON.stringify(this.getMessageInfo(sUserText));
        },

        // API - End

        // Functions for log listener - Begin
        onLogEntry : function (oData) {
            var sErrorMes = (typeof oData.details != "undefined" && (oData.details !== "")) ? (oData.message + " , " + oData.details) : oData.message;
            this.addMessage(this.messageType.ERROR, sErrorMes);
        },
        onAttachToLog: function () {

        },
        onDetachFromLog: function () {

        },
        // For log listener - End

        // Navigation/ClickOnTile action listener - Begin

        /**
         * Decorator for click-on-Tile action for getting Navigation and Tile details
         */
        _tileOnTapDecorator : function (origFunc) {
            var self = this,
                navigationHash,
                lastNavigationActionData,
                tileObj,
                tileModel,
                bindingCtx,
                tileModelPath;

            return function (event, ui) {
                var tileTypeName = this.getMetadata().getName();

                // If the Tile that was clicked is a PlusTile
                if (tileTypeName == "sap.ushell.ui.launchpad.PlusTile") {
                    self.addMessage(self.messageType.ACTION, "Open Catalog for empty group " + this.getGroupId());

                // If the Tile that was clicked is a regular Tile
                } else if (tileTypeName == "sap.ushell.ui.launchpad.Tile") {
                    // Get the href of the anchor of the clicked tile
                    navigationHash = jQuery(event.currentTarget).find('a').first().attr('href');

                    /*
                    according to https://wiki.wdf.sap.corp/wiki/display/PSSEC/SEC-222
                    we need to make sure we don't store sensitive data in the
                    localStorage, therefore we remove the application parameters
                    which might contains sensitive data like account number
                     */
                    if(navigationHash){
                        var urlParsingSvc = sap.ushell.Container.getService("URLParsing");
                        var navObj = urlParsingSvc.parseShellHash(navigationHash);
                        navigationHash = '#' + urlParsingSvc.constructShellHash({
                            target : {
                                semanticObject : navObj.semanticObject,
                                action : navObj.action
                            }
                        });
                    }

                    lastNavigationActionData = self._getLastNavActionFromStorage();
                    lastNavigationActionData.time = new Date();
                    lastNavigationActionData.navigationHash = navigationHash;
                    lastNavigationActionData.tileDebugInfo = this.getDebugInfo();

                    // Get tile title
                    tileObj = sap.ui.getCore().byId(this.getId());
                    tileModel = tileObj.getModel();
                    bindingCtx = this.getBindingContext();
                    tileModelPath = bindingCtx.getPath();

                    lastNavigationActionData.tileTitle = bindingCtx.getModel().getProperty(tileModelPath).title;
                    /*try {
                    	lastNavigationActionData.tileTitle = bindingCtx.getModel().getProperty(tileModelPath).object.title;

                    } catch (e) {

                    	lastNavigationActionData.tileTitle = "Tile title";
                    }*/

                    self._putInLocalStorage("sap.ushell.UserActivityLog.lastNavigationActionData", JSON.stringify(lastNavigationActionData));

                    self.addMessage(self.messageType.ACTION, "Click on Tile: " + tileModel.getData().title + " Tile debugInfo: " + this.getDebugInfo());
                }
                origFunc.apply(this, arguments);
            };
        },
        // Navigation/ClickOnTile action listener - End

        /**
         * Adds a new message to the localStorage (sap.ushell.UserActivityLog.loggingQueue)
         *  after validating the message Type and keeping the queue's size limitations
         */
        _addMessageInternal : function (type, messageText, messageID) {
            var loggingQueue = this._getLoggingQueueFromStorage(),
                loggedMessage = {type: null},
                prop;
            for (prop in this.messageType) {
                if (type == this.messageType[prop]) {
                    loggedMessage.type = prop;
                    break;
                }
            }
            if (loggedMessage.type === null) {
                return;
            }
            jQuery.extend(loggedMessage, {
                messageID : messageID,
                messageText : messageText,
                time : new Date(),
                toString : function () {
                    var arr = [this.type, this.time];
                    if (typeof this.messageID !== "undefined") {
                        arr.push(this.messageID);
                    }
                    arr.push(this.messageText);
                    return arr.join(" :: ");
                }
            });
            loggingQueue.push(loggedMessage);
            if (loggingQueue.length > this._maxLoggedMessages) {
                loggingQueue.shift();
            }
            this._putInLocalStorage("sap.ushell.UserActivityLog.loggingQueue", JSON.stringify(loggingQueue));
        },

        /**
         * Handler for user actions.
         * For each action - preparing the appropriate message that is passed to addMessag
         */
        _handleAction : function (sChannelId, sEventId, oData) {
            var sMessage;
            switch (sEventId) {
            case 'deleteTile':
                sMessage = "Delete Tile " + (oData.tileId || "");
                break;
            case 'moveTile':
                sMessage = "Move Tile " + (oData.sTileId || "") + " to Group " + (oData.toGroupId || "");
                break;
            case 'createGroup':
                sMessage = "Create Group";
                break;
            case 'changeGroupTitle':
                sMessage = "Change Group Title of "  + (oData.groupId || "") + " to " + (oData.newTitle || "");
                break;
            case 'deleteGroup':
                sMessage = "Delete Group "  + (oData.groupId || "");
                break;
            case 'addTile':
                var oTilesModel = oData.catalogTileContext.oModel.oData,
                    sTilesPath = oData.catalogTileContext.sPath,
                    tile = this._findInModel(sTilesPath, oTilesModel),
                    tileID = tile.id,

                    oGroupsModel = oData.groupContext.oModel.oData,
                    sGroupsPath = oData.groupContext.sPath,
                    group = this._findInModel(sGroupsPath, oGroupsModel),
                    groupID = group.groupId;
                sMessage = "Add Tile " + (tileID || "") + " to Group " + (groupID || "");
                break;
            case 'moveGroup':
                sMessage = "Move Group from index " + (oData.fromIndex || "") + " to index " + (oData.toIndex || "");
                break;
            case 'openApp':
                sMessage = "Open application " + oData.action;
                var lastNavigationActionData = this._getLastNavActionFromStorage();

                // Add the applicationInformation to the navigation data that was collected before the openApp event
                lastNavigationActionData.applicationInformation = oData.oApplication;

                // Check if the hash kept in lastNavigationActionData (the hash of the last app launching action)
                // equals the current hash.
                // If the application was launched as a result of clicking on a tile - then the hashes should match,
                // but if the application was launched by right_click + open_in_new _tab -
                // then the hashed probably don't match since the hash in lastNavigationActionData is from previous launching action
                // of a different application, in this case tileDebugInfo does not match the current opened tile/application
                // because it describes the tile. so it should be removed
                if(!this._hashSegmentsEqual(lastNavigationActionData.navigationHash, oData.sShellHash)) {
                    lastNavigationActionData.tileDebugInfo = "";
                }
                // Anyway the hash of the current opened application is the most relevant one
                // and should be in lastNavigationActionData.navigationHash
                lastNavigationActionData.navigationHash = oData.sShellHash;
                this._putInLocalStorage("sap.ushell.UserActivityLog.lastNavigationActionData", JSON.stringify(lastNavigationActionData));
                break;
            case 'addBookmarkTile':
                sMessage = "Add Bookmark " + (oData.title || "") + " " + (oData.subtitle || "") + " for URL: " + (oData.url || "");
                break;
            case 'showCatalog':
                sMessage = "Show Catalog";
                break;
            } // End of switch

            this.addMessage(this.messageType.ACTION, sMessage);
        },

        _findInModel: function (sPath, oModel) {
            var pathArr,
                pointer = oModel,
                i,
                curPath;
            try {
                pathArr = sPath.split("/");
                for (i = 0; i < pathArr.length; i = i + 1) {
                    if (curPath !== pathArr[i]) {
                        continue;
                    }
                    pointer = pointer[curPath];
                }
            } catch (e) {
                return undefined;
            }
            return pointer;
        },

        _getUserDetails : function (sUserText) {
            var user = sap.ushell.Container.getUser();
            return {
                fullName : user.getFullName() || "",
                userId : user.getId() || "",
                eMail : user.getEmail() || "",
                Language : user.getLanguage() || ""
            };
        },

        _getShellState: function () {
            var oNavContainerObj = sap.ui.getCore().byId("navContainer"),
                oModel,
                result = "";
            if(oNavContainerObj !== undefined) {
                oModel = oNavContainerObj.getModel();
                result = oModel.getProperty("/currentState/stateName");
            }
            return result;
        },

        _getLoggingQueueFromStorage : function () {
        	var loggingQueue = this._getFromLocalStorage("sap.ushell.UserActivityLog.loggingQueue");
            var queue = [];
            if(loggingQueue){
                try{
                    queue = JSON.parse(loggingQueue);
                }
                catch(e){
                    //ignore cases where its not a valid JSON
                }
            }
            return queue;
        },

        _getLastNavActionFromStorage : function () {
        	var lastNavigationActionData = this._getFromLocalStorage("sap.ushell.UserActivityLog.lastNavigationActionData");
            return (lastNavigationActionData ? JSON.parse(lastNavigationActionData) : {});
        },

        _hashSegmentsEqual : function (url1, url2) {
            // Check if both URLs are not empty
            if ( (!url1) ||(!url2) ) {
                return false;
            }
            return (this._getHashSegment(url1) == this._getHashSegment(url2)) ? true : false;
        },

        /**
         * Gets a url (or hash part of a url) and returns the intent,
         * which is the section between the hash and the "~" or the "?" (the first between the two)
         */
        _getHashSegment : function (url) {
            var indexOfTilde = url.indexOf("~"),
                indexOfQuestionMark;
            if(indexOfTilde > -1){
                return url.substring(0, indexOfTilde);
            }

            indexOfQuestionMark = url.indexOf("?");
            if(indexOfQuestionMark > -1){
                return url.substring(0, indexOfQuestionMark);
            }
            return url;
        },

        _getFromLocalStorage : function (key) {
        	var returnedValue = null;
        	try {
        		returnedValue = localStorage.getItem(key);
        	} catch (err) {

        	}
        	return returnedValue;
        },

        _putInLocalStorage : function (key, value) {
        	try {
                localStorage.setItem(key, value);
        	} catch (err) {

        	}
        }
    };

    sap.ushell.UserActivityLog = new UserActivityLogClass();
})();

}; // end of sap/ushell/UserActivityLog.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.Component') ) {
//define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.ushell.components.factsheet.Component");
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained


sap.ui.core.UIComponent.extend("sap.ushell.components.factsheet.Component", {

    oMainView : null,

    // use inline declaration instead of component.json to save 1 round trip
    metadata : {
        version : "1.24.5",
        library : "sap.ushell.components.factsheet",
        includes : [ "css/custom.css" ],
        dependencies : {
            libs : [ "sap.m", "sap.ui.vbm", "sap.suite.ui.commons", "sap.ui.layout", "sap.viz" ],
            components : []
        }
    },

    createContent : function () {
        var oComponentData = this.getComponentData();
        // startup parameters are passed as a property bag as componentData.startupParameters
        var oStartupParameters = ( oComponentData && oComponentData.startupParameters) || {};
        // factsheet component needs 100% height otherwise it does not work
        this.oMainView = sap.ui.view({
            type: sap.ui.core.mvc.ViewType.JS,
            viewName:  "sap.ushell.components.factsheet.views.ThingViewer",
            viewData: oStartupParameters,
            height: "100%"
        }).addStyleClass("ThingViewer");

        return this.oMainView;
    },

    exit : function () {
        window.console.log("On Exit of factsheet Component.js called : this.getView().getId()" + this.getId());
    },

    // this event does not exist !?
    onExit : function () {
        window.console.log("On Exit of factsheet Component.js called : this.getView().getId()" + this.getId());
    }
});

jQuery.sap.setObject("factsheet.Component", sap.ushell.components.factsheet.Component);
}; // end of sap/ushell/components/factsheet/Component.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.annotation.Mapping') ) {
//Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview This file contains an annotation parser for factsheets.
 */

(function () {
    "use strict";
    /*global sap, jQuery, window, XMLHttpRequest, ActiveXObject, XPathResult */

    jQuery.sap.declare("sap.ushell.components.factsheet.annotation.Mapping");

    sap.ushell.components.factsheet.annotation.Mapping = {};
    sap.ushell.components.factsheet.annotation.Mapping.initialized = [];

    sap.ushell.components.factsheet.annotation.Mapping.parse = function (oMetadata, sAnnotationUri) {
        var xPath = {}, getHttpResponseXML, getAllPropertiesMetadata, setEdmTypes, getEdmType, getPropertyValueAttributes,
            replaceWithAlias, getSimpleNodeValue, getPropertyValue, getPropertyValues, getApplyFunctions, isNavProperty,
            sAlias, mappingList = {}, xmlDoc, schemaNodes, oSchema = {}, i, schemaNode, oAlias = {},
            oAnnotations = {}, sAnnoNameSpace = "", refNodes, refNode, aliasNodes, aliasNode, annoNodes, annoNode,
            termNodes, oTerms, nodeIndex, termNode, sTermType, oMetadataProperties, annotationNodes, j, annotationNode,
            annotationTarget, annotationNamespace, annotation, propertyAnnotation, propertyAnnotationNodes,
            propertyAnnotationNode, nodeIndexValue, sTermValue, nodeIndexAnnotation, targetAnnotation, annotationQualifier,
            annotationTerm, valueAnnotation, expandNodes, expandNode, path, pathValues, expandNodesApplFunc;
        if (sap.ui.Device.browser.internet_explorer) {
            xPath = {
                setNameSpace: function (outNode) {
                    outNode.setProperty("SelectionNamespaces", 'xmlns:edmx="http://docs.oasis-open.org/odata/ns/edmx" xmlns:d="http://docs.oasis-open.org/odata/ns/edm"');
                    outNode.setProperty("SelectionLanguage", "XPath");
                    return outNode;
                },
                selectNodes: function (outNode, xPath, inNode) {
                    return inNode.selectNodes(xPath);
                },
                nextNode: function (node) {
                    return node.nextNode();
                },
                getNodeText: function (node) {
                    return node.text;
                }
            };
        } else {//Chrome, Firefox, Opera, etc.
            xPath = {
                setNameSpace: function (outNode) { return outNode; },
                nsResolver: function (prefix) {
                    var ns = {"edmx": "http://docs.oasis-open.org/odata/ns/edmx", "d": "http://docs.oasis-open.org/odata/ns/edm"};
                    return ns[prefix] || null;
                },
                selectNodes: function (outNode, sPath, inNode) {
                    var xmlNodes = outNode.evaluate(sPath, inNode, this.nsResolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
                    xmlNodes.length = xmlNodes.snapshotLength;
                    return xmlNodes;
                },
                nextNode: function (node, item) { return node.snapshotItem(item); },
                getNodeText: function (node) { return node.textContent; }
            };
        }
        getHttpResponseXML = function (uri) {
            var oXHRResponse;
            if (sap.ui.Device.browser.internet_explorer) {
            	oXHRResponse = new ActiveXObject("Microsoft.XMLHTTP");
            	oXHRResponse.open("GET", uri, false);
            	oXHRResponse.send(null);
            	return oXHRResponse.responseXML;
            } else {
            	oXHRResponse = jQuery.sap.sjax({url: uri, dataType: "xml"});
                if (oXHRResponse.success) {
                    return oXHRResponse.data;
                }
            }
        };
        getAllPropertiesMetadata = function (oMetadata) {
            var oMetadataSchema = {}, oPropertyTypes = {}, oPropertyExtensions = {}, bPropertyExtensions = false,
                i, sNamespace, aEntityTypes, aComplexTypes, oEntityType = {}, j, oProperties = {}, oExtensions = {},
                bExtensions = false, oProperty, l, k, oComplexTypeProp, sPropertyName, sType, oPropExtension, p,
                oReturn;
            for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                oMetadataSchema = oMetadata.dataServices.schema[i];
                if (oMetadataSchema.entityType) {
                    sNamespace = oMetadataSchema.namespace;
                    aEntityTypes = oMetadataSchema.entityType;
                    aComplexTypes = oMetadataSchema.complexType;
                    for (j in aEntityTypes) {
                        if (aEntityTypes.hasOwnProperty(j)) {
                            oEntityType = aEntityTypes[j];
                            oExtensions = {};
                            oProperties = {};
                            if (oEntityType.hasStream && oEntityType.hasStream === "true") {
                                continue;
                            }
                            for (k in oEntityType.property) {
                                oProperty = oEntityType.property[k];
                                if (oProperty.type.substring(0, sNamespace.length) === sNamespace) {
                                    for (l in aComplexTypes) {
                                        if (aComplexTypes[l].name === oProperty.type.substring(sNamespace.length + 1)) {
                                            for (k in aComplexTypes[l].property) {
                                                oComplexTypeProp = aComplexTypes[l].property[k];
                                                oProperties[aComplexTypes[l].name + "/" + oComplexTypeProp.name] = oComplexTypeProp.type;
                                            }
                                        }
                                    }
                                } else {
                                    sPropertyName = oProperty.name;
                                    sType = oProperty.type;
                                    for (p in oProperty.extensions) {
                                        oPropExtension = oProperty.extensions[p];
                                        if ((oPropExtension.name === "display-format") && (oPropExtension.value === "Date")) {
                                            sType = "Edm.Date";
                                        } else {
                                            bExtensions = true;
                                            if (!oExtensions[sPropertyName]) {
                                                oExtensions[sPropertyName] = {};
                                            }
                                            if (oPropExtension.namespace && !oExtensions[sPropertyName][oPropExtension.namespace]) {
                                                oExtensions[sPropertyName][oPropExtension.namespace] = {};
                                            }
                                            oExtensions[sPropertyName][oPropExtension.namespace][oPropExtension.name] = oPropExtension.value;
                                        }
                                    }
                                    oProperties[sPropertyName] = sType;
                                }
                            }
                            if (!oPropertyTypes[sNamespace + "." + oEntityType.name]) {
                                oPropertyTypes[sNamespace + "." + oEntityType.name] = {};
                            }
                            oPropertyTypes[sNamespace + "." + oEntityType.name] = oProperties;
                            if (bExtensions) {
                                if (!oPropertyExtensions[sNamespace + "." + oEntityType.name]) {
                                    bPropertyExtensions = true;
                                }
                                oPropertyExtensions[sNamespace + "." + oEntityType.name] = {};
                                oPropertyExtensions[sNamespace + "." + oEntityType.name] = oExtensions;
                            }
                        }
                    }
                }
            }
            if (bPropertyExtensions) {
                oReturn = { types: oPropertyTypes, extensions: oPropertyExtensions };
            } else {
                oReturn = { types: oPropertyTypes };
            }
            return oReturn;
        };
        setEdmTypes = function (aPropertyValues, oProperties, sTarget, oSchema) {
            var pValueIndex, oPropertyValue, sEdmType = '';
            for (pValueIndex in aPropertyValues) {
                if (aPropertyValues.hasOwnProperty(pValueIndex)) {
                    if (aPropertyValues[pValueIndex]) {
                        oPropertyValue = aPropertyValues[pValueIndex];
                        if (oPropertyValue.Value && oPropertyValue.Value.Path) {
                            sEdmType = getEdmType(oPropertyValue.Value.Path, oProperties, sTarget, oSchema);
                            if (sEdmType) {
                                aPropertyValues[pValueIndex].EdmType = sEdmType;
                            }
                            continue;
                        }
                        if (oPropertyValue.Path) {
                            sEdmType = getEdmType(oPropertyValue.Path, oProperties, sTarget, oSchema);
                            if (sEdmType) {
                                aPropertyValues[pValueIndex].EdmType = sEdmType;
                            }
                            continue;
                        }
                        if (oPropertyValue.Facets) {
                            aPropertyValues[pValueIndex].Facets = setEdmTypes(oPropertyValue.Facets, oProperties, sTarget, oSchema);
                            continue;
                        }
                        if (oPropertyValue.Data) {
                            aPropertyValues[pValueIndex].Data = setEdmTypes(oPropertyValue.Data, oProperties, sTarget, oSchema);
                            continue;
                        }
                        if (pValueIndex === "Data") {
                            aPropertyValues.Data = setEdmTypes(oPropertyValue, oProperties, sTarget, oSchema);
                            continue;
                        }
                        if (oPropertyValue.Value && oPropertyValue.Value.Apply) {
                            aPropertyValues[pValueIndex].Value.Apply.Parameters = setEdmTypes(oPropertyValue.Value.Apply.Parameters, oProperties, sTarget, oSchema);
                            continue;
                        }
                        if (oPropertyValue.Value && oPropertyValue.Type && (oPropertyValue.Type === "Path")) {
                            sEdmType = getEdmType(oPropertyValue.Value, oProperties, sTarget, oSchema);
                            if (sEdmType) {
                                aPropertyValues[pValueIndex].EdmType = sEdmType;
                            }
                        }
                    }
                }
            }
            return aPropertyValues;
        };
        getEdmType = function (sPath, oProperties, sTarget, oSchema) {
            var pIndex;
            if ((sPath.charAt(0) === "@") && (sPath.indexOf(oSchema.Alias) === 1)) {
                sPath = sPath.slice(oSchema.Alias.length + 2);
            }
            if (sPath.indexOf("/") >= 0) {
                if (oProperties[sPath.slice(0, sPath.indexOf("/"))]) {
                    sTarget = sPath.slice(0, sPath.indexOf("/"));
                    sPath = sPath.slice(sPath.indexOf("/") + 1);
                }
            }
            for (pIndex in oProperties[sTarget]) {
                if (oProperties[sTarget].hasOwnProperty(pIndex)) {
                    if (sPath === pIndex) {
                        return oProperties[sTarget][pIndex];
                    }
                }
            }
        };
        getPropertyValueAttributes = function (documentNode) {
            var attrName = "", attrValue = "", i, propertyValueAttributes = {};
            for (i = 0; i < documentNode.attributes.length; i += 1) {
                if ((documentNode.attributes[i].name !== "Property") && (documentNode.attributes[i].name !== "Term")) {
                    attrName = documentNode.attributes[i].name;
                    attrValue = documentNode.attributes[i].value;
                }
            }
            if (attrName.length > 0) {
                propertyValueAttributes[attrName] = replaceWithAlias(attrValue);
            }
            return propertyValueAttributes;
        };
        getSimpleNodeValue = function (xmlDoc, documentNode) {
            var oValue = {}, stringValueNodes, stringValueNode, pathValueNodes, pathValueNode, applyValueNodes, applyValueNode;
            if (documentNode.hasChildNodes()) {
                stringValueNodes = xPath.selectNodes(xmlDoc, "./d:String", documentNode);
                if (stringValueNodes.length > 0) {
                    stringValueNode = xPath.nextNode(stringValueNodes, 0);
                    oValue["String"] = xPath.getNodeText(stringValueNode);
                } else {
                    pathValueNodes = xPath.selectNodes(xmlDoc, "./d:Path", documentNode);
                    if (pathValueNodes.length > 0) {
                        pathValueNode = xPath.nextNode(pathValueNodes, 0);
                        oValue["Path"] = xPath.getNodeText(pathValueNode);
                    } else {
                        applyValueNodes = xPath.selectNodes(xmlDoc, "./d:Apply", documentNode);
                        if (applyValueNodes.length > 0) {
                            applyValueNode = xPath.nextNode(applyValueNodes, 0);
                            oValue["Apply"] = getApplyFunctions(xmlDoc, applyValueNode);
                        }
                    }
                }
            }
            return oValue;
        };
        getPropertyValue = function (xmlDoc, documentNode, target) {
            var propertyValue = {}, recordNodes, recordNodeCnt, nodeIndex, recordNode, propertyValues, urlValueNodes, urlValueNode,
                pathNode, oPath = {}, annotationNodes, annotationNode, nodeIndexValue, termValue, collectionNodes;
            if (documentNode.hasChildNodes()) {
                recordNodes = xPath.selectNodes(xmlDoc, "./d:Record | ./d:Collection/d:Record | ./d:Collection/d:If/d:Record", documentNode);
                if (recordNodes.length) {
                    recordNodeCnt = 0;
                    for (nodeIndex = 0; nodeIndex < recordNodes.length; nodeIndex += 1) {
                        recordNode = xPath.nextNode(recordNodes, nodeIndex);
                        propertyValues = getPropertyValues(xmlDoc, recordNode, target);
                        if (recordNode.getAttribute("Type")) {
                            propertyValues["RecordType"] = replaceWithAlias(recordNode.getAttribute("Type"));
                        }
                        if (recordNodeCnt === 0) {
                            if (recordNode.nextElementSibling || (recordNode.parentNode.nodeName === "Collection") || (recordNode.parentNode.nodeName === "If")) {
                                propertyValue = [];
                                propertyValue.push(propertyValues);
                            } else {
                                propertyValue = propertyValues;
                            }
                        } else {
                            propertyValue.push(propertyValues);
                        }
                        recordNodeCnt += 1;
                    }
                } else {
                    urlValueNodes = xPath.selectNodes(xmlDoc, "./d:UrlRef", documentNode);
                    if (urlValueNodes.length > 0) {
                        for (nodeIndex = 0; nodeIndex < urlValueNodes.length; nodeIndex += 1) {
                            urlValueNode = xPath.nextNode(urlValueNodes, nodeIndex);
                            propertyValue["UrlRef"] = getSimpleNodeValue(xmlDoc, urlValueNode);              		
                        }
                    } else {
                        urlValueNodes = xPath.selectNodes(xmlDoc, "./d:Url", documentNode);
                        if (urlValueNodes.length > 0) {
                            for (nodeIndex = 0; nodeIndex < urlValueNodes.length; nodeIndex += 1) {
                                urlValueNode = xPath.nextNode(urlValueNodes, nodeIndex);
                                propertyValue["Url"] = getSimpleNodeValue(xmlDoc, urlValueNode);
                            }
                        } else {
                            collectionNodes = xPath.selectNodes(xmlDoc, "./d:Collection/d:AnnotationPath | ./d:Collection/d:PropertyPath", documentNode);
                            if (collectionNodes.length > 0) {
                                propertyValue = [];
                                for (nodeIndex = 0; nodeIndex < collectionNodes.length; nodeIndex += 1) {
                                    pathNode = xPath.nextNode(collectionNodes, nodeIndex);
                                    oPath = {};
                                    oPath[pathNode.nodeName] = xPath.getNodeText(pathNode);
                                    propertyValue.push(oPath);
                                }
                            } else {
                                propertyValue = getPropertyValueAttributes(documentNode);
                                annotationNodes = xPath.selectNodes(xmlDoc, "./d:Annotation", documentNode);
                                annotationNode = {};
                                for (nodeIndexValue = 0; nodeIndexValue < annotationNodes.length; nodeIndexValue += 1) {
                                    annotationNode = xPath.nextNode(annotationNodes, nodeIndexValue);
                                    if (annotationNode.hasChildNodes() === false) {
                                        termValue = replaceWithAlias(annotationNode.getAttribute("Term"));
                                        propertyValue[termValue] = getPropertyValueAttributes(annotationNode);
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                propertyValue = getPropertyValueAttributes(documentNode);
            }
            return propertyValue;
        };
        getPropertyValues = function (xmlDoc, documentNode, target) {
            var properties = {}, annotationNode = {}, annotationNodes, nodeIndexValue, termValue, propertyValueNodes, nodeIndex,
                propertyValueNode, propertyName, applyNodes, applyNode, applyNodeIndex;
            annotationNodes = xPath.selectNodes(xmlDoc, "./d:Annotation", documentNode);
            for (nodeIndexValue = 0; nodeIndexValue < annotationNodes.length; nodeIndexValue += 1) {
                annotationNode = xPath.nextNode(annotationNodes, nodeIndexValue);
                if (annotationNode.hasChildNodes() === false) {
                    termValue = replaceWithAlias(annotationNode.getAttribute("Term"));
                    properties[termValue] = getPropertyValueAttributes(annotationNode);
                }
            }
            propertyValueNodes = xPath.selectNodes(xmlDoc, "./d:PropertyValue", documentNode);
            if (propertyValueNodes.length > 0) {
                for (nodeIndex = 0; nodeIndex < propertyValueNodes.length; nodeIndex += 1) {
                    propertyValueNode = xPath.nextNode(propertyValueNodes, nodeIndex);
                    propertyName = propertyValueNode.getAttribute("Property");
                    properties[propertyName] = getPropertyValue(xmlDoc, propertyValueNode, target);
                    applyNodes = xPath.selectNodes(xmlDoc, "./d:Apply", propertyValueNode);
                    applyNode = null;
                    for (applyNodeIndex = 0; applyNodeIndex < applyNodes.length; applyNodeIndex += 1) {
                        applyNode = xPath.nextNode(applyNodes, applyNodeIndex);
                        if (applyNode) {
                            properties[propertyName] = {};
                            properties[propertyName]['Apply'] = getApplyFunctions(xmlDoc, applyNode);
                        }
                    }
                }
            } else {
                properties = getPropertyValue(xmlDoc, documentNode, target);

            }
            return properties;
        };
        getApplyFunctions = function (xmlDoc, applyNode) {
            var apply = {}, parameterNodes, paraNode = null, parameters = [], i;
            parameterNodes = xPath.selectNodes(xmlDoc, "./d:*", applyNode);
            for (i = 0; i < parameterNodes.length; i += 1) {
                paraNode = xPath.nextNode(parameterNodes, i);
                switch (paraNode.nodeName) {
                case "Apply":
                    parameters.push({"Type": "Apply", "Value": getApplyFunctions(xmlDoc, paraNode)});
                    break;
                case "LabeledElement":
                    parameters.push({"Name": paraNode.getAttribute("Name"), "Value": getSimpleNodeValue(xmlDoc, paraNode)});
                    break;
                default:
                    parameters.push({"Type": paraNode.nodeName, "Value": xPath.getNodeText(paraNode)});
                    break;
                }
            }
            apply['Name'] = applyNode.getAttribute('Function');
            apply['Parameters'] = parameters;
            return apply;
        };
        isNavProperty = function (sEntityType, sPathValue, metadata) {
            var oMetadataSchema, i, namespace, aEntityTypes, j, k;
            for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                oMetadataSchema = oMetadata.dataServices.schema[i];
                if (oMetadataSchema.entityType) {
                    namespace = oMetadataSchema.namespace + ".";
                    aEntityTypes = oMetadataSchema.entityType;
                    for (k = aEntityTypes.length - 1; k >= 0; k -= 1) {
                        if (namespace + aEntityTypes[k].name === sEntityType && aEntityTypes[k].navigationProperty) {
                            for (j = 0; j < aEntityTypes[k].navigationProperty.length; j += 1) {
                                if (aEntityTypes[k].navigationProperty[j].name === sPathValue) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
            return false;
        };

        replaceWithAlias = function (sValue) {
            for (sAlias in oAlias) {
                if (oAlias.hasOwnProperty(sAlias)) {
                    if (sValue.indexOf(sAlias + ".") >= 0) {
                        sValue = sValue.replace(sAlias + ".", oAlias[sAlias] + ".");
                        return sValue;
                    }
                }
            }
            return sValue;
        };
        if (this.initialized[sAnnotationUri]) {
            return this.initialized[sAnnotationUri];
        }
        // Read Annotation File
        xmlDoc = getHttpResponseXML(sAnnotationUri);
        //Set XPath namespace
        xmlDoc = xPath.setNameSpace(xmlDoc);
        //Schema Alias
        schemaNodes = xPath.selectNodes(xmlDoc, "//d:Schema", xmlDoc);
        for (i = 0; i < schemaNodes.length; i += 1) {
            schemaNode = xPath.nextNode(schemaNodes, i);
            oSchema.Alias = schemaNode.getAttribute("Alias");
            oSchema.Namespace = schemaNode.getAttribute("Namespace");
        }
        //Alias nodes
        refNodes = xPath.selectNodes(xmlDoc, "//edmx:Reference", xmlDoc);
        for (i = 0; i < refNodes.length; i += 1) {
            refNode = xPath.nextNode(refNodes, i);
            aliasNodes = xPath.selectNodes(xmlDoc, "./edmx:Include", refNode);
            if (aliasNodes && aliasNodes.length > 0) {
                aliasNode = xPath.nextNode(aliasNodes, 0);
                if (aliasNode.getAttribute("Alias")) {
                    oAlias[aliasNode.getAttribute("Alias")] = aliasNode.getAttribute("Namespace");
                } else {
                    oAlias[aliasNode.getAttribute("Namespace")] = aliasNode.getAttribute("Namespace");
                }
            }
            annoNodes = xPath.selectNodes(xmlDoc, "./edmx:IncludeAnnotations", refNode);
            if (annoNodes.length > 0) {
                for (j = 0; j < annoNodes.length; j += 1) {
                    annoNode = xPath.nextNode(annoNodes, j);
                    if (annoNode.getAttribute("TargetNamespace")) {
                        sAnnoNameSpace = annoNode.getAttribute("TargetNamespace");
                        if (!oAnnotations[sAnnoNameSpace]) {
                            oAnnotations[sAnnoNameSpace] = {};
                        }
                        oAnnotations[sAnnoNameSpace][annoNode.getAttribute("TermNamespace")] = refNode.getAttribute("Uri");
                    } else {
                        oAnnotations[annoNode.getAttribute("TermNamespace")] = refNode.getAttribute("Uri");
                    }
                }
            }
        }
        if (oAnnotations) {
            mappingList.annotationReferences = oAnnotations;
        }
        mappingList.aliasDefinitions = oAlias;
        //Term nodes
        termNodes = xPath.selectNodes(xmlDoc, "//d:Term", xmlDoc);
        if (termNodes.length > 0) {
            oTerms = {};
            for (nodeIndex = 0; nodeIndex < termNodes.length; nodeIndex += 1) {
                termNode = xPath.nextNode(termNodes, nodeIndex);
                sTermType = replaceWithAlias(termNode.getAttribute("Type"));
                oTerms["@" + oSchema.Alias + "." + termNode.getAttribute("Name")] = sTermType;
            }
            mappingList.termDefinitions = oTerms;
        }
        //Metadata information of all properties
        oMetadataProperties = getAllPropertiesMetadata(oMetadata);
        if (oMetadataProperties.extensions) {
            mappingList.propertyExtensions = oMetadataProperties.extensions;
        }
        //Annotations
        annotationNodes = xPath.selectNodes(xmlDoc, "//d:Annotations ", xmlDoc);
        for (nodeIndex = 0; nodeIndex < annotationNodes.length; nodeIndex += 1) {
            annotationNode = xPath.nextNode(annotationNodes, nodeIndex);
            if (annotationNode.hasChildNodes() === false) {
                continue;
            }
            annotationTarget = annotationNode.getAttribute("Target");
            annotationNamespace = annotationTarget.split(".")[0];
            if (annotationNamespace && oAlias[annotationNamespace]) {
                annotationTarget = annotationTarget.replace(new RegExp(annotationNamespace, ""), oAlias[annotationNamespace]);
            }
            annotation = annotationTarget;
            propertyAnnotation = null;
            if (annotationTarget.indexOf("/") > 0) {
                annotation = annotationTarget.split("/")[0];
                propertyAnnotation = annotationTarget.replace(annotation + "/", "");
            }
            if (!mappingList[annotation]) {
                mappingList[annotation] = {};
            }
            // --- Value annotation of complex types. ---
            if (propertyAnnotation) {
                if (!mappingList.propertyAnnotations) {
                    mappingList.propertyAnnotations = {};
                }
                if (!mappingList.propertyAnnotations[annotation]) {
                    mappingList.propertyAnnotations[annotation] = {};
                }
                mappingList.propertyAnnotations[annotation][propertyAnnotation] = {};
                propertyAnnotationNodes = xPath.selectNodes(xmlDoc, "./d:Annotation", annotationNode);
                for (nodeIndexValue = 0; nodeIndexValue < propertyAnnotationNodes.length; nodeIndexValue += 1) {
                    propertyAnnotationNode = xPath.nextNode(propertyAnnotationNodes, nodeIndexValue);
                    if (propertyAnnotationNode.hasChildNodes() === false) {
                        sTermValue = replaceWithAlias(propertyAnnotationNode.getAttribute("Term"));
                        mappingList.propertyAnnotations[annotation][propertyAnnotation][sTermValue] = getPropertyValueAttributes(propertyAnnotationNode);
                    }
                }
                // --- Annotations ---
            } else {
                targetAnnotation = annotation.replace(oAlias[annotationNamespace], annotationNamespace);
                propertyAnnotationNodes = xPath.selectNodes(xmlDoc, "./d:Annotation", annotationNode);
                for (nodeIndexAnnotation = 0; nodeIndexAnnotation < propertyAnnotationNodes.length; nodeIndexAnnotation += 1) {
                    propertyAnnotationNode = xPath.nextNode(propertyAnnotationNodes, nodeIndexAnnotation);
                    annotationQualifier = propertyAnnotationNode.getAttribute("Qualifier");
                    annotationTerm = replaceWithAlias(propertyAnnotationNode.getAttribute("Term"));
                    if (annotationQualifier) {
                        annotationTerm += "#" + annotationQualifier;
                    }
                    valueAnnotation = getPropertyValue(xmlDoc, propertyAnnotationNode, targetAnnotation);
                    valueAnnotation = setEdmTypes(valueAnnotation, oMetadataProperties.types, annotation, oSchema);
                    mappingList[annotation][annotationTerm] = valueAnnotation;
                }
                // --- Setup of Expand nodes. ---                         
                expandNodes = xPath.selectNodes(xmlDoc, "//d:Annotations[contains(@Target, '" + targetAnnotation + "')]//d:PropertyValue[contains(@Path, '/')]//@Path", xmlDoc);
                for (i = 0; i < expandNodes.length; i += 1) {
                    expandNode = xPath.nextNode(expandNodes, i);
                    path = expandNode.value;
                    if (mappingList.propertyAnnotations) {
                        if (mappingList.propertyAnnotations[annotation]) {
                            if (mappingList.propertyAnnotations[annotation][path]) {
                                continue;
                            }
                        }
                    }
                    pathValues = path.split('/');
                    if (isNavProperty(annotation, pathValues[0], oMetadata)) {
                        if (!mappingList.expand) {
                            mappingList.expand = {};
                        }
                        if (!mappingList.expand[annotation]) {
                            mappingList.expand[annotation] = {};
                        }
                        mappingList.expand[annotation][pathValues[0]] = pathValues[0];
                    }
                }
                expandNodesApplFunc = xPath.selectNodes(xmlDoc, "//d:Annotations[contains(@Target, '" + targetAnnotation + "')]//d:Path[contains(., '/')]", xmlDoc);
                for (i = 0; i < expandNodesApplFunc.length; i += 1) {
                    expandNode = xPath.nextNode(expandNodesApplFunc, i);
                    path = xPath.getNodeText(expandNode);
                    if (mappingList.propertyAnnotations[annotation]) {
                        if (mappingList.propertyAnnotations[annotation][path]) {
                            continue;
                        }
                    }
                    if (!mappingList.expand) {
                        mappingList.expand = {};
                    }
                    if (!mappingList.expand[annotation]) {
                        mappingList.expand[annotation] = {};
                    }
                    pathValues = path.split('/');
                    if (isNavProperty(annotation, pathValues[0], oMetadata)) {
                        if (!mappingList.expand) {
                            mappingList.expand = {};
                        }
                        if (!mappingList.expand[annotation]) {
                            mappingList.expand[annotation] = {};
                        }
                        mappingList.expand[annotation][pathValues[0]] = pathValues[0];
                    }
                }
            }
            this.initialized[sAnnotationUri] = mappingList;
        }
        return mappingList;
    };
}());
}; // end of sap/ushell/components/factsheet/annotation/Mapping.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.controls.PictureTileRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
*/

jQuery.sap.declare("sap.ushell.components.factsheet.controls.PictureTileRenderer");
jQuery.sap.require('sap.m.CustomTileRenderer'); // unlisted dependency retained


/**
 * @class PictureTile renderer. 
 * @static
 */

sap.ushell.components.factsheet.controls.PictureTileRenderer = sap.ui.core.Renderer.extend(sap.m.CustomTileRenderer);

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */

 sap.ushell.components.factsheet.controls.PictureTileRenderer.render = function(oRm, oControl) {

	jQuery.sap.log.debug("PictureTileRenderer :: begin rendering");
	
	oRm.write("<div ");
	oRm.writeControlData(oControl);

	oRm.addClass("sapCaUiPictureTile");
	oRm.writeClasses();

	oRm.write(">");
	
	
	oRm.write("<div");
	oRm.addClass("sapCaUiPictureTileContent");
	oRm.writeClasses();
	oRm.write(">");

	oRm.write("<div id='"+oControl.getId()+"-wrapper'>");
	
	oRm.renderControl(oControl._oDeletePictureButton);
	
	this._renderContent(oRm, oControl);
	oRm.write("</div>");
	
	oRm.write("</div></div>");
};

sap.ushell.components.factsheet.controls.PictureTileRenderer._renderContent = function(rm, oTile) {
	rm.renderControl(oTile.getContent());
};

}; // end of sap/ushell/components/factsheet/controls/PictureTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.controls.PictureViewerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
*/

jQuery.sap.declare("sap.ushell.components.factsheet.controls.PictureViewerRenderer");

jQuery.sap.require('sap.m.TileContainerRenderer'); // unlisted dependency retained



/**
 * @class PictureViewer renderer.
 * @static
 */
sap.ushell.components.factsheet.controls.PictureViewerRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ushell.components.factsheet.controls.PictureViewerRenderer.render = function(oRm, oControl) {
	// write the HTML into the render manager	
	jQuery.sap.log.debug("PictureViewerRenderer :: begin rendering");

	sap.m.TileContainerRenderer.render(oRm, oControl);

    jQuery.sap.log.debug("PictureViewerRenderer :: end rendering");
};

}; // end of sap/ushell/components/factsheet/controls/PictureViewerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.factory.ThingInspector') ) {
//Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview This file contains an annotation parser for fact sheets.
 */

(function () {
    "use strict";
    /*global sap, jQuery, $, setTimeout, window, console, history */

    jQuery.sap.declare("sap.ushell.components.factsheet.factory.ThingInspector");

    sap.ushell.components.factsheet.factory = (function () {

        jQuery.sap.require("sap.suite.ui.commons.UnifiedThingInspector");
        jQuery.sap.require("sap.ushell.components.factsheet.annotation.Mapping");
        jQuery.sap.require("sap.ui.vbm.library");

        var oTI, oMapping = {}, getServiceFromUri, getEntitySetFromUri, getEntitySetFromType, getEntityType, getAssociation,
            getNavEntitySet, getAssociationMultiplicity, getExpand, propertyPartsWithStrings, newJSONModels = {}, newModelValue,
            dataField, labelBinding, getEntityKeyFromUri, getKeyProperty, navigationBinding, columnHAlign, showHTML, oShortDecimalFormat,
            thingInspectorFactory, searchObj, fieldBinding, formLayoutFactory, facetFactory, itemListFactory, oLocale,
            chartControlFactory, getTeaserTileHeight, getFieldSumsByPriority, kpiTileFactory, getTIDescription, getImportanceOfRecord,
            FACTSHEET = "displayFactSheet";

        // Until a formatter is available to short numbers for the KPIs the following workaround does this
        // Begin workaround
        jQuery.sap.require("sap.ui.base.Object");
        jQuery.sap.require("sap.ui.core.format.NumberFormat");
        
        oLocale = sap.ui.getCore().getConfiguration().getFormatSettings().getFormatLocale();
        if (sap.ui.getCore().getConfiguration().getLanguage() === "ZH") {
            oLocale = new sap.ui.core.Locale("zh_CN");
        }

        oShortDecimalFormat = sap.ui.core.LocaleData.getInstance(oLocale)._get("decimalFormat-short");

        function isNegativeValue(value) {
            return value < 0 ? true : false;
        }

        function toPositiveNumberWithoutDecimals(value) {
            var result = Number(value).toFixed(0);
            if (isNegativeValue(value)) {
                result = Number(result) * -1;
            }
            return result;
        }

        function toNegativeValue(value) {
            return Number(value) * -1;
        }

        function toShortValue(value) {
            var shortFormat = "", shortValue = "", shortNumberAsString = "", indexOfZero = 0, result = "", sourceType,
                positiveNumberWithoutDecimals, numberOfZerosInPattern, numberPart, abbreviationPart, i;
            positiveNumberWithoutDecimals = toPositiveNumberWithoutDecimals(value);
            sourceType = Math.pow(10, positiveNumberWithoutDecimals.toString().length - 1);
            if (oShortDecimalFormat === null) {
                return sap.ui.core.format.NumberFormat.getIntegerInstance().format(value);
            }
            if (oShortDecimalFormat[sourceType + "-one"] === null
                    || oShortDecimalFormat[sourceType + "-one"] === undefined
                    || oShortDecimalFormat[sourceType + "-one"] === "0") {
                return sap.ui.core.format.NumberFormat.getIntegerInstance().format(value);
            }

            shortFormat = oShortDecimalFormat[sourceType + "-one"];
            numberOfZerosInPattern = shortFormat.match(/0/g).length;

            numberPart = shortFormat.substring(0, shortFormat.lastIndexOf("0") + 1);
            abbreviationPart = shortFormat.substring(shortFormat.lastIndexOf("0") + 1, shortFormat.length);
            abbreviationPart = abbreviationPart.replace(/'.'/g, ".");

            shortValue = numberPart;
            shortNumberAsString = positiveNumberWithoutDecimals.toString();

            for (i = 0; i < numberOfZerosInPattern; i += 1) {
                indexOfZero = shortValue.indexOf("0", indexOfZero);
                if (indexOfZero === -1) {
                    break;
                }
                shortValue = shortValue.substring(0, indexOfZero) + shortNumberAsString[i] + shortValue.substring(indexOfZero + 1);
                indexOfZero += 1;
            }

            if (isNegativeValue(value)) {
                shortValue = toNegativeValue(shortValue);
            }
            result = sap.ui.core.format.NumberFormat.getFloatInstance().format(shortValue);
            result = result + abbreviationPart;
            return result;
        }

        function kpiValueFormatter(value, fractionDigits) {
            var result, oRegExp, sDigits, oNumberFormatter;
            if (!value) {
                return "";
            }
            oRegExp = new RegExp(sap.ui.core.format.NumberFormat.oDefaultFloatFormat.groupingSeparator,"g");
            if (fractionDigits >= 0) {
                oNumberFormatter = sap.ui.core.format.NumberFormat.getFloatInstance({minFractionDigits: fractionDigits, maxFractionDigits: fractionDigits}, oLocale);
                result = oNumberFormatter.format(value);
            } else {
                oNumberFormatter = sap.ui.core.format.NumberFormat.getFloatInstance({minFractionDigits: 0, maxFractionDigits: 99}, oLocale);
                result = oNumberFormatter.format(value);
            }
            sDigits = result.replace(/[\D]/g, "");
            if (sDigits && sDigits.length > 6) {
                value = value.replace(oRegExp, "");
                return (toShortValue(value));
            } else {
                return result;
            }
        }
        //End workaround
        // HANA Live
        function fnChange() {
            var sProperty, sPropertyValue, oUrl = "", sPath, oModel, aUrl, aParameters, i, j, sNewValue, sPropertyName, sValueFormat;
            sPath = this.getElementBinding().sPath.split("/")[1];
            oModel = this.getModel();
            aUrl = this.mBindingInfos.value.parameters;
            aParameters = this.mBindingInfos.value.parts;

            for (i = 0; i < aUrl.length; i += 1) {
                oUrl = oUrl + aUrl[i].string;
            }
            for (j = 0; j < aParameters.length; j += 1) {
                sProperty = aParameters[j].path;
                sPropertyName = "{" + sProperty + "}";
                sPropertyValue = oModel.oData[sPath][sProperty];
                oUrl = oUrl.replace(sPropertyName, sPropertyValue);
            }
            sNewValue = newModelValue(oUrl);
            if ($.isNumeric(sNewValue)) {
                sValueFormat = this.mBindingInfos.value.parts.filter(function (obj) {
                    return (obj.path === sProperty);
                });
                sNewValue = kpiValueFormatter(sNewValue, sValueFormat[0].type.oFormatOptions.maxFractionDigits);
                this.setDoubleFontSize(true);
            }
            this.setValue(sNewValue);
            this.getElementBinding().detachChange(fnChange);
        }

        getTIDescription = function () {
            var sTIDescription = "";
            if (oTI.getName() && oTI.getDescription()) {
                sTIDescription = oTI.getName() + ", " + oTI.getDescription();
            } else if (oTI.getName() && !oTI.getDescription()) {
                sTIDescription = oTI.getName();
            } else if (!oTI.getName() && oTI.getDescription()) {
                sTIDescription = oTI.getDescription();
            }
            return sTIDescription;
        };

        getServiceFromUri = function (sUri) {
            var aUriParts, sService, i;
            aUriParts = sUri.slice(1).split("/");
            sService = "/";
            for (i = 0; i < aUriParts.length; i += 1) {
                if ((aUriParts[i].indexOf("(") > 0) && (aUriParts[i].indexOf("sid(") < 0)) {
                    break;
                } else {
                    sService += aUriParts[i] + "/";
                }
            }
            return sService;
        };
        getEntitySetFromUri = function (sUri, oModel) {
            var sEntitySet, sEntityUri, aServiceParts, sNavProperty;
            sEntityUri = sUri.slice(oModel.sServiceUrl.length + 1);
            if (sEntityUri.indexOf("/") >= 0) {
                aServiceParts = sEntityUri.split("/");
                sNavProperty = aServiceParts[aServiceParts.length];
                sEntitySet = aServiceParts[aServiceParts.length - 1];
                if (sEntitySet.indexOf("(") >= 0) {
                    sEntitySet = sEntitySet.slice(sEntitySet.indexOf("("));
                }
                sEntitySet = this.getNavEntitySet(sEntitySet, sNavProperty, oModel.getMetadata());
            } else {
                if (sEntityUri.indexOf("(") >= 0) {
                    sEntitySet = sEntityUri.slice(0, sEntityUri.indexOf("("));
                } else {
                    if (sEntityUri.indexOf("?") >= 0) {
                        sEntitySet = sEntityUri.slice(0, sEntityUri.indexOf("?"));
                    } else {
                        sEntitySet = sEntityUri;
                    }
                }
            }
            return sEntitySet;
        };
        getEntityKeyFromUri = function (sUri, oModel) {
            var sEntityUri, sKey = "", oMetadata, sEntityType;
            sEntityUri = sUri.slice(oModel.sServiceUrl.length + 1);
            if (sEntityUri.indexOf("(") >= 0) {
                sKey = sEntityUri.slice(sEntityUri.indexOf("(") + 1, sEntityUri.indexOf(")"));
                if (sKey.indexOf("=") <= 0) {
                    // There is just one key property and the shortened notation was used, get name of the key property
                    oMetadata = oModel.getServiceMetadata();
                    sEntityType = getEntityType(getEntitySetFromUri(sUri, oModel), oMetadata);
                    sKey = getKeyProperty(sEntityType, oMetadata) + "=" + sKey;
                }
            }
            return sKey;
        };
        getKeyProperty = function (sEntityType, oMetadata) {
            var i, metadataSchema, j;
            for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                metadataSchema = oMetadata.dataServices.schema[i];
                if (metadataSchema.namespace === sEntityType.slice(0, sEntityType.lastIndexOf("."))) {
                    for (j = 0; j < metadataSchema.entityType.length; j += 1) {
                        if (metadataSchema.entityType[j].name === sEntityType.slice(sEntityType.lastIndexOf(".") + 1)) {
                            return metadataSchema.entityType[j].key.propertyRef[0].name;
                        }
                    }
                }
            }
        };

        getEntitySetFromType = function (sEntityType, oMetadata) {
            var i, metadataSchema, aEntitySets, j;
            for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                metadataSchema = oMetadata.dataServices.schema[i];
                if (metadataSchema.entityContainer) {
                    aEntitySets = metadataSchema.entityContainer[0].entitySet;
                    for (j = aEntitySets.length - 1; j >= 0; j -= 1) {
                        if (aEntitySets[j].entityType === sEntityType) {
                            return aEntitySets[j].name;
                        }
                    }
                }
            }
        };
        getEntityType = function (sEntitySet, oMetadata, bWithoutNamespace) {
            var i, metadataSchema, aEntitySets, j, sReturn;
            for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                metadataSchema = oMetadata.dataServices.schema[i];
                if (metadataSchema.entityContainer) {
                    aEntitySets = metadataSchema.entityContainer[0].entitySet;
                    for (j = aEntitySets.length - 1; j >= 0; j -= 1) {
                        if (aEntitySets[j].name === sEntitySet) {
                            if (bWithoutNamespace) {
                                sReturn = aEntitySets[j].entityType.slice(metadataSchema.namespace.length + 1);
                            } else {
                                sReturn = aEntitySets[j].entityType;
                            }
                            return sReturn;
                        }
                    }
                }
            }
        };
        getAssociation = function (sEntityType, sNavProperty, oMetadata) {
            var aNsEntityType, i, metadataSchema, sNameSpace, k, j, oNavProperty;
            aNsEntityType = sEntityType.split(".");
            for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                metadataSchema = oMetadata.dataServices.schema[i];
                sNameSpace = aNsEntityType[0];
                if (aNsEntityType.length > 2) {
                    for (k = 1; k < aNsEntityType.length - 1; k += 1) {
                        sNameSpace += "." + aNsEntityType[k];
                    }
                }
                if (metadataSchema.namespace === sNameSpace) {
                    for (j = 0; j < metadataSchema.entityType.length; j += 1) {
                        if (metadataSchema.entityType[j].name === aNsEntityType[aNsEntityType.length - 1]) {
                            if (metadataSchema.entityType[j].navigationProperty) {
                                for (k = 0; k < metadataSchema.entityType[j].navigationProperty.length; k += 1) {
                                    if (metadataSchema.entityType[j].navigationProperty[k].name === sNavProperty) {
                                        oNavProperty = metadataSchema.entityType[j].navigationProperty[k];
                                        return {name: oNavProperty.relationship, toRole: oNavProperty.toRole};
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
        getNavEntitySet = function (sEntitySet, sNavProperty, oMetadata) {
            var sEntityType, termTargetType, oAssociation, i, metadataSchema, j, sAssociationSet, k;
            sEntityType = getEntityType(sEntitySet, oMetadata);
            if (sNavProperty.charAt(0) === "@") {
                if (oMapping.termDefinitions && oMapping.termDefinitions[sNavProperty]) {
                    termTargetType = oMapping.termDefinitions[sNavProperty];
                    if (termTargetType.indexOf("Collection") >= 0) {
                        termTargetType = termTargetType.slice(termTargetType.indexOf("(") + 1, termTargetType.indexOf(")"));
                    }
                    return getEntitySetFromType(termTargetType, oMetadata);
                }
            } else {
                oAssociation = getAssociation(sEntityType, sNavProperty, oMetadata);
                if (oAssociation) {
                    for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                        metadataSchema = oMetadata.dataServices.schema[i];
                        if (metadataSchema.entityContainer && metadataSchema.entityContainer[0].associationSet) {
                            for (j = metadataSchema.entityContainer[0].associationSet.length - 1; j >= 0; j -= 1) {
                                sAssociationSet = metadataSchema.entityContainer[0].associationSet[j];
                                if (sAssociationSet.association === oAssociation.name) {
                                    for (k = 0; k <  sAssociationSet.end.length; k += 1) {
                                        if (sAssociationSet.end[k].role === oAssociation.toRole) {
                                            return sAssociationSet.end[k].entitySet;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
        getAssociationMultiplicity = function (sEntitySet, sNavProperty, oMetadata) {
            var sEntityType, oAssociation, i, metadataSchema, j, sAssociation, k;
            sEntityType = getEntityType(sEntitySet, oMetadata);
            oAssociation = getAssociation(sEntityType, sNavProperty, oMetadata);
            if (oAssociation) {
                for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                    metadataSchema = oMetadata.dataServices.schema[i];
                    for (j = metadataSchema.association.length - 1; j >= 0; j -= 1) {
                        sAssociation = metadataSchema.association[j];
                        if (metadataSchema.namespace + "." + sAssociation.name === oAssociation.name) {
                            for (k = 0; k <  sAssociation.end.length; k += 1) {
                                if (sAssociation.end[k].role.substr(0, 7) === "ToRole_") {
                                    return sAssociation.end[k].multiplicity;
                                }
                            }
                        }
                    }
                }
            } else {
                jQuery.sap.log.error("\"" + sNavProperty + "\" wasn't found in the metadata document. Check whether the corresponding search connector is active.");
                return 0;
            }
        };
        getExpand = function (sEntitySet, oMetadata) {
            var oExpand, oExpandEntities, aExpand, elem;
            oExpand = {};
            if (oMapping.expand) {
                if (oMapping.expand[getEntityType(sEntitySet, oMetadata)]) {
                    oExpandEntities = oMapping.expand[getEntityType(sEntitySet, oMetadata)];
                    aExpand = [];
                    for (elem in oExpandEntities) {
                        if (oExpandEntities.hasOwnProperty(elem)) {
                            aExpand.push(oExpandEntities[elem]);
                        }
                    }
                    oExpand.expand = aExpand.join(", ");
                }
            }
            return oExpand;
        };

        /* UI Renderer */

        propertyPartsWithStrings = function (aParts, oFormatter) {
            var oBinding = {}, j;
            oBinding.parts = [];
            oBinding.parameters = [];
            for (j = aParts.length - 1; j >= 0; j -= 1) {
                if (aParts[j].Type === "Path") {
                    if (aParts[j].EdmType) {
                        switch (aParts[j].EdmType) {
                        case "Edm.DateTimeOffset":
                        case "Edm.DateTime":
                            oBinding.parts.push({path: aParts[j].Value, type: new sap.ui.model.type.DateTime()});
                            break;
                        case "Edm.Time":
                            oBinding.parts.push({path: aParts[j].Value + "/ms", type: new sap.ui.model.type.Time({
                                source: {
                                    pattern: "timestamp"
                                }
                            })});
                            break;
                        case "Edm.Date":
                            oBinding.parts.push({path: aParts[j].Value, type: new sap.ui.model.type.Date()});
                            break;
                        case "Edm.Decimal":
                        case "Edm.Double":
                        case "Edm.Single":
                            oBinding.parts.push({path: aParts[j].Value, type: new sap.ui.model.type.Float()});
                            break;
                        case "Edm.Int16":
                        case "Edm.Int32":
                        case "Edm.Int64":
                            oBinding.parts.push({path: aParts[j].Value, type: new sap.ui.model.type.Integer()});
                            break;
                        default:
                            oBinding.parts.push({path: aParts[j].Value});
                            break;
                        }
                    } else {
                        oBinding.parts.push({path: aParts[j].Value});
                    }
                } else if (aParts[j].Type === "String") {
                    // HANA Live: set strings as parameter
                    oBinding.parameters.unshift({string: aParts[j].Value});
                }
            }
            oBinding.formatter = function () {
                var sValue = "", sPathIndex, k, sLastValue, aValueLastLen, sLastSeparator = "", bEncodeUriComponent = false,
                    aHasValueCount = 0, aBracketSeparatorCount = 0;
                if (arguments && arguments.length >= 1) {
                    sPathIndex = arguments.length - 1;
                    sLastValue = "";
                    aValueLastLen = 0;
                    if (aParts && aParts[0] && (aParts[0].Type === "String") && (aParts[0].Value.substr(0, 1) === "#")) {
                        bEncodeUriComponent = true;
                    }
                    for (k = 0; k < aParts.length; k += 1) {
                        if (aParts[k].Type === "Path") {
                            sLastValue = arguments[sPathIndex];
                            if (!sLastValue || (sLastValue.length === 0)) {
                                if (sValue.length > aValueLastLen) {
                                    // Remove last separator if argument is empty
                                    if (sValue.indexOf("(") > aValueLastLen) {
                                        sValue = sValue.substr(0, aValueLastLen);
                                    } else {
                                        sValue = sValue.substr(0, aValueLastLen);
                                        sLastValue = sValue;
                                    }
                                }
                            } else {
                                if (bEncodeUriComponent) {
                                    sLastValue = encodeURIComponent(sLastValue);
                                }
                                sValue += sLastValue;
                                aHasValueCount += 1;
                            }
                            sPathIndex -= 1;
                            aValueLastLen = sValue.length;
                        } else {
                            aValueLastLen = sValue.length;
                            sLastSeparator = aParts[k].Value;
                            if (sLastSeparator.indexOf("(") !== -1) {
                                aBracketSeparatorCount += 1;
                            }
                            if ((sLastValue && sLastValue.length > 0) || (sLastSeparator.indexOf("(") !== -1) ||
                                    (sLastSeparator && (sLastSeparator.substr(0, 1) === "#"))) {
                                // only add separator if last argument was not empty
                                sValue += aParts[k].Value;
                            } else {
                                sLastSeparator = "";
                            }
                        }
                    }
                    if (oFormatter) {
                        sValue = oFormatter(sValue);
                    }
                    sValue = sValue.trim();
                    if ((aHasValueCount === 1) && (aBracketSeparatorCount > 0) && (sValue.substr(0, 1) === "(") && (sValue.substr(-1) === ")")) {
                        // Remove brackets if it's the only non-empty value in brackets
                        sValue = sValue.substr(1, sValue.length - 2);
                    }
                    return sValue.trim();
                }
            };
            return oBinding;
        };

        searchObj = function (obj, property) {
            var key;
            for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                    if (key === "__metadata") {
                        continue;
                    } else if (key === property) {
                        return obj[key];
                    } else if (typeof obj[key] === "object") {
                        return searchObj(obj[key], property);
                    }
                }
            }
        };

        newModelValue = function (sUrl) {
            var iLastSlash, newUrl, newProp, newJSONModel = {}, returnValue;
            iLastSlash = sUrl.lastIndexOf("/");
            newUrl = sUrl.slice(0, iLastSlash);
            newProp = sUrl.slice(iLastSlash + 1);
            if (!newJSONModels[sUrl]) {
                newJSONModel = new sap.ui.model.json.JSONModel();
                newJSONModel.loadData(newUrl, null, false);
                newJSONModels[sUrl] = newJSONModel.getData();
            } else {
                newJSONModel = newJSONModels[sUrl];
            }
            if (newJSONModels[sUrl] && newJSONModels[sUrl].d) {
                if (!newJSONModels[sUrl].d[newProp]) {
                    returnValue = searchObj(newJSONModels[sUrl].d, newProp);
                } else {
                    returnValue = newJSONModels[sUrl].d[newProp];
                }
            }
            return returnValue;
        };

        dataField = function (oField, sEntityType, oMetadata) {
            var oControl, oBinding, sNavProperty, oUrl;
            oControl = new sap.ui.core.Control();
            oBinding = fieldBinding(oField.Value, oField.EdmType, sEntityType);
            if (oField.Value && oField.Value["com.sap.vocabularies.UI.v1.IsImageURL"]) {
                oControl = new sap.m.Image({height: "50px"});
                if (oBinding.BindingInfo) {
                    oControl.bindProperty("src", oBinding.BindingInfo);
                } else {
                    oControl.setProperty("src", oBinding.String);
                }
            } else {
                if (oField.UrlRef || oField.Url || (oField.Target && oField.Target.Path)) {
                    oControl = new sap.m.Link({ wrapping: true });
                } else {
                    oControl = new sap.m.Text();
                    if (oField.EdmType === "Edm.Decimal" || oField.EdmType === "Edm.Double" || oField.EdmType === "Edm.Single" ||
                            oField.EdmType === "Edm.Int16" || oField.EdmType === "Edm.Int32" || oField.EdmType === "Edm.Int64") {
                        oControl.setTextAlign(sap.ui.core.TextAlign.End);
                    }
                }
                oControl.addStyleClass("sapFactsheetUtiDataField");
                if (oBinding.BindingInfo) {
                    oControl.bindProperty("text", oBinding.BindingInfo);
                } else {
                    oControl.setProperty("text", oBinding.String);
                }
            }
            if ((oField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithNavigation") && oMetadata) {
                sNavProperty = oField.Target.Path;
                if (oMapping[sEntityType][sNavProperty.slice(1)]) {
                    if (sNavProperty.charAt(0) === "@") {
                        if (sNavProperty.indexOf("/") < 0) {
                            oUrl = oMapping[sEntityType][sNavProperty.slice(1)].UrlRef;
                        } else {
                            oUrl = oMapping[sEntityType][sNavProperty.slice(1, sNavProperty.indexOf("/"))].UrlRef;
                        }
                        oControl.bindProperty("href", navigationBinding(oUrl));
                    }
                }
                oControl.attachPress(function (oEvent) {
                    return false;
                });
            }
            if (oField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") {
                if (oField.Url.String) {
                    oControl.setHref(oField.Url.String);
                } else {
                    oControl.bindProperty("href", navigationBinding(oField.Url));
                }
            }
            return oControl;
        };

        labelBinding = function (oField, oLabelProperties, aPropExtensions, bWithColon) {
            var oLabel, sColon = "", sLabel = "", oPropertyExt, j, k, oParameter;
            oLabel = new sap.m.Label(oLabelProperties);
            oLabel.addStyleClass("sapFactsheetUtiLabel");
            if (bWithColon) {
                sColon = ":";
            }
            if (oField.Label) {
                if (oField.Label.String) {
                    oLabel.setText(oField.Label.String.trim() + sColon);
                    oLabel.setTooltip(oField.Label.String.trim());
                } else {
                    if (oField.Label.Path) {
                        oLabel.bindProperty("text", oField.Label.Path);
                        oLabel.bindProperty("tooltip", oField.Label.Path);
                    }
                }
            } else {
                if (oField.Value) {
                    if (oField.Value.Path && aPropExtensions) {
                        oPropertyExt = aPropExtensions[oField.Value.Path];
                        for (j in oPropertyExt) {
                            if (oPropertyExt.hasOwnProperty(j)) {
                                if (j === "http://www.sap.com/Protocols/SAPData") {
                                    if (oPropertyExt[j].label) {
                                        sLabel = oPropertyExt[j].label;
                                        break;
                                    }
                                }
                            }
                        }
                    } else if (oField.Value.Apply && (oField.Value.Apply.Name === "odata.concat")) {
                        for (k in oField.Value.Apply.Parameters) {
                            if (oField.Value.Apply.Parameters.hasOwnProperty(k)) {
                                oParameter = oField.Value.Apply.Parameters[k];
                                if (oParameter.Type === "Path") {
                                    oPropertyExt = aPropExtensions[oParameter.Value];
                                    for (j in oPropertyExt) {
                                        if (oPropertyExt.hasOwnProperty(j)) {
                                            if (j === "http://www.sap.com/Protocols/SAPData") {
                                                if (oPropertyExt[j].label) {
                                                    sLabel = oPropertyExt[j].label;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    oLabel.setText(sLabel + sColon);
                    oLabel.setTooltip(sLabel);
                }
            }
            return oLabel;
        };

        fieldBinding = function (oFieldValue, sEdmType, sEntityType) {
            var oBinding = {}, oPropAnnotations, aParts, aPartsWithPropAnnotations = [], j, oUrl, sUrlProperties, aParameters = [],
                aParams, aTemplProperties, i, aUrlPathProperties, oParaValue, oParam, fnType, aTextParts = [];
            if (!oFieldValue) {
                return false;
            }
            if (oFieldValue.Apply) {  //apply function
                if (oFieldValue.Apply.Name === "odata.concat") {
                    if (sEntityType && oMapping.propertyAnnotations && oMapping.propertyAnnotations[sEntityType]) {
                        oPropAnnotations = oMapping.propertyAnnotations[sEntityType];
                        aParts = oFieldValue.Apply.Parameters;
                        for (j = 0; j < aParts.length; j += 1) {
                            if (aParts[j].Type === "Path") {
                                aPartsWithPropAnnotations.push(aParts[j]);
                                if (oPropAnnotations && oPropAnnotations[aParts[j].Value] && oPropAnnotations[aParts[j].Value]["Org.OData.Measures.V1.ISOCurrency"]) {
                                    aPartsWithPropAnnotations.push({Type: "String", Value: " "});
                                    if (oPropAnnotations[aParts[j].Value]["Org.OData.Measures.V1.ISOCurrency"].Path) {
                                        aPartsWithPropAnnotations.push({Type: "Path", Value: oPropAnnotations[aParts[j].Value]["Org.OData.Measures.V1.ISOCurrency"].Path});
                                    } else {
                                        aPartsWithPropAnnotations.push({Type: "String", Value: oPropAnnotations[aParts[j].Value]["Org.OData.Measures.V1.ISOCurrency"].String});
                                    }
                                } else {
                                    if (oPropAnnotations && oPropAnnotations[aParts[j].Value] && oPropAnnotations[aParts[j].Value]["Org.OData.Measures.V1.Unit"]) {
                                        aPartsWithPropAnnotations.push({Type: "String", Value: " "});
                                        if (oPropAnnotations[aParts[j].Value]["Org.OData.Measures.V1.Unit"].Path) {
                                            aPartsWithPropAnnotations.push({Type: "Path", Value: oPropAnnotations[aParts[j].Value]["Org.OData.Measures.V1.Unit"].Path});
                                        } else {
                                            aPartsWithPropAnnotations.push({Type: "String", Value: oPropAnnotations[aParts[j].Value]["Org.OData.Measures.V1.Unit"].String});
                                        }
                                    }
                                }
                            } else {
                                aPartsWithPropAnnotations.push(aParts[j]);
                            }
                        }
                        oBinding.BindingInfo = propertyPartsWithStrings(aPartsWithPropAnnotations);
                    } else {
                        oBinding.BindingInfo = propertyPartsWithStrings(oFieldValue.Apply.Parameters);
                    }
                }
            } else {  //property path 
                if (oFieldValue.Path) {
                    if (oFieldValue.Path.charAt(0) === "@") {  //property path with navigation defined in annotation
                        oUrl = oMapping[sEntityType][oFieldValue.Path.slice(1, oFieldValue.Path.indexOf("/"))].UrlRef;
                        sUrlProperties = oFieldValue.Path.slice(oFieldValue.Path.indexOf("/") + 1);
                        if (oUrl && oUrl.Apply) {
                            aParams = oUrl.Apply.Parameters;
                            switch (oUrl.Apply.Name) {
                            case "odata.concat":
                                aParameters = aParams;
                                aParameters.push({Type: "String", Value: "/" + sUrlProperties});
                                break;
                            case "odata.fillUriTemplate":
                                aTemplProperties = aParams[0].Value.split("{");
                                for (i in aTemplProperties) {
                                    if (aTemplProperties.hasOwnProperty(i)) {
                                        if (aTemplProperties[i].indexOf("}") < 0) {
                                            aParameters.push({Type: "String", Value: aTemplProperties[i]});
                                        } else {
                                            aUrlPathProperties = aTemplProperties[i].split("}");
                                            for (j = 1; j < aParams.length; j += 1) {
                                                if (aParams[j].Name === aUrlPathProperties[0]) {
                                                    oParaValue = aParams[j].Value;
                                                    if (oParaValue.Path) {
                                                        aParameters.push({Type: "Path", Value: oParaValue.Path});
                                                    } else {
                                                        if (oParaValue.Apply && (oParaValue.Apply.Name === "odata.UriEncode")) {
                                                            oParam = oParaValue.Apply.Parameters[0];
                                                            aParameters.push({Type: oParam.Type, Value: encodeURIComponent(oParam.Value)});
                                                            // HANA Live - put property as string to parameters (later needed for constructing URL)
                                                            aParameters.push({Type: "String", Value: "{" + encodeURIComponent(oParam.Value) + "}"});
                                                        }
                                                    }
                                                }
                                            }
                                            aParameters.push({Type: "String", Value: aUrlPathProperties[1]});
                                        }
                                    }
                                }
                                aParameters.push({Type: "String", Value: "/" + sUrlProperties});
                                //HANA Live
                                oBinding.fnChange = fnChange;
                                break;
                            default:
                                break;
                            }
                            oBinding.BindingInfo = propertyPartsWithStrings(aParameters, newModelValue);
                        } else {
                            if (oUrl && oUrl.Path) {
                                aParameters.push({Type: "Path", Value: oUrl.Path}, {Type: "String", Value: "/" + sUrlProperties});
                                oBinding.BindingInfo = propertyPartsWithStrings(aParameters, newModelValue);
                            } else {
                                if (oUrl && oUrl.String) {
                                    oBinding.String = newModelValue(oUrl.String + "/" + sUrlProperties);
                                }
                            }
                        }
                    } else {   //property path defined in the model
                        oBinding.BindingInfo = {};
                        switch (sEdmType) {
                        case "Edm.DateTimeOffset":
                        case "Edm.DateTime":
                            oBinding.BindingInfo = {path: oFieldValue.Path, type: new sap.ui.model.type.DateTime()};
                            break;
                        case "Edm.Time":
                            oBinding.BindingInfo = {path: oFieldValue.Path + "/ms", type: new sap.ui.model.type.Time({
                                source: {
                                    pattern: "timestamp"
                                }
                            })};
                            break;
                        case "Edm.Date":
                            oBinding.BindingInfo = {path: oFieldValue.Path, type: new sap.ui.model.type.Date()};
                            break;
                        case "Edm.Decimal":
                        case "Edm.Double":
                        case "Edm.Single":
                        case "Edm.Int16":
                        case "Edm.Int32":
                        case "Edm.Int64":
                            if ((sEdmType === "Edm.Decimal") || (sEdmType === "Edm.Double") || (sEdmType === "Edm.Single")) {
                                fnType = new sap.ui.model.type.Float();
                            } else if ((sEdmType === "Edm.Int16") || (sEdmType === "Edm.Int32") || (sEdmType === "Edm.Int64")) {
                                fnType = new sap.ui.model.type.Integer();
                            }
                            if (oMapping.propertyAnnotations) {
                                oPropAnnotations = oMapping.propertyAnnotations[sEntityType];
                                aTextParts.push({Type: "Path", Value: oFieldValue.Path, EdmType: sEdmType}, {Type: "String", Value: " "});
                                if (oPropAnnotations && oPropAnnotations[oFieldValue.Path] && oPropAnnotations[oFieldValue.Path]["Org.OData.Measures.V1.ISOCurrency"]) {
                                    if (oPropAnnotations[oFieldValue.Path]["Org.OData.Measures.V1.ISOCurrency"].Path) {
                                        aTextParts.push({Type: "Path", Value: oPropAnnotations[oFieldValue.Path]["Org.OData.Measures.V1.ISOCurrency"].Path});
                                    } else {
                                        aTextParts.push({Type: "String", Value: oPropAnnotations[oFieldValue.Path]["Org.OData.Measures.V1.ISOCurrency"].String});
                                    }
                                } else {
                                    if (oPropAnnotations && oPropAnnotations[oFieldValue.Path] && oPropAnnotations[oFieldValue.Path]["Org.OData.Measures.V1.Unit"]) {
                                        if (oPropAnnotations[oFieldValue.Path]["Org.OData.Measures.V1.Unit"].Path) {
                                            aTextParts.push({Type: "Path", Value: oPropAnnotations[oFieldValue.Path]["Org.OData.Measures.V1.Unit"].Path});
                                        } else {
                                            aTextParts.push({Type: "String", Value: oPropAnnotations[oFieldValue.Path]["Org.OData.Measures.V1.Unit"].String});
                                        }
                                    }
                                }
                                oBinding.BindingInfo = propertyPartsWithStrings(aTextParts);
                            } else {
                                oBinding.BindingInfo = {path: oFieldValue.Path, type: fnType};
                            }
                            break;
                        default:
                            oBinding.BindingInfo = {path: oFieldValue.Path};
                            break;
                        }
                    }
                } else {  //hard coded string in annotation
                    if (oFieldValue.String) {
                        oBinding.String = oFieldValue.String;
                    }
                }
            }
            return oBinding;
        };

        navigationBinding = function (oUrl) {
            var aUrlParts = [], aParams, aTemplateParts, j, aTemplValueParts, oUrlParts = {}, oParaValue, oResolution, sSystem;
            if (oUrl && oUrl.Apply) {
                aParams = oUrl.Apply.Parameters;
                switch (oUrl.Apply.Name) {
                case "odata.fillUriTemplate":
                    aParams[0].Value = aParams[0].Value.trim();
                    aTemplateParts = aParams[0].Value.split("{");
                    for (j = 0; j < aTemplateParts.length; j += 1) {
                        if (aTemplateParts[j].indexOf("}") < 0) {
                            aUrlParts.push({"Value" : aTemplateParts[j], "Type" : "String"});
                        } else {
                            aTemplValueParts = aTemplateParts[j].split("}");
                            oUrlParts = {};
                            oUrlParts.Value = aTemplValueParts[0];
                            oUrlParts.Type = "Path";
                            for (j = 1; j < aParams.length; j += 1) {
                                if (aParams[j].Name === oUrlParts.Value) {
                                    oParaValue = aParams[j].Value;
                                    if (oParaValue.Path) {
                                        oUrlParts.Value = oParaValue.Path;
                                    } else {
                                        if (oParaValue.Apply && oParaValue.Apply.Name === "odata.UriEncode") {
                                            oUrlParts.Value = oParaValue.Apply.Parameters[0].Value;
                                        }
                                    }
                                    break;
                                }
                            }
                            aUrlParts.push(oUrlParts);
                            aUrlParts.push({"Value" : aTemplValueParts[1], "Type" : "String"});
                        }
                    }
                    oResolution = sap.ushell.Container.getService("NavTargetResolution").getCurrentResolution();
                    if (oResolution && oResolution.url) {
                        sSystem = jQuery.sap.getUriParameters(oResolution.url).get("sap-system");
                        if (sSystem) {
                            aUrlParts.push({Type: "String", Value: "&sap-system=" + sSystem});
                        }
                    }
                    break;
                default:
                    break;
                }
            }
            return propertyPartsWithStrings(aUrlParts);
        };

        columnHAlign = function (oField) {
            var hAlign = sap.ui.core.TextAlign.Begin;
            if (oField.EdmType === "Edm.Decimal" || oField.EdmType === "Edm.Double" || oField.EdmType === "Edm.Single" ||
                    oField.EdmType === "Edm.Int16" || oField.EdmType === "Edm.Int32" || oField.EdmType === "Edm.Int64") {
                hAlign = sap.ui.core.TextAlign.End;
            }
            return hAlign;
        };

        formLayoutFactory = function (oModel, sEntitySet, aFormData, oMaxItems, oMetadata) {
            var sEntityType, aPropertyExtensions, j = 0, iSumPrioHigh = 0, iSumPrioMedium = 0, iSumPrioLow = 0,
                oImportance, i, oControl, oLabel, oSimpleForm;
            if (!oMetadata) {
                oMetadata = oModel.getServiceMetadata();
            }
            if (!aFormData) {
                aFormData = [];
            }
            sEntityType = getEntityType(sEntitySet, oMetadata);

            oSimpleForm = new sap.ui.layout.form.SimpleForm({
                labelMinWidth: 150,
                maxContainerCols: 2
            });

            aPropertyExtensions = (oMapping.propertyExtensions) ? oMapping.propertyExtensions[sEntityType] : [];
            if (oMaxItems && oMaxItems.High) {
                iSumPrioHigh = oMaxItems.High;
            }
            if (oMaxItems && oMaxItems.Medium) {
                iSumPrioMedium = oMaxItems.Medium;
            }
            if (oMaxItems && oMaxItems.Low) {
                iSumPrioLow = oMaxItems.Low;
            }
            for (i = 0; i < aFormData.length; i += 1) {
                oImportance = getImportanceOfRecord(aFormData[i]);
                if (oMaxItems && (oImportance === "High")) {
                    if (iSumPrioHigh) {
                        iSumPrioHigh -= 1;
                    } else {
                        continue;
                    }
                } else if (oMaxItems && (oImportance === "Medium")) {
                    if (iSumPrioMedium) {
                        iSumPrioMedium -= 1;
                    } else {
                        continue;
                    }
                } else if (oMaxItems && (oImportance === "Low")) {
                    if (iSumPrioLow) {
                        iSumPrioLow -= 1;
                    } else {
                        continue;
                    }
                }
                if (oMaxItems && oMaxItems.Total && (j >= oMaxItems.Total)) {
                    break;
                }
                j += 1;
                oControl = new sap.ui.core.Control().setModel(oModel);
                oLabel = labelBinding(aFormData[i], {textAlign: sap.ui.core.TextAlign.End}, aPropertyExtensions, false);
                oLabel.addStyleClass("sapFactsheetUtiFormPadding");
                oControl = dataField(aFormData[i], sEntityType, oMetadata);
                oControl.addStyleClass("sapFactsheetUtiFormPadding");
                if (oControl.setTextAlign) {
                    oControl.setTextAlign(sap.ui.core.TextAlign.Begin);
                }
                oSimpleForm.addContent(oLabel);
                oSimpleForm.addContent(oControl);
            }
            oSimpleForm.addStyleClass("sapFactsheetUtiFormLayout");
            return oSimpleForm;
        };

        facetFactory = function (oModel, sEntitySet, oSelectedFacet, sBindingPath) {
            var oMetadata, sAssociationMultiplicity = "", oTG, sNavPath, sAnnoPath, aAnnoPath, sNavEntitySet, oList, aIdentification,
                oVL, aStatusInfo, oFG, aTG = [], i, sEntityType, aColumns, oPropertyExtensions;
            oMetadata = oModel.getServiceMetadata();
            switch (oSelectedFacet.RecordType) {
            case "com.sap.vocabularies.UI.v1.ReferenceFacet":
                oTG = new sap.suite.ui.commons.UnifiedThingGroup();
                if (oSelectedFacet.Label && oSelectedFacet.Label.String) {
                    oTG.setTitle(oSelectedFacet.Label.String);
                }
                sNavPath = oSelectedFacet.Target.AnnotationPath;
                sAnnoPath = sNavPath.substring(sNavPath.lastIndexOf("@") + 1);
                sNavPath = sNavPath.substring(0, sNavPath.lastIndexOf("@") - 1);
                if (sNavPath) {
                    sAssociationMultiplicity = getAssociationMultiplicity(sEntitySet, sNavPath, oMetadata);
                }
                aAnnoPath = sAnnoPath.split("#");
                switch (aAnnoPath[0]) {
                case "com.sap.vocabularies.UI.v1.LineItem":
                case "com.sap.vocabularies.UI.v1.Chart":
                case "com.sap.vocabularies.UI.v1.Badge":
                case "com.sap.vocabularies.UI.v1.Identification":

                    if (sNavPath) {
                        sNavEntitySet = getNavEntitySet(sEntitySet, sNavPath, oMetadata);
                        sEntityType = getEntityType(sNavEntitySet, oMetadata);
                    } else {
                        sEntityType = getEntityType(sEntitySet, oMetadata);
                    }
                    // In case of a chart we need to have the definition of the line items
                    if (aAnnoPath[0] === "com.sap.vocabularies.UI.v1.Chart") {
                        sAnnoPath = "com.sap.vocabularies.UI.v1.LineItem";
                    }
                    aColumns = oMapping[sEntityType][sAnnoPath];
                    oPropertyExtensions = oMapping.propertyExtensions[sEntityType];
                    if (sAssociationMultiplicity === "*" && aAnnoPath[0] !== "com.sap.vocabularies.UI.v1.Identification") {
                        oList = itemListFactory(oModel, aColumns, sEntityType, oMetadata, sBindingPath + "/" + sNavPath, oSelectedFacet, oPropertyExtensions);
                        oTG.setContent(oList);
                    }
                    if (aAnnoPath[0] === "com.sap.vocabularies.UI.v1.Identification") {
                        aIdentification = oMapping[sEntityType]["com.sap.vocabularies.UI.v1.Identification"];
                        oVL = new sap.ui.layout.VerticalLayout({width: "100%"}).setModel(oModel);
                        if (sNavPath) {
                            oVL.addContent(formLayoutFactory(oModel, sNavEntitySet, aIdentification)).addStyleClass("sapFactsheetUtiPanel").bindElement(sBindingPath + "/" + sNavPath);
                        } else {
                            oVL.addContent(formLayoutFactory(oModel, sEntitySet, aIdentification).addStyleClass("sapFactsheetUtiPanel"));
                        }
                        oTG.setContent(oVL);
                    }
                    break;
                case "com.sap.vocabularies.UI.v1.StatusInfo":
                    if (sNavPath) {
                        sNavEntitySet = getNavEntitySet(sEntitySet, sNavPath, oMetadata);
                        aStatusInfo = oMapping[getEntityType(sNavEntitySet, oMetadata)]["com.sap.vocabularies.UI.v1.StatusInfo"];
                        oTG.setContent(formLayoutFactory(oModel, sNavEntitySet, aStatusInfo).addStyleClass("sapFactsheetUtiPanel").bindElement(sBindingPath + "/" + sNavPath));
                    } else {
                        aStatusInfo = oMapping[getEntityType(sEntitySet, oMetadata)]["com.sap.vocabularies.UI.v1.StatusInfo"];
                        oTG.setContent(formLayoutFactory(oModel, sEntitySet, aStatusInfo).addStyleClass("sapFactsheetUtiPanel"));
                    }
                    break;
                case "com.sap.vocabularies.UI.v1.FieldGroup":
                    oFG = oMapping[getEntityType(sEntitySet, oMetadata)][sAnnoPath];
                    if (oFG) {
                        if (!oTG.getTitle() || (oTG.getTitle() === "")) {
                            if (oFG.Label) {
                                if (oFG.Label.String) {
                                    oTG.setTitle(oFG.Label.String);
                                } else {
                                    if (oFG.Label.Path) {
                                        oTG.bindProperty("title", oFG.Label.Path);
                                    }
                                }
                            }
                        }
                        if (sNavPath) {
                            sNavEntitySet = getNavEntitySet(sEntitySet, sNavPath, oMetadata);
                            oTG.setContent(formLayoutFactory(oModel, sNavEntitySet, oFG.Data).addStyleClass("sapFactsheetUtiPanel").bindElement(sBindingPath + "/" + sNavPath));
                        } else {
                            oTG.setContent(formLayoutFactory(oModel, sEntitySet, oFG.Data).addStyleClass("sapFactsheetUtiPanel"));
                        }
                    }
                    break;
                default:
                    break;
                }
                return oTG;
            case "com.sap.vocabularies.UI.v1.ReferenceURLFacet":
                oTG = new sap.ui.ux3.ThingGroup({title: oSelectedFacet.Label.String});
                oTG.setContent(showHTML(oSelectedFacet));
                return oTG;
            case "com.sap.vocabularies.UI.v1.CollectionFacet":
                for (i = 0; i < oSelectedFacet.Facets.length; i += 1) {
                    aTG.push(facetFactory(oModel, sEntitySet, oSelectedFacet.Facets[i], sBindingPath));
                }
                return aTG;
            default:
                break;
            }
        };

        showHTML = function (oHTMLData) {
            var oImage, oHTMLCtrl, sIframe;
            switch (oHTMLData.UrlContentType.String) {
            case "image/png":
            case "image/jpeg":
            case "image/gif":
                oImage =  new sap.m.Image({width: "100%"});
                if (oHTMLData.Url.String) {
                    oImage.setSrc(oHTMLData.Url.String);
                }
                return oImage;
            default:
                oHTMLCtrl = new sap.ui.core.HTML();
                if (oHTMLData.Url.String) {
                    oHTMLCtrl.setContent("<iframe src = '" + oHTMLData.Url.String + "' width='100%' height='250px' frameborder='0'></iframe>");
                } else {
                    if (oHTMLData.Url.Path) {
                        oHTMLCtrl.bindProperty("content", { path: oHTMLData.Url.Path,
                            formatter: function (value) {
                                sIframe = "<iframe src = '" + oHTMLData.Url.Path + "' width='100%' height='250px' frameborder='0'></iframe>";
                                return sIframe;
                            }
                            });
                    }
                }
                return oHTMLCtrl;
            }
        };

        itemListFactory =  function (oModel, aColumns, sEntityType, oMetadata, sBindingPath, oFacet, oPropertyExtensions) {
            var aPropertyExtensions, iMaxColumns, iPrioHighColumnCount, iPrioMediumColumnCount,
                oImportance, i, k, cells = [], columns = [], aLabels = [], aControls = [], oLabel, bVisible, oControl, oTemplateData,
                sTitle, oTable, updatedFinished, aSortItems = [], oSortItem, oVSDialog, sColumnName, aFilterItems = [],
                oFilterItem, customFilterString, customFilterDecimal, customFilterDate, customFilterCallback, customFilterReset,
                customFilterCancel, oCustomFilterControl, oSuiteUiCommonsResourceBundle, bEnableSortFilterDialog = false, bSortable,
                sConcatColumnName;
            oSuiteUiCommonsResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
            if (!oMetadata) {
                oMetadata = oModel.getServiceMetadata();
            }
            aPropertyExtensions = (oMapping.propertyExtensions) ? oMapping.propertyExtensions[sEntityType] : [];

            iMaxColumns = 6; //Default value for desktop
            if (jQuery.device.is.tablet && jQuery.device.is.landscape) {
                iMaxColumns = 5;
            } else if (jQuery.device.is.tablet && jQuery.device.is.portrait) {
                iMaxColumns = 4;
            } else if (jQuery.device.is.phone && jQuery.device.is.landscape) {
                iMaxColumns = 3;
            } else if (jQuery.device.is.phone && jQuery.device.is.portrait) {
                iMaxColumns = 2;
            }
            iPrioHighColumnCount = 0;
            iPrioMediumColumnCount = 0;
            for (i = 0; i < aColumns.length; i += 1) {
                oImportance = getImportanceOfRecord(aColumns[i]);
                if (oImportance === "High") {
                    iPrioHighColumnCount += 1;
                }
            }
            if (iMaxColumns > iPrioHighColumnCount) {
                iPrioMediumColumnCount = iMaxColumns - iPrioHighColumnCount;
            } else if (iMaxColumns < iPrioHighColumnCount) {
                iPrioHighColumnCount = iMaxColumns;
            }
            columns.push(new sap.m.Column({visible: false}));
            cells.push(new sap.m.Text().bindText("__metadata/uri"));
            for (i = 0; i < aColumns.length; i += 1) {
                sConcatColumnName = "";
                oControl = new sap.ui.core.Control();
                oImportance = getImportanceOfRecord(aColumns[i]);
                oControl = dataField(aColumns[i], sEntityType, oMetadata);
                oLabel = labelBinding(aColumns[i], null, aPropertyExtensions);
                // Enable sorting for non-concatenated fields
                if (aColumns[i].Value.Path) {
                    // "ColumnName" is required for oData call for list sorting
                    sColumnName = aColumns[i].Value.Path;
                    // Check if column is sortable (if nothing is specified, column is sortable).
                    if (oPropertyExtensions[sColumnName] && oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"]
                            && oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"].sortable) {
                        oLabel.data("IsSortable", oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"].sortable);
                        if (oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"].sortable === "true") {
                            bEnableSortFilterDialog = true;
                        }
                    } else {
                        oLabel.data("IsSortable", "true");
                        bEnableSortFilterDialog = true;
                    }

                    // Check if column is filterable (if nothing is specified, column is filterable).
                    if (oPropertyExtensions[sColumnName] && oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"]
                            && oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"].filterable) {
                        oLabel.data("IsFilterable", oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"].filterable);
                        if (oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"].filterable === "true") {
                            bEnableSortFilterDialog = true;
                        }
                    } else {
                        oLabel.data("IsFilterable", "true");
                        bEnableSortFilterDialog = true;
                    }
                } else {
                    // A column consists of concatenated fields. Only if all fields are sortable, then allow a column sorting.
                    bSortable = true;
                    for (k = 0; k < aColumns[i].Value.Apply.Parameters.length; k += 1) {
                        if (aColumns[i].Value.Apply.Parameters[k].Type === "Path") {
                            sColumnName = aColumns[i].Value.Apply.Parameters[k].Value;
                            // Check if column is sortable (if nothing is specified, column is sortable).
                            if (oPropertyExtensions[sColumnName] && oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"]
                                    && oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"].sortable) {
                                if (oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"].sortable === "false") {
                                    // One of a concatenated fields isn't sortable, then the whole column will be not sortable
                                    bSortable = false;
                                    sConcatColumnName = "";
                                    break;
                                }
                            }
                            if (sConcatColumnName) {
                                sConcatColumnName += ";";
                            }
                            sConcatColumnName += sColumnName;
                        }
                    }
                    sColumnName = sConcatColumnName;
                    if (bSortable === false) {
                        oLabel.data("IsSortable", "false");
                    } else {
                        oLabel.data("IsSortable", "true");
                        bEnableSortFilterDialog = true;
                    }

                    // For concatenated fields no filtering is allowed
                    oLabel.data("IsFilterable", "false");
                }

                if (aColumns[i].EdmType) {
                    oLabel.data("EdmType", aColumns[i].EdmType);
                }
                oLabel.data("ColumnName", sColumnName);
                aLabels.push(oLabel);
                aControls.push(oControl);
                if (oImportance === "High") {
                    if (iPrioHighColumnCount > 0) {
                        bVisible = true;
                        iPrioHighColumnCount -= 1;
                    } else {
                        bVisible = false;
                    }
                } else if (oImportance === "Medium") {
                    if (iPrioMediumColumnCount > 0) {
                        bVisible = true;
                        iPrioMediumColumnCount -= 1;
                    } else {
                        bVisible = false;
                    }
                } else {
                    bVisible = false;
                }
                columns.push(new sap.m.Column({header: oLabel, hAlign: columnHAlign(aColumns[i]), visible: bVisible}));
                cells.push(oControl);
            }
            oTemplateData = new sap.m.ColumnListItem({
                type : sap.m.ListType.Navigation,
                unread : false,
                cells : cells
            });
            if (oFacet) {
                sTitle = oFacet.Label.String;
            }

            oTemplateData.attachPress({aColumns: aColumns, aLabels: aLabels, aControls: aControls, sTitle: sTitle}, function (oEvent, oData) {
                var oTableData = {}, sItem, oContent, oLabel, i, oThingGroup, oPage;
                oTableData.items = {};

                sItem = oEvent.getSource().getCells()[0].getText().substr(oEvent.getSource().getCells()[0].getText().lastIndexOf("/"));
                oContent = new sap.m.Table({
                    backgroundDesign: sap.m.BackgroundDesign.Transparent,
                    showSeparators: sap.m.ListSeparators.None,
                    columns: [
                        new sap.m.Column({hAlign: sap.ui.core.TextAlign.End}),
                        new sap.m.Column()
                    ]
                });
                oContent.addStyleClass("sapFactsheetUtiPanel");
                oContent.addStyleClass("sapFactsheetUtiTilePadding");
                oContent.addStyleClass("sapFactsheetUtiTableNoTopBorder");
                oContent.bindElement(sItem);
                for (i = 0; i < aColumns.length; i += 1) {
                    oLabel = aLabels[i].clone();
                    oLabel.setText(oLabel.getText() + ":");
                    oContent.addItem(new sap.m.ColumnListItem({cells: [oLabel, aControls[i].clone()]}));
                }
                oThingGroup = new sap.suite.ui.commons.UnifiedThingGroup({
                    content: oContent,
                    title: sTitle,
                    description: getTIDescription()
                });

                oPage = new sap.m.Page({
                    title: oTI.getTitle(),
                    showNavButton: true,
                    content: [ oThingGroup ]
                });
                oTI.navigateToPage(oPage, true);
            });

            oTable = new sap.m.Table({growing : true, columns: columns});
            oTable.setModel(oModel);
            oTable.bindItems({
                path: sBindingPath,
                template: oTemplateData
            });

            customFilterString = new sap.m.VBox({
                items: [
                    new sap.m.Input({
                        placeholder: oSuiteUiCommonsResourceBundle.getText("USHELL_FACTSHEET_ENTER_YOUR_FILTER"),
                        change: function (oEvent) {
                            var sParentParentId, vsd, filters, customFilter, i;
                            sParentParentId = oEvent.getSource().getParent().getParent().getId();
                            vsd = sap.ui.getCore().byId(sParentParentId.substr(0, sParentParentId.indexOf("-")));
                            filters = vsd.getFilterItems();
                            for (i = 0; i < filters.length; i += 1) {
                                if (filters[i] instanceof sap.m.ViewSettingsCustomItem && filters[i].getKey() === this.oParent.data("ColumnName")) {
                                    customFilter = filters[i];
                                    break;
                                }
                            }
                            if (customFilter) {
                                if ((oEvent.getParameter("newValue") === undefined) || (oEvent.getParameter("newValue") === "")) {
                                    customFilter.setSelected(false);
                                    customFilter.setFilterCount(0);
                                } else {
                                    customFilter.setSelected(true);
                                    customFilter.setFilterCount(1);
                                }
                            }
                        }
                    }).addStyleClass("sapFactsheetUtiFilterInput")
                ]
            });
            customFilterDecimal = new sap.m.VBox({
                items: [
                    new sap.m.List({
                        mode: sap.m.ListMode.SingleSelectLeft,
                        includeItemInSelection: true,
                        items: [
                            new sap.m.StandardListItem({
                                title: oSuiteUiCommonsResourceBundle.getText("USHELL_FACTSHEET_GREATER_THEN")
                            }).data("FilterOperator", sap.ui.model.FilterOperator.GT),
                            new sap.m.StandardListItem({
                                title: oSuiteUiCommonsResourceBundle.getText("USHELL_FACTSHEET_EQUALS")
                            }).data("FilterOperator", sap.ui.model.FilterOperator.EQ),
                            new sap.m.StandardListItem({
                                title: oSuiteUiCommonsResourceBundle.getText("USHELL_FACTSHEET_LESS_THEN")
                            }).data("FilterOperator", sap.ui.model.FilterOperator.LT)
                        ]
                    }),
                    new sap.m.Input({
                        placeholder: oSuiteUiCommonsResourceBundle.getText("USHELL_FACTSHEET_ENTER_YOUR_FILTER"),
                        change: function (oEvent) {
                            var sParentParentId, vsd, filters, customFilter, i;
                            sParentParentId = oEvent.getSource().getParent().getParent().getId();
                            vsd = sap.ui.getCore().byId(sParentParentId.substr(0, sParentParentId.indexOf("-")));
                            filters = vsd.getFilterItems();
                            for (i = 0; i < filters.length; i += 1) {
                                if ((filters[i] instanceof sap.m.ViewSettingsCustomItem) && (filters[i].getKey() === this.oParent.data("ColumnName"))) {
                                    customFilter = filters[i];
                                    break;
                                }
                            }
                            if (customFilter) {
                                if ((oEvent.getParameter("newValue") === undefined) || (oEvent.getParameter("newValue") === "")) {
                                    customFilter.setSelected(false);
                                    customFilter.setFilterCount(0);
                                } else {
                                    customFilter.setSelected(true);
                                    customFilter.setFilterCount(1);
                                }
                            }
                        }
                    }).addStyleClass("sapFactsheetUtiFilterInput")
                ]
            });
            customFilterDate = new sap.m.VBox({
                items: [
                    new sap.m.List({
                        mode: sap.m.ListMode.SingleSelectLeft,
                        includeItemInSelection: true,
                        items: [
                            new sap.m.StandardListItem({
                                title: oSuiteUiCommonsResourceBundle.getText("USHELL_FACTSHEET_AFTER")
                            }).data("FilterOperator", sap.ui.model.FilterOperator.GT),
                            new sap.m.StandardListItem({
                                title: oSuiteUiCommonsResourceBundle.getText("USHELL_FACTSHEET_AT")
                            }).data("FilterOperator", sap.ui.model.FilterOperator.EQ),
                            new sap.m.StandardListItem({
                                title: oSuiteUiCommonsResourceBundle.getText("USHELL_FACTSHEET_BEFORE")
                            }).data("FilterOperator", sap.ui.model.FilterOperator.LT)
                        ]
                    }),
                    new sap.m.DateTimeInput({
                        type: sap.m.DateTimeInputType.Date,
                        valueFormat: new sap.ui.model.type.DateTime({pattern: "yyyy/MM/dd HH:mm:ss UTC+00:00"}).getOutputPattern(),
                        placeholder: oSuiteUiCommonsResourceBundle.getText("USHELL_FACTSHEET_ENTER_YOUR_FILTER"),
                        change: function (oEvent) {
                            var sParentParentId, vsd, filters, customFilter, i;
                            sParentParentId = oEvent.getSource().getParent().getParent().getId();
                            vsd = sap.ui.getCore().byId(sParentParentId.substr(0, sParentParentId.indexOf("-")));
                            filters = vsd.getFilterItems();
                            for (i = 0; i < filters.length; i += 1) {
                                if ((filters[i] instanceof sap.m.ViewSettingsCustomItem) && (filters[i].getKey() === this.oParent.data("ColumnName"))) {
                                    customFilter = filters[i];
                                    break;
                                }
                            }
                            if ((oEvent.getParameter("newValue") === undefined) || (oEvent.getParameter("newValue") === "")) {
                                customFilter.setSelected(false);
                                customFilter.setFilterCount(0);
                            } else {
                                customFilter.setSelected(true);
                                customFilter.setFilterCount(1);
                            }
                        }
                    }).addStyleClass("sapFactsheetUtiFilterInput")
                ]
            });
            customFilterCallback = function (oControl) {
                var aFilters = [], i, sFilterOperator, aItems = oControl.getItems(), sFilterValue;
                if (aItems[0].getParent().data("EdmType") === "Edm.String" && aItems[0].getValue()) {
                    aFilters.push(new sap.ui.model.Filter(aItems[0].getParent().data("ColumnName"), sap.ui.model.FilterOperator.Contains, aItems[0].getValue()));
                } else if (aItems[0].getParent().data("EdmType") === "Edm.Decimal" && aItems[1].getValue()) {
                    for (i = 0; i < aItems[0].getItems().length; i += 1) {
                        if (aItems[0].getItems()[i].getSelected() === true) {
                            sFilterOperator = aItems[0].getItems()[i].data("FilterOperator");
                            break;
                        }
                    }
                    sFilterValue = aItems[1].getValue();
                    for (i = sFilterValue.length - 1; i > 0; i -= 1) {
                        if (sFilterValue[i] === ",") {
                            sFilterValue = sFilterValue.replace(sFilterValue[i], ".");
                            break;
                        }
                    }
                    aFilters.push(new sap.ui.model.Filter(aItems[1].getParent().data("ColumnName"), sFilterOperator, sFilterValue));
                } else if (aItems[0].getParent().data("EdmType") === "Edm.Date" && aItems[1].getValue()) {
                    for (i = 0; i < aItems[0].getItems().length; i += 1) {
                        if (aItems[0].getItems()[i].getSelected() === true) {
                            sFilterOperator = aItems[0].getItems()[i].data("FilterOperator");
                            break;
                        }
                    }
                    aFilters.push(new sap.ui.model.Filter(aItems[1].getParent().data("ColumnName"), sFilterOperator, aItems[1].getValue()));
                } else {
                    aFilters.push(new sap.ui.model.Filter(aItems[0].getParent().data("ColumnName"), sap.ui.model.FilterOperator.EQ, aItems[0].getValue()));
                }
                return aFilters;
            };
            customFilterReset = function (oEvent) {
                var source = oEvent.getSource(), filters = source.getFilterItems(), customControlItems, i, j;

                for (i = 0; i < filters.length; i += 1) {
                    if (filters[i] && filters[i] instanceof sap.m.ViewSettingsCustomItem) {
                        filters[i].setSelected(false);
                        filters[i].setFilterCount(0);
                        customControlItems = filters[i].getCustomControl().getItems();
                        for (j = 0; j < customControlItems.length; j += 1) {
                            // Clear of sap.m.Input and sap.m.DateTimeInput
                            if ((customControlItems[j] instanceof sap.m.Input) || (customControlItems[j] instanceof sap.m.DateTimeInput)) {
                                customControlItems[j].setValue("");
                            }
                            // Clear sap.m.List
                            if ((customControlItems[j] instanceof sap.m.List) && (customControlItems[j].getSelectedItem() !== null)) {
                                customControlItems[j].removeSelections();
                            }
                        }
                    }
                }
            };
            customFilterCancel = customFilterReset;
            for (i = 0; i < columns.length; i += 1) {
                if (columns[i + 1]) {
                    oLabel = aLabels[i].clone();
                    if (oLabel.getText() && (oLabel.data("IsSortable") === "true") && columns[i + 1].getVisible()) {
                        oSortItem = new sap.m.ViewSettingsItem({
                            text: oLabel.getText(),
                            key: oLabel.data("ColumnName")
                        });
                        if (i === 0) {
                            oSortItem.setSelected(true);
                        }
                        oSortItem.Sort = oLabel.Sort;
                        aSortItems.push(oSortItem);
                    }
                    if (oLabel.getText() && (oLabel.data("IsFilterable") === "true")) {
                        if (oLabel.data("EdmType") === "Edm.String") {
                            oCustomFilterControl = customFilterString.clone().data("ColumnName", oLabel.data("ColumnName")).data("EdmType", oLabel.data("EdmType"));
                            // Currently Edm.Date is disabled until correct timezone handling
                            // } else if (oLabel.data("EdmType") === "Edm.Date") {
                            // oCustomFilterControl = customFilterDate.clone().data("ColumnName", oLabel.data("ColumnName")).data("EdmType", oLabel.data("EdmType"));
                        } else if (oLabel.data("EdmType") === "Edm.Decimal") {
                            oCustomFilterControl = customFilterDecimal.clone().data("ColumnName", oLabel.data("ColumnName")).data("EdmType", oLabel.data("EdmType"));
                        }
                        if ((oLabel.data("EdmType") === "Edm.String") || (oLabel.data("EdmType") === "Edm.Decimal")) {
                            oFilterItem = new sap.m.ViewSettingsCustomItem({
                                key: oLabel.data("ColumnName"),
                                text: oLabel.getText(),
                                customControl: oCustomFilterControl,
                                customData: new sap.ui.core.CustomData({
                                    key: "callback",
                                    value: customFilterCallback
                                })
                            });
                            aFilterItems.push(oFilterItem);
                        }
                    }
                }
            }

            oVSDialog = new sap.m.ViewSettingsDialog({
                sortItems : aSortItems,
                filterItems : aFilterItems,
                cancel : customFilterCancel,
                resetFilters : customFilterReset,
                confirm : function (evt) {
                    var mParams, oBinding, aSorters = [], sPath, aPath = [], bDescending, aFilters = [], aTableFilters = [], p, i, oCallback;
                    mParams = evt.getParameters();
                    oBinding = oTable.getBinding("items");
                    if (mParams.sortItem) {
                        sPath = mParams.sortItem.getKey();
                        bDescending = mParams.sortDescending;
                        if (sPath.indexOf(";") > 0) {
                            aPath = sPath.split(";");
                            for (i = 0; i < aPath.length; i += 1) {
                                aSorters.push(new sap.ui.model.Sorter(aPath[i], bDescending));
                            }
                        } else if (sPath) {
                            aSorters.push(new sap.ui.model.Sorter(sPath, bDescending));
                        }
                        oBinding.sort(aSorters);
                    }
                    p = mParams;
                    for (i = 0; i < p.filterItems.length; i += 1) {
                        if (p.filterItems[i] instanceof sap.m.ViewSettingsCustomItem) { // custom control filter
                            oCallback = p.filterItems[i].getCustomData()[0].getValue();
                            aFilters = oCallback.apply(this, [p.filterItems[i].getCustomControl()]);
                            if (aFilters) {
                                // The filter could be an array of filters or a single filter so we transform it to an array
                                if (!Array.isArray(aFilters)) {
                                    aFilters = [aFilters];
                                }
                                aTableFilters = aTableFilters.concat(aFilters);
                            }
                        } else if (p.filterItems[i] instanceof sap.m.ViewSettingsItem) { // standard filter
                            aFilters = p.filterItems[i].getCustomData()[0].getValue();
                            if (aFilters) {
                                // The filter could be an array of filters or a single filter so we transform it to an array
                                if (!Array.isArray(aFilters)) {
                                    aFilters = [aFilters];
                                }
                                aTableFilters = aTableFilters.concat(aFilters);
                            }
                        }
                    }
                    oBinding.filter(aTableFilters);
                }
            });
            if (bEnableSortFilterDialog === true && (aSortItems.length > 0 || aFilterItems.length > 0)) {
                // Add a button to the table header for opening the sorting dialog
                oTable.setHeaderToolbar(new sap.m.Toolbar({
                    content : [
                        new sap.m.Label(),
                        new sap.m.ToolbarSpacer(),
                        new sap.m.Button({
                            icon : "sap-icon://drop-down-list",
                            press : function (evt) {
                                oVSDialog.open();
                            }
                        })
                    ]
                }));
            }
            // While data is loading display a loading text
            oTable.setNoDataText(sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("PULL2REFRESH_LOADING_LONG"));
            // When data gets updated check if there are no items and set a no data text in that case
            updatedFinished = function () {
                if (this.getItems().length === 0) {
                    this.setNoDataText(oSuiteUiCommonsResourceBundle.getText("FACETOVERVIEW_NO_CONTENT_TEXT"));
                } else {
                    this.setNoDataText(sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("PULL2REFRESH_LOADING_LONG"));
                }
            };
            oTable.attachUpdateFinished(updatedFinished);
            return oTable;
        };

        chartControlFactory = function (sChartType, oTitle, oDescription, oDataset) {
            var oChartControl;

            switch (sChartType) {
            case "com.sap.vocabularies.UI.v1.ChartType/Area":
                oChartControl = new sap.viz.ui5.Area({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/Bar":
                oChartControl = new sap.viz.ui5.Bar({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/Bubble":
                oChartControl = new sap.viz.ui5.Bubble({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/Column":
                oChartControl = new sap.viz.ui5.Column({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/ColumnStacked":
                oChartControl = new sap.viz.ui5.StackedColumn({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/ColumnStacked100":
                oChartControl = new sap.viz.ui5.StackedColumn100({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/Donut":
                oChartControl = new sap.viz.ui5.Donut({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/HeatMap":
                oChartControl = new sap.viz.ui5.Heatmap({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/HorizontalArea":
                oChartControl = new sap.viz.ui5.HorizontalArea({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/Line":
                oChartControl = new sap.viz.ui5.Line({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/Pie":
                oChartControl = new sap.viz.ui5.Pie({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/Scatter":
                oChartControl = new sap.viz.ui5.Scatter({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/TreeMap":
                oChartControl = new sap.viz.ui5.Treemap({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/AreaStacked":
            case "com.sap.vocabularies.UI.v1.ChartType/AreaStacked100":
            case "com.sap.vocabularies.UI.v1.ChartType/BarStacked":
            case "com.sap.vocabularies.UI.v1.ChartType/BarStacked100":
            case "com.sap.vocabularies.UI.v1.ChartType/HorizontalAreaStacked":
            case "com.sap.vocabularies.UI.v1.ChartType/HorizontalAreaStacked100":
            case "com.sap.vocabularies.UI.v1.ChartType/Radar":
            case "com.sap.vocabularies.UI.v1.ChartType/Waterfall":
                break;
            }

            if (oChartControl) {
                if (oTitle && oTitle.String) {
                    oChartControl.setTitle(new sap.viz.ui5.types.Title({
                        visible: true,
                        text: oTitle.String
                    }));
                }
                if (oDescription && oDescription.String) {
                    oChartControl.setTooltip(oDescription.String);
                }
                oChartControl.setWidth("100%");
                oChartControl.setHeight("17rem");
                oChartControl.setDataset(oDataset);
            } else {
                oChartControl = new sap.m.Text({});
            }

            return oChartControl;
        };

        /**
         * Returns tile height in rem, depending on device type and number of segments the tile consists of.
         * @param {number=} [iSegments=1] Number of segments the tile will take vertically in the grid (optional).
         *                  Currently expected values are 1, 2, 3, however any positive number is supported.
         *                  Default value is 1.
         * @return {string} Tile height in rem.
         */
        getTeaserTileHeight = function (iSegments) {
            var iReturn;
            iSegments = iSegments || 1;
            if (jQuery.device.is.phone) {
                iReturn = (7 * iSegments) + "rem";
            } else {
                iReturn = (11 * iSegments - 1) + "rem";
            }
            return iReturn;
        };

        getFieldSumsByPriority = function (aFields) {
            var i, iFieldsWithPrioHigh = 0, iFieldsWithPrioMedium = 0, iFieldsWithPrioLow = 0, oImportance;
            for (i = 0; i < aFields.length; i += 1) {
                oImportance = getImportanceOfRecord(aFields[i]);
                if (oImportance) {
                    switch (oImportance) {
                    case "High":
                        iFieldsWithPrioHigh += 1;
                        break;
                    case "Medium":
                        iFieldsWithPrioMedium += 1;
                        break;
                    case "Low":
                        iFieldsWithPrioLow += 1;
                        break;
                    }
                }
            }
            return {High: iFieldsWithPrioHigh, Medium: iFieldsWithPrioMedium, Low: iFieldsWithPrioLow};
        };

        /**
         * Returns the importance (High, Medium, Low) of a given record. Necessary as the annotation for importance
         * changed in OData V4 and we'd like to support both V2 and V4.
         * @param {object} Record as object.
         * @return {string} Importance of the record (High, Medium, Low).
         */
        getImportanceOfRecord = function (oRecord) {
            var sEnumMember = "";
            if (oRecord.Importance) {
                sEnumMember = oRecord.Importance.EnumMember;
            } else if (oRecord["com.sap.vocabularies.UI.v1.Importance"]) {
                sEnumMember = oRecord["com.sap.vocabularies.UI.v1.Importance"].EnumMember;
            }
            return sEnumMember.substr(sEnumMember.indexOf("/") + 1);
        };

        kpiTileFactory = function (oModel, aDataPoint, sEntityType, sBindingPath) {
            var bIsNumeric = false, oTile, fractionDigits, oBinding, oBindingInfo;
            oTile = new sap.suite.ui.commons.KpiTile({
                doubleFontSize: false
            });
            // Set ValueFormat
            if (aDataPoint.ValueFormat) {
                fractionDigits = aDataPoint.ValueFormat.NumberOfFractionalDigits.Int;
            }
            if (aDataPoint.Title && aDataPoint.Title.String) {
                oTile.setDescription(aDataPoint.Title.String);
            } else {
                if (aDataPoint.Title && aDataPoint.Title.Path) {
                    oTile.bindProperty("description", {path: aDataPoint.Title.Path});
                }
            }
            if (aDataPoint.Value && aDataPoint.Value.String) {
                oTile.setValue(aDataPoint.Value.String);
            } else {
                if (aDataPoint.Value && aDataPoint.Value.Path) {
                    oBinding = fieldBinding(aDataPoint.Value, aDataPoint.Value.EdmType, sEntityType);
                    // HANA Live
                    if (oBinding.fnChange) {
                        oTile.setModel(oModel);
                        oTile.bindElement(sBindingPath);
                        oTile.getElementBinding().attachChange(oBinding.fnChange, oTile);
                    }
                    if (oBinding.String) {
                        // Live KPIs detected
                        if ($.isNumeric(oBinding.String)) {
                            bIsNumeric = true;
                            oTile.setValue(kpiValueFormatter(oBinding.String, fractionDigits));
                        } else {
                            oTile.setValue(oBinding.String);
                        }
                    } else if (oBinding.BindingInfo) {
                        // Check for currencies/unit of measures
                        oBindingInfo = oBinding.BindingInfo;
                        if (oBindingInfo.parts && oBindingInfo.parts.length === 2) {
                            oTile.bindProperty("valueUnit", oBindingInfo.parts[0]);
                            oBindingInfo.parts[1].type = undefined;
                            oBindingInfo.parts[1].formatter = (function () {
                                return function (value) {
                                    return kpiValueFormatter(value, fractionDigits);
                                };
                            }(fractionDigits));
                            oTile.bindProperty("value", oBindingInfo.parts[1]);
                        } else if (oBindingInfo.parts && oBindingInfo.parts.length === 1) {
                            oBindingInfo.parts[0].type = undefined;
                            oBindingInfo.parts[0].formatter = (function () {
                                return function (value) {
                                    return kpiValueFormatter(value, fractionDigits);
                                };
                            }(fractionDigits));
                            oTile.bindProperty("value",  oBindingInfo);
                        } else {
                            oTile.bindProperty("value", oBindingInfo);
                        }
                    }
                }
            }
            // Set font size
            if (aDataPoint.Value.EdmType === "Edm.Decimal" || aDataPoint.Value.EdmType === "Edm.Double" || aDataPoint.Value.EdmType === "Edm.Single" ||
                    aDataPoint.Value.EdmType === "Edm.Int16" || aDataPoint.Value.EdmType === "Edm.Int32" || aDataPoint.Value.EdmType === "Edm.Int64" ||
                    bIsNumeric === true) {
                oTile.setDoubleFontSize(true);
            }
            return oTile;
        };

        thingInspectorFactory = function (sUri, sAnnotationUri, oTI) {
            var sService, oModel, sEntitySet, sBindingPath, oMetadata, sEntityType, oHeaderInfo, aFacets,i,
                oContent = {}, sNavPath, oDataReadCallback, oDataReadCallbackGeo, functionParameters, j, k, sBusinessParams,
                oGeneralFacet, oLinks, oTransactionSheet, oActionSheet, sAnnotationUriPath, sAnnotationUriAppAndFilename, oSapSuiteRb,
                iMaxItemsInGeneral, iFieldsWithPrioHigh = 0, iFieldsWithPrioMedium = 0, sUseTerm, sNavEntitySet, sEntitySetForFacet,
                sNavEntityType, sEntityTypeForFacet, aFacetContent, oImportance, aOperations = [], sBatchPath, oDataReadCallbackContacts,
                iFreeSpaceBuffer, aContent, oFieldSumsByPriority, iFieldsOnOverview, oFormLayout, sGeneralTileHeight, oAddBookmarkButton,
                iRowSpan, oFacet, oGeoContent, sNavType, aNsEntityType, m, metadataSchema, sNameSpace, sCardinality, parameters, oEmailBtn,
                thingInspectorBindingChanged, numKpiTiles = 0, key, aDataPoint, sTerm, oDataReadCallbackMedia, sHeight,
                oDataReadCallbackError, adjustHorizontalLayoutContent, extractContactsFromBatchRequest;
            sService = getServiceFromUri(sUri);
            //Because of a bug in icm the bsp application name and file name must be in lower case
            sAnnotationUriPath = sAnnotationUri.substring(0, sAnnotationUri.substring(0, sAnnotationUri.lastIndexOf("/")).lastIndexOf("/"));
            sAnnotationUriAppAndFilename = sAnnotationUri.substring(sAnnotationUri.substring(0, sAnnotationUri.lastIndexOf("/")).lastIndexOf("/"));
            //Transformation to lowercase can be prohibited by adding the encoded url parameter "cbn_keep_anno_case" with value "true".
            if (window.location.search.indexOf("cbn_keep_anno_case%3Dtrue") === -1) {
                sAnnotationUriAppAndFilename = sAnnotationUriAppAndFilename.toLowerCase();
            }
            oModel = new sap.ui.model.odata.ODataModel(sService,
                    {annotationURI: sAnnotationUriPath + sAnnotationUriAppAndFilename, loadAnnotationsJoined: true, loadMetadataAsync: false, json: true});
            oModel.setCountSupported(false);
            oTI.setModel(oModel);
            sEntitySet = getEntitySetFromUri(sUri, oModel);
            sBindingPath = "/" + sUri.slice(sService.length);
            oMetadata = oModel.getServiceMetadata();
            oMapping = oModel.getServiceAnnotations();
            sEntityType = getEntityType(sEntitySet, oMetadata);
            oHeaderInfo = oMapping[sEntityType]["com.sap.vocabularies.UI.v1.HeaderInfo"];
            aFacets = oMapping[sEntityType]["com.sap.vocabularies.UI.v1.Facets"];
            oTI.bindElement(sBindingPath, getExpand(sEntitySet, oMetadata));
            oSapSuiteRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");

            // Begin of rendering

            // Add a business object specific style class for branding
            oTI.addStyleClass("sapFactsheetUtiThingType" + sEntitySet.replace(/\s/g, ""));

            // Factsheet title e. g. "Article", "Sales Order", etc.
            if (oHeaderInfo.TypeName.String) {
                oTI.setTitle(oHeaderInfo.TypeName.String);
            } else {
                if (oHeaderInfo.TypeName.Path) {
                    oTI.bindProperty("title", {path: oHeaderInfo.TypeName.Path});
                }
            }

            // Optional image/icon to the left of the title
            if (oHeaderInfo.ImageUrl && oHeaderInfo.ImageUrl.String) {
                oTI.setIcon(oHeaderInfo.ImageUrl.String);
            } else if (oHeaderInfo.ImageUrl && oHeaderInfo.ImageUrl.Path) {
                oTI.bindProperty("icon", {path: oHeaderInfo.ImageUrl.Path});
            } else if (oHeaderInfo.TypeImageUrl && oHeaderInfo.TypeImageUrl.String) {
                oTI.setIcon(oHeaderInfo.TypeImageUrl.String);
            } else if (oHeaderInfo.TypeImageUrl && oHeaderInfo.TypeImageUrl.Path) {
                oTI.bindProperty("icon", {path: oHeaderInfo.TypeImageUrl.Path});
            }

            // Name and description of the factsheet
            if (oHeaderInfo.Title.Value.String) {
                oTI.setName(oHeaderInfo.Title.Value.String);
            } else {
                oTI.bindProperty("name", fieldBinding(oHeaderInfo.Title.Value, oHeaderInfo.Title.EdmType, sEntityType).BindingInfo);
            }
            if (oHeaderInfo.Description && oHeaderInfo.Description.Value) {
                if (oHeaderInfo.Description.Value.String) {
                    oTI.setDescription(oHeaderInfo.Description.Value.String);
                } else {
                    oTI.bindProperty("description", fieldBinding(oHeaderInfo.Description.Value, oHeaderInfo.Description.EdmType, sEntityType).BindingInfo);
                }
            }

            // KPI tiles
            for (key in oMapping[sEntityType]) {
                if (oMapping[sEntityType].hasOwnProperty(key)) {
                    if (key.search("com.sap.vocabularies.UI.v1.DataPoint") !== -1) {
                        aDataPoint = oMapping[sEntityType][key];
                        if (aDataPoint) {
                            oTI.addKpi(kpiTileFactory(oModel, aDataPoint, sEntityType, sBindingPath));
                            numKpiTiles += 1;
                        }
                    }
                    // max. 3 KPIs supported
                    if (numKpiTiles >= 3) {
                        break;
                    }
                }
            }

            // General facet
            for (i = 0; i < aFacets.length; i += 1) {
                if (aFacets[i]["com.sap.vocabularies.UI.v1.IsSummary"]) {
                    oGeneralFacet = aFacets[i];
                    break;
                }
            }
            if (oGeneralFacet) {
                iMaxItemsInGeneral = 15;
                for (j = 0; j < oGeneralFacet.Facets.length; j += 1) {
                    sUseTerm = oGeneralFacet.Facets[j].Target.AnnotationPath.substring(oGeneralFacet.Facets[j].Target.AnnotationPath.lastIndexOf("@") + 1);
                    sNavPath = oGeneralFacet.Facets[j].Target.AnnotationPath;
                    sNavPath = sNavPath.substring(0, sNavPath.lastIndexOf("@") - 1);
                    oGeneralFacet.Facets[j].NavPath = sNavPath;
                    sNavEntitySet = getNavEntitySet(sEntitySet, sNavPath, oMetadata);
                    oGeneralFacet.Facets[j].NavEntitySet = sNavEntitySet;
                    if (sNavEntitySet) {
                        sEntitySetForFacet = sNavEntitySet;
                    } else {
                        sEntitySetForFacet = sEntitySet;
                    }
                    oGeneralFacet.Facets[j].EntitySet = sEntitySetForFacet;
                    sNavEntityType = getEntityType(sNavEntitySet, oMetadata);
                    if (sNavEntityType) {
                        sEntityTypeForFacet = sNavEntityType;
                    } else {
                        sEntityTypeForFacet = sEntityType;
                    }
                    oGeneralFacet.Facets[j].EntityType = sEntityTypeForFacet;
                    aFacetContent = [];
                    if (oMapping[sEntityTypeForFacet][sUseTerm].length) {
                        aFacetContent = oMapping[sEntityTypeForFacet][sUseTerm];
                    } else if (oMapping[sEntityTypeForFacet][sUseTerm].Data.length) {
                        aFacetContent = oMapping[sEntityTypeForFacet][sUseTerm].Data;
                    }
                    oGeneralFacet.Facets[j].Content = aFacetContent;
                    for (i = 0; i < aFacetContent.length; i += 1) {
                        oImportance = getImportanceOfRecord(aFacetContent[i]);
                        if (oImportance === "High") {
                            iFieldsWithPrioHigh += 1;
                        } else if (oImportance === "Medium") {
                            iFieldsWithPrioMedium += 1;
                        }
                    }
                }
                if ((iFieldsWithPrioHigh + iFieldsWithPrioMedium) > iMaxItemsInGeneral) {
                    iFieldsWithPrioMedium = iMaxItemsInGeneral - iFieldsWithPrioHigh;
                    if (iFieldsWithPrioMedium < 0) {
                        iFieldsWithPrioMedium = 0;
                    }
                }
                // On mobile phones only fields with priority high should be displayed
                if (jQuery.device.is.phone) {
                    iFieldsWithPrioMedium = 0;
                }
                iFreeSpaceBuffer = iMaxItemsInGeneral - iFieldsWithPrioHigh - iFieldsWithPrioMedium;
                aContent = [];
                iFieldsOnOverview = iFieldsWithPrioMedium + iFieldsWithPrioHigh;
                for (j = 0; j < oGeneralFacet.Facets.length; j += 1) {
                    oFormLayout = formLayoutFactory(oModel, oGeneralFacet.Facets[j].EntitySet, oGeneralFacet.Facets[j].Content,
                            {High: iFieldsWithPrioHigh, Medium: iFieldsWithPrioMedium, Low: 0}, null).addStyleClass("sapFactsheetUtiTilePadding").addStyleClass("sapFactsheetUtiTable");
                    if (j > 0) {
                        oFormLayout.addStyleClass("sapFactsheetUtiPaddingTop");
                    }
                    if (oGeneralFacet.Facets[j].NavPath) {
                        oFormLayout.bindElement(sBindingPath + "/" + oGeneralFacet.Facets[j].NavPath);
                    }
                    oFieldSumsByPriority = getFieldSumsByPriority(oGeneralFacet.Facets[j].Content);
                    iFieldsWithPrioHigh -= oFieldSumsByPriority.High;
                    iFieldsWithPrioMedium -= oFieldSumsByPriority.Medium;
                    if (((oFieldSumsByPriority.High > 0) && ((iFieldsWithPrioHigh + oFieldSumsByPriority.High) > 0)) ||
                            ((oFieldSumsByPriority.Medium > 0) && ((iFieldsWithPrioMedium + oFieldSumsByPriority.Medium) > 0))) {
                        aContent.push(oFormLayout);
                        // If there is more than one facet there will be some space between the facets. Because of this the number of fields
                        // to be displayed must be reduced.
                        if (j > 0) {
                            if (iFreeSpaceBuffer > 0) {
                                iFreeSpaceBuffer -= 1;
                            } else if (iFieldsWithPrioMedium > 0) {
                                iFieldsWithPrioMedium -= 1;
                            } else if (iFieldsWithPrioHigh > 0) {
                                iFieldsWithPrioHigh -= 1;
                            }
                        }
                    }
                    if ((iFieldsWithPrioHigh < 1) && (iFieldsWithPrioMedium < 1)) {
                        break;
                    }
                }
                if (iFieldsWithPrioHigh < 0) {
                    iFieldsWithPrioHigh = 0;
                }
                if (iFieldsWithPrioMedium < 0) {
                    iFieldsWithPrioMedium = 0;
                }
                oContent = new sap.ui.layout.VerticalLayout({content: aContent, width: "100%"});
                sGeneralTileHeight = getTeaserTileHeight();
                iRowSpan = 1;
                if ((iFieldsOnOverview > 3) && (iFieldsOnOverview <= 9)) {
                    sGeneralTileHeight = getTeaserTileHeight(2);
                    iRowSpan = 2;
                } else if (iFieldsOnOverview > 9) {
                    sGeneralTileHeight = getTeaserTileHeight(3);
                    iRowSpan = 3;
                }
                oFacet = new sap.suite.ui.commons.FacetOverview({
                    title: oSapSuiteRb.getText("UNIFIEDTHINGINSPECTOR_GENERAL_INFORMATION_HEADER_TEXT"),
                    rowSpan: iRowSpan,
                    content: oContent
                });
                if (jQuery.device.is.phone) {
                    oFacet.setHeightType(sap.suite.ui.commons.FacetOverviewHeight.Auto);
                } else {
                    oFacet.setHeight(sGeneralTileHeight);
                }
                oFacet.addStyleClass("sapFactsheetUtiGeneralInformationOverviewFacet");
                oFacet.attachPress({facets: oGeneralFacet}, function (oEvent, oData) {
                    var sDefaultSpan, oGrid, oTG, oVL, oContent;
                    oTI.removeAllFacetContent();
                    oTG = new sap.suite.ui.commons.UnifiedThingGroup();
                    oTG.setDescription(getTIDescription());
                    oTG.setTitle(oSapSuiteRb.getText("UNIFIEDTHINGINSPECTOR_GENERAL_INFORMATION_HEADER_TEXT"));
                    oTG.addStyleClass("sapFactsheetUtiGeneralInformationUtg");
                    if (oData.facets.Facets.length > 1) {
                        sDefaultSpan = "L6 M12 S12";
                    } else {
                        sDefaultSpan = "L12 M12 S12";
                    }
                    oVL = new sap.ui.layout.VerticalLayout({width: "100%"});
                    for (i = 0; i < oData.facets.Facets.length; i += 1) {
                        if (i % 2 === 0) {
                            oGrid = new sap.ui.layout.Grid({
                                hSpacing: 1,
                                vSpacing: 1,
                                defaultSpan: sDefaultSpan
                            });
                        }
                        oContent = facetFactory(oModel, sEntitySet, oData.facets.Facets[i], sBindingPath);
                        oContent.addStyleClass("sapFactsheetUtiGeneralInformationUtgContent");
                        if ((i === 0) && (oData.facets.Facets.length > 1) && (oContent.getTitle().trim() === "")) {
                            oContent.setTitle(oSapSuiteRb.getText("UNIFIEDTHINGINSPECTOR_GENERAL_INFORMATION_HEADER_TEXT"));
                        }
                        oGrid.addContent(oContent);
                        if (i % 2 !== 0) {
                            oVL.addContent(oGrid);
                        }
                    }
                    if (i % 2 !== 0) {
                        oVL.addContent(oGrid);
                    }
                    oTG.setContent(oVL);
                    oTI.addFacetContent(oTG);
                    oTI.navigateToDetail();
                });
                oTI.addFacet(oFacet);
            }

            // Callback method of the oData reads for the geofacet
            oDataReadCallbackGeo = function (functionParameters) {
                return function (data) {
                    var oGeoModel, oGeoLocation, sPos, oNewFlags,
                        processGeoApplication, geoMapCallFailed, submitListener, openWindowListener, closeWindowListener,
                        oJsonModel, sBindingPath, oContentAddress, oHeaderInfoGeo, oIdentificationGeo, oContentTitle, oContentDescription,
                        oContentDetail, sCaption, iCount, i;
                    if ((functionParameters.cardinality === "*" && data.results && data.results.length && data.results.length !== 0) ||
                            (functionParameters.cardinality === "1" && data)) {
                        oJsonModel = new sap.ui.model.json.JSONModel();
                        if (functionParameters.cardinality === "*") {
                            if (data.results && data.results.length) {
                                oJsonModel.setData(data);
                            }
                        } else {
                            oJsonModel.setData({result: data});
                            sBindingPath = "/result";
                        }

                        oGeoModel = new sap.ui.model.odata.ODataModel("/sap/opu/odata/sap/VBI_APPL_DEF_SRV", false);
                        oGeoLocation = oMapping[functionParameters.navigationType]["com.sap.vocabularies.UI.v1.GeoLocation"];
                        oHeaderInfoGeo = oMapping[functionParameters.navigationType]["com.sap.vocabularies.UI.v1.HeaderInfo"];
                        oIdentificationGeo = oMapping[functionParameters.navigationType]["com.sap.vocabularies.UI.v1.Identification"];
                        if (oGeoLocation.Longitude && oGeoLocation.Latitude) {
                            oNewFlags = {
                                "Data": {
                                    "Set": {
                                        "N": [
                                            {
                                                "name": "Spots",
                                                "E" : []
                                            }
                                        ]
                                    }
                                }
                            };
                            if (functionParameters.cardinality === "1") {
                                if (oGeoLocation.Longitude.Path && oGeoLocation.Latitude.Path) {
                                    sPos = data[oGeoLocation.Longitude.Path] + ";" + data[oGeoLocation.Latitude.Path] + ";0";
                                }
                                oNewFlags.Data.Set.N[0].E.push({"A": sPos, "I": "pin_blue.png" });
                            } else {
                                for (i = 0; i < data.results.length; i += 1) {
                                    if (oGeoLocation.Longitude.Path && oGeoLocation.Latitude.Path) {
                                        sPos = data.results[i][oGeoLocation.Longitude.Path] + ";" + data.results[i][oGeoLocation.Latitude.Path] + ";0";
                                    }
                                    oNewFlags.Data.Set.N[0].E.push({"A": sPos, "I": "pin_blue.png" });
                                }
                                // Set to first position
                                if (data.results.length !== 0) {
                                    sPos = data.results[0][oGeoLocation.Longitude.Path] + ";" + data.results[0][oGeoLocation.Latitude.Path] + ";0";
                                }
                            }
                        }
                        iCount = parseInt(data.__count, 10);
                        if (Number(iCount)) {
                            functionParameters.facet.setQuantity(iCount);
                        }
                        submitListener = function (oEvent) {
                            var oEventJSON, sSpot, oPopupJSON, popUpHeight, popUpWidth;
                            // Get the Spot on which was clicked
                            oEventJSON = $.parseJSON(oEvent.getParameters().data);
                            if (oEventJSON.Action.name === "DETAIL_REQUEST" && oEventJSON.Action.instance) {
                                sSpot = oEventJSON.Action.instance;
                                // Parse index of clicked Spot
                                if (oJsonModel.oData.results) {
                                    sBindingPath = "/results/" + sSpot.split(".")[1];
                                }
                                sCaption = oHeaderInfoGeo.TypeName.String.substring(0, 17); // caption must not be to long!

                                // Create JSON for Pop-Up
                                popUpHeight = parseFloat(getTeaserTileHeight(0.7)) * 16; // popup does not support rem -> do crude conversion
                                popUpWidth = parseFloat(getTeaserTileHeight(1.5)) * 16;
                                oPopupJSON = {
                                    "SAPVB": {
                                        "version": "2.0",
                                        "xmlns:VB": "VB",
                                        "Windows": {
                                            "Remove": {
                                                "name": "Detail1"
                                            },
                                            "Set": {
                                                "name": "Detail1",
                                                "Window": {
                                                    "id": "Detail1",
                                                    "type": "callout",
                                                    "refParent": "Main",
                                                    "refScene": "",
                                                    "offsetX": "16",
                                                    "offsetY": "-27",
                                                    "modal": "false",
                                                    "width": popUpWidth,
                                                    "height": popUpHeight,
                                                    "caption": sCaption,
                                                    "pos.bind": sSpot + ".GeoPosition"
                                                }
                                            }
                                        },
                                        "Scenes": {
                                            "Set": {
                                                "name": "Details",
                                                "Scene": {
                                                    "id": "Details",
                                                    "navControlVisible": "false"
                                                }
                                            }
                                        }
                                    }
                                };
                                this.load(oPopupJSON);
                            }
                        };
                        openWindowListener = function (oEvent) {
                            var key, sPopUpWidth, sNavEntitySet, iMaxFields;
                            if (!oContentTitle) {
                                // Content of Pop-Up doesn't exist yet.
                                // Get title and description of Pop-Up from HeaderInfo Term
                                oContentTitle = dataField(oHeaderInfoGeo.Title, functionParameters.navigationType, oMetadata);
                                oContentTitle.setModel(oJsonModel);
                                oContentTitle.bindElement(sBindingPath);
                                oContentDescription = dataField(oHeaderInfoGeo.Description, functionParameters.navigationType, oMetadata);
                                oContentDescription.setModel(oJsonModel);
                                oContentDescription.bindElement(sBindingPath);

                                // Get formatted address from property "label"
                                for (key in oGeoLocation.Address) {
                                    if (key === "label") {
                                        oContentAddress = dataField({Value: oGeoLocation.Address[key]}, functionParameters.navigationType, oMetadata);
                                        oContentAddress.setModel(oJsonModel);
                                        oContentAddress.bindElement(sBindingPath);
                                        break;
                                    }
                                }

                                // Calculate maximal number of displayed high fields depending on device
                                iMaxFields = 7; //Default value for desktop
                                if (jQuery.device.is.tablet && jQuery.device.is.landscape) {
                                    iMaxFields = 4;
                                } else if (jQuery.device.is.tablet && jQuery.device.is.portrait) {
                                    iMaxFields = 5;
                                } else if (jQuery.device.is.phone && jQuery.device.is.landscape) {
                                    iMaxFields = 2;
                                } else if (jQuery.device.is.phone && jQuery.device.is.portrait) {
                                    iMaxFields = 3;
                                }

                                // Create a content for the additional fields with maximally 7 prio high field from Identification Term
                                oContentDetail = new sap.ui.layout.VerticalLayout({width: "100%"}).setModel(oModel);
                                if (functionParameters.navigationPath) {
                                    // GeoData is on subnode
                                    sNavEntitySet = getNavEntitySet(functionParameters.entitySet, functionParameters.navigationPath, oMetadata);
                                    oContentDetail.addContent(formLayoutFactory(oModel, sNavEntitySet, oIdentificationGeo, {High: iMaxFields})).setModel(oJsonModel).bindElement(sBindingPath);
                                } else {
                                    // GeoData is on root node 
                                    oContentDetail.addContent(formLayoutFactory(oModel, functionParameters.entitySet, oIdentificationGeo,
                                            {High: iMaxFields})).setModel(oJsonModel).bindElement(sBindingPath);
                                }
                            } else {
                                // Content of Pop-Up exists, rebind elements
                                oContentTitle.bindElement(sBindingPath);
                                if (oContentDescription) {
                                    oContentDescription.bindElement(sBindingPath);
                                }
                                if (oContentAddress) {
                                    oContentAddress.bindElement(sBindingPath);
                                }
                                if (oContentDetail) {
                                    oContentDetail.bindElement(sBindingPath);
                                }
                            }
                            sPopUpWidth = parseFloat(getTeaserTileHeight(1.5)) * 16 * 0.95 + "px"; // Popup does not support rem -> do crude conversion

                            if (oContentTitle) {
                                oContentTitle.placeAt(oEvent.getParameter("contentarea").id);
                                oContentTitle.addStyleClass("sapFactsheetUtiGeoPopupHead");
                                if (jQuery.device.is.phone) {
                                    oContentTitle.addStyleClass("sapFactsheetUtiGeoPopupHeadFontPhone");
                                }
                                oContentTitle.setWidth(sPopUpWidth);
                            }
                            if (oContentDescription) {
                                oContentDescription.placeAt(oEvent.getParameter("contentarea").id);
                                oContentDescription.addStyleClass("sapFactsheetUtiGeoPopupDescr");
                                if (jQuery.device.is.phone) {
                                    oContentDescription.addStyleClass("sapFactsheetUtiGeoPopupDescrFontPhone");
                                }
                                oContentDescription.setWidth(sPopUpWidth);
                            }
                            if (oContentAddress) {
                                oContentAddress.placeAt(oEvent.getParameter("contentarea").id);
                                oContentAddress.addStyleClass("sapFactsheetUtiGeoPopupText");
                                oContentAddress.setWidth(sPopUpWidth);
                            }
                            // If no Content available then don't show the control with "No Data"
                            if (oContentDetail && oContentDetail.getContent()[0] && oContentDetail.getContent()[0].getContent
                            		&& oContentDetail.getContent()[0].getContent().length > 0) {
                                oContentDetail.placeAt(oEvent.getParameter("contentarea").id);
                                oContentDetail.addStyleClass("sapFactsheetUtiGeoPopupText");
                                oContentDetail.setWidth(sPopUpWidth);
                            }
                        };
                        closeWindowListener = function (oEvent) {
                            if (oContentTitle) {
                                oContentTitle.destroy();
                                oContentTitle = undefined;
                            }
                            if (oContentDescription) {
                                oContentDescription.destroy();
                                oContentDescription = undefined;
                            }
                            if (oContentAddress) {
                                oContentAddress.destroy();
                                oContentAddress = undefined;
                            }
                            if (oContentDetail) {
                                oContentDetail.destroy();
                                oContentDetail = undefined;
                            }
                            $(oEvent.getParameter("contentarea").id).empty();
                        };
                        processGeoApplication = function (functionParameters) {
                            return function (data) {
                                var oGeoJSON, oGeoContentDetail, oTG, sJSON, i;
                                sJSON = data.ProjectJSON;
                                sJSON = sJSON.indexOf("{") ? sJSON.substr(sJSON.indexOf("{")) : sJSON;  // Workaround: to get rid of a BOM character at the first position
                                oGeoJSON = $.parseJSON(sJSON);
                                oGeoJSON.SAPVB.Scenes.Set.SceneGeo.initialStartPosition = sPos;
                                oGeoJSON.SAPVB.Scenes.Set.SceneGeo.initialZoom = 12;
                                // Register click/touch event on map
                                oGeoJSON.SAPVB.Actions.Set.Action.push({
                                    id:"200",
                                    name: "TAP_ON_MAP",
                                    refEvent:"Click",
                                    refScene:"MainScene",
                                    refVO:"Map"
                                });
                                if (oNewFlags) {
                                    oGeoJSON.SAPVB.Data = oNewFlags.Data;
                                }
                                // Workaround: for the Spots set the scale attribute to a vector (x,y,z)
                                for (i = 0; i < oGeoJSON.SAPVB.Scenes.Set.SceneGeo.VO.length; i += 1) {
                                    if (oGeoJSON.SAPVB.Scenes.Set.SceneGeo.VO[i].datasource === "Spots") {
                                        if (oGeoJSON.SAPVB.Scenes.Set.SceneGeo.VO[i].scale && oGeoJSON.SAPVB.Scenes.Set.SceneGeo.VO[i].scale.split(";").length !== 3) {
                                            oGeoJSON.SAPVB.Scenes.Set.SceneGeo.VO[i].scale = "1.0;1.0;1.0";
                                            break;
                                        }
                                    }
                                }
                                // listen to click/touch event on map on the overview tile
                                functionParameters.facet.getContent().attachSubmit(function (oEvent) {
                                    // Workaround for mobile devices
                                    // fire Press event if any action is done (touch/tap/zoom) on map on overview tile
                                    if (jQuery.device.is.tablet || jQuery.device.is.phone) {
                                        functionParameters.facet.firePress();
                                    }
                                });

                                functionParameters.facet.getContent().load(oGeoJSON);
                                functionParameters.facet.attachPress("", function (oEvent, oData) {
                                    var aLong = [], aLat = [], i, newHeight;
                                    // Create GeoMap content
                                    if (!oGeoContentDetail) {
                                        oGeoContentDetail = new sap.ui.vbm.VBI({
                                            width: "100%",
                                            height: "100%",
                                            plugin: false,
                                            config: null
                                        });
                                        oGeoContentDetail.addStyleClass("sapFactsheetUtiGeoPopup");
                                    }
                                    oGeoJSON.SAPVB.Scenes.Set.SceneGeo.NavigationDisablement.move = "false";
                                    oGeoJSON.SAPVB.Scenes.Set.SceneGeo.NavigationDisablement.zoom = "false";
                                    oGeoJSON.SAPVB.Scenes.Set.SceneGeo.NavigationDisablement.pitch = "false";
                                    oGeoJSON.SAPVB.Scenes.Set.SceneGeo.NavigationDisablement.yaw = "false";
                                    oGeoJSON.SAPVB.Scenes.Set.SceneGeo.SuppressedNavControlVisibility = "false";
                                    oGeoContentDetail.load(oGeoJSON);
                                    // Collect longitude and latitude data of all locations
                                    if (functionParameters.cardinality === "*") {
                                        for (i = 0; i < oJsonModel.oData.results.length; i += 1) {
                                            aLong.push(oJsonModel.oData.results[i][oGeoLocation.Longitude.Path]);
                                            aLat.push(oJsonModel.oData.results[i][oGeoLocation.Latitude.Path]);
                                        }
                                    }
                                    oGeoContentDetail.attachSubmit(submitListener);
                                    oGeoContentDetail.attachOpenWindow(openWindowListener);
                                    oGeoContentDetail.attachCloseWindow(closeWindowListener);

                                    oTG = new sap.suite.ui.commons.UnifiedThingGroup({
                                        content: oGeoContentDetail,
                                        title: functionParameters.facetContent.Label.String,
                                        description: getTIDescription()
                                    });

                                    oTI.removeAllFacetContent();
                                    oTI.addFacetContent(oTG);
                                    oTI.navigateToDetail();
                                    // Workaround: UnifiedThingGroup doesn't propagate the height property to the childs, therefore we calculate the height manually
                                    oTI.attachAfterNavigate(aLong, function (oEvent) {
                                        if (oEvent.getParameters().getParameters().toId.indexOf("-detail-page") !== -1) {
                                            // Resize map to full container size on desktop and tablet and to 300px on phone
                                            if (jQuery.device.is.phone) {
                                                newHeight = "300px";
                                            } else {
                                                newHeight = Math.floor($("#" + oEvent.getParameters().getParameters().toId + "-cont").height() - 128) + "px";
                                            }
                                            oGeoContentDetail.setHeight(newHeight);
                                            // Zoom to show all locations
                                            if (aLong.length > 1) {
                                                oGeoContentDetail.zoomToGeoPosition(aLong, aLat);
                                            }
                                        }
                                    });
                                });
                            };
                        };
                        geoMapCallFailed = function (facet) {
                            return function (error) {
                                // OData returns an error. Don't display the map facet.
                                oTI.removeFacet(facet);
                            };
                        };
                        oGeoModel.read("VBIApplicationSet('ZFACTSHEETS')", "", "", false, processGeoApplication(functionParameters), geoMapCallFailed(functionParameters.facet));
                    } else {
                        functionParameters.facet.setQuantity(undefined);
                        functionParameters.facet.addStyleClass("sapFactsheetUtiEmptyTile");
                        functionParameters.facet.setHeightType(jQuery.device.is.phone ? sap.suite.ui.commons.FacetOverviewHeight.Auto : sap.suite.ui.commons.FacetOverviewHeight.S);
                        functionParameters.facet.setContent(undefined);
                        functionParameters.facet.setTitle(undefined);
                    }
                };
            };

            adjustHorizontalLayoutContent = function (oEvent) {
                var iHorizontalLayoutWidth, iHorizontalLayoutWidthLeft;
                iHorizontalLayoutWidth = oEvent.srcControl.getParent().getDomRef().clientWidth;
                iHorizontalLayoutWidthLeft = iHorizontalLayoutWidth;
                if (oEvent.srcControl.getParent().getContent()[0]) {
                    iHorizontalLayoutWidthLeft -= oEvent.srcControl.getParent().getContent()[0].getDomRef().clientWidth;
                    if (iHorizontalLayoutWidth < oEvent.srcControl.getParent().getContent()[0].getDomRef().clientWidth) {
                        oEvent.srcControl.getParent().getContent()[0].getDomRef().setAttribute("style", "width:" + iHorizontalLayoutWidth + "px");
                        return;
                    }
                }
                if (oEvent.srcControl.getParent().getContent()[1]) {
                    iHorizontalLayoutWidthLeft -= oEvent.srcControl.getParent().getContent()[1].getDomRef().clientWidth;
                }
                if (iHorizontalLayoutWidthLeft < 10) {
                    iHorizontalLayoutWidthLeft = 0;
                }
                if (oEvent.srcControl.getParent().getContent()[2]) {
                    oEvent.srcControl.getParent().getContent()[2].getDomRef().setAttribute("style", "width:" + iHorizontalLayoutWidthLeft + "px");
                }
            };

            // Callback method of the oData reads for the further facets
            oDataReadCallback = function (functionParameters) {
                return function (data) {
                    var oJsonModel, oBadge, tableItemFactory, oTitle, oData, oMainInfo, oHLayout, sSetTitle, i,
                        oContent, iCount, oVLayoutForLabelValuePairs, aPropertyExtensions, oHLayoutForTitle, oTitleLabel,
                        oHLayoutForMainInfo, oMainInfoLabel, oHLayoutForSecondaryInfo, oSecondaryInfoLabel, oSecondaryInfo,
                        oImageUrl, oHLayoutForIconAndText, iSize, oImage, sAttribute, bResultNotEmpty, sSeparator = "", oAnnotationPath,
                        oChart, oLabel, aDimensions, aMeasures, oDataset;
                    oJsonModel = new sap.ui.model.json.JSONModel();
                    if (functionParameters.facetContent.Target && functionParameters.facetContent.Target.AnnotationPath
                            && functionParameters.facetContent.Target.AnnotationPath.split("#")[1]
                            && oMapping[functionParameters.navigationType]["com.sap.vocabularies.UI.v1.Badge#" + functionParameters.facetContent.Target.AnnotationPath.split("#")[1]]) {
                        oBadge = oMapping[functionParameters.navigationType]["com.sap.vocabularies.UI.v1.Badge#" + functionParameters.facetContent.Target.AnnotationPath.split("#")[1]];
                    } else {
                        oBadge = oMapping[functionParameters.navigationType]["com.sap.vocabularies.UI.v1.Badge"];
                    }
                    if (functionParameters.cardinality === "*") {
                        if (data.results && data.results.length) {
                            oJsonModel.setData(data);

                            oAnnotationPath = functionParameters.facetContent.Target.AnnotationPath;
                            sTerm = oAnnotationPath.substring(oAnnotationPath.lastIndexOf("@") + 1);

                            if (sTerm === "com.sap.vocabularies.UI.v1.Chart") {

                                jQuery.sap.require("sap.viz.ui5.data.FlattenedDataset");

                                oChart = oMapping[functionParameters.navigationType]["com.sap.vocabularies.UI.v1.Chart"];
                                oLabel = oMapping.propertyExtensions[functionParameters.navigationType];

                                // Collect dimensions
                                aDimensions = [];
                                for (i = 0; i < oChart.Dimensions.length; i += 1) {
                                    aDimensions.push({
                                        axis : 1,
                                        name : oLabel[oChart.Dimensions[i].PropertyPath]["http://www.sap.com/Protocols/SAPData"].label,
                                        value : "{" + oChart.Dimensions[i].PropertyPath + "}"
                                    });
                                }

                                // Collect measures
                                aMeasures = [];
                                for (i = 0; i < oChart.Measures.length; i += 1) {
                                    aMeasures.push({
                                        name : oLabel[oChart.Measures[i].PropertyPath]["http://www.sap.com/Protocols/SAPData"].label,
                                        value : "{" + oChart.Measures[i].PropertyPath + "}"
                                    });
                                }

                                oDataset = new sap.viz.ui5.data.FlattenedDataset({
                                    dimensions : aDimensions,
                                    measures : aMeasures,
                                    data : { path : "/results" }
                                });

                                oContent = chartControlFactory(oChart.ChartType.EnumMember, oChart.Title, oChart.Description, oDataset);

                                // Attach the model to the chart and display it
                                oContent.setModel(oJsonModel);

                                functionParameters.facet.setHeightType(jQuery.device.is.phone ? sap.suite.ui.commons.FacetOverviewHeight.Auto : sap.suite.ui.commons.FacetOverviewHeight.XL);

                            } else {

                                tableItemFactory = function (sId, oContext) {
                                    oTitle = dataField(oBadge.Title, functionParameters.navigationType, oMetadata);
                                    oData = oContext.oModel.oData.results[oContext.sPath.substring(oContext.sPath.lastIndexOf("/") + 1)];
                                    if (oBadge.Title.RecordType && (oBadge.Title.RecordType === "com.sap.vocabularies.UI.v1.DataField")) {
                                        oTitle.addStyleClass("sapFactsheetUtiLabel");
                                    }
                                    if (oBadge.MainInfo) {
                                        oMainInfo = dataField(oBadge.MainInfo, functionParameters.navigationType, oMetadata);
                                    } else {
                                        oMainInfo = new sap.m.Text({text: ""});
                                    }
                                    oTitle.setWrapping(false);
                                    oTitle.addDelegate({
                                        onAfterRendering: function (oEvent) {
                                            adjustHorizontalLayoutContent(oEvent);
                                        }
                                    });
                                    oHLayout = new sap.ui.layout.HorizontalLayout().addStyleClass("sapFactsheetUtiHorizontalLayout");
                                    sSetTitle = false;
                                    if (oData[oBadge.Title.Value.Path]) {
                                        sSetTitle = true;
                                    }
                                    if (oBadge.Title.Value.Apply) {
                                        for (i = 0; i < oBadge.Title.Value.Apply.Parameters.length; i += 1) {
                                            if (oBadge.Title.Value.Apply.Parameters[i].Type === "Path") {
                                                if (oData[oBadge.Title.Value.Apply.Parameters[i].Value]) {
                                                    sSetTitle = true;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    sSeparator = "";
                                    if (sSetTitle) {
                                        oHLayout.addContent(oTitle);

                                        // Define the separator for the Tile values e.g. VALUE - VALUE or VALUE, VALUE
                                        if (oBadge.MainInfo && ((oBadge.MainInfo.EdmType && oBadge.MainInfo.EdmType === "Edm.Decimal") ||
                                                (oBadge.MainInfo.Value && oBadge.MainInfo.Value.Apply && oBadge.MainInfo.Value.Apply.Parameters[0]
                                                && oBadge.MainInfo.Value.Apply.Parameters[0].EdmType && oBadge.MainInfo.Value.Apply.Parameters[0].EdmType === "Edm.Decimal"))) {
                                            // Decimals 
                                            sSeparator = "comma";
                                        } else if (oBadge.MainInfo && oBadge.MainInfo.Value.Path && oData[oBadge.MainInfo.Value.Path]) {
                                            // Non decimal 
                                            sSeparator = "dash";
                                        } else if (oBadge.MainInfo && oBadge.MainInfo.Value.Apply) {
                                            // Non decimal concatenated fields
                                            for (i = 0; i < oBadge.MainInfo.Value.Apply.Parameters.length; i += 1) {
                                                if (oBadge.MainInfo.Value.Apply.Parameters[i].Type === "Path") {
                                                    if (oData[oBadge.MainInfo.Value.Apply.Parameters[i].Value]) {
                                                        sSeparator = "dash";
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        if (sSeparator === "dash") {
                                            oHLayout.addContent(new sap.ui.core.HTML({content: "<span class=\"sapFactsheetUtiSeparatorPadding sapMText\"> &ndash; </span>"}));
                                        }
                                        if (sSeparator === "comma") {
                                            oHLayout.addContent(new sap.m.Text({text: ", "}).addStyleClass("sapFactsheetUtiSeparatorPaddingForDecimal"));
                                        }
                                    }
                                    if (oBadge.MainInfo) {
                                        oMainInfo.setWrapping(false);
                                        oMainInfo.addDelegate({
                                            onAfterRendering: function (oEvent) {
                                                adjustHorizontalLayoutContent(oEvent);
                                            }
                                        });
                                        oHLayout.addContent(oMainInfo);
                                    }
                                    return new sap.m.ColumnListItem({
                                        cells: [ oHLayout ]
                                    });
                                };

                                oContent = new sap.m.Table({
                                    backgroundDesign: sap.m.BackgroundDesign.Transparent,
                                    showSeparators: sap.m.ListSeparators.None,
                                    columns: [new sap.m.Column({width: "100%" })],
                                    items: { path: "/results", factory: tableItemFactory }
                                });
                                oContent.setModel(oJsonModel);
                                oContent.addStyleClass("sapFactsheetUtiTilePadding");
                                oContent.addStyleClass("sapFactsheetUtiTable");
                                oContent.addStyleClass("sapFactsheetUtiTableNoHorizontalPadding");
                                oContent.addStyleClass("sapFactsheetUtiTableNoTopBorder");

                            }

                            iCount = parseInt(data.__count, 10);
                            if (Number(iCount)) {
                                functionParameters.facet.setQuantity(iCount);
                            }
                            functionParameters.facet.setContent(oContent);

                            functionParameters.facet.attachPress({facet: functionParameters.facetContent}, function (oEvent, oData) {
                                var oContent;
                                oTI.removeAllFacetContent();
                                oContent = facetFactory(oModel, functionParameters.entitySet, oData.facet, functionParameters.bindingPath);
                                oContent.setDescription(getTIDescription());
                                oTI.addFacetContent(oContent);
                                oTI.navigateToDetail();
                            });

                        } else {
                            functionParameters.facet.setQuantity(0);
                            functionParameters.facet.addStyleClass("sapFactsheetUtiEmptyTile");
                            functionParameters.facet.setHeightType(jQuery.device.is.phone ? sap.suite.ui.commons.FacetOverviewHeight.Auto : sap.suite.ui.commons.FacetOverviewHeight.S);
                        }
                    } else {
                        oJsonModel.setData({result: data});
                        // Check if response returned data as Gateway is currently not able to send the right HTTP status code for an empty document.
                        for (sAttribute in data) {
                            if (data.hasOwnProperty(sAttribute)) {
                                if (sAttribute !== "__metadata") {
                                    // A string which is not empty
                                    if (typeof data[sAttribute] === "string" && data[sAttribute]) {
                                        // Could be a number like f.e. "0.000" or "000000", that returns 0 when calling parseInt.
                                        // When the string contains chars parseInt returns NaN.
                                        if (parseInt(data[sAttribute], 10) !== 0) {
                                            bResultNotEmpty = true;
                                            break;
                                        }
                                    } else if (typeof data[sAttribute] === "number" && parseInt(data[sAttribute], 10) !== 0) {
                                        bResultNotEmpty = true;
                                        break;
                                    }
                                }
                            }
                        }
                        if (bResultNotEmpty) {
                            oVLayoutForLabelValuePairs = new sap.ui.layout.VerticalLayout();
                            aPropertyExtensions = (oMapping.propertyExtensions) ? oMapping.propertyExtensions[functionParameters.navigationType] : [];
                            oHLayoutForTitle = new sap.ui.layout.HorizontalLayout().addStyleClass("sapFactsheetUtiHLayoutLabelValue");
                            oTitleLabel = labelBinding(oBadge.Title, {}, aPropertyExtensions, true).addStyleClass("sapFactsheetUtiLabelMargin");
                            oTitle = dataField(oBadge.Title, functionParameters.navigationType, oMetadata);
                            oTitle.setModel(oJsonModel);
                            oTitle.bindElement("/result");
                            oHLayoutForTitle.addContent(oTitleLabel);
                            oHLayoutForTitle.addContent(oTitle);
                            oVLayoutForLabelValuePairs.addContent(oHLayoutForTitle);
                            if (oBadge.MainInfo) {
                                oHLayoutForMainInfo = new sap.ui.layout.HorizontalLayout().addStyleClass("sapFactsheetUtiHLayoutLabelValue");
                                oMainInfoLabel = labelBinding(oBadge.MainInfo, {}, aPropertyExtensions, true).addStyleClass("sapFactsheetUtiLabelMargin");
                                oMainInfo = dataField(oBadge.MainInfo, functionParameters.navigationType, oMetadata);
                                oMainInfo.setModel(oJsonModel);
                                oMainInfo.bindElement("/result");
                                oHLayoutForMainInfo.addContent(oMainInfoLabel);
                                oHLayoutForMainInfo.addContent(oMainInfo);
                                oVLayoutForLabelValuePairs.addContent(oHLayoutForMainInfo);
                            }
                            if (oBadge.SecondaryInfo) {
                                oHLayoutForSecondaryInfo = new sap.ui.layout.HorizontalLayout().addStyleClass("sapFactsheetUtiHLayoutLabelValue");
                                oSecondaryInfoLabel = labelBinding(oBadge.SecondaryInfo, {}, aPropertyExtensions, true).addStyleClass("sapFactsheetUtiLabelMargin");
                                oSecondaryInfo = dataField(oBadge.SecondaryInfo, functionParameters.navigationType, oMetadata);
                                oSecondaryInfo.setModel(oJsonModel);
                                oSecondaryInfo.bindElement("/result");
                                oHLayoutForSecondaryInfo.addContent(oSecondaryInfoLabel);
                                oHLayoutForSecondaryInfo.addContent(oSecondaryInfo);
                                oVLayoutForLabelValuePairs.addContent(oHLayoutForSecondaryInfo);
                            }
                            if (oBadge.TypeImageUrl || oBadge.ImageUrl) {
                                if (oBadge.ImageUrl) {
                                    oImageUrl = oBadge.ImageUrl;
                                } else {
                                    oImageUrl = oBadge.TypeImageUrl;
                                }
                                oHLayoutForIconAndText = new sap.ui.layout.HorizontalLayout();
                                iSize = "64px";
                                if (jQuery.device.is.phone) {
                                    iSize = "48px";
                                }
                                if (oImageUrl.String && (oImageUrl.String.substr(0, 11) === "sap-icon://")) {
                                    oImage = new sap.ui.core.Icon({size: iSize, width: iSize});
                                } else {
                                    oImage = new sap.m.Image({ width: iSize });
                                }
                                oImage.addStyleClass("sapFactsheetUtiRelIcon");
                                if (oImageUrl && oImageUrl.String) {
                                    oImage.setSrc(oImageUrl.String);
                                } else {
                                    if (oImageUrl && oImageUrl.Path) {
                                        oImage.bindProperty("src", oImageUrl.Path);
                                    }
                                }
                                oHLayoutForIconAndText.addContent(oImage);
                                oHLayoutForIconAndText.addContent(oVLayoutForLabelValuePairs);

                                functionParameters.facet.setContent(oHLayoutForIconAndText);
                            } else {
                                functionParameters.facet.setContent(oVLayoutForLabelValuePairs);
                            }

                            functionParameters.facet.attachPress({facet: functionParameters.facetContent}, function (oEvent, oData) {
                                var oContent;
                                oTI.removeAllFacetContent();
                                oContent = facetFactory(oModel, functionParameters.entitySet, oData.facet, functionParameters.bindingPath);
                                oContent.setDescription(getTIDescription());
                                oTI.addFacetContent(oContent);
                                oTI.navigateToDetail();
                            });
                        } else {
                            functionParameters.facet.addStyleClass("sapFactsheetUtiEmptyTile");
                            functionParameters.facet.setHeightType(jQuery.device.is.phone ? sap.suite.ui.commons.FacetOverviewHeight.Auto : sap.suite.ui.commons.FacetOverviewHeight.S);
                        }
                    }
                };
            };
            oDataReadCallbackError = function (functionParameters) {
                return function (error) {
                    // OData returns an error. Don't display the facet.
                    oTI.removeFacet(functionParameters.facet);
                };
            };
            oDataReadCallbackMedia = function (functionParameters) {
                return function (data) {
                    var oHLayout, oMediaResource, i, iCount, oTG;
                    oMediaResource = oMapping[functionParameters.navigationType]["com.sap.vocabularies.UI.v1.MediaResource"];
                    if (functionParameters.cardinality === "*") {
                        if (data.results && data.results.length) {
                            oHLayout = new sap.ui.layout.HorizontalLayout().addStyleClass("sapFactsheetUtiPictureViewerOverview");
                            for (i = 0; i < data.results.length; i += 1) {
                                oHLayout.addContent(new sap.m.Image({
                                    src: data.results[i][oMediaResource.Thumbnail.Url.Path],
                                    height: "85px"
                                }));
                                if (i === 3) {
                                    break;
                                }
                            }
                            iCount = parseInt(data.__count, 10);
                            if (Number(iCount)) {
                                functionParameters.facet.setQuantity(iCount);
                            }
                            functionParameters.facet.setContent(oHLayout);
                            functionParameters.facet.attachPress({facet: functionParameters.facetContent, data: data}, function (oEvent, oData) {
                                var oPictureViewer, sHeight, oImage;
                                oTI.removeAllFacetContent();
                                oTG = new sap.suite.ui.commons.UnifiedThingGroup();
                                if (oData.facet.Label && oData.facet.Label.String) {
                                    oTG.setTitle(oData.facet.Label.String);
                                }
                                oTG.setDescription(getTIDescription());
                                if (jQuery.device.is.phone) {
                                    sHeight = "350px";
                                } else {
                                    sHeight = "550px";
                                }
                                oPictureViewer = new sap.m.Carousel({height: sHeight});
                                for (i = 0; i < oData.data.results.length; i += 1) {
                                    oImage = new sap.m.Image({src: oData.data.results[i][oMediaResource.Url.Path]});
                                    if (jQuery.device.is.phone) {
                                        oImage.addStyleClass("sapFactsheetUtiCarouselMaxImageHeightPhone");
                                    } else {
                                        oImage.addStyleClass("sapFactsheetUtiCarouselMaxImageHeight");
                                    }
                                    oPictureViewer.addPage(oImage);
                                }
                                oTG.setContent(oPictureViewer);
                                oTI.addFacetContent(oTG);
                                oTI.navigateToDetail();
                            });
                        } else {
                            functionParameters.facet.setQuantity(0);
                            functionParameters.facet.addStyleClass("sapFactsheetUtiEmptyTile");
                            functionParameters.facet.setHeightType(jQuery.device.is.phone ? sap.suite.ui.commons.FacetOverviewHeight.Auto : sap.suite.ui.commons.FacetOverviewHeight.S);
                        }
                    }
                };
            };

            extractContactsFromBatchRequest = function (oData, sOrder) {
                var i, j, aContactResults = [], oContacts = {}, oContactMetadata, fFieldValue, sPhone, sPhoto, sMetadataPhone, sMetadataEmail;
                fFieldValue = function (oMetadata, oContactResult) {
                    var i, sValue = "";
                    if (oMetadata) {
                        if (oMetadata.Path) {
                            return oContactResult[oMetadata.Path];
                        } else if (oMetadata.String) {
                            return oMetadata.String;
                        } else if (oMetadata.Apply.Name === "odata.concat") {
                            for (i = 0; i < oMetadata.Apply.Parameters.length; i += 1) {
                                if (oMetadata.Apply.Parameters[i].Type === "Path") {
                                    sValue = sValue + oContactResult[oMetadata.Apply.Parameters[i].Value];
                                } else if (oMetadata.Apply.Parameters[i].Type === "String") {
                                    sValue = sValue + oMetadata.Apply.Parameters[i].Value;
                                }
                            }
                            return sValue;
                        }
                    }
                };
                oContacts.iCount = 0;
                oContacts.aContacts = [];
                for (i = 0; i < oData.__batchResponses.length; i += 1) {
                    if (!oData.__batchResponses[i].data) {
                        continue;
                    }
                    if (oData.__batchResponses[i].data.__count) {
                        oContacts.iCount = oContacts.iCount + parseInt(oData.__batchResponses[i].data.__count); 
                    } else {
                        oContacts.iCount = oData.__batchResponses[i].data.results ? oContacts.iCount : oContacts.iCount += 1;
                    }
                    aContactResults = oData.__batchResponses[i].data.results;
                    if (!aContactResults) {
                        aContactResults = [];
                        aContactResults.push(oData.__batchResponses[i].data);
                    }
                    if (aContactResults.length > 0) {
                        oContactMetadata = oMapping[aContactResults[0].__metadata.type]["com.sap.vocabularies.Communication.v1.Contact"];
                        if (oContactMetadata) {
                            for (j = 0; j < aContactResults.length; j += 1) {
                            	sMetadataPhone = oContactMetadata.phone && oContactMetadata.phone.uri ? oContactMetadata.phone.uri : "";
                            	sMetadataEmail = oContactMetadata.email && oContactMetadata.email.address ? oContactMetadata.email.address : "";
                            	sPhone = fFieldValue(sMetadataPhone, aContactResults[j]);
                                sPhone = sPhone ? sPhone.replace("tel:", "") : "";
                                sPhoto = fFieldValue(oContactMetadata.photo, aContactResults[j]);
                                oContacts.aContacts.push({
                                    fn           : fFieldValue(oContactMetadata.fn, aContactResults[j]),
                                    title        : fFieldValue(oContactMetadata.title, aContactResults[j]),
                                    phone        : sPhone,
                                    photo        : sPhoto,
                                    email        : fFieldValue(sMetadataEmail, aContactResults[j]),
                                    sEntity      : aContactResults[0].__metadata.type,
                                    bExistsPhoto : sPhoto ? true : false,
                                    bUseIcon     : sPhoto ? false : true,
                                    sOrder        : j // Order inside an entity
                                });
                            }
                        }
                    }
                }
                if (sOrder) {
                    oContacts.aContacts.sort(function (a, b) {
                        return a[sOrder] > b[sOrder] ? 1 : -1;
                    });
                }
                return oContacts;
            };
            oDataReadCallbackContacts = function (functionParameters) {
                return function (oData) {
                    var i, oContacts, oGrid, oHLayout, oVLayout, oImgLayout, oImage, sTileSize;
                    oContacts = extractContactsFromBatchRequest(oData, "sOrder");
                    oGrid = new sap.ui.layout.Grid({
                        defaultSpan: "L6 M6 S12",
                        hSpacing: 0,
                        vSpacing: 0
                    }).addStyleClass("sapFactsheetUtiContactsGrid");
                    for (i = 0; i < oContacts.aContacts.length && i < 4; i += 1) {
                        oImgLayout = new sap.ui.layout.VerticalLayout();
                        if (oContacts.aContacts[i].photo) {
                            oImage = new sap.m.Image({
                                height: "55px",
                                src: oContacts.aContacts[i].photo
                            });
                        } else {
                            oImage = new sap.ui.core.Icon({
                                size: "50px",
                                src: sap.ui.core.IconPool.getIconURI("person-placeholder")
                            }).addStyleClass("sapFactsheetUtiRelIcon");
                        }
                        oImgLayout.addContent(oImage);
                        oImgLayout.addStyleClass("sapFactsheetUtiContactsImage");
                        oVLayout = new sap.ui.layout.VerticalLayout({
                            content : [ new sap.m.Text({
                                text: oContacts.aContacts[i].fn
                            }).addStyleClass("sapFactsheetUtiTextName"),
                                new sap.m.Text({
                                    text: oContacts.aContacts[i].title
                                }).addStyleClass("sapFactsheetUtiTextValue")
                                ]
                        });
                        oHLayout = new sap.ui.layout.HorizontalLayout({
                            content: [ oImgLayout,
                                        oVLayout ]
                        }).addStyleClass("sapFactsheetUtiContactsBox");
                        oGrid.addContent(oHLayout);
                    }
                    oFacet = sap.ui.getCore().byId(oTI.data("contactFacetId"));
                    oFacet.setQuantity(oContacts.iCount);
                    if (i > 0) {
                        oFacet.setContent(oGrid);
                        if (i <= 2) {
                            sTileSize = sap.suite.ui.commons.FacetOverviewHeight.M;
                        } else {
                            sTileSize = sap.suite.ui.commons.FacetOverviewHeight.L;
                        }
                        oFacet.attachPress(function () {
                            var i, aOperations = [], sBatchPath;
                            oModel.clearBatch();
                            for (i = 0; i < oMapping[sEntityType]["com.sap.vocabularies.UI.v1.Contacts"].length; i += 1) {
                                sNavPath = oMapping[sEntityType]["com.sap.vocabularies.UI.v1.Contacts"][i].AnnotationPath;
                                sNavPath = sNavPath.substring(0, sNavPath.lastIndexOf("@") - 1);
                                if (sNavPath !== "") {
                                    sBatchPath = sBindingPath + "/" + sNavPath;
                                } else {
                                    sBatchPath = sBindingPath;
                                }
                                aOperations.push(oModel.createBatchOperation(sBatchPath, "GET"));
                            }
                            oModel.addBatchReadOperations(aOperations);
                            oModel.submitBatch(function (oData) {
                                var oContacts, oJSONModel, oTemplate, oTable, oVSDialog, oTG, oResourceBundle;
                                oResourceBundle = jQuery.sap.resources({
                                    url: jQuery.sap.getModulePath("sap.ushell.components.container.") + "/resources/resources.properties",
                                    language: sap.ui.getCore().getConfiguration().getLanguage()
                                });
                                oContacts = extractContactsFromBatchRequest(oData, "sEntity");
                                oJSONModel = new sap.ui.model.json.JSONModel();
                                oJSONModel.setData(oContacts);
                                oTemplate = new sap.m.ColumnListItem({
                                    type: sap.m.Inactive,
                                    unread: false,
                                    cells: [
                                        new sap.ui.layout.VerticalLayout({ content:
                                            [
                                                new sap.m.Image({
                                                    src: "{photo}",
                                                    width: "74px",
                                                    visible: "{bExistsPhoto}"
                                                }),
                                                new sap.ui.core.Icon({
                                                    size: "76px",
                                                    src: sap.ui.core.IconPool.getIconURI("person-placeholder"),
                                                    visible: "{bUseIcon}"
                                                }).addStyleClass("sapFactsheetUtiRelIcon")
                                            ]
                                            }),
                                        new sap.m.Text({text: "{fn}"}),
                                        new sap.m.Text({text: "{title}"}),
                                        new sap.m.Link({text: "{phone}", href: "tel:{phone}"}),
                                        new sap.m.Link({text: "{email}", href: "mailto:{email}"})
                                    ]
                                });
                                oTable = new sap.m.Table({
                                    threshold: 2,
                                    inset: false,
                                    showUnread: true,
                                    scrollToLoad: true,
                                    columns: [
                                        new sap.m.Column({
                                            hAlign: sap.ui.core.TextAlign.Center,
                                            header: new sap.m.Text({text: ""})
                                        }),
                                        new sap.m.Column({
                                            hAlign: sap.ui.core.TextAlign.Begin,
                                            header: new sap.m.Text({text : oResourceBundle.getText("USHELL_FACTSHEET_NAME")})
                                        }),
                                        new sap.m.Column({
                                            hAlign: sap.ui.core.TextAlign.Begin,
                                            header: new sap.m.Text({text : oResourceBundle.getText("USHELL_FACTSHEET_JOBTITLE")}),
                                            minScreenWidth : "Tablet",
                                            demandPopin : true
                                        }),
                                        new sap.m.Column({
                                            hAlign: sap.ui.core.TextAlign.Begin,
                                            width: "30%",
                                            header: new sap.m.Text({text : oResourceBundle.getText("USHELL_FACTSHEET_PHONE")}),
                                            minScreenWidth : "Tablet",
                                            demandPopin : true
                                        }),
                                        new sap.m.Column({
                                            hAlign: sap.ui.core.TextAlign.Begin,
                                            width: "30%",
                                            header: new sap.m.Text({text : oResourceBundle.getText("USHELL_FACTSHEET_EMAIL")}),
                                            minScreenWidth : "Tablet",
                                            demandPopin : true
                                        })],
                                    items: {
                                        path: "/aContacts",
                                        template: oTemplate
                                    }
                                });
                                oVSDialog = new sap.m.ViewSettingsDialog({
                                    sortItems: [ new sap.m.ViewSettingsItem({ key: "fn", text: oResourceBundle.getText("USHELL_FACTSHEET_NAME")}),
                                                 new sap.m.ViewSettingsItem({ key: "title", text: oResourceBundle.getText("USHELL_FACTSHEET_JOBTITLE")}),
                                                 new sap.m.ViewSettingsItem({ key: "phone", text: oResourceBundle.getText("USHELL_FACTSHEET_PHONE")}),
                                                 new sap.m.ViewSettingsItem({ key: "email", text: oResourceBundle.getText("USHELL_FACTSHEET_EMAIL")})],
                                    confirm: function (evt) {
                                        var mParams, oBinding, aSorters = [];
                                        mParams = evt.getParameters();
                                        oBinding = oTable.getBinding("items");
                                        if (mParams.sortItem) {
                                            aSorters.push(new sap.ui.model.Sorter(mParams.sortItem.getKey(), mParams.sortDescending));
                                            oBinding.sort(aSorters);
                                        }
                                    }
                                });
                                oTable.setHeaderToolbar(new sap.m.Toolbar({
                                    content: [
                                        new sap.m.Label(),
                                        new sap.m.ToolbarSpacer(),
                                        new sap.m.Button({
                                            icon : "sap-icon://drop-down-list",
                                            press : function (evt) {
                                                oVSDialog.open();
                                            }
                                        })
                                    ]
                                }));
                                oTable.setModel(oJSONModel);
                                oTG = new sap.suite.ui.commons.UnifiedThingGroup({
                                    title: oFacet.getTitle(),
                                    description: getTIDescription(),
                                    content: oTable
                                });
                                oTI.removeAllFacetContent();
                                oTI.addFacetContent(oTG);
                                oTI.navigateToDetail();
                            });
                        });
                    } else {
                        sTileSize = sap.suite.ui.commons.FacetOverviewHeight.S;
                        oFacet.addStyleClass("sapFactsheetUtiEmptyTile");
                        oFacet.setQuantity(0);
                    }
                    oFacet.setHeightType(jQuery.device.is.phone ? sap.suite.ui.commons.FacetOverviewHeight.Auto : sTileSize);
                };
            };
            // Loop at the further facets and make oData reads to the corresponding services
            for (i = 0; i < aFacets.length; i += 1) {
                if (aFacets[i]["com.sap.vocabularies.UI.v1.Map"]) {
                    sNavPath = aFacets[i].Target.AnnotationPath;
                    sNavPath = sNavPath.substring(0, sNavPath.lastIndexOf("@") - 1);
                    sCardinality = "1";
                    sNavType = sEntityType;
                    if (sNavPath) {
                        aNsEntityType = sEntityType.split(".");
                        for (m = oMetadata.dataServices.schema.length - 1; m >= 0; m -= 1) {
                            metadataSchema = oMetadata.dataServices.schema[m];
                            sNameSpace = aNsEntityType[0];
                            if (aNsEntityType.length > 2) {
                                for (k = 1; k < aNsEntityType.length - 1; k += 1) {
                                    sNameSpace += "." + aNsEntityType[k];
                                }
                            }
                            if (metadataSchema.namespace === sNameSpace && metadataSchema.association) {
                                for (j = 0; j < metadataSchema.association.length; j += 1) {
                                    if (metadataSchema.association[j].name === sNavPath) {
                                        sNavType = metadataSchema.association[j].end[1].type;
                                    }
                                }
                            }
                        }
                        sCardinality = getAssociationMultiplicity(sEntitySet, sNavPath, oMetadata);
                    }

                    sHeight = "100%";
                    if (jQuery.device.is.phone) {
                        sHeight = "150px";
                    }
                    oGeoContent =  new sap.ui.vbm.VBI({
                        width: "100%",
                        height: sHeight,
                        plugin: false,
                        config: null
                    });
                    oFacet = new sap.suite.ui.commons.FacetOverview({
                        title: aFacets[i].Label.String,
                        heightType: jQuery.device.is.phone ? sap.suite.ui.commons.FacetOverviewHeight.Auto : sap.suite.ui.commons.FacetOverviewHeight.L,
                        content: oGeoContent
                    });
                    functionParameters = { cardinality: sCardinality, navigationPath: sNavPath, facet: oFacet, facetContent: aFacets[i],
                            navigationType: sNavType, metadata: oMetadata, bindingPath: sBindingPath, entitySet: sEntitySet };
                    if (sCardinality === "*") {
                        parameters = ["$inlinecount=allpages", "$top=1000"];
                    } else {
                        parameters = [];
                    }
                    oModel.read(sBindingPath + "/" + sNavPath, "", parameters, true, oDataReadCallbackGeo(functionParameters));
                    oTI.addFacet(oFacet);
                } else {
                    if (aFacets[i].Target) {
                        sNavPath = aFacets[i].Target.AnnotationPath;
                        sNavPath = sNavPath.substring(0, sNavPath.lastIndexOf("@") - 1);
                        sTerm = aFacets[i].Target.AnnotationPath.substring(aFacets[i].Target.AnnotationPath.lastIndexOf("@") + 1);
                        if (sNavPath) {
                            aNsEntityType = sEntityType.split(".");
                            for (m = oMetadata.dataServices.schema.length - 1; m >= 0; m -= 1) {
                                metadataSchema = oMetadata.dataServices.schema[m];
                                sNameSpace = aNsEntityType[0];
                                if (aNsEntityType.length > 2) {
                                    for (k = 1; k < aNsEntityType.length - 1; k += 1) {
                                        sNameSpace += "." + aNsEntityType[k];
                                    }
                                }
                                if (metadataSchema.namespace === sNameSpace && metadataSchema.association) {
                                    for (j = 0; j < metadataSchema.association.length; j += 1) {
                                        if (metadataSchema.association[j].name === sNavPath) {
                                            sNavType = metadataSchema.association[j].end[1].type;
                                        }
                                    }
                                }
                            }
                            oFacet = new sap.suite.ui.commons.FacetOverview({
                                title: aFacets[i].Label.String,
                                heightType: jQuery.device.is.phone ? sap.suite.ui.commons.FacetOverviewHeight.Auto : sap.suite.ui.commons.FacetOverviewHeight.M
                            });
                            sCardinality = getAssociationMultiplicity(sEntitySet, sNavPath, oMetadata);
                            if (sCardinality !== 0) {
                                functionParameters = { cardinality: sCardinality, navigationPath: sNavPath, facet: oFacet, facetContent: aFacets[i],
                                        navigationType: sNavType, metadata: oMetadata, bindingPath: sBindingPath, entitySet: sEntitySet };
                                if (aFacets[i]["com.sap.vocabularies.UI.v1.Gallery"]) {
                                    if (sCardinality === "*") {
                                        parameters = ["$inlinecount=allpages"];
                                    } else {
                                        parameters = [];
                                    }
                                    oModel.read(sBindingPath + "/" + sNavPath, "", parameters, true, oDataReadCallbackMedia(functionParameters));
                                } else {
                                    if (sCardinality === "*") {
                                        parameters = ["$inlinecount=allpages", "$top=3"];
                                    } else {
                                        parameters = [];
                                    }
                                    oModel.read(sBindingPath + "/" + sNavPath, "", parameters, true, oDataReadCallback(functionParameters), oDataReadCallbackError(functionParameters));
                                }
                                oTI.addFacet(oFacet);
                            }
                        } else {
                            if (sTerm === "com.sap.vocabularies.UI.v1.Contacts") {
                                oFacet = new sap.suite.ui.commons.FacetOverview({
                                    title: aFacets[i].Label.String,
                                    heightType: jQuery.device.is.phone ? sap.suite.ui.commons.FacetOverviewHeight.Auto : sap.suite.ui.commons.FacetOverviewHeight.M
                                });
                                oTI.data("contactFacetId", oFacet.sId);
                                functionParameters = { facet: oFacet };
                                oModel.clearBatch();
                                for (j = 0; j < oMapping[sEntityType][sTerm].length; j += 1) {
                                    sNavPath = oMapping[sEntityType][sTerm][j].AnnotationPath;
                                    sNavPath = sNavPath.substring(0, sNavPath.lastIndexOf("@") - 1);
                                    if (sNavPath !== "") {
                                        sCardinality = getAssociationMultiplicity(sEntitySet, sNavPath, oMetadata);
                                        if(sCardinality === "*") {
                                            sBatchPath = sBindingPath + "/" + sNavPath + "?$top=4" + "&$inlinecount=allpages";
                                        } else {
                                            sBatchPath = sBindingPath + "/" + sNavPath;
                                        }
                                    } else {
                                        sBatchPath = sBindingPath;
                                    }
                                    aOperations.push(oModel.createBatchOperation(sBatchPath, "GET"));
                                }
                                oModel.addBatchReadOperations(aOperations);
                                oModel.submitBatch(oDataReadCallbackContacts(functionParameters));
                                oTI.addFacet(oFacet);
                            }
                        }
                    }
                }
            }

            // Footer area
            oAddBookmarkButton = new sap.ushell.ui.footerbar.AddBookmarkButton();
            thingInspectorBindingChanged = function () {
                var aBusinessParams, i, sTerm, aTerm, oParaValue, oBusinessParameters = {}, key, val, sSemanticObject, sJamDiscussId, o;
                oAddBookmarkButton.setAppData({title: oTI.getTitle(), subtitle: oTI.getName() + " - " + oTI.getDescription()});
                oAddBookmarkButton.setEnabled(true);
                sSemanticObject = getEntityType(sEntitySet, oMetadata, true);
                oTransactionSheet = new sap.suite.ui.commons.LinkActionSheet({
                    showCancelButton: true,
                    placement: sap.m.PlacementType.Top
                });
                sBusinessParams = getEntityKeyFromUri(sUri, oModel);
                aBusinessParams = sBusinessParams.split(",");
                for (i = 0; i < aBusinessParams.length; i += 1) {
                    aBusinessParams[i] = aBusinessParams[i].replace("='", "=", "g");
                    if (aBusinessParams[i].lastIndexOf("'") === aBusinessParams[i].length - 1) {
                        aBusinessParams[i] = aBusinessParams[i].slice(0, -1);
                    }
                }
                for (sTerm in oMapping[sEntityType]) {
                    if (oMapping[sEntityType].hasOwnProperty(sTerm)) {
                        if (sTerm.indexOf("com.sap.vocabularies.Common.v1.SecondaryKey") === 0) {
                            aTerm = oMapping[sEntityType][sTerm];
                            for (i = 0; i < aTerm.length; i += 1) {
                                oParaValue = this.getBoundContext().getProperty(aTerm[i].PropertyPath);
                                if (oParaValue) {
                                    aBusinessParams.push(aTerm[i].PropertyPath + "=" + oParaValue);
                                }
                            }
                        }
                    }
                }
                for (i = 0; i < aBusinessParams.length; i += 1) {
                    key = aBusinessParams[i].substr(0, aBusinessParams[i].indexOf("="));
                    val = aBusinessParams[i].substr(aBusinessParams[i].indexOf("=") + 1, aBusinessParams[i].length);
                    oBusinessParameters[key] = val;
                }
                oLinks = sap.ushell.Container.getService("CrossApplicationNavigation").getSemanticObjectLinks(sSemanticObject, oBusinessParameters);
                oLinks.done(jQuery.proxy(function (aLinks) {
                    var i, sIntent;
                    for (i = 0; i < aLinks.length; i += 1) {
                        if (aLinks[i].intent.indexOf(FACTSHEET) < 0) {
                            sIntent = sap.ushell.Container.getService("CrossApplicationNavigation").hrefForExternal({ target: { shellHash: aLinks[i].intent }});
                            oTransactionSheet.addItem(new sap.m.Link({text: aLinks[i].text, href: sIntent}));
                            oTI.setTransactionsVisible(true);
                        }
                    }
                }));
                oTI.attachTransactionsButtonPress(function (oEvent) {
                    oTransactionSheet.openBy(oEvent.getParameter("caller"));
                });
                this.detachChange(thingInspectorBindingChanged);
                // Set the browser Tab Name as Object Type: Object Name (Object Description) e.g. "Article: Nutella (AAUFEA000100001)"
                sap.ushell.services.AppConfiguration.setWindowTitle(oTI.getTitle().trim() + ": " + oTI.getName().trim() + " (" + oTI.getDescription().trim() + ")");
                
                oTI.setActionsVisible(true);
                oEmailBtn = new sap.m.Button({
                    text: oSapSuiteRb.getText("UNIFIEDTHINGINSPECTOR_FOOTER_BUTTON_EMAIL_LINK"),
                    icon: "sap-icon://email",
                    press: function (oE) {
                        sap.m.URLHelper.triggerEmail("", oTI.getName(), window.location.href);
                    }
                });
                oActionSheet = new sap.m.ActionSheet({ placement: sap.m.PlacementType.Top });
                sJamDiscussId = sUri.substr(0, sUri.lastIndexOf("/") + 1);
                for (var o in oModel.oData) {
                  if (oModel.oData.hasOwnProperty(o)) {
                      sJamDiscussId = sJamDiscussId + o;
                      break;
                  }
                }
                oActionSheet.addButton(new sap.ushell.ui.footerbar.JamDiscussButton({
                    jamData: {
                        object: {
                            id: sJamDiscussId,
                            type: sUri.substr(0, sUri.lastIndexOf("/")) + "/$metadata#" + sEntitySet,
                            name: oTI.getTitle(),
                            ui_url: window.location.href
                        }
                    }
                }));
                oActionSheet.addButton(new sap.ushell.ui.footerbar.JamShareButton({
                    jamData: {
                        object: {
                            id: window.location.href,
                            display: new sap.m.Text({text: oTI.getTitle()}),
                            share: ""
                        }
                    }
                }));
                oActionSheet.addButton(oAddBookmarkButton);
                oActionSheet.addButton(oEmailBtn);
                oTI.attachActionsButtonPress(function (oEvent) {
                    oActionSheet.openBy(oEvent.getParameter("caller"));
                });
            };

            oTI.getElementBinding().attachChange(thingInspectorBindingChanged);

            oTI.attachBackAction(function (oEvent) {
                history.back();
            });
            oTI.addDelegate({onAfterRendering: function () {
                oTI._adjustFacetLayout();
            }});
            return oTI;
        };

        return {
            ThingInspector : function (sUri, sAnnotationUri) {
                try {
                    oTI = thingInspectorFactory(sUri, sAnnotationUri, new sap.suite.ui.commons.UnifiedThingInspector({ configurationVisible: false }));
                } catch (e) {
                    throw e;
                }
                return oTI;
            }
        };
    }());
}());

}; // end of sap/ushell/components/factsheet/factory/ThingInspector.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.tools.ODataUrlTemplating') ) {
//Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview This file contains an annotation parser for factsheets.
 */

(function() {
    "use strict";

 // Exception Object
    function ParameterException(parameter, template, url) {
        this.parameter = parameter;
        this.template = template;
        this.semiConvertedUrl = url;
        this.message = " is a missing key parameter for constructing the entity url";
        this.toString = function() {
           return this.parameter + this.message
        };
    }
    
    jQuery.sap
            .declare("sap.ushell.components.factsheet.tools.ODataUrlTemplating");

    sap.ushell.components.factsheet.tools.ODataUrlTemplating = {
        ParameterException : ParameterException,
        resolve : function(template, data) {
            var sEntityUrl, value, parameter, i,
            businessParameter = template.match(/{\s*[\w\.]+\s*}/g);
            sEntityUrl = template;

            for (i = businessParameter.length - 1; i >= 0; i -= 1) {
                parameter = businessParameter[i];
                value = data[parameter.replace(/[{}]/g, "")];
                if (value !== undefined) {
                    if (typeof value !== "string") {
                        value = value[0];
                    }
                    value = encodeURIComponent(decodeURIComponent(value));
                    sEntityUrl = sEntityUrl.replace(parameter, value);
                }
            }
            // Is there a parameter left
            if (parameter = sEntityUrl.match(/{\s*[\w\.]+\s*}/g)) {
                jQuery.sap.log.error(" "
                        + sEntityUrl);
                // TODO: Raise exception
                throw new this.ParameterException(parameter, template, sEntityUrl);
            }

            return sEntityUrl;
        }
    }
})();

}; // end of sap/ushell/components/factsheet/tools/ODataUrlTemplating.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.views.ThingViewer.view') ) {
  jQuery.sap.declare('sap.ushell.components.factsheet.views.ThingViewer.view');
(function () {
    "use strict";
    /*global jQuery, sap */
    
    sap.ui.jsview("sap.ushell.components.factsheet.views.ThingViewer", {

        getControllerName : function () {
            return "sap.ushell.components.factsheet.views.ThingViewer";
        },
        createContent : function (oController) {
            var sEntityUrl, sAnnotationUrl, sEntityUrlTemplate, oTI, oViewData;
            oViewData = this.getViewData();

            jQuery.sap.require("sap.ushell.components.factsheet.factory.ThingInspector");

            // Sample Hash UI2_DEMO_PRODUCT-DisplayFactSheet~6bpO?ProductID=HT-1000
            sEntityUrl = oViewData.entity || oViewData.service;// Old Parameter Name was Service
            if (!sEntityUrl) {
                sEntityUrlTemplate = oViewData.entityTemplateURI || oViewData.template;
                
                if (sEntityUrlTemplate) {
                    // Parameters may be arrays 
                    if (typeof sEntityUrlTemplate !== "string") {
                        sEntityUrlTemplate = sEntityUrlTemplate[0];
                    }
                    //regEx = /{[A-Za-z0-9_]*}/g;
                    //Depending on the basis version it is possible, that the value of sEntityUrlTemplate is double encoded.
                    //Therefor the following decoding was implemented as a workaround.
                    sEntityUrlTemplate = sEntityUrlTemplate.replace(/%25/g, "%");
                    sEntityUrlTemplate = sEntityUrlTemplate.replace(/%28/g, "(");
                    sEntityUrlTemplate = sEntityUrlTemplate.replace(/%29/g, ")");
                    sEntityUrlTemplate = sEntityUrlTemplate.replace(/%27/g, "'");
                    sEntityUrlTemplate = sEntityUrlTemplate.replace(/%3D/g, "=");
                    sEntityUrlTemplate = sEntityUrlTemplate.replace(/%7B/g, "{");
                    sEntityUrlTemplate = sEntityUrlTemplate.replace(/%7D/g, "}");

                    sEntityUrl = sap.ushell.components.factsheet.tools.ODataUrlTemplating.resolve(sEntityUrlTemplate, oViewData);
                  }

            }
            sAnnotationUrl = oViewData.annotationURI || oViewData.annotation;

            if (typeof sEntityUrl !== "string") {
                sEntityUrl = sEntityUrl[0];
            }
            if (typeof sAnnotationUrl !== "string") {
                sAnnotationUrl = sAnnotationUrl[0];
            }
            
            if (oViewData["sap-system"] && oViewData["sap-system"][0] && (oViewData["sap-system"][0].substr(0,4) === "sid(")) {
                sEntityUrl = sEntityUrl.substr(0, sEntityUrl.lastIndexOf("/")) + ";o=" + sEntityUrl.substr(sEntityUrl.lastIndexOf("/"));
                sEntityUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(sEntityUrl);
            }

            oTI = sap.ushell.components.factsheet.factory.ThingInspector(sEntityUrl, sAnnotationUrl);

            //Add min-height
            oTI.addStyleClass("ThingInspector");
            return oTI;
        }
    });
}());
}; // end of sap/ushell/components/factsheet/views/ThingViewer.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper') ) {
(function(){
    jQuery.sap.declare("sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper");

    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper = function(tile) {
        this.tile = tile;
    };
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setErrorState = function() {
        this.getTile().setState(sap.suite.ui.commons.LoadState.Failed);
    };
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setLoadingState = function() {
        this.getTile().setState(sap.suite.ui.commons.LoadState.Loading);
    };
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setLoadedState = function() {
        this.getTile().setState(sap.suite.ui.commons.LoadState.Loaded);
    };
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setTrendDown = function() {
        this.getTile().setIndicator(sap.suite.ui.commons.DeviationIndicator.Down);
    };
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setTrendUp = function() {
        this.getTile().setIndicator(sap.suite.ui.commons.DeviationIndicator.Up);
    };
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setTrendNeutral = function() {
        this.getTile().setIndicator(sap.suite.ui.commons.DeviationIndicator.None);
    };
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setThresholdGood = function(){};
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setThresholdBad = function(){};
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setThresholdCritical = function(){};
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setThresholdNeutral = function(){};


    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.calculateThreshold = function(actualValue, variantValue, improvementDirection) {

    };

    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setTile = function(tile) {
        this.tile = tile;
    };
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.getTile = function() {
        return this.tile;
    };
}());


}; // end of sap/ushell/components/tiles/indicatorTileUtils/indicatorTileHelper.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorTileUtils.oData4Analytics') ) {
/**
 * @fileOverview API for analytical extensions in OData service metadata.
 * 
 * <a href="../sap-odata-analytics.jpg">Overview class diagram.</a><p/> At the
 * current stage, the API is purely experimental, not yet functionally complete
 * and not meant for productive usage. At present, its only purpose is to
 * demonstrate how easy analytical extensions of OData4SAP can be consumed. <p/>
 * <em>USE OBJECTS VIA METHODS ONLY - DO NOT ACCESS JAVASCRIPT OBJECT PROPERTIES
 * DIRECTLY !</em>
 * Lazy initialization of attributes will cause unexpected values when you
 * access object attributes directly. <p/> PI BIT Consumption and Collaboration
 * <p/> Main contact: Gerald Krause
 * 
 * 
 */

//Module declaration
jQuery.sap.declare("sap.ushell.components.tiles.indicatorTileUtils.oData4Analytics");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained


/*
 * try { if (typeof sap.ui.model.odata.ODataModel === "undefined") throw "SAP
 * UI5 library not present. Load it beforehand to avoid this error"; } catch
 * (error) { throw "SAP UI5 library not present. Load it beforehand to avoid
 * this error"; }
 */
sap = sap || {};
sap.ushell = sap.ushell || {};
sap.ushell.components = sap.ushell.components || {};
sap.ushell.components.tiles.indicatorTileUtils = sap.ushell.components.tiles.indicatorTileUtils || {};
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics = sap.ushell.components.tiles.indicatorTileUtils.odata4analytics || {};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants = {};
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants["SAP_NAMESPACE"] = "http://www.sap.com/Protocols/SAPData";
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants["VERSION"] = "0.7";

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.helper = {
        renderPropertyKeyValue : function(sFilterValue, sPropertyEDMTypeName) {
            if (sFilterValue.charAt(0) == "'")
                throw "Illegal property value starting with a quote";
            switch (sPropertyEDMTypeName) {
            case 'Edm.String':
                return "'" + sFilterValue + "'";
            case 'Edm.DateTime':
                return "datetime'" + sFilterValue + "'";
            case 'Edm.Guid':
                return "guid'" + sFilterValue + "'";
            case 'Edm.Time':
                return "time'" + sFilterValue + "'";
            case 'Edm.DateTimeOffset':
                return "datetimeoffset'" + sFilterValue + "'";
            default:
                return sFilterValue;
            }
        },
        renderPropertyFilterValue : function(sFilterValue, sPropertyEDMTypeName) {
            if (sFilterValue.charAt(0) == "'")
                throw "Illegal property value starting with a quote";
            switch (sPropertyEDMTypeName) {
            case 'Edm.String':
                return "'" + sFilterValue + "'";
            case 'Edm.DateTime':
                return "datetime'" + sFilterValue + "'";
            case 'Edm.Guid':
                return "guid'" + sFilterValue + "'";
            case 'Edm.Time':
                return "time'" + sFilterValue + "'";
            case 'Edm.DateTimeOffset':
                return "datetimeoffset'" + sFilterValue + "'";
            default:
                return sFilterValue;
            }
        },
        tokenizeNametoLabelText : function(sName) {
            var sLabel = "";

            // split UpperCamelCase in words (treat numbers and _ as upper case)
            sLabel = sName.replace(/([^A-Z0-9_]+)([A-Z0-9_])/g, "$1 $2");
            // split acronyms in words
            sLabel = sLabel.replace(/([A-Z0-9_]{2,})([A-Z0-9_])([^A-Z0-9_]+)/g, "$1 $2$3");
            // remove trailing _E
            sLabel = sLabel.replace(/(.*) _E$/, "$1");
            // remove underscores that were identified as upper case
            sLabel = sLabel.replace(/(.*) _(.*)/g, "$1 $2");
            return sLabel;
        }
};

/**
 * Create a representation of the analytical semantics of OData service metadata
 * 
 * @param {object}
 *            oModelReference An instance of ReferenceByURI, ReferenceByModel or
 *            ReferenceWithWorkaround for locating the OData service.
 * @param {string}
 *            sAnnotationJSONDoc A JSON document providing extra annotations to
 *            the elements of the structure of the given service
 * @constructor
 * 
 * @class Representation of an OData model with analytical annotations defined
 *        by OData4SAP.
 * 
 */

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model = function(oModelReference, sAnnotationJSONDoc) {
    this._init(oModelReference, sAnnotationJSONDoc);
};

/**
 * Create a reference to an OData model by the URI of the related OData service.
 * 
 * @param {string}
 *            sURI holding the URI.
 * @constructor
 * 
 * @class Handle to an OData model by the URI pointing to it.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model.ReferenceByURI = function(sURI) {
    return {
        sServiceURI : sURI
    };
};

/**
 * Create a reference to an OData model already loaded elsewhere with the help
 * of SAP UI5.
 * 
 * @param {object}
 *            oModel holding the OData model.
 * @constructor
 * 
 * @class Handle to an already instantiated SAP UI5 OData model.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model.ReferenceByModel = function(oModel) {
    return {
        oModel : oModel
    };
};

/**
 * Create a reference to an OData model having certain workarounds activated. A
 * workaround is an implementation that changes the standard behavior of the API
 * to overcome some gap or limitation in the OData provider. The workaround
 * implementation can be conditionally activated by passing the identifier in
 * the contructor.
 * 
 * Known workaround identifiers are:
 * 
 * <li>"CreateLabelsFromTechnicalNames" - If a property has no label text, it
 * gets generated from the property name.</li>
 * 
 * <li>"IdentifyTextPropertiesByName" -If a dimension property has no text and
 * another property with the same name and an appended "Name", "Text" etc. exists, they are linked via annotation.</li>
 * 
 * 
 * @param {object}
 *            oModelReference holding a reference to the OData model, obtained
 *            by sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model.ReferenceByModel or by
 *            sap.odata4analytics.Model.ReferenceByURI.
 * @param {array(string)}
 *            aWorkaroundID listing all workarounds to be applied.
 * @constructor
 * 
 * @class Handle to an already instantiated SAP UI5 OData model.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model.ReferenceWithWorkaround = function(oModel, aWorkaroundID) {
    return {
        oModelReference : oModel,
        aWorkaroundID : aWorkaroundID
    };
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model.prototype = {

        /**
         * initialize a new object
         * 
         * @private
         */
        _init : function(oModelReference, sAnnotationJSONDoc) {

            /*
             * get access to OData model
             */

            this._oActivatedWorkarounds = new Object();

            if (oModelReference && oModelReference.aWorkaroundID) {
                for ( var i = -1, sID; sID = oModelReference.aWorkaroundID[++i];) {
                    this._oActivatedWorkarounds[sID] = true;
                }
                oModelReference = oModelReference.oModelReference;
            }

            // check proper usage
            if (!oModelReference || (!oModelReference.sServiceURI && !oModelReference.oModel)) {
                throw "Usage with oModelReference being an instance of Model.ReferenceByURI or Model.ReferenceByModel";
            }

            if (oModelReference.oModel)
                this._oModel = oModelReference.oModel;
            else
                this._oModel = new sap.ui.model.odata.ODataModel(oModelReference.sServiceURI);

            if (this._oModel.getServiceMetadata().dataServices == undefined) {
                throw "Model could not be loaded";
            }

            /*
             * add extra annotations if provided
             */
            this.mergeV2Annotations(sAnnotationJSONDoc);

            /*
             * parse OData model for analytic queries
             */

            this._oQueryResultSet = new Object();
            this._oParameterizationSet = new Object();
            this._oEntityTypeSet = new Object();
            this._oEntitySetSet = new Object();
            this._oEntityTypeNameToEntitySetMap = new Object();

            // loop over all schemas and entity containers
            // TODO: extend this implementation to support many schemas
            var oSchema = this._oModel.getServiceMetadata().dataServices.schema[0];

            // remember default container
            for ( var i = -1, oContainer; oContainer = oSchema.entityContainer[++i];) {
                if (oContainer.isDefaultEntityContainer == "true") {
                    this._oDefaultEntityContainer = oContainer;
                    break;
                }
            }

            var aEntityType = oSchema.entityType;

            // A. preparation

            // A.1 collect all relevant OData entity types representing query
            // results,
            // parameters
            var aQueryResultEntityTypes = [], aParameterEntityTypes = [], aUnsortedEntityTypes = [];

            for ( var i = -1, oType; oType = aEntityType[++i];) {
                var bProcessed = false;

                if (oType.extensions != undefined) {
                    for ( var j = -1, oExtension; oExtension = oType.extensions[++j];) {
                        if (oExtension.namespace == sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants.SAP_NAMESPACE
                                && oExtension.name == "semantics") {
                            bProcessed = true;
                            switch (oExtension.value) {
                            case "aggregate":
                                aQueryResultEntityTypes.push(oType);
                                break;
                            case "parameters":
                                aParameterEntityTypes.push(oType);
                                break;
                            default:
                                aUnsortedEntityTypes.push(oType);
                            }
                        }
                        if (bProcessed)
                            continue;
                    }
                    if (!bProcessed)
                        aUnsortedEntityTypes.push(oType);
                } else
                    aUnsortedEntityTypes.push(oType);
            }
            // A.2 create entity type representations for the unsorted types
            for ( var i = -1, oType; oType = aUnsortedEntityTypes[++i];) {
                var oEntityType = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType(this._oModel
                        .getServiceMetadata(), oSchema, oType);
                this._oEntityTypeSet[oEntityType.getQName()] = oEntityType;
                var aEntitySet = this._getEntitySetsOfType(oSchema, oEntityType.getQName());
                if (aEntitySet.length == 0)
                    throw "Invalid consumption model: No entity set for entity type annotated with parameters semantics";
                if (aEntitySet.length > 1)
                    throw "Unsupported consumption model: More than one entity set for entity type annotated with parameters semantics";
                var oEntitySet = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntitySet(this._oModel
                        .getServiceMetadata(), oSchema, aEntitySet[0][0], aEntitySet[0][1]);
                this._oEntitySetSet[oEntitySet.getQName()] = oEntitySet;
                this._oEntityTypeNameToEntitySetMap[oEntityType.getQName()] = oEntitySet;
            }

            // B. create objects for the analytical extensions of these entity types
            // B.1 create parameters

            // temporary storage for lookup of entity *types* annotated with
            // parameters semantics
            var oParameterizationEntityTypeSet = {};

            for ( var i = -1, oType; oType = aParameterEntityTypes[++i];) {
                // B.1.1 create object for OData entity type
                var oEntityType = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType(this._oModel
                        .getServiceMetadata(), oSchema, oType);
                this._oEntityTypeSet[oEntityType.getQName()] = oEntityType;
                // B.1.2 get sets with this type
                var aEntitySet = this._getEntitySetsOfType(oSchema, oEntityType.getQName());
                if (aEntitySet.length == 0)
                    throw "Invalid consumption model: No entity set for entity type annotated with parameters semantics";
                if (aEntitySet.length > 1)
                    throw "Unsupported consumption model: More than one entity set for entity type annotated with parameters semantics";

                // B.1.3 create object for OData entity set
                var oEntitySet = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntitySet(this._oModel
                        .getServiceMetadata(), oSchema, aEntitySet[0][0], aEntitySet[0][1]);
                this._oEntitySetSet[oEntitySet.getQName()] = oEntitySet;
                this._oEntityTypeNameToEntitySetMap[oEntityType.getQName()] = oEntitySet;

                // B.1.4 create object for parameters and related OData entity
                var oParameterization = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameterization(oEntityType,
                        oEntitySet);
                this._oParameterizationSet[oParameterization.getName()] = oParameterization;
                oParameterizationEntityTypeSet[oEntityType.getQName()] = oParameterization;

                // B.1.5 recognize all available parameter value helps
                var sParameterizationEntityTypeQTypeName = oEntityType.getQName();

                if (oSchema.association != undefined) {
                    for ( var j = -1, oAssoc; oAssoc = oSchema.association[++j];) {
                        // value help always established by a referential constraint
                        // on an association
                        if (oAssoc.referentialConstraint == undefined)
                            continue;

                        var sParameterValueHelpEntityTypeQTypeName = null;

                        // B.1.5.1 relevant only if one end has same type as the
                        // given parameterization entity type
                        if (oAssoc.end[0].type == sParameterizationEntityTypeQTypeName
                                && oAssoc.end[0].multiplicity == "*"
                                    && oAssoc.end[1].multiplicity == "1") {
                            sParameterValueHelpEntityTypeQTypeName = oAssoc.end[1].type;

                        } else if (oAssoc.end[1].type == sParameterizationEntityTypeQTypeName
                                && oAssoc.end[1].multiplicity == "*"
                                    && oAssoc.end[0].multiplicity == "1") {
                            sParameterValueHelpEntityTypeQTypeName = oAssoc.end[0].type;
                        }
                        if (!sParameterValueHelpEntityTypeQTypeName)
                            continue;

                        // B.1.5.2 check if the referential constraint declares a
                        // parameter property as dependent
                        if (oAssoc.referentialConstraint.dependent.propertyRef.length != 1)
                            continue;
                        var oParameter = oParameterization
                        .findParameterByName(oAssoc.referentialConstraint.dependent.propertyRef[0].name);
                        if (oParameter == null)
                            continue;

                        // B.1.5.3 Register the recognized parameter value help
                        // entity type and set and link it to the parameter
                        var oValueListEntityType = this._oEntityTypeSet[sParameterValueHelpEntityTypeQTypeName];
                        var oValueListEntitySet = this._oEntityTypeNameToEntitySetMap[sParameterValueHelpEntityTypeQTypeName];
                        oParameter.setValueSetEntity(oValueListEntityType, oValueListEntitySet);
                    }
                }
            }

            // B.2
            // B.2 create analytic queries
            for ( var i = -1, oType; oType = aQueryResultEntityTypes[++i];) {

                // B.2.1 create object for OData entity
                var oEntityType = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType(this._oModel
                        .getServiceMetadata(), oSchema, oType);
                this._oEntityTypeSet[oEntityType.getQName()] = oEntityType;
                var sQueryResultEntityTypeQTypeName = oEntityType.getQName();

                // B.2.2 find assocs to parameter entity types
                var oParameterization = null;
                var oAssocFromParamsToResult = null;

                if (oSchema.association != undefined) {
                    for ( var j = -1, oAssoc; oAssoc = oSchema.association[++j];) {
                        var sParameterEntityTypeQTypeName = null;
                        if (oAssoc.end[0].type == sQueryResultEntityTypeQTypeName)
                            sParameterEntityTypeQTypeName = oAssoc.end[1].type;
                        else if (oAssoc.end[1].type == sQueryResultEntityTypeQTypeName)
                            sParameterEntityTypeQTypeName = oAssoc.end[0].type;
                        else
                            continue;

                        // B.2.2.2 fetch Parameterization object if any
                        var oMatchingParameterization = null;

                        oMatchingParameterization = oParameterizationEntityTypeSet[sParameterEntityTypeQTypeName];
                        if (oMatchingParameterization != null)
                            if (oParameterization != null) {
                                // TODO: extend this implementation to support more
                                // than
                                // one related parameter entity type
                                throw "LIMITATION: Unable to handle multiple parameter entity types of query entity "
                                + oEntityType.name;
                            } else {
                                oParameterization = oMatchingParameterization;
                                oAssocFromParamsToResult = oAssoc;
                            }
                    }
                }

                // B.2.3 get sets with this type
                var aEntitySet = this._getEntitySetsOfType(oSchema, oEntityType.getQName());
                if (aEntitySet.length != 1)
                    throw "Invalid consumption model: There must be exactly one entity set for an entity type annotated with aggregating semantics";

                // B.2.4 create object for OData entity set of analytic query result
                var oEntitySet = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntitySet(this._oModel
                        .getServiceMetadata(), oSchema, aEntitySet[0][0], aEntitySet[0][1]);
                this._oEntitySetSet[oEntitySet.getQName()] = oEntitySet;
                this._oEntityTypeNameToEntitySetMap[oEntityType.getQName()] = oEntitySet;

                // B.2.5 create object for analytic query result, related OData
                // entity type and set and
                // (if any) related parameters object
                var oQueryResult = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult(this, oEntityType,
                        oEntitySet, oParameterization);
                this._oQueryResultSet[oQueryResult.getName()] = oQueryResult;

                // B.2.6 set target result for found parameterization
                if (oParameterization)
                    oParameterization.setTargetQueryResult(oQueryResult, oAssocFromParamsToResult);

            }

        },

        /*
         * Control data for adding extra annotations to service metadata
         * 
         * @private
         */
        oUI5ODataModelAnnotatableObject : {
            objectName : "schema",
            keyPropName : "namespace",
            extensions : true,
            aSubObject : [ {
                objectName : "entityType",
                keyPropName : "name",
                extensions : true,
                aSubObject : [ {
                    objectName : "property",
                    keyPropName : "name",
                    aSubObject : [],
                    extensions : true,
                } ]
            }, {
                objectName : "entityContainer",
                keyPropName : "name",
                extensions : false,
                aSubObject : [ {
                    objectName : "entitySet",
                    keyPropName : "name",
                    extensions : true,
                    aSubObject : [],
                } ],
            } ]
        },

        /*
         * merging extra annotations with provided service metadata
         * 
         * @private
         */
        mergeV2Annotations : function(sAnnotationJSONDoc) {
            try {
                var oAnnotation = JSON.parse(sAnnotationJSONDoc);
            } catch (exception) {
                return;
            }

            var oMetadata;
            try {
                oMetadata = this._oModel.getServiceMetadata().dataServices;
            } catch (exception) {
                return;
            }

            // find "schema" entry in annotation document
            for ( var propName in oAnnotation) {
                if (!(this.oUI5ODataModelAnnotatableObject.objectName == propName))
                    continue;
                if (!(oAnnotation[propName] instanceof Array)) {
                    continue;
                }
                this.mergeV2AnnotationLevel(oMetadata[this.oUI5ODataModelAnnotatableObject.objectName],
                        oAnnotation[this.oUI5ODataModelAnnotatableObject.objectName],
                        this.oUI5ODataModelAnnotatableObject);
                break;
            }

            return;
        },

        /*
         * merging extra annotations with agiven service metadata object
         * 
         * @private
         */

        mergeV2AnnotationLevel : function(aMetadata, aAnnotation, oUI5ODataModelAnnotatableObject) {

            for ( var i = -1, oAnnotation; oAnnotation = aAnnotation[++i];) {
                for ( var j = -1, oMetadata; oMetadata = aMetadata[++j];) {

                    if (!(oAnnotation[oUI5ODataModelAnnotatableObject.keyPropName] == oMetadata[oUI5ODataModelAnnotatableObject.keyPropName]))
                        continue;
                    // found match:
                    // apply extensions from oAnnotation object to oMetadata object
                    if (oAnnotation["extensions"] != undefined) {
                        if (oMetadata["extensions"] == undefined)
                            oMetadata["extensions"] = new Array();

                        for ( var l = -1, oAnnotationExtension; oAnnotationExtension = oAnnotation["extensions"][++l];) {
                            var bFound = false;
                            for ( var m = -1, oMetadataExtension; oMetadataExtension = oMetadata["extensions"][++m];) {
                                if (oAnnotationExtension.name == oMetadataExtension.name
                                        && oAnnotationExtension.namespace == oMetadataExtension.namespace) {
                                    oMetadataExtension.value = oAnnotationExtension.value;
                                    bFound = true;
                                    break;
                                }
                            }
                            if (!bFound)
                                oMetadata["extensions"].push(oAnnotationExtension);
                        }
                    }
                    // walk down to sub objects
                    for ( var k = -1, oUI5ODataModelAnnotatableSubObject; oUI5ODataModelAnnotatableSubObject = oUI5ODataModelAnnotatableObject.aSubObject[++k];) {

                        for ( var propName in oAnnotation) {
                            if (!(oUI5ODataModelAnnotatableSubObject.objectName == propName))
                                continue;
                            if (!(oAnnotation[oUI5ODataModelAnnotatableSubObject.objectName] instanceof Array))
                                continue;
                            if ((oMetadata[oUI5ODataModelAnnotatableSubObject.objectName] == undefined)
                                    || (!(oMetadata[oUI5ODataModelAnnotatableSubObject.objectName] instanceof Array)))
                                continue;
                            this.mergeV2AnnotationLevel(
                                    oMetadata[oUI5ODataModelAnnotatableSubObject.objectName],
                                    oAnnotation[oUI5ODataModelAnnotatableSubObject.objectName],
                                    oUI5ODataModelAnnotatableSubObject);
                            break;
                        }
                    }
                }
            }
            return;
        },

        /**
         * Find analytic query result by name
         * 
         * @param {string}
         *            sName Fully qualified name of query result entity set
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult} The query result object
         *          with this name or null if it does not exist
         */
        findQueryResultByName : function(sName) {
            var oQueryResult = this._oQueryResultSet[sName];

            // Everybody should have a second chance:
            // If the name was not fully qualified, check if it is in the default
            // container
            if (!oQueryResult && this._oDefaultEntityContainer) {
                var sQName = this._oDefaultEntityContainer.name + "." + sName;

                oQueryResult = this._oQueryResultSet[sQName];
            }
            return oQueryResult;
        },

        /**
         * Get the names of all query results (entity sets) offered by the model
         * 
         * @returns {array(string)} List of all query result names
         */
        getAllQueryResultNames : function() {
            if (this._aQueryResultNames)
                return this._aQueryResultNames;

            this._aQueryResultNames = new Array(0);

            for ( var sName in this._oQueryResultSet)
                this._aQueryResultNames.push(this._oQueryResultSet[sName].getName());

            return this._aQueryResultNames;
        },

        /**
         * Get all query results offered by the model
         * 
         * @returns {object} An object with individual JS properties for each query
         *          result included in the model. The JS object properties all are
         *          objects of type sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult. The names
         *          of the JS object properties are given by the entity set names
         *          representing the query results.
         */
        getAllQueryResults : function() {
            return this._oQueryResultSet;
        },

        /**
         * Get underlying OData model provided by SAP UI5
         * 
         * @returns {object} The SAP UI5 representation of the model.
         */
        getODataModel : function() {
            return this._oModel;
        },
        /**
         * Private methods
         */

        /**
         * Find entity sets of a given type
         * 
         * @private
         */
        _getEntitySetsOfType : function(oSchema, sQTypeName) {
            var aEntitySet = [];

            for ( var i = -1, oEntityContainer; oEntityContainer = oSchema.entityContainer[++i];) {
                for ( var j = -1, oEntitySet; oEntitySet = oEntityContainer.entitySet[++j];) {
                    if (oEntitySet.entityType == sQTypeName)
                        aEntitySet.push([ oEntityContainer, oEntitySet ]);
                }
            }

            return aEntitySet;
        },

        /**
         * Private member attributes
         */
        _oModel : null,
        _oDefaultEntityContainer : null,

        _aQueryResultNames : null,
        _oQueryResultSet : null,
        _oParameterizationSet : null,
        _oEntityTypeSet : null,
        _oEntitySetSet : null,
        _oEntityTypeNameToEntitySetMap : null,

        _oActivatedWorkarounds : null,
};

/** ******************************************************************** */

/**
 * Create a representation of an analytic query
 * 
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model}
 *            oModel The analytical model containing this query result entity
 *            set
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType}
 *            oEntityType The OData entity type for this query
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntitySet}
 *            oEntitySet The OData entity set for this query offered by the
 *            OData service
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameterization}
 *            oParameterization The parameterization of this query, if any
 * 
 * @constructor
 * @this (QueryResult)
 * 
 * 
 * @class Representation of an entity type annotated with
 *        sap:semantics="aggregate".
 * 
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult = function(oModel, oEntityType, oEntitySet, oParameterization) {
    this._init(oModel, oEntityType, oEntitySet, oParameterization);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult.prototype = {

        /**
         * initialize new object
         * 
         * @private
         */
        _init : function(oModel, oEntityType, oEntitySet, oParameterization, oAssocFromParamsToResult) {
            this._oModel = oModel;
            this._oEntityType = oEntityType;
            this._oEntitySet = oEntitySet;
            this._oParameterization = oParameterization;

            this._oDimensionSet = new Object();
            this._oMeasureSet = new Object();

            // parse entity type for analytic semantics described by annotations
            var aProperty = oEntityType.getTypeDescription().property;
            var oAttributeForPropertySet = {};
            for ( var i = -1, oProperty; oProperty = aProperty[++i];) {
                if (oProperty.extensions == undefined)
                    continue;
                for ( var j = -1, oExtension; oExtension = oProperty.extensions[++j];) {

                    if (!oExtension.namespace == sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants.SAP_NAMESPACE)
                        continue;

                    switch (oExtension.name) {
                    case "aggregation-role":
                        switch (oExtension.value) {
                        case "dimension":
                            var oDimension = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension(this, oProperty);
                            this._oDimensionSet[oDimension.getName()] = oDimension;
                            break;
                        case "measure":
                            var oMeasure = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Measure(this, oProperty);
                            this._oMeasureSet[oMeasure.getName()] = oMeasure;
                            break;
                        case "totaled-properties-list":
                            this._oTotaledPropertyListProperty = oProperty;
                            break;
                        }
                        break;
                    case "attribute-for":
                        var oDimensionAttribute = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.DimensionAttribute(this,
                                oProperty);
                        oAttributeForPropertySet[oDimensionAttribute.getKeyProperty()] = oDimensionAttribute;
                        break;
                    }
                }
            }

            // assign dimension attributes to the respective dimension objects
            for ( var sDimensionAttributeName in oAttributeForPropertySet) {
                var oDimensionAttribute = oAttributeForPropertySet[sDimensionAttributeName];
                oDimensionAttribute.getDimension().addAttribute(oDimensionAttribute);
            }

            // apply workaround for missing text properties if requested
            if (oModel._oActivatedWorkarounds.IdentifyTextPropertiesByName) {
                var aMatchedTextPropertyName = new Array();
                for ( var oDimName in this._oDimensionSet) {
                    var oDimension = this._oDimensionSet[oDimName];
                    if (!oDimension.getTextProperty()) {
                        var oTextProperty = null; // order of matching is
                        // significant!
                        oTextProperty = oEntityType.findPropertyByName(oDimName + "Name");
                        if (!oTextProperty)
                            oTextProperty = oEntityType.findPropertyByName(oDimName + "Text");
                        if (!oTextProperty)
                            oTextProperty = oEntityType.findPropertyByName(oDimName + "Desc");
                        if (!oTextProperty)
                            oTextProperty = oEntityType.findPropertyByName(oDimName + "Description");
                        if (oTextProperty) { // any match?
                            oDimension.setTextProperty(oTextProperty); // link
                            // dimension
                            // with text
                            // property
                            aMatchedTextPropertyName.push(oTextProperty.name);
                        }
                    }
                }
                // make sure that any matched text property is not exposed as
                // dimension (according to spec)
                for ( var i = -1, sPropertyName; sPropertyName = aMatchedTextPropertyName[++i];) {
                    delete this._oDimensionSet[sPropertyName];
                }
            }
        },

        /**
         * Get the name of the query result
         * 
         * @returns {string} The fully qualified name of the parameter
         */
        getName : function() {
            return this.getEntitySet().getQName();
        },

        /**
         * Get the parameterization of this query result
         * 
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameterization} The object for the
         *          parameterization or null if the query result is not
         *          parameterized
         */
        getParameterization : function() {
            return this._oParameterization;
        },

        /**
         * Get the names of all dimensions included in the query result
         * 
         * @returns {array(string)} List of all dimension names
         */
        getAllDimensionNames : function() {
            if (this._aDimensionNames)
                return this._aDimensionNames;

            this._aDimensionNames = [];

            for ( var sName in this._oDimensionSet)
                this._aDimensionNames.push(this._oDimensionSet[sName].getName());

            return this._aDimensionNames;
        },

        /**
         * Get all dimensions included in this query result
         * 
         * @returns {object} An object with individual JS properties for each
         *          dimension included in the query result. The JS object properties
         *          all are objects of type sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension. The
         *          names of the JS object properties are given by the OData entity
         *          type property names representing the dimension keys.
         */
        getAllDimensions : function() {
            return this._oDimensionSet;
        },

        /**
         * Get the names of all measures included in the query result
         * 
         * @returns {array(string)} List of all measure names
         */
        getAllMeasureNames : function() {
            if (this._aMeasureNames)
                return this._aMeasureNames;

            this._aMeasureNames = [];

            for ( var sName in this._oMeasureSet)
                this._aMeasureNames.push(this._oMeasureSet[sName].getName());

            return this._aMeasureNames;
        },

        /**
         * Get all measures included in this query result
         * 
         * @returns {object} An object with individual JS properties for each
         *          measure included in the query result. The JS object properties
         *          all are objects of type sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Measure. The
         *          names of the JS object properties are given by the OData entity
         *          type property names representing the measure raw values.
         */
        getAllMeasures : function() {
            return this._oMeasureSet;
        },

        /**
         * Find dimension by name
         * 
         * @param {string}
         *            sName Dimension name
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension} The dimension object with
         *          this name or null if it does not exist
         */
        findDimensionByName : function(sName) {
            return this._oDimensionSet[sName];
        },

        /**
         * Get property holding the totaled property list
         * 
         * @returns {object} The DataJS object representing this property
         */
        getTotaledPropertiesListProperty : function() {
            return this._oTotaledPropertyListProperty;
        },

        /**
         * Find measure by name
         * 
         * @param {string}
         *            sName Measure name
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension} The measure object with this
         *          name or null if it does not exist
         */
        findMeasureByName : function(sName) {
            return this._oMeasureSet[sName];
        },

        /**
         * Get the analytical model containing the entity set for this query result
         * 
         * @returns {object} The analytical representation of the OData model
         */
        getModel : function() {
            return this._oModel;
        },

        getEntityType : function() {
            return this._oEntityType;
        },

        getEntitySet : function() {
            return this._oEntitySet;
        },

        /**
         * Private member attributes
         */

        _oModel : null,
        _oEntityType : null,
        _oEntitySet : null,
        _oParameterization : null,
        _aDimensionNames : null,
        _oDimensionSet : null,
        _aMeasureNames : null,
        _oMeasureSet : null,
        _oTotaledPropertyListProperty : null
};

/** ******************************************************************** */

/**
 * Create a representation of a parameterization for an analytic query
 * 
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType}
 *            oEntityType The OData entity type for this parameterization
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntitySet}
 *            oEntitySet The OData entity set for this parameterization offered
 *            by the OData service
 * 
 * @class Representation of an entity type annotated with
 *        sap:semantics="parameters".
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameterization = function(oEntityType, oEntitySet) {
    this._init(oEntityType, oEntitySet);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameterization.prototype = {
        /**
         * @private
         */
        _init : function(oEntityType, oEntitySet) {
            this._oEntityType = oEntityType;
            this._oEntitySet = oEntitySet;

            this._oParameterSet = new Object();

            // parse entity type for analytic semantics described by annotations
            var aProperty = oEntityType.getTypeDescription().property;
            for ( var i = -1, oProperty; oProperty = aProperty[++i];) {
                if (oProperty.extensions == undefined)
                    continue;

                for ( var j = -1, oExtension; oExtension = oProperty.extensions[++j];) {

                    if (!oExtension.namespace == sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants.SAP_NAMESPACE)
                        continue;

                    switch (oExtension.name) {
                    // process parameter semantics
                    case "parameter":
                        var oParameter = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameter(this, oProperty);
                        this._oParameterSet[oParameter.getName()] = oParameter;

                        break;
                    }
                }
            }

        },

        // to be called only by Model objects
        setTargetQueryResult : function(oQueryResult, oAssociation) {
            this._oQueryResult = oQueryResult;
            var sQAssocName = this._oEntityType.getSchema().namespace + "." + oAssociation.name;
            var aNavProp = this._oEntityType.getTypeDescription().navigationProperty;
            if (!aNavProp)
                throw "Invalid consumption model: Parameters entity type lacks navigation property for association to query result entity type";
            for ( var i = -1, oNavProp; oNavProp = aNavProp[++i];) {
                if (oNavProp.relationship == sQAssocName)
                    this._oNavPropToQueryResult = oNavProp.name;
            }
            if (!this._oNavPropToQueryResult)
                throw "Invalid consumption model: Parameters entity type lacks navigation property for association to query result entity type";
        },

        /**
         * Get the name of the parameter
         * 
         * @returns {string} The name of the parameter
         */
        getName : function() {
            return this.getEntitySet().getQName();
        },

        /**
         * Get the names of all parameters part of the parameterization
         * 
         * @returns {array(string)} List of all parameter names
         */
        getAllParameterNames : function() {
            if (this._aParameterNames)
                return this._aParameterNames;

            this._aParameterNames = [];

            for ( var sName in this._oParameterSet)
                this._aParameterNames.push(this._oParameterSet[sName].getName());

            return this._aParameterNames;
        },

        /**
         * Get all parameters included in this parameterization
         * 
         * @returns {object} An object with individual JS properties for each
         *          parameter included in the query result. The JS object properties
         *          all are objects of type sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameter. The
         *          names of the JS object properties are given by the OData entity
         *          type property names representing the parameter keys.
         */
        getAllParameters : function() {
            return this._oParameterSet;
        },

        /**
         * Find parameter by name
         * 
         * @param {string}
         *            sName Parameter name
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameter} The parameter object with
         *          this name or null if it does not exist
         */
        findParameterByName : function(sName) {
            return this._oParameterSet[sName];
        },

        /**
         * Get navigation property to query result
         * 
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult} The parameter object with
         *          this name or null if it does not exist
         */
        getNavigationPropertyToQueryResult : function() {
            return this._oNavPropToQueryResult;
        },

        getEntityType : function() {
            return this._oEntityType;
        },

        getEntitySet : function() {
            return this._oEntitySet;
        },

        /**
         * Private member attributes
         */
        _oEntityType : null,
        _oEntitySet : null,
        _oQueryResult : null,
        _oNavPropToQueryResult : null,
        _aParameterNames : null,
        _oParameterSet : null,
};

/** ******************************************************************** */

/**
 * Create a representation of a single parameter contained in a parameterization
 * 
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameterization}
 *            oParameterization The parameterization containing this parameter
 * @param {object}
 *            oProperty The DataJS object object representing the text property
 * 
 * @constructor
 * 
 * @class Representation of a property annotated with sap:parameter.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameter = function(oParameterization, oProperty) {
    this._init(oParameterization, oProperty);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameter.prototype = {
        /**
         * @private
         */
        _init : function(oParameterization, oProperty) {
            this._oParameterization = oParameterization;
            this._oProperty = oProperty;

            var oEntityType = oParameterization.getEntityType();

            if (oProperty.extensions != undefined) {
                for ( var i = -1, oExtension; oExtension = oProperty.extensions[++i];) {

                    if (!oExtension.namespace == sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants.SAP_NAMESPACE)
                        continue;

                    switch (oExtension.name) {
                    case "parameter":
                        switch (oExtension.value) {
                        case "mandatory":
                            this._bRequired = true;
                            break;
                        case "optional":
                            this._bRequired = false;
                            break;
                        default:
                            throw "Invalid annotation value for parameter property";
                        }
                        break;
                    case "label":
                        this._sLabelText = oExtension.value;
                        break;
                    case "text":
                        this._oTextProperty = oEntityType.findPropertyByName(oExtension.value);
                        break;
                    case "upper-boundary":
                        this._bIntervalBoundaryParameter = true;
                        this._oUpperIntervalBoundaryParameterProperty = oEntityType
                        .findPropertyByName(oExtension.value);
                        break;
                    case "lower-boundary":
                        this._bIntervalBoundaryParameter = true;
                        this._oLowerIntervalBoundaryParameterProperty = oEntityType
                        .findPropertyByName(oExtension.value);
                        break;
                    }
                }
            }
            if (!this._sLabelText)
                this._sLabelText = "";
        },

        // to be called only by Model objects
        setValueSetEntity : function(oEntityType, oEntitySet) {
            this._oValueSetEntityType = oEntityType;
            this._oValueSetEntitySet = oEntitySet;
        },

        /**
         * Get text property related to this parameter
         * 
         * @returns {object} The DataJS object representing the text property or
         *          null if it does not exist
         */
        getTextProperty : function() {
            return this._oTextProperty;
        },

        /**
         * Get label
         * 
         * @returns {string} The (possibly language-dependent) label text for this
         *          parameter
         */
        getLabelText : function() {
            if (!this._sLabelText
                    && this._oQueryResult._oModel._oActivatedWorkarounds.CreateLabelsFromTechnicalNames)
                this._sLabelText = sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.helper.tokenizeNametoLabelText(this
                        .getName());
            return this._sLabelText;
        },

        /**
         * Get indicator whether or not the parameter is optional
         * 
         * @returns {boolean} True iff the parameter is optional
         */
        isOptional : function() {
            return (!this._bRequired);
        },

        /**
         * Get indicator if the parameter represents an interval boundary
         * 
         * @returns {boolean} True iff it represents an interval boundary, otherwise
         *          false
         */
        isIntervalBoundary : function() {
            return this._bIntervalBoundaryParameter;
        },

        /**
         * Get indicator if the parameter represents the lower boundary of an
         * interval
         * 
         * @returns {boolean} True iff it represents the lower boundary of an
         *          interval, otherwise false
         */
        isLowerIntervalBoundary : function() {
            return (this._oUpperIntervalBoundaryParameterProperty ? true : false);
        },

        /**
         * Get property for the parameter representing the peer boundary of the same
         * interval
         * 
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameter} The parameter representing
         *          the peer boundary of the same interval. This means that if
         *          *this* parameter is a lower boundary, the returned object
         */
        getPeerIntervalBoundaryParameter : function() {
            var sPeerParamPropName = null;
            if (this._oLowerIntervalBoundaryParameterProperty)
                sPeerParamPropName = this._oLowerIntervalBoundaryParameterProperty.name;
            else
                sPeerParamPropName = this._oUpperIntervalBoundaryParameterProperty.name;
            if (!sPeerParamPropName)
                throw "Parameter is not an interval boundary";
            return this._oParameterization.findParameterByName(sPeerParamPropName);
        },

        /**
         * Get indicator if a set of values is available for this parameter.
         * Typically, this is true for parameters with a finite set of known values
         * such as products, business partners in different roles, organization
         * units, and false for integer or date parameters
         * 
         * @returns {boolean} True iff a value set is available, otherwise false
         */
        isValueSetAvailable : function() {
            return (this._oValueSetEntityType ? true : false);
        },

        /**
         * Get the name of the parameter
         * 
         * @returns {string} The name of the parameter
         */
        getName : function() {
            return this._oProperty.name;
        },

        /**
         * Get property
         * 
         * @returns {object} The DataJS object representing the property of this
         *          parameter
         */
        getProperty : function() {
            return this._oProperty;
        },

        /**
         * Get parameterization containing this parameter
         * 
         * @return {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameterization} The parameterization
         *         object
         */
        getContainingParameterization : function() {
            return this._oParameterization;
        },

        /**
         * Get the URI to locate the entity set holding the value set, if it is
         * available.
         * 
         * @param {String}
         *            sServiceRootURI (optional) Identifies the root of the OData
         *            service
         * @returns The resource path of the URI pointing to the entity set. It is a
         *          relative URI unless a service root is given, which would then
         *          prefixed in order to return a complete URL.
         */
        getURIToValueEntitySet : function(sServiceRootURI) {
            var sURI = null;
            sURI = (sServiceRootURI ? sServiceRootURI : "") + "/" + this._oValueSetEntitySet.getQName();
            return sURI;
        },

        /**
         * Private member attributes
         */
        _oParameterization : null,
        _oProperty : null,
        _sLabelText : null,
        _oTextProperty : null,
        _bRequired : false,
        _bIntervalBoundaryParameter : false,
        _oLowerIntervalBoundaryParameterProperty : null,
        _oUpperIntervalBoundaryParameterProperty : null,

        _oValueSetEntityType : null,
        _oValueSetEntitySet : null,
};

/** ******************************************************************** */

/**
 * Create a representation of a dimension provided by an analytic query
 * 
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult}
 *            oQueryResult The query result containing this dimension
 * @param {object}
 *            oProperty The DataJS object object representing the dimension
 * 
 * @constructor
 * 
 * @class Representation of a property annotated with
 *        sap:aggregation-role="dimension".
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension = function(oQueryResult, oProperty) {
    this._init(oQueryResult, oProperty);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension.prototype = {
        _init : function(oQueryResult, oProperty) {
            this._oQueryResult = oQueryResult;
            this._oProperty = oProperty;

            this._oAttributeSet = new Object();

            if (oProperty.extensions != undefined) {

                for ( var i = -1, oExtension; oExtension = oProperty.extensions[++i];) {

                    if (!oExtension.namespace == sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants.SAP_NAMESPACE)
                        continue;

                    switch (oExtension.name) {
                    case "label":
                        this._sLabelText = oExtension.value;
                        break;
                    case "text":
                        this._oTextProperty = oQueryResult.getEntityType().findPropertyByName(
                                oExtension.value);
                        break;
                    case "super-ordinate":
                        this._sSuperOrdinatePropertyName = oExtension.value;
                        break;
                    }
                }
            }
            if (!this._sLabelText)
                this._sLabelText = "";
        },

        /**
         * Get the name of the dimension
         * 
         * @returns {string} The name of this dimension
         */
        getName : function() {
            return this._oProperty.name;
        },

        /**
         * Get the key property
         * 
         * @returns {object} The DataJS object representing the property for the
         *          dimension key
         */
        getKeyProperty : function() {
            return this._oProperty;
        },

        /**
         * Get text property related to this dimension
         * 
         * @returns {object} The DataJS object representing the text property or
         *          null if it does not exist
         */
        getTextProperty : function() {
            return this._oTextProperty;
        },

        /**
         * Set text property Relevant for workaround w/ID
         * IdentifyTextPropertiesByName
         * 
         * @private
         */
        setTextProperty : function(oTextProperty) {
            this._oTextProperty = oTextProperty;
        },

        /**
         * Get label
         * 
         * @returns {string} The (possibly language-dependent) label text for this
         *          dimension
         */
        getLabelText : function() {
            if (!this._sLabelText
                    && this._oQueryResult._oModel._oActivatedWorkarounds.CreateLabelsFromTechnicalNames)
                this._sLabelText = sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.helper.tokenizeNametoLabelText(this
                        .getName());
            return this._sLabelText;
        },

        /**
         * Get super-ordinate dimension
         * 
         * @returns {object} The super-ordinate dimension or null if there is none
         */
        getSuperOrdinateDimension : function() {
            if (!this._sSuperOrdinatePropertyName)
                return null;
            return this._oQueryResult.findDimensionByName(this._sSuperOrdinatePropertyName);
        },

        /**
         * Get associated hierarchy
         * 
         * @returns {object} The hierarchy object or null if there is none. It can
         *          be an instance of class
         *          sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.RecursiveHierarchy (TODO later: or a
         *          leveled hierarchy). Use methods isLeveledHierarchy and
         *          isRecursiveHierarchy to determine object type.
         */
        getHierarchy : function() {
            // set associated hierarchy if any
            if (!this._oHierarchy)
                this._oHierarchy = this._oQueryResult.getEntityType()
                .getHierarchy(this._oProperty.name);

            return this._oHierarchy;
        },

        /**
         * Get the names of all dimensions included in the query result
         * 
         * @returns {array(string)} List of all dimension names
         */
        getAllAttributeNames : function() {
            if (this._aAttributeNames)
                return this._aAttributeNames;

            this._aAttributeNames = [];

            for ( var sName in this._oAttributeSet)
                this._aAttributeNames.push(this._oAttributeSet[sName].getName());

            return this._aAttributeNames;
        },

        /**
         * Get all attributes of this dimensions
         * 
         * @returns {object} An object with individual JS properties for each
         *          attribute of this dimension. The JS object properties all are
         *          objects of type sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.DimensionAttribute. The
         *          names of the JS object properties are given by the OData entity
         *          type property names representing the dimension attribute keys.
         */
        getAllAttributes : function() {
            return this._oAttributeSet;
        },

        /**
         * Find attribute by name
         * 
         * @param {string}
         *            sName Attribute name
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension} The dimension attribute
         *          object with this name or null if it does not exist
         */
        findAttributeByName : function(sName) {
            return this._oAttributeSet[sName];
        },

        // to be called only by QueryResult objects
        addAttribute : function(oDimensionAttribute) {
            this._oAttributeSet[oDimensionAttribute.getName()] = oDimensionAttribute;
        },

        /**
         * Get query result containing this parameter
         * 
         * @return {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult} The query result object
         */
        getContainingQueryResult : function() {
            return this._oQueryResult;
        },

        /**
         * Private member attributes
         */
        _oQueryResult : null,
        _oProperty : null,

        _oTextProperty : null,
        _sLabelText : null,
        _sSuperOrdinatePropertyName : null,
        _aAttributeNames : null,
        _oAttributeSet : null,

        _oHierarchy : null,
};

/** ******************************************************************** */

/**
 * Create a representation of a dimension attribute provided by an analytic
 * query
 * 
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult}
 *            oQueryResult The query result containing this dimension attribute
 * @param {object}
 *            oProperty The DataJS object object representing the dimension
 *            attribute
 * 
 * @constructor
 * 
 * @class Representation of a dimension attribute.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.DimensionAttribute = function(oQueryResult, oProperty) {
    this._init(oQueryResult, oProperty);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.DimensionAttribute.prototype = {
        /**
         * @private
         */
        _init : function(oQueryResult, oProperty) {
            this._oQueryResult = oQueryResult;
            this._oProperty = oProperty;

            if (oProperty.extensions != undefined) {

                for ( var i = -1, oExtension; oExtension = oProperty.extensions[++i];) {

                    if (!oExtension.namespace == sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants.SAP_NAMESPACE)
                        continue;

                    switch (oExtension.name) {
                    case "attribute-for":
                        this._sDimensionName = oExtension.value;
                        break;
                    case "label":
                        this._sLabelText = oExtension.value;
                        break;
                    case "text":
                        this._oTextProperty = oQueryResult.getEntityType().findPropertyByName(
                                oExtension.value);
                        break;
                    }
                }
            }
        },

        /**
         * Get the name of the dimension attribute
         * 
         * @returns {string} The name of the dimension attribute
         */
        getName : function() {
            return this._oProperty.name;
        },

        /**
         * Get the key property
         * 
         * @returns {object} The DataJS object representing the property for the key
         *          of this dimension attribute
         */
        getKeyProperty : function() {
            return this._oProperty;
        },

        /**
         * Get text property related to this dimension attribute
         * 
         * @returns {object} The DataJS object representing the text property or
         *          null if it does not exist
         */
        getTextProperty : function() {
            return this._oTextProperty;
        },

        /**
         * Get label
         * 
         * @returns {string} The (possibly language-dependent) label text for this
         *          dimension attribute
         */
        getLabelText : function() {
            return this._sLabelText;
        },

        /**
         * Get dimension
         * 
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension} The dimension object
         *          containing this attribute
         */
        getDimension : function() {
            return this._oQueryResult.findDimensionByName(this._sDimensionName);
        },

        /**
         * Private member attributes
         */
        _oQueryResult : null,
        _oProperty : null,

        _oTextProperty : null,
        _sLabelText : null,
        _sDimensionName : null,
};

/** ******************************************************************** */

/**
 * Create a representation of a measure provided by an analytic query
 * 
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult}
 *            oQueryResult The query result containing this measure
 * @param {object}
 *            oProperty The DataJS object object representing the measure
 * 
 * @constructor
 * 
 * @class Representation of a property annotated with
 *        sap:aggregation-role="measure".
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Measure = function(oQueryResult, oProperty) {
    this._init(oQueryResult, oProperty);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Measure.prototype = {
        /**
         * @private
         */
        _init : function(oQueryResult, oProperty) {
            this._oQueryResult = oQueryResult;
            this._oProperty = oProperty;

            if (oProperty.extensions != undefined) {

                for ( var i = -1, oExtension; oExtension = oProperty.extensions[++i];) {

                    if (!oExtension.namespace == sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants.SAP_NAMESPACE)
                        continue;

                    switch (oExtension.name) {
                    case "label":
                        this._sLabelText = oExtension.value;
                        break;
                    case "text":
                        this._oTextProperty = oQueryResult.getEntityType().findPropertyByName(
                                oExtension.value);
                        break;
                    case "unit":
                        this._oUnitProperty = oQueryResult.getEntityType().findPropertyByName(
                                oExtension.value);
                        break;
                    }
                }
            }
            if (!this._sLabelText)
                this._sLabelText = "";
        },

        /**
         * Get the name of the measure
         * 
         * @returns {string} The name of the measure
         */
        getName : function() {
            return this._oProperty.name;
        },

        /**
         * Get the raw value property
         * 
         * @returns {object} The DataJS object representing the property holding the
         *          raw value of this measure
         */
        getRawValueProperty : function() {
            return this._oProperty;
        },

        /**
         * Get the text property associated to the raw value property holding the
         * formatted value related to this measure
         * 
         * @returns {object} The DataJS object representing the property holding the
         *          formatted value text of this measure or null if this measure
         *          does not have a unit
         */
        getFormattedValueProperty : function() {
            return this._oTextProperty;
        },

        /**
         * Get the unit property related to this dimension
         * 
         * @returns {object} The DataJS object representing the unit property or
         *          null if this measure does not have a unit
         */
        getUnitProperty : function() {
            return this._oUnitProperty;
        },

        /**
         * Get label
         * 
         * @returns {string} The (possibly language-dependent) label text for this
         *          measure
         */
        getLabelText : function() {
            return this._sLabelText;
        },

        /**
         * Private member attributes
         */
        _oQueryResult : null,
        _oProperty : null,

        _oTextProperty : null,
        _sLabelText : null,
        _oUnitProperty : null
};

/** ******************************************************************** */

/**
 * Create a representation of an OData entity set in the context of an analytic
 * query
 * 
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity
 *            set
 * @param {object}
 *            oSchema DataJS object for the schema surrounding the container of
 *            this entity set
 * @param {object}
 *            oContainer DataJS object for the container holding this entity set
 * @param {object}
 *            oEntitySet DataJS object for the entity set
 * 
 * @constructor
 * 
 * @class Representation of a OData entity set.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntitySet = function(oModel, oSchema, oContainer, oEntitySet) {
    this._init(oModel, oSchema, oContainer, oEntitySet);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntitySet.prototype = {
        /**
         * @private
         */
        _init : function(oModel, oSchema, oContainer, oEntitySet) {
            this._oEntitySet = oEntitySet;
            this._oContainer = oContainer;
            this._oSchema = oSchema;
            this._oModel = oModel;

            if (oSchema.entityContainer.length > 1)
                this._sQName = oContainer.name + "." + oEntitySet.name;
            else
                // no need to disambiguate this for the simple case
                this._sQName = oEntitySet.name;
        },

        /**
         * Get the fully qualified name for this entity type
         * 
         * @returns {string} The fully qualified name
         */
        getQName : function() {
            return this._sQName;
        },

        /**
         * Get full description for this entity set
         * 
         * @returns {object} The DataJS object representing the entity set
         */
        getSetDescription : function() {
            return this._oEntitySet;
        },

        getSchema : function() {
            return this._oSchema;
        },

        getModel : function() {
            return this._oModel;
        },

        /**
         * Private member attributes
         */

        _oEntitySet : null,
        _oContainer : null,
        _oSchema : null,
        _oModel : null,
        _sQName : null,

};

/** ******************************************************************** */

/**
 * Create a representation of an OData entity type in the context of an analytic
 * query
 * 
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity
 *            type
 * @param {object}
 *            oSchema DataJS object for the schema containing this entity type
 * @param {object}
 *            oEntityType DataJS object for the entity type
 * 
 * @constructor
 * 
 * @class Representation of a OData entity type.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType = function(oModel, oSchema, oEntityType) {
    this._init(oModel, oSchema, oEntityType);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType.prototype = {
        /**
         * @private
         */
        _init : function(oModel, oSchema, oEntityType) {
            this._oEntityType = oEntityType;
            this._oSchema = oSchema;
            this._oModel = oModel;

            this._oPropertySet = new Object();
            this._aFilterablePropertyNames = [];
            this._aSortablePropertyNames = [];
            this._aRequiredFilterPropertyNames = [];

            this._sQName = oSchema.namespace + "." + oEntityType.name;

            /*
             * collect all hierarchies defined in this entity type
             */
            var oRecursiveHierarchies = {}; // temp for collecting all properties
            // participating in hierarchies
            var oRecursiveHierarchy = null;

            for ( var i = -1, oProperty; oProperty = oEntityType.property[++i];) {

                // by default, every property can be filtered
                this._aFilterablePropertyNames.push(oProperty.name);

                // by default, every property can be sorted
                this._aSortablePropertyNames.push(oProperty.name);

                if (oProperty.extensions == undefined)
                    continue;
                for ( var j = -1, oExtension; oExtension = oProperty.extensions[++j];) {

                    if (!oExtension.namespace == sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants.SAP_NAMESPACE)
                        continue;

                    switch (oExtension.name) {
                    case "filterable":
                        if (oExtension.value == "false")
                            this._aFilterablePropertyNames.pop(oProperty.name);
                        break;
                    case "sortable":
                        if (oExtension.value == "false")
                            this._aSortablePropertyNames.pop(oProperty.name);
                        break;
                    case "required-filter":
                        if (oExtension.value == "true")
                            this._aRequiredFilterPropertyNames.push(oProperty.name);
                        break;

                        // hierarchy annotations: build temporary set of
                        // hierarchy-node-id properties with relevant attributes
                    case "hierarchy-node-for":
                        if (!(oRecursiveHierarchy = oRecursiveHierarchies[oProperty.name]))
                            oRecursiveHierarchy = oRecursiveHierarchies[oProperty.name] = new Object();
                        oRecursiveHierarchy.dimensionName = oExtension.value;
                        break;
                    case "hierarchy-parent-node-for":
                    case "hierarchy-parent-nod": // TODO workaround for GW bug
                        if (!(oRecursiveHierarchy = oRecursiveHierarchies[oExtension.value]))
                            oRecursiveHierarchy = oRecursiveHierarchies[oExtension.value] = new Object();
                        oRecursiveHierarchy.parentNodeIDProperty = oProperty;
                        break;
                    case "hierarchy-level-for":
                        if (!(oRecursiveHierarchy = oRecursiveHierarchies[oExtension.value]))
                            oRecursiveHierarchy = oRecursiveHierarchies[oExtension.value] = new Object();
                        oRecursiveHierarchy.levelProperty = oProperty;
                        break;
                    case "hierarchy-drill-state-for":
                    case "hierarchy-drill-stat": // TODO workaround for GW bug
                        if (!(oRecursiveHierarchy = oRecursiveHierarchies[oExtension.value]))
                            oRecursiveHierarchy = oRecursiveHierarchies[oExtension.value] = new Object();
                        oRecursiveHierarchy.drillStateProperty = oProperty;
                        break;

                    }

                }

                // store property references for faster lookup
                this._oPropertySet[oProperty.name] = oProperty;
            }

            // post processing: set up hierarchy objects
            this._oRecursiveHierarchySet = new Object();
            for ( var hierNodeIDPropertyName in oRecursiveHierarchies) {
                var oHierarchy = oRecursiveHierarchies[hierNodeIDPropertyName];
                var oHierarchyNodeIDProperty = this._oPropertySet[hierNodeIDPropertyName];
                var oDimensionProperty = this._oPropertySet[oHierarchy.dimensionName];
                if (oDimensionProperty == null) {
                    // TODO temporary workaround for BW provider, which does not
                    // return it
                    // let dimension coincide with hierarchy node ID
                    oDimensionProperty = oHierarchyNodeIDProperty;
                }
                this._oRecursiveHierarchySet[oDimensionProperty.name] = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.RecursiveHierarchy(
                        oEntityType, oHierarchyNodeIDProperty, oHierarchy.parentNodeIDProperty,
                        oHierarchy.levelProperty, oDimensionProperty);
            }

        },

        /**
         * Find property by name
         * 
         * @param {string}
         *            sName Property name
         * @returns {object} The DataJS object representing the property or null if
         *          it does not exist
         */
        findPropertyByName : function(sName) {
            return this._oPropertySet[sName];
        },

        /**
         * Get names of properties that can be filtered, that is they can be used in
         * $filter expressions
         * 
         * @returns {array(string)} Array with names of properties that can be
         *          filtered.
         */
        getFilterablePropertyNames : function() {
            return this._aFilterablePropertyNames;
        },

        /**
         * Get names of properties that can be sorted, that is they can be used in
         * $orderby expressions
         * 
         * @returns {array(string)} Array with names of properties that can be
         *          sorted.
         */
        getSortablePropertyNames : function() {
            return this._aSortablePropertyNames;
        },

        /**
         * Get names of properties that must be filtered, that is they must appear
         * in every $filter expression
         * 
         * @returns {array(string)} Array with names of properties that must be
         *          filtered.
         */
        getRequiredFilterPropertyNames : function() {
            return this._aRequiredFilterPropertyNames;
        },

        /**
         * Get the names of all properties with an associated hierarchy
         * 
         * @returns {array(string)} List of all property names
         */
        getAllHierarchyPropertyNames : function() {
            if (this._aHierarchyPropertyNames)
                return this._aHierarchyPropertyNames;

            this._aHierarchyPropertyNames = [];

            for ( var sName in this._oRecursiveHierarchySet)
                this._aHierarchyPropertyNames.push(this._oRecursiveHierarchySet[sName]
                .getNodeValueProperty().name);

            return this._aHierarchyPropertyNames;
        },

        /**
         * Get the hierarchy associated to a given property Based on the current
         * specification, hierarchies are always recursive. TODO: Extend behavior
         * when leveled hierarchies get in scope
         * 
         * @param {string}
         *            sName Parameter name
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.RecursiveHierarchy} The hierarchy
         *          object or null if it does not exist
         */
        getHierarchy : function(sName) {
            if (this._oRecursiveHierarchySet[sName] == undefined)
                return null;
            return this._oRecursiveHierarchySet[sName];
        },

        /**
         * Get the fully qualified name for this entity type
         * 
         * @returns {string} The fully qualified name
         */
        getQName : function() {
            return this._sQName;
        },

        /**
         * Get full description for this entity type
         * 
         * @returns {object} The DataJS object representing the entity type
         */
        getTypeDescription : function() {
            return this._oEntityType;
        },

        getSchema : function() {
            return this._oSchema;
        },

        getModel : function() {
            return this._oModel;
        },

        /**
         * Private member attributes
         */

        _oEntityType : null,
        _oSchema : null,
        _oModel : null,
        _sQName : null,

        _oPropertySet : null,
        _aFilterablePropertyNames : null,
        _aRequiredFilterPropertyNames : null,

        _aHierarchyPropertyNames : null,
        _oRecursiveHierarchySet : null,
};

/** ******************************************************************** */

/**
 * Create a representation of a recursive hierarchy defined on one multiple
 * properties in an OData entity type query
 * 
 * @param {EntityType}
 *            oEntityType object for the entity type
 * @param {object}
 *            oNodeIDProperty DataJS object for the property holding the
 *            hierarchy node ID identifying the hierarchy node to which the
 *            OData entry belongs
 * @param {object}
 *            oParentNodeIDProperty DataJS object for the property holding the
 *            node ID of the parent of the hierarchy node pointed to by the
 *            value of oNodeIDProperty
 * @param {object}
 *            oNodeLevelProperty DataJS object for the property holding the
 *            level number for the of the hierarchy node pointed to by the value
 *            of oNodeIDProperty
 * @param {object}
 *            oNodeValueProperty DataJS object for the property holding the data
 *            value for the of the hierarchy node pointed to by the value of
 *            oNodeIDProperty
 * 
 * @constructor
 * 
 * @class Representation of a recursive hierarchy.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.RecursiveHierarchy = function(oEntityType, oNodeIDProperty,
        oParentNodeIDProperty, oNodeLevelProperty, oNodeValueProperty) {
    this._init(oEntityType, oNodeIDProperty, oParentNodeIDProperty, oNodeLevelProperty,
            oNodeValueProperty);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.RecursiveHierarchy.prototype = {
        /**
         * @private
         */
        _init : function(oEntityType, oNodeIDProperty, oParentNodeIDProperty, oNodeLevelProperty,
                oNodeValueProperty) {
            this._oEntityType = oEntityType;

            this._oNodeIDProperty = oNodeIDProperty;
            this._oParentNodeIDProperty = oParentNodeIDProperty;
            this._oNodeLevelProperty = oNodeLevelProperty;
            this._oNodeValueProperty = oNodeValueProperty;

        },

        /**
         * Get indicator if this is a recursive hierarchy
         * 
         * @returns {boolean} True
         */
        isRecursiveHierarchy : function() {
            return true;
        },

        /**
         * Get indicator if this is a leveled hierarchy
         * 
         * @returns {boolean} False
         */
        isLeveledHierarchy : function() {
            return false;
        },

        /**
         * Get the property holding the node ID of the hierarchy node
         * 
         * @returns {object} The DataJS object representing this property
         */
        getNodeIDProperty : function() {
            return this._oNodeIDProperty;
        },

        /**
         * Get the property holding the parent node ID of the hierarchy node
         * 
         * @returns {object} The DataJS object representing this property
         */
        getParentNodeIDProperty : function() {
            return this._oParentNodeIDProperty;
        },

        /**
         * Get the property holding the level of the hierarchy node
         * 
         * @returns {object} The DataJS object representing this property
         */
        getNodeLevelProperty : function() {
            return this._oNodeLevelProperty;
        },

        /**
         * Get the property holding the value that is structurally organized by the
         * hierarchy
         * 
         * @returns {object} The DataJS object representing this property
         */
        getNodeValueProperty : function() {
            return this._oNodeValueProperty;
        },

        /**
         * Private member attributes
         */

        _oNodeIDProperty : null,
        _oParentNodeIDProperty : null,
        _oNodeLevelProperty : null,
        _oNodeValueProperty : null,

};

/** ******************************************************************** */

/**
 * Create a representation of a filter expression for a given entity type. It
 * can be rendered as value for the $filter system query option.
 * 
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity
 *            type
 * @param {object}
 *            oSchema DataJS object for the schema containing this entity type
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType}
 *            oEntityType object for the entity type
 * 
 * @constructor
 * 
 * @class Representation of a $filter expression for an OData entity type.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression = function(oModel, oSchema, oEntityType) {
    this._init(oModel, oSchema, oEntityType);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression.prototype = {
        /**
         * @private
         */
        _init : function(oModel, oSchema, oEntityType) {
            this._oEntityType = oEntityType;
            this._oSchema = oSchema;
            this._oModel = oModel;

            this._aFilterCondition = new Array();
        },

        /**
         * Clear expression from any conditions that may have been set previously
         * 
         */
        clear : function() {
            this._aFilterCondition = new Array();
        },

        /**
         * Add a condition to the filter expression.
         * 
         * Multiple conditions on the same property are combined with a logical OR
         * first, and in a second step conditions for different properties are
         * combined with a logical AND.
         * 
         * @param {string}
         *            sPropertyName The name of the property bound in the condition
         * @param {sap.ui.model.FilterOperator}
         *            sOperator operator used for the condition
         * @param {object}
         *            oValue value to be used for this condition
         * @param {object}
         *            oValue2 (optional) as second value to be used for this
         *            condition
         * @throws Exception
         *             if the property is unknown or not filterable
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression} This object for
         *          method chaining
         */
        addCondition : function(sPropertyName, sOperator, oValue, oValue2) {
            var oProperty = this._oEntityType.findPropertyByName(sPropertyName);
            if (oProperty == null) {
                throw "Cannot add filter condition for unknown property name " + sPropertyName; // TODO
            }
            var aFilterablePropertyNames = this._oEntityType.getFilterablePropertyNames();
            if (aFilterablePropertyNames.indexOf(sPropertyName) === -1) {
                throw "Cannot add filter condition for not filterable property name " + sPropertyName; // TODO
            }
            this._aFilterCondition.push({
                property : oProperty,
                op : sOperator,
                val1 : oValue,
                val2 : oValue2
            });
            return this._aFilterablePropertyNames;
        },

        /**
         * Add a set condition to the filter expression.
         * 
         * A set condition tests if the value of a property is included in a set of
         * given values. It is a convenience method for this particular use case
         * eliminating the need for multiple API calls.
         * 
         * @param {string}
         *            sPropertyName The name of the property bound in the condition
         * @param {array}
         *            aValues values defining the set
         * @throws Exception
         *             if the property is unknown or not filterable
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression} This object for
         *          method chaining
         */
        addSetCondition : function(sPropertyName, aValues) {
            var oProperty = this._oEntityType.findPropertyByName(sPropertyName);
            if (oProperty == null) {
                throw "Cannot add filter condition for unknown property name " + sPropertyName; // TODO
            }
            var aFilterablePropertyNames = this._oEntityType.getFilterablePropertyNames();
            if (aFilterablePropertyNames.indexOf(sPropertyName) === -1) {
                throw "Cannot add filter condition for not filterable property name " + sPropertyName; // TODO
            }
            for ( var i = -1, oValue; oValue = aValues[++i];) {
                this._aFilterCondition.push({
                    property : oProperty,
                    op : sap.ui.model.FilterOperator.EQ,
                    val1 : oValue
                });
            }
            return this._aFilterablePropertyNames;
        },

        /**
         * Get an array of SAPUI5 Filter objects corresponding to this expression.
         * 
         * @returns {array(sap.ui.model.Filter)} List of filter objects representing
         *          this expression
         */
        getExpressionAsUI5FilterArray : function() {
            var aFilterObjects = new Array();

            for ( var i = -1, oCondition; oCondition = this._aFilterCondition[++i];) {
                aFilterObjects.push(new sap.ui.model.Filter(oCondition.property.name, oCondition.op,
                        oCondition.val1, oCondition.val2));
            }
            return aFilterObjects;
        },

        /**
         * Get the value for the OData system query option $filter corresponding to
         * this expression.
         * 
         * @returns {string} The $filter value for the filter expression
         */
        getURIFilterOptionValue : function() {

            if (this._aFilterCondition.length == 0)
                return "";

            this._aFilterCondition.sort(function(a, b) {
                if (a.property.name == b.property.name)
                    return 0;
                if (a.property.name > b.property.name)
                    return 1;
                else
                    return -1;
            });

            var sPropertyName = this._aFilterCondition[0].property.name;
            var sOptionString = "";
            var sSubExpression = "";
            for ( var i = -1, oCondition; oCondition = this._aFilterCondition[++i];) {
                if (sPropertyName != oCondition.property.name) {
                    sOptionString += (sOptionString == "" ? "" : " and ") + "(" + sSubExpression + ")";
                    sSubExpression = "";
                    sPropertyName = oCondition.property.name;
                }

                switch (oCondition.op) {
                case sap.ui.model.FilterOperator.BT:
                    sSubExpression += (sSubExpression == "" ? "" : " or ")
                    + "("
                    + oCondition.property.name
                    + " "
                    + sap.ui.model.FilterOperator.GE.toLowerCase()
                    + " "
                    + sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.helper.renderPropertyFilterValue(oCondition.val1,
                            oCondition.property.type)
                            + " and "
                            + oCondition.property.name
                            + " "
                            + sap.ui.model.FilterOperator.LE.toLowerCase()
                            + " "
                            + sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.helper.renderPropertyFilterValue(oCondition.val2,
                                    oCondition.property.type) + ")";
                    break;
                default:
                    sSubExpression += (sSubExpression == "" ? "" : " or ")
                    + "("
                    + oCondition.property.name
                    + " "
                    + oCondition.op.toLowerCase()
                    + " "
                    + sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.helper.renderPropertyFilterValue(oCondition.val1,
                            oCondition.property.type) + ")";
                }
            }
            sOptionString += (sOptionString == "" ? "" : " and ") + "(" + sSubExpression + ")";

            return sOptionString;
        },

        /**
         * Get description for this entity type
         * 
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType} The object representing the
         *          entity type
         */
        getEntityType : function() {
            return this._oEntityType;
        },

        getSchema : function() {
            return this._oSchema;
        },

        getModel : function() {
            return this._oModel;
        },

        /**
         * Private member attributes
         */

        _oEntityType : null,
        _oSchema : null,
        _oModel : null,

        _aFilterCondition : null,
};

/** ******************************************************************** */

/**
 * @class Sort order of a property
 * 
 * @static
 * @public
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortOrder = {

        /**
         * Sort Order: ascending.
         * 
         * @public
         */
        Ascending : "asc",

        /**
         * Sort Order: descending.
         * 
         * @public
         */
        Descending : "desc"

};

/** ******************************************************************** */

/**
 * Create a representation of an order by expression for a given entity type. It
 * can be rendered as value for the $orderby system query option.
 * 
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity
 *            type
 * @param {object}
 *            oSchema DataJS object for the schema containing this entity type
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType}
 *            oEntityType object for the entity type
 * 
 * @constructor
 * 
 * @class Representation of a $orderby expression for an OData entity type.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression = function(oModel, oSchema, oEntityType) {
    this._init(oModel, oSchema, oEntityType);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression.prototype = {
        /**
         * @private
         */
        _init : function(oModel, oSchema, oEntityType) {
            this._oEntityType = oEntityType;
            this._oSchema = oSchema;
            this._oModel = oModel;

            this._aSortCondition = [];
        },

        /**
         * Checks if an order by expression for the given property is already
         * defined and returns a reference to an object with property sorter and
         * index of the object or null if the property is not yet defined in an
         * order by expression.
         * 
         * @private
         */
        _containsSorter : function(sPropertyName) {
            var oResult = null;
            for ( var i = -1, oCurrentSorter; oCurrentSorter = this._aSortCondition[++i];) {
                if (oCurrentSorter.property.name === sPropertyName) {
                    oResult = {
                            sorter : oCurrentSorter,
                            index : i
                    };
                    break;
                }
            }
            return oResult;
        },

        /**
         * TODO helper method to remove elements from array
         * 
         * @private
         */
        _removeFromArray : function(array, from, to) {
            var rest = array.slice((to || from) + 1 || array.length);
            array.length = from < 0 ? array.length + from : from;
            return array.push.apply(array, rest);
        },

        /**
         * Clear expression from any sort conditions that may have been set
         * previously
         */
        clear : function() {
            this._aSortCondition = [];
        },

        /**
         * Add a condition to the order by expression. Multiple conditions on the
         * same property will throw an exception, e.g. you cannot order by ascending
         * and descending at the same time on the same property.
         * 
         * @param {string}
         *            sPropertyName The name of the property bound in the condition
         * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortOrder}
         *            sSortOrder sorting order used for the condition
         * @throws Exception
         *             if the property is unknown, not sortable or already added as
         *             sorter
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression} This object for method
         *          chaining
         */
        addSorter : function(sPropertyName, sSortOrder) {
            var oProperty = this._oEntityType.findPropertyByName(sPropertyName);
            if (oProperty == null) {
                throw "Cannot add sort condition for unknown property name " + sPropertyName; // TODO
            }
            if (this._containsSorter(sPropertyName) != null) {
                throw "Sort condition for this property name is already defined " + sPropertyName; // TODO
            }
            var aSortablePropertyNames = this._oEntityType.getSortablePropertyNames();
            if (aSortablePropertyNames.indexOf(sPropertyName) === -1) {
                throw "Cannot add sort condition for not sortable property name " + sPropertyName; // TODO
            }

            this._aSortCondition.push({
                property : oProperty,
                order : sSortOrder
            });
            return this;
        },

        /**
         * Removes the order by expression for the given property name from the list
         * of order by expression. If no order by expression with this property name
         * exists the method does nothing.
         * 
         * @param {string}
         *            sPropertyName The name of the property to be removed from the
         *            condition
         */
        removeSorter : function(sPropertyName) {
            if (!sPropertyName)
                return;

            var oSorter = this._containsSorter(sPropertyName);
            if (oSorter) {
                this._removeFromArray(this._aSortCondition, oSorter.index);
            }
        },

        /**
         * Get an array of SAPUI5 Sorter objects corresponding to this expression.
         * 
         * @returns {array(sap.ui.model.Sorter)} List of sorter objects representing
         *          this expression
         */
        getExpressionsAsUI5SorterArray : function() {
            var aSorterObjects = [];

            for ( var i = -1, oCondition; oCondition = this._aSortCondition[++i];) {
                aSorterObjects.push(new sap.ui.model.Sorter(oCondition.property.name,
                        oCondition.order == sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortOrder.Descending));
            }

            return aSorterObjects;
        },

        /**
         * Get the first SAPUI5 Sorter object.
         * 
         * @returns {sap.ui.model.Sorter} first sorter object or null if empty
         */
        getExpressionAsUI5Sorter : function() {
            var aSortArray = this.getExpressionsAsUI5SorterArray();
            if (aSortArray.length == 0) {
                return null;
            } else {
                return aSortArray[0];
            }
        },

        /**
         * Get the value for the OData system query option $orderby corresponding to
         * this expression.
         * 
         * @returns {string} The $orderby value for the sort expressions
         */
        getURIOrderByOptionValue : function() {
            if (this._aSortCondition.length == 0)
                return "";

            var sOrderByOptionString = "";
            for ( var i = -1, oCondition; oCondition = this._aSortCondition[++i];) {
                sOrderByOptionString += oCondition.property.name + " " + oCondition.order;
                if (i < this._aSortCondition.length - 1) {
                    sOrderByOptionString += ", ";
                }
            }

            return sOrderByOptionString;
        },

        /**
         * Get description for this entity type
         * 
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType} The object representing the
         *          entity type
         */
        getEntityType : function() {
            return this._oEntityType;
        },

        getSchema : function() {
            return this._oSchema;
        },

        getModel : function() {
            return this._oModel;
        },

        /**
         * Private member attributes
         */

        _oEntityType : null,
        _oSchema : null,
        _oModel : null,

        _aSortCondition : null,
};

/** ******************************************************************** */

/**
 * Create a request object for interaction with a query parameterization.
 * 
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameterization}
 *            oParameterization Description of a query parameterization
 * 
 * @constructor
 * 
 * @class Creation of URIs for query parameterizations.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.ParameterizationRequest = function(oParameterization) {
    this._init(oParameterization);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.ParameterizationRequest.prototype = {
        /**
         * @private
         */
        _init : function(oParameterization) {
            if (!oParameterization)
                throw "No parameterization given"; // TODO
            this._oParameterization = oParameterization;
            this._oParameterValueAssignment = new Array();
        },

        /**
         * Get the description of the parameterization on which this request
         * operates on
         * 
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameterization} Description of a
         *          query parameterization
         */
        getParameterization : function() {
            return this._oParameterization;
        },

        /**
         * Assign a value to a parameter
         * 
         * @param {String}
         *            sParameterName Name of the parameter. In case of a range
         *            value, provide the name of the lower boundary parameter.
         * @param {String}
         *            sValue Assigned value. Pass null to remove a value assignment.
         * @param {String}
         *            sToValue Omit it or set it to null for single values. If set,
         *            it will be assigned to the upper boundary parameter
         */
        setParameterValue : function(sParameterName, sValue, sToValue) {
            var oParameter = this._oParameterization.findParameterByName(sParameterName);
            if (!oParameter)
                throw "Invalid parameter name " + sParameterName; // TODO improve
            // error handling
            if (sToValue != null) {
                if (!oParameter.isIntervalBoundary())
                    // TODO improve error handling
                    throw "Range value cannot be applied to parameter " + sParameterName
                    + " accepting only single values"; // TODO
                if (!oParameter.isLowerIntervalBoundary())
                    // TODO improve error handling
                    throw "Range value given, but parameter " + sParameterName
                    + " does not hold the lower boundary"; // TODO
            }
            if (!oParameter.isIntervalBoundary()) {
                if (sValue == null)
                    delete this._oParameterValueAssignment[sParameterName];
                else
                    this._oParameterValueAssignment[sParameterName] = sValue;
            } else {
                if (sValue == null && sToValue != null)
                    throw "Parameter " + sParameterName
                    + ": An upper boundary cannot be given without the lower boundary"; // TODO
                if (sValue == null) {
                    delete this._oParameterValueAssignment[sParameterName];
                    sToValue = null;
                } else
                    this._oParameterValueAssignment[sParameterName] = sValue;
                var oUpperBoundaryParameter = oParameter.getPeerIntervalBoundaryParameter();
                if (sToValue == null)
                    sToValue = sValue;
                if (sValue == null)
                    delete this._oParameterValueAssignment[oUpperBoundaryParameter.getName()];
                else
                    this._oParameterValueAssignment[oUpperBoundaryParameter.getName()] = sToValue;
            }
            return;
        },

        /**
         * Get the URI to locate the entity set for the query parameterization.
         * 
         * @param {String}
         *            sServiceRootURI (optional) Identifies the root of the OData
         *            service
         * @returns The resource path of the URI pointing to the entity set. It is a
         *          relative URI unless a service root is given, which would then
         *          prefixed in order to return a complete URL.
         */
        getURIToParameterizationEntitySet : function(sServiceRootURI) {
            return (sServiceRootURI ? sServiceRootURI : "") + "/"
            + this._oParameterization.getEntitySet().getQName();
        },

        /**
         * Get the URI to locate the parameterization entity for the values assigned
         * to all parameters beforehand. Notice that a value must be supplied for
         * every parameter including those marked as optional. For optional
         * parameters, assign the special value that the service provider uses as an
         * "omitted" value. For example, for services based on BW Easy Queries, this
         * would be an empty string.
         * 
         * @param {String}
         *            sServiceRootURI (optional) Identifies the root of the OData
         *            service
         * @returns The resource path of the URI pointing to the entity set. It is a
         *          relative URI unless a service root is given, which would then
         *          prefixed in order to return a complete URL.
         */
        getURIToParameterizationEntry : function(sServiceRootURI) {
            var oDefinedParameters = this._oParameterization.getAllParameters();
            for ( var sDefinedParameterName in oDefinedParameters) {
                // check that all parameters have a value assigned. This is also
                // true for those marked as optional, because the omitted value is
                // conveyed by some default value, e.g. as empty string.
                if (this._oParameterValueAssignment[sDefinedParameterName] == undefined)
                    throw "Parameter " + sDefinedParameterName + " has no value assigned"; // TODO
            }
            var sKeyIdentification = "", bFirst = true;
            for ( var sParameterName in this._oParameterValueAssignment) {
                sKeyIdentification += (bFirst ? "" : ",")
                + sParameterName
                + "="
                + sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.helper.renderPropertyKeyValue(
                        this._oParameterValueAssignment[sParameterName],
                        oDefinedParameters[sParameterName].getProperty().type);
                bFirst = false;
            }

            return (sServiceRootURI ? sServiceRootURI : "") + "/"
            + this._oParameterization.getEntitySet().getQName() + "(" + sKeyIdentification
            + ")";
        },

        /**
         * Private member attributes
         */
        _oParameterization : null,
        _oParameterValueAssignment : null,

};

/** ******************************************************************** */

/**
 * Create a request object for interaction with a query result.
 * 
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult}
 *            oParameterization Description of a query parameterization
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.ParameterizationRequest}
 *            oParameterizationRequest (optional) Request object for
 *            interactions with the parameterization of this query. Only
 *            required if the query service includes parameters.
 * 
 * @constructor
 * 
 * @class Creation of URIs for fetching query results.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResultRequest = function(oQueryResult, oParameterizationRequest) {
    this._init(oQueryResult);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResultRequest.prototype = {
        /**
         * @private
         */
        _init : function(oQueryResult, oParameterizationRequest) {
            this._oQueryResult = oQueryResult;
            this._oParameterizationRequest = oParameterizationRequest;
            this._oAggregationLevel = new Object();
            this._oMeasures = new Object();
            this._bIncludeEntityKey = false;
            this._oFilterExpression = null;
        },

        /**
         * Set the parameterization request required for interactions with the query
         * result of parameterized queries
         * 
         * @param oParameterizationRequest
         *            Request object for interactions with the parameterization of
         *            this query
         */
        setParameterizationRequest : function(oParameterizationRequest) {
            this._oParameterizationRequest = oParameterizationRequest;
        },

        /**
         * Get the description of the query result on which this request operates on
         * 
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult} Description of a query
         *          result
         */
        getQueryResult : function() {
            return this._oQueryResult;
        },

        /**
         * Set the aggregation level for the query result request. By default, the
         * query result will include the properties holding the keys of the given
         * dimensions. This setting can be changed using
         * includeDimensionKeyTextAttributes.
         * 
         * @param aDimensionName
         *            Array of dimension names to be part of the aggregation level.
         *            If null, the aggregation level includes all dimensions, if
         *            empty, no dimension is included.
         * 
         */
        setAggregationLevel : function(aDimensionName) {
            this._oAggregationLevel = new Object();
            if (!aDimensionName) {
                aDimensionName = this._oQueryResult.getAllDimensionNames();
            }
            this.addToAggregationLevel(aDimensionName);
        },

        /**
         * Add one or more dimensions to the aggregation level
         * 
         * @param aDimensionName
         *            Array of dimension names to be added to the already defined
         *            aggregation level.
         * 
         */
        addToAggregationLevel : function(aDimensionName) {
            if (!aDimensionName)
                return;

            for ( var i = -1, sDimName; sDimName = aDimensionName[++i];) {
                if (!this._oQueryResult.findDimensionByName(sDimName))
                    throw sDimName + " is not a valid dimension name"; // TODO
                this._oAggregationLevel[sDimName] = {
                        key : true,
                        text : false,
                        attributes : null
                };
            }
        },

        /**
         * Remove one or more dimensions from the aggregation level. The method also
         * removed a potential sort expression on the dimension.
         * 
         * @param aDimensionName
         *            Array of dimension names to be removed from the already
         *            defined aggregation level.
         */
        removeFromAggregationLevel : function(aDimensionName) {
            if (!aDimensionName) {
                return;
            }
            for ( var i = -1, sDimName; sDimName = aDimensionName[++i];) {
                if (!this._oQueryResult.findDimensionByName(sDimName)) {
                    throw sDimName + " is not a valid dimension name"; // TODO
                }
                if (this._oAggregationLevel[sDimName] != undefined) {
                    delete this._oAggregationLevel[sDimName];

                    // remove potential sort expression on this dimension
                    this.getSortExpression().removeSorter(sDimName);
                }
            }
        },

        /**
         * Get the names of the dimensions included in the aggregation level
         * 
         * @returns {Array} The dimension names included in the aggregation level
         */
        getAggregationLevel : function() {
            var aDimName = new Array();
            for ( var sDimName in this._oAggregationLevel) {
                aDimName.push(sDimName);
            }
            return aDimName;
        },

        /**
         * Get details about a dimensions included in the aggregation level
         * 
         * @param sDImensionName
         *            Name of a dimension included in the aggregation level of this
         *            request, for which details shall be returned
         * 
         * @returns {object} An object with three properties named key and text,
         *          both with Boolean values indicating whether the key and text of
         *          this dimension are included in this request. The third property
         *          named attributes is an array of attribute names of this
         *          dimension included in this request, or null, if there are none.
         */
        getAggregationLevelDetails : function(sDimensionName) {
            if (this._oAggregationLevel[sDimensionName] == undefined)
                throw "Aggregation level does not include dimension " + sDimensionName;
            return this._oAggregationLevel[sDimensionName];
        },

        /**
         * Set the measures to be included in the query result request. By default,
         * the query result will include the properties holding the raw values of
         * the given measures. This setting can be changed using
         * includeMeasureRawFormattedValueUnit.
         * 
         * @param aMeasureName
         *            Array of measure names to be part of the query result request.
         *            If null, the request includes all measures, if empty, no
         *            measure is included.
         */
        setMeasures : function(aMeasureName) {
            if (!aMeasureName) {
                aMeasureName = this._oQueryResult.getAllMeasureNames();
            }
            this._oMeasures = new Object();
            for ( var i = -1, sMeasName; sMeasName = aMeasureName[++i];) {
                if (!this._oQueryResult.findMeasureByName(sMeasName))
                    throw sMeasName + " is not a valid measure name"; // TODO

                this._oMeasures[sMeasName] = {
                        value : true,
                        text : false,
                        unit : false,
                };
            }
        },

        /**
         * Get the names of the measures included in the query result request
         * 
         * @returns {Array} The measure names included in the query result request
         */
        getMeasureNames : function() {
            var aMeasName = new Array();
            for ( var sMeasName in this._oMeasures) {
                aMeasName.push(sMeasName);
            }
            return aMeasName;
        },

        /**
         * Specify which dimension components shall be included in the query result.
         * The settings get applied to the currently defined aggregation level.
         * 
         * @param sDimensionName
         *            Name of the dimension for which the settings get applied.
         *            Specify null to apply the settings to all dimensions in the
         *            aggregation level.
         * @param bIncludeKey
         *            Indicator whether or not to include the dimension key in the
         *            query result. Pass null to keep current setting.
         * @param bIncludeText
         *            Indicator whether or not to include the dimension text (if
         *            available) in the query result. Pass null to keep current
         *            setting.
         * @param aAttributeName
         *            Array of dimension attribute names to be included in the
         *            result. Pass null to keep current setting. This argument is
         *            ignored if sDimensionName is null.
         */
        includeDimensionKeyTextAttributes : function(sDimensionName, bIncludeKey, bIncludeText,
                aAttributeName) {
            var aDimName = new Array();
            if (sDimensionName) {
                if (this._oAggregationLevel[sDimensionName] == undefined)
                    throw sDimensionName + " is not included in the aggregation level";
                aDimName.push(sDimensionName);
            } else {
                for ( var sName in this._oAggregationLevel) {
                    aDimName.push(sName);
                }
                aAttributeName = null;
            }
            for ( var i = -1, sDimName; sDimName = aDimName[++i];) {
                if (bIncludeKey != null)
                    this._oAggregationLevel[sDimName].key = bIncludeKey;
                if (bIncludeText != null)
                    this._oAggregationLevel[sDimName].text = bIncludeText;
                if (aAttributeName != null)
                    this._oAggregationLevel[sDimName].attributes = aAttributeName;
            }
        },

        /**
         * Specify which measure components shall be included in the query result.
         * The settings get applied to the currently set measures.
         * 
         * @param sMeasureName
         *            Name of the measure for which the settings get applied.
         *            Specify null to apply the settings to all currently set
         *            measures.
         * @param bIncludeRawValue
         *            Indicator whether or not to include the raw value in the query
         *            result. Pass null to keep current setting.
         * @param bIncludeFormattedValue
         *            Indicator whether or not to include the formatted value (if
         *            available) in the query result. Pass null to keep current
         *            setting.
         * @param bIncludeUnit
         *            Indicator whether or not to include the unit (if available) in
         *            the query result. Pass null to keep current setting.
         */
        includeMeasureRawFormattedValueUnit : function(sMeasureName, bIncludeRawValue,
                bIncludeFormattedValue, bIncludeUnit) {
            var aMeasName = new Array();
            if (sMeasureName) {
                if (this._oMeasures[sMeasureName] == undefined)
                    throw sMeasureName + " is not part of the query result";
                aMeasName.push(sMeasureName);
            } else {
                for ( var sName in this._oMeasures) {
                    aMeasName.push(sName);
                }
            }
            for ( var i = -1, sMeasName; sMeasName = aMeasName[++i];) {
                if (bIncludeRawValue != null)
                    this._oMeasures[sMeasName].value = bIncludeRawValue;
                if (bIncludeFormattedValue != null)
                    this._oMeasures[sMeasName].text = bIncludeFormattedValue;
                if (bIncludeUnit != null)
                    this._oMeasures[sMeasName].unit = bIncludeUnit;
            }
        },

        /**
         * Get the filter expression for this request.
         * 
         * Expressions are represented by separate objects. If none exists so far, a
         * new expression object gets created.
         * 
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression} The filter object
         *          associated to this request.
         */
        getFilterExpression : function() {
            if (this._oFilterExpression == null) {
                var oEntityType = this._oQueryResult.getEntityType();
                this._oFilterExpression = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression(oEntityType
                        .getModel(), oEntityType.getSchema(), oEntityType);
            }
            return this._oFilterExpression;
        },

        /**
         * Set the filter expression for this request.
         * 
         * Expressions are represented by separate objects. Calling this method
         * replaces the filter object maintained by this request.
         * 
         * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression}
         *            oFilter The filter object to be associated with this request.
         */
        setFilterExpression : function(oFilter) {
            this._oFilterExpression = oFilter;
        },

        /**
         * Get the sort expression for this request.
         * 
         * Expressions are represented by separate objects. If none exists so far, a
         * new expression object gets created.
         * 
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression} The sort object
         *          associated to this request.
         */
        getSortExpression : function() {
            if (this._oSortExpression == null) {
                var oEntityType = this._oQueryResult.getEntityType();
                this._oSortExpression = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression(oEntityType
                        .getModel(), oEntityType.getSchema(), oEntityType);
            }
            return this._oSortExpression;
        },

        /**
         * Set the sort expression for this request.
         * 
         * Expressions are represented by separate objects. Calling this method
         * replaces the sort object maintained by this request.
         * 
         * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression}
         *            oSorter The sort object to be associated with this request.
         */
        setSortExpression : function(oSorter) {
            this._oSortExpression = oSorter;
        },

        /**
         * Set further options to be applied for the OData request to fetch the
         * query result
         * 
         * @param {Boolean}
         *            bIncludeEntityKey Indicates whether or not the entity key
         *            should be returned for every entry in the query result.
         *            Default is not to include it. Pass null to keep current
         *            setting.
         * @param {Boolean}
         *            bIncludeCount Indicates whether or not the result shall
         *            include a count for the returned entities. Default is not to
         *            include it. Pass null to keep current setting.
         */
        setRequestOptions : function(bIncludeEntityKey, bIncludeCount) {
            if (bIncludeEntityKey)
                this._bIncludeEntityKey = bIncludeEntityKey;
            if (bIncludeCount)
                this._bIncludeCount = bIncludeCount;
        },

        /**
         * Specify that only a page of the query result shall be returned. A page is
         * described by its boundaries, that are row numbers for the first and last
         * rows in the query result to be returned.
         * 
         * @param {Number}
         *            start The first row of the query result to be returned.
         *            Numbering starts at 1. Passing null is equivalent to start
         *            with the first row.
         * @param {Number}
         *            end The last row of the query result to be returned. Passing
         *            null is equivalent to get all rows up to the end of the query
         *            result.
         */
        setResultPageBoundaries : function(start, end) {
            if (start != null && typeof start !== "number") {
                throw "Start value must be null or numeric"; // TODO
            }
            if (end !== null && typeof end !== "number") {
                throw "End value must be null or numeric"; // TODO
            }

            if (start == null)
                start = 1;

            if (start < 1 || start > (end == null ? start : end)) {
                throw "Invalid values for requested page boundaries"; // TODO
            }

            this._iSkipRequestOption = (start > 1) ? start : null;
            this._iTopRequestOption = (end != null) ? (end - start + 1) : null;
        },

        /**
         * Returns the current page boundaries as object with properties
         * <code>start</code> and <code>end</code>. If the end of the page is
         * unbounded, <code>end</code> is null.
         * 
         * @returns {Object} the current page boundaries as object
         */
        getResultPageBoundaries : function() {
            return {
                start : (this._iSkipRequestOption == null) ? 1 : this._iSkipRequestOption,
                        end : (this._iTopRequestOption != null) ? (this._iSkipRequestOption == null) ? 1
                                : this._iSkipRequestOption + this._iTopRequestOption : null
            };
        },

        /**
         * Get the URI to locate the entity set for the query result.
         * 
         * @param {String}
         *            sServiceRootURI (optional) Identifies the root of the OData
         *            service
         * @returns {String} The resource path of the URI pointing to the entity
         *          set. It is a relative URI unless a service root is given, which
         *          would then prefixed in order to return a complete URL.
         */
        getURIToQueryResultEntitySet : function(sServiceRootURI) {
            var sURI = null;
            if (this._oQueryResult.getParameterization()) {
                if (!this._oParameterizationRequest)
                    throw "Missing parameterization request";
                else
                    sURI = this._oParameterizationRequest
                    .getURIToParameterizationEntry(sServiceRootURI)
                    + "/"
                    + this._oQueryResult.getParameterization()
                    .getNavigationPropertyToQueryResult();
            } else
                sURI = (sServiceRootURI ? sServiceRootURI : "") + "/"
                + this._oQueryResult.getEntitySet().getQName();
            return sURI;
        },

        /**
         * Get the value of an query option for the OData request URI corresponding
         * to this request.
         * 
         * @param {String}
         *            sQueryOptionName Identifies the query option: $select,
         *            $filter,$orderby ... or any custom query option
         * 
         * @returns {String} The value of the requested query option or null, if
         *          this option is not used for the OData request.
         */
        getURIQueryOptionValue : function(sQueryOptionName) {
            var sQueryOptionValue = null;

            switch (sQueryOptionName) {
            case "$select": {
                var sSelectOption = "";
                for ( var sDimName in this._oAggregationLevel) {
                    var oDim = this._oQueryResult.findDimensionByName(sDimName);
                    var oDimSelect = this._oAggregationLevel[sDimName];
                    if (oDimSelect.key == true)
                        sSelectOption += (sSelectOption == "" ? "" : ",") + oDim.getKeyProperty().name;
                    if (oDimSelect.text == true && oDim.getTextProperty())
                        sSelectOption += (sSelectOption == "" ? "" : ",") + oDim.getTextProperty().name;
                    if (oDimSelect.attributes) {
                        for ( var i = -1, sAttrName; sAttrName = oDimSelect.attributes[++i];) {
                            sSelectOption += (sSelectOption == "" ? "" : ",")
                            + oDim.findAttributeByName(sAttrName).getName();
                        }
                    }
                }

                for ( var sMeasName in this._oMeasures) {
                    var oMeas = this._oQueryResult.findMeasureByName(sMeasName);
                    var oMeasSelect = this._oMeasures[sMeasName];
                    if (oMeasSelect.value == true)
                        sSelectOption += (sSelectOption == "" ? "" : ",")
                        + oMeas.getRawValueProperty().name;
                    if (oMeasSelect.text == true && oMeas.getFormattedValueProperty())
                        sSelectOption += (sSelectOption == "" ? "" : ",")
                        + oMeas.getFormattedValueProperty().name;
                    if (oMeasSelect.unit == true && oMeas.getUnitProperty())
                        sSelectOption += (sSelectOption == "" ? "" : ",")
                        + oMeas.getUnitProperty().name;
                }

                if (this._bIncludeEntityKey) {
                    var aKeyPropRef = this._oQueryResult.getEntityType().getTypeDescription().key.propertyRef;
                    for ( var i = -1, oKeyProp; oKeyProp = aKeyPropRef[++i];) {
                        sSelectOption += (sSelectOption == "" ? "" : ",") + oKeyProp.name;
                    }
                }
                sQueryOptionValue = (sSelectOption ? sSelectOption : null);
                break;
            }
            case "$filter": {
                var sFilterOption = null;
                if (this._oFilterExpression)
                    sFilterOption = this._oFilterExpression.getURIFilterOptionValue();
                sQueryOptionValue = (sFilterOption ? sFilterOption : null);
                break;
            }
            case "$orderby": {
                var sSortOption = null;
                if (this._oSortExpression)
                    sSortOption = this._oSortExpression.getURIOrderByOptionValue();
                sQueryOptionValue = (sSortOption ? sSortOption : null);
                break;
            }
            case "$top": {
                if (this._iTopRequestOption !== null) {
                    sQueryOptionValue = this._iTopRequestOption;
                }
                break;
            }
            case "$skip": {
                sQueryOptionValue = this._iSkipRequestOption;
                break;
            }
            default:
                break;
            }
            return sQueryOptionValue;
        },

        /**
         * Get the unescaped URI to fetch the query result.
         * 
         * @param {String}
         *            sServiceRootURI (optional) Identifies the root of the OData
         *            service
         * 
         * @returns {String} The unescaped URI that contains the OData resource path
         *          and OData system query options to express the aggregation level,
         *          filter expression and further options.
         */
        getURIToQueryResultEntries : function(sServiceRootURI) {

            // construct resource path
            var sResourcePath = this.getURIToQueryResultEntitySet(sServiceRootURI);

            // construct $select
            var sSelectOption = this.getURIQueryOptionValue("$select");
            var sFilterOption = this.getURIQueryOptionValue("$filter");
            var sSortOption = this.getURIQueryOptionValue("$orderby");
            var sTopOption = this.getURIQueryOptionValue("$top");
            var sSkipOption = this.getURIQueryOptionValue("$skip");

            var sURI = sResourcePath;
            var bQuestionmark = false;

            if (sSelectOption) {
                sURI += "?$select=" + sSelectOption;
                bQuestionmark = true;
            }
            if (this._oFilterExpression && sFilterOption) {
                if (!bQuestionmark) {
                    sURI += "?";
                    bQuestionmark = true;
                } else {
                    sURI += "&";
                }
                sURI += "$filter=" + sFilterOption;
            }
            if (this._oSortExpression && sSortOption) {
                if (!bQuestionmark) {
                    sURI += "?";
                    bQuestionmark = true;
                } else {
                    sURI += "&";
                }
                sURI += "$orderby=" + sSortOption;
            }

            if (this._iTopRequestOption && sTopOption) {
                if (!bQuestionmark) {
                    sURI += "?";
                    bQuestionmark = true;
                } else {
                    sURI += "&";
                }
                sURI += "$top=" + sTopOption;
            }
            if (this._iSkipRequestOption && sSkipOption) {
                if (!bQuestionmark) {
                    sURI += "?";
                    bQuestionmark = true;
                } else {
                    sURI += "&";
                }
                sURI += "$skip=" + sSkipOption;
            }
            if (this._bIncludeCount) {
                if (!bQuestionmark) {
                    sURI += "?";
                    bQuestionmark = true;
                } else {
                    sURI += "&";
                }
                sURI += "$inlinecount=allpages";
            }
            return sURI;
        },

        /**
         * Private member attributes
         */
        _oQueryResult : null,
        _oParameterizationRequest : null,
        _oAggregationLevel : null,
        _oMeasures : null,
        _bIncludeEntityKey : null,
        _bIncludeCount : null,
        _oFilterExpression : null,
        _oSortExpression : null,
        _iSkipRequestOption : 0,
        _iTopRequestOption : null
};

/** ******************************************************************** */

/**
 * Create a request object for interaction with a query parameter value help.
 * 
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameter}
 *            oParameter Description of a query parameter
 * 
 * @constructor
 * 
 * @class Creation of URIs for fetching a query parameter value set.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.ParameterValueSetRequest = function(oParameter) {
    this._init(oParameter);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.ParameterValueSetRequest.prototype = {
        /**
         * @private
         */
        _init : function(oParameter) {
            this._oParameter = oParameter;
            this._oValueSetResult = new Object();
            this._oFilterExpression = null;
            this._oSortExpression = null;
        },

        /**
         * Specify which components of the parameter shall be included in the value
         * set.
         * 
         * @param bIncludeText
         *            Indicator whether or not to include the parameter text (if
         *            available) in the value set. Pass null to keep current
         *            setting.
         */
        includeParameterText : function(bIncludeText) {
            if (bIncludeText != null)
                this._oValueSetResult.text = bIncludeText;
        },

        /**
         * Get the filter expression for this request.
         * 
         * Expressions are represented by separate objects. If none exists so far, a
         * new expression object gets created.
         * 
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression} The filter object
         *          associated to this request.
         */
        getFilterExpression : function() {
            if (this._oFilterExpression == null) {
                var oEntityType = this._oParameter.getContainingParameterization().getEntityType();
                this._oFilterExpression = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression(oEntityType
                        .getModel(), oEntityType.getSchema(), oEntityType);
            }
            return this._oFilterExpression;
        },

        /**
         * Set the filter expression for this request.
         * 
         * Expressions are represented by separate objects. Calling this method
         * replaces the filter object maintained by this request.
         * 
         * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression}
         *            oFilter The filter object to be associated with this request.
         */
        setFilterExpression : function(oFilter) {
            this._oFilterExpression = oFilter;
        },

        /**
         * Get the sort expression for this request.
         * 
         * Expressions are represented by separate objects. If none exists so far, a
         * new expression object gets created.
         * 
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression} The sort object
         *          associated to this request.
         */
        getSortExpression : function() {
            if (this._oSortExpression == null) {
                var oEntityType = this._oQueryResult.getEntityType();
                this._oSortExpression = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression(oEntityType
                        .getModel(), oEntityType.getSchema(), oEntityType);
            }
            return this._oSortExpression;
        },

        /**
         * Set the sort expression for this request.
         * 
         * Expressions are represented by separate objects. Calling this method
         * replaces the sort object maintained by this request.
         * 
         * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression}
         *            oSorter The sort object to be associated with this request.
         */
        setSortExpression : function(oSorter) {
            this._oSortExpression = oSorter;
        },

        /**
         * Get the value of an query option for the OData request URI corresponding
         * to this request.
         * 
         * @param {String}
         *            sQueryOptionName Identifies the query option: $select,
         *            $filter,... or any custom query option
         * 
         * @returns {String} The value of the requested query option or null, if
         *          this option is not used for the OData request.
         */
        getURIQueryOptionValue : function(sQueryOptionName) {
            var sQueryOptionValue = null;

            switch (sQueryOptionName) {
            case "$select": {
                var sSelectOption = "";
                sSelectOption += (sSelectOption == "" ? "" : ",") + this._oParameter.getProperty().name;
                if (this._oValueSetResult.text == true && this._oParameter.getTextProperty())
                    sSelectOption += (sSelectOption == "" ? "" : ",")
                    + this._oParameter.getTextProperty().name;
                sQueryOptionValue = (sSelectOption ? sSelectOption : null);
                break;
            }
            case "$filter": {
                var sFilterOption = null;
                if (this._oFilterExpression)
                    sFilterOption = this._oFilterExpression.getURIFilterOptionValue();
                sQueryOptionValue = (sFilterOption ? sFilterOption : null);
                break;
            }
            case "$orderby": {
                var sSortOption = null;
                if (this._oSortExpression)
                    sSortOption = this._oSortExpression.getURIOrderByOptionValue();
                sQueryOptionValue = (sSortOption ? sSortOption : null);
                break;
            }
            default:
                break;
            }

            return sQueryOptionValue;
        },

        /**
         * Get the unescaped URI to fetch the parameter value set.
         * 
         * @param {String}
         *            sServiceRootURI (optional) Identifies the root of the OData
         *            service
         * @returns {String} The unescaped URI that contains the OData resource path
         *          and OData system query options to express the request for the
         *          parameter value set..
         */
        getURIToParameterValueSetEntries : function(sServiceRootURI) {

            // construct resource path
            var sResourcePath = null;

            sResourcePath = (sServiceRootURI ? sServiceRootURI : "") + "/"
            + this._oParameter.getContainingParameterization().getEntitySet().getQName();

            // construct query options
            var sSelectOption = this.getURIQueryOptionValue("$select");
            var sFilterOption = this.getURIQueryOptionValue("$filter");
            var sSortOption = this.getURIQueryOptionValue("$orderby");

            var sURI = sResourcePath;
            var bQuestionmark = false;

            if (sSelectOption) {
                sURI += "?$select=" + sSelectOption;
                bQuestionmark = true;
            }
            if (this._oFilterExpression && sFilterOption) {
                if (!bQuestionmark) {
                    sURI += "?";
                    bQuestionmark = true;
                } else
                    sURI += "&";
                sURI += "$filter=" + sFilterOption;
            }
            if (this._oSortExpression && sSortOption) {
                if (!bQuestionmark) {
                    sURI += "?";
                    bQuestionmark = true;
                } else
                    sURI += "&";
                sURI += "$orderby=" + sSortOption;
            }
            return sURI;
        },

        /**
         * Private member attributes
         */
        _oParameter : null,
        _oFilterExpression : null,
        _oSortExpression : null,
        _oValueSetResult : null
};

/** ******************************************************************** */

/**
 * Create a request object for interaction with a dimension value help.
 * 
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension}
 *            oDimension Description of a dimension
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.ParameterizationRequest}
 *            oParameterizationRequest (optional) Request object for
 *            interactions with the parameterization of this query. Only
 *            required if the query service includes parameters.
 * 
 * @constructor
 * 
 * @class Creation of URIs for fetching a query dimension value set.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.DimensionMemberSetRequest = function(oDimension, oParameterizationRequest) {
    this._init(oDimension, oParameterizationRequest);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.DimensionMemberSetRequest.prototype = {
        /**
         * @private
         */
        _init : function(oDimension, oParameterizationRequest) {
            this._oDimension = oDimension;
            this._oParameterizationRequest = oParameterizationRequest;
            this._oValueSetResult = new Object();
            this._oFilterExpression = null;
            this._oSortExpression = null;
        },

        /**
         * Set the parameterization request required for retrieving dimension
         * members of a parameterized query
         * 
         * @param oParameterizationRequest
         *            Request object for interactions with the parameterization of
         *            this query
         */
        setParameterizationRequest : function(oParameterizationRequest) {
            this._oParameterizationRequest = oParameterizationRequest;
        },

        /**
         * Specify which components of the dimension shall be included in the value
         * set.
         * 
         * @param bIncludeText
         *            Indicator whether or not to include the parameter text (if
         *            available) in the value set. Pass null to keep current
         *            setting.
         * @param aAttributeName
         *            Array of dimension attribute names to be included in the
         *            result. Pass null to keep current setting.
         */
        includeDimensionTextAttributes : function(bIncludeText, aAttributeName) {
            if (bIncludeText != null)
                this._oValueSetResult.text = bIncludeText;
            if (aAttributeName != null)
                this._oValueSetResult.attributes = aAttributeName;
        },

        /**
         * Get the filter expression for this request.
         * 
         * Expressions are represented by separate objects. If none exists so far, a
         * new expression object gets created.
         * 
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression} The filter object
         *          associated to this request.
         */
        getFilterExpression : function() {
            if (this._oFilterExpression == null) {
                var oEntityType = this._oDimension.getContainingQueryResult().getEntityType();
                this._oFilterExpression = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression(oEntityType
                        .getModel(), oEntityType.getSchema(), oEntityType);
            }
            return this._oFilterExpression;
        },

        /**
         * Set the filter expression for this request.
         * 
         * Expressions are represented by separate objects. Calling this method
         * replaces the filter object maintained by this request.
         * 
         * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression}
         *            oFilter The filter object to be associated with this request.
         */
        setFilterExpression : function(oFilter) {
            this._oFilterExpression = oFilter;
        },

        /**
         * Get the sort expression for this request.
         * 
         * Expressions are represented by separate objects. If none exists so far, a
         * new expression object gets created.
         * 
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression} The sort object
         *          associated to this request.
         */
        getSortExpression : function() {
            if (this._oSortExpression == null) {
                var oEntityType = this._oQueryResult.getEntityType();
                this._oSortExpression = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression(oEntityType
                        .getModel(), oEntityType.getSchema(), oEntityType);
            }
            return this._oSortExpression;
        },

        /**
         * Set the sort expression for this request.
         * 
         * Expressions are represented by separate objects. Calling this method
         * replaces the sort object maintained by this request.
         * 
         * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression}
         *            oSorter The sort object to be associated with this request.
         */
        setSortExpression : function(oSorter) {
            this._oSortExpression = oSorter;
        },

        /**
         * Get indicator whether or not master data are available for this dimension
         * 
         * @returns {boolean} True iff the master data are available
         */
        hasMasterDataAvailable : function() {
            return false; // TODO support to be added
        },

        /**
         * Get the value of an query option for the OData request URI corresponding
         * to this request.
         * 
         * @param {String}
         *            sQueryOptionName Identifies the query option: $select,
         *            $filter,... or any custom query option
         * 
         * @returns {String} The value of the requested query option or null, if
         *          this option is not used for the OData request.
         */
        getURIQueryOptionValue : function(sQueryOptionName) {
            var sQueryOptionValue = null;

            switch (sQueryOptionName) {
            case "$select": {
                var sSelectOption = "";
                sSelectOption += (sSelectOption == "" ? "" : ",")
                + this._oDimension.getKeyProperty().name;
                if (this._oValueSetResult.text == true && this._oDimension.getTextProperty())
                    sSelectOption += (sSelectOption == "" ? "" : ",")
                    + this._oDimension.getTextProperty().name;
                if (this._oValueSetResult.attributes) {
                    for ( var i = -1, sAttrName; sAttrName = this._oValueSetResult.attributes[++i];) {
                        sSelectOption += (sSelectOption == "" ? "" : ",")
                        + this._oDimension.findAttributeByName(sAttrName).getName();
                    }
                }
                sQueryOptionValue = (sSelectOption ? sSelectOption : null);
                break;
            }
            case "$filter": {
                var sFilterOption = null;
                if (this._oFilterExpression)
                    sFilterOption = this._oFilterExpression.getURIFilterOptionValue();
                sQueryOptionValue = (sFilterOption ? sFilterOption : null);
                break;
            }
            case "$orderby": {
                var sSortOption = null;
                if (this._oSortExpression)
                    sSortOption = this._oSortExpression.getURIOrderByOptionValue();
                sQueryOptionValue = (sSortOption ? sSortOption : null);
                break;
            }
            default:
                break;
            }

            return sQueryOptionValue;
        },

        /**
         * Get the unescaped URI to fetch the dimension members, optionally
         * augmented by text and attributes.
         * 
         * @param {String}
         *            sServiceRootURI (optional) Identifies the root of the OData
         *            service
         * @returns {String} The unescaped URI that contains the OData resource path
         *          and OData system query options to express the request for the
         *          parameter value set..
         */
        getURIToDimensionMemberEntries : function(sServiceRootURI) {

            // construct resource path
            var sResourcePath = null;
            if (this._oDimension.getContainingQueryResult().getParameterization()) {
                if (!this._oParameterizationRequest)
                    throw "Missing parameterization request";
                else
                    sResourcePath = this._oParameterizationRequest
                    .getURIToParameterizationEntry(sServiceRootURI)
                    + "/"
                    + this._oDimension.getContainingQueryResult().getParameterization()
                    .getNavigationPropertyToQueryResult();
            } else
                sResourcePath = (sServiceRootURI ? sServiceRootURI : "") + "/"
                + this._oDimension.getContainingQueryResult().getEntitySet().getQName();

            // construct query options
            var sSelectOption = this.getURIQueryOptionValue("$select");
            var sFilterOption = this.getURIQueryOptionValue("$filter");
            var sSortOption = this.getURIQueryOptionValue("$orderby");

            var sURI = sResourcePath;
            var bQuestionmark = false;

            if (sSelectOption) {
                sURI += "?$select=" + sSelectOption;
                bQuestionmark = true;
            }
            if (this._oFilterExpression && sFilterOption) {
                if (!bQuestionmark) {
                    sURI += "?";
                    bQuestionmark = true;
                } else
                    sURI += "&";
                sURI += "$filter=" + sFilterOption;
            }
            if (this._oSortExpression && sSortOption) {
                if (!bQuestionmark) {
                    sURI += "?";
                    bQuestionmark = true;
                } else
                    sURI += "&";
                sURI += "$orderby=" + sSortOption;
            }
            return sURI;
        },

        /**
         * Private member attributes
         */
        _oDimension : null,
        _oParameterizationRequest : null,
        _oFilterExpression : null,
        _oSortExpression : null,
        _oValueSetResult : null
};


//Desirable extensions:

//- Another class for representing value help entities to
//specifiy text properties, attribute properties (with association to
//sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameter and sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension)

//- ParameterValueSetRequest: Add option to read values from separate entity
//set (sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.ParameterValueSetRequest)

//- DimensionMemberSetRequest: Add option to read values from separate master
//data entity
//set (sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.DimensionMemberSetRequest)

//DONE - value rendering: Add support for types other than string
//(sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.helper.renderPropertyKeyValue)

//- filter expressions are validated against filter restriction annotations
//(sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression)

//- Implemenentation of filter expressions shall use SAPUI5 class
//sap.ui.model.Filter. Problem:
//This class does not provide accessor methods for object attributes.
//(sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression)

//- Shield API implementation from direct access to object properties.
//Introduce closures for this purpose.
/*
 * Pattern: sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult = (function ($){ var _init =
 * func
 * 
 * var class = function(oEntityType, oEntitySet, oParameterization) {
 * _init(oEntityType, oEntitySet, oParameterization); }; }; return class;
 * })(jQuery);
 * 
 */
}; // end of sap/ushell/components/tiles/indicatorTileUtils/oData4Analytics.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorTileUtils.smartBusinessUtil') ) {
jQuery.sap.declare("sap.ushell.components.tiles.indicatorTileUtils.smartBusinessUtil");

sap = sap || {};
sap.ushell = sap.ushell || {};
sap.ushell.components = sap.ushell.components || {};
sap.ushell.components.tiles.indicatorTileUtils = sap.ushell.components.tiles.indicatorTileUtils || {};
sap.ushell.components.tiles.indicatorTileUtils.util = sap.ushell.components.tiles.indicatorTileUtils.util || {};

sap.ushell.components.tiles.indicatorTileUtils.util = (function(global, $, undefined) {
    var fetchAuthToken = function() {
        var obj = {};
        $.ajax({
            type: "GET",
            async : false,
            dataType : "json",
            url: "/sap/hba/apps/kpi/s/logic/__token.xsjs",
            headers: {
                "X-CSRF-Token": "Fetch"
            },
            success: function( data, status, xhr ) {
                obj.userName = data.userName;
                obj.token = xhr.getResponseHeader("X-CSRF-Token");
            },
            error: function() {
                $.sap.log.error("Error Fetching AUTH TOKEN");
            }
        });
        return obj;
    };

    var getArray = function(stringArray) {
        var retArray = [];
        for(var itr = 0 ; itr < stringArray.length; itr++)
            retArray.push(JSON.parse(stringArray[itr]));
        return retArray;
    };

    "use strict";
    var cache = {};
    return {
        getAuthToken : function() {
            return fetchAuthToken().token;
        },
        getHanaUser : function() {
            return authObject.userName;
        },
        getEdmType : function(sUri, propertyName) {
            var oDataModel = null;
            if(sUri instanceof sap.ui.model.odata.ODataModel) {
                oDataModel = sUri;
            } else  {
                oDataModel = this.getODataModelByServiceUri(sUri);
            }
            if(oDataModel && oDataModel.getServiceMetadata()) {
                var serviceMetaData = oDataModel.getServiceMetadata();
                var entitySets = serviceMetaData.dataServices.schema[0].entityType;
                if(entitySets) {
                    for(var i = 0; i<entitySets.length;i++) {
                        var entity = entitySets[i];
                        var properties = entity.property;
                        for(var j=0;j<properties.length;j++) {
                            var property=  properties[j];
                            if(property.name == propertyName) {
                                return property.type;
                            }
                        }
                    }
                }
            }
            return null;
        },
        getODataModelByServiceUri : function(sServiceUri) {
            if(!cache[sServiceUri]) {
                var oModel = new sap.ui.model.odata.ODataModel(sServiceUri,true);
                cache[sServiceUri] = oModel;
            }
            return cache[sServiceUri];
        },
        getMantissaLength : function(num){
            var sNum = num.toString();
            var initPos = 0;
            if(num < 0){
                initPos = 1;
            }
            return (sNum.indexOf('.') === -1 ) ? (num < 0 ? sNum.length -1:sNum.length):  
                sNum.substring(initPos, sNum.indexOf('.')).length;
        },
        getLocaleFormattedValue: function(num, oScale){
            var locale = new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
            if(oScale == -2){
                var fNum;
                if(num > 9999)
                    fNum = "????";
                else if(num < 0.001)
                    fNum = "0";
                else{
                    if(num.toString().indexOf('.') != -1)
                        fNum = Number(num).toFixed(4-num.toString().indexOf('.'));
                    else
                        fNum = Number(num);
                    var valFormatter = sap.ca.ui.model.format.NumberFormat.getInstance({ style: "short"}, locale);
                    fNum = valFormatter.format(fNum);
                }
            }
            else{
                var sD = 2;
                var mantissaLength  = this.getMantissaLength(num)
                if(!(mantissaLength % 3))
                    sD = 1;
                if(Math.abs(num) % Math.pow(10, mantissaLength-1) == 0){
                    sD = 0;
                }
                else if((Math.abs(num) % Math.pow(10, mantissaLength-1)) < 6*Math.pow(10, mantissaLength - 4)){
                    sD = 0;
                }                
                var valFormatter = sap.ca.ui.model.format.NumberFormat.getInstance({ style: "short" , shortDecimals:sD}, locale);
                var fNum = valFormatter.format(num);
            }
            return fNum;
        },

        getModelerRuntimeServiceModel : function() {
            return this.getODataModelByServiceUri("/sap/hba/apps/kpi/s/odata/smart_business_runtime_services.xsodata");
        },
        getSapFontErrorCode : function() {
            return String.fromCharCode(0xe0b1);               
        },
        getSapFontBusyCode : function() {
            return String.fromCharCode(0xe1f2);
        },
        prepareFilterStructure : function(filter,addFilters){
            var variantData = [];
            if(addFilters){
                filter = filter.concat(addFilters);

            }

            for(var itr = 0 ; itr < filter.length; itr++){
                var pushObj = {};
                pushObj.comparator = filter[itr].OPERATOR;
                pushObj.filterPropertyName = filter[itr].NAME;

                if(filter[itr].ID)
                    pushObj.id = filter[itr].ID;    

                pushObj.type = filter[itr].TYPE;
                pushObj.value = filter[itr].VALUE_1;
                pushObj.valueTo = filter[itr].VALUE_2;
                variantData.push(pushObj);
            }

            return variantData;
        },



        getFilterFromRunTimeService: function(oConfig,callback){
            var KPI_RUNTIME_ODATA_MODEL =  this.getODataModelByServiceUri('/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata');
            var filterValue = "ID eq '#EVALUATIONID'".replace("#EVALUATIONID",oConfig.EVALUATION.ID);
            var kpiEvaluationFilterODataReadRef = KPI_RUNTIME_ODATA_MODEL.read("/EVALUATION_FILTERS", null, {"$filter" : filterValue}, true, function(data) {
                var filters = [];
                if(data.results.length){
                    filters = data.results;
                }
                callback.call(this,filters);
            });
        },

        findTextPropertyForDimension : function(sUri, entitySet, dimension) {           
            try {
                var o4a = this._getOData4AnalyticsObject(sUri);
                var queryResult = o4a.findQueryResultByName(entitySet);
                var oDimension = queryResult.findDimensionByName(dimension);
                if(oDimension.getTextProperty()){
                    return oDimension.getTextProperty().name;
                } else {
                    return dimension;
                }
            } catch(e) {
                $.sap.log.error("Error Fetching Text Property for "+dimension+" : "+e.toString());
            }
        },

        getEvalValueMeasureName : function(oConfig, type, retType){
            var evalValue = oConfig.EVALUATION_VALUES;
            for(var i = 0; i < evalValue.length; i++){
                if(evalValue[i].TYPE == type)
                    if(retType === "FIXED")
                        return evalValue[i].FIXED;
                    else
                        return evalValue[i].COLUMN_NAME;
            }
        },


        /**
         * Read and initialize configuration object from given JSON string. Used by all indicator tiles.
         *
         * @param {string} sConfig
         *   Configuration string in JSON format
         * @returns {object}
         *   Returns parsed configuration object
         */

        getParsedChip : function(sConfig, callback){
            var parsedChipConfig = {};
            var chipJson = JSON.parse(sConfig);
            var evaluationId = JSON.parse(chipJson.TILE_PROPERTIES).evaluationId || "";
            var that = this;
            if(chipJson.ADDITIONAL_FILTERS) 
                parsedChipConfig["ADDITIONAL_FILTERS"] = JSON.parse(chipJson.ADDITIONAL_FILTERS);
            if(chipJson.ADDITIONAL_APP_PARAMETERS)
                parsedChipConfig["ADDITIONAL_APP_PARAMETERS"] = JSON.parse(chipJson.ADDITIONAL_APP_PARAMETERS);
            if(chipJson.EVALUATION_FILTERS) {
                parsedChipConfig["EVALUATION_FILTERS"] = JSON.parse(chipJson.EVALUATION_FILTERS);
                if(chipJson.EVALUATION_VALUES){
                    parsedChipConfig["EVALUATION_VALUES"] = JSON.parse(chipJson.EVALUATION_VALUES);
                    if(chipJson.EVALUATION){
                        parsedChipConfig.EVALUATION = JSON.parse(chipJson.EVALUATION);
                        parsedChipConfig.TILE_PROPERTIES = JSON.parse(chipJson.TILE_PROPERTIES);
                        callback(parsedChipConfig);
                    }
                    else 
                        that.getEvaluationDetailsFromRunTimeService("/EVALUATIONS", evaluationId, function(filters){
                            parsedChipConfig.EVALUATION = filters;
                            parsedChipConfig.TILE_PROPERTIES = JSON.parse(chipJson.TILE_PROPERTIES);
                            callback(parsedChipConfig);
                        });
                }
                else
                    that.getEvaluationDetailsFromRunTimeService("/EVALUATION_VALUES", evaluationId, function(filters){
                        parsedChipConfig["EVALUATION_VALUES"] = filters;
                        if(chipJson.EVALUATION){
                            parsedChipConfig.EVALUATION = JSON.parse(chipJson.EVALUATION);
                            parsedChipConfig.TILE_PROPERTIES = JSON.parse(chipJson.TILE_PROPERTIES);
                            callback(parsedChipConfig);
                        }
                        else 
                            that.getEvaluationDetailsFromRunTimeService("/EVALUATIONS", evaluationId, function(filters){
                                parsedChipConfig.EVALUATION = filters;
                                parsedChipConfig.TILE_PROPERTIES = JSON.parse(chipJson.TILE_PROPERTIES);
                                callback(parsedChipConfig);
                            });
                    }); 
            }
            else 
                that.getEvaluationDetailsFromRunTimeService("/EVALUATION_FILTERS", evaluationId, function(filters){
                    parsedChipConfig["EVALUATION_FILTERS"] = filters;
                    if(chipJson.EVALUATION_VALUES){
                        parsedChipConfig["EVALUATION_VALUES"] = JSON.parse(chipJson.EVALUATION_VALUES);
                        if(chipJson.EVALUATION){
                            parsedChipConfig.EVALUATION = JSON.parse(chipJson.EVALUATION);
                            parsedChipConfig.TILE_PROPERTIES = JSON.parse(chipJson.TILE_PROPERTIES);
                            callback(parsedChipConfig);
                        }
                        else 
                            that.getEvaluationDetailsFromRunTimeService("/EVALUATIONS", evaluationId, function(filters){
                                parsedChipConfig.EVALUATION = filters;
                                parsedChipConfig.TILE_PROPERTIES = JSON.parse(chipJson.TILE_PROPERTIES);
                                callback(parsedChipConfig);
                            });
                    }
                    else
                        that.getEvaluationDetailsFromRunTimeService("/EVALUATION_VALUES", evaluationId, function(filters){
                            parsedChipConfig["EVALUATION_VALUES"] = filters;
                            if(chipJson.EVALUATION){
                                parsedChipConfig.EVALUATION = JSON.parse(chipJson.EVALUATION);
                                parsedChipConfig.TILE_PROPERTIES = JSON.parse(chipJson.TILE_PROPERTIES);
                                callback(parsedChipConfig);
                            }
                            else 
                                that.getEvaluationDetailsFromRunTimeService("/EVALUATIONS", evaluationId, function(filters){
                                    parsedChipConfig.EVALUATION = filters;
                                    parsedChipConfig.TILE_PROPERTIES = JSON.parse(chipJson.TILE_PROPERTIES);
                                    callback(parsedChipConfig);
                                });
                        });            
                });

        },

        /**
         * Read entity set name and evaluation id and return the appropriate call results.
         *
         * @param {string} oEntitySet
         *   Entity set name
         * @param {string} oId  
         *   Evaluation Id
         * @returns {object}
         *   Returns call results
         */

        getEvaluationDetailsFromRunTimeService: function(oEntitySet, oId, callback){
            var KPI_RUNTIME_ODATA_MODEL =  this.getODataModelByServiceUri('/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata');
            var filterValue = "ID eq '#EVALUATIONID'".replace("#EVALUATIONID",oId);
            var kpiEvaluationFilterODataReadRef = KPI_RUNTIME_ODATA_MODEL.read(oEntitySet, null, {"$filter" : filterValue}, true, function(data) {
                var filters = [];
                if(data.results.length){
                    filters = data.results;
                }
                callback.call(this,filters);
            });
        },

        /**
         * Read and create external target Nav Hash
         * 
         * @param {JSON} jConfig
         *  configuration object for CHIP
         * @return {string} 
         *  Returns navigation hash
         */

        getNavigationTarget: function(jConfig,system){
            var fgetService = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService;
            var oCrossAppNavigator = fgetService && fgetService("CrossApplicationNavigation");
            var param = {};
            param["evaluationId"] = jConfig.EVALUATION.ID;
            param["chipId"] = jConfig.TILE_PROPERTIES.id;
            if(system)
                param["sap-system"] = system;

            param["tileType"] = jConfig.TILE_PROPERTIES.tileType;

            if(jConfig.TILE_PROPERTIES.dimension)
                param["dimension"] = jConfig.TILE_PROPERTIES.dimension;
            if(jConfig.TILE_PROPERTIES.storyId)
                param["storyId"] = jConfig.TILE_PROPERTIES.storyId;

            if(jConfig.ADDITIONAL_APP_PARAMETERS){
                for(each in jConfig.ADDITIONAL_APP_PARAMETERS){
                    if(jConfig.ADDITIONAL_APP_PARAMETERS.hasOwnProperty(each)){
                        if(jConfig.ADDITIONAL_APP_PARAMETERS[each].constructor == Array){
                            var addApp=jConfig.ADDITIONAL_APP_PARAMETERS[each];
                            for(var i=0;i<addApp.length;i++)
                                param[each]=addApp[i]                
                        }
                        else
                            param[each]=jConfig.ADDITIONAL_APP_PARAMETERS[each];
                    }
                }
            }
            var toOurApp = oCrossAppNavigator && oCrossAppNavigator.hrefForExternal({
                target: {
                    semanticObject: jConfig.TILE_PROPERTIES.semanticObject,
                    action: jConfig.TILE_PROPERTIES.semanticAction
                },
                params: param
            }) || "";
            if(jConfig.ADDITIONAL_FILTERS){
                var addFilter = jConfig.ADDITIONAL_FILTERS;
                var addFilterString="&";
                for(var j=0;j<addFilter.length;j++){
                    if(addFilter[j].OPERATOR==="EQ")
                        addFilterString=addFilterString+"/"+addFilter[j].NAME+"="+addFilter[j].VALUE_1;
                }
                toOurApp+=addFilterString;
            } 
            return toOurApp;
        },

        /**
         * Read chipConfig object and return appropriate title
         * 
         * @param {JSON} CHIP config
         *  configuration object for CHIP
         * @return {string}
         *  returns title for tile
         */
        getChipTitle: function(jConfig){
            var title = "";
            if(jConfig){
                var chipIndicator = jConfig.EVALUATION || {}
                title = chipIndicator.INDICATOR_TITLE || ""
            }
            return title;
        },

        getstringifyTileConfig: function(jConfig){
            var sConfig = {};
            sConfig.EVALUATION = JSON.stringify(jConfig.EVALUATION);
            sConfig.EVALUATION_FILTERS = JSON.stringify(jConfig.EVALUATION_FILTERS);
            sConfig.EVALUATION_VALUES = JSON.stringify(jConfig.EVALUATION_VALUES);
            sConfig.TILE_PROPERTIES = JSON.stringify(jConfig.TILE_PROPERTIES);
            return JSON.stringify(sConfig);
        },
        /**
         * Read chipConfig object and return appropriate subTitle
         * 
         * @param {JSON} CHIP config
         *  configuration object for CHIP
         * @return {string}
         *  returns subtitle for tile
         */

        getChipSubTitle: function(jConfig){
            var sTitle = "";
            if(jConfig){
                var chipEvaluation = jConfig.EVALUATION || {}
                sTitle = chipEvaluation.TITLE || ""
            }
            return sTitle;
        },
        /**
         * Returns fully formed oData Query URI using oData4Analytics Library
         *
         * @param {string} sUri
         *   oData entry URI
         * @param {string} entitySet
         *   entitySet in oDataURI for query
         * @param {string} measure
         *   aggregation of value on column name measure
         * @param {string} dimension
         *   aggregation of value on column name group by dimension
         * @param {JSON} variants
         *   $filter parameter in oData URI
         * @param {string} orderByElements
         *   orderBy either asc or desc
         * @param {string} top
         *   how many top values to select
         * @returns {string}
         *   Returns fully formed oData URI
         */

        prepareQueryServiceUri : function(sUri, entitySet, measure, dimension, variants, orderByElements, top) {
            function _replaceSingleQuoteWithDoubleSingleQuote(str) {
                return str.replace(/'/g,"''");
            }
            var tmpDimension = null;
            try {
                var modelReferenceBy=null;
                if(sUri instanceof sap.ui.model.odata.ODataModel) {
                    modelReferenceBy = sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model.ReferenceByModel(sUri);           
                } else {
                    var tempModel = this.getODataModelByServiceUri(sUri);
                    modelReferenceBy = sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model.ReferenceByModel(tempModel);
                }
                var O4A = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model(modelReferenceBy);
                var oQueryResult = O4A.findQueryResultByName(entitySet);
                var oQueryResultRequest = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResultRequest(oQueryResult);
                if(measure) {
                    oQueryResultRequest.setMeasures(measure.split(","));
                    oQueryResultRequest.includeMeasureRawFormattedValueUnit(null, true, true, true);
                }
                if(dimension) {
                    if(typeof dimension =="string") { 
                        tmpDimension = dimension; 
                        tmpDimension = tmpDimension.split(",");
                    }

                    for(var i=0;i<tmpDimension.length;i++) { 
                        oQueryResultRequest.addToAggregationLevel([tmpDimension[i]]);
                        var tmp=oQueryResult.getAllDimensions();
                        if(tmp[tmpDimension[i]].getTextProperty() != null) { 
                            oQueryResultRequest.includeDimensionKeyTextAttributes([tmpDimension[i]], true, true, null)
                        }
                    }
//                  oQueryResultRequest.setAggregationLevel(dimension.split(","));
//                  oQueryResultRequest.includeDimensionKeyTextAttributes(null, true, false, null);                               
                }

                if(variants && variants.length) {
                    var filterVariants = new Array();
                    var inputParamsVariants = new Array();
                    for(var i=0, l=variants.length; i<l; i++) {
                        var each = variants[i];
                        if(each.type === "PA") {
                            inputParamsVariants.push(each);
                        } else if(each.type === "FI") {
                            filterVariants.push(each);
                        }
                    }
                    function changeToYYYYMMDDHHMMSS(odate){ 
                        var dateStr = odate.toJSON();
                        var lastChar = dateStr.charAt(dateStr.length-1).toUpperCase();
                        if(lastChar.charCodeAt(0) >= 65 && lastChar.charCodeAt(0) <= 90) {
                            dateStr = dateStr.slice(0,-1);
                        }
                        return dateStr;
                    }
                    function _processODataDateTime(junkValue) {
                        if(junkValue) {
                            try {
                                if(junkValue == +junkValue) {
                                    junkValue = window.parseInt(junkValue);
                                }
                                var date = new Date(junkValue);
                                var time = date.getTime();
                                if(isNaN(time)) {
                                    return junkValue;
                                } else {
                                    return changeToYYYYMMDDHHMMSS(date);
                                }
                            }catch(e) {

                            }
                        }
                        return junkValue;
                    }
                    if(filterVariants.length) {
                        var oFilterExpression = oQueryResultRequest.getFilterExpression();
                        for(var i=0, l=filterVariants.length; i<l; i++) {
                            var each = filterVariants[i];
                            if(this.getEdmType(sUri,each.filterPropertyName)=="Edm.DateTime") {
                                each.value = _processODataDateTime(each.value);
                                each.valueTo = _processODataDateTime(each.valueTo);
                            }
                            if(each.comparator == sap.ui.model.FilterOperator.BT) {
                                oFilterExpression.addCondition(each.filterPropertyName,each.comparator,window.encodeURIComponent(_replaceSingleQuoteWithDoubleSingleQuote(each.value)),window.encodeURIComponent(each.valueTo));
                            } else {
                                var multipleFilterValueArray = each.value.split(",");
                                for(var j=0, k=multipleFilterValueArray.length; j<k; j++) {
                                    oFilterExpression.addCondition(each.filterPropertyName,each.comparator,window.encodeURIComponent(_replaceSingleQuoteWithDoubleSingleQuote(multipleFilterValueArray[j].replace(/\^\|/g,","))),null);
                                }
                            }

                        }
                    }
                    if(inputParamsVariants.length) {
                        if(oQueryResult.getParameterization()) {
                            var oParamRequest = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.ParameterizationRequest(oQueryResult.getParameterization());
                            for(var y=0, z = inputParamsVariants.length; y<z ; y++) {
                                var eachInputParam = inputParamsVariants[y];
                                oParamRequest.setParameterValue(eachInputParam.filterPropertyName,window.encodeURIComponent(_replaceSingleQuoteWithDoubleSingleQuote(eachInputParam.value)));
                            }
                            oQueryResultRequest.setParameterizationRequest(oParamRequest);
                        }
                    }
                }
                var finalUri = oQueryResultRequest.getURIToQueryResultEntries();

                if(orderByElements && orderByElements.length){
                    //finalUri=finalUri+"&$orderby="+orderByElements.join(",");
                    finalUri=finalUri+"&$orderby="; 
                    for(var y=0, z = orderByElements.length; y<z ; y++){ 
                        var order = orderByElements[y].sortOrder || "asc"; 
                        if(order) finalUri+=orderByElements[y].element+" "+order+","; 
                    }                           
                    finalUri=finalUri.slice(0,finalUri.length-1); 
                } 

                if(top){
                    finalUri=finalUri+"&$top="+top;
                }

                var oMeasureNames = oQueryResult.getAllMeasures();
                var unit = oMeasureNames[measure.split(",")[0]].getUnitProperty();


                return {
                    uri : finalUri,
                    model : O4A.getODataModel(),
                    unit : unit
                };
            } catch(e) {
                $.sap.log.error("Error Preparing Query Service Uri using OData4Analytics Library : "+e.toString());
                if(arguments.length) {
                    $.sap.log.error("Arguments Passed to this function");
                    $.sap.log.error(arguments[0] +","+arguments[1]+","+arguments[2]+","+arguments[3]);
                } else {
                    $.sap.log.error("NO Arguments passed to this function");
                }
                return null;
            }
        },
        _getOData4AnalyticsObject  : function(sUri) {
            var oModel = null;
            if(sUri instanceof sap.ui.model.odata.ODataModel) {
                oModel = sUri;
            } else if(typeof sUri == "string") {
                oModel = this.getODataModelByServiceUri(sUri);
            } else {
                throw new Error("Invalid Input to Create ODataModel Object : "+sUri);
            }
            var O4A = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model(sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model.ReferenceByModel(oModel));
            return O4A;
        },
        getAllEntitySet : function(sUri) {
            var entitySets = new Array();
            try {
                var o4a = this._getOData4AnalyticsObject(sUri);
                entitySets = o4a.getAllQueryResultNames();
            } catch(e) {
                $.sap.log.error("Error fetching Enity Set : "+e.toString());
            }
            return entitySets;

        },
        getAllMeasures : function(sUri, entitySet) {
            var measures = new Array();
            try {
                var o4a = this._getOData4AnalyticsObject(sUri);
                var queryResult = o4a.findQueryResultByName(entitySet);
                measures = queryResult.getAllMeasureNames();
            } catch(e) {
                $.sap.log.error("Error Fetching All Measures : "+e.toString());
            }
            return measures;
        },
        getAllMeasuresWithLabelText : function(sUri, entitySet) {
            var measures = new Array();
            try {
                var o4a = this._getOData4AnalyticsObject(sUri);
                var queryResult = o4a.findQueryResultByName(entitySet);
                var measureNames = queryResult.getAllMeasureNames();
                for(var i=0; i<measureNames.length; i++) {
                    var each = measureNames[i];
                    global.oMeasure = queryResult.findMeasureByName(each);
                    measures.push({
                        key : each,
                        value : oMeasure.getLabelText()
                    });
                }
            } catch(e) {
                $.sap.log.error("Error Fetching All Measures : "+e.toString());
            }
            return measures;
        },
        getAllDimensions : function(sUri, entitySet) {
            function intersectionOfArray(array1, array2) {
                var ai=0, bi=0;
                var result = new Array();
                while( ai < array1.length && bi < array2.length )
                {
                    if      (array1[ai] < array2[bi] ){ ai++; }
                    else if (array1[ai] > array2[bi] ){ bi++; }
                    else /* they're equal */
                    {
                        result.push(array1[ai]);
                        ai++;
                        bi++;
                    }
                }
                return result;
            }
            var dimensions = new Array();
            var aFilterablePropertyNames = new Array();
            try {
                var o4a = this._getOData4AnalyticsObject(sUri);
                var queryResult = o4a.findQueryResultByName(entitySet);
                var entityType= queryResult.getEntityType();
                aFilterablePropertyNames = entityType.getFilterablePropertyNames();
                dimensions = queryResult.getAllDimensionNames();
                if(aFilterablePropertyNames && aFilterablePropertyNames.length) {
                    dimensions = intersectionOfArray(aFilterablePropertyNames.sort(),dimensions.sort());
                }
            } catch(e) {
                $.sap.log.error("Error Fetching All Dimesions : "+e.toString());
            }
            return dimensions;
        },
        getAllDimensionsWithLabelText : function(sUri, entitySet) {
            var dimensions = new Array();
            try {
                var o4a = this._getOData4AnalyticsObject(sUri);
                var queryResult = o4a.findQueryResultByName(entitySet);
                var dimensionNames = queryResult.getAllDimensionNames();
                for(var i=0; i<dimensionNames.length ;i++) {
                    var each = dimensionNames[i];
                    var oDimension = queryResult.findDimensionByName(each);
                    var textProperty = null;
                    if(oDimension.getTextProperty() != null)textProperty = oDimension.getTextProperty().name;
                    dimensions.push({
                        key : each,
                        value : oDimension.getLabelText(),
                        textProperty: textProperty
                    });
                }
            } catch(e) {
                $.sap.log.error("Error Fetching All Dimesions : "+e.toString());
            }
            return dimensions;
        },
        getAllInputParams : function(sUri, entitySet) {
            var inputParams = new Array();
            try {
                var o4a = this._getOData4AnalyticsObject(sUri);
                var queryResult = o4a.findQueryResultByName(entitySet);
                if(queryResult.getParameterization()) {
                    var oParams = queryResult.getParameterization();
                    inputParams = oParams.getAllParameterNames();
                }
            } catch(e) {
                $.sap.log.error("Error Fetching Input Params : "+e.toString());
            }
            return inputParams;
        },
        getAllInputParamsWithFlag : function(sUri, entitySet) {
            var inputParams = new Array();
            try {
                var o4a = this._getOData4AnalyticsObject(sUri);
                var queryResult = o4a.findQueryResultByName(entitySet);
                if(queryResult.getParameterization()) {
                    var oParams = queryResult.getParameterization();
                    var inputParamsArray = oParams.getAllParameterNames();
                    for(var i=0; i<inputParamsArray.length; i++) {
                        var each = inputParamsArray[i];
                        var paramObject  = oParams.findParameterByName(each);
                        inputParams.push({
                            name : each,
                            optional : paramObject.isOptional()
                        });
                    }
                }
            } catch(e) {
                $.sap.log.error("Error Fetching Input Params : "+e.toString());
            }
            return inputParams;
        },

        formatOdataObjectToString : function (value){
            if(value && value.constructor == Object){
                if(value.__edmType=="Edm.Time"){
                    var milliseconds = value.ms;
                    var seconds = Math.floor((milliseconds / 1000) % 60 );
                    var minutes = Math.floor((milliseconds / 60000) % 60);
                    var hours   = Math.floor((milliseconds / 3600000) % 24);
                    return hours+"H"+minutes+"M"+seconds+"S";
                }
            }
            return value;
        },
        generateCombinations:function (array){
            function getPerfectBinary(maxLength,str){
                while(str.length<maxLength){
                    str='0'+str;
                }
                return str;
            }
            var max=Math.pow(2,array.length);
            var resultArray=[];
            var index=0;

            while(max>1){
                var str=(max-1).toString(2);
                str=getPerfectBinary(array.length,str);
                resultArray[index]=[];
                for(var i=0;i<str.length;i++){
                    if(Number(str[i]))
                        resultArray[index].push(array[i]);
                }
                max--,index++;
            }
            return resultArray;
        },

        logError : function(err){
            jQuery.sap.log.error(err.toString());
        },

        numberOfLeadingZeros : function(num) {
            num = String(num);
            var count = 0;
            var decimal_index = num.indexOf('.');
            if (decimal_index == -1) return 0;
            if(Number(num.split('.')[0]) != 0)
                return 0;
            var i = decimal_index + 1;
            while(num[i++] == '0') {
                ++count;
            }
            return count;
        },

        formatValue : function (val,scaleFactor,MAX_LEN) {              
            MAX_LEN= MAX_LEN || 3;
            var unit={3:"K",6:"M",9:"B",12:"T",0:""};
            unit["-3"] = "m";
            unit["-6"] = "u";
            unit["-9"] = "n";
            unit["-12"] = "t";
            unit["-2"] = "%";
            var temp,pre,suff;
            temp=Number(val).toPrecision(MAX_LEN);
            var zeroes = this.numberOfLeadingZeros(temp);
            if(zeroes > 0 && scaleFactor < 0){
                pre = temp*Math.pow(10,zeroes+MAX_LEN);
                suff = -(zeroes+MAX_LEN);
            }
            else
            {
                pre=Number(temp.split("e")[0]);
                suff=Number(temp.split("e")[1])||0;
            }
            if(!val && val!=0)
                return {value:"",unitPrefix:""};
                if(scaleFactor>=0)
                {
                    if(suff%3!=0){
                        if(suff%3==2){
                            if(suff+1==scaleFactor){
                                suff=suff+1;
                                pre=pre/10;
                            }
                            else{
                                suff=suff-2;
                                pre=pre*100;
                            }
                        }
                        else{
                            if(suff+2==scaleFactor){
                                suff=suff+2;
                                pre=pre/100;
                            }
                            else{
                                suff--;
                                pre=pre*10;
                            }
                        }
                    }


                    else if(suff==15){
                        pre=pre*1000;
                        suff=12;
                    }
                }
                // for negative scale factor and suff
                else{
                    if (scaleFactor=="-2"){
                        var x = this.formatValue((val*100),0);
                    }
                    else if (suff>=0 && val<10 && scaleFactor=="-3"){
                        pre = val*Math.pow(10,3);
                        suff = -3;
                    }
                    else if(suff>=0)
                        return this.formatValue(val,0);

                    else{
                        suff = Math.abs(suff);
                        scaleFactor = Math.abs(scaleFactor);
                        if(scaleFactor > suff){
                            pre = pre/(Math.pow(10,suff%3));
                            suff = suff - (suff%3);
                        }
                        else{
                            var diff = suff - scaleFactor;
                            pre = pre/(Math.pow(10,diff));
                            suff  = suff - diff;
                        }
                        suff = 0-suff;
                    }

                }
                // ending of neg scale factor
                pre+="";
                if(scaleFactor=="-2"){
                    var valstr = (x.unitPrefix == "") ? Number(x.value+"").toFixed(4 - (x.value+"").indexOf('.')) : Number(x.value+"").toFixed(3 - (x.value+"").indexOf('.')) ;
                    return {value:Number(valstr),unitPrefix:(x.unitPrefix)+unit[-2]};
                }
                pre = Number(pre).toFixed(4 - pre.indexOf('.'));
                return {value:Number(pre),unitPrefix:unit[suff]};
        },

        abortPendingODataCalls : function(oDataCallRef){
            try {
                if(oDataCallRef){
                    oDataCallRef.abort();
                }
            }catch(e) {
                this.logError(e);
            }
        }
    };

})(window, jQuery);

sap.ushell.components.tiles.indicatorTileUtils.cache = (function() {
    var BIGMAP = {};
    var KPIVALUE = {};
    return {
        getEvaluationById : function(key) {
            return this.getEvaluationByChipId(key);
        },
        getEvaluationByChipId : function(key) {
            if(BIGMAP[key]) {
                return BIGMAP[key];
            } 
            return null; 
        },
        setEvaluationById : function(key, data) {
            BIGMAP[key] = data;
        },
        getKpivalueById : function(key){
            if(KPIVALUE[key])
                return KPIVALUE[key];
            return null;
        },
        setKpivalueById : function(key, data) {
            KPIVALUE[key]  = data;
        }
    }
})();
}; // end of sap/ushell/components/tiles/indicatorTileUtils/smartBusinessUtil.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorcomparison.ComparisonTile.view') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatorcomparison.ComparisonTile.view');
//Copyright (c) 2013 SAP AG, All Rights Reserved

//Comparison Tile
(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */

    
    
    sap.ui.getCore().loadLibrary("sap.suite.ui.commons");
    
    sap.ui.jsview("tiles.indicatorcomparison.ComparisonTile", {
        getControllerName: function () {
            return "tiles.indicatorcomparison.ComparisonTile";
        },
        createContent: function (oController) {
            this.setHeight('100%');
            this.setWidth('100%');

            var view= this;
            view.tileData;          

            view.oGenericTileData = {
//                    subheader : "Lorem Ipsum SubHeader",
//                    header : "Lorem Ipsum Header",
//                    value: 8888,
//                    size: sap.suite.ui.commons.InfoTileSize.Auto,
//                    frameType:"OneByOne",
//                    state: sap.suite.ui.commons.LoadState.Loading,
//                    valueColor:sap.suite.ui.commons.InfoTileValueColor.Error,
//                    indicator: sap.suite.ui.commons.DeviationIndicator.None,
//                    title : "US Profit Margin",
//                    footer : "Current Quarter",
//                    description: "Maximum deviation",
//                    data: [
//                           { title: "Americas", value: 10, color: "Neutral" },
//                           { title: "EMEA", value: 50, color: "Neutral" },
//                           { title: "APAC", value: -20, color: "Neutral" }
//                           ],
            };

            view.oNumericContent = new sap.suite.ui.commons.NumericContent({
                value: "{/value}",
                scale: "{/scale}",
                unit: "{/unit}",
                indicator: "{/indicator}",
                size: "{/size}",
                formatterValue: "{/isFormatterValue}",
                truncateValueTo: "{/truncateValueTo}",
                valueColor: "{/valueColor}"
            });

            view.oNumericTile = new sap.suite.ui.commons.TileContent({
                unit: "{/unit}",
                size: "{/size}",
                footer: "{/footerNum}",
                content: view.oNumericContent,
            });

            view.oCmprsDataTmpl = new sap.suite.ui.commons.ComparisonData({
                title : "{title}",
                value : "{value}",
                color : "{color}",
                displayValue : "{displayValue}"
            });

            view.oCmprsChrtTmpl = new sap.suite.ui.commons.ComparisonChart(
                    {
                        size : "{/size}",
                        scale : "{/scale}",
                        data : {
                            template : view.oCmprsDataTmpl,
                            path : "/data"
                        },
                    });

            view.oComparisonTile = new sap.suite.ui.commons.TileContent({
                unit : "{/unit}",
                size : "{/size}",
                footer : "{/footerComp}",
                content : view.oCmprsChrtTmpl,
            });


            view.oGenericTile = new sap.suite.ui.commons.GenericTile({
                subheader : "{/subheader}",
                frameType : "{/frameType}",
                size : "{/size}",
                header : "{/header}",
                tileContent : [view.oComparisonTile]//view.oComparisonTile]
            });


            view.oGenericTileModel = new sap.ui.model.json.JSONModel();
            view.oGenericTileModel.setData(view.oGenericTileData);
            view.oGenericTile.setModel(view.oGenericTileModel);

            return view.oGenericTile;


        }
    });
}());
}; // end of sap/ushell/components/tiles/indicatorcomparison/ComparisonTile.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorcontribution.ContributionTile.view') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatorcontribution.ContributionTile.view');
//Copyright (c) 2013 SAP AG, All Rights Reserved

//Comparison Tile
(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */

    
    
    jQuery.sap.require('sap.ca.ui.model.format.NumberFormat'); // unlisted dependency retained

    sap.ui.getCore().loadLibrary("sap.suite.ui.commons");
    
    sap.ui.jsview("tiles.indicatorcontribution.ContributionTile", {
        getControllerName: function () {
            return "tiles.indicatorcontribution.ContributionTile";
        },
        createContent: function (oController) {
            this.setHeight('100%');
            this.setWidth('100%');

            var view= this;
            view.tileData;          

            view.oGenericTileData = {
//                    subheader : "Lorem Ipsum SubHeader",
//                    header : "Lorem Ipsum Header",
//                    value: 8888,
//                    size: sap.suite.ui.commons.InfoTileSize.Auto,
//                    frameType:"OneByOne",
//                    state: sap.suite.ui.commons.LoadState.Loading,
//                    valueColor:sap.suite.ui.commons.InfoTileValueColor.Error,
//                    indicator: sap.suite.ui.commons.DeviationIndicator.None,
//                    title : "US Profit Margin",
//                    footer : "Current Quarter",
//                    description: "Maximum deviation",
//                    data: [
//                           { title: "Americas", value: 10, color: "Neutral" },
//                           { title: "EMEA", value: 50, color: "Neutral" },
//                           { title: "APAC", value: -20, color: "Neutral" }
//                           ],
            };

            view.oNumericContent = new sap.suite.ui.commons.NumericContent({
                value: "{/value}",
                scale: "{/scale}",
                unit: "{/unit}",
                indicator: "{/indicator}",
                size: "{/size}",
                formatterValue: "{/isFormatterValue}",
                truncateValueTo: "{/truncateValueTo}",
                valueColor: "{/valueColor}"
            });

            view.oNumericTile = new sap.suite.ui.commons.TileContent({
                unit: "{/unit}",
                size: "{/size}",
                footer: "{/footerNum}",
                content: view.oNumericContent,
            });

            view.oCmprsDataTmpl = new sap.suite.ui.commons.ComparisonData({
                title : "{title}",
                value : "{value}",
                color : "{color}",
                displayValue : "{displayValue}"
            });

            view.oCmprsChrtTmpl = new sap.suite.ui.commons.ComparisonChart(
                    {
                        size : "{/size}",
                        scale : "{/scale}",
                        data : {
                            template : view.oCmprsDataTmpl,
                            path : "/data"
                        },
                    });

            view.oComparisonTile = new sap.suite.ui.commons.TileContent({
                unit : "{/unit}",
                size : "{/size}",
                footer : "{/footerComp}",
                content : view.oCmprsChrtTmpl,
            });


            view.oGenericTile = new sap.suite.ui.commons.GenericTile({
                subheader : "{/subheader}",
                frameType : "{/frameType}",
                size : "{/size}",
                header : "{/header}",
                tileContent : [view.oComparisonTile]//view.oComparisonTile]
            });


            view.oGenericTileModel = new sap.ui.model.json.JSONModel();
            view.oGenericTileModel.setData(view.oGenericTileData);
            view.oGenericTile.setModel(view.oGenericTileModel);

            return view.oGenericTile;


        }
    });
}());
}; // end of sap/ushell/components/tiles/indicatorcontribution/ContributionTile.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatordeviation.DeviationTile.view') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatordeviation.DeviationTile.view');
//Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */

    
    
    jQuery.sap.require('sap.ca.ui.model.format.NumberFormat'); // unlisted dependency retained

    sap.ui.getCore().loadLibrary("sap.suite.ui.commons");

    sap.ui.jsview("tiles.indicatordeviation.DeviationTile", {
        getControllerName: function () {
            return "tiles.indicatordeviation.DeviationTile";
        },
        createContent: function (oController) {
            this.setHeight('100%');
            this.setWidth('100%');
            var preview = this.getViewData().chip.preview;
            var header = "Lorem ipsum";
            var subheader =  "Lorem ipsum";
            if(preview && preview.getTitle()){
                header = preview.getTitle();
                subheader = preview.getDescription();
            }
            var deviationTileData= {
                    subheader : subheader,
                    header : header,
                    footerNum : "",
                    footerComp : "",
                    frameType:"OneByOne",
                    state: sap.suite.ui.commons.LoadState.Loading,
                    scale: "",
//                    actual: { value: 120, color: sap.suite.ui.commons.InfoTileValueColor.Good},
//                    targetValue: 100,
//                    thresholds: [
//                                 { value: 0, color: sap.suite.ui.commons.InfoTileValueColor.Error },
//                                 { value: 50, color: sap.suite.ui.commons.InfoTileValueColor.Critical },
//                                 { value: 150, color: sap.suite.ui.commons.InfoTileValueColor.Critical },
//                                 { value: 200, color: sap.suite.ui.commons.InfoTileValueColor.Error }
//                                 ],
//                    showActualValue: true,
//                    showTargetValue: true
            };

            var oBCDataTmpl = new sap.suite.ui.commons.BulletChartData({
                value: "{value}",
                color: "{color}"
            });

            this.oBCTmpl = new sap.suite.ui.commons.BulletChart({
                size: sap.suite.ui.commons.InfoTileSize.Auto,
                scale: "{/scale}",
                actual: {
                    value: "{/actual/value}",
                    color: "{/actual/color}"
                },
                targetValue: "{/targetValue}",
                actualValueLabel: "{/actualValueLabel}",
                targetValueLabel: "{/targetValueLabel}",
                thresholds: {
                    template: oBCDataTmpl,
                    path: "/thresholds"
                },
                state: "{/state}",  
                showActualValue: "{/showActualValue}",
                showTargetValue: "{/showTargetValue}"
            });

            var oNVConfS = new sap.suite.ui.commons.TileContent({
                unit : "{/unit}",
                size : "{/size}",
                footer : "{/footerNum}",
                content: this.oBCTmpl,
            });

            this.oGenericTile = new sap.suite.ui.commons.GenericTile({
                subheader : "{/subheader}",
                frameType : "{/frameType}",
                size : "{/size}",
                header : "{/header}",
                tileContent : [oNVConfS]
            });

            var oGenericTileModel = new sap.ui.model.json.JSONModel();
            oGenericTileModel.setData(deviationTileData);
            this.oGenericTile.setModel(oGenericTileModel);

            return this.oGenericTile;
        }
    });
}());
}; // end of sap/ushell/components/tiles/indicatordeviation/DeviationTile.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatornumeric.NumericTile.view') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatornumeric.NumericTile.view');
(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */
    
    
    jQuery.sap.require('sap.ca.ui.model.format.NumberFormat'); // unlisted dependency retained

    sap.ui.getCore().loadLibrary("sap.suite.ui.commons");

    sap.ui.jsview("tiles.indicatornumeric.NumericTile", {
        getControllerName: function () {
            return "tiles.indicatornumeric.NumericTile";
        },
        createContent: function (oController) {
            var preview = this.getViewData().chip.preview;
            var header = "Lorem ipsum";
            var subheader =  "Lorem ipsum";
            if(preview && preview.getTitle()){
                header = preview.getTitle();
                subheader = preview.getDescription();
            }
            var oGenericTileData = {
                    subheader : subheader,
                    header : header,
                    footerNum : "",
                    footerComp : "",
                    scale: "",
                    unit: "",
                    value: "",
                    size:"Auto",
                    frameType:"OneByOne",
                    state: sap.suite.ui.commons.LoadState.Loading,
                    valueColor:sap.suite.ui.commons.InfoTileValueColor.Neutral,
                    indicator: sap.suite.ui.commons.DeviationIndicator.None,
                    title : "",
                    footer : "",
                    description: ""
            }

            this.oNVConfContS = new sap.suite.ui.commons.NumericContent({
                value : "{/value}",
                scale : "{/scale}",
                unit : "{/unit}",
                indicator : "{/indicator}",
                valueColor: "{/valueColor}",
                size : "{/size}",
                formatterValue : true,
                truncateValueTo : 6 ,
                nullifyValue : false
            });
            
            /*
             * @to be removed once suite.commons fix scaling this issue
             */
            
//            this.oNVConfContS.setScale = function(sText) {
//                if(!this.getFormatterValue()) {
//                    this.setProperty("scale", sText, true);
//                }
//                return this;
//            };

            var oNVConfS = new sap.suite.ui.commons.TileContent({
                unit : "{/unit}",
                size : "{/size}",
                footer : "{/footerNum}",
                content: this.oNVConfContS,
            });

            this.oGenericTile = new sap.suite.ui.commons.GenericTile({
                subheader : "{/subheader}",
                frameType : "{/frameType}",
                size : "{/size}",
                header : "{/header}",
                tileContent : [oNVConfS]
            });

            var oGenericTileModel = new sap.ui.model.json.JSONModel();
            oGenericTileModel.setData(oGenericTileData);
            this.oGenericTile.setModel(oGenericTileModel);

            return this.oGenericTile;
        }
    });
}());
}; // end of sap/ushell/components/tiles/indicatornumeric/NumericTile.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.utils') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview This file contains miscellaneous utility functions.
 */
/*global jQuery, OData, sap */

this.sap = this.sap || {};

(function () {
    "use strict";
    /*global document, jQuery, sap, OData */

    jQuery.sap.declare("sap.ushell.components.tiles.utils");

    // namespace "sap.ushell.components.tiles.utils" ************************************
    sap = sap || {};
    sap.ushell = sap.ushell || {};
    sap.ushell.components = sap.ushell.components || {};
    sap.ushell.components.tiles = sap.ushell.components.tiles || {};
    sap.ushell.components.tiles.utils = sap.ushell.components.tiles.utils || {};

    if (sap.ushell.components.tiles.utils.getConfiguration) {
        return;
    }

    var oTilesResourceBundle;

    /**
     * Converts parameters formatted in a query string into an array of name value pairs.
     *
     * @param {string} sQueryString
     *   the query string (without leading '?') as coming from the launchpad; it must at least
     *   contain one parameter
     * @returns {[object]}
     *   the parameters as array of object with <code>name</code> and <code>value</code>
     */
    function stringToNameValuePairs(sQueryString) {
        var aNameValuePairs = sQueryString.replace(/\+/g, ' ').split("&"),
            aPair,
            i,
            aResult = [];

        for (i = 0; i < aNameValuePairs.length; i += 1) {
            aPair = aNameValuePairs[i].split("=");
            aResult.push({
                name: decodeURIComponent(aPair.shift()),
                value: decodeURIComponent(aPair.join("="))
            });
        }
        return aResult;
    }
    // "public static methods" **************************************************
    /**
     * Checks whether the translated chip title is in initial state.
     *
     * @param {string} sTitle
     *  The chip title.
     *
     * @returns {boolean}
     *  True, if the title is in initial state.
     */
    sap.ushell.components.tiles.utils.isInitial = function (sTitle) {
        return sTitle === "App Launcher – Static" || sTitle === "App Launcher – Dynamic" || sTitle === "Target Mapping";
    };

    /**
     * Get shared resource bundle model for applauncher and action tiles.
     *
     * @returns {sap.ui.model.resource.ResourceModel}
     *  Shared resource bundle model for applauncher and action tiles.
     */
    sap.ushell.components.tiles.utils.getResourceBundleModel = function () {
        jQuery.sap.require("sap.ushell.resources");
        return sap.ushell.resources.i18nModel;
    };

    /**
     * Read and initialize configuration object from given JSON string. Used by static and dynamic applaunchers.
     *
     * @param {string} sConfig
     *   Configuration string in JSON format
     * @param {boolean} bAdmin
     *   A flag that indicates, whether the configuration shall be shown in the Admin UI
     * @param {boolean} bEdit
     *   A flag that indicates, whether the configuration shall be shown in the Admin UI in edit mode (i.e., not on a tile)
     * @returns {object}
     *   Returns parsed and initialized configuration object
     */
    sap.ushell.components.tiles.utils.getConfiguration = function (oTileApi, bAdmin, bEdit) {

        var oResourceBundle,
            sConfig = oTileApi.configuration.getParameterValueAsString('tileConfiguration'),
            oConfig = JSON.parse(sConfig || "{}"),

        //first try to get properties from bag
            sTitle = sap.ushell.components.tiles.utils.getTranslatedTitle(oTileApi),
            sSubtitle = sap.ushell.components.tiles.utils.getTranslatedSubtitle(oTileApi, oConfig),
            sInfo = sap.ushell.components.tiles.utils.getTranslatedProperty(oTileApi, oConfig, 'display_info_text'),
            sKeywords = sap.ushell.components.tiles.utils.getTranslatedProperty(oTileApi, oConfig, 'display_search_keywords');

        if (bAdmin) {
            // resource bundle is only used in admin mode
            oResourceBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle();

            if (bEdit && oTileApi.bag){
                var orgLocale = oTileApi.bag.getOriginalLanguage();
                var userLocale = sap.ui.getCore().getConfiguration().getLanguage();
                oConfig.isLocaleSuitable = orgLocale === "" || orgLocale.toLowerCase() === userLocale.toLowerCase();
                oConfig.orgLocale = orgLocale;
                oConfig.userLocale = userLocale;

            }
        }
        // in Admin UI, we display sample values for info/title/subtitle if not defined in the configuration
        oConfig.display_icon_url = oConfig.display_icon_url || "";
        oConfig.display_info_text = sInfo || oConfig.display_info_text ||
            (bAdmin && !bEdit ?
                 "[" + oResourceBundle.getText("configuration.display_info_text") + "]" :
                 "");
        oConfig.navigation_semantic_object = oConfig.navigation_semantic_object || "";
        oConfig.navigation_semantic_action = oConfig.navigation_semantic_action || "";
        oConfig.navigation_semantic_parameters = oConfig.navigation_semantic_parameters || "";
        oConfig.display_number_unit = oConfig.display_number_unit || "";
        oConfig.display_number_factor = oConfig.display_number_factor || "";
        oConfig.service_refresh_interval = oConfig.service_refresh_interval || 0;
        oConfig.service_url = oConfig.service_url || "";
        oConfig.navigation_target_url = oConfig.navigation_target_url || "";
        if (bAdmin && sap.ushell.components.tiles.utils.isInitial(sTitle)) {
            oConfig.display_title_text = bEdit ?
                "":
                "[" + oResourceBundle.getText("configuration.display_title_text") + "]";
        } else {
            oConfig.display_title_text = sTitle || oConfig.display_title_text || "";
        }
        oConfig.display_subtitle_text = sSubtitle || oConfig.display_subtitle_text ||
            (bAdmin && !bEdit ?
                 "[" + oResourceBundle.getText("configuration.display_subtitle_text") + "]":
                 "");
        oConfig.navigation_use_semantic_object = (oConfig.navigation_use_semantic_object === false ? false : true);
        oConfig.display_search_keywords = sKeywords || oConfig.display_search_keywords || "";

        // display sample value '1234' in Admin UI
        if (bAdmin) {
            oConfig.display_number_value = oConfig.display_number_value || 1234;
        }

        //If form factors were not configured yet, use default values
        oConfig.form_factors = oConfig.form_factors ? oConfig.form_factors : this.getDefaultFormFactors();

        oConfig.desktopChecked =  oConfig.form_factors.manual.desktop;
        oConfig.tabletChecked = oConfig.form_factors.manual.tablet;
        oConfig.phoneChecked = oConfig.form_factors.manual.phone;
        oConfig.manualFormFactor = !(oConfig.form_factors.appDefault);
        oConfig.appFormFactor = oConfig.form_factors.appDefault;

        //The following line is workaround for the case that the form factor parameters were set by default
        //We don't want to save this unless the user specifically changed the form factor (uncheck and immediately recheck is considered a change)
        oConfig.formFactorConfigDefault = oConfig.form_factors.defaultParam ? true : false;
        oConfig.rows = (oConfig.mapping_signature && oConfig.mapping_signature !== "*=*") ? this.getMappingSignatureTableData(oConfig.mapping_signature) : [this.getEmptyRowObj()];
        oConfig.isUnknownAllowed = (oConfig.mapping_signature !== undefined) ? this.getAllowUnknownParametersValue(oConfig.mapping_signature) : true;
       
        return oConfig;
    };

    //Create a row template for adding new empty row to the params table (mapping signature)
    sap.ushell.components.tiles.utils.getEmptyRowObj = function (){
        return {name: "" , mandatory: false, value:  "", isRegularExpression: false, defaultValue: "", valEnabled: false, defValEnabled: true};
    
    };
    
    //The default values for the form factor is to let the application decide what devices are supported (i.e. form factors). The admin can override the defaults.
    sap.ushell.components.tiles.utils.getDefaultFormFactors = function (){

        return {
            "appDefault" : false,
            "manual": {	"desktop": true, "tablet": true, "phone": true },
            "defaultParam" :true
        };
    };


    //Build form factors list as populated by the user. This format is expected by the nav target resolution service.
    //When the appDefault is true, the form factor check-boxes are disabled and their value should be ignored.
    //otherwise, they are used to determine on what form factors this nav target can be used.
    //The values "desktop"/"tablet"/"phone" are sync with the sap.ui.Device.system values which are used in the resolving.
    sap.ushell.components.tiles.utils.buildFormFactorsObject = function (oModel){

            return {
                "appDefault" :  oModel.getProperty("/config/appFormFactor"),
                "manual":	{
                    "desktop": oModel.getProperty("/config/desktopChecked"),
                    "tablet": oModel.getProperty("/config/tabletChecked"),
                    "phone": oModel.getProperty("/config/phoneChecked")
                }
            };
    };

  //Check if the parameters table has duplicate parameter names, return true if it does, false otherwise
    sap.ushell.components.tiles.utils.tableHasDuplicateParameterNames = function(aTableContent){
       var parametersMap = {};
       for (var i = 0; i < aTableContent.length; i++){
              var paramName = aTableContent[i].name;
              if (paramName !== ""){
                     if(parametersMap[paramName]){
                           return true;
                     }else{
                           parametersMap[paramName] = true;
                     }
              }
       }
       return false;
    };
    
    
     //Build the mapping signature string according to the entries of the table and the value of the allowed undefined checkbox.
     //This function will be called during save operation
     sap.ushell.components.tiles.utils.getMappingSignatureString = function (tableContent, allowUnknownParameters){
         var mappingSignature = "";
         for (var i = 0; i < tableContent.length; i++) {
             if (tableContent[i].name){
                 mappingSignature += (getOneParamSignature(tableContent[i]) + "&");
             }
         }
         return allowUnknownParameters ? mappingSignature + "*=*" :  mappingSignature.substring(0, mappingSignature.length-1); //might be empty
     };
     
     //build a string representation of the provided row object
     var getOneParamSignature = function(tableRow){
         var paramSignature = "";
        
         if(tableRow.mandatory){
             if(tableRow.isRegularExpression){
                 paramSignature = "{" + tableRow.name + "=" + encodeURIComponent(tableRow.value) + "}";
             }else{
                 paramSignature = tableRow.name + "=" + encodeURIComponent(tableRow.value);
             }
         }else{
             paramSignature = "[" + tableRow.name + "=" + encodeURIComponent(tableRow.defaultValue) + "]";
         }
         return paramSignature;
     };
          
     //var mappingSignatureStringExample = "par1=B%3C%3E&{par2=D*}&[par3=F%40%40]";
     
     //Build the table data according to the mapping signature string
     //This function will be called during init operation
     sap.ushell.components.tiles.utils.getMappingSignatureTableData = function (mappingSignatureString){
        var paramsArray = [];
        var paramStringsArray = mappingSignatureString.split("&");

        for(var i=0; i<paramStringsArray.length; i++){
            var currentParam = paramStringsArray[i];
            if (currentParam !== "*=*"){
                //For each parameter string (except from the "allow unknown parameters" sign),
                //get the parameter object and add to the array
                paramsArray.push(getOneParamObject(paramStringsArray[i]));
            }
        }
        return paramsArray;
     };
     
     var getOneParamObject = function(paramString){
         var paramObject = {};

         if (paramString.charAt(0) === "["){
             //If there are [] brackets, this parameter is optional
             paramObject.mandatory = false;
             paramObject.isRegularExpression = false; //Optional params can't be regular expressions
             paramObject.value = ""; //No value for optional params (only default value)
             paramString = paramString.substring(1, paramString.length-1); //Remove [] brackets
             paramObject.name = paramString.substring(0, paramString.indexOf("=")); //Get name
             paramObject.defaultValue = decodeURIComponent(paramString.substring(paramString.indexOf("=")+1)); //Get default value
         }else{
             //No [] brackets so this parameter is mandatory
             paramObject.mandatory = true;
             paramObject.defaultValue = ""; //No default value for mandatory params (only value is allowed)
             if (paramString.charAt(0) === "{"){
                 //If there are {} brackets, this parameter is a regular expression
                 paramObject.isRegularExpression = true;
                 paramString = paramString.substring(1, paramString.length-1); //Remove {} brackets
             }else{
                 //No {} brackets, so this parameter is not a regular expression
                 paramObject.isRegularExpression = false;
             }
             paramObject.name = paramString.substring(0, paramString.indexOf("=")); //Get name
             paramObject.value = decodeURIComponent(paramString.substring(paramString.indexOf("=")+1)); //Get value
         }
         paramObject.valEnabled = paramObject.mandatory;
         paramObject.defValEnabled = !paramObject.mandatory;

         return paramObject;
     };
     
     //Get the allowUnknownParameters check-box value from the mapping signature string (Will be called during init operation)
     sap.ushell.components.tiles.utils.getAllowUnknownParametersValue = function (mappingSignatureString){
         //Check if the last parameter is *=* then "allow unknown parameters" should be true
         if (mappingSignatureString && (mappingSignatureString.substring(mappingSignatureString.length - 3, mappingSignatureString.length) === "*=*")){
             return true;
         }else{
             return false;
         }
     };
    
     /**
     * Returns the translated title string.
     *
     * @param {object} oTileApi
     *  The instance-specific chip API.
     *
     * @returns {string}
     *  The translated chip title.
     */
    sap.ushell.components.tiles.utils.getTranslatedTitle = function (oTileApi) {
        // Note: "oTileApi.title" is no genuine contract, but is injected by the launchpad designer.
        // As such, "title" is only available in design time and not during runtime.
        // At runtime. oTileApi.preview.getTitle() can be used to fetch the translatable title.

        //first try to get title from bag
        if (oTileApi.bag) {
            var bag = oTileApi.bag.getBag('tileProperties');
            if (bag.getTextNames().indexOf("display_title_text") >= 0) {
                return bag.getText('display_title_text');
            }
        }

        // design time
        if (oTileApi.title) {
            return oTileApi.title.getTitle();
        }
        // runtime
        if (oTileApi.preview) {
            return oTileApi.preview.getTitle();
        }
        return "";
    };

    /**
     * Returns the translated subtitle string.
     *
     * @param {object} oTileApi
     *  The instance-specific chip API.
     * @param {object} oConfig
     *  The instance-specific tile configuration.
     * @returns {string}
     *  The translated chip subtitle.
     */
    sap.ushell.components.tiles.utils.getTranslatedSubtitle = function (oTileApi, oConfig) {
        //first try to get subtitle from bag
        if (oTileApi.bag) {
            var bag = oTileApi.bag.getBag('tileProperties');
            if (bag.getTextNames().indexOf("display_subtitle_text") >= 0) {
                return bag.getText('display_subtitle_text');
            }
        }
        //then try to get it from the preview
        if (oTileApi.preview && oTileApi.preview.getDescription && oTileApi.preview.getDescription()){
            return oTileApi.preview.getDescription();
        }
        //last get it from the configuration
        return oConfig['display_subtitle_text'];
    };

    /**
     * Returns the translated property string from .
     *
     * @param {object} oTileApi
     *  The instance-specific chip API.
     * @param {string} sPropertyKey
     *  The property key
     * @returns {string}
     *  The translated chip property.
     */
    sap.ushell.components.tiles.utils.getTranslatedProperty = function (oTileApi, oTileConfig, sPropertyKey) {

        //Try to read data from the property bag. If there are properties for description etc. > use them
        if (oTileApi.bag) {
            var bag = oTileApi.bag.getBag('tileProperties');
            if (bag.getTextNames().indexOf(sPropertyKey) >= 0) {
                return bag.getText(sPropertyKey);
            }
        }

        //If there is no data in the property bag, use the config bag to read the data
        return oTileConfig[sPropertyKey];

    };

    /**
     * Read and initialize configuration object from given JSON string. Used by the action chip (aka target mapping).
     *
     * @param {string} sConfig
     *   Configuration string in JSON format
     * @param {string} bAdmin
     *   A flag that indicates, whether the configuration shall be shown in the Admin UI
     * @returns {object}
     *   Returns parsed and initialized configuration object
     */
    sap.ushell.components.tiles.utils.getActionConfiguration = function (sConfig, bAdmin) {
        var oConfig = JSON.parse(sConfig || "{}"),
            oResourceBundle;

        if (bAdmin) {
            oResourceBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle();
        }
        oConfig.semantic_object = oConfig.semantic_object ||
            (bAdmin ?
                "[" + oResourceBundle.getText("configuration.semantic_object") + "]" :
                "");
        oConfig.semantic_action = oConfig.semantic_action ||
            (bAdmin ?
                "[" + oResourceBundle.getText("configuration.semantic_action") + "]" :
                 "");
        //oConfig.navigation_provider = "LPD"; // fixed to LPD
        //Modified for new LPD_CUST implementation.
        oConfig.navigation_provider = oConfig.navigation_provider || "";
        oConfig.navigation_provider_role = oConfig.navigation_provider_role || "";
        oConfig.navigation_provider_instance = oConfig.navigation_provider_instance || "";
        oConfig.target_application_id = oConfig.target_application_id || "";
        oConfig.target_application_alias = oConfig.target_application_alias || "";
        oConfig.display_info_text = oConfig.display_info_text || "";
        return oConfig;
    };

    /**
     * Takes an existing view (<code>ActionTile</code>, <code>StaticTile</code>, <code>DynamicTile</code>) and initializes the configuration UI.
     *
     * @param {object} oView
     *   The view for which the configuration UI shall be initialized
     *
     * @param {string} sViewName
     *   The name of the view to initialize
     *
     * @returns {object}
     *   The configuration view to be shown in the Admin UI, e.g., {@link components.tiles.action.Configuration},
     *   {@link components.tiles.applauncher.Configuration}, or {@link components.tiles.applauncherdynamic.Configuration}
     */
    sap.ushell.components.tiles.utils.getConfigurationUi = function (oView, sViewName) {
        var oViewData = oView.getViewData(),
            oTileApi = oViewData.chip,
            oConfigurationView,
            oSemanticObjectSelector,
            oApplicationType;

        var oCurrentConfig = sap.ushell.components.tiles.utils.getConfiguration(oTileApi, true, true);

        //verify user allow to edit (user locale = original Locate

        var oConfigurationModel = new sap.ui.model.json.JSONModel({
            config : oCurrentConfig,
            // keep reference to the model in this model
            // (to be able to update it directly on configuration changes)
            tileModel : oView.getModel()
        });

        oConfigurationView = new sap.ui.view({
            type : sap.ui.core.mvc.ViewType.XML,
            viewData : oViewData,
            viewName : sViewName
        });

        oConfigurationView.setModel(oConfigurationModel);

        // initialize state of input fields depending on navigation_use_semantic_object
        // navigation_semantic_objectInput</code> used in static and dynamic tiles
        // semantic_objectInput used in action tile
        oSemanticObjectSelector = oConfigurationView.byId("navigation_semantic_objectInput") || oConfigurationView.byId("semantic_objectInput");
        if (oSemanticObjectSelector) {
            oSemanticObjectSelector.getModel().setProperty("/enabled", oCurrentConfig.navigation_use_semantic_object);
            oSemanticObjectSelector.getModel().setProperty("/value", oCurrentConfig.semantic_object || oCurrentConfig.navigation_semantic_object);
        }
        //Enable Application type radio button LPD_CUST/SAPUI5 depending on navigation_provider
        //Application type is used in action tile configuration
        //If navigation_provider value is 'LPD', then LPD_CUST radio button has to be selected.
        oApplicationType = oConfigurationView.byId("typeLpd_cust");
        if(oApplicationType){
            if(oView.getModel().getProperty('/config/navigation_provider')=="LPD" || oView.getModel().getProperty('/config/navigation_provider')=='') {
                oConfigurationView.byId("typeLpd_cust").setSelected(true);
                oConfigurationView.byId("typeSapui5").setSelected(false);
                sap.ushell.components.tiles.utils.displayLpdCustApplicationTypeFields(oConfigurationView);
            }
            else if(oView.getModel().getProperty('/config/navigation_provider')=="SAPUI5") {
                oConfigurationView.byId("typeLpd_cust").setSelected(false);
                oConfigurationView.byId("typeSapui5").setSelected(true);
                sap.ushell.components.tiles.utils.displaySapui5ApplicationTypeFields(oConfigurationView);
            }
        }
        return oConfigurationView;
    };

    /*
     Mapping of API fields to internal config string fields and to UI5 view properties:

     OData API                  INTERNAL                        UI5 VIEW property

     [wave1]
     icon                    -> /config/display_icon_url     -> icon
     title                   -> /config/display_title_text   -> title
     number                  -> /data/display_number_value   -> number
     numberUnit              -> /config/display_number_unit  -> numberUnit
     info                    -> /config/display_info_text    -> info
     infoState               -> /data/display_info_state     -> infoState                            (Negative, Neutral, Positive, Critical)
     infoStatus*             -> /data/display_info_state     -> infoState                            (None, Success, Warning, Error)
     targetParams            -> /data/target_params          -> append to targetURL

     [new in wave2]
     subtitle                -> /config/display_subtitle_text -> subtitle
     stateArrow              -> /data/display_state_arrow     -> stateArrow                          (None, Up, Down)
     numberState             -> /data/display_number_state    -> numberState                         (Negative, Neutral, Positive, Critical)
     numberDigits            -> /data/display_number_digits   -> numberDigits                        (Digits after comma/period)
     numberFactor            -> /data/display_number_factor   -> numberFactor                        scaling factor of number (e.g. "%", "M", "k")
     keywords                -> /config/display_search_keyword-> not displayed                       string of (comma or space delimited) keywords

     * infoStatus is there for compatibility
     */
    /**
     * Get an object with attributes used by <code>DynamicTile</code>.
     * Use values from static configuration as base and override by fields returned in dynamic data.
     *
     * @param {string} oConfig
     *   Static configuration. Expects <code>display_icon_url</code>, <code>display_info_text</code>,
     *   <code>display_info_state</code>, <code>display_number</code>, <code>display_number_unit</code>
     *   and <code>display_title_text</code> in given object.
     * @param {string} oDynamicData
     *   Dynamic data to be mixed in.
     *   Updates all static configuration data by data contained in that object.
     *   If the object contains a <code>results</code> array. The <code>number</code> fields will be accumulated.
     *
     * @returns {object}
     *   An object containing the fields from the tile configuration mixed with the fields from dynamic data
     */
    sap.ushell.components.tiles.utils.getDataToDisplay = function (oConfig, oDynamicData) {
        var nSum = 0,
            i,
            n,
            oCurrentNumber,
            sCurrentTargetParams,
            oData = {
                display_icon_url: oDynamicData.icon || oConfig.display_icon_url || "",
                display_title_text: oDynamicData.title || oConfig.display_title_text || "",
                display_number_value: !isNaN(oDynamicData.number) ? oDynamicData.number : "...",
                display_number_unit: oDynamicData.numberUnit || oConfig.display_number_unit || "",
                display_info_text: oDynamicData.info || oConfig.display_info_text || "",
                display_info_state: oDynamicData.infoState || "Neutral",
                display_subtitle_text: oDynamicData.subtitle || oConfig.display_subtitle_text || "",
                display_state_arrow: oDynamicData.stateArrow || "None",
                display_number_state: oDynamicData.numberState || "Neutral",
                display_number_digits: oDynamicData.numberDigits || 0,
                display_number_factor: oDynamicData.numberFactor || "",
                actions: oDynamicData.actions || oConfig.actions,
                display_search_keyword: oDynamicData.keywords || oConfig.display_search_keyword || "",
                targetParams: []
            };
        if (oDynamicData.infoStatus) {
            // wave 1 compatability with "infoStatus" field
            oData.display_info_state = oDynamicData.infoStatus;
        }
        if (oDynamicData.targetParams) {
            oData.targetParams.push(oDynamicData.targetParams);
        }
        // accumulate results field
        if (oDynamicData.results) {
            for (i = 0, n = oDynamicData.results.length; i < n; i = i + 1) {
                oCurrentNumber = oDynamicData.results[i].number || 0;
                if (typeof oCurrentNumber === "string") {
                    oCurrentNumber = parseInt(oCurrentNumber, 10);
                }
                nSum = nSum + oCurrentNumber;
                sCurrentTargetParams = oDynamicData.results[i].targetParams;
                if (sCurrentTargetParams) {
                    oData.targetParams.push(sCurrentTargetParams);
                }
            }
            oData.display_number_value = nSum;
        }
        return oData;
    };

    /**
     * @param {object} oConfig
     *   The configuration object (as returned by <code>getConfiguration</code>)
     *
     * @returns {string}
     *   The relative navigation URL: '#', semantic object, '-', action, '?' parameters
     */
    sap.ushell.components.tiles.utils.getSemanticNavigationUrl = function (oConfig) {
        // note: empty semantic objects and actions (?) are perfectly possible
        var sUrl = "#" + jQuery.trim(oConfig.navigation_semantic_object);
        sUrl += "-" + jQuery.trim(oConfig.navigation_semantic_action);
        // parameters are optional
        if (oConfig.navigation_semantic_parameters && jQuery.trim(oConfig.navigation_semantic_parameters).length > 0) {
            sUrl += "?" + jQuery.trim(oConfig.navigation_semantic_parameters);
        }
        return sUrl;
    };

    /*
     * Add target parameters returned from OData call to configured URL.
     */
    /**
     * Rewrites the given URL by appending target parameters.
     *
     * @param {string} sUrl
     *   The target URL to be rewritten
     *
     * @param {object} oData
     *   The dynamic tile configuration as returned by <code>getDataToDisplay</code>
     *
     * @returns {string}
     *   The rewritten URL containing teh target parameters
     */
    sap.ushell.components.tiles.utils.addParamsToUrl = function (sUrl, oData) {
        var sParams = "",
            bUrlHasParams = sUrl.indexOf("?") !== -1,
            aTargetParams = oData.targetParams,
            i;

        if (aTargetParams && aTargetParams.length > 0) {
            for (i = 0; i < aTargetParams.length; i = i + 1) {
                sParams += aTargetParams[i];
                if (i < aTargetParams.length - 1) {
                    sParams += "&";
                }
            }
        }
        if (sParams.length > 0) {
            if (!bUrlHasParams) {
                sUrl += "?";
            } else {
                sUrl += "&";
            }
            sUrl += sParams;
        }
        return sUrl;
    };

    /**
     * Captures/caches the names of semantic objects configured in the backend.
     */
    sap.ushell.components.tiles.utils.aData = [];

    /**
     * Search function for the object selector dialog.
     */
    sap.ushell.components.tiles.utils.objectSelectDoSearch = function (oEvent) {
        var filter = [],
            sVal = oEvent.getParameter("value"),
            itemsBinding,
            selectNameFilter,
            selectObjFilter;
        if (sVal !== undefined) {
            itemsBinding = oEvent.getParameter("itemsBinding");
            selectNameFilter = new sap.ui.model.Filter("name", sap.ui.model.FilterOperator.Contains, sVal);
            selectObjFilter = new sap.ui.model.Filter("obj", sap.ui.model.FilterOperator.Contains, sVal);
            filter.push(selectObjFilter);
            filter.push(selectNameFilter);
            itemsBinding.filter(new sap.ui.model.Filter(filter, false));
        }
    };

    /**
     * Update function of the object selector dialog.
     */
    sap.ushell.components.tiles.utils.objectSelectUpdateDialog = function (oSelectDialog, sVal) {
        var filter = [],
            itemsBinding = oSelectDialog.getBinding("items"),
            selectFilter;
        if (sVal !== undefined) {
            selectFilter = new sap.ui.model.Filter("name", sap.ui.model.FilterOperator.Contains, sVal);
            filter.push(selectFilter);
            itemsBinding.filter(filter);
        }
    };

    // select/deselect colors for icon select dialog
    sap.ushell.components.tiles.utils.sSelectedColor = (jQuery(".sapMStdTileIconDiv").css('color') || "#007cc0").split(" ").join("");
    sap.ushell.components.tiles.utils.sDeselectedColor = (jQuery(".sapMLabel:not(.sapFioriDropZoneText )").css('color') || "#666666").split(" ").join("");

    /**
     * Visually select the given icon as indicated.
     *
     * @see sapMStdTileIconDiv
     */
    sap.ushell.components.tiles.utils.iconSelect = function (oIcon, bSelected) {
        oIcon.setColor(bSelected ? sap.ushell.components.tiles.utils.sSelectedColor : sap.ushell.components.tiles.utils.sDeselectedColor);
        oIcon.setActiveColor(bSelected ? sap.ushell.components.tiles.utils.sDeselectedColor : sap.ushell.components.tiles.utils.sSelectedColor);
    };

    /**
     * Event handler for icon's "press" event in selection dialog.
     */
    sap.ushell.components.tiles.utils.onSelectIcon = function (oController, oControlEvent) {
        var oModel = oController.getView().getModel(),
            oSelectedIcon = oModel.getProperty("/config/selected_icon");

        if (oSelectedIcon) {
            sap.ushell.components.tiles.utils.iconSelect(oSelectedIcon, false);
        }

        oSelectedIcon = oControlEvent.getSource();
        sap.ushell.components.tiles.utils.iconSelect(oSelectedIcon, true);
        oModel.setProperty("/config/ok.enabled", true);
        oModel.setProperty("/config/selected_icon", oSelectedIcon);
        oController.byId("selectIconDialog").setTitle(oSelectedIcon.getSrc());
    };

    /**
     * Close handler for icon select dialog.
     */
    sap.ushell.components.tiles.utils.onSelectIconClose = function (oView) {
        oView.byId("selectIconDialog").close();
    };

    /**
     * Confirm handler for icon select dialog.
     */
    sap.ushell.components.tiles.utils.onSelectIconOk = function (oView) {
        var oSelectedIcon = oView.getModel().getProperty("/config/selected_icon");
        if (oSelectedIcon) {
            oView.getModel().setProperty("/config/display_icon_url", oSelectedIcon.getSrc());
        }
        sap.ushell.components.tiles.utils.onSelectIconClose(oView);
    };

    /**
     * Value help request for icon selection. Opens the icon selection dialog.
     */
    sap.ushell.components.tiles.utils.iconSelectOnValueHelpRequest = function (oController, oEvent) {
        var oModel = oController.getView().getModel(),
            oResponsiveFlowLayout = oController.getView().byId("icons"),
            aCollectionNames = sap.ui.core.IconPool.getIconCollectionNames(),
            aContent = oResponsiveFlowLayout.getContent(),
            oDialog = oController.getView().byId("selectIconDialog"),
            sIcon = oModel.getProperty("/config/display_icon_url"),
            aIconNames,
            i,
            j,
            sUri,
            bBusinessSuiteInAppSymbolsContained = false;

        if (aContent.length === 0) {
            aCollectionNames.sort();
            // remove in-app symbols
            aCollectionNames = jQuery.grep(aCollectionNames, function (value) {
                if (value === "BusinessSuiteInAppSymbols") {
                    bBusinessSuiteInAppSymbolsContained = true;
                    return false;
                }
                return true;
            });
            // append at end of array, if available
            // Note: this could be removed if the launchpad icons are not to be used for apps
            if (bBusinessSuiteInAppSymbolsContained) {
                aCollectionNames.push("BusinessSuiteInAppSymbols");
            }
            for (i = 0; i < aCollectionNames.length; i += 1) {
                aIconNames = sap.ui.core.IconPool.getIconNames(aCollectionNames[i]);
                aIconNames.sort();
                for (j = 0; j < aIconNames.length; j += 1) {
                    sUri = sap.ui.core.IconPool.getIconURI(aIconNames[j], aCollectionNames[i]);
                    oResponsiveFlowLayout.addContent(
                        new sap.ui.core.Icon({
                            height: "38px",
                            press: sap.ushell.components.tiles.utils.onSelectIcon.bind(null, oController),
                            size: "2rem",
                            src: sUri,
                            tooltip: sUri,
                            width: "38px"
                        })
                    );
                }
            }
            aContent = oResponsiveFlowLayout.getContent();
        }

        // initial state
        oModel.setProperty("/config/ok.enabled", false);
        oDialog.bindProperty("title", {model: "i18n", path: "configuration.select_icon"});

        // initial selection
        for (i = 0; i < aContent.length; i += 1) {
            if (aContent[i].getSrc() === sIcon) {
                // oController.oSelectedIcon = aContent[i];
                oModel.setProperty("/config/selected_icon", aContent[i]);
                sap.ushell.components.tiles.utils.iconSelect(aContent[i], true);
                oModel.setProperty("/config/ok.enabled", true);
                oDialog.setTitle(sIcon);
            } else {
                sap.ushell.components.tiles.utils.iconSelect(aContent[i], false);
            }
        }

        oDialog.open();
    };

    /**
     * Value help request for semantic object input. Opens the semantic object input dialog.
     */
    sap.ushell.components.tiles.utils.objectSelectOnValueHelpRequest = function (oController, oEvent) {
        var oView = oController.getView(),
            sTitle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle()
                .getText("configuration.semantic_object"),
        // action tile uses 'semantic_objectInput', dynamic/static tile use 'navigation_semantic_objectInput'
            oSemanticObjectSelector = oView.byId("semantic_objectInput") || oView.byId("navigation_semantic_objectInput"),
            sValue = oSemanticObjectSelector.getValue(),
            oSelectorModel = new sap.ui.model.json.JSONModel(),
            oSelectDialog = new sap.m.SelectDialog("semantic_object_select_dialog", {
                title: sTitle,
                search : sap.ushell.components.tiles.utils.objectSelectDoSearch,
                liveChange: sap.ushell.components.tiles.utils.objectSelectDoSearch
            }),
            itemTemplate = new sap.m.StandardListItem({
                title: "{obj}"
            });

        oSelectDialog.open(sValue);
        // controllers can have different default objects
        oSelectorModel.setData(oController.aDefaultObjects.concat(sap.ushell.components.tiles.utils.aData));

        oSelectDialog.bindAggregation("items", "/", itemTemplate);
        oSelectDialog.setModel(oSelectorModel);

        sap.ushell.components.tiles.utils.objectSelectUpdateDialog(oSelectDialog, sValue);

        // cancel handler
        oSelectDialog.attachCancel(function (evt) {
            oSemanticObjectSelector.setValue(sValue);
            oSemanticObjectSelector.fireChange();
            oSelectDialog.destroy();
            oSelectDialog = null;
        });

        // confirm handler
        oSelectDialog.attachConfirm(function (evt) {
            var selectedItem = evt.getParameter("selectedItem");
            if (selectedItem) {
                oSemanticObjectSelector.setValue(selectedItem.getTitle());
                oSemanticObjectSelector.fireChange();
            }
            oSelectDialog.destroy();
            oSelectDialog = null;
        });
    };

    /**
     * Checks the input of given configuration View.
     *
     * @param {object} oConfigurationView
     *  The configuration view to check the input for.
     *
     * @param {oControlEvent}
     *  The event that triggered the call to this function.
     */
    sap.ushell.components.tiles.utils.checkInput = function (oConfigurationView, oControlEvent) {
        var oTranslationBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle(),
            oIconURLInput = oConfigurationView.byId("iconInput"),
            oSemObjectInput = oConfigurationView.byId("navigation_semantic_objectInput") || oConfigurationView.byId("semantic_objectInput"),
            oSemActionInput = oConfigurationView.byId("navigation_semantic_actionInput") || oConfigurationView.byId("semantic_actionInput"),
            sNewValue = jQuery.trim(oControlEvent.getParameter("newValue")),
            aItems,
            bFound,
            oValueState = sap.ui.core.ValueState.None,
            oValueStateText = null,
            j;

        switch (oControlEvent.getSource()) {
            case oIconURLInput:
                if (sNewValue.substring(0, 11) !== "sap-icon://") {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText = oTranslationBundle
                        .getText("configuration.display_icon_url.warning");
                }
                break;
            case oSemObjectInput:
                aItems = oSemObjectInput.getModel().getProperty("/items");
                bFound = false;
                for (j = 0; j < aItems.length; j = j + 1) {
                    if (aItems[j].obj === sNewValue) {
                        bFound = true;
                        break;
                    }
                }
                if (/[\-#&? ]/.test(sNewValue)) {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText = oTranslationBundle
                        .getText("configuration.semantic_object.error_invalid_chars");
                } else if (!bFound) {
                    oValueState = sap.ui.core.ValueState.Warning;
                    oValueStateText = oTranslationBundle
                        .getText("configuration.semantic_object.warning");
                } else if (sNewValue=="") {
                    oValueState = sap.ui.core.ValueState.Error;
                }
                if (oSemActionInput.getValue()=="") {
                    oSemActionInput.setValueState(sap.ui.core.ValueState.Error);
                }
                break;
            case oSemActionInput:
                if (/[\-#&? ]/.test(sNewValue)) {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText =
                        oTranslationBundle.getText("configuration.semantic_action.error_invalid_chars");
                } else if (sNewValue=="") {
                    oValueState = sap.ui.core.ValueState.Error;
                }
                if (oSemObjectInput.getValue()=="") {
                    oSemObjectInput.setValueState(sap.ui.core.ValueState.Error);
                }
                break;
            default:
                break;
        }

        if (oValueState) {
            oControlEvent.getSource().setValueState(oValueState);
            if (oValueStateText !== null) {
                oControlEvent.getSource().setValueStateText(oValueStateText || "");
            }
        }
    };
    
    /**
     * Checks the input of given configuration View.
     *
     * @param {object} oConfigurationView
     *  The configuration view to check the input for.
     */
    sap.ushell.components.tiles.utils.checkInputOnSaveConfig = function (oConfigurationView) {
        var oIconURLInput = oConfigurationView.byId("iconInput"),
        oSemObjectInput = oConfigurationView.byId("navigation_semantic_objectInput"),
        oSemActionInput = oConfigurationView.byId("navigation_semantic_actionInput"),
        oUseSemObjNav = oConfigurationView.byId("useLpdCheckbox"),
        oTranslationBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle(),
        aItems = oSemObjectInput.getModel().getProperty("/items"),
        bFound = false,
        bReject = false,
        j;
        //Icon input check
        if (oIconURLInput.getValue().substring(0, 11) !== "sap-icon://") {
            oIconURLInput.setValueState(sap.ui.core.ValueState.Error);
            oIconURLInput.setValueStateText(oTranslationBundle.getText("configuration.display_icon_url.warning"));
            bReject = true;
        }
        //Semantic object input check
        for (j = 0; j < aItems.length; j = j + 1) {
            if (aItems[j].obj === oSemObjectInput.getValue()) {
                bFound = true;
                break;
            }
        }
        if (/[\-#&? ]/.test(oSemObjectInput.getValue())) {
            oSemObjectInput.setValueState(sap.ui.core.ValueState.Error);
            oSemObjectInput.setValueStateText(oTranslationBundle.getText("configuration.semantic_object.error_invalid_chars"));
            bReject = true;
        } else if (!bFound) {
            oSemObjectInput.setValueState(sap.ui.core.ValueState.Error);
            oSemObjectInput.setValueStateText(oTranslationBundle.getText("configuration.semantic_object.warning"));
            bReject = true;
        } else if (oUseSemObjNav.getSelected() && oSemObjectInput.getValue()=="") {
            oSemObjectInput.setValueState(sap.ui.core.ValueState.Error);
            bReject = true;
        }
        //Semantic action input check
        if (/[\-#&? ]/.test(oSemActionInput.getValue())) {
            oSemActionInput.setValueState(sap.ui.core.ValueState.Error);
            oSemActionInput.setValueStateText(oTranslationBundle.getText("configuration.semantic_action.error_invalid_chars"));
            bReject = true;
        } else if (oUseSemObjNav.getSelected() && oSemActionInput.getValue()=="") {
            oSemActionInput.setValueState(sap.ui.core.ValueState.Error);
            bReject = true;
        }
        return bReject;
    };

    /**
     * Checks the input of given Target mapping configuration View.
     *
     * @param {object} oConfigurationView
     *  The configuration view to check the input for.
     *
     * @param {oControlEvent}
     *  The event that triggered the call to this function.
     */
    sap.ushell.components.tiles.utils.checkTMInput = function (oConfigurationView, oControlEvent) {
        var oTranslationBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle(),
            oSemObjectInput = oConfigurationView.byId("semantic_objectInput"),
            oSemActionInput = oConfigurationView.byId("semantic_actionInput"),
            oTargetAppTitleInput = oConfigurationView.byId("target_application_descriptionInput"),
            oTargetAppURLInput = oConfigurationView.byId("target_application_urlInput"),
            oTargetAppCompInput = oConfigurationView.byId("target_application_componentInput"),
            oNavProviderRoleInput = oConfigurationView.byId("navigation_provider_roleInput"),
            oNavProviderInstanceInput = oConfigurationView.byId("navigation_provider_instanceInput"),
            oTargetAppAliasInput = oConfigurationView.byId("target_application_aliasInput"),
            oTargetAppIdInput = oConfigurationView.byId("target_application_idInput"),
            oTargetAppLpdCust = oConfigurationView.byId("typeLpd_cust"),
            oTargetAppSapui5 = oConfigurationView.byId("typeSapui5"),
            oNavProviderInfo = oConfigurationView.byId("additionalInfo"),
            sNewValue = jQuery.trim(oControlEvent.getParameter("newValue")),
            aItems,
            bFound,
            oValueState = sap.ui.core.ValueState.None,
            oValueStateText = null,
            j;

        switch (oControlEvent.getSource()) {
            case oSemObjectInput:
                aItems = oSemObjectInput.getModel().getProperty("/items");
                bFound = false;
                for (j = 0; j < aItems.length; j = j + 1) {
                    if (aItems[j].obj === sNewValue) {
                        bFound = true;
                        break;
                    }
                }
                if (/[\-#&? ]/.test(sNewValue)) {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText = oTranslationBundle
                        .getText("configuration.semantic_object.error_invalid_chars");
                } else if (!bFound) {
                    oValueState = sap.ui.core.ValueState.Warning;
                    oValueStateText = oTranslationBundle
                        .getText("configuration.semantic_object.warning");
                }
                if (oSemActionInput.getValue()=="") {
                    oSemActionInput.setValueState(sap.ui.core.ValueState.Error);
                }
                break;
            case oSemActionInput:
                if (/[\-#&? ]/.test(sNewValue)) {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText =
                        oTranslationBundle.getText("configuration.semantic_action.error_invalid_chars");
                } else if (sNewValue=="") {
                    oValueState = sap.ui.core.ValueState.Error;
                }
                break;
            case oTargetAppTitleInput:
                // Only String is allowed for target application title
                if (sNewValue=="") {
                    oValueState = sap.ui.core.ValueState.Error;
                } else if (!(/^[-/\w]+$/.test(sNewValue))) {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText =
                        oTranslationBundle.getText("configuration.target_application.description.error_invalid_chars");
                }
                if (oTargetAppSapui5.getSelected() && oTargetAppURLInput.getValue()=="") {
                    oTargetAppURLInput.setValueState(sap.ui.core.ValueState.Error);
                }
                if (oTargetAppSapui5.getSelected() && oTargetAppCompInput.getValue()=="") {
                    oTargetAppCompInput.setValueState(sap.ui.core.ValueState.Error);
                }
                break;
            case oTargetAppURLInput:
                if (sNewValue=="") {
                    oValueState = sap.ui.core.ValueState.Error;
                }
                if (oTargetAppSapui5.getSelected() && oTargetAppTitleInput.getValue()=="") {
                    oTargetAppTitleInput.setValueState(sap.ui.core.ValueState.Error);
                }
                if (oTargetAppSapui5.getSelected() && oTargetAppCompInput.getValue()=="") {
                    oTargetAppCompInput.setValueState(sap.ui.core.ValueState.Error);
                }
                break;
            case oTargetAppCompInput:
                // Only String is allowed for target application component
                if (sNewValue=="") {
                    oValueState = sap.ui.core.ValueState.Error;
                } else if (sNewValue.substring(0, 17) == "SAPUI5.Component=") {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText =
                        oTranslationBundle.getText("configuration.target_application.component.error_invalid_input");
                } else if (!(/^[-/\w]+$/.test(sNewValue))) {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText =
                        oTranslationBundle.getText("configuration.target_application.component.error_invalid_chars");
                }
                if (oTargetAppSapui5.getSelected() && oTargetAppURLInput.getValue()=="") {
                    oTargetAppURLInput.setValueState(sap.ui.core.ValueState.Error);
                }
                if (oTargetAppSapui5.getSelected() && oTargetAppTitleInput.getValue()=="") {
                    oTargetAppTitleInput.setValueState(sap.ui.core.ValueState.Error);
                }
                break;
            case oNavProviderRoleInput:
                if (sNewValue=="") {
                    oValueState = sap.ui.core.ValueState.Error;
                }
                if (oTargetAppLpdCust.getSelected() && oNavProviderInstanceInput.getValue()=="") {
                    oNavProviderInstanceInput.setValueState(sap.ui.core.ValueState.Error);
                }
                if (oTargetAppLpdCust.getSelected() && oTargetAppAliasInput.getValue()=="" && oTargetAppIdInput.getValue()=="") {
                    var oValStateText =
                        oTranslationBundle.getText("configuration.target_application.alias_id.warning");
                    oTargetAppAliasInput.setValueState(sap.ui.core.ValueState.Error);
                    oTargetAppAliasInput.setValueStateText(oValStateText);
                    oTargetAppIdInput.setValueState(sap.ui.core.ValueState.Error);
                    oTargetAppIdInput.setValueStateText(oValStateText);
                }
                break;
            case oNavProviderInstanceInput:
                if (sNewValue=="") {
                    oValueState = sap.ui.core.ValueState.Error;
                }
                if (oTargetAppLpdCust.getSelected() && oNavProviderRoleInput.getValue()=="") {
                    oNavProviderRoleInput.setValueState(sap.ui.core.ValueState.Error);
                }
                if (oTargetAppLpdCust.getSelected() && oTargetAppAliasInput.getValue()=="" && oTargetAppIdInput.getValue()=="") {
                    var oValStateText =
                        oTranslationBundle.getText("configuration.target_application.alias_id.warning");
                    oTargetAppAliasInput.setValueState(sap.ui.core.ValueState.Error);
                    oTargetAppAliasInput.setValueStateText(oValStateText);
                    oTargetAppIdInput.setValueState(sap.ui.core.ValueState.Error);
                    oTargetAppIdInput.setValueStateText(oValStateText);
                }
                break;
            case oTargetAppAliasInput:
                // Only String is allowed for target application component
                if (sNewValue=="" && oTargetAppIdInput.getValue()=="") {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText =
                        oTranslationBundle.getText("configuration.target_application.alias_id.warning");
                } else if (sNewValue!="" && !(/^[-/\w]+$/.test(sNewValue))) {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText =
                        oTranslationBundle.getText("configuration.target_application.alias.error_invalid_chars");
                } else {
                    oTargetAppIdInput.setValueState(sap.ui.core.ValueState.None);
                }
                if (oTargetAppLpdCust.getSelected() && oNavProviderInstanceInput.getValue()=="") {
                    oNavProviderInstanceInput.setValueState(sap.ui.core.ValueState.Error);
                }
                if (oTargetAppLpdCust.getSelected() && oNavProviderRoleInput.getValue()=="") {
                    oNavProviderRoleInput.setValueState(sap.ui.core.ValueState.Error);
                }
                break;
            case oTargetAppIdInput:
                if (sNewValue=="" && oTargetAppAliasInput.getValue()=="") {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText =
                        oTranslationBundle.getText("configuration.target_application.alias_id.warning");
                } else {
                    oTargetAppAliasInput.setValueState(sap.ui.core.ValueState.None);
                }
                if (oTargetAppLpdCust.getSelected() && oNavProviderInstanceInput.getValue()=="") {
                    oNavProviderInstanceInput.setValueState(sap.ui.core.ValueState.Error);
                }
                if (oTargetAppLpdCust.getSelected() && oNavProviderRoleInput.getValue()=="") {
                    oNavProviderRoleInput.setValueState(sap.ui.core.ValueState.Error);
                }
                break;
            case oNavProviderInfo:
                // Only String is allowed for target application title
                if (sNewValue!="" && !(/^[-/\w]+$/.test(sNewValue))) {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText =
                        oTranslationBundle.getText("configuration.target_application.description.error_invalid_chars");
                }
                break;
            default:
                break;
        }

        if (oValueState) {
            oControlEvent.getSource().setValueState(oValueState);
            if (oValueStateText !== null) {
                oControlEvent.getSource().setValueStateText(oValueStateText || "");
            }
        }
    };


    sap.ushell.components.tiles.utils.updateTooltipForDisabledProperties = function (oConfigurationView) {

        //change tooltip for all translatable properties in case userlocale != original Locale
        var oModel = oConfigurationView.getModel();
        var isLocaleSuitable = oModel.getProperty("/config/isLocaleSuitable");
        if (!isLocaleSuitable) {
            var rb = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle();
            var message = rb.getText("edit_configuration.original_locale_not_fit_tooltip",
                [oModel.getProperty("/config/userLocale"), oModel.getProperty("/config/orgLocale")]);
            oConfigurationView.byId("titleInput").setTooltip(message);
            oConfigurationView.byId("subtitleInput").setTooltip(message);
            oConfigurationView.byId("keywordsInput").setTooltip(message);
            oConfigurationView.byId("infoInput").setTooltip(message);
        }
    };

    /**
     * Creates a model for the object selection list control.
     * Loads all semantic objects and puts them into the cache
     * as well as into the list of suggested items.
     *
     * @param {object} oConfigController
     *    the configuration controller
     * @param {object} oSemanticObjectSelector
     *    the view of the selection control
     * @param {array} aDefaultValuesOverride
     *    if given, the default values that are in any case selectable ("*" and "") are overwritten. Must be in form
     *    <code>[{targetObject: "{semantic object id}", targetName: "{textual representation}"}]</code>
     * @private
     */
    sap.ushell.components.tiles.utils.createSemanticObjectModel = function (oConfigController, oSemanticObjectSelector, aDefaultValuesOverride) {
        var oView = oConfigController.getView(),
        // the URI of the semantic objects OData Servicw
            sUri = "/sap/opu/odata/UI2/INTEROP/SemanticObjects",
        // default selections that are prepended to the results of the OData call.
        // Options: "" (no sem obj) or "*" (all sem objects)
            aDefaultValues = [{obj: "", name: ""}, {obj: "*", name: "*"}],
        // Note: copy the arrays!
            aDefaultObjects = (aDefaultValuesOverride || aDefaultValues).slice(0),
        // set model first only to default values
            oSelectorModel = new sap.ui.model.json.JSONModel();
        // required to make the suggestion list show all entries
        // the default value for the size limit is 100!
        oSelectorModel.setSizeLimit(999999);

        oSelectorModel.setProperty("/value", "");
        oSelectorModel.setProperty("/enabled", true);

        oSemanticObjectSelector.bindAggregation("suggestionItems", "/items", new sap.ui.core.Item({text: "{obj}"}));
        oSemanticObjectSelector.setModel(oSelectorModel);

        if (sap.ushell.components.tiles.utils.aData.length > 0) {
            oSelectorModel.setData({items: aDefaultObjects.concat(sap.ushell.components.tiles.utils.aData)}, true); // merge
            return;
        }

        // read semantic objects from interop service
        OData.read({requestUri: sUri, headers: {"Accept": "application/json"}},
            // sucess
            function (oData, oResponse) {
                var sId,
                    sText,
                    i;
                for (i = 0; i < oData.results.length; i = i + 1) {
                    sId = oData.results[i].id;
                    sText = oData.results[i].text;
                    sap.ushell.components.tiles.utils.aData.push({obj: sId, name: sText || sId});
                }
                oSelectorModel.setData({items: aDefaultObjects.concat(sap.ushell.components.tiles.utils.aData)}, true); // merge
            },
            // fail
            function (oError) {
                var sMessage = oError && oError.message ? oError.message : oError;
                if (oError.response) {
                    sMessage += " - " + oError.response.statusCode + " " + oError.response.statusText;
                }
                jQuery.sap.log.error("Could not fetch data: " + sUri + ": " + sMessage, null,
                    // the source component of the error - needs to be set within the parent controller control
                    (oView.getViewName() || "sap.ushell.components.tiles.utils"));
            });
    };
    
    /**
     * Displays the input fields relavent based on application type SAPUI5/LPD_CUST.
     *
     * @param {object} oConfigurationView
     * The configuration view to check the input for.
     *
     */
    sap.ushell.components.tiles.utils.displayApplicationTypeFields = function(oConfigurationView) {
        if(oConfigurationView.byId("typeLpd_cust").getSelected()) {
            sap.ushell.components.tiles.utils.displayLpdCustApplicationTypeFields(oConfigurationView);
        }
        else {
            sap.ushell.components.tiles.utils.displaySapui5ApplicationTypeFields(oConfigurationView);
        }
    };
    
    /**
     * Displays the input fields relavent for application type SAPUI5.
     *
     * @param {object} oConfigurationView
     * The configuration view to check the input for.
     *
     */
    sap.ushell.components.tiles.utils.displaySapui5ApplicationTypeFields = function(oConfigurationView) {
        oConfigurationView.getModel().setProperty('/config/navigation_provider', 'SAPUI5') // fixed to SAPUI5 for SAPUI5
        oConfigurationView.byId('navigation_provider_role').setVisible(false);
        oConfigurationView.byId('navigation_provider_roleInput').setVisible(false);

        oConfigurationView.byId('navigation_provider_instance').setVisible(false);
        oConfigurationView.byId('navigation_provider_instanceInput').setVisible(false);

        oConfigurationView.byId('target_application_alias').setVisible(false);
        oConfigurationView.byId('target_application_aliasInput').setVisible(false);

        oConfigurationView.byId('target_application_id').setVisible(false);
        oConfigurationView.byId('target_application_idInput').setVisible(false);

        oConfigurationView.byId('application_description').setVisible(true);
        oConfigurationView.byId('target_application_descriptionInput').setVisible(true);

        oConfigurationView.byId('application_url').setVisible(true);
        oConfigurationView.byId('target_application_urlInput').setVisible(true);

        oConfigurationView.byId('application_component').setVisible(true);
        oConfigurationView.byId('target_application_componentInput').setVisible(true);
    };

    /**
     * Displays the input fields relavent for application type LPD_CUST.
     *
     * @param {object} oConfigurationView
     * The configuration view to check the input for.
     *
     */
    sap.ushell.components.tiles.utils.displayLpdCustApplicationTypeFields = function(oConfigurationView) {
        oConfigurationView.getModel().setProperty('/config/navigation_provider', 'LPD') // fixed to LPD for LPD_CUST
        oConfigurationView.byId('application_description').setVisible(false);
        oConfigurationView.byId('target_application_descriptionInput').setVisible(false);

        oConfigurationView.byId('application_url').setVisible(false);
        oConfigurationView.byId('target_application_urlInput').setVisible(false);

        oConfigurationView.byId('application_component').setVisible(false);
        oConfigurationView.byId('target_application_componentInput').setVisible(false);

        oConfigurationView.byId('navigation_provider_role').setVisible(true);
        oConfigurationView.byId('navigation_provider_roleInput').setVisible(true);

        oConfigurationView.byId('navigation_provider_instance').setVisible(true);
        oConfigurationView.byId('navigation_provider_instanceInput').setVisible(true);

        oConfigurationView.byId('target_application_alias').setVisible(true);
        oConfigurationView.byId('target_application_aliasInput').setVisible(true);

        oConfigurationView.byId('target_application_id').setVisible(true);
        oConfigurationView.byId('target_application_idInput').setVisible(true);
    };
}());

}; // end of sap/ushell/components/tiles/utils.js
if ( !jQuery.sap.isDeclared('sap.ushell.functionBindPrototype') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview This file adds the missing Function.bind function for Webkit browsers.
 */

(function () {
    "use strict";
    /*global jQuery, sap */

    // ensure that sap.ushell exists
    jQuery.sap.declare("sap.ushell.functionBindPrototype");

    if (!Function.prototype.bind) {
        Function.prototype.bind = function(oThis) {
            if (typeof this !== "function") {
                // closest thing possible to the ECMAScript 5 internal IsCallable function
                throw new TypeError(
                        "Function.prototype.bind - what is trying to be bound is not callable");
            }

            var aArgs = Array.prototype.slice.call(arguments, 1), fToBind = this, fNOP = function() {
            }, fBound = function() {
                return fToBind.apply(this instanceof fNOP && oThis ? this
                        : oThis, aArgs.concat(Array.prototype.slice
                        .call(arguments)));
            };

            fNOP.prototype = this.prototype;
            fBound.prototype = new fNOP();

            return fBound;
        };
    }
}());

}; // end of sap/ushell/functionBindPrototype.js
if ( !jQuery.sap.isDeclared('sap.ushell.iconfonts') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview This file contains the functionality needed to register
 * the Fiori Wave 2 font icons
 */

(function () {
    "use strict";
    /*global jQuery, sap, setTimeout */

    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


    jQuery.sap.declare("sap.ushell.iconfonts");
    sap.ushell.iconfonts = {};

    /*
     * loads SAP Fiori Wave 2 launch icon font and font icons that are needed in
     * launchpad UI itself
     */
    sap.ushell.iconfonts.registerFiori2IconFont = function () {
        // the lists of icons as [name, unicode code point] tuples
        // ... for Launchpad UI
        var oLaunchpadIcons = {
                fontFamily: "BusinessSuiteInAppSymbols",
                collectionName: "BusinessSuiteInAppSymbols",
                icons : [
                    ["icon-heart", "E000"], ["icon-quarter", "E001"], ["icon-year", "E002"],
                    ["icon-equalizer", "E003"], ["icon-component", "E004"], ["icon-component-private", "E005"],
                    ["icon-raw-material", "E006"], ["icon-sms", "E007"], ["icon-add-note", "E008"],
                    ["icon-change-time-horizon", "E009"], ["icon-table-chart-customization", "E00a"], ["icon-delegated-important-task", "E00b"],
                    ["icon-forklift", "E00c"], ["icon-coins", "E00d"], ["icon-filter-menu", "E00e"],
                    ["icon-target-to-date", "E00f"], ["icon-program", "E010"], ["icon-phase", "E011"],
                    ["icon-checklist", "E012"], ["icon-mirrored-task", "E013"], ["icon-sub-project", "E014"],
                    ["icon-checklist-item", "E015"], ["icon-adhoc-analysis", "E016"], ["icon-change-analysis", "E017"],
                    ["icon-review-demands", "E018"], ["icon-project-definition", "E019"], ["icon-data-access", "E01a"],
                    ["icon-define-shortage", "E01b"], ["icon-review-supplies", "E01c"], ["icon-change-log", "E01d"],
                    ["icon-priority-1", "E01e"], ["icon-priority-2", "E01f"], ["icon-jam", "E020"], ["icon-milestone", "E021"],
                    ["icon-bulleting-with-numbers", "E022"], ["icon-decrease-indent", "E023"], ["icon-increase-indent", "E024"],
                    ["icon-bold", "E025"],  ["icon-italic", "E026"], ["icon-strike-through", "E027"], ["icon-underline", "E028"],
                    ["icon-save-as", "E029"], ["icon-segmentation", "E02A"], ["icon-context-menu", "E02B"], ["icon-snapshot", "E02C"],
                    ["icon-substraction-b-a", "E02D"], ["icon-substraction-a-b", "E02E"], ["icon-intersection", "E02F"],
                    ["icon-union", "E030"], ["icon-top", "E031"], ["icon-bottom", "E032"],
                    ["icon-page-up", "E033"], ["icon-page-down", "E034"], ["icon-create-dashboard", "E035"],
                    ["icon-excelsius-file", "E036"], ["icon-open-folder", "E037"], ["icon-neutral", "E038"],
                    ["icon-split-segmentation", "E039"], ["icon-manage-budget", "E03A"], ["icon-blocked", "E03B"],
                    ["icon-pipette", "E03C"], ["icon-top-recipe", "E03D"], ["icon-recipe", "E03E"],
                    ["icon-ingredients", "E03F"], ["icon-multiple-charts", "E040"], ["icon-descending-bars", "E041"],
                    ["icon-descending-stacked-bars", "E042"], ["icon-scatter-plot", "E043"], ["icon-spill", "E044"],
                    ["icon-fire", "E045"], ["icon-stratification", "E046"], ["icon-relationship", "E047"],
                    ["icon-margin-decomposition", "E048"], ["icon-control-group", "E049"], ["icon-bullet-chart", "E04A"],
                    ["icon-responsible-area", "E04B"], ["icon-increase", "E04C"], ["icon-decrease", "E04D"],
                    ["icon-current-stock", "E04E"], ["icon-expedite", "E04F"], ["icon-postpone", "E050"],
                    ["icon-approved", "E051"], ["icon-partially-delivered", "E052"], ["icon-line-bar-chart", "E053"],
                    ["icon-expand-all", "E054"], ["icon-submission", "E055"], ["icon-change-request", "E056"],
                    ["icon-column-unselected", "E057"], ["icon-column-selected", "E058"], ["icon-row-unselected", "E059"],
                    ["icon-row-selected", "E05A"], ["icon-stock-requirements", "E05B"], ["icon-gender-male-and-female", "E05C"],
                    ["icon-icon-marital-status", "E05D"], ["icon-birthday", "E05E"], ["icon-classification", "E05F"],
                    ["icon-marked-for-deletion", "E060"], ["icon-bullet-chart", "E061"], ["icon-remove-filter", "E062"], ["icon-bank-account", "E063"],
                    ["icon-savings-account", "E064"], ["icon-debit-card", "E065"], ["icon-vip-customer", "E066"], ["icon-undesirable-customer", "E067"],
                    ["icon-answered-change-request", "E068"], ["icon-collected-change-request", "E069"], ["icon-draw-freehand", "E06A"],
                    ["icon-draw-circle", "E06B"], ["icon-completed", "E06C"], ["icon-answered", "E06D"], ["icon-traffic-cone", "E06E"],
                    ["icon-traffic-lights", "E06F"], ["icon-container", "E070"], ["icon-container-loading", "E071"], ["icon-traffic-jam", "E072"],
                    ["icon-products", "E073"], ["icon-sidepanel", "E074"], ["icon-split-screen", "E075"], ["icon-truck-driver", "E076"],
                    ["icon-keep-segment", "E077"], ["icon-exclude-segment", "E078"], ["icon-separate-segments", "E079"], ["icon-distribute-segments", "E07A"],
                    ["icon-next-open-item", "E07B"], ["icon-where-used", "E07C"]
                ]
            },
            // old Fiori1 app icons
            oFiori1Icons = {
                fontFamily: "SAP-Icons",
                collectionName: "Fiori2",
                icons: [
                    ["F0017", "e05e"], ["F0018", "e0c3"], ["F0019", "e0c3"], ["F0020", "e0c3"],
                    ["F0021", "e10d"], ["F0366", "e129"], ["F0392", "e04f"], ["F0394", "e044"],
                    ["F0395", "e132"], ["F0396", "e064"], ["F0397", "e0a4"], ["F0398", "e0a4"],
                    ["F0399", "e044"], ["F0401", "e08d"], ["F0402", "e13e"], ["F0403", "e13e"],
                    ["F0404", "e033"], ["F0405", "e0b3"], ["F0406", "e043"], ["F0407", "e043"],
                    ["F0408", "e043"], ["F0409", "e075"], ["F0410", "e007"], ["F0411", "e075"]
                ]
            },
            // Fiori3 app icons
            oFiori3Icons = {
                fontFamily: "Fiori2",
                collectionName: "Fiori3",
                icons : [
                    ["F0246", "E218"], ["F0247", "E219"], ["F0250", "E21C"], ["F0251", "E21D"],
                    ["F0263", "E2A8"], ["F0508", "E2A9"], ["F0509", "E2AA"], ["F0510", "E2AB"],
                    ["F0533", "E2AC"], ["F0534", "E2AD"], ["F0535", "E2AE"], ["F0536", "E2AF"],
                    ["F0537", "E2B0"], ["F0538", "E2B1"], ["Lumira001", "E2B2"]
                ]
            },
            // Fiori2 app icons
            oAppIcons = {
                fontFamily: "Fiori2",
                collectionName: "Fiori2",
                icons : [
                    // transaction app icons
                    ["F0002", "E236"], ["F0003", "E202"], ["F0004", "E203"], ["F0005", "E204"],
                    ["F0006", "E205"], ["F0009", "E206"], ["F0010", "E207"], ["F0012", "E208"],
                    ["F0014", "E209"], ["F0018", "E200"], ["F0019", "E201"], ["F0023", "E20A"],
                    ["F0024", "E20B"], ["F0025", "E20C"], ["F0026", "E20D"], ["F0072", "E23A"],
                    ["F0100", "E23B"], ["F0101", "E23C"], ["F0102", "E23D"], ["F0106", "E20F"],
                    ["F0144", "E210"], ["F0190", "E23E"], ["F0194", "E23F"], ["F0210", "E242"],
                    ["F0211", "E243"], ["F0212", "E244"], ["F0217", "E211"], ["F0220", "E213"],
                    ["F0243", "E215"], ["F0244", "E216"], ["F0245", "E217"], ["F0246", "E218"],
                    ["F0247", "E219"], ["F0250", "E21C"], ["F0251", "E21D"], ["F0248", "E21A"],
                    ["F0249", "E21B"], ["F0252", "E21E"], ["F0257", "E21F"], ["F0281", "E220"],
                    ["F0282", "E221"], ["F0283", "E222"], ["F0284", "E223"], ["F0292", "E224"],
                    ["F0295", "E225"], ["F0296", "E226"], ["F0316", "E227"], ["F0317", "E228"],
                    ["F0321", "E229"], ["F0339", "E22A"], ["F0340", "E22B"], ["F0341", "E22C"],
                    ["F0342", "E22D"], ["F0365", "E212"], ["F0366", "E22F"], ["F0367", "E230"],
                    ["F0368", "E231"], ["F0369", "E235"], ["F0370", "E22E"], ["F0372", "E232"],
                    ["F0380", "E233"], ["F0381", "E234"], ["F0382", "E246"], ["F0390", "E20E"],
                    ["F0412", "E213"], ["F0429", "E2A6"], ["F0xx1", "E240"], ["F0xx2", "E241"],

                    // analytic app icons
                    ["F0013", "E237"], ["F0016", "E238"], ["F0028", "E239"], ["F0029", "E283"],
                    ["F0030", "E284"], ["F0031", "E285"], ["F0032", "E286"], ["F0033", "E287"],
                    ["F0034", "E288"], ["F0036", "E289"], ["F0038", "E28A"], ["F0039", "E28B"],
                    ["F0041", "E28C"], ["F0044", "E28D"], ["F0293", "E28E"], ["F0294", "E28F"],
                    ["F0297", "E290"], ["F0298", "E291"], ["F0299", "E292"], ["F0300", "E293"],
                    ["F0301", "E294"], ["F0302", "E295"], ["F0303", "E296"], ["F0304", "E297"],
                    ["F0305", "E298"], ["F0306", "E299"], ["F0323", "E29A"], ["F0324", "E29B"],
                    ["F0326", "E29C"], ["F0327", "E29D"], ["F0328", "E29E"], ["F0329", "E29F"],
                    ["F0331", "E2A1"], ["F0332", "E2A2"], ["F0343", "E2A3"], ["F0344", "E2A4"],
                    ["F0345", "E2A5"], ["F0388", "E2A7"], ["F0391", "E2A0"], ["F0260", "E2B4"],
                    ["FD10N", "E2B5"], ["FK10N", "E2B6"], ["FS10N", "E2B7"], ["FBL5N", "E2B8"],
                    ["FBL1N", "E2B9"], ["FFS01", "E2BA"], ["FBL3N", "E2BB"], ["FCOA1", "E2BC"]
                ]
            },
            //Fiori4 app icons
            oFiori4Icons = {
                fontFamily: "Fiori2",
                collectionName: "Fiori4",
                icons : [
                    ["F0194", "E2BD"], ["F0260", "E2B4"], ["F0433", "E21C"], ["F0251", "E2BE"],
                    ["F0499", "E2BF"], ["F0500", "E2C0"], ["F0501", "E2C1"], ["F0502", "E2C2"],
                    ["F0503", "E2C3"], ["F0504", "E2C4"], ["F0507", "E2C5"], ["F0530", "E2C6"],
                    ["F0531", "E2C7"], ["F0539", "E2C8"], ["F0544", "E2C9"], ["F0545", "E2CA"],
                    ["F0547", "E2CB"], ["F0576", "E2CC"], ["F0578", "E2CD"], ["F0579", "E2CE"],
                    ["F0580", "E2CF"], ["F0581", "E2D0"], ["F0582", "E2D1"], ["F0583", "E2D2"],
                    ["F0584", "E2D3"], ["F0586", "E2D4"], ["F0587", "E2D5"], ["F0588", "E2D6"],
                    ["F0589", "E2D7"], ["F0590", "E2D8"], ["F0591", "E2D9"], ["F0593", "E2DA"],
                    ["F0594", "E2DB"], ["F0597", "E2DC"], ["F0603", "E2DD"], ["F0604", "E2DE"],
                    ["F0605", "E2DF"], ["F0606", "E2E0"], ["F0607", "E2E1"], ["F0608", "E2E2"],
                    ["F0609", "E2E3"], ["F0615", "E2E4"], ["F0616", "E2E5"], ["F0618", "E2E6"],
                    ["F0617", "E2E7"], ["F0622", "E2E8"], ["F0623", "E2E9"], ["F0624", "E2BC"],
                    ["F0625", "E2EB"], ["F0626", "E2EC"], ["F0627", "E2ED"], ["F0629", "E2EE"],
                    ["F0630", "E2EF"], ["F0632", "E2F0"], ["F0633", "E2F1"], ["F0634", "E2F2"],
                    ["F0635", "E2F3"], ["F0636", "E2F4"], ["F0638", "E2F5"], ["F0639", "E2F6"],
                    ["F0643", "E2F7"], ["F0644", "E2F8"], ["F0645", "E2F9"], ["F0646", "E2FA"],
                    ["F0648", "E2FB"], ["F0649", "E2FC"], ["F0650", "E2FD"], ["F0654", "E2FE"],
                    ["F0655", "E2FF"], ["F0659", "E300"], ["F0660", "E301"], ["F0661", "E302"],
                    ["F0665", "E303"], ["F0666", "E304"], ["F0667", "E305"], ["F0671", "E306"],
                    ["F0672", "E307"], ["F0673", "E308"], ["F0675", "E309"], ["F0676", "E30A"],
                    ["F0677", "E30B"], ["F0678", "E30C"], ["F0679", "E30D"], ["F0680", "E30E"],
                    ["F0682", "E30F"], ["F0683", "E310"], ["F0684", "E240"], ["F0685", "E312"],
                    ["F0686", "E313"], ["F0687", "E314"], ["F0690", "E315"], ["F0691", "E316"],
                    ["F0692", "E317"], ["F0693", "E318"], ["F0694", "E319"], ["F0695", "E31A"],
                    ["F0700", "E31B"], ["F0598", "E31C"], ["F0600", "E38A"]
                ]
            },
            //Wave5 Fiori app icons
            oFiori5Icons = {
                fontFamily: "Fiori2",
                collectionName: "Fiori5",
                icons : [
                    ["F0263", "E321"], ["F0266", "E322"], ["F0834", "E31D"], ["F2001", "E31E"],
                    ["F0839", "E320"], ["F0270", "E323"], ["F0273", "E324"], ["F0439", "E325"],
                    ["F0443", "E326"], ["F0549", "E327"], ["F0550", "E328"], ["F0551", "E329"],
                    ["F0577", "E32A"], ["F0585", "E32B"], ["F0637", "E32C"], ["F0668", "E32D"],
                    ["F0669", "E32E"], ["F0670", "E330"], ["F0688", "E331"], ["F0689", "E332"],
                    ["F0701", "E333"], ["F0702", "E334"], ["F0703", "E335"], ["F0706", "E336"],
                    ["F0707", "E337"], ["F0708", "E338"], ["F0711", "E339"], ["F0712", "E33A"],
                    ["F0731", "E33B"], ["F0732", "E33C"], ["F0733", "E33D"], ["F0735", "E33E"],
                    ["F0736", "E340"], ["F0737", "E341"], ["F0742", "E342"], ["F0743", "E343"],
                    ["F0744", "E344"], ["F0745", "E345"], ["F0746", "E346"], ["F0747", "E347"],
                    ["F0748", "E348"], ["F0749", "E349"], ["F0750", "E34A"], ["F0751", "E34B"],
                    ["F0755", "E34C"], ["F0756", "E34D"], ["F0757", "E34E"], ["F0758", "E350"],
                    ["F0759", "E351"], ["F0760", "E352"], ["F0761", "E353"], ["F0763", "E354"],
                    ["F0764", "E355"], ["F0765", "E356"], ["F0768", "E357"], ["F0770", "E358"],
                    ["F0771", "E359"], ["F0772", "E35A"], ["F0774", "E35B"], ["F0776", "E35C"],
                    ["F0777", "E35D"], ["F0778", "E35E"], ["F0788", "E360"], ["F0789", "E361"],
                    ["F0790", "E362"], ["F0791", "E363"], ["F0792", "E364"], ["F0793", "E365"],
                    ["F0794", "E366"], ["F0806", "E367"], ["F0807", "E368"], ["F0808", "E369"],
                    ["F0809", "E36A"], ["F0810", "E36B"], ["F0811", "E36C"], ["F0812", "E36D"],
                    ["F0813", "E36E"], ["F0814", "E370"], ["F0815", "E371"], ["F0816", "E372"],
                    ["F0817", "E373"], ["F0818", "E374"], ["F0819", "E375"], ["F0820", "E376"],
                    ["F0821", "E377"], ["F0822", "E378"], ["F0823", "E379"], ["F0824", "E37A"],
                    ["F0825", "E37B"], ["F0826", "E37C"], ["F0827", "E37D"], ["F0828", "E37E"],
                    ["F0829", "E380"], ["F0830", "E381"], ["F0831", "E382"], ["F0717", "E383"],
                    ["F0718", "E384"], ["F0241", "E385"], ["F0246", "E386"], ["F0250", "E387"],
                    ["F0248", "E388"], ["F0252", "E389"], ["F0600", "E38A"], ["F0674", "E38B"],
                    ["F0247", "E38E"], ["F0251", "E390"]
                ]
            },

            oFiori6Icons = {
                fontFamily: "Fiori2",
                collectionName: "Fiori6",
                icons : [
                    ["F0795", "E397"], ["F0866", "E3A0"], ["F0865", "E3A1"], ["F0867", "E3A2"],
                    ["F0868", "E3A3"], ["F0869", "E3A4"], ["F0870", "E3A5"], ["F0138", "E3A6"],
                    ["F0752", "E3A7"], ["F0753", "E3A8"], ["F0773", "E3A9"], ["F0891", "E3AA"],
                    ["F0892", "E3AB"], ["F1023", "E3AC"]
                ]
            },

            oFioriInApp = {
                fontFamily: "FioriInAppIcons",
                collectionName: "FioriInAppIcons",
                icons : [
                    ["Hierarchal Tree", "E700"], ["Open", "E701"], ["Blocked", "E702"],
                    ["Partially Blocked", "E703"], ["Open1", "E704"], ["Partially Adopted", "E705"],
                    ["Due", "E706"], ["Overdue", "E707"], ["Missing Parts", "E708"],
                    ["Fire", "E709"], ["Dangerous Chemicals", "E70A"]
                ]
            },
            oFioriNonNative = {
                fontFamily: "Fiori2",
                collectionName: "FioriNonNative",
                icons : [
                    ["FN0001", "E392"], ["FN0002", "E398"], ["FN0003", "E399"], ["FN0004", "E39A"],
                    ["FN0005", "E39B"], ["FN0006", "E39C"], ["FN0007", "E39D"], ["FN0008", "E39E"],
                    ["FN0009", "E39F"]
                ]
            };

        this.registerFonts(oFiori1Icons,  oFiori3Icons, oAppIcons, oLaunchpadIcons, oFioriInApp, oFiori4Icons, oFiori5Icons, oFioriNonNative, oFiori6Icons);
    };

    /*
     * loads icon font characters
     *
     * call like <code>sap.ushell.iconfonts.registerFonts(oFontIcons1, oFontIcons2, ...);</code>
     *
     * @param {object} an object with icon font definition (see below). Note that the icon font has
     *          to be registered in CSS before (via @font-face).
     *          <code>
     *          var oIcon = {
     *              fontFamily: "FontFamilyName",   // from @font-face definition in CSS
     *              collectionName: "collection",   // IconPool collection name, e.g. 'Fiori2'
     *              icons : [["icon-name", "E001], [...], ...]  // list of tuples containing ("icon name", "unicode code point") tuples
     *          }
     *          </code>
     *
     * @private
     */
    sap.ushell.iconfonts.registerFonts = function () {
        var oIcon,
            i,
            j;
        for (i = 0; i < arguments.length; i = i + 1) {
            oIcon = arguments[i];
            for (j = 0; j < oIcon.icons.length; j = j + 1) {
                sap.ui.core.IconPool.addIcon(oIcon.icons[j][0], oIcon.collectionName, oIcon.fontFamily, oIcon.icons[j][1], false, true);
            }
        }
    };

}());
}; // end of sap/ushell/iconfonts.js
if ( !jQuery.sap.isDeclared('sap.ushell.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.ushell (1.24.5)
 */
jQuery.sap.declare("sap.ushell.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAP library: sap.ushell
 *
 * @namespace
 * @name sap.ushell
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.library'); // unlisted dependency retained

jQuery.sap.require('sap.m.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.ushell",
  dependencies : ["sap.ui.core","sap.ui.layout","sap.m"],
  types: [
    "sap.ushell.ui.launchpad.DeleteAreaType",
    "sap.ushell.ui.tile.State",
    "sap.ushell.ui.tile.StateArrow"
  ],
  interfaces: [],
  controls: [
    "sap.ushell.components.factsheet.controls.PictureTile",
    "sap.ushell.components.factsheet.controls.PictureViewer",
    "sap.ushell.components.factsheet.controls.PictureViewerItem",
    "sap.ushell.ui.footerbar.AboutButton",
    "sap.ushell.ui.footerbar.AddBookmarkButton",
    "sap.ushell.ui.footerbar.ContactSupportButton",
    "sap.ushell.ui.footerbar.HideGroupsButton",
    "sap.ushell.ui.footerbar.JamDiscussButton",
    "sap.ushell.ui.footerbar.JamShareButton",
    "sap.ushell.ui.footerbar.LoginDetailsButton",
    "sap.ushell.ui.footerbar.LogoutButton",
    "sap.ushell.ui.footerbar.SettingsButton",
    "sap.ushell.ui.launchpad.CatalogListItem",
    "sap.ushell.ui.launchpad.DashboardGroupsContainer",
    "sap.ushell.ui.launchpad.DeleteArea",
    "sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage",
    "sap.ushell.ui.launchpad.GroupListItem",
    "sap.ushell.ui.launchpad.HeaderTile",
    "sap.ushell.ui.launchpad.LoadingDialog",
    "sap.ushell.ui.launchpad.Panel",
    "sap.ushell.ui.launchpad.PlusTile",
    "sap.ushell.ui.launchpad.SearchResultAppItem",
    "sap.ushell.ui.launchpad.SearchResultApps",
    "sap.ushell.ui.launchpad.SearchSuggestionList",
    "sap.ushell.ui.launchpad.SearchSuggestionListItem",
    "sap.ushell.ui.launchpad.Tile",
    "sap.ushell.ui.launchpad.TileContainer",
    "sap.ushell.ui.launchpad.TileState",
    "sap.ushell.ui.tile.DynamicTile",
    "sap.ushell.ui.tile.ImageTile",
    "sap.ushell.ui.tile.StaticTile",
    "sap.ushell.ui.tile.TileBase"
  ],
  elements: [],
  version: "1.24.5"});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ushell.ui.launchpad.DeleteAreaType.
jQuery.sap.declare("sap.ushell.ui.launchpad.DeleteAreaType");


/**
 * @class ...
 * @private
 *
 * @version 1.24.5
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ushell.ui.launchpad.DeleteAreaType = {

	/**
	 * ...
	 * @public
	 */
	Dashboard : "Dashboard",

	/**
	 * ...
	 * @public
	 */
	GroupList : "GroupList"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ushell.ui.tile.State.
jQuery.sap.declare("sap.ushell.ui.tile.State");


/**
 * @class Denotes states for control parts and translates into standard SAP color codes
 *
 * @version 1.24.5
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ushell.ui.tile.State = {

	/**
	 * Alias for "None"
	 * @public
	 */
	Neutral : "Neutral",

	/**
	 * Indicates a state that is neutral, e.g. for standard display (Grey color)
	 * @public
	 */
	None : "None",

	/**
	 * Alias for "Error"
	 * @public
	 */
	Negative : "Negative",

	/**
	 * Indicates a state that is negative, e.g. marking an element that has to get attention urgently or indicates negative values (Red color)
	 * @public
	 */
	Error : "Error",

	/**
	 * Alias for "Success"
	 * @public
	 */
	Positive : "Positive",

	/**
	 * Indicates a state that is positive, e.g. marking a task successfully executed or a state where all is good (Green color)
	 * @public
	 */
	Success : "Success",

	/**
	 * Alias for "Warning"
	 * @public
	 */
	Critical : "Critical",

	/**
	 * Indicates a state that is critical, e.g. marking an element that needs attention (Orange color)
	 * @public
	 */
	Warning : "Warning"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ushell.ui.tile.StateArrow.
jQuery.sap.declare("sap.ushell.ui.tile.StateArrow");


/**
 * @class The state of an arrow as trend direction indicator, pointing either up or down
 * @private
 *
 * @version 1.24.5
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ushell.ui.tile.StateArrow = {

	/**
	 * The trend direction indicator is invisible
	 * @public
	 */
	None : "None",

	/**
	 * The trend direction indicator points up
	 * @public
	 */
	Up : "Up",

	/**
	 * The trend direction indicator points down
	 * @public
	 */
	Down : "Down"

};

// -----------------------------------------------------------------------------
// Begin of Library Initialization coding, copied from shared.js
// -----------------------------------------------------------------------------

// shared.js is automatically appended to library.js
//
// hiding (generated) types that are marked as @public by default
/**
 * @name sap.ushell.ui.tile.StateArrow
 * @private
 */
/**
 * @name sap.ushell.ui.tile.State
 * @private
 */
/**
 * @name sap.ushell.ui.launchpad.DeleteAreaType
 * @private
 */
}; // end of sap/ushell/library.js
if ( !jQuery.sap.isDeclared('sap.ushell.override') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview This file contains miscellaneous functions which may be used
 * to override/replace existing SAPUI5 methods.
 */

(function () {
    "use strict";
    /*global jQuery, sap, setTimeout */

    // ensure that sap.ushell exists
    jQuery.sap.declare("sap.ushell.override");

    sap.ushell.override = {};

    /**
     * Override sap.ui.base.ManagedObject.updateAggregation
     *
     * This is a generic drop-in replacement. It avoids the destroy items call.
     * Instead, the bindings of existing items are updated.
     *
     * Note: Listbindings with grouping and Treebindings are not supported. In
     * these cases, the default method is still invoked.
     */
    sap.ushell.override.updateAggregation = function (sName) {
        if (this.isTreeBinding(sName)) {
            // no idea how to handle -> delegate to parent
            sap.ui.base.ManagedObject.prototype.updateAggregation.apply(this, arguments);
        } else {
            var oBindingInfo = this.mBindingInfos[sName],
                oBinding = oBindingInfo.binding,
                aBindingContexts = oBinding.getContexts(),
                fnFactory = oBindingInfo.factory,
                oAggregationInfo = this.getMetadata().getJSONKeys()[sName],  // TODO fix handling of hidden aggregations

                sGroupFunction = oAggregationInfo._sMutator + "Group",
                bGrouped = oBinding.isGrouped() && this[sGroupFunction],

                i = 0,
                aItems = [],
                addNewItem = $.proxy(function (oContext) {
                    var sId = this.getId() + "-" + jQuery.sap.uid(),
                        oClone = fnFactory(sId, oContext);
                    oClone.setBindingContext(oContext, oBindingInfo.model);
                    this[oAggregationInfo._sMutator](oClone);
                }, this);

            if (bGrouped) {
               // do not handle grouped aggregations -> delegate to parent
                sap.ui.base.ManagedObject.prototype.updateAggregation.apply(this, arguments);
            } else {
                aItems = this[oAggregationInfo._sGetter](); // get all items

                // Bind as many context as possible to existing elements. Create new ones if necessary.
                for (i = 0; i < aBindingContexts.length; ++i) {
                    if (i < aItems.length) {
                        aItems[i].setBindingContext(aBindingContexts[i], oBindingInfo.model);
                    } else {
                        addNewItem(aBindingContexts[i]);
                    }
                }

                // Delete unused elements.
                for (; i < aItems.length; ++i) {
                    aItems[i].destroy();
                }

                // Update the array length.
                aItems.length = aBindingContexts.length;
            }
        }
    };

    /**
     * Override sap.ui.base.ManagedObject.updateAggregation
     *
     * This is a generic drop-in replacement. It avoids the destroy items call.
     * Instead, the bindings of existing items are updated. Enables grouping!
     *
     * Note: Treebindings are not supported. In
     * these cases, the default method is still invoked.
     */
    sap.ushell.override.updateAggregationGrouped = function (sName) {
        var oBindingInfo = this.mBindingInfos[sName],
            oBinding = oBindingInfo.binding,
            fnFactory = oBindingInfo.factory,
            oAggregationInfo = this.getMetadata().getJSONKeys()[sName],  // TODO fix handling of hidden aggregations
            oClone,
            oNewGroup = null,
            bGrouped = null,
            sGroup = null,
            that = this,
            aItems = that.getItems(),
            iLastIndex = 0,
            iListIndex = 0,
            i,
            sId,
            aToBeDestroyed = [];

        bGrouped = oBinding.isGrouped() && this.addItemGroup;
        jQuery.each(oBinding.getContexts(), function (iIndex, oContext) {
            if (bGrouped && oBinding.aSorters.length > 0) {
                oNewGroup = oBinding.aSorters[0].fnGroup(oContext);
                if (typeof oNewGroup === "string") {
                    oNewGroup = {
                        key: oNewGroup
                    };
                }
                if (oNewGroup.key !== sGroup) {
                    var oGroupHeader,
                        oHeader;
                    //If factory is defined use it
                    if (oBindingInfo.groupHeaderFactory) {
                        oGroupHeader = oBindingInfo.groupHeaderFactory(oNewGroup);
                    }
                    oHeader = oGroupHeader || new sap.m.GroupHeaderListItem({
                        title: oNewGroup.text || oNewGroup.key
                    }).addStyleClass("sapMListHdr");

                    that.insertAggregation("items", oHeader, iListIndex, true);
                    iListIndex = iListIndex + 1;
                    sGroup = oNewGroup.key;
                }
            }
            aItems = that.getItems();
            for (i = iListIndex; i < aItems.length; i = i + 1) {
                if (aItems[i].constructor === sap.m.GroupHeaderListItem) {
                    aToBeDestroyed.push(that.removeItem(aItems[i]));
                    aItems = that.getItems();
                }
            }
            if (iListIndex < aItems.length) {
                aItems[iListIndex].setBindingContext(oContext, oBindingInfo.model);
                if (aItems[iListIndex].aDelegates) {
                    jQuery.each(aItems[iListIndex].aDelegates, function (i, v) {
                        v.vThis = oContext;
                    });
                }
            } else {
                sId = that.getId() + "-" + iListIndex;
                oClone = fnFactory(sId, oContext);
                oClone.setBindingContext(oContext, oBindingInfo.model);
                that.addItem(oClone);
            }
            iListIndex = iListIndex + 1;
            iLastIndex = iListIndex;
        });

        for (i = aItems.length - 1; i >= iLastIndex; i = i - 1) {
            aToBeDestroyed.push(that.removeItem(aItems[i]));
        }

        setTimeout(function () {
            jQuery.each(aToBeDestroyed, function (i, v) {
                v.destroy();
            });
        }, 1);
    };

    /**
     * A convenience factory method to create "sap.ushell.override.updateAggregation()" already bound to a name.
     *
     * @param {string} sName
     *     the name of the aggregation
     */
    sap.ushell.override.updateAggregatesFactory = function (sName) {
        return function() {
            $.proxy(sap.ushell.override.updateAggregation, this, sName)();
        };
    };
}());

}; // end of sap/ushell/override.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.AccessKeysHandler') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.renderers.fiori2.AccessKeysHandler");

    var accessKeysHandler = function () {
        this.init();
    };

    accessKeysHandler.prototype = {
        keyCodes: jQuery.sap.KeyCodes,

        activateFlag: true,

        activateAccessibilityKeys: function (flag) {
            if (this.activateFlag === !!flag) {
                return;
            }
            this.activateFlag = !!flag;
            if (this.activateFlag) {
                this.init();
            } else {
                jQuery("body").off('keyup.accessKeysHandler');
            }
        },

        handleCatalogKey: function () {
            sap.ushell.renderers.fiori2.Navigation.openCatalogByHash({
                groupContext: null
            });
            jQuery("#configBtn").focus();
        },

        handleHomepageKey: function () {
            var oMainShell = sap.ui.getCore().byId("mainShell"),
                shellController = oMainShell.getController();
            shellController.navigateToHome();
            jQuery("#homeBtn").focus();
        },

        handleSearchKey: function () {
            var searchField = sap.ui.getCore().byId('sf');
            var jqSearchField = jQuery(searchField.getDomRef());
            jqSearchField.click();

        },

        handleUserMenuKey: function () {
            var loginDetailsButton = sap.ui.getCore().byId('loginDetails');
            if (!loginDetailsButton){
                jQuery.sap.require('sap.ushell.ui.footerbar.LoginDetailsButton');
                loginDetailsButton = new sap.ushell.ui.footerbar.LoginDetailsButton();
            }
            loginDetailsButton.showLoginDetailsDialog();
        },

        handleAccessOverviewKey: function () {
            var translationBundle = sap.ushell.resources.i18n,
                oSimpleForm = new sap.ui.layout.form.SimpleForm({
                    editable: false,
                    content: [
                        new sap.m.Label({text: "Alt+C"}),
                        new sap.m.Text({text: translationBundle.getText("actionCatalog")}),

                        new sap.m.Label({text: "Alt+H"}),
                        new sap.m.Text({text: translationBundle.getText("actionHomePage") }),

                        new sap.m.Label({text: "Alt+S"}),
                        new sap.m.Text({text: translationBundle.getText("actionSearch") }),

                        new sap.m.Label({text: "Alt+U"}),
                        new sap.m.Text({text: translationBundle.getText("actionLoginDetails") })

                    ]
                }),
                oDialog,
                okButton = new sap.m.Button({
                    text: translationBundle.getText("okBtn"),
                    press: function () {
                        oDialog.close();
                    }
                });

            oDialog = new sap.m.Dialog({
                id: "hotKeysGlossary",
                title: translationBundle.getText("hotKeysGlossary"),
                contentWidth: "300px",
                leftButton: okButton,
                afterClose: function () {
                    oDialog.destroy();
                }
            });

            oDialog.addContent(oSimpleForm);
            oDialog.open();
        },

        getNumberOfTileInRow: function (fromCatalog) {
            var jqTile = jQuery(".sapUshellTile:first");
            if (!jqTile.length) return false;
            var core = sap.ui.getCore();
            var tile = core.byId(jqTile.attr('id'));
            var tileFatSize = (tile.getLong() == true) ? 2 : 1;
            var contentWidth;
            if (!fromCatalog){
                contentWidth = jQuery("#dashboardGroups").width();
            } else {
                contentWidth = jQuery("#catalogTiles").width();
            }
            var tileWidth = jqTile.outerWidth(true) / tileFatSize;
            var numberTilesInRow =  Math.floor(contentWidth / tileWidth);
            return numberTilesInRow;
        },

        goToEdgeTile: function (selector) {
            var tileToSelect = jQuery(".sapUshellTile:visible")[selector]();
            if (!tileToSelect.length) {
                return false;
            }
            this.setTileFocus(tileToSelect);
            return true;
        },

        goToFirstTileOfSiblingGroup: function (selector,e) {
            e.preventDefault();
            var currentGroup = jQuery(":focus").closest(".sapUshellDashboardGroupsContainerItem");
            if (!currentGroup.length) return;
            var nextGroup = currentGroup[selector](".sapUshellDashboardGroupsContainerItem:not(.sapUshellCloneArea)");
            var tileSelector = 'first';
            if (!nextGroup.length) {
                if (!(selector == "next")) return;
                nextGroup = currentGroup;
                tileSelector = 'last';
            }
            var jqTileToSelect = nextGroup.find(".sapUshellTile")[tileSelector]();
            this.setTileFocus(jqTileToSelect);
            this.moveScrollDashboard(jqTileToSelect);
            return false;
        },

        goToFirstTileOfSiblingGroupInCatalog: function (selector,e) {
            e.preventDefault();
           // var currentGroup = new Array();
            var jqTileContainer = this.getFocusOnTile(jQuery(":focus"));
            if (!jqTileContainer) return;

            var jqTileToFocus;

            if (selector == "next") {
                var isLastGroup = jqTileContainer.nextAll("h3").length ? false : true;
                if (!isLastGroup) {
                    jqTileToFocus = jqTileContainer.nextAll("h3").first().next();
                } else {
                    jqTileToFocus = jqTileContainer.nextAll(".sapUshellTile").last();
                }
            } else {
                var isFirstGroup = jqTileContainer.prevAll("h3").length == 1 ? true : false;
                if (!isFirstGroup) {
                    jqTileToFocus = jQuery(jqTileContainer.prevAll("h3")[1]).next();
                } else {
                    jqTileToFocus = jqTileContainer.prevAll("h3").last().next();
                }
            }

            this.setTileFocus(jqTileToFocus);
            this.moveScrollCatalog(jqTileToFocus);

            return false;
        },

        swapTwoTilesInGroup: function (group, firstTile, secondTile) {
            var groupModelObj = group.getBindingContext().getObject();
            var firstTileIndex = groupModelObj.tiles.indexOf(firstTile.getBindingContext().getObject());
            var secondTileIndex = groupModelObj.tiles.indexOf(secondTile.getBindingContext().getObject());
            var firstTileModelObj =  groupModelObj.tiles.splice(firstTileIndex, 1, null);
            var secondTileModelObj = groupModelObj.tiles.splice(secondTileIndex, 1, firstTileModelObj[0]);
            groupModelObj.tiles.splice(firstTileIndex, 1, secondTileModelObj[0]);
            var groupPath = group.getBindingContext().getPath();
            group.getModel().setProperty(groupPath, groupModelObj);
        },

        moveTileInGroup: function (group, firstTile, secondTile) {
            if (sap.ui.getCore().byId("shell").getModel().getProperty("/personalization")) {
                var groupModelObj = group.getBindingContext().getObject();
                var firstTileIndex = groupModelObj.tiles.indexOf(firstTile.getBindingContext().getObject());
                var secondTileIndex = groupModelObj.tiles.indexOf(secondTile.getBindingContext().getObject());
                var firstTileModelObj =  groupModelObj.tiles.splice(firstTileIndex, 1);
                groupModelObj.tiles.splice(secondTileIndex, 0, firstTileModelObj[0]);
                var groupPath = group.getBindingContext().getPath();
                group.getModel().setProperty(groupPath, groupModelObj);
            }
        },

        moveTile: function (direction, swapTiles) {
            if (sap.ui.getCore().byId("shell").getModel().getProperty("/personalization")) {
            if (typeof swapTiles == "undefined") {
                swapTiles=false;
            }
            var info = this.getGroupAndTilesInfo();
            if (!info) return;
            var nextTile = this.getNextTile(direction, info);
            if (!nextTile) return;

            if (swapTiles) {
                this.swapTwoTilesInGroup(info.group, info.curTile, nextTile);
            } else {
                this.moveTileInGroup(info.group, info.curTile, nextTile);
            }
            setTimeout(function() {//setTimeout because we have to wait until the asynchronous "moveTile" flow ends
                this.setTileFocus($(nextTile.getDomRef()));
            }.bind(this), 100);
        }
    },

        getNextTile: function (direction, info) {
            var nextTile,
            isRTL = sap.ui.getCore().getConfiguration().getRTL();

            if (direction == "left") { 
                nextTile = info.tiles[info.curTileIndex + ( isRTL ? 1 : -1 ) ];
            }
            if (direction == "right") {
                nextTile = info.tiles[info.curTileIndex + ( isRTL ? -1 : 1 ) ];
            }
            if (direction == "down" || direction == "up") {
                var nearTilesArr;
                var origTileLeftOffset = parseFloat(info.curTile.getDomRef().offsetLeft);
                if (direction == "down") {
                    nearTilesArr = info.tiles.slice(info.curTileIndex+1, info.curTileIndex+(info.sizeOfLine*2));
                } else {
                    var startIndex = info.curTileIndex-(info.sizeOfLine*2);
                    startIndex = (startIndex>0) ? startIndex : 0;
                    nearTilesArr = info.tiles.slice(startIndex, info.curTileIndex-1).reverse();
                }
                for (var i=0, length=nearTilesArr.length; i<length; i++) {
                    var tileElement = nearTilesArr[i].getDomRef();
                    var leftOffset = parseFloat(tileElement.offsetLeft);
                    var width = parseFloat(tileElement.offsetWidth);
                    var leftAndWidth = leftOffset+width;
                    if (leftOffset<=origTileLeftOffset && leftAndWidth>=origTileLeftOffset) {
                        nextTile=nearTilesArr[i];
                        break;
                    }
                }
            }
            return nextTile;
        },

        getGroupAndTilesInfo: function (jqTileContainer, fromCatalog) {
            if (!jqTileContainer) {
                jqTileContainer = this.getFocusOnTile(jQuery(":focus"));
            }
            if (!jqTileContainer.length) return;
            var curTile = sap.ui.getCore().byId(jqTileContainer.attr('id'));
            var group =  curTile.getParent();
            var tiles;
            if (!fromCatalog){
                tiles = group.getTiles();
            } else {
                tiles = new Array();
                var jqTiles = jqTileContainer.prevAll("h3").first().nextUntil("h3");
                for (var i=0; i<jqTiles.length; i++) {
                    tiles.push(sap.ui.getCore().byId(jqTiles[i].id));
                }
            }

            var sizeOfLine = this.getNumberOfTileInRow(fromCatalog);
            return {
                curTile: curTile,
                curTileIndex: tiles.indexOf(curTile),
                tiles: tiles,
                sizeOfLine: sizeOfLine,
                group: group
            }
        },

        goToNearbyTile: function (direction, jqTile, fromCatalog) {
            var info = this.getGroupAndTilesInfo(jqTile, fromCatalog);
            if (!info) return;
            var nextTile = this.getNextTile(direction, info);
            if (!nextTile) return;
            this.setTileFocus($(nextTile.getDomRef()));
        },

        deleteTile: function (jqTile) {
            var tileId = jqTile.attr("id");
            if (tileId) {
                var oTile = sap.ui.getCore().byId(tileId);
                var oEventBus = sap.ui.getCore().getEventBus();
                oEventBus.publish("launchpad", "deleteTile", {
                    tileId: oTile.getUuid()
                });
            }
        },

        setTileFocus : function(jqTile) {
            if (!jqTile.hasClass('sapUshellPlusTile')) {
                var jqFocusables = jqTile.find('[tabindex], a').andSelf().filter('[tabindex], a');
                jqFocusables.filter('[tabindex!="-1"]');
                jqTile=jqFocusables.eq(0);
            }
            jqTile.focus();
        },

        moveScrollDashboard: function(jqTileSelected){
            var jqDashboardPageCont = jQuery("#dashboardPage-cont");
            var iTopSpacing = jQuery('#shell-hdr').height() + parseInt(jQuery('.sapUshellContainerTitle').css('margin-top'),10);
            var iY = jqTileSelected.offset().top + jqDashboardPageCont.scrollTop() - iTopSpacing;
            sap.ui.getCore().byId("dashboardPage").scrollTo(iY, 500);
        },

        moveScrollCatalog: function(jqTileSelected){
            var jqDashboardPageCont = jQuery("#catalogTilesPage-cont");
            var iTopSpacing = jQuery('#shell-hdr').height() + jQuery('.sapMPageHeader').height() + (parseInt(jQuery('.sapMPanelHdr').css('margin-top'),10) * 2);
            var iY = jqTileSelected.offset().top + jqDashboardPageCont.scrollTop() - iTopSpacing;
            sap.ui.getCore().byId("catalogTilesPage").scrollTo(iY, 500);
        },

        goToNearbySidePanelGroup: function (direction, jqElement) {
            var selector = (direction=="up") ? "prev" : "next";
            var nextGroup = jqElement[selector]();
            if (!nextGroup) return;
            nextGroup.focus();
        },

        deleteSidePanelGroup: function (jqGroup) {
            var core = sap.ui.getCore();
            var oGroup = core.byId(jqGroup.attr('id'));
            var bRemovable = oGroup.getRemovable();
            var oEventBus = core.getEventBus();
            oEventBus.publish("launchpad", bRemovable ? "deleteGroup" : "resetGroup", {
                groupId : oGroup.getGroupId()
            });
        },

        moveSidePanelGroup: function (direction, jqGroup) {
            var core = sap.ui.getCore();
            var oGroup = core.byId(jqGroup.attr('id'));
            var index = oGroup.getIndex();
            var toIndex =  direction == "up" ? index-1 : index+1;
            if (!index || !toIndex) return;
            var groups = oGroup.getParent().getItems();
            if (toIndex>=(groups.length)) return;
            var oData = {fromIndex: index, toIndex: toIndex};
            var oBus = core.getEventBus();
            oBus.publish("launchpad", "moveGroup", oData);
            this.upDownButtonsHandler(direction);
        },

        goToEdgeSidePanelGroup: function (selector) {
            var jqGroups = jQuery(".sapUshellGroupLI");
            jqGroups[selector]().focus();
        },

        getFocusGroupFromSidePanel: function (jqFocused) {
            var jqFocusedGroup = jqFocused.closest(".sapUshellGroupLI");
            return jqFocusedGroup.length ? jqFocusedGroup : false;
        },

        getFocusOnTile: function (jqFocused) {
            var jqFocusedTile = jqFocused.closest(".sapUshellTile");
            return jqFocusedTile.length ? jqFocusedTile : false;
        },

        getFocusOnCatalogPopover: function (jqFocused) {
            var jqFocusedPopover = jqFocused.closest(".sapMPopover");
            return jqFocusedPopover.length ? jqFocusedPopover : false;
        },

        addGroup: function (jqButton) {
            var core = sap.ui.getCore();
            var oButton = core.byId(jqButton.attr('id'));
            oButton.firePress();
        },

        renameGroup: function () {
            var jqFocused = jQuery(":focus");
            var jqElement = this.getFocusGroupFromSidePanel(jqFocused);
            if (jqElement) {
                jqElement.dblclick();
            }

        },

        upDownButtonsHandler: function (direction, fromCatalog) {
            var jqElement,
                jqFocused = jQuery(":focus");
            if (jqElement = this.getFocusGroupFromSidePanel(jqFocused)) {
                this.goToNearbySidePanelGroup(direction, jqElement);
                return;
            }
            if (jqElement = this.getFocusOnTile(jqFocused)) {
                this.goToNearbyTile(direction, jqElement, fromCatalog);
                return;
            }
            if (jqElement = this.getFocusOnCatalogPopover(jqFocused)) {
                this.goToNearbyTile(direction, jqElement, fromCatalog);
                return;
            }
        },

        homeEndButtonsHandler: function (selector) {
            var jqElement,
                jqFocused = jQuery(":focus");
            if (jqFocused.closest("#dashboardGroups").length || jqFocused.closest("#catalogTiles").length) {
                this.goToEdgeTile(selector);
                return;
            }
            if (jqElement = this.getFocusGroupFromSidePanel(jqFocused)) {
                this.goToEdgeSidePanelGroup(selector);
                return;
            }
        },

        deleteButtonHandler: function () {
        	if (sap.ui.getCore().byId("shell").getModel().getProperty("/personalization")) {
        		var jqElement,
        		jqFocused = jQuery(":focus");
        		if (jqElement = this.getFocusOnTile(jqFocused)) {
        			this.deleteTile(jqElement);
        			return;
        		}
        		if (jqElement = this.getFocusGroupFromSidePanel(jqFocused)) {
        			
        			//Don't delete the group in case delete was pressed during renaming & in case this is a default group.
        			if(!jqElement.hasClass('sapUshellEditing') && !jqElement.hasClass("sapUshellDefaultGroupItem")){
        				this.deleteSidePanelGroup(jqElement);
        				return;
        			}          	
        		}
        	}
        },

        ctrlUpDownButtonsHandler: function (selector) {
            var jqElement,
                jqFocused = jQuery(":focus");
            if (jqElement = this.getFocusOnTile(jqFocused)) {
                this.moveTile(selector, false, jqElement);
                return;
            }
            if (jqElement = this.getFocusGroupFromSidePanel(jqFocused)) {
                this.moveSidePanelGroup(selector, jqElement);
                return;
            }
            this.moveTile("down");
        },

        spaceButtonHandler: function (e) {
            var jqElement,
                jqFocused = jQuery(":focus");
            if (jqElement = this.getFocusGroupFromSidePanel(jqFocused)) {
                jqElement.click();
                return false;
            }
            var jqElement = jqFocused.closest('#addGroupActionItem');
            if (jqElement.length) {
                this.addGroup(jqElement);
                return false;
            }
        },

        f6DashboardButtonHandler: function (e) {
            var jqFocused = jQuery(":focus"),
                jqElement, focusCase;
            var selector = {
                configButton: '#configBtn',
                sidePanelFirstGroup: '.sapUshellGroupLI:first:visible',
                firstTile: '.sapUshellTile:first'
                };

            if (jqFocused.closest('#dashboardGroups').length) {
                if (!e.shiftKey) {
                    focusCase = "configButton";
                } else {
                    jqElement = jQuery(selector.sidePanelFirstGroup);
                    if (!jqElement.length) {
                        focusCase = "configButton";
                    } else {
                        focusCase = "jqElement";
                    }
                }
            }

            if (jqFocused.closest(selector.sidePanelFirstGroup).length) {
                if (!e.shiftKey) {
                    focusCase = 'firstTile';
                } else {
                    focusCase = 'configButton';
                }
            }

            if (jqFocused.closest('#shell-hdr').length) {
                if (e.shiftKey) {
                    focusCase = 'firstTile';
                } else {
                    jqElement = jQuery(selector.sidePanelFirstGroup);
                    if (!jqElement.length) {
                        focusCase = 'firstTile';
                    } else {
                        focusCase = "jqElement";
                    }
                }
            }

            e.preventDefault();
            switch (focusCase) {
                case 'firstTile':
                    jqElement = jQuery(selector.firstTile);
                    this.setTileFocus(jqElement);
                    break;
                case 'jqElement':
                    jqElement.focus();
                    break;
                default:
                    jqElement = jQuery(selector.configButton);
                    jqElement.focus();
                    break;

            }
            return false;
        },

        f6CatalogButtonHandler: function (e) {
            var jqFocused = jQuery(":focus"),
                jqElement, focusCase;
            var selector = {
                homeButton: '#homeBtn',
                backButton: '.sapMBarChild.sapMBtn:first',
                dropDownList: '#catalogSelect',
                searchField: '#catalogSearch input',
                firstTile: '#catalogTiles .sapUshellTile:visible:first'
            };

            if (jqFocused.closest('#shell-hdr').length) {
                if (!e.shiftKey) {
                    focusCase = 'backButton';
                    jqElement = jQuery(selector.backButton);
                } else {
                    focusCase = 'firstTile';
                    jqElement = jQuery(selector.firstTile);
                }
            }
            if (jqFocused.closest(selector.backButton).length) {
                if (!e.shiftKey) {
                    jqElement = jQuery(selector.dropDownList);
                    focusCase = 'dropDownList';
                } else {
                    jqElement = jQuery(selector.homeButton);
                    focusCase = 'homeButton';
                }
            }

            if (jqFocused.closest('#catalogSelect').length) {
                if (!e.shiftKey) {
                    jqElement = jQuery(selector.searchField);
                    focusCase = 'searchField';
                } else {
                    jqElement = jQuery(selector.backButton);
                    focusCase = 'backButton';
                }
            }

            if (jqFocused.closest('#catalogSearch').length) {
                if (!e.shiftKey) {
                    jqElement = jQuery(selector.firstTile);
                    focusCase = 'firstTile';
                } else {
                    jqElement = jQuery(selector.dropDownList);
                    focusCase = 'dropDownList';
                }
            }

            if (jqFocused.closest('#catalogTiles').length) {
                if (!e.shiftKey) {
                    jqElement = jQuery(selector.homeButton);
                    focusCase = "homeButton";
                } else {
                    jqElement = jQuery(selector.searchField);
                    focusCase = "searchField";
                }
            }

            e.preventDefault();
            switch (focusCase) {
                case 'firstTile':
                    jqElement = jQuery(selector.firstTile);
                    this.setTileFocus(jqElement);
                    break;
                case 'homeButton':
                case 'backButton':
                case 'dropDownList':
                case 'searchField':
                    jqElement.focus();
                    break;
                default:
                    jqElement = jQuery(selector.homeButton);
                    jqElement.focus();
                    break;
            }
            return false;
        },

        mainKeydownHandler: function(e){
            e = e || window.event;
            //in case this is not F6 key return and do default

            switch (e.keyCode) {
                case this.keyCodes.SPACE:
                    this.spaceButtonHandler(e);
                    break;
                case this.keyCodes.HOME: //Home button
                    this.homeEndButtonsHandler("first");
                    break;
                case this.keyCodes.END: //End button
                    this.homeEndButtonsHandler("last");
                    break;
                default:
                    return true;
            }

            //in case this we are not in home return and do default
        },

        catalogKeydownHandler: function(keydown){
            var handler = sap.ushell.renderers.fiori2.AccessKeysHandler;
            var fromCatalog = true;
            switch (keydown.keyCode) {
                case handler.keyCodes.F6:
                    return handler.f6CatalogButtonHandler(keydown);
                    break;
                case handler.keyCodes.ARROW_UP: //Up
                    handler.upDownButtonsHandler("up", fromCatalog);
                    break;
                case handler.keyCodes.ARROW_DOWN: //Down
                    handler.upDownButtonsHandler("down", fromCatalog);
                    break;
                case handler.keyCodes.ARROW_RIGHT: // Right ->
                    handler.goToNearbyTile("right");
                    break;
                case handler.keyCodes.ARROW_LEFT: // Left <-
                    handler.goToNearbyTile("left");
                    break;
                case handler.keyCodes.PAGE_UP: //Page Up button
                    handler.goToFirstTileOfSiblingGroupInCatalog('prev',keydown);
                    break;
                case handler.keyCodes.PAGE_DOWN: //Page Down
                    handler.goToFirstTileOfSiblingGroupInCatalog('next',keydown);
                    break;
            }
        },

        dashboardKeydownHandler: function(keydown){
            var handler = sap.ushell.renderers.fiori2.AccessKeysHandler;
            switch (keydown.keyCode) {
                case handler.keyCodes.F2:
                    this.renameGroup();
                    break;
                case handler.keyCodes.F6:
                    return handler.f6DashboardButtonHandler(keydown);
                    break;
                case handler.keyCodes.DELETE: // Delete
                    handler.deleteButtonHandler();
                    break;
                case handler.keyCodes.ARROW_UP: //Up
                    if (keydown.ctrlKey === true) {
                        handler.ctrlUpDownButtonsHandler("up");
                    }
                    else{
                        handler.upDownButtonsHandler("up");
                    }
                    break;
                case handler.keyCodes.ARROW_DOWN: //Down
                    if (keydown.ctrlKey === true) {
                        handler.ctrlUpDownButtonsHandler("down");
                    }
                    else {
                        handler.upDownButtonsHandler("down");
                    }
                    break;
                case handler.keyCodes.ARROW_RIGHT: // Right ->
                    if (keydown.ctrlKey === true) {
                        handler.moveTile("right");
                    } else {
                        handler.goToNearbyTile("right");
                    }
                    break;
                case handler.keyCodes.ARROW_LEFT: // Left <-
                    if (keydown.ctrlKey === true) {
                        handler.moveTile("left");
                    } else {
                        handler.goToNearbyTile("left");
                    }
                    break;
                case handler.keyCodes.PAGE_UP: //Page Up button //TODO : check what happen when the tile is  empty
                    handler.goToFirstTileOfSiblingGroup('prev',keydown);
                    break;
                case handler.keyCodes.PAGE_DOWN: //Page Down
                    handler.goToFirstTileOfSiblingGroup('next',keydown);
                    break;
            }
        },

        init: function () {
            jQuery(document).on('keyup.accessKeysHandler', function (keyUpEvent) {
                if (!this.activateFlag) {
                    return;
                }
                if (keyUpEvent.altKey) {
                    switch (String.fromCharCode(keyUpEvent.keyCode).toUpperCase()) {
                        case 'C':
                        	if (sap.ui.getCore().byId("shell").getModel().getProperty("/personalization")) {
                        		this.handleCatalogKey();
                        	}
                            break;
                        case 'H':
                            this.handleHomepageKey();
                            break;
                        case 'S':
                            this.handleSearchKey();
                            break;
                        case 'U':
                            this.handleUserMenuKey();
                            break;
                        case '0':
                            this.handleAccessOverviewKey();
                            break;
                    } // End of switch
                } // End of if altKey
            }.bind(this)); // End of event handler

            //listen to keydown event in order to support accessibility F6 key
            jQuery(document).on('keydown.main', this.mainKeydownHandler.bind(this));
        }
    };

    sap.ushell.renderers.fiori2.AccessKeysHandler = new accessKeysHandler();

}());

}; // end of sap/ushell/renderers/fiori2/AccessKeysHandler.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.History') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */
    jQuery.sap.declare("sap.ushell.renderers.fiori2.History");

    sap.ushell.renderers.fiori2.History = function () {
        this._history = [];
        this.backwards = false;
        this._historyPosition = -1;
        this._virtual = {};
    };

    sap.ushell.renderers.fiori2.History.prototype.hashChange = function (newHash, oldHash) {
        var historyIndex = this._history.indexOf(newHash);

        //new history entry
        if (historyIndex === -1) {
            //new item and there where x back navigations before - remove all the forward items from the history
            if (this._historyPosition + 1 < this._history.length) {
                this._history = this._history.slice(0, this._historyPosition + 1);
            }

            this._history.push(newHash);

            this._historyPosition += 1;
            this.backwards = false;
            this.forwards = false;
        } else {
            //internalNavigation
            this.backwards = this._historyPosition > historyIndex;
            this.forwards = this._historyPosition < historyIndex;

            this._historyPosition = historyIndex;
        }
    };

    sap.ushell.renderers.fiori2.History.prototype.isVirtualHashchange = function (newHash, oldHash) {
        //the old hash was flagged as virtual
        return this._virtual.hasOwnProperty(oldHash) &&
            //the new Hash is the current One
            this.getCurrentHash() === newHash &&
            //the history has forward entries
            this._history.length - 1 > this._historyPosition &&
            //the old hash was the hash in the forward history direction
            this._history[this._historyPosition + 1] === oldHash;
    };

    sap.ushell.renderers.fiori2.History.prototype.setVirtualNavigation = function (hash) {
        this._virtual[hash] = true;
    };

    sap.ushell.renderers.fiori2.History.prototype.getCurrentHash = function () {
        return this._history[this._historyPosition] || null;
    };

    sap.ushell.renderers.fiori2.History.prototype.getHashIndex = function (hash) {
        return this._history.indexOf(hash);
    };

    sap.ushell.renderers.fiori2.History.prototype.getHistoryLength = function () {
        return this._history.length;
    }
}());
}; // end of sap/ushell/renderers/fiori2/History.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.Navigation') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */
    jQuery.sap.declare("sap.ushell.renderers.fiori2.Navigation");

    sap.ushell.renderers.fiori2.Navigation = function () {
        this.CATALOG = {
            ID : "ShellCatalog",
            SEMANTICOBJECT : "shell",
            ACTION : "catalog"
        };
        //OBSOLETE FOR NOW: search is not part of the navigation
        this.SEARCH = {
            ID : "ShellSearch",
            SEMANTICOBJECT : "shell",
            ACTION : "search"
        };
        sap.ushell.Container.getService("NavTargetResolution").registerCustomResolver({
            name : "Shell Internal Navigation",
            isApplicable : jQuery.proxy(this.navTargetIsApplicableForShell, this),
            resolveHashFragment : jQuery.proxy(this.resolveHashFragmentForShell, this)
        });
        sap.ushell.Container.getService("NavTargetResolution").registerCustomResolver({
            name : "Search App Container",
            isApplicable : function (sHashFragment) { 
            	return sHashFragment === "#Action-search";
            },
            resolveHashFragment : function (sHashFragment) {
            	var oDeferred = new jQuery.Deferred(),
	                res = {};
            	if (sHashFragment === "#Action-search") {
	                res = {
	                        "additionalInformation": "SAPUI5.Component=sap.ushell.renderers.fiori2.search.container",
		                    "applicationType": "URL",
//		                    "url": "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/renderers/fiori2/search/container"
		                    "url": jQuery.sap.getResourcePath("sap/ushell/renderers/fiori2/search/container")
	                };
	            }
	            oDeferred.resolve(res);
	            return oDeferred.promise();
            }
        });
    };

    sap.ushell.renderers.fiori2.Navigation.prototype.openCatalogByHash = function (oData, bSaveHistory) {
        var sHash = "#" + sap.ushell.Container.getService("URLParsing").constructShellHash({
                target : {
                    semanticObject : this.CATALOG.SEMANTICOBJECT,
                    action : this.CATALOG.ACTION
                },
                params : {
                    targetGroup : [(oData && oData.groupContext && oData.groupContext.sPath) || "/groups/0"],
                    catalogSelector : [(oData && oData.categoryFilter) || ""],
                    tileFilter : [(oData && oData.searchFilter) || ""]
                }
            });
        sap.ushell.Container.getService("ShellNavigation").hashChanger.privsetHash(sHash, bSaveHistory === undefined ? true : bSaveHistory);

        //Add access keys
        // reset selections
        jQuery(document).off('keydown.dashboard');
        jQuery(document).off('keydown.catalog');
        // add catalog events
        jQuery(document).on('keydown.catalog', sap.ushell.renderers.fiori2.AccessKeysHandler.catalogKeydownHandler);
    };

    /* Make catalog part of the navigation */
    sap.ushell.renderers.fiori2.Navigation.prototype.navTargetIsApplicableForShell = function (sHashFragment) {
        var oAppInfo = sap.ushell.Container.getService("URLParsing").parseShellHash(sHashFragment.substring(1));

        return oAppInfo &&
            (oAppInfo.semanticObject === this.CATALOG.SEMANTICOBJECT
                    && oAppInfo.action === this.CATALOG.ACTION);
    };

    sap.ushell.renderers.fiori2.Navigation.prototype.resolveHashFragmentForShell = function (sHashFragment) {
        var oAppInfo = sap.ushell.Container.getService("URLParsing").parseShellHash(sHashFragment.substring(1)),
            oDeferred = new jQuery.Deferred(),
            res = {};
        if (oAppInfo.action === this.CATALOG.ACTION) {
            res = {
                applicationType: this.CATALOG.ID,
                catalogSelector : oAppInfo.params.catalogSelector,
                tileFilter : oAppInfo.params.tileFilter,
                targetGroup : oAppInfo.params.targetGroup
            };
        }
        oDeferred.resolve(res);
        return oDeferred.promise();
    };

    sap.ushell.renderers.fiori2.Navigation = new sap.ushell.renderers.fiori2.Navigation();
}());
}; // end of sap/ushell/renderers/fiori2/Navigation.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.launchpad.PagingManager') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, console, document, $, setTimeout, window */
    /*jslint plusplus: true, nomen: true, bitwise: true */

    jQuery.sap.declare("sap.ushell.renderers.fiori2.launchpad.PagingManager");
    sap.ui.base.EventProvider.extend("sap.ushell.renderers.fiori2.launchpad.PagingManager", {
        metadata : {
            publicMethods : ["setElementClass", "setContainerSize", "getNumberOfAllocatedElements", "moveToNextPage", "getTileHeight"]
        },
        constructor : function (sId, mSettings) {
            //make this class only available once
//            if (sap.ushell.renderers.fiori2.launchpad.getPagingManager && sap.ushell.renderers.fiori2.launchpad.getPagingManager()) {
//                return sap.ushell.renderers.fiori2.launchpad.getPagingManager();
//            }
            sap.ushell.renderers.fiori2.launchpad.getPagingManager = jQuery.sap.getter(this.getInterface());
            this.currentPageIndex = 0;
            this.containerHeight = mSettings.containerHeight || 0;
            this.containerWidth = mSettings.containerWidth || 0;
            this.ElementClass = mSettings.elementClassName || "";
            this.tileHeight = 0;
        },
        getTileHeight : function () {
            return this.tileHeight;
        },
        setElementClass : function (sClassName) {
            this.ElementClass = sClassName;
        },

        setContainerSize : function (nHeight, nWidth) {
            this.containerHeight = nHeight;
            this.containerWidth = nWidth;
        },

        getNumberOfAllocatedElements : function () {
            return this._calcElementsPerPage() * this.currentPageIndex;
        },

        moveToNextPage : function () {
            this.currentPageIndex++;
        },

        _calcElementsPerPage : function () {
            var oElement = jQuery("<div>").addClass(this.ElementClass);
            jQuery('body').append(oElement);
            var elementHeight = oElement.height();
            var elementWidth = oElement.width();
            
            if(elementHeight < 100 || elementWidth < 100) {
              elementWidth = 100; 
              elementHeight = 100;
            }
            
            var elementsPerRow = Math.round(this.containerWidth / elementWidth),
                elementsPerColumn = Math.round(this.containerHeight / elementHeight);
            this.tileHeight = elementHeight;

            oElement.remove();
            if (!elementsPerRow || !elementsPerColumn || elementsPerColumn === Infinity || elementsPerRow === Infinity || elementsPerColumn === 0 || elementsPerRow === 0) {
                return 10;
            }
            return elementsPerRow * elementsPerColumn;
        }
    });
}());
}; // end of sap/ushell/renderers/fiori2/launchpad/PagingManager.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.SearchBox') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchBox');
(function (global) {
    "use strict";

    jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained


    
    // extend search field 
    // add pill for datasource

    sap.ushell.renderers.fiori2.search.SearchBox =
        sap.m.SearchField.extend("sap.ushell.renderers.fiori2.search.SearchBox", {

            metadata: {
                properties: {
                    dataSourceName: "string"
                },
                events: {
                    deletePill: {},
                    resetAll: {}
                }
            },

            renderer: "sap.m.SearchFieldRenderer",

            onAfterRendering: function () {

                // init
                var self = this;
                var element = $(this.getDomRef());

                // call base class
                sap.m.SearchField.prototype.onAfterRendering.apply(this, arguments);

                // add event for reset button
                element.find("#sfOverlay-reset").click(function () {
                    self.fireResetAll();
                });
                element.find("#sfOverlay-reset").on({"touchstart" : function () { 
                        self.fireResetAll();
                    }
                });

                element.find("#containerSf-reset").click(function () {
                    self.fireResetAll();
                });
                element.find("#containerSf-reset").on({"touchstart" : function () { 
                        self.fireResetAll();
                    }
                });

                // add css classed to form and input
                var form = element.find("form");
                form.addClass("sapUiUfdShellSearchBoxForm");
                var input = element.find("input");
                input.addClass("sapUiUfdShellSearchBox");

                // check datasource
                var dataSourceName = this.getDataSourceName();
                if (!dataSourceName || dataSourceName === "") {
                    return;
                }

                // add pill
                var pill = $('<span class="sapUshellDataSourcePill sapUshellSearchBoxPill"></span>');
                form.prepend(pill);
                pill.append('<span class="sapUiUfdShellSearchBoxPillDsName">'+dataSourceName+'</span>');
                var delButton = $('<span class="sapUiUfdShellSearchBoxPillDel"></span>');

                var bRtl = sap.ui.getCore().getConfiguration().getRTL();
                if (bRtl) {
                    pill.prepend(delButton);
                }else{
                    pill.append(delButton);
                }
                
                delButton.click(function () {
                    self.fireDeletePill();
                });
                delButton.on({"touchstart" : function () { 
                        self.fireDeletePill(); 
                    }
                });

            }

        });


}(window));
}; // end of sap/ushell/renderers/fiori2/search/SearchBox.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.SearchSuggestionControls') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchSuggestionControls');
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview
 *
 * @version 1.24.5
 */
(function () {
    "use strict";
    /*global jQuery, sap */

    
    jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained


    sap.ui.core.Control.extend("sapUshellSuggestSection", {
        metadata : {
            properties : {

            },
            aggregations : {
                "items": {type: "sap.ui.core.Control", multiple: true}
            }

        },
        
        hasContent : function(){
            return true;
            // var items = this.getItems();
            // for (var j = 0; j < items.length; j++) {
            //     if(! items[j].getIsHeader()) return true;
            // }
            // return false;
        }
        
    });
        
    sap.m.List.extend("sapUshellSuggestionList", {

        init: function(oEvent) { 

            sap.m.List.prototype.init.call(this,oEvent);
            this.setShowNoData(false);
            this.setShowSeparators(sap.m.ListSeparators.Inner);

            this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
            this.oItemNavigation.attachEvent("AfterFocus", this._afterFocus);
            this.addDelegate(this.oItemNavigation);
        },

        exit: function(oEvent) { 
            this.oItemNavigation.detachEvent("AfterFocus", this._afterFocus);
            this.oItemNavigation.destroy();
        },

        _afterFocus: function(oEvent) { 

            // this.setFocusedIndex(2);
            this.setFocusedIndex(this.getItemDomRefs().indexOf(this.getFocusedDomRef()));
        },

        // the control API:
        metadata : {
            properties : {

            },
            aggregations : {
                "sections": {type: "sap.ui.core.Control", multiple: true}
            },
            events: {

            }
        },

        // the part creating the HTML:
        renderer : function(oRm, oControl) { // static function, so use the given "oControl" instance instead of "this" in the renderer function
            /// outer div
            oRm.write("<div");
            oRm.writeControlData(oControl);  // writes the Control ID
            oRm.writeClasses();
            oRm.write(">");
            
            var sections = oControl.getSections();
              for (var i = 0; i < sections.length; i++) {
                  var section = sections[i];
                  if(section.hasContent()){
                      var items = section.getItems();
                      
                      for (var j = 0; j < items.length; j++) {
                          items[j].addStyleClass('suggestList');
                          oRm.renderControl(items[j]);
                          
                      }
                      
                  }
              }

            /// close outer div
            oRm.write("</div>"); // end of the complete control
        },

        onAfterRendering: function(oEvent) { 

            var oFocusRef = this.getDomRef();
            // var aDomRefs = oFocusRef.getElementsByTagName("li");
            // var aDomRefs = oFocusRef.getElementsByTagName("li");
            var aDomRefs = oFocusRef.getElementsByClassName("sapUshellSuggestListItem");
            
            var aItems = [];
            var iMaxColumns = 2;

            // Get max number of columns in one row
            // jQuery.each(aDomRefs, function (i, value) {
            //     var iClolumns = value.getElementsByClassName("sapUshellSearchSuggestionNavItem").length;
            //     if (iClolumns > iMaxColumns) {
            //         iMaxColumns = iClolumns;
            //     }
            // });

            var aRows = oFocusRef.getElementsByClassName("sapUshellSearchSuggestionNavItem");

            for (var i = 0; i < aDomRefs.length; i++) {
                var navItems = aDomRefs[i].getElementsByClassName("sapUshellSearchSuggestionNavItem");

                //Always fill max columns
                var lastDom;
                for (var j = 0; j < iMaxColumns; j++) {
                    var navItem = navItems[j];
                    if (navItem) {
                        aItems.push(navItem);
                        lastDom = navItem;
                    }else{
                        aItems.push(lastDom);
                    }
                }

            }

            // for (var i=0;i<aRows.length;i++) {
            //     aItems.push(aRows[i]); 

            // }

            // for (var i = 0; i < aDomRefs.length; i++) {
            //     aItems.push(aDomRefs[i]);
            // }

            // // Build Grid
            // jQuery.each(aDomRefs, function (i, value) {
            //     var oLinks = value.getElementsByClassName("sapUshellSearchSuggestionNavItem");

            //     if (oLinks.length > 0) {
            //         for (var j=0; j < iMaxColumns; j++) {
            //             aItems.push(oLinks[j] || aItems[aItems.length - 1]);
            //         }
            //     }
            // });

            // After each rendering the delegate needs to be initialized as well.
            this.oItemNavigation
                .setRootDomRef(oFocusRef)
                .setItemDomRefs(aItems)
                .setCycling(true)
                .setColumns(iMaxColumns)
                .setSelectedIndex(0);


        }
        
    });


    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.init = function (oEvent) {
        sap.m.List.prototype.init.call(this,oEvent);
        this.setShowNoData(false);
        this.setShowSeparators(sap.m.ListSeparators.Inner);

        this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
        this.oItemNavigation.attachEvent("AfterFocus", this._afterFocus);
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.exit = function (oEvent) {
        this.oItemNavigation.detachEvent("AfterFocus", this._afterFocus);
        this.oItemNavigation.destroy();
    };




}());
}; // end of sap/ushell/renderers/fiori2/search/SearchSuggestionControls.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.container.App.controller') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.container.App.controller');
// Copyright (c) 2013 SAP AG, All Rights Reserved

/* global jQuery, sap */
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained


/* global sap */
sap.ui.controller("sap.ushell.renderers.fiori2.search.container.App",{
	
	onInit: function () {
		this.oShellNavigation = sap.ushell.Container.getService("ShellNavigation");
//        this.oShellNavigation.init(jQuery.proxy(this.doHashChange, this));
		this.oShellNavigation.hashChanger.attachEvent("hashChanged", this.hashChanged);
	},
	
//	switchViewState: function (sState, bSaveLastState) {
//		var self = this;
//		var oView = self.getView();
//		
//		var mState = {
//				"searchResults":oView.oSearchResults,
//				"suggestions":oView.oSearchSuggestions,
//				"historyScreen":oView.oHistoryScreen
//		};
//		
//		for (var key in mState) {
//			if (key === sState)
////				oView.oPage.addContent(mState[key]);
//				oView.oSubContainer.addContent(mState[key]);
//			else 
////				oView.oPage.removeContent(mState[key]);
//			 	oView.oSubContainer.removeContent(mState[key]);
//		}
//		
//    },
    
    hashChanged: function (oEvent) {
		var oView = sap.ui.getCore().byId("searchContainerApp");
		
        var searchModel = sap.ui.getCore().getModel("searchModel");
		var oURLParsing = sap.ushell.Container.getService("URLParsing");
        var oParameters = oURLParsing.parseParameters("?" + oEvent.getParameter("newHash").replace(/#/g, '%23'));
        
        if (!oParameters.searchTerm)
        	return;
        var searchTerm = decodeURIComponent(oParameters.searchTerm[0]);
		searchModel.setSearchTerm(searchTerm, false);
		
        var dataSource;
        if (oParameters.dataSource) {
        	var dataSourceJson = JSON.parse(decodeURIComponent(oParameters.dataSource[0]));
            dataSource = searchModel.sina.createDataSource(dataSourceJson);
            searchModel.setDataSource(dataSource, false);
        }
        else {
        	searchModel.resetDataSource(false);
        }
        
        oView.oSearchResults.searchLayout.setShowBottomList(searchModel.getProperty("/isNormalSearchEnable"));
		if (!searchModel.getProperty("/isNormalSearchEnable"))
			oView.oSearchResults.searchLayout.setBottomCount(0);
		
        oView.oSearchSelect.setSelectedKey(searchModel.getProperty("/dataSourceLabelRaw"));
        oView.oSearchInput.setValue(searchModel.getProperty('/searchBoxTerm'));     
        
        var oHeadSearchBoxView = sap.ui.getCore().byId("headSearchBox");
        if(oHeadSearchBoxView !== undefined){
        	if(oHeadSearchBoxView.getVisible()){
            	oHeadSearchBoxView.setVisible(false);	
        	}	
        }
        
		searchModel._searchFireQuery();
    },
    
    onExit: function () {
//        sap.ui.getCore().getEventBus().unsubscribe("externalSearch", this.externalSearchTriggered, this);
//        sap.ui.getCore().getEventBus().unsubscribe("openApp", this.openApp, this);
    	this.oShellNavigation.hashChanger.detachEvent("hashChanged", this.hashChanged);
//        this.getView().aDanglingControls.forEach(function (oControl) {
//            if (oControl.destroyContent) {
//                oControl.destroyContent();
//            }
//            oControl.destroy();
//        });
    },

});
}; // end of sap/ushell/renderers/fiori2/search/container/App.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.container.Component') ) {
// define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.ushell.renderers.fiori2.search.container.Component");
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained


// new Component
sap.ui.core.UIComponent.extend("sap.ushell.renderers.fiori2.search.container.Component", {

	metadata : {

		version : "1.24.5",

		library : "sap.ushell.renderers.fiori2.search.container",

		includes : [ ],

		dependencies : {
			libs : [ "sap.m" ],
			components : []
		},
        config: {
//            "title": "Fiori Sandbox Default App",
            //"resourceBundle" : "i18n/i18n.properties",
            //"titleResource" : "shellTitle",
//            "icon" : "sap-icon://Fiori2/F0429"
        }
	},

	createContent : function() {
//		return sap.ui.jsview("sap.ushell.renderers.fiori2.search.container.App");
		return sap.ui.view({
            id : "searchContainerApp",
//            tooltip: "{i18n>searchHistoryScreen_tooltip}",
            viewName : "sap.ushell.renderers.fiori2.search.container.App",
            type : sap.ui.core.mvc.ViewType.JS
        });
	}
});

}; // end of sap/ushell/renderers/fiori2/search/container/Component.js
if ( !jQuery.sap.isDeclared('sap.ushell.resources') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview This file handles the resource bundles.
 */

(function () {
    "use strict";
    /*global jQuery, sap */

    // ensure that sap.ushell exists
    jQuery.sap.declare("sap.ushell.resources");

    jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained


    sap.ushell.resources = {};

    sap.ushell.resources.getTranslationModel = function () {
     // create translation resource model
        var oTranslationModel = new sap.ui.model.resource.ResourceModel({
            bundleUrl : jQuery.sap.getModulePath(
                "sap.ushell.renderers.fiori2.resources.resources",
                ".properties"
            ),
            bundleLocale : sap.ui.getCore().getConfiguration().getLanguage()
        });
        return oTranslationModel;
    }

    sap.ushell.resources.i18nModel = sap.ushell.resources.getTranslationModel();
    sap.ushell.resources.i18n = sap.ushell.resources.i18nModel.getResourceBundle();
}());
}; // end of sap/ushell/resources.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.AppConfiguration') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.AppConfiguration");
    /**
     * AppConfiguration service.
     *
     * @private
     */
    function AppConfiguration() {
        var oMetadata = {},
            oCurrentApplication = null;

        /**
         * Returns the current metadata.
         * 
         * {
         *      title: {string}
         *      library: {string}
         *      version: {string}
         *      fullWidth: {boolean}
         * }  
         * 
         * @returns {object}
         *   a copy of the metadata object
         *
         * @private
         */
        this.getMetadata = function (oApplication) {
            if (!oApplication) {
                oApplication = oCurrentApplication;
            }

            if (oApplication) {
                var sKey = this.getApplicationUrl(oApplication);
                if (!(oMetadata.hasOwnProperty(sKey))) {
                    this.addMetadata(oApplication);
                }
                return oMetadata[sKey] || {};
            }
            return {};
        };

        /**
         * @private
         */
        this.setCurrentApplication = function (oApplication) {
            oCurrentApplication = oApplication;
        };

        /*
         * This methods adds buttons to the action sheet in the shell header.
         * it is meant to be used by applications that wants to add their own settings button to the shell header.
         * 
         * @param {array} array of sap.m.Button controls
         * */
        this.addApplicationSettingsButtons = function (aButtons) {
            var oModel = sap.ui.getCore().byId('shell') && sap.ui.getCore().byId('shell').getModel();
            var i, oCurrentButton, aButtonsInModel, aNewButtons = [];
            if (!oModel){
                jQuery.sap.log.error("shell does not exist");
                return;
            }
            aButtonsInModel = oModel.getProperty('/currentState/shellActions').slice(0);
            for (i = 0; i < aButtons.length; i++) {
                oCurrentButton = aButtons[i];
                oCurrentButton.setIcon(oCurrentButton.getIcon() || sap.ui.core.IconPool.getIconURI('action-settings'));
                aNewButtons.push(oCurrentButton.getId());
            }
            oModel.setProperty('/currentState/actions', aNewButtons.concat(aButtonsInModel));
        };

        /**
         * Sets the title of the browser tabSets the title of the browser tab.
         *
         * @param {string} sTitle
         */
        this.setWindowTitle = function (sTitle) {
            window.document.title = sTitle;
        };

        /**
         * Sets the icons of the browser.
         *
         * @param oIconsProperties
         * An object holding icon URLs
         */
        this.setIcons = function (oIconsProperties) {
            jQuery.sap.setIcons(oIconsProperties);
        };

        /**
         * Get a settings control to display about dialog and system infos.
         *
         * @returns {sap.ushell.ui.footerbar.SettingsButton}
         *      a settings control which can be embedded where ever its needed
         * @private
         */
        this.getSettingsControl = function () {
            jQuery.sap.require("sap.ushell.ui.footerbar.SettingsButton");
            return new sap.ushell.ui.footerbar.SettingsButton();
        };

        /**
         * @private
         */
        this.getApplicationName = function (oApplication) {
            /*jslint regexp: true */
            var aMatches,
                sAdditionalInformation = (oApplication && oApplication.additionalInformation) || null;

            if (sAdditionalInformation) {
                // SAPUI5.Component=<fully-qualified-component-name>
                aMatches = /^SAPUI5\.Component=(.+)$/i.exec(sAdditionalInformation);
                if (aMatches) {
                    // determine namespace, view name, and view type
                    return aMatches[1];
                }
            }
            return null;
        };
        /**
         * @private
         */
        this.getApplicationUrl = function (oApplication) {
            var sUrl = (oApplication && oApplication.url) || null,
                iIndex;

            if (sUrl) {
                iIndex = sUrl.indexOf("?");
                if (iIndex >= 0) {
                    // pass GET parameters of URL via component data
                    // as member startupParameters  ( to allow blending with other oComponentData usage, e.g.
                    // extensibility use case
                    sUrl = sUrl.slice(0, iIndex);
                }
                if (sUrl.slice(-1) !== '/') {
                    sUrl += '/'; // ensure URL ends with a slash
                }
            }
            return sUrl;
        };
        /**
         * @private
         */
        this.addMetadata = function (oApplication) {
            try {
                var sComponentName = this.getApplicationName(oApplication),
                    sUrl = this.getApplicationUrl(oApplication),
                    sComponentFile,
                    oComponent,
                    oResourceBundle,
                    sResourceUrl,
                    oLocalMetadata,
                    oConfig,
                    iIndex,
                    oProperty,
                    oValue,
                    aProperties = [ "libraryName", "version", "fullWidth",
                                    "title",
                                    "icon",
                                    "favIcon",
                                    "homeScreenIconPhone",
                                    "homeScreenIconPhone@2",
                                    "homeScreenIconTablet",
                                    "homeScreenIconTablet@2",
                                    "startupImage320x460",
                                    "startupImage640x920",
                                    "startupImage640x1096",
                                    "startupImage768x1004",
                                    "startupImage748x1024",
                                    "startupImage1536x2008",
                                    "startupImage1496x2048"
                                ],
                    potentiallyRelativeUrls,
                    sComponentUrl,
                    isUrlRelative;


                if (sUrl && !(oMetadata.hasOwnProperty(sUrl))) {
                    oMetadata[sUrl] = {};
                    oComponent = sap.ui.component.load({ url : sUrl, name : sComponentName });
                    oLocalMetadata = oComponent.getMetadata();
                    if (oLocalMetadata) {
                        oConfig = oLocalMetadata && oLocalMetadata.getConfig();
                        if (oConfig) {
                            sResourceUrl = oConfig.resourceBundle || "";
                            if (sResourceUrl) {
                                if (sResourceUrl.slice(0, 1) !== '/') {
                                    sResourceUrl = sUrl + sResourceUrl;
                                }
                                oResourceBundle = jQuery.sap.resources({
                                    url: sResourceUrl,
                                    locale : sap.ui.getCore().getConfiguration().getLanguage()
                                });
                            }
                        }

                        for (iIndex = 0; iIndex < aProperties.length; iIndex = iIndex + 1) {
                            oProperty = aProperties[iIndex];
                            if (oResourceBundle && oConfig.hasOwnProperty(oProperty + "Resource")) {
                                oValue = oResourceBundle.getText(oConfig[oProperty + "Resource"]);
                            } else if (oConfig.hasOwnProperty(oProperty)) {
                                oValue = oConfig[oProperty];
                            } else {
                                oValue = oLocalMetadata["_s" + oProperty.substring(0, 1).toUpperCase() + oProperty.slice(1)];
                            }

                            oMetadata[sUrl][oProperty] = oValue;
                        }
                    }

                    /*
                     * Special behavior for relative URLs:
                     * Relative URLs are considered relative to the folder containing the Component.js,
                     * which requires adjustments here. Otherwise the browser would interpret them as
                     * relative to the location of the HTML file, which might be different and also
                     * hard to guess for app developers.
                     */
                    potentiallyRelativeUrls = [
                        "favIcon",
                        "homeScreenIconPhone",
                        "homeScreenIconPhone@2",
                        "homeScreenIconTablet",
                        "homeScreenIconTablet@2",
                        "startupImage320x460",
                        "startupImage640x920",
                        "startupImage640x1096",
                        "startupImage768x1004",
                        "startupImage748x1024",
                        "startupImage1536x2008",
                        "startupImage1496x2048"
                    ];

                    sComponentUrl = (sUrl && sUrl[sUrl.length - 1] === '/') ?
                            sUrl.substring(0, sUrl.length - 1) : sUrl;

                    isUrlRelative = function (sUrl) {
                        /*jslint regexp : true*/
                        if (sUrl.match(/^https?:\/\/.*/)) {
                            return false;
                        }
                        return sUrl && sUrl[0] !== '/';
                    };

                    potentiallyRelativeUrls.forEach(function (sPropName) {
                        var sOrigValue = oMetadata[sUrl][sPropName],
                            sFinalValue = null;
                        // Some URL properties might not be defined.
                        if (sOrigValue) {
                            sFinalValue = isUrlRelative(sOrigValue) ?
                                    sComponentUrl + "/" + sOrigValue : sOrigValue;
                        }
                        oMetadata[sUrl][sPropName] = sFinalValue;
                    });
                }
            } catch (err) {
                jQuery.sap.log.warning("Application configuration could not be parsed");
            }
        };

    } // Metadata

    /**
     * The Unified Shell App configuration service as a singleton object. 
     * 
     * @class The unified shell's AppConfiguration service.
     * 
     * @name sap.ushell.services.AppConfiguration
     * @since 1.15.0
     * @private
     */
    sap.ushell.services.AppConfiguration = new AppConfiguration();

}());

}; // end of sap/ushell/services/AppConfiguration.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.Bookmark') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The Unified Shell's bookmark service, which allows you to create shortcuts on the
 * user's home page.
 *
 * @version 1.24.5
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.Bookmark");

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("Bookmark")</code>.
     * Constructs a new instance of the bookmark service.
     *
     * @class The unified shell's bookmark service, which allows you to create shortcuts on the
     * user's home page.
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     * @public
     */
    sap.ushell.services.Bookmark = function () {
        var that = this,
            oLaunchPageService = sap.ushell.Container.getService("LaunchPage");

        /**
         * Returns <code>true</code> if the given catalog data matches a remote catalog. This
         * requires that the LaunchPageAdapter supports getCatalogData().
         * @param {object} oCatalog
         *   a catalog as given from LaunchPage service
         * @param {object} oRemoteCatalogData
         *   the description of the catalog from a remote system
         * @param {string} oRemoteCatalogData.remoteId
         *   the catalog ID in the remote system
         * @param {string} oRemoteCatalogData.baseUrl
         *   the base URL of the catalog in the remote system
         */
        sap.ushell.utils.testPublishAt(that);
        function isMatchingRemoteCatalog(oCatalog, oRemoteCatalogData) {
            var oCatalogData = oLaunchPageService.getCatalogData(oCatalog);
            // systemAlias is not considered yet, which might lead to multiple matches
            return oCatalogData.remoteId === oRemoteCatalogData.remoteId
                && oCatalogData.baseUrl.replace(/\/$/, "")
                    === oRemoteCatalogData.baseUrl.replace(/\/$/, ""); // ignore trailing slashes
        }

        /**
         * Adds a bookmark to the user's home page.
         *
         * @param {object} oParameters
         *   Bookmark parameters. In addition to title and URL, a bookmark might allow additional
         *   settings, such as an icon or a subtitle. Which settings are supported depends
         *   on the environment in which the application is running. Unsupported parameters will be
         *   ignored.
         * @param {string} oParameters.title
         *   The title of the bookmark.
         * @param {string} oParameters.url
         *   The URL of the bookmark. If the target application shall run in the Shell the URL has
         *   to be in the format <code>"#SO-Action~Context?P1=a&P2=x&/route?RPV=1"</code>
         * @param {string} [oParameters.icon]
         *   The icon URL of the bookmark (e.g. <code>"sap-icon://home"</code>).
         * @param {string} [oParameters.info]
         *   The information text of the bookmark.
         * @param {string} [oParameters.subtitle]
         *   The subtitle of the bookmark.
         * @param {string} [oParameters.serviceUrl]
         *   The URL to a REST or OData service that provides some dynamic information for the
         *   bookmark.
         * @param {string} [oParameters.serviceRefreshInterval]
         *   The refresh interval for the <code>serviceUrl</code> in seconds.
         * @param {string} [oParameters.numberUnit]
         *   The unit for the number retrieved from <code>serviceUrl</code>.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or failure
         *   of this asynchronous operation. In case of success, no further details are passed.
         *   In case of failure, an error message is passed.
         *
         * @see sap.ushell.services.URLParsing#getShellHash
         * @since 1.15.0
         * @public
         */
        this.addBookmark = function (oParameters, oGroup) {
            return oLaunchPageService.addBookmark(oParameters, oGroup);
        };

        /**
         * Adds the tile with the given id <code>sCatalogTileId</code> from the catalog with id
         * <code>sCatalogId</code> to the given group.
         * @param {jQuery.Deferred} oDeferred
         *   a deferred object to be resolved/rejected when finished. In case of success, no
         *   further details are passed. In case of failure, an error message is passed.
         * @param {string} sCatalogTileId
         *   the ID of the tile within the catalog
         * @param {object} oCatalog
         *   the catalog containing the catalog tile
         * @param {string} [sGroupId]
         *   The id of the group. If not given, the tile is added to the default group
         * @returns {object}
         *   <code>oDeferred</code>
         */
        sap.ushell.utils.testPublishAt(that);
        function doAddCatalogTileToGroup(oDeferred, sCatalogTileId, oCatalog, sGroupId) {
            var sError,
                fnFailure = oDeferred.reject.bind(oDeferred);

            function addToGroup(oGroup) {
                oLaunchPageService.getCatalogTiles(oCatalog)
                    .fail(fnFailure)
                    .done(function (aCatalogTiles) {
                        var bTileFound = aCatalogTiles.some(function (oCatalogTile) {
                            if (oLaunchPageService.getCatalogTileId(oCatalogTile)
                                    === sCatalogTileId) {
                                oLaunchPageService.addTile(oCatalogTile, oGroup)
                                    .fail(fnFailure)
                                    .done(function () { // ignore argument oTile!
                                        oDeferred.resolve();
                                    });
                                return true;
                            }
                        });
                        if (!bTileFound) {
                            sError = "No tile '" + sCatalogTileId + "' in catalog '"
                                + oLaunchPageService.getCatalogId(oCatalog) + "'";
                            jQuery.sap.log.error(sError, null, "sap.ushell.services.Bookmark");
                            fnFailure(sError);
                        }
                    });
            }

            if (sGroupId) {
                oLaunchPageService.getGroups()
                    .fail(fnFailure)
                    .done(function (aGroups) {
                        var bGroupFound = aGroups.some(function (oGroup) {
                            if (oLaunchPageService.getGroupId(oGroup) === sGroupId) {
                                addToGroup(oGroup);
                                return true;
                            }
                        });
                        if (!bGroupFound) {
                            // TODO: Consider adding the tile to the default group. This would
                            // enable the user to add tiles if no valid group ID is available.
                            // Take into account how the consumer app requests the group ids.
                            sError = "Group '" + sGroupId + "' is unknown";
                            jQuery.sap.log.error(sError, null, "sap.ushell.services.Bookmark");
                            fnFailure(sError);
                        }
                    });
            } else {
                oLaunchPageService.getDefaultGroup()
                    .fail(fnFailure)
                    .done(addToGroup);
            }
            return oDeferred.promise();
        }

        /**
         * Adds the catalog tile with the given ID to given group. The catalog tile is looked up in
         * the legacy SAP HANA catalog unless data to look up a remote catalog is provided.
         *
         * @param {string} sCatalogTileId
         *   The ID of the tile within the catalog
         * @param {string} [sGroupId]
         *   The id of the group. If not given, the tile is added to the default group
         * @param {object} [oCatalogData]
         *   The data to identify the catalog containing the tile with the given ID
         * @param {string} oCatalogData.baseUrl
         *   The remote catalog's base URL such as
         *   "/sap/hba/apps/kpi/s/odata/hana_chip_catalog.xsodata/"
         * @param {string} oCatalogData.remoteId
         *   The remote catalog's id on the remote system such as "HANA_CATALOG"
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or failure
         *   of this asynchronous operation. In case of success, no further details are passed.
         *   In case of failure, an error message is passed.
         *
         * @since 1.21.2
         * @public
         */
        this.addCatalogTileToGroup = function (sCatalogTileId, sGroupId, oCatalogData) {
            var oDeferred = new jQuery.Deferred(),
                sError,
                fnFailure = oDeferred.reject.bind(oDeferred),
                fnMatcher,
                sLegacyHanaCatalogId = "X-SAP-UI2-HANA:hana?remoteId=HANA_CATALOG";

            function isLegacyHanaCatalog(oCatalog) {
                // this is ABAP specific but should not harm other platforms
                return oLaunchPageService.getCatalogId(oCatalog) === sLegacyHanaCatalogId;
            }

            fnMatcher = oCatalogData ? isMatchingRemoteCatalog : isLegacyHanaCatalog;
            oCatalogData = oCatalogData || {id: sLegacyHanaCatalogId};
            // TODO first determine the catalog, then call onCatalogTileAdded incl. its ID
            oLaunchPageService.onCatalogTileAdded(sCatalogTileId);
            oLaunchPageService.getCatalogs()
                .fail(fnFailure)
                .done(function (aCatalogs) {
                    var oSourceCatalog;
                    aCatalogs.forEach(function (oCatalog) {
                        if (fnMatcher(oCatalog, oCatalogData)) {
                            if (!oSourceCatalog) {
                                oSourceCatalog = oCatalog;
                            } else {
                                // Note: We use the first match. If more than one catalog matches
                                // this might be the wrong one, resulting in a "missing tile"
                                // error. However we log the multiple catalog match before.
                                jQuery.sap.log.warning("More than one matching catalog: "
                                    + JSON.stringify(oCatalogData), null,
                                    "sap.ushell.services.Bookmark");
                            }
                        }
                    });
                    if (oSourceCatalog) {
                        doAddCatalogTileToGroup(oDeferred, sCatalogTileId, oSourceCatalog,
                            sGroupId);
                    } else {
                        sError = "No matching catalog found: " + JSON.stringify(oCatalogData);
                        jQuery.sap.log.error(sError, null, "sap.ushell.services.Bookmark");
                        oDeferred.reject(sError);
                    }
                });
            return oDeferred.promise();
        };

        /**
         * Counts <b>all</b> bookmarks pointing to the given URL from all of the user's pages. You
         * can use this method to check if a bookmark already exists.
         * <p>
         * This is a potentially asynchronous operation in case the user's pages have not yet been
         * loaded completely!
         *
         * @param {string} sUrl
         *   The URL of the bookmarks to be counted, exactly as specified to {@link #addBookmark}.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or failure
         *   of this asynchronous operation. In case of success, the count of existing bookmarks
         *   is provided (which might be zero). In case of failure, an error message is passed.
         *
         * @see #addBookmark
         * @since 1.17.1
         * @public
         */
        this.countBookmarks = function (sUrl) {
            return oLaunchPageService.countBookmarks(sUrl);
        };

        /**
         * Deletes <b>all</b> bookmarks pointing to the given URL from all of the user's pages.
         *
         * @param {string} sUrl
         *   The URL of the bookmarks to be deleted, exactly as specified to {@link #addBookmark}.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or
         *   failure of this asynchronous operation. In case of success, the number of deleted
         *   bookmarks is provided (which might be zero). In case of failure, an error message is
         *   passed.
         *
         * @see #addBookmark
         * @see #countBookmarks
         * @since 1.17.1
         * @public
         */
        this.deleteBookmarks = function (sUrl) {
            return oLaunchPageService.deleteBookmarks(sUrl);
        };

        /**
         * Updates <b>all</b> bookmarks pointing to the given URL on all of the user's pages
         * with the given new parameters. Parameters which are omitted are not changed in the
         * existing bookmarks.
         *
         * @param {string} sUrl
         *   The URL of the bookmarks to be updated, exactly as specified to {@link #addBookmark}.
         *   In case you need to update the URL itself, pass the old one here and the new one as
         *   <code>oParameters.url</code>!
         * @param {object} oParameters
         *   The bookmark parameters as documented in {@link #addBookmark}.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or
         *   failure of this asynchronous operation.  In case of success, the number of updated
         *   bookmarks is provided (which might be zero). In case of failure, an error message is
         *   passed.
         *
         * @see #addBookmark
         * @see #countBookmarks
         * @see #deleteBookmarks
         * @since 1.17.1
         * @public
         */
        this.updateBookmarks = function (sUrl, oParameters) {
            return oLaunchPageService.updateBookmarks(sUrl, oParameters);
        };
    };
    sap.ushell.services.Bookmark.hasNoAdapter = true;
}());

}; // end of sap/ushell/services/Bookmark.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.CrossApplicationNavigation') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview Cross Application Navigation
 *
 *   This file exposes an API to perform (invoke) Cross Application Navigation
 *   for applications
 *
 *   It exposes interfaces to perform a hash change and/or trigger an external navigation
 *
 * @version 1.24.5
 */


/*global jQuery, sap */

(function () {
    "use strict";
    /*global jQuery, sap, location, hasher */
    jQuery.sap.declare("sap.ushell.services.CrossApplicationNavigation");

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("CrossApplicationNavigation")</code>.
     * Constructs a new instance of the CrossApplicationNavigation service.
     *
     * @class The Unified Shell's CrossApplicationNavigation service, which allows to
     *        navigate to external targets or create links to external targets
     *
     * CrossApplicationNavigation currently provides platform independent functionality.
     *
     * This interface is for usage by applications or shell renderers/containers.
     *
     * Usage:
     *
     * example: see demoapps/AppNavSample/MainXML.controller.js
     *
     * <code>
     *   var xnavservice =  sap.ushell && sap.ushell.Container && sap.ushell.Container.getService;<br/>
     *      && sap.ushell.Container.getService("CrossApplicationNavigation");<br/>
     *   var href = ( xnavservice && xnavservice.hrefForExternal({<br/>
     *          target : { semanticObject : "Product", action : "display" },<br/>
     *          params : { "ProductID" : "102343333" }<br/>
     *          })) || "";<br/>
     * </code>
     *
     *
     * Parameter names and values are case sensitive.
     *
     * Note that the usage of multi-valued parameters (specifying an array with more than one member as parameter value, e.g.
     * <code>  params : { A : ["a1", "a2"] } </code> )
     * is possible with this API but <b>strongly discouraged</b>. Especially the navigation target matching performed at the back-end
     * is not supported for multi-value parameters. Furthermore, it is not guaranteed that additional parameter values specified in the
     * back-end configuration are merged with parameter values passed in this method.  
     *
     * Note that the application parameter length (including SemanticObject/Action) shall not exceed 512 bytes when serialized as UTF-8
     *
     * Note that when receiving the values as startup parameters (as part of the component data object) single values
     * are represented as an array of size 1. Above example is returned as
     * <code> deepEqual(getComponentData().startupParameters ,  { "ProductID" : [ "102343333" ] } ) </code>
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     * @public
     */
    sap.ushell.services.CrossApplicationNavigation = function () {
        /**
         * Adds the system of the current application specified as <code>sap-system</code>
         * parameter in its URL to the parameter object <code>oTarget</code> used in the
         * methods {@link #hrefForExternal()} and {@link #toExternal()}.
         * The system is only added if the current application specifies it and
         * <code>oTarget</code> does not already contain this parameter.
         *
         * @param oTarget {object} The navigation target object
         *
         * @private
         */
        function addCurrentSystem(oTarget) {
            var oResolution = sap.ushell.Container.getService("NavTargetResolution")
                    .getCurrentResolution(),
                sSeparator,
                sSystem;

            if (oResolution && oResolution.url) {
                sSystem = jQuery.sap.getUriParameters(oResolution.url).get("sap-system");
            }

            if (!sSystem || typeof oTarget !== "object") {
                return;
            }
            if (oTarget.target && oTarget.target.shellHash) {
                if (typeof oTarget.target.shellHash === "string" &&
                        !/[?&]sap-system=/.test(oTarget.target.shellHash)) {
                    sSeparator = (oTarget.target.shellHash.indexOf("?") > -1) ? "&" : "?";
                    oTarget.target.shellHash += sSeparator + "sap-system=" + sSystem;
                }
                return;
            }
            oTarget.params = oTarget.params || {};
            if (!Object.prototype.hasOwnProperty.call(oTarget.params, "sap-system")) {
                oTarget.params["sap-system"] = sSystem;
            }
        }

        /**
        * Returns a string which can be put into the DOM (e.g. in a link tag)
        *
        * @param {oArgs} oArgs
        *     object encoding a semantic object and action
        *  e.g. <code>{ target : { semanticObject : "AnObject", action: "Action" },<br/>
        *         params : { A : "B" } }</code>
        *  or
        *  e.g. <code>{ target : { semanticObject : "AnObject", action: "Action", context  : "AB7F3C" },<br/>
        *         params : { A : "B", c : "e" } }</code>
        *  or
        *      <code>{ target : { shellHash : "SO-36&jumper=postman" },
        *      }</code>
        * @returns {string}
        *     the href for the specified parameters; always starting with a hash character; all parameters are URL-encoded (via encodeURIComponent)
        *
        * Note that the application parameter length (including SemanticObject/Action) shall not exceed 512 bytes when serialized as utf-8
        *
        *
        * @since 1.15.0
        * @public
         */
        this.hrefForExternal = function (oArgs) {
            if (sap.ushell && sap.ushell.services && sap.ushell.Container && typeof sap.ushell.Container.getService === "function" && sap.ushell.Container.getService("ShellNavigation")) {
                addCurrentSystem(oArgs);
                return sap.ushell.Container.getService("ShellNavigation").hrefForExternal(oArgs);
            }
            jQuery.sap.log.debug("Shell not available, no Cross App Navigation");
            return "";
        };

        /**
        *
        * Navigate to an external target
        *
        * @param {Object} oArgs
        * configuration object describing the target
        *
        *  e.g. <code>{ target : { semanticObject : "AnObject", action: "Action" },<br/>
        *         params : { A : "B" } }</code>
        *    constructs sth. like   <code>#AnObject-Action?A=B&C=e&C=j</code>;
        *  or
        *  e.g. <code>{ target : { semanticObject : "AnObject", action: "Action", context  : "AB7F3C" },<br/>
        *         params : { A : "B", c : "e" } }</code>
        *  or
        *      <code>{ target : { shellHash : "SO-36&jumper=postman" },
        *      }</code>
        *
        * and navigate to it via changing the hash
        *
        * Note that the application parameter length (including SemanticObject/Action) shall not exceed 512 bytes when serialized as utf-8
        *
        * @since 1.15.0
        * @public
        */
        this.toExternal = function (oArgs) {
            if (sap.ushell && sap.ushell.services && sap.ushell.Container && typeof sap.ushell.Container.getService === "function" && sap.ushell.Container.getService("ShellNavigation")) {
                addCurrentSystem(oArgs);
                sap.ushell.Container.getService("ShellNavigation").toExternal(oArgs);
                return;
            }
            jQuery.sap.log.debug("Shell not avialable, no Cross App Navigation");
            return;
        };


        /**
         * Returns a string which can be put into the DOM (e.g. in a link tag)
         * given an application specific hash suffix
         *
         * Example: <code>hrefForAppSpecificHash("View1/details/0/")</code> returns
         * <code>#SemanticObject-Action&/View1/details/0/</code> if the current application
         * runs in the shell and was started using "SemanticObject-Action" as
         * shell navigation hash
         *
         * @param {string} sAppHash
         *   the app specific router, obtained e.g. via router.getURL(...)
         * @returns {string}
         * A string which can be put into the link tag,
         *          containing the current shell navigation target and the
         *          specified application specific hash suffix
         *
         * Note that sAppHash shall not exceed 512 bytes when serialized as UTF-8
         * @since 1.15.0
         * @public
         */
        this.hrefForAppSpecificHash = function (sAppHash) {
            if (sap.ushell && sap.ushell.services && sap.ushell.Container && typeof sap.ushell.Container.getService === "function" && sap.ushell.Container.getService("ShellNavigation")) {
                return sap.ushell.Container.getService("ShellNavigation").hrefForAppSpecificHash(sAppHash);
            }
            jQuery.sap.log.debug("Shell not available, no Cross App Navigation; fallback to app-specific part only");
            // Note: this encoding is to be kept aligned with the encoding in hasher.js ( see _encodePath( ) )
            return "#" + encodeURI(sAppHash);
        };


        /**
         * Resolves a given semantic object and business parameters to a list of links,
         * taking into account the form factor of the current device.
         *
         * @param {string} sSemanticObject
         *   the semantic object such as <code>"AnObject"</code>
         * @param {object} [mParameters]
         *   the map of business parameters with values, for instance
         *   <pre>
         *   {
         *     A: "B",
         *     c: "e"
         *   }
         *   </pre>
         * @param {boolean} [bIgnoreFormFactor=false]
         *   when set to <code>true</code> the form factor of the current device is ignored
         *
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which is resolved with an array of
         *   link objects containing (at least) the following properties:
         * <pre>
         * {
         *   intent: "#AnObject-Action?A=B&C=e",
         *   text: "Perform action"
         * }
         * </pre>
         *
         *
         * @since 1.19.0
         * @public
         */
        this.getSemanticObjectLinks = function (sSemanticObject, mParameters, bIgnoreFormFactor) {
            // Note: check if "Shell not available" is not needed
            return sap.ushell.Container.getService("NavTargetResolution")
                .getSemanticObjectLinks(sSemanticObject, mParameters, bIgnoreFormFactor);
        };

        /**
         * Tells whether the given intent(s) are supported, taking into account the form factor of
         * the current device. "Supported" means that navigation to the intent is possible.
         *
         * @param {string[]} aIntents
         *   the intents (such as <code>"#AnObject-Action?A=B&c=e"</code>) to be checked
         *
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which is resolved with a map
         *   containing the intents from <code>aIntents</code> as keys. The map values are
         *   objects with a property <code>supported</code> of type <code>boolean</code>.<br/>
         *   Example:
         * <pre>
         * {
         *   "#AnObject-Action?A=B&c=e": { supported: false },
         *   "#AnotherObject-Action2": { supported: true }
         * }
         * </pre>
         *
         * @since 1.19.1
         * @public
         */
        this.isIntentSupported = function (aIntents) {
            // Note: check if "Shell not available" is not needed
            return sap.ushell.Container.getService("NavTargetResolution")
                .isIntentSupported(aIntents);
        };
    }; // CrossApplicationNavigation
    sap.ushell.services.CrossApplicationNavigation.hasNoAdapter = true;
}());

}; // end of sap/ushell/services/CrossApplicationNavigation.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.LaunchPage') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The Unified Shell's page builder service.
 *
 * @version 1.24.5
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.LaunchPage");

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("LaunchPage")</code>.
     * Constructs a new instance of the page builder service.
     *
     * @class A service for handling groups, tiles and catalogs.
     * The functions that return the main objects are getGroups, getGroupTitle, getCatalogs and getCatalogTiles.
     * Since the implementation (i.e. adapter) is platform specific, do not call or access properties and functions of returned objects.
     * Instead, use other functions of the LaunchPage service with the relevant object as the input parameter.
     *
     * @param {object} oAdapter
     *     the page builder adapter for the logon system
     * @param {object} oContainerInterface
     *     the interface provided by the container
     *
     * @class The Unified Shell's page builder service.
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     *
     * @public
     */
    sap.ushell.services.LaunchPage = function (oAdapter, oContainerInterface) {
        var that = this;

        /**
         * Returns the groups of the user.
         * In case of success, the <code>done</code> function gets an array of 'anonymous' groups.
         * The order of the array is the order in which the groups will be displayed to the user.
         *
         * @returns {object}
         *  jQuery.promise object.
         *
         * @public
         */
        this.getGroups = function () {
            var oPromise = oAdapter.getGroups();
            oPromise.fail(function () {
                jQuery.sap.log.error("getGroups failed");
            });
            return oPromise;
        };

        /**
         * Returns the default group of the user.
         * In case of success, the <code>done</code> function gets an 'anonymous' object representing the default group.
         *
         * @returns {object}
         *  jQuery.promise object.
         *
         * @public
         */
        this.getDefaultGroup = function () {
            var oPromise  = oAdapter.getDefaultGroup();
            oPromise.fail(function () {
                jQuery.sap.log.error("getDefaultGroup failed");
            });
            return oPromise;
        };

        /**
         * Returns the title of the given group.
         *
         * @param {object} oGroup
         *     The group whose title is returned
         * @returns {string}
         *  group title
         *
         * @public
         */
        this.getGroupTitle = function (oGroup) {
            return oAdapter.getGroupTitle(oGroup);
        };

        /**
         * Returns the unique identifier of the given group
         *
         * @param {object} oGroup
         *     The group whose id is returned
         * @returns {string}
         *  Group id
         *
         * @public
         */
        this.getGroupId = function (oGroup) {
            return oAdapter.getGroupId(oGroup);
        };

        /**
         * Returns an array of 'anonymous' tiles of a group.
         * The order of the array is the order of tiles that will be displayed to the user.
         *
         * @param {object} oGroup
         *     The group whose tiles are returned
         *
         * @returns {Array}
         *  The group tiles array
         *
         * @public
         */
        this.getGroupTiles = function (oGroup) {
            return oAdapter.getGroupTiles(oGroup);
        };

        /**
         * Adds a new group.
         *
         * In case of success, the <code>done</code> function gets the new added group object.
         * Intention: the page builder adds this group to the end of the home screen.
         *
         * In case of failure, the <code>fail</code> function returns the consistent (i.e. persisted) backend state of all groups.
         *
         * @param {string} sTitle
         *     The title of the new group
         *
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.addGroup = function (sTitle) {
            var oPromise = oAdapter.addGroup(sTitle);
            oPromise.fail(function () {
                jQuery.sap.log.error("addGroup " + sTitle + " failed");
            });
            return oPromise;
        };

        /**
         * Removes a group.
         *
         * In case of success, the <code>done</code> function is called without any value (i.e. input data).
         * Intention: the page builder already removed the page (or hid it from the user) and if successful - nothing needs to be done.
         *
         * In case of failure, the <code>fail</code> function returns the consistent (i.e. persisted) backend state of all groups.
         *
         * @param {object} oGroup
         *     The group to be removed
         * @param {integer} iIndex
         *     The index of the group to be removed
         *
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.removeGroup = function (oGroup, iIndex) {
            var oPromise = oAdapter.removeGroup(oGroup, iIndex);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to removeGroup " + that.getGroupTitle(oGroup));
            });
            return oPromise;
        };

        /**
         * Resets a group.
         *
         * The reset action is relevant for a group that was assigned to the user by an administrator.
         * The reset action means that the group is set back to the state defined by the administrator,
         * and changes made by the end user (e.g. adding tiles) are removed.
         * A group can be reset multiple times.
         *
         * In case of success, the <code>done</code> function gets the reset group object.
         *
         * In case of failure, or when the given group was created by the user (i.e. can't be reset)- <code>fail</code> handler is called,
         * returning the consistent (i.e. persisted) backend state of all groups.
         * The returned group object is the same as the one returned by @see sap.ushell.services.LaunchPage.getGroups
         *
         * @param {object} oGroup
         *     The group to be reset
         * @param {integer} iIndex
         *     The index of the group to be reset
         *
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.resetGroup = function (oGroup, iIndex) {
            var oPromise = oAdapter.resetGroup(oGroup, iIndex);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to resetGroup " + that.getGroupTitle(oGroup));
            });
            return oPromise;
        };

        /**
         * Checks if a group can be removed.
         *
         * Returns <code>true</code> if the group can be removed (i.e. if the given group was created by the user)
         * and <code>false</code> if the group can only be reset.
         *
         * @param {object} oGroup
         *     The group to be checked
         *
         * @returns {boolean}
         *  <code>true</code> if removable; <code>false</code> if resettable
         *
         * @public
         */
        this.isGroupRemovable = function (oGroup) {
            return oAdapter.isGroupRemovable(oGroup);
        };

        /**
         * Moves a group to a new index (i.e. location).
         *
         * In case of success, the <code>done</code> function is called without any value.
         * Intention: the page builder already moved the page (visible to the user) and if successful - nothing needs to be done.
         * In case of failure, the <code>fail</code> function returns the consistent (i.e. persisted) backend state of all groups.
         *
         * @param {object} oGroup
         *     The group to be moved
         * @param {integer} iNewIndex
         *     The new index for the group
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.moveGroup = function (oGroup, iNewIndex) {
            var oPromise = oAdapter.moveGroup(oGroup, iNewIndex);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to moveGroup " + that.getGroupTitle(oGroup));
            });
            return oPromise;
        };

        /**
         * Sets the title of an existing group.
         *
         * In case of success, the <code>done</code> function returns nothing.
         * Intention: the page builder knows the new title, and if successful nothing needs to be done,
         *  as the title is already visible to the user.
         * In case of failure, the <code>fail</code> function returns the consistent (i.e. persisted) backend state
         *  of the group title, in most cases the old title.
         *
         * @param {string} sTitle
         *     The new title of the group
         * @param {object} oGroup
         *     The group whose title is set
         *
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.setGroupTitle = function (oGroup, sTitle) {
            var oPromise = oAdapter.setGroupTitle(oGroup, sTitle);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to set Group title: " + that.getGroupTitle(oGroup));
            });
            return oPromise;
        };

        /**
         * This function receives an array of groups IDs that were selected as hidden by the end user and stores them in the back-end for persistency.
         * Any group not in the list will become visible (again).
         * 
         * @param {string[]} aHiddenGroupsIDs
         *    An Array containing the IDs of the groups that should be stored as hidden.
         * @returns {object}
         *  promise object.
         */
        this.hideGroups = function (aHiddenGroupsIDs) {
            var oDeferred = jQuery.Deferred();
            if (typeof oAdapter.hideGroups !== "function") {
                oDeferred.reject('hideGroups() is not implemented in the Adapter.');
            } else {
                oAdapter.hideGroups(aHiddenGroupsIDs).done(function () {
                    oDeferred.resolve();
                }).fail(function (sMsg) {
                    jQuery.sap.log.error("Fail to store groups visibility." + sMsg);
                    oDeferred.reject();
                });
            }
            return oDeferred.promise();
        };

        /**
         * This function checks if a group should be visible or hidden for the specific end user.
         * An end user has the ability to configure which groups should be hidden in his dashboard (as long as edit mode is enabled).
         * 
         * @param {object} oGroup
         *     A group to be checked
         * @returns {boolean} true \ false accordingly.
         */
        this.isGroupVisible = function (oGroup) {
            if (typeof oAdapter.isGroupVisible === "function") {
                return oAdapter.isGroupVisible(oGroup);
            }
            return true;
        };

        /**
         * Adds a tile to a group.
         *
         * If no group is provided then the tile is added to the default group.
         *
         * In case of success, the <code>done</code> function returns the new tile.
         * Intention: the page builder by default puts this tile at the end of the default group.
         * In case of failure, the <code>fail</code> function should return the consistent (i.e. persisted) backend state of the default group.
         *
         * @param {object} oCatalogTile
         *     An 'anonymous' tile from the tile catalog
         * @param {object} [oGroup]
         *     The target group
         *
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.addTile = function (oCatalogTile, oGroup) {
            var oPromise = oAdapter.addTile(oCatalogTile, oGroup);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to add Tile: " + that.getCatalogTileId(oCatalogTile));
            });
            return oPromise;
        };

        /**
         * Removes a tile from a group.
         *
         * In case of success, the <code>done</code> function returns the new tile.
         * Intention: the page builder has already 'hidden' (or removed) the tile.
         *
         * In case of failure, the <code>fail</code> function should return the consistent (i.e. persisted) backend state of the group.
         *
         * @param {object} oTile
         *     The tile instance to remove
         * @param {object} oGroup
         *     The group from which to remove the tile instance
         * @param {integer} iIndex
         *     The tile index
         *
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.removeTile = function (oGroup, oTile, iIndex) {
            var oPromise = oAdapter.removeTile(oGroup, oTile, iIndex);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to remove Tile: " + that.getTileId(oTile));
            });
            return oPromise;
        };

        /**
         * Moves a tile within a group or between different groups.
         *
         * In case of success, the <code>done</code> function returns nothing.
         * Intention: the page builder already moved the tile.
         *
         * In case of failure, the <code>fail</code> function returns the consistent (i.e. persisted) backend state of the source group and the target group.
         * The result is in the following format {source:[{},{}], target:[{},{}]}.
         *
         * The source and the target groups tiles are in the form of the @see sap.ushell.services.LaunchPage.getGroupTiles
         *
         * @param {object} oTile
         *     a tile instance to be moved
         *     The same object type as the one returned by <code>sap.ushell.services.LaunchPage.getGroupTiles</code>
         * @param {integer} iSourceIndex
         *     the index in the source group
         * @param {integer} iTargetIndex
         * the target group index, in case this parameter is not supplied we assume the move tile is within the source group using iSourceIndex
         * @param {object} oSourceGroup
         *     the source group the tile came from
         * @param {object} [oTargetGroup]
         *    The same object type as the one returned by <code>sap.ushell.services.LaunchPage.getGroups</code>
         *    the target group the tile will be placed in, in case this
         *     parameter is not supplied we assume the move tile is within the source group
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.moveTile = function (oTile, iSourceIndex, iTargetIndex, oSourceGroup, oTargetGroup) {
            var oPromise = oAdapter.moveTile(oTile, iSourceIndex, iTargetIndex, oSourceGroup, oTargetGroup);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to move Tile: " + that.getTileId(oTile)); // TODO: complete message
            });
            return oPromise;
        };

        /**
         * Returns the tile's unique identifier
         *
         * @param {object} oTile
         *     The tile
         * @returns {string}
         *     Tile id
         *
         * @public
         */
        this.getTileId = function (oTile) {
            return oAdapter.getTileId(oTile);
        };

        /**
         * Returns the tile's title.
         *
         * @param {object} oTile
         *     The tile
         * @returns {string}
         *     The title
         *
         * @public
         */
        this.getTileTitle = function (oTile) {
            return oAdapter.getTileTitle(oTile);
        };

        /**
         * Returns UI5 view or control of the tile.
         * In case of success the <code>done</code> function should return UI5 view or control of the tile.
         * In case of failure the <code>fail</code> function should return nothing.
         *
         * @param {object} oTile
         *     The tile
         *    
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.getTileView = function (oTile) {
            var oDfd = oAdapter.getTileView(oTile);
            /**
             * API has change to return a promise object instead the tile view since 1.24 version.
             * For backwards compatibility we check if the adapter has return a promise object,
             * if not we create one resolve it with the tile view and return the promise
             */
            if(!jQuery.isFunction(oDfd.promise)){
                oDfd = jQuery.Deferred().resolve(oDfd).promise();
            }
            return oDfd;
        };

        /**
         * Returns the tile size in the format of 1x1 or 1x2 string
         *
         * @param {object} oTile
         *     The tile
         *
         * @returns {string}
         *  tile size in units in 1x1 format
         *
         * @public
         */
        this.getTileSize = function (oTile) {
            return oAdapter.getTileSize(oTile);
        };

        /**
         * Returns the tile's navigation target.
         *
         * The navigation target string is used (when assigned to <code>location.hash</code>) for performing a navigation action
         *  that eventually opens the application represented by the tile.
         *
         * @param {object} oTile
         *     the tile
         * @returns {string}
         *  the tile target
         *
         * @public
         */
        this.getTileTarget = function (oTile) {
            return oAdapter.getTileTarget(oTile);
        };

        /**
         * Returns the technical information about the tile which can be helpful for problem analysis.
         * <p>
         * The implementation of this method in the platform-specific adapter is optional.
         *
         * @param {object} oTile
         *     the tile
         * @returns {string}
         *     debug information for the tile
         */
        this.getTileDebugInfo = function (oTile) {
            if (typeof oAdapter.getTileDebugInfo === "function") {
                return oAdapter.getTileDebugInfo(oTile);
            }

            return undefined;
        };

        /**
         * Returns <code>true</code> if the tile's target intent is supported taking into account
         * the form factor of the current device. "Supported" means that navigation to the intent
         * is possible.
         * <p>
         * This function may be called both for group tiles and for catalog tiles.
         *
         * @param {object} oTile
         *   the group tile or catalog tile
         * @returns {boolean}
         *   <code>true</code> if the tile's target intent is supported
         * @since 1.21.0
         */
        this.isTileIntentSupported = function (oTile) {
            if (typeof oAdapter.isTileIntentSupported === "function") {
                return oAdapter.isTileIntentSupported(oTile);
            }

            return true;
        };

        /**
         * Triggers a refresh action of a tile.
         * Typically this action is related to the value presented in dynamic tiles
         *
         * @param {object} oTile
         *      The tile
         *
         * @public
         */
        this.refreshTile = function (oTile) {
            oAdapter.refreshTile(oTile);
        };

        /**
         * Sets the tile's visibility state and notifies the tile about the change.
         *
         * @param {object} oTile
         *     The tile
         * @param {boolean} bNewVisible
         *   The tile's required visibility state.
         *
         * @public
         */
        this.setTileVisible = function (oTile, bNewVisible) {
            return oAdapter.setTileVisible(oTile, bNewVisible);
        };

        /**
         * Returns the catalogs of the user.
         *
         * <p>
         * Only severe failures make the overall operation fail. If loading of a remote catalog fails,
         * this is handled gracefully by providing a "dummy" empty catalog (with ID instead of title).
         * Use {@link getCatalogError} to check if a (remote) catalog could not be loaded from the backend.
         * <p>
         * Progress notifications are sent for each single catalog, i.e. attaching a <code>progress</code> handler gives you the same
         * possibilities as attaching a <code>done</code> handler, but with the advantage of
         * improved responsiveness.
         *
         * @example
         *   sap.ushell.Container.getService("LaunchPage").getCatalogs()
         *   .fail(function (sErrorMessage) { // string
         *     // handle error situation
         *   })
         *   .progress(function (oCatalog) { // object
         *     // do s.th. with single catalog
         *   })
         *   .done(function (aCatalogs) { // object[]
         *     aCatalogs.forEach(function (oCatalog) {
         *       // do s.th. with single catalog
         *     });
         *   });
         *
         * @returns {object}
         *  <code>jQuery.Deferred</code> object's promise
         *   In case of success, an array of black-box catalog objects is provided (which might be empty).
         *   In case of failure, an error message is passed.
         *   Progress notifications are sent for each single catalog, providing a single black-box catalog object each time.
         *
         * @public
         */
        this.getCatalogs = function () {
            return oAdapter.getCatalogs();
        };

        /**
         * Returns whether the catalogs collection previously returned by <code>getCatalogs()</code> is still valid.
         *
         * Initially the result is <code>false</code> until <code>getCatalogs()</code> has been called.
         * Later, the result might be <code>false</code> again in case one of the catalogs has been invalidated,
         * e.g. due to adding a tile to a catalog ("Add to catalog" scenario).
         *
         * @returns {boolean} <code>true</code> in case the catalogs are still valid; <code>false</code> if not
         *
         * @since 1.16.4
         * @see #getCatalogs
         *
         * @public
         */
        this.isCatalogsValid = function () {
            return oAdapter.isCatalogsValid();
        };

        /**
         * Returns catalog's technical data.
         *
         * @param {object} oCatalog
         *     the catalog
         *
         * @returns {object}
         *     An object that includes the following properties (the list may include additional properties):
         *     <ul>
         *     <li><code>id</code>: the catalog ID
         *     <li><code>systemId</code>: [remote catalogs] the ID of the remote system
         *     <li><code>remoteId</code>: [remote catalogs] the ID of the catalog in the
         *       remote system
         *     <li><code>baseUrl</code>: [remote catalogs] the base URL of the catalog in the
         *       remote system
         *     </ul>
         *
         * @since 1.21.2
         *
         * @public
         */
        this.getCatalogData = function (oCatalog) {
            if (typeof oAdapter.getCatalogData !== "function") {
                jQuery.sap.log.warning("getCatalogData not implemented in adapter", null,
                    "sap.ushell.services.LaunchPage");
                return {
                    id: this.getCatalogId(oCatalog)
                };
            }
            return oAdapter.getCatalogData(oCatalog);
        };

        /**
         * Returns the catalog's technical error message in case it could not be loaded from the
         * backend.
         * <p>
         * <b>Beware:</b> The technical error message is not translated!
         *
         * @param {object} oCatalog
         *     the catalog
         * @returns {string}
         *     The technical error message or <code>undefined</code> if the catalog was loaded
         *     properly
         * @since 1.17.1
         *
         * @public
         */
        this.getCatalogError = function (oCatalog) {
            return oAdapter.getCatalogError(oCatalog);
        };

        /**
         * Returns the catalog's unique identifier
         *
         * @param {object} oCatalog
         *     The catalog
         *
         * @returns {string}
         *  Catalog id
         *
         * @public
         */
        this.getCatalogId = function (oCatalog) {
            return oAdapter.getCatalogId(oCatalog);
        };

        /**
         * Returns the catalog's title
         *
         * @param {object} oCatalog
         *     The catalog
         *
         * @returns {string}
         *  Catalog title
         *
         * @public
         */
        this.getCatalogTitle = function (oCatalog) {
            return oAdapter.getCatalogTitle(oCatalog);
        };

        /**
         * Returns the tiles of a catalog.
         * In case of success, the <code>done</code> function of the returned promise object gets an array of 'anonymous' tiles of the catalog.
         *
         * @param {object} oCatalog
         *     The catalog
         *
         * @returns {object}
         *  jQuery.promise object.
         *
         * @public
         */
        this.getCatalogTiles = function (oCatalog) {
            var oPromise = oAdapter.getCatalogTiles(oCatalog);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to get Tiles of Catalog: " + that.getCatalogTitle(oCatalog));
            });
            return oPromise;
        };

        /**
         * Returns catalog tile's unique identifier.
         * This function may be called for a catalog tile or (since 1.21.0) for a group tile.
         * In the latter case, the function returns the unique identifier of the catalog tile on which the group tile is based.
         *
         * @param {object} oTile
         *     The tile or the catalog tile
         *
         * @returns {string}
         *  Tile id
         *
         * @public
         */
        this.getCatalogTileId = function (oTile) {
            return oAdapter.getCatalogTileId(oTile);
        };

        /**
         * Returns the catalog tile's title
         *
         * @param {object} oCatalogTile
         *     The catalog tile
         *
         * @returns {string}
         *  Tile title
         *
         * @public
         */
        this.getCatalogTileTitle = function (oCatalogTile) {
            return oAdapter.getCatalogTileTitle(oCatalogTile);
        };

        /**
         * Returns the size of a catalog tile as a string. For example: "1x1", "1x2"  
         *
         * @param {object} oCatalogTile
         *     The catalog tile
         *
         * @returns {string}
         *  Tile size in units in 1x1 or 1x2 format
         *
         * @public
         */
        this.getCatalogTileSize = function (oCatalogTile) {
            return oAdapter.getCatalogTileSize(oCatalogTile);
        };

        /**
         * Returns the UI5 view or control  of a catalog tile
         *
         * @param {object} oCatalogTile
         *     The catalog tile
         *
         * @returns {object}
         *  UI5 view or control
         *
         * @public
         */
        this.getCatalogTileView = function (oCatalogTile) {
            return oAdapter.getCatalogTileView(oCatalogTile);
        };

        /**
         * Returns the navigation target URL of a catalog tile.
         * If the catalog tile does not exist, this function implicitly instantiates it using {@link #getCatalogTileView(oCatalogTile)}.
         *
         * @param {object} oCatalogTile
         *     The catalog tile
         *
         * @returns {string}
         *     The target URL for the catalog tile's underlying application as provided via the
         *     "preview" contract
         *
         * @public
         */
        this.getCatalogTileTargetURL = function (oCatalogTile) {
            return oAdapter.getCatalogTileTargetURL(oCatalogTile);
        };

        /**
         * Returns the keywords associated with a catalog tile which can be used to find the
         * catalog tile in a search.
         *
         * @param {object} oCatalogTile
         *      The catalog tile
         *
         * @returns string[]
         *      The keywords associated with this catalog tile
         *
         * @public
         */
        this.getCatalogTileKeywords = function (oCatalogTile) {
            return oAdapter.getCatalogTileKeywords(oCatalogTile);
        };

        /**
         * Returns preview title for a catalog tile.
         *
         * @param {object} oCatalogTile
         *     The catalog tile
         *
         * @returns {string}
         *     Preview title for the catalog tile's underlying application as provided via the
         *     "preview" contract
         *
         * @since 1.16.3
         *
         * @public
         */
        this.getCatalogTilePreviewTitle = function (oCatalogTile) {
            return oAdapter.getCatalogTilePreviewTitle(oCatalogTile);
        };

        /**
         * Returns preview icon for a catalog tile.
         *
         * @param {object} oCatalogTile
         *     The catalog tile
         *
         * @returns {string}
         *     Preview icon as URL/URI for the catalog tile's underlying application as provided via the "preview" contract
         *
         * @since 1.16.3
         *
         * @public
         */
        this.getCatalogTilePreviewIcon = function (oCatalogTile) {
            return oAdapter.getCatalogTilePreviewIcon(oCatalogTile);
        };

        /**
         * Adds a bookmark to the user's home page.
         *
         * @param {object} oParameters
         *   bookmark parameters. In addition to title and URL, a bookmark might allow additional
         *   settings, such as an icon or a subtitle. Which settings are supported depends
         *   on the environment in which the application is running. Unsupported parameters will be
         *   ignored.
         * @param {string} oParameters.title
         *   The title of the bookmark.
         * @param {string} oParameters.url
         *   The URL of the bookmark. If the target application shall run in the Shell the URL has
         *   to be in the format <code>"#SO-Action~Context?P1=a&P2=x&/route?RPV=1"</code>
         * @param {string} [oParameters.icon]
         *   The icon URL of the bookmark (e.g. <code>"sap-icon://home"</code>).
         * @param {string} [oParameters.info]
         *   The information text of the bookmark.
         * @param {string} [oParameters.subtitle]
         *   The subtitle of the bookmark.
         * @param {string} [oParameters.serviceUrl]
         *   The URL to a REST or OData service that provides some dynamic information for the
         *   bookmark.
         * @param {string} [oParameters.serviceRefreshInterval]
         *   The refresh interval for the <code>serviceUrl</code> in seconds.
         * @param {string} [oParameters.numberUnit]
         *   The unit for the number retrieved from <code>serviceUrl</code>.
         * @returns {object}
         *   a jQuery promise.
         *
         * @see sap.ushell.services.URLParsing#getShellHash
         * @since 1.15.0
         */
        this.addBookmark = function (oParameters, oGroup) {
            if (!oParameters.title) {
                jQuery.sap.log.error("Add Bookmark - Missing title");
                throw new Error("Title missing in bookmark configuration");
            }
            if (!oParameters.url) {
                jQuery.sap.log.error("Add Bookmark - Missing URL");
                throw new Error("URL missing in bookmark configuration");
            }
            var oPromise = oAdapter.addBookmark(oParameters, oGroup);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to add bookmark for URL: " + oParameters.url + " and Title: " + oParameters.title);
            });
            return oPromise;
        };

        /**
         * Counts <b>all</b> bookmarks pointing to the given URL from all of the user's pages. You
         * can use this method to check if a bookmark already exists.
         * <p>
         * This is a potentially asynchronous operation in case the user's pages have not yet been
         * loaded completely!
         *
         * @param {string} sUrl
         *   The URL of the bookmarks to be counted, exactly as specified to {@link #addBookmark}.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or failure
         *   of this asynchronous operation. In case of success, the count of existing bookmarks
         *   is provided (which might be zero). In case of failure, an error message is passed.
         *
         * @see #addBookmark
         * @private
         */
        this.countBookmarks = function (sUrl) {
            if (!sUrl || typeof sUrl !== "string") {
                jQuery.sap.log.error("Fail to count bookmarks. No valid URL");
                throw new Error("Missing URL");
            }

            var oPromise = oAdapter.countBookmarks(sUrl);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to count bookmarks");
            });
            return oPromise;
        };

        /**
         * Deletes <b>all</b> bookmarks pointing to the given URL from all of the user's pages.
         *
         * @param {string} sUrl
         *   The URL of the bookmarks to be deleted, exactly as specified to {@link #addBookmark}.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or failure
         *   of this asynchronous operation. In case of success, the number of deleted bookmarks
         *   is provided (which might be zero). In case of failure, an error message is passed.
         *
         * @see #addBookmark
         * @see #countBookmarks
         * @private
         */
        this.deleteBookmarks = function (sUrl) {
            if (!sUrl || typeof sUrl !== "string") {
                throw new Error("Missing URL");
            }

            var oPromise = oAdapter.deleteBookmarks(sUrl);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to delete bookmark for: " + sUrl);
            });
            return oPromise;
        };

        /**
         * Updates <b>all</b> bookmarks pointing to the given URL on all of the user's pages
         * with the given new parameters. Parameters which are omitted are not changed in the
         * existing bookmarks.
         *
         * @param {string} sUrl
         *   The URL of the bookmarks to be updated, exactly as specified to {@link #addBookmark}.
         *   In case you need to update the URL itself, pass the old one here and the new one as
         *   <code>oParameters.url</code>!
         * @param {object} oParameters
         *   The bookmark parameters as documented in {@link #addBookmark}.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or failure
         *   of this asynchronous operation.  In case of success, the number of updated bookmarks
         *   is provided (which might be zero). In case of failure, an error message is passed.
         *
         * @see #addBookmark
         * @see #countBookmarks
         * @see #deleteBookmarks
         * @private
         */
        this.updateBookmarks = function (sUrl, oParameters) {
            if (!sUrl || typeof sUrl !== "string") {
                jQuery.sap.log.error("Fail to update bookmark. No valid URL");
                throw new Error("Missing URL");
            }
            if (!oParameters || typeof oParameters !== "object") {
                jQuery.sap.log.error("Fail to update bookmark. No valid parameters, URL is: " + sUrl);
                throw new Error("Missing parameters");
            }

            var oPromise = oAdapter.updateBookmarks(sUrl, oParameters);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to update bookmark for: " + sUrl);
            });
            return oPromise;
        };

        /**
         * This method is called to notify that the given tile has been added to some remote
         * catalog which is not specified further.
         *
         * @param {string} sTileId
         *   the ID of the tile that has been added to the catalog (as returned by that OData POST
         *   operation)
         * @private
         * @since 1.16.4
         */
        this.onCatalogTileAdded = function (sTileId) {
            return oAdapter.onCatalogTileAdded(sTileId);
        };
    };
}());

}; // end of sap/ushell/services/LaunchPage.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.Message') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.Message");

    /**
     * Message service.
     *
     * @constructor
     * @name sap.ushell.services.Message
     * @since 1.16.0
     * @public
     */
    sap.ushell.services.Message = function () {

        var fnShellCallBackFunction = null;

        /**
         * Initialisation:
         * This method is to be invoked by the Shell to register the message callback function.
         * The signature of the callback is defined via the show function.
         *
         * @param {function} fnShellCallback
         *      callback for the shell to execute showing the message
         *
         * @methodOf sap.ushell.services.Message#
         * @name init
         * @private
         */
        this.init = function (fnShellCallback) {
            fnShellCallBackFunction = fnShellCallback;

            return this;
        };

        /**
         * Shows a message on the screen.
         *
         * @param {sap.ushell.services.Message.Type} iType
         *      message type
         * @param {string} sMessage
         *      the localized message as plain text
         *
         * @methodOf sap.ushell.services.Message#
         * @name show
         * @private
         */
        this.show = function (iType, sMessage, oParameters) {
            if (!sMessage) {
                jQuery.sap.log.error("Message must not be empty.");
            } else {
                if (fnShellCallBackFunction) {
                    fnShellCallBackFunction(iType, sMessage, oParameters || {});
                } else {
                    jQuery.sap.log.error("MessageService not initialized. [Message: '" + sMessage + "']");
                }
            }
        };

        /**
         * Shows an info message on the screen.
         *
         * @param {string} sMessage
         *      the localized message as plain text
         * @param {int} [iDuration=3000]
         *      display duration in ms (optional)
         *
         * @methodOf sap.ushell.services.Message#
         * @name info
         * @public
         */
        this.info = function (sMessage, iDuration) {
            this.show(sap.ushell.services.Message.Type.INFO, sMessage, { duration : iDuration || 3000 });
        };

        /**
         * Shows an error message on the screen.
         *
         * @param {string} sMessage
         *      the localized message as plain text
         * @param {string} [sTitle]
         *      the localized title as plain text (optional)
         *
         * @methodOf sap.ushell.services.Message#
         * @name error
         * @public
         */
        this.error = function (sMessage, sTitle) {
            sMessage = (sTitle !== undefined) ? sTitle + " , " + sMessage : sMessage;
            jQuery.sap.log.error(sMessage);

            this.show(sap.ushell.services.Message.Type.ERROR, sMessage, { title : sTitle });
        };

        /**
         * Shows an confirmation dialog on the screen.
         *
         * The callback is called with the following signature: <code>function(oAction)</code>
         * where oAction is the button that the user has tapped. For example, when the user has pressed the close button, a sap.m.MessageBox.Action.Close is returned.
         *
         * If no actions are provided, OK and Cancel will be shown. In this case oAction is set by one of the following three values:
         * 1. sap.m.MessageBox.Action.OK: OK (confirmed) button is tapped.
         * 2. sap.m.MessageBox.Action.Cancel: Cancel (unconfirmed) button is tapped.
         * 3. null: Confirm dialog is closed by Calling sap.m.InstanceManager.closeAllDialogs()
         *
         * @param {string} sMessage
         *      the localized message as plain text
         * @param {function} fnCallback
         *      callback function
         * @param {string} [sTitle]
         *      the localized title as plain text (optional)
         * @param {sap.m.MessageBox.Action|sap.m.MessageBox.Action[]|string|string[]} [vActions]
         *       Either a single action, or an array of two actions. If no action(s) are given, the single action MessageBox.Action.OK is taken as a default for the parameter. If more than two actions are given, only the first two actions are taken. Custom action string(s) can be provided, and then the translation of custom action string(s) needs to be done by the application.
         *
         * @methodOf sap.ushell.services.Message#
         * @name confirm
         * @public
         */
        this.confirm = function (sMessage, fnCallback, sTitle, vActions) {
            this.show(sap.ushell.services.Message.Type.CONFIRM, sMessage, { title : sTitle, callback : fnCallback, actions : vActions });
        };
    };
    sap.ushell.services.Message.hasNoAdapter = true;

//    /**
//    * The Unified Shell message service as a singleton object.
//    *
//    * @class The unified shell's message service, which provides a unified way to raise messages.
//    *
//    * @name sap.ushell.services.Message
//    * @since 1.16.0
//    * @public
//    */


    /**
    * @name sap.ushell.services.Message.Type
    * @since 1.16.0
    * @private
    */
    sap.ushell.services.Message.Type = {
        INFO : 0,
        ERROR : 1,
        CONFIRM : 2
    };

}());
}; // end of sap/ushell/services/Message.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.NavTargetResolution') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The NavTargetResolution service.
 */
(function () {
    "use strict";
    /*global jQuery, sap, localStorage, window, document*/
    /*jslint nomen: true */
    jQuery.sap.declare("sap.ushell.services.NavTargetResolution");

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("NavTargetResolution")</code>.
     * Constructs a new instance of the navigation target resolution service.
     *
     * @class The Unified Shell's internal navigation target resolution service
     *
     *
     * configurations:
     * <code>config : { allowTestUrlComponentConfig  : true }</code>
     * allow to redefine the Test-url, Test-local1, Test-local2 applications via url parameters
     * (sap-ushell-test-local1-url=  / sap-ushell-test-local1-additionalInformation=  ... )
     *
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     * @param {oServiceConfiguration} a Service configuration
     * 
     * @public
     */
    sap.ushell.services.NavTargetResolution = function (oAdapter, oContainerInterface, sParameters, oServiceConfiguration) {
        var oServiceConfig = oServiceConfiguration && oServiceConfiguration.config,
            aLocalResolvedNavTargets,
            // oAdapter resolver is the "last" custom resolver
            aResolvers = [{
                name : "DefaultAdapter",
                isApplicable: function () { return true; },
                resolveHashFragment : oAdapter.resolveHashFragment.bind(oAdapter)
            }],
            oCurrentResolution;

        this._nextResolveHashFragment = function (aCustomResolvers, sHashFragment) {
            var oResolver,
                f;

            oResolver = aCustomResolvers.pop();
            if (oResolver.isApplicable(sHashFragment)) {
                jQuery.sap.log.info("NavTargetResolution: custom resolver " + oResolver.name + " resolves " + sHashFragment);
                f = this._nextResolveHashFragment.bind(this, aCustomResolvers);
                return oResolver.resolveHashFragment(sHashFragment, f);
            }
            return this._nextResolveHashFragment(aCustomResolvers, sHashFragment);
        };
        /**
         * Resolves the URL hash fragment.
         *
         * This function should be used by a custom renderer in order to implement custom navigation.
         * Do not use this function for developing Fiori applications.
         *
         * This function gets the hash part of the URL and returns data of the target application.
         * Example of the returned data:
         *    {"additionalInformation": "SAPUI5.Component=sap.ushell.renderers.fiori2.search.container",
         *    "applicationType": "URL",
         *    "url": "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/renderers/fiori2/search/container"}
         *
         * This is an asynchronous operation.
         *
         * @param {string} sHashFragment
         *     The formatted URL hash fragment (as obtained by the SAPUI5 hasher service
         *     not as given in <code>location.hash</code>)
         *
         * @returns {object}
         *     A jQuery.Promise. Its <code>done()</code> function gets an object that you can use
         *     to create a {@link sap.ushell.components.container.ApplicationContainer}
         *     or <code>undefined</code> in case the hash fragment was empty.
         *
         *
         * @public
         */
        this.resolveHashFragment = function (sHashFragment) {
            var oCRs = aResolvers.map(function (a) { return a; });

            return this._nextResolveHashFragment(oCRs, sHashFragment).done(function (oResolution) {
                oCurrentResolution = oResolution;
            });
        };

        this.baseResolveHashFragment = function (sHashFragment) {
            return oAdapter.resolveHashFragment(sHashFragment);
        };


        /**
         * Resolves a given semantic object and business parameters to a list of links,
         * taking into account the form factor of the current device.
         *
         * @param {string} sSemanticObject
         *   the semantic object such as <code>"AnObject"</code>
         * @param {object} [mParameters]
         *   the map of business parameters with values, for instance
         *   <pre>
         *   {
         *     A: "B",
         *     C: ["e", "j"]
         *   }
         *   </pre>
         * @param {boolean} [bIgnoreFormFactor=false]
         *   when set to <code>true</code> the form factor of the current device is ignored
         *
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which is resolved with an array of
         *   link objects containing (at least) the following properties:
         * <pre>
         * {
         *   intent: "#AnObject-Action?A=B&C=e&C=j",
         *   text: "Perform action"
         * }
         * </pre>
         */
        this.getSemanticObjectLinks = function (sSemanticObject, mParameters, bIgnoreFormFactor) {
            if (/\?/.test(sSemanticObject)) {
                throw new Error("Parameter must not be part of semantic object");
            }

            if (oAdapter.getSemanticObjectLinks) {
                return oAdapter.getSemanticObjectLinks(sSemanticObject, mParameters,
                    bIgnoreFormFactor);
            }

            // Note: return a promise, not an array!
            return (new jQuery.Deferred()).resolve([]).promise();
        };

        /**
         * Tells whether the given intent(s) are supported, taking into account the form factor of
         * the current device. "Supported" means that navigation to the intent is possible.
         *
         * @param {string[]} aIntents
         *   the intents (such as <code>"#AnObject-Action?A=B&C=e&C=j"</code>) to be checked
         *
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which is resolved with a map
         *   containing the intents from <code>aIntents</code> as keys. The map values are
         *   objects with a property <code>supported</code> of type <code>boolean</code>.<br/>
         *   Example:
         * <pre>
         * {
         *   "#AnObject-Action?A=B&C=e&C=j": { supported: false },
         *   "#AnotherObject-Action2": { supported: true }
         * }
         * </pre>
         */
        this.isIntentSupported = function (aIntents) {
            var mResult = {};

            if (oAdapter.isIntentSupported) {
                return oAdapter.isIntentSupported(aIntents);
            }

            aIntents.forEach(function (sIntent) {
                mResult[sIntent] = {supported: undefined};
            });
            return (new jQuery.Deferred()).resolve(mResult).promise();
        };

        /**
         * Register a custom resolver for semantic objects
         *
         * The resolver must be JavaScipt object with a string property name,
         * and two functions resolveHashFragment(sHashFragment,nextResolver) returning a promise
         * and isApplicable(sHashFragment) returning a boolean
         *
         * @param {Object} resolver
         * @returns {boolean} true if resolver was registered, false otherwise
         */
        this.registerCustomResolver = function (oObject) {
            // verify oObject
            if (typeof oObject.name !== "string") {
                jQuery.sap.log.error("NavTargetResolution: Custom Resolver must have name {string} member");
                return false;
            }
            if (typeof oObject.isApplicable !== "function") {
                jQuery.sap.log.error("NavTargetResolution: Custom Resolver must have isApplicable member");
                return false;
            }
            if (typeof oObject.resolveHashFragment !== "function") {
                jQuery.sap.log.error("NavTargetResolution: Custom Resolver must have \"resolveHashFragment\" member");
                return false;
            }
            aResolvers.push(oObject);
            return true;
        };

        // specific custom resolvers enabled by a configuration
        // #1 localResolveNavigationResolver  : given an array in config.resolveLocal, resolve
        // given SO-action strings to a locally supplied configuration
        // member of a resolveLocal setting are locally resolved
        if (oServiceConfig && jQuery.isArray(oServiceConfig.resolveLocal)) {
            // register a custom resolver which redirects all !allowed to defaultOthersTo
            aLocalResolvedNavTargets = oServiceConfig.resolveLocal.map(function (oArg) {
                return oArg.linkId;
            });
            this.registerCustomResolver({
                name : "localResolveNavigationResolver",
                cleanHash : function (sHashFragment) {
                    if (sHashFragment === "") {
                        return "#";
                    }
                    var res = sap.ushell.Container.getService("URLParsing").parseShellHash(sHashFragment.substring(1));
                    if (!res) {
                        return "#";
                    }
                    sHashFragment = "#" + res.semanticObject + "-" + res.action;
                    return sHashFragment;
                },
                _getIndex : function (sOrigHashFragment) {
                    var sHashFragment = this.cleanHash(sOrigHashFragment);
                    return aLocalResolvedNavTargets.indexOf(sHashFragment.substring(1));
                },
                // applicability test
                isApplicable: function (sOrigHashFragment) {
                    return this._getIndex(sOrigHashFragment) >= 0;
                },
                // replace hash, then resolve to app
                resolveHashFragment : function (sHashFragment) {
                    var oDeferred,
                        idx = this._getIndex(sHashFragment),
                        oResolvedResult,
                        obj,
                        hasQM,
                        newsh;
                    // assume it is a configuration object
                    //{
                    //    additionalInformation : "SAPUI5.Component=sap.ushell.demoapps.FioriSandboxDefaultApp",
                    //    applicationType : "URL",
                    //    url : "../../../../../test-resources/sap/ushell/demoapps/FioriSandboxDefaultApp",
                    //},
                    oDeferred = new jQuery.Deferred();
                    oResolvedResult = JSON.parse(JSON.stringify(oServiceConfig.resolveLocal[idx].resolveTo));
                    // augment url with application parameters from sHashFragment
                    obj = sap.ushell.Container.getService("URLParsing").parseShellHash(sHashFragment);
                    if (obj && obj.params) {
                        newsh = sap.ushell.Container.getService("URLParsing").paramsToString(obj.params);
                        hasQM = oResolvedResult.url.indexOf('?') >= 0;
                        oResolvedResult.url = oResolvedResult.url + (hasQM ? "" : "?") + newsh;
                    }
                    oDeferred.resolve(oResolvedResult);
                    return oDeferred.promise();
                } // function resolveHashFragment
            });// function registerCustomResolver
        }//if resolveLocal

        // register one fixed resolver for Standalone resolution (portal use case)
        // this resolver
        // a) demonstrates a sample resolver
        // b) Allows to launch an application via a specific ( client side coded )
        //    Target  #Shell-runStandaloneApp
        // with the effective application beeing coded via hash parameters:
        //  sap-ushell-SAPUI5.Component
        //  sap-ushell-url
        //  as in:
        //       #Shell-runStandaloneApp?sap-ushell-SAPUI5.Component=...&sap-ushell-url=...
        //  example: 
        //       http://<server>/sap/bc/ui5_ui5/ui2/ushell/shells/abap/FioriLaunchpad.html?sap-client=120#Shell-runStandaloneApp?sap-ushell-SAPUI5.Component=sap.ushell.demo.AppNavSample&sap-ushell-url=%252Fsap%252Fbc%252Fui5_demokit%252Ftest-resources%252Fsap%252Fushell%252Fdemoapps%252FAppNavSample%253FA%253DURL%2526A%253DTAP%2526B%253DTAP%2526AA%253DTAP&MORE=fun
        //
        //
        //       #Test-local1 => local storage key  "sap.ushell#Test-local1"
        //       #Test-local2 => local storage key  "sap.ushell#Test-local1"
        //       #Test-url => sap-ushell-test-local1 , sap-ushell-test-url1-additionalInformation
          //  #Test-config

        this.registerCustomResolver({ name : "StandaloneLocalResolver",
            aElement : undefined,
            cleanHash : function (sHashFragment) {
                if (sHashFragment === "") {
                    return undefined;
                }
                var res = sap.ushell.Container.getService("URLParsing").parseShellHash(sHashFragment.substring(1));
                if (!res) {
                    return undefined;
                }
                sHashFragment = "#" + res.semanticObject + "-" + res.action;
                return sHashFragment;
            },
            isRunStandaloneHash : function (sHashFragment) {
                return typeof sHashFragment === "string" && sHashFragment.indexOf("#Shell-runStandaloneApp") === 0;
            },
            isApplicable: function (sHashFragment) {
                sHashFragment = this.cleanHash(sHashFragment);
                if (!sHashFragment) {
                    return false;
                }
                return sHashFragment === "#Test-url"
                    || sHashFragment === "#Test-local1"
                    || sHashFragment === "#Test-local2"
                    || sHashFragment === "#Test-config"
                    || sHashFragment === "#Test-clear"
                    || this.isRunStandaloneHash(sHashFragment);
            },
            parseUrl : function (url) {
                if (!this.aElement) {
                    this.aElement = window.document.createElement('a');
                }
                this.aElement.href = url;
                return this.aElement;
            },
            resolveHashFragment : function (sHashFragment) {
                var oDeferred = new jQuery.Deferred(),
                    hardCoded = null,
                    that = this,
                    res,
                    oParsedShellHash,
                    oLocal,
                    additionalInformation,
                    sPrefix,
                    newsh,
                    hasQM,
                    oParams,
                    sFullHashFragment = sHashFragment,
                    url;
                sHashFragment = this.cleanHash(sHashFragment);
                if (!sHashFragment) {
                    return false;
                }
                hardCoded = {
                    "#Test-config" : {
                        applicationType: "URL",
                        url: "/sap/bc/ui5_ui5/ui2/ushell/test-resources/sap/ushell/demoapps/FioriSandboxConfigApp",
                        additionalInformation : //"SAPUI5.Component=AppNavSample"
                            "SAPUI5.Component=sap.ushell.demoapps.FioriSandboxConfigApp"
                    },
                    "none" : {
                        applicationType: "URL",
                        url: "",
                        additionalInformation : ""
                    }
                };

                function getFromLocalStorage(sKey) {
                    if (localStorage) {
                        return localStorage[sKey];
                    }
                    return undefined;
                }

                function filterParams(oParams, sKey) {
                    var res = {},
                        a;
                    for (a in oParams) {
                        if (oParams.hasOwnProperty(a)) { // correct Object.hasOwnProperty.call(this,a)
                            if (a !== sKey) {
                                res[a] = oParams[a];
                            }
                        }
                    }
                    return res;
                }

                // return undefined URL if not in same domain or not in runStandaloneAppFolderWhitelist
                function localURL(sUrl) {
                    //that.parseUrl -> return an a(location)-object
                    if (that.parseUrl(sUrl).origin !== window.location.origin) {
                        return undefined;
                    }
                    //returns always an canonic absolute pathname
                    var sPathNameUrl = that.parseUrl(sUrl).pathname,
                        runStandaloneAppFolderWhitelist = jQuery.sap.getObject("runStandaloneAppFolderWhitelist", 0, oServiceConfig),
                        element;
                    if (!runStandaloneAppFolderWhitelist) {
                        return undefined;
                    }
                    for (element in runStandaloneAppFolderWhitelist) {
                        if (runStandaloneAppFolderWhitelist.hasOwnProperty(element)) {
                            if (runStandaloneAppFolderWhitelist[element]) {
                                if (element === "*" || sPathNameUrl.indexOf(that.parseUrl(element).pathname) === 0) {
                                    return sUrl;
                                }
                            }
                        }
                    }
                    return undefined;
                }
                function getURLParameter(sKey) {
                    return jQuery.sap.getUriParameters().get(sKey);
                }
                function getHashOrURLParameter(oParsedHash, sKey) {
                    return (oParsedHash.params && oParsedHash.params[sKey] && oParsedHash.params[sKey][0])
                        || getURLParameter(sKey);
                }
                function addToLocalStorage(sKey, sValue) {
                    if (localStorage) {
                        localStorage[sKey] = sValue;
                    }
                }
                if (hardCoded[sHashFragment]) {
                    res = hardCoded[sHashFragment];
                } else if (sHashFragment === "#Test-clear") {
                    addToLocalStorage("sap.ushell.#Test-local1", undefined);
                    addToLocalStorage("sap.ushell.#Test-local2", undefined);
                    jQuery.sap.log.info("NavTargetResolution: Local storage keys for #Test have been cleared");
                    res = hardCoded["#Test-config"];
                } else if (this.isRunStandaloneHash(sHashFragment)) {
                    oLocal = { applicationType : "URL" };
                    oParsedShellHash = sap.ushell.Container.getService("URLParsing").parseShellHash(sFullHashFragment);
                    additionalInformation =
                        (getHashOrURLParameter(oParsedShellHash, "sap-ushell-SAPUI5.Component") &&
                        "SAPUI5.Component=" + getHashOrURLParameter(oParsedShellHash, "sap-ushell-SAPUI5.Component"))
                        || (getHashOrURLParameter(oParsedShellHash, "sap-ushell-additionalInformation"));
                    url = getHashOrURLParameter(oParsedShellHash, "sap-ushell-url") || "";
                    // blend the parameters together: 
                    oParams = filterParams(oParsedShellHash.params, "sap-ushell-SAPUI5.Component");
                    oParams = filterParams(oParams, "sap-ushell-additionalInformation");
                    oParams = filterParams(oParams, "sap-ushell-url");
                    newsh = sap.ushell.Container.getService("URLParsing").paramsToString(oParams);
                    hasQM = url.indexOf('?') >= 0;
                    if (newsh) {
                        url = url + (hasQM ? (((url[url.length - 1] !== "&") && "&") || "") : "?") + newsh;
                    }
                    oLocal.url = localURL(url);
                    oLocal.additionalInformation = additionalInformation;
                    res = oLocal;
                } else if (sHashFragment === "#Test-local1" || sHashFragment === "#Test-local2" || sHashFragment === "#Test-url") {
                    res = getFromLocalStorage("sap.ushell." + sHashFragment);
                    if (!res || res === "undefined") {
                        oLocal = { applicationType : "URL" };
                    } else {
                        oLocal = JSON.parse(res);
                    }
                    // Configuring an app via url parameters is restricted to localhost for security reasons,
                    // unless explicitly enabled by config
                    if ((window.location.hostname === "localhost")
                            || oServiceConfig.allowTestUrlComponentConfig) {
                        sPrefix = "sap-ushell-test-" + sHashFragment.substring(6);
                        additionalInformation = getURLParameter(sPrefix + "-additionalInformation");
                        if (additionalInformation) {
                            oLocal.additionalInformation = additionalInformation;
                        }
                        url = getURLParameter(sPrefix + "-url");
                        if (url) {
                            oLocal.url = localURL(url);

                        }
                    }
                    if (!oLocal.url) {
                        jQuery.sap.log.info("NavTargetResolution: No configured app for " + sHashFragment + " found ( local storage or url params sap-ushell-test-local1-url  sap-ushell-test-local1-additionalInfo  not supplied? ");
                        jQuery.sap.log.info("NavTargetResolution: Defaulting to config app ...\n");
                        oDeferred.reject("URL is not resolvable");
                        return oDeferred.promise();
                    }
                    oLocal.url = localURL(oLocal.url);
                    res = oLocal;
                }
                if (res.url === undefined) {
                    oDeferred.reject("URL is not resolvable");
                    return oDeferred.promise();
                }
                jQuery.sap.log.info("NavTargetResolution: As URL:  http://localhost:8080/sap/bc/ui5_ui5/ui2/ushell/shells/abap/FioriLaunchpad.html?sap-ushell-test-local1-url=" + encodeURIComponent((res && res.url) || "") + "&sap-ushell-test-local1-additionalInformation=" + encodeURIComponent((res && res.additionalInfo) || "") + "#Test-local1");
                jQuery.sap.log.info("NavTargetResolution: Resolving " + sHashFragment + " to "  + JSON.stringify(res));
                oDeferred.resolve(res);
                return oDeferred.promise();
            }
            });

        /**
         * Returns the last successful resolution of a hash fragment or <code>undefined</code> if
         * no resolution has been performed yet.
         *
         * @private
         * @returns {object} the last successful resolution
         * @see #resolveHashFragment
         */
        this.getCurrentResolution = function () {
            return oCurrentResolution;
        };
    };
}());

}; // end of sap/ushell/services/NavTargetResolution.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.PageBuilding') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The Unified Shell's page building service.
 *
 * @version 1.24.5
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.PageBuilding");

    jQuery.sap.require('sap.ui2.srvc.factory'); // unlisted dependency retained

    jQuery.sap.require('sap.ui2.srvc.page'); // unlisted dependency retained


    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("PageBuilding")</code>.
     * Constructs a new instance of the page building service.
     *
     * @param {object} oAdapter
     *     the page building adapter for the logon system
     *
     * @class The Unified Shell's page building service.
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     * @private
     */
    sap.ushell.services.PageBuilding = function (oAdapter, oContainerInterface) {

        /**
         * Returns the UI2 page building factory.
         * @returns {sap.ui2.srvc.Factory}
         *     the page building factory
         */
        this.getFactory = function () {
            return oAdapter.getFactory();
        };

        /**
         * Returns a stub for the page with the given ID.
         *
         * @param {string} sPageId
         *     the page ID
         *
         * @returns {sap.ui2.srvc.Page}
         *     the page, as a stub
         * @since 1.15.0
         */
        this.getPage = function (sPageId) {
            return oAdapter.getFactory().createPage(sPageId);
        };

        /**
         * Returns a page set.
         *
         * @param {string} sId
         *   the page set ID
         * @returns {object}
         *   a jQuery promise. Its success handler gets a sap.ui2.srvc.PageSet.
         * @since 1.15.0
         */
        this.getPageSet = function (sId) {
            var oDeferred = new jQuery.Deferred();
            oAdapter.getFactory().createPageSet(sId, oDeferred.resolve.bind(oDeferred),
                oDeferred.reject.bind(oDeferred));
            return oDeferred.promise();
        };
    };
}());

}; // end of sap/ushell/services/PageBuilding.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.Search') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The Unified Shell's search service which provides Enterprise Search via SINA.
 *
 * @version 1.24.5
 */
(function() {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.Search");

    sap.ushell.services.Search = function(oAdapter, oContainerInterface) {
        this.init.apply(this, arguments);
    };

    sap.ushell.services.Search.prototype = {

        init: function(oAdapter, oContainerInterface) {
            // do nothing, just ensure for abap adapter to init SINA (async GetServerInfo)
            // this.aCatalogTileDescriptions;
            // this.oCatalogDeferred;
            this.oAdapter = oAdapter;
            this.oContainerInterface = oContainerInterface;
            this.oLpdService = sap.ushell.Container.getService("LaunchPage");
        },

        isSearchAvailable: function() {
            return this.oAdapter.isSearchAvailable();
        },

        getSina: function() {
            return this.oAdapter.getSina();
        },

        /**
         * A helper function returning all tiles contained in all available catalogs.
         * Further, once the tiles have been successfully fetched, they are cached locally in order to speed up
         * future calls. This is based on the assumption that catalog tiles will change very infrequently.
         * In case of success the promise's <code>done</code> function should be called with the results.
         *
         * @returns {object}
         *  jQuery.promise object
         * @private
         */
        _getCatalogTiles: function() {
            var self = this;
            if (self.allTilesDeferred) {
                return self.allTilesDeferred;
            }

            // initialize catalog tiles
            var aCatalogTileDescriptions = [];
            // this.oCatalogDeferred = oDeferred;
            self.allTilesDeferred = self.oLpdService.getCatalogs().then(function(catalogs) {
                var oDeferreds = [];
                // get promises for all catalogs' tiles
                for (var i = 0; i < catalogs.length; i++) {
                    oDeferreds.push(self.oLpdService.getCatalogTiles(catalogs[i]));
                }
                // when all promises have been resolved, merge their results together
                return jQuery.when.apply(jQuery, oDeferreds).then(function() {
                    var aTilesCollection = arguments;
                    for (var i = 0; i < aTilesCollection.length; i++) {
                        var aTiles = aTilesCollection[i];
                        for (var j = 0; j < aTiles.length; j++) {
                            try {
                                var oTile = aTiles[j],
                                    //need to instanciate a view to make use of the contracts
                                    oTileView = self.oLpdService.getCatalogTileView(oTile),
                                    aKeywords = self.oLpdService.getCatalogTileKeywords(oTile),
                                    sTargetURL = self.oLpdService.getCatalogTileTargetURL(oTile),
                                    sTitle = self.oLpdService.getCatalogTilePreviewTitle(oTile) || self.oLpdService.getCatalogTileTitle(oTile),
                                    sSize = self.oLpdService.getCatalogTileSize(oTile),
                                    sIcon = self.oLpdService.getCatalogTilePreviewIcon(oTile) || "sap-icon://business-objects-experience";

                                aCatalogTileDescriptions.push({
                                    tile: oTile,
                                    keywords: aKeywords,
                                    url: sTargetURL,
                                    title: sTitle,
                                    icon: sIcon,
                                    size: sSize
                                });
                                //destroy the view - not needed
                                oTileView.destroy();
                            } catch (e) {
                                jQuery.sap.log.error(e);
                            }
                        }
                    }
                    aCatalogTileDescriptions = self._removeDuplicateTiles(aCatalogTileDescriptions);
                    // resolve the promise
                    return aCatalogTileDescriptions;
                });
            });
            return self.allTilesDeferred;

        },

        /**
         * Filter duplicate tiles on their urls, remove tiles without urls and remove fact sheets.
         * @returns {array}
         *  unique tiles
         *
         * @private
         */
        _removeDuplicateTiles: function(aTiles) {
            var oItemsDict = {},
                aUniqueTiles = [];
            for (var i = 0; i < aTiles.length; ++i) {
                var oTile = aTiles[i];
                if (!oTile.url) {
                    continue;
                }
                var factSheetTest = new RegExp('DisplayFactSheet', 'i');
                if (factSheetTest.test(oTile.url)) {
                    continue;
                }
                if (oItemsDict[oTile.url] === undefined) {
                    oItemsDict[oTile.url] = oTile;
                    aUniqueTiles.push(oTile);
                }
            }
            return aUniqueTiles;
        },

        /**
		 * Search for tiles in all backend catalogs.
		 * @param {object}
		 *	properties configuration object which knows the attributes:
		 *   searchTerm: search for this term in apps/tiles
		 *   top: return that many apps/tiles, default is 10
		 *   searchInKeywords: also search in app keywords and not only in titles
		 
		 * @returns {array}
		 *  found tiles
		 
		 * @private
		 */
        _searchTiles: function(properties) {
            var sSearchTerm = properties.searchTerm;
            var aCatalogTiles = properties.aCatalogTiles;
            var iTop = properties.top || 10;
            var bSearchInKeywords = properties.searchInKeywords || false;
            var aFoundTiles = [],
                oTile,
                sLabel;
            // replace special chars
            sSearchTerm = sSearchTerm.replace(/([.+?^=!:${}()|\[\]\/\\])/g, "\\$1");
            sSearchTerm = sSearchTerm.replace(/\*/g, ".*");
            // only match beginnings of the word, case insensitive
            sSearchTerm = new RegExp('\\b' + sSearchTerm, 'i');

            var tileFound = function(oTile) {
                if (aFoundTiles.length < iTop) {
                    //TODO: use searchhelpers highlighter
                    sLabel = oTile.title.replace(sSearchTerm, "<b>$&</b>");
                    aFoundTiles.push(oTile);
                }
            };

            for (var j = 0; j < aCatalogTiles.length; j++) {
                oTile = aCatalogTiles[j];
                if (sSearchTerm.test(oTile.title)) {
                    tileFound(oTile);
                    continue;
                }
                if (bSearchInKeywords) {
                    for (var i = 0, len = oTile.keywords.length; i < len; i++) {
                        var keyword = oTile.keywords[i];
                        if (sSearchTerm.test(keyword)) {
                            tileFound(oTile);
                            break;
                        }
                    }
                }
            }
            return aFoundTiles;
        },

        _makeSInAResultSet: function(aFoundTiles, sOrigSearchTerm) {
            return {
                totalResults: aFoundTiles.length,
                searchTerm: sOrigSearchTerm,
                getElements: function() {
                    return aFoundTiles;
                }
            };
        },

        /**
         * Search for Apps (Tiles) in all backend catalogs.
         *
         * @param  {object}
         *  properties configuration object which knows the attributes:
         *   searchTerm: search for this term in apps/tiles
         *   top: return that many apps/tiles, default is 10
         *   searchInKeywords: also search in app keywords and not only in titles
         *
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        queryApplications: function(properties) {
            var self = this,
                sOrigSearchTerm = properties.searchTerm;

            return this._getCatalogTiles().then(function(aCatalogTiles) {
                properties.aCatalogTiles = aCatalogTiles;
                var aFoundTiles = self._searchTiles(properties);
                var oSinaResult = self._makeSInAResultSet(aFoundTiles, sOrigSearchTerm);
                return oSinaResult;
            });

        },

        /**
         * Search all catalog tiles by their Semantic Object - Action pair
         * The given callback is called on success. This does not touch the respective search adapters.
         *
         * @param {array} aSemObjects
         *     an array of semantic object + action objects
         * @param {function} resultCallback
         *     the callback that will be called
         * @public
         */
        queryApplicationsByTarget: function(aSemObjects, resultCallback) {
            this._getCatalogTiles().done(function(aCatalogTileDescriptions) {
                var aResults = [];
                // loop through Semantic Objects, thus result is in same order as input SOs
                for (var j = 0, jL = aSemObjects && aSemObjects.length || 0; j < jL; j++) {
                    var oSemO = aSemObjects[j],
                        oURLParsingSrvc = sap.ushell.Container.getService("URLParsing");
                    for (var i = 0; i < aCatalogTileDescriptions.length; i++) {
                        var oTarget = oURLParsingSrvc.parseShellHash(aCatalogTileDescriptions[i].url);
                        if (oTarget && (oTarget.semanticObject === oSemO.semanticObject) && (oTarget.action === oSemO.action)) {
                            aResults.push(aCatalogTileDescriptions[i]);
                            // only take first match
                            break;
                        }
                    }
                }
                resultCallback(aResults);
            });
        }
    };


}());
}; // end of sap/ushell/services/Search.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.ShellNavigation') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview Shell Navigation Services,
 */

/*global jQuery, sap, location, hasher, jQuery */

(function () {
    "use strict";
    /*global jQuery, sap, location, hasher */
    jQuery.sap.require('sap.ui.thirdparty.signals'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.hasher'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.core.routing.HashChanger'); // unlisted dependency retained


    jQuery.sap.declare("sap.ushell.services.ShellNavigation");

    sap.ui.core.routing.HashChanger.extend("sap.ushell.services.ShellNavigationHashChanger", {

        constructor : function () {

            sap.ui.core.routing.HashChanger.apply(this);
            this.priv_initializedByShellNav = false;    // initialization flag for the shellNavigationService
            this.oURLShortening = sap.ushell.Container.getService("URLShortening");
            this.privfnShellCallback = null;
            this.privappHashPrefix = "&/";
            this.privhashPrefix = "#";

            /**
             * obtain the current shell hash (with #) urlDecoded
             * Shortened(!)
             * @private
             */
            this.privgetCurrentShellHash = function () {
                var res = this.privsplitHash(hasher.getHash());
                return { hash : "#" + ((res && res.shellPart) ? res.shellPart : "") };
//                return "#" + ((res && res.shellPart) ? res.shellPart : "");
            };

            /**
             * internal, construct the next hash, with #
             * shortened(!)
             * @private
             */
            this.privconstructHash = function (sAppSpecific) {
                var o = this.privgetCurrentShellHash();
                o.hash = o.hash + sAppSpecific;
                return o;
            };

            /**
             * internal, without #
             * @private
             */
            this.privconstructShellHash = function (oShellHash) {
                return sap.ushell.Container.getService("URLParsing").constructShellHash(oShellHash);
            };

            /** split a shell hash into app and shell specific part
             *  @private
             *  @returns <code>null</code>, if sHash is not a valid hash (not parseable);
             *      otherwise an object with properties <code>shellPart</code> and <code>appSpecificRoute</code>
             *      the properties are <code>null</code> if sHash is falsy
             */
                // this method is deliberately restrictive to work only on proper hashes
                //  this may be made part of URLParser
            this.privsplitHash = function (sHash) {
                var oShellHash,
                    sAppSpecificRoute;

                if (sHash === undefined || sHash === null || sHash === "") {
                    return {
                        shellPart : null,
                        appSpecificRoute : null
                    };
                }
                // break down hash into parts
                // "#SO-ABC~CONTXT?ABC=3A&DEF=4B&/detail/1?A=B");
                oShellHash =  sap.ushell.Container.getService("URLParsing").parseShellHash(sHash);
                if (oShellHash === undefined || oShellHash === null) {
                    return null;
                }
                sAppSpecificRoute = oShellHash.appSpecificRoute;
                oShellHash.appSpecificRoute = undefined;
                return {  shellPart : (oShellHash && this.privstripLeadingHash(this.privconstructShellHash(oShellHash))) || null,
                    appSpecificRoute : (oShellHash && sAppSpecificRoute) || null }; // ,"&/detail/1?A=B");
            };

            /**
             * internal, central navigation hook trigger hash change
             * @private
             */
            this.privsetHash = function (sFullHash, sAppHash, writeHistory) {
                hasher.prependHash = "";
                sFullHash = this.privstripLeadingHash(sFullHash);
                sAppHash = sAppHash || "";
                if (writeHistory === undefined) {
                    writeHistory = true;
                }
                // don't call method on super class 
                // we set the full hash and fire the events for the app-specific part only
                // this is necessary for consistency of all events; hashSet and hashReplaced are
                // evaluated by sap.ui.core.routing.History
                if (writeHistory) {
                    this.fireEvent("hashSet", { sHash : sAppHash });
                    hasher.setHash(sFullHash);
                } else {
                    this.fireEvent("hashReplaced", { sHash : sAppHash });
                    hasher.replaceHash(sFullHash);
                }
            };

            this.privstripLeadingHash = function (sHash) {
                if (sHash[0] === '#') {
                    return sHash.substring(1);
                }
                return sHash;
            };

            /// protected api, only used by shell services
            /**
             * returns a string which can be put into the DOM (e.g. in a link tag)
             * Please use CrossApplicationNavigation service and do not invoke this method directly
             * if you are an application
             *
             * @param {Object} oArgs
             *     object encoding a semantic object and action
             *  e.g. { target : { semanticObject : "AnObject", action: "Action" },
             *         params : { A : "B" } }
             *         or
             *      { target : { shellHash : "SO-36&jumper=postman" },
             *      }
             * @param {boolean, optional} bVerbose
             * @returns {Object}
             *     the href for the specified parameters; always starting with a hash character; all parameters are URL-encoded
             *     
             *     in case bVerbose is true, an object 
             *     { hash : 
             *       params : 
             *       skippedParams : 
             *     }
             * with params, skippedParams containing nontruncated, truncated parameters if truncation occurred, 
             * otherwise undefined
             *
             * @methodOf sap.ushell.services.ShellNavigation#
             * @name hrefForExternal
             * @since 1.15.0
             * @private
             */
            this.hrefForExternal = function (oArgs, bVerbose) {
                var sTmp;
                if (bVerbose === true) {
                    sTmp = this.privhrefForExternalNoEnc(oArgs);
                    return { hash : encodeURI(sTmp.hash),
                             params : sTmp.params,
                             skippedParams : sTmp.skippedParams };
                }
                return encodeURI(this.privhrefForExternalNoEnc(oArgs).hash);
            };

            /**
             * Shortened(!)
             */
            this.privhrefForExternalNoEnc = function (oArgs, bVerbose) {
                var r;
                if (oArgs === undefined) {
                    return this.privgetCurrentShellHash();
                }
                // construct url
                if (oArgs && oArgs.target && (typeof oArgs.target.semanticObject === "string" || typeof oArgs.target.shellHash === "string")) {
                    r = "#" + this.privconstructShellHash(oArgs);
                    return this.oURLShortening.checkHashLength(r);
                }
                return this.privgetCurrentShellHash();
            };

            this.privgetAppHash = function (oArgs) {
                var sAppHash, oShellHash;
                if (oArgs && oArgs.target && (typeof oArgs.target.shellHash === "string")) {
                    oShellHash = sap.ushell.Container.getService("URLParsing").parseShellHash(oArgs.target.shellHash);
                    sAppHash = oShellHash && oShellHash.appSpecificRoute;
                    sAppHash = sAppHash && sAppHash.substring(2);
                }
                return sAppHash;
            };

            /**
             * returns a string which can be put into the DOM (e.g. in a link tag)
             * given an app specific hash suffix
             *
             * @param {string}
             *            sAppHash
             * @returns {string} a string which can be put into the link tag,
             *          containing the current shell hash as prefix and the
             *          specified application hash as suffix
             *
             * example: hrefForAppSpecificHash("View1/details/0/") returns
             * "#MyApp-Display&/View1/details/0/"
             * @methodOf sap.ushell.services.ShellNavigation#
             * @name parseShellHash
             * @since 1.15.0
             * @private
             */
            this.hrefForAppSpecificHash = function (sAppHash) {
                return encodeURI(this.privconstructHash(this.privappHashPrefix + sAppHash).hash);
            };

            /**
             *
             * Navigate to an external target
             * Please use CrossApplicationNavigation service and do not invoke this method directly!
             *
             * @param {Object}  configuration object describing the target
             *
             *  e.g. { target : { semanticObject : "AnObject", action: "Action" },
             *         params : { A : "B" } }
             *
             * constructs sth like    http://....ushell#AnObject-Action?A=B ....
             * and navigates to it.
             * @private
             */
            this.toExternal = function (oArgs) {
                var sHash = this.privhrefForExternalNoEnc(oArgs).hash, // shortened!
                    sAppHash = this.privgetAppHash(oArgs);
                this.privsetHash(sHash, sAppHash);
            };

            /**
             * constructs the full shell hash and
             * sets it, thus triggering a navigation to it
             * @param {string} sAppHash specific hash
             * @param writeHistory if true it adds a history entry in the browser if not it replaces the hash
             * @private
             */
            this.toAppHash = function (sAppHash, writeHistory) {
                var sHash = this.privconstructHash(this.privappHashPrefix + sAppHash).hash;
                this.privsetHash(sHash, sAppHash, writeHistory);
            };
        }
    });


    /**
     * Initialization for the shell navigation.
     *
     * This will start listening to hash changes and also fire a hashchanged event with the initial hash.
     * @protected
     * @return false if it was initialized before, true if it was initialized the first time
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.initShellNavigation = function (fnShellCallback) {

        if (this.priv_initializedByShellNav) {
            jQuery.sap.log.info("initShellNavigation already called on this ShellNavigationHashChanger instance.");
            return false;
        }

        this.privfnShellCallback = fnShellCallback;

        hasher.changed.add(this.treatHashChanged, this); //parse hash changes

        if (!hasher.isActive()) {
            hasher.initialized.addOnce(this.treatHashChanged, this); //parse initial hash
            hasher.init(); //start listening for history change
        } else {
            this.treatHashChanged(hasher.getHash());
        }
        this.priv_initializedByShellNav = true;
        return true;
    };

    /**
     * Initialization for the application
     *
     * The init method of the base class is overridden, because the hasher initialization (registration for hash changes) is already done
     * in <code>initShellNavigation</code> method. The application-specific initialization ensures that the application receives a hash change event for the
     * application-specific part if set in the  initial hash.
     * @protected
     * @return false if it was initialized before, true if it was initialized the first time
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.init = function () {
        if (this.priv_initialized) {
            jQuery.sap.log.info("init already called on this ShellNavigationHashChanger instance.");
            return false;
        }
        // fire initial hash change event for the app-specific part
        var oNewHash = this.privsplitHash(hasher.getHash()),
            sAppSpecificRoute = oNewHash && (oNewHash.appSpecificRoute || "  ").substring(2);  // strip &/
        this.fireEvent("hashChanged", { newHash : sAppSpecificRoute });
        this.priv_initialized = true;
        return true;
    };

    /**
     * Fires the hashchanged event, may be extended to modify the hash before firing the event
     * @param newHash the new hash of the browser
     * @param oldHash - the previous hash
     * @protected
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.treatHashChanged = function (newHash, oldHash) {
        var sAppSpecificRoute,
            sOldAppSpecificRoute,
            oNewHash,
            oOldHash,
            oError;
        newHash = this.oURLShortening.expandHash(newHash);
        oldHash = this.oURLShortening.expandHash(oldHash);
        oNewHash = this.privsplitHash(newHash);
        oOldHash = this.privsplitHash(oldHash);

        if (!oNewHash) {
            // illegal new hash; pass the full string and an error object
            oError = new Error("Illegal new hash - cannot be parsed: '" + newHash + "'");
            this.fireEvent("shellHashChanged", {
                newShellHash : newHash,
                newAppSpecificRoute : null,
                oldShellHash : (oOldHash ? oOldHash.shellPart : oldHash),
                error: oError
            });
            this.privfnShellCallback(newHash, null, (oOldHash ? oOldHash.shellPart : oldHash), oError);
            return;
        }
        if (!oOldHash) {
            // illegal old hash - we are less restrictive in this case and just set the complete hash as shell part
            oOldHash = {
                shellPart: oldHash,
                appSpecificRoute: null
            };
        }
        if (oNewHash.shellPart === oOldHash.shellPart && (oldHash !== undefined)) { // second condition holds true for initial load where we always want to trigger the shell navigation
            // app specific change only !
            sAppSpecificRoute = (oNewHash.appSpecificRoute || "  ").substring(2);  // strip &/
            sOldAppSpecificRoute = (oOldHash.appSpecificRoute || "  ").substring(2);  // strip &/
            // an empty string has to be propagated!
            this.fireEvent("hashChanged", { newHash : sAppSpecificRoute, oldHash : sOldAppSpecificRoute });
            return;
        }

        // all Shell specific callback -> load other app !
        this.fireEvent("shellHashChanged", { newShellHash : oNewHash.shellPart, newAppSpecificRoute : oNewHash.appSpecificRoute, oldShellHash :  oOldHash.shellPart});
        this.privfnShellCallback(oNewHash.shellPart, oNewHash.appSpecificRoute, oOldHash.shellPart);
    };

    /**
     * Sets the hash to a certain value, this hash is prefixed by the
     * @param sHash the hash
     * @param writeHistory if true it adds a history entry in the browser if not it replaces the hash
     * @protected
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.setHash = function (sHash) {
        this.toAppHash(sHash, /*writeHistory*/true);
    };

    /**
     * Replaces the hash to a certain value. When using the replace function no browser history is written.
     * If you want to have an entry in the browser history, please use set setHash function.
     * @param sHash the hash
     * @protected
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.replaceHash = function (sHash) {
        this.toAppHash(sHash, /* writeHistory */false);
    };

    /**
     * Gets the current hash
     *
     * Override the implementation of the base class and just return the application-specific hash part
     *
     * @protected
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.getHash = function () {
        return this.getAppHash();
    };

    /**
     * Gets the current application-specific hash part
     *
     *
     * @private
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.getAppHash = function () {
        var oNewHash = this.privsplitHash(hasher.getHash()),
            sAppSpecificRoute = oNewHash && (oNewHash.appSpecificRoute || "  ").substring(2);  // strip &/
        return sAppSpecificRoute;
    };

    /**
     * Cleans the event registration
     * @see sap.ui.base.Object.prototype.destroy
     * @protected
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.destroy = function () {
        hasher.changed.remove(this.treatHashChanged, this);
        sap.ui.core.routing.HashChanger.prototype.destroy.apply(this, arguments);
    };


    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("ShellNavigation")</code>.
     * Constructs a new instance of the shell navigation service.
     *
     * Note that the shell instantiation mechanism has to assure exactly one instance is created (!)
     *
     * @class The Unified Shell's internal navigation service (platform independent)
     *
     * This interface is for consumption by shell renderers/containers only
     *
     * It is not for direct usage by applications, see
     *
     * inner app navigation : UI5 interfaces (hashChanger, Router)
     * cross app navigation : @see CrossApplicationNavigation
     *
     *
     * Usage:
     *
     * example: see renders/fiorisandbox/Shell.controller.js
     *
     * <code>
     *   jquery.sap.require("sap.ushell.services.ShellNavigator");<br/>
     *   Shell.onHashChange(shellHash,appHash) {  / *resolve url, load app and exchange root view* / }<br/>
     *   Shell.init() {<br/>
     *     this.privShellNavigator =  sap.ushell.services.ShellNavigator();<br/>
     *     this.privShellNavigator.init(jQuery.proxy(this.doHashChange,this));<br/>
     *   }<br/>
     * </code>
     *
     * Note: further app specific integration via the reference app reuse code
     *  (setting of app specific handler)
     *
     *
     *
     * Note: the ShellNavigation service replaces the UI5 core HashChanger which abstracts from the
     * browser url modification.
     *
     * It performs the following services:
     * - encoding of the actual browser url hash ( via hasher.js).
     * - expansion of "shortened" urls ( AppParameterParts) via invocation.
     * - splitting of shellHash and AppSpecific hash and abstraction w.r.t. Eventing
     *
     * Thus it is crucial to use appropriate interfaces and not directly invoke
     * window.location.hash.
     *
     * - internal construction methods for a "current" App specific and non-app specific hash
     * (invoked by CrossApplicationNavigation), not to be invoked directly!
     *
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     *
     * @public
     */
    function ShellNavigation() {
        // instantiate and exchange the HashChanger from UI5
        this.hashChanger = new sap.ushell.services.ShellNavigationHashChanger();
        /////////////////////////////// api for external usage

        /**
         * returns a string which can be put into the DOM (e.g. in a link tag)
         * (it may shorten the app specific parts of the url to fit browser restrictions)
         *
         * @param {oArgs}
         *     object encoding a semantic object and action
         *  e.g. { target : { semanticObject : "AnObject", action: "Action" },
        *         params : { A : "B" } }
         *         or
         *      { target : { shellHash : "SO-36&jumper=postman" },
        *      }
         * @returns {Object}
         *     the href for the specified parameters; always starting with a hash character; all parameters are URL-encoded
         * xor (bVebose === true)
         *     an object containing { hash : ,  skippedParams:  } with skippedParams not undefined iff 
         *     parameters where truncated
         * 
         *
         * @methodOf sap.ushell.services.ShellNavigation#
         * @name hrefForExternal
         * @since 1.15.0
         * @private
         */
        this.hrefForExternal = function (oArgs, bVerbose) {
            return this.hashChanger.hrefForExternal(oArgs, bVerbose);
        };

        /**
         * returns a string which can be put into the DOM (e.g. in a link tag)
         * given an app specific hash suffix,
         * (it may shorten the app specific parts of the url to fit browser restrictions)
         *
         * @param {string}
         *            sAppHash
         * @returns {string} a string which can be put into the link tag,
         *          containing the current shell hash as prefix and the
         *          specified application hash as suffix
         *
         * example: hrefForAppSpecificHash("View1/details/0/") returns
         * "#MyApp-Display&/View1/details/0/"
         * @methodOf sap.ushell.services.ShellNavigation#
         * @name parseShellHash
         * @since 1.15.0
         * @private
         */
        this.hrefForAppSpecificHash = function (sAppHash) {
            return this.hashChanger.hrefForAppSpecificHash(sAppHash);
        };

        /**
         * Navigate to an external target
         *
         * @param {Object}  configuration object describing the target
         *
         *  e.g. { target : { semanticObject : "AnObject", action: "Action" },
         *         params : { A : "B" } }
         *
         * constructs sth like    http://....ushell#AnObject-Action?A=B ....
         * and navigates to it.
         * @private
         */
        this.toExternal = function (oArgs) {
            this.hashChanger.toExternal(oArgs);
        };

        /**
         * Constructs the full shell hash and
         * sets it, thus triggering a navigation to it
         * @param {string} sAppHash specific hash
         * @param writeHistory if true it adds a history entry in the browser if not it replaces the hash
         * @private
         */
        this.toAppHash = function (sAppHash, writeHistory) {
            this.hashChanger.toAppHash(sAppHash, writeHistory);
        };

        // Lifecycle methods

        /**
         * Initializes ShellNavigation
         * 
         * This function should be used by a custom renderer in order to implement custom navigation.
         * Do not use this function for developing Fiori applications.   
         * 
         * This method should be invoked by the Shell in order to:
         * - Register the event listener
         * - Register the container callback for the (currently single) ShellHash changes.
         * 
         * Signature of the callback function(
         *         sShellHashPart,  // The hash part on the URL that is resolved and used for application loading
         *         sAppSpecificPart // Typically ignored
         *         sOldShellHashPart, // For bookkeeping only (unreliable)
         *         
         * @param {function} The callback method for hash changes
         *  
         * @public
         */
        this.init = function (fnShellCallback) {
            hasher.prependHash = "";
            sap.ui.core.routing.HashChanger.replaceHashChanger(this.hashChanger);
            this.hashChanger.initShellNavigation(fnShellCallback);
            return this;
        };
    } // ShellNavigation

    // Note: the container instantiation mechanism has to assure exactly one instance is created
    sap.ushell.services.ShellNavigation = ShellNavigation;
    sap.ushell.services.ShellNavigation.hasNoAdapter = true;


}());

}; // end of sap/ushell/services/ShellNavigation.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.SupportTicket') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The SupportTicket service.
 */
(function () {
    "use strict";
    /*global jQuery, sap, localStorage, window */
    jQuery.sap.declare("sap.ushell.services.SupportTicket");

    /**
     * This method MUST be called by the Unified Shell's container only, others
     * MUST call <code>sap.ushell.Container.getService("SupportTicket")</code>.
     * Constructs a new instance of the support ticket service.
     *
     * @param {object}
     *            oAdapter the service adapter for the support ticket service,
     *            as already provided by the container
     * @param {object}
     *            oContainerInterface the interface provided by the container
     * @param {string}
     *            sParameters the runtime configuration specified in the
     *            <code>sap.ushell.Container.getService()</code> call (not
     *            evaluated yet)
     * @param {object}
     *            oServiceConfiguration the service configuration defined in the
     *            bootstrap configuration; the boolean property
     *            <code>enabled</code> controls the service enablement
     *
     * This service is disabled by default. It can be enabled explicitly in the
     * bootstrap configuration of the start page:
     * <pre>
     * window[&quot;sap-ushell-config&quot;] = {
     *     services: {
     *         SupportTicket: {
     *             config: {
     *                 enabled: true
     *             }
     *         }
     *     }
     * }
     *
     * Platform implementations can also enable it dynamically by modification of the
     * bootstrap configuration during boot time.
     *
     * @class The Unified Shell's Support Ticket service
     *
     * @public
     * @constructor
     * @see sap.ushell.services.Container#getService
     *
     * @since 1.19.1
     *
     */
    sap.ushell.services.SupportTicket = function (oAdapter, oContainerInterface, sParameters, oServiceConfiguration) {
        var oServiceConfig = (oServiceConfiguration && oServiceConfiguration.config) || {};

        /**
         * Creates a Support Ticket. Forwards the given data (JSON object) to the associated adapter.
         *
         * @param {JSON} JSON object containing the input fields required for the support ticket.
         *
         * @public
         * @since 1.20.0
         */
        this.createTicket = function (oSupportTicketData) {
            return oAdapter.createTicket(oSupportTicketData);
        };

        /**
         * Checks if the service is enabled.
         * <p>
         * The service enablement depends on the configuration in the back-end system and the bootstrap configuration. 
         *
         * @return {boolean} <code>true</code> if the service is enabled; <code>false</code> otherwise
         *
         * @public
         * @since 1.20.0
         */
        this.isEnabled = function () {
            return oServiceConfig.enabled === true;
        };
    };
}());

}; // end of sap/ushell/services/SupportTicket.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.URLParsing') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview URL Parsing shell services
 *
 * URL Parsing serivces for shell compliant hashes
 *
 *
 * [ SO-Action~[Context]]
 * [ ? [A=B(&C=D)+]
 * &/
 *
 * The parsing functions are deliberately restrictive and fragile,
 * only shell compliant hashes are parsed correctly,
 * invalid or completely empty results ( not silently ignored parts) are returned if the hash is not deemed parseable
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.URLParsing");

    // usage : sap.ushell.Container.getService("URLParsing").parseShellHash etc.

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("URLParsing")</code>.
     * Constructs a new instance of the URL parsing service.
     *
     * @class The Unified Shell's internal URL parsing service (platform independent)
     *
     * Methods in this class allow to break down a shell compliant hash into it's respective parts
     * (SemanticObject,Action,Context, Parameters, appSpecificHash) or (ShellPart,appSpecificHash) respectively
     * or construct a hash from its constituents.
     *
     * All methods deal with the *internal* shellHash format.
     *
     * Most of the parse methods are robust w.r.t. a leading "#".
     *
     * Note: The functions were designed with a "truthy" behaviour for not present values,
     * Thus a client should not rely on the difference between null, "undefined", "" when testing for the
     * result of a parse action.
     *
     * The parsing functions are deliberately restrictive and fragile,
     * only shell compliant hashes are parsed correctly,
     * behaviour for non-compliant hashes is undefined and subject to change,
     * notably we do not aim do "degrade" nicefully or support partial parsing of corrupted urls.
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     * @public
     */
    sap.ushell.services.URLParsing = function () {
        /*jslint regexp : true*/
        var reValidShellPart = /^(([A-Za-z0-9_\/]+)-([A-Za-z0-9_\/\-]+)(~([A-Z0-9a-z=+\/]+))?)?([?]([^&]|(&[^\/]))*&?)?$/;
        /**
         * Extract the Shell hash# part from an URL
         * The application specific route part is removed
         * @see getHash for a function which retains the app specific route
        *
        * Shell services shall use this service to extract relevant
        * parts of an URL from an actual URL string (which should be treated as opaque)
        * <p>
        * The URL has to comply with the Fiori-Wave 2 agreed upon format
        *
        * <p>
        * This service shall be used to extract a hash part from an url.
        * The result can be further broken up by parseShellHash
        *
        * examples <p>
        *
        * http://a.b.c?defhij#SemanticObject-Action~Context?PV1=A&PV2=B&/appspecific
        * <br/>
        * returns : "#SemanticObject-Action~Context?PV1=A&PV2=B&/appspecific"
        *
        * Note: the results when passing an illegal (non-compliant) url are undefined and subject to change
        * w.o. notice. Notably further checks may added.
        * The design is deliberately restrictive and non-robust.
        *
        * @param {string} sShellHashString
        *     a valid (Shell) url, e.g. <br/>
        *     <code>http://xx.b.c#Object-name~AFE2==?PV1=PV2&PV4=V5&/display/detail/7?UU=HH</code>
        * @returns {Object}
        *     the parsed result
        *
        *
        * @methodOf sap.ushell.services.URLParsing#
        * @name parseShellHash
        * @since 1.16.0
         *@public
        */
        this.getShellHash = function (sURL) {
            /*jslint regexp : true*/
            var re = /[^#]*#(([^&]|&[^\/])*)(&\/.*)?/,
                match = re.exec(sURL);
            if (match) {
                return match[1];
            }
            return undefined;
        };


        /**
         * Extract a hash part from an URL, including an app-specific part
         * @param {String} sURL
         *   any value
         * @returns {String}
         *   <code>extracted string</code> if and only if a hash is present, undefined otherwise
         * @since 1.16.0
         * @public
         */
        this.getHash = function (sURL) {
            /*jslint regexp : true*/
            var re = /[^#]#(.*)/,
                match = re.exec(sURL);
            if (match) {
                return match[1];
            }
            return undefined;
        };

        /**
         * parse parameters from a uri query string (starting with ?)
         * into a parameter object
         * @params {String} sParams
         *   Parameter string, e.g. <code>?ABC=1&ABC=1%202DEF=4</code>
         * @returns {Object} oParams
         *   any value { ABC : ["1","1 2"], DEF : ["4"]}
         * @since 1.20.0
         * @public
         */
        this.parseParameters = function (sParams) {
            if (!sParams) {
                return {};
            }
            
            var oParams = jQuery.sap.getUriParameters(sParams).mParams;
            
            if (!oParams){
            	return {};
            }else{
            	if (this.extractSearchTerm(sParams) !== ""){
                	oParams.searchTerm[0] = this.extractSearchTerm(sParams);
                }
                return oParams;	
            }
//            return jQuery.sap.getUriParameters(sParams).mParams || {};
        };

        /**
         * extract search term with &  
         * it is not extracted by jQuery.sap.getUriParameters(sParams) 
         * @params {String} str
         *   string, e.g. <code>?searchTerm=SALES & COSTS&dataSource={...}</code>
         * @returns {String} searchTerm
         *   value "SALES & COSTS"
         * @since 1.23.0
         * @public
         */
        this.extractSearchTerm = function (str) {
        	var startindex = str.indexOf("searchTerm=") + 11;
        	var endindex = str.indexOf("&dataSource={", startindex);
        	  
        	if (startindex !=-1 && endindex !=-1 &&  endindex  > startindex ){
              return str.substring(startindex , endindex );        		  
        	}else{
              return "";
        	};
        };
        
        /**
         * combine members of a javascript object into a
         * parameter string,
         * note that parameters are ordered in an arbitrary manner
         * which is subject to change
         * @param {Object} oParams
         *   any value { ABC : [1,"1 2"], DEF : ["4"]}
         * @returns {String}
         *   <code>ABC=1&ABC=1%202DEF=4</code>
         *   Note that the result is *not* prefixed with a "?",
         *   parameter values are encodeURIComponent encoded.
         * @since 1.20.0
         * @public
         */
        this.paramsToString = function (oParams) {
            var first,
                a,
                k,
                i,
                lst,
                shellPart = "";
            first = "";
            a = null;
            lst = [];
            for (a in oParams) {
                if (oParams.hasOwnProperty(a)) {
                    lst.push(a);
                }
            }
            lst.sort();
            for (k = 0; k < lst.length; k = k + 1) {
                a = lst[k];
                if (jQuery.isArray(oParams[a])) {
                    for (i = 0; i < oParams[a].length; i = i + 1) {
                        shellPart += first + encodeURIComponent(a) + "=" + encodeURIComponent(oParams[a][i]);
                        first = "&";
                    }
                } else {
                    shellPart += first + encodeURIComponent(a) + "=" + encodeURIComponent(oParams[a]);
                    first = "&";
                }
            }
            return shellPart;
        };

        /**
         * Decompose a shell hash into the respective parts
         * @param {String} sHash
         *  Hash part of a shell compliant URL
         *  <code>#SO-Action~Context?P1=a&P2=x&/route?RPV=1</code>
         *  the hash part of an URL, <br/> e.g. <code>"#Object-name~AFE2==?PV1=PV2&PV4=V5&/display/detail/7?UU=HH</code>
         *
         *  Note that params always has an Array for each parameter value!
         *
         * @returns {object}
         *   <code>undefined </code> if not a parseable hash <br/>
         *   <code> { semanticObject : string, <br/>
         *            action : string, <br/>
         *            contextRaw : string, <br/>
         *            params :  MapObject<String,Array[String]>, <br/>
         *            appSpecificRoute : string <br/>
         *          }
         *  </code>
         *
         * @since 1.16.0
         * @public
         */
        this.parseShellHash = function (sHash) {
            /*jslint regexp : true*/
            var re = reValidShellPart,
                oSplitHash,
                sSemanticObject,
                sAction,
                sContext,
                sParams,
                match,
                pm,
                pmx,
                a;
            if (!sHash) {
                return undefined;
            }
            // split shell-hash and app-specific parts first
            oSplitHash = this.splitHash(sHash);

            match = re.exec(oSplitHash.shellPart);
            if (match) {
                sSemanticObject = match[2];
                sAction = match[3];
                sContext = match[5];
                sParams = match[6];
                pm = this.parseParameters(sParams);
                return { semanticObject : sSemanticObject,
                    action : sAction,
                    contextRaw : sContext,
                    params : pm,
                    appSpecificRoute : oSplitHash.appSpecificRoute };
            }
            if (oSplitHash.appSpecificRoute) {
                return { semanticObject : undefined,
                    action : undefined,
                    contextRaw : undefined,
                    params :  {},
                    appSpecificRoute : oSplitHash.appSpecificRoute };
            }
            return undefined;
        };

        /**
        * @name privstripLeadingHash
        * @since 1.16.0
        * @private
        */
        this.privstripLeadingHash = function (sHash) {
            if (sHash[0] === '#') {
                return sHash.substring(1);
            }
            return sHash;
        };

        /**
         * split a Unified Shell compliant hash into an Object containing a shell specific part and an app specific parts</br>
         * for non compliant hash strings, the empty object {} is returned.
         * an optional leading # is stripped
         * @param {String} sHash
         *  Hash part of a shell conformant URL
         *  {code}#SO-Action~Context?P1=a&P2=x&/route?RPV=1{code}
         *  the hash part of an URL, e.g. {code}"#Object-name~AFE2==?PV1=PV2&PV4=V5&/display/detail/7?UU=HH{code}
         *
         *  Note that params always has an Array for each parameter value!
         *
         * @returns {object}
         *   <code>{}</code>(empty object) if not a parseable hash
         *   <code>{ shellPart : "Object-name~AFE2==?PV1=PV2&PV4=V5",<br/>
         *            appSpecificRoute : "display/detail/7?UU=HH"<br/>
         *         }</br>
         *    </code> otherwise
         *
         * @since 1.16.0
         * @public
         */
        this.splitHash = function (sHash) {
            var re = /^(?:#|)([\S\s]*?)(&\/[\S\s]*)?$/,
                aMatch,
                sShellPart,
                sAppSpecificRoute;

            if (sHash === undefined || sHash === null || sHash === "") {
                return {};
            }
            // break down hash into parts
            // "#SO-ABC~CONTXT?ABC=3A&DEF=4B&/detail/1?A=B");
            aMatch = re.exec(sHash);
            sShellPart = aMatch[1];
            if (sShellPart !== "" && !reValidShellPart.test(sShellPart)) {
                return {};
            }
            sAppSpecificRoute = aMatch[2];
            if (sShellPart || sAppSpecificRoute) {
                return {  shellPart : sShellPart,
                    appSpecificRoute : sAppSpecificRoute }; // ,"&/detail/1?A=B");
            }
            return {};
        };

        function appendIf(sUrl, app) {
            if (app) {
                return sUrl + app;
            }
            return sUrl;
        }

        /**
         * compose a shell Hash from it's respective parts
         * Note that it also may append an app specific route !
         * @returns {string}
         *  the hash part of an URL, e.g. <code>"Object-name~AFE2==?PV1=PV2&PV4=V5&/display/detail/7?UU=HH</code>
         *  returns "" for an undefined object
         *
         * @param {object} oShellHash
         *   <code>undefined </code> if not a parseable hash
         *   <code> { target : { semanticObject : string,<br/>
         *                       action : string,<br/>
         *                       contextRaw : string<br/>
         *                     },<br/>
         *            params :  MapObject<String,Array[String]>,<br/>
         *            appSpecificRoute : string<br/>
         *          }<br/>
         *    </code>
         *    xor
         *   <code> { target : { shellHash }<br/>
         *          }
         *    </code>
         *
         * @since 1.16.0
         * @public
         */
        this.constructShellHash = function (oShellHash) {
            var shellPart,
                result,
                i = null,
                k,
                lst = [],
                first = "?",
                a = null;
            if (!oShellHash) {
                return "";
            }
            // align lack of target
            if (!oShellHash.target) {
                oShellHash.target = {};
                oShellHash.target.semanticObject = oShellHash.semanticObject;
                oShellHash.target.action = oShellHash.action;
                oShellHash.target.contextRaw = oShellHash.contextRaw;
            }
            if (oShellHash.target.shellHash || oShellHash.target.shellHash === "") {
                result = this.privstripLeadingHash(oShellHash.target.shellHash);
                return appendIf(result, oShellHash.appSpecificRoute);
            }
            // reconstruct shell part
            if (oShellHash.target.semanticObject && oShellHash.target.action) {
                shellPart = oShellHash.target.semanticObject + "-" + oShellHash.target.action;
            } else {
                return appendIf("", oShellHash.appSpecificRoute);
            }

            if (oShellHash.target.contextRaw) {
                shellPart += "~" + oShellHash.target.contextRaw;
            }
            first = "?";
            a = null;
            lst = [];
            for (a in oShellHash.params) {
                if (oShellHash.params.hasOwnProperty(a)) {
                    lst.push(a);
                }
            }
            lst.sort();
            for (k = 0; k < lst.length; k = k + 1) {
                a = lst[k];
                if (jQuery.isArray(oShellHash.params[a])) {
                    if (oShellHash.params[a].length > 1) {
                        jQuery.sap.log.error("Array startup parameters violate the designed intent of the Unified Shell Intent, use only single-valued parameters!");
                    }
                    for (i = 0; i < oShellHash.params[a].length; i = i + 1) {
                        shellPart += first + encodeURIComponent(a) + "=" + encodeURIComponent(oShellHash.params[a][i]);
                        first = "&";
                    }
                } else {
                    shellPart += first + encodeURIComponent(a) + "=" + encodeURIComponent(oShellHash.params[a]);
                    first = "&";
                }
            }
            return appendIf(shellPart, oShellHash.appSpecificRoute);
        };

        /**
         * Makes the given server-relative service URL point to the system given as parameter
         * <code>sSystem</code> or to the system of the current application if <code>sSystem</code>
         * is empty.
         * <em>Server-relative URL</em> means a URL starting with exactly one "/" (also known as
         * absolute-path URL). <em>System of the current application</em> is the value of the
         * business parameter <code>sap-system</code> with which the application is started.
         * <p>
         * Applications must call this API for any service URL with empty parameter
         * <code>sSystem</code> to create service URLs which respect the system of the current
         * application. They may call this API with non-empty parameter <code>sSystem</code> if
         * application specific logic is to determine the target system for service calls.
         * <p>
         * With service URLs converted using this API, administrators can redirect service
         * calls to servers other than the Unified Shell frontend server via SAP Web
         * Dispatcher or SAP Gateway configuration.
         * <p>
         * The system is added via segment parameter <code>o</code> to the last URL segment of the
         * service URL. It is also possible to make this function put the system to a different
         * URL path segment of the service URL by specifying the empty segment parameter
         * <code>o</code>, e.g. <code>/sap/opu/odata/MyService;o=/MyEntities/$count?p1=v1</code>.
         * If both <code>sSystem</code> is empty and the current application has
         * no system, no system is added and the empty segment parameter <code>o</code> is removed.
         * <br/>
         * <b>Example 1:</b> <code>/sap/opu/odata/MyService/?p1=v1</code> is converted to
         * <code>/sap/opu/odata/MyService;o=SYS/?p1=v1</code> if the current application's system
         * is &quot;SYS&quot;.
         * However it remains unchanged if the both the current application's system <em>and</em>
         * the parameter <code>sSystem</code> are empty.<br/>
         * <b>Example 2:</b> <code>/sap/opu/odata/MyService;o=/MyEntities/$count?p1=v1</code> is
         * converted to
         * <code>/sap/opu/odata/MyService;o=sid(SYS.123)/MyEntities/$count?p1=v1</code> if
         * parameter <code>sSystem</code> is set to &quot;sid(SYS.123)&quot;</code>.
         * <p>
         * The URL is in no way normalized.
         *
         * @param {string} sServiceUrl
         *   a server-relative URL without system alias information
         * @param {string} [sSystem]
         *   a system specification like &quot;SYS&quot; or &quot;sid(SYS.123)&quot;; if empty the
         *   system of the current application is used
         * @returns {string}
         *   the service URL pointing to the system specified in parameter <code>sSystem</code> or
         *   to the system of the current application
         * @public
         * @since 1.19.1
         * @throws Error if the URL is not server-relative (e.g. <code>./something</code>,
         *   <code>http://foo.bar/something</code>, ...)
         */
        this.addSystemToServiceUrl = function (sServiceUrl, sSystem) {
            /*jslint regexp:true */
            var oResolution;

            if (!sServiceUrl || sServiceUrl.indexOf('/') !== 0
                    || sServiceUrl.indexOf('//') === 0) {
                throw new sap.ui2.srvc.Error("Invalid URL: " + sServiceUrl,
                    "sap.ushell.services.URLParsing");
            }

            oResolution =
                sap.ushell.Container.getService("NavTargetResolution").getCurrentResolution();
            if (!sSystem && oResolution && oResolution.url) {
                sSystem = jQuery.sap.getUriParameters(oResolution.url).get("sap-system");
            }

            if (/^[^?]*(;o=([\/;?]|$))/.test(sServiceUrl)) {
                // URL with ";o=" *not* followed by system: insert system
                sServiceUrl = sServiceUrl.replace(/;o=([\/;?]|$)/,
                    (sSystem ? ";o=" + sSystem : "") + "$1");
            } else if (!/^[^?]*;o=/.test(sServiceUrl) && sSystem) {
                // URL without ";o=": append system
                sServiceUrl = sServiceUrl.replace(/(\/[^?]*?)(\/$|$|(\/?\?.*))/,
                    "$1;o=" + sSystem + "$2");
            }

            sap.ushell.Container.addRemoteSystemForServiceUrl(sServiceUrl);
            return sServiceUrl;
        };
    };

    sap.ushell.services.URLParsing.hasNoAdapter = true;
}());

}; // end of sap/ushell/services/URLParsing.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.URLShortening') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview Cross Application Navigation
 *
 *   This file exposes an API to perform (Invoke) Cross Application Navigation
 *   for applications for cross app navigation
 *
 *   it exposes interfaces to perform a hash change and/or trigger an external navigation
 *
 * @version 1.24.5
 */


/*global jQuery, sap, sessionStorage */
/*jslint nomen: true*/

(function () {
    "use strict";
    /*global jQuery, sap, location, hasher */
    jQuery.sap.declare("sap.ushell.services.URLShortening");
    jQuery.sap.require('jquery.sap.storage'); // unlisted dependency retained


    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("CrossApplicationNavigation")</code>.
     * Constructs a new instance of the CrossApplicationNavigation service.
     *
     * @class A service to compact URL with application parameters exceeding a certain limit
     *        when passing them via the browser hash
     *        
     *        
     *  The browser hash is limited in length on certain platforms. 
     *  
     *  The technical means to resolve urls in the unified shell do not involve browser 
     *  has values, as actual parameters are: 
     *  a) Passed and returned by the NavTargetResolution service as an OData request/response value
     *  b) subsequently passed to the Application as URL 
     *
     * The length of these parameters shall not be restricted by "artificial" and platform dependent
     * browser url length. 
     * 
     * The URL Shortener Service allows to shorten a given navigation target url, replacing
     * extended parameters by a token.
     * 
     * The full url is persisted in the sessionStorage of the browser, and potentially 
     * in the backend via the corresponding adapter (Not yet implemente
     *
     * This interface is only for usage by shell-internal services
     * 
     * 
     * Technically this service only compacts Application Parameters of a shell hash, 
     * these are split into a retained part (roughly URL_PARAMS_LENGTH_LIMIT long) 
     * and an extended part
     * 
     * Thus there are several strategies to still construct and url exceeding the 
     * limit.
     *
     * Usage:
     *
     * <code>
     *   var oUrlShortening = sap.ushell.Container.getService("URLShortening");<br/>
     * </code>
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.20.0
     * @private
     */
    sap.ushell.services.URLShortening = function () {
        var self = this;
        this.ABBREV_PARAM_NAME = "sap-ushell-appparams";
        this.URL_LENGTH_LIMIT = 1023;
        this.URL_PARAMS_LENGTH_LIMIT = 512;
        /**
        * given a url which is a shell hash, attempt to reduce it by replacing 
        * params list with sap-ushell-args=XGUID
        *
        * where guid is an generated abbreviation. 
        * 
        * The Parameters are stored under XGUID using a backend persistence. 
        * 
        * The inverse operation expandHash 
        *
        * @param {oArgs} oArgs
        *     object encoding a semantic object and action
        *  e.g. <code>{ target : { semanticObject : "AnObject", action: "Action" },<br/>
        *         params : { A : "B" } }</code>
        *  or
        *  e.g. <code>{ target : { semanticObject : "AnObject", action: "Action", context  : "AB7F3C" },<br/>
        *         params : { A : "B", C : [ "e", "j"] } }</code>
        *  or  
        *      <code>{ target : { shellHash : "SO-36&jumper=postman" },
        *      }</code>
        * @returns {string}
        *     the href for the specified parameters; always starting with a hash character; all parameters are URL-encoded
        *
        * @since 1.20.0
        * @public
         */
        this.compactHash = function (oURL) {
            var oSegments,
                oResult,
                prependHash,
                oUrlParsing,
                sResString;
            if (typeof oURL !== "string" || oURL.length < self.URL_LENGTH_LIMIT) {
                return oURL; // no shortening
            }
            // decompose the URL
            oUrlParsing = sap.ushell.Container.getService("URLParsing");
            oSegments = oUrlParsing.parseShellHash(oURL);
            //
            prependHash = '';
            if (oURL.charAt(0) === '#') {
                prependHash = '#';
            }
            // already has a parameter name
            if (oSegments && oSegments.params && oSegments.params[self.ABBREV_PARAM_NAME]) {
                return oURL;
            }
            //
            oResult = this._splitParameters(oSegments.params);
            if (!oResult.key) {
                // parameter can not be shortened
                return oURL;
            }
            sResString = oUrlParsing.paramsToString(oResult.tailParams);
            this._storeValue(oResult.key, sResString);
            return prependHash + oUrlParsing.constructShellHash({
                target : {
                    semanticObject: oSegments.semanticObject,
                    action : oSegments.action,
                    contextRaw : oSegments.contextRaw
                },
                params : oResult.headParams,
                appSpecificRoute : oSegments.appSpecificRoute
            });
        };

        /**
         * do a simple test on length of the hash
         * issue a warning if it exceeds arbitrary limits. 
         * 
         * This function can be replaced by compactHash if a 
         * transparent URL shortening is desired.
         * 
         * currently it truncates the startup parameters if they exceed URL_PARAMS_LENGTH_LIMIT characters
         *
         * it returns an tupel { sHash : oUrl, 
         *                       oParams : parames encoded in url shell hash
         *                       oSkippedParams : params not encoded in url shell hash, undefined if no truncation occured
         *                     }
         *                       
         *
         * @since 1.20.0
         * @public
          */
        this.checkHashLength = function (oURL) {
            var oSegments,
                oResult,
                prependHash,
                oUrlParsing,
                sResString;
            if (typeof oURL !== "string" || oURL.length < self.URL_LENGTH_LIMIT) {
                return { hash : oURL }; // no shortening
            }
            // decompose the URL
            oUrlParsing = sap.ushell.Container.getService("URLParsing");
            oSegments = oUrlParsing.parseShellHash(oURL);
             //
            prependHash = '';
            if (oURL.charAt(0) === '#') {
                prependHash = '#';
            }
            //
            oResult = this._splitParameters(oSegments.params);
            if (oResult.key) {
                // shell parameter length may not exceed 512 
                jQuery.sap.log.error("Application startup parameter length exceeds " + self.URL_PARAMS_LENGTH_LIMIT + " characters, truncation occured!");
                delete oResult.headParams[this.ABBREV_PARAM_NAME];
                // parameter can not be shortened
                return {
                    hash : prependHash + oUrlParsing.constructShellHash({
                        target : {
                            semanticObject: oSegments.semanticObject,
                            action : oSegments.action,
                            contextRaw : oSegments.contextRaw
                        },
                        params : oResult.headParams,
                        appSpecificRoute : oSegments.appSpecificRoute
                    }),
                    params : oResult.headParams,
                    skippedParams : oResult.tailParams
                };
            }
            // decision -> do not support shortening, 
            // also do not limit url length. Thus we allow plattform dependent behaviour, good luck
            jQuery.sap.log.error("URL exceeds dangerous limits, arbitrary shortening or worse may occur!");
            return oURL;
        };

// split a parameters object, 
// return a tripel key, headParams, tailParams if split, 
// otherwise key is undefined
        this._splitParameters = function (oParams) {
            var a,
                i,
                k,
                key,
                headParams = {},
                tailParams = {},
                hasTail = false,
                obj,
                item,
                cLength = 0,
                delta,
                lst = [];
            // sort parameter names first, then truncate in deterministic order
            for (a in oParams) {
                if (Object.prototype.hasOwnProperty.call(oParams, a)) {
                    lst.push(a);
                }
            }
            lst.sort();
            //
            for (k = 0; k < lst.length; k = k + 1) {
                a = lst[k];
                obj = oParams[a];
                if (obj.length > 1) {
                    jQuery.sap.log.error("Array startup parameters violate the designed intent of the Unified Shell Intent, use only single-valued parameters!");
                }
                for (i = 0; i < obj.length; i = i + 1) {
                    item = oParams[a][i];
                    delta = a.length + item.length;
                    if (delta + cLength > this.URL_PARAMS_LENGTH_LIMIT) {
                        if (tailParams[a]) {
                            tailParams[a].push(item);
                        } else {
                            tailParams[a] = [item];
                        }
                        hasTail = true;
                    } else {
                        if (headParams[a]) {
                            headParams[a].push(item);
                        } else {
                            headParams[a] = [item];
                        }
                    }
                    cLength = cLength + delta + 1;
                }
            }
            if (hasTail) {
                key = this._generateKey();
                headParams[this.ABBREV_PARAM_NAME] = key;
            }
            return { key : key,
                     tailParams: tailParams,
                     headParams: headParams
                   };
        };

        /**
         * generate a unique string value 
         * The string value may not exceed 22 characters.
         * for efficiency reasons, it should have a good locality
         * (slow variation in the first bytes) with time. 
         */
        this._generateKey = function () {
            return jQuery.sap.uid();
        };
        /**
        *
        * expand a given url if the tag is present in the parameters list 
        *
        * @param {Object} oArgs
        * configuration object describing the target
        *
        *  e.g. <code>{ target : { semanticObject : "AnObject", action: "Action" },<br/>
        *         params : { A : "B" } }</code>
        *    constructs sth. like   <code>#AnObject-Action?A=B&C=e&C=j</code>;
        *  or
        *  e.g. <code>{ target : { semanticObject : "AnObject", action: "Action", context  : "AB7F3C" },<br/>
        *         params : { A : "B", C : [ "e", "j"] } }</code>
        *  or  
        *      <code>{ target : { shellHash : "SO-36&jumper=postman" },
        *      }</code>
        *
        * and navigate to it via changing the hash
        * @since 1.15.0
        * @public
        */
        this.expandHash = function (oURL) {
            var segments,
                val,
                prependHash,
                paramsExpanded;
            if (typeof oURL !== "string") {
                return oURL; // no shortening
            }
            // decompose the URL
            segments = sap.ushell.Container.getService("URLParsing").parseShellHash(oURL);
            // non parseable or does it have a special parameter name? 
            if (!segments || (segments && segments.params && !segments.params[this.ABBREV_PARAM_NAME])) {
                return oURL;
            }
            prependHash = '';
            if (oURL.charAt(0) === '#') {
                prependHash = '#';
            }
            // can we retrieve a value for it? 
            val = this._retrieveValue(segments.params[this.ABBREV_PARAM_NAME] && segments.params[this.ABBREV_PARAM_NAME][0]);
            if (!val) {
                return oURL;
            }
            paramsExpanded = this._blendParameters(segments.params, val);

            return prependHash + sap.ushell.Container.getService("URLParsing").constructShellHash(
                {
                    target : {
                        semanticObject : segments.semanticObject,
                        action : segments.action,
                        contextRaw : segments.contextRaw
                    },
                    params : paramsExpanded,
                    appSpecificRoute : segments.appSpecificRoute
                }
            );
        };

        this._retrieveValue = function (sKey) {
            return jQuery.sap.storage(jQuery.sap.storage.Type.session).get(sKey);
        };

        this._storeValue = function (sKey, sValue) {
            jQuery.sap.storage(jQuery.sap.storage.Type.session).put(sKey, sValue);
        };


        this._blendParameters = function (oParams, sValue) {
            var newParams = sap.ushell.Container.getService("URLParsing").parseParameters("?" + sValue),
                a;
            delete oParams[this.ABBREV_PARAM_NAME];
            for (a in newParams) {
                if (Object.prototype.hasOwnProperty.call(newParams, a)) {
                    if (oParams[a]) {
                        oParams[a] = oParams[a].concat(newParams[a]);
                    } else {
                        oParams[a] = newParams[a];
                    }
                }
            }
            return oParams;
        };


    }; // URLShortening
    sap.ushell.services.URLShortening.hasNoAdapter = true;
}());

}; // end of sap/ushell/services/URLShortening.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.UserInfo') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The Unified Shell's user information service, which allows you to retrieve
 *     information about the user.
 *
 * @version 1.24.5
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.UserInfo");

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("UserInfo")</code>.
     * Constructs a new instance of the user information service.
     *
     * @class The Unified Shell's user information service, which allows you to retrieve
     *     information about the logged-in user.
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.16.3
     *
     * @public
     */
    sap.ushell.services.UserInfo = function (oAdapter, oContainerInterface) {
        /**
         * Returns the id of the user.
         *
         * @returns {string}
         *   The user id.
         *
         * @since 1.16.3
         *
         * @public
         */
        this.getId = function () {
            return sap.ushell.Container.getUser().getId();
        };

        /**
         * Returns an object representing the logged-in user.
         *
         * @returns {sap.ushell.User}
         *      object providing information about the logged-in user
         *
         * @since 1.15.0
         *
         * @private
         */
        this.getUser = function () {
            return sap.ushell.Container.getUser();
        };

        /**
         * Returns the list of themes available for the user.
         * In case of success, the <code>done</code> function returns an 'anonymous' object
         * representing the list of themes.
         * In case of failure, the <code>fail</code> function of the jQuery.promise object is called.
         *
         * @returns {object}
         *  jQuery.promise object.
         *
         * @private
         */
        this.getThemeList = function () {
            if (this.getUser().isSetThemePermitted() === false) {
                jQuery.sap.log.error("getThemeList failed");
                throw true;
            }

            var oPromise  = oAdapter.getThemeList();
            oPromise.fail(function () {
                jQuery.sap.log.error("getThemeList failed");
            });
            return oPromise;
        };

        /**
         * Sends the updated user attributes to the adapter.
         * In case of success, the <code>done</code> function returns nothing.
         * In case of failure, the <code>fail</code> function of the jQuery.promise object is called.
         *
         *  @returns {object}
         *  jQuery.promise object
         */
        this.updateUserPreferences = function () {
            var oPromise = oAdapter.updateUserPreferences(sap.ushell.Container.getUser());
            oPromise.fail(function () {
                jQuery.sap.log.error("updateAttributes: ");
            });
            return oPromise;
        };
    };

}());

}; // end of sap/ushell/services/UserInfo.js
if ( !jQuery.sap.isDeclared('sap.ushell.touchSupport') ) {
;/*global jQuery, sap, clearTimeout, console, window */
/*global jQuery, sap, clearTimeout, console, window */
(function () {
    "use strict";

    jQuery.sap.declare("sap.ushell.touchSupport");

    sap.ushell.touchSupport = function(cfg) {

        if (!cfg || !cfg.rootSelector || !cfg.containerSelector || !cfg.draggableSelector) {
            throw new Error("No configuration object to initialize User Interaction module.");
        }

        /* PRIVATE MEMBERS */
        //TODO: write optional and mandatory parameters.
        this.animationDuration;         // {Number} animation duration in ms
        this.captureStart;              // {Function} capture start event X and Y position
        this.captureMove;               // {Function} capture move event X and Y position
        this.captureEnd;                // {Function} capture end event X and Y position
        this.clickEvent;                // {String} `click` event
        this.clickHandler;              // {Function} capture click event and prevent the default behaviour on IOS
        this.clone;                     // {Element} cloned draggable element
        this.cloneClass;                // {String} clone CSS Class
        this.container;                 // {Element} content container to be scrolled
        this.contextMenuEvent;          // {String} `contextmenu` event for Windows 8 Chrome
        this.debug;                     // {Boolean} for debug mode
        this.dragAndScrollCallback;     // {Function} Callback function executes while drag mode is active
        this.dragAndScrollDuration;     // {Number} Scroll timer duration in ms
        this.dragAndScrollTimer;        // {Number} timer ID. Used in drag & scroll animation
        this.draggable;                 // {Array<Element>|NodeList<Element>} list of draggable elements
        this.placeHolderClass;          // {String} placeholder CSS Class
        this.draggableSelector;         // {String} CSS Selector String which specifies the draggable elements
        this.draggableSelectorExclude;  // {String} CSS Selector String which specifies the elements that can not be draggable but can be droppable
        this.doubleTapCallback;         // {Function} Callback function execute when double tap
        this.doubleTapDelay;            // {Number} number of milliseconds to recognize double tap
        this.element;                   // {Element} draggable element
        this.endEvent;                  // {String} `touchend` or `mouseup`
        this.endX;                      // {Number} X coordinate of end event
        this.endY;                      // {Number} Y coordinate of end event
        this.isTouch;                   // {Boolean} does browser supports touch events
        this.lastElement;               // {Element} last tapped element
        this.lastTapTime;               // {Number} number of milliseconds elapsed since last touch start
        this.log;                       // {Function} logs to console in debug mode
        this.mode;                      // {String} current feature mode `normal`, `scroll`, `drag`, `move`
        this.moveEvent;                 // {String} `touchmove` or `mousemove`
        this.moveTolerance;             // {Number} tolerance in pixels between touchStart and touchMove
        this.moveX;                     // {Number} X coordinate of move event
        this.moveY;                     // {Number} Y coordinate of move event
        this.noop;                      // {Function} empty function
        this.preventClickFlag;          // {Boolean} flag indicates if prevent default click behaviour
        this.preventClickTimeoutId;     // {Number}  timer ID. Used to clear click preventing
        this.startEvent;                // {String} `touchstart` or `mousedown`
        this.startX;                    // {Number} X coordinate of start event
        this.startY;                    // {Number} Y coordinate of start event
        this.switchModeDelay;           // {Number} switch mode delay in ms
        this.tapsNumber;                // {Number} the number of taps. could be 0 / 1 / 2
        this.timer;                     // {Number} timer ID. Used to decide mode
        this.touchCancelEvent;          // {String} `touchcanel` event
        this.touchDragCallback;         // {Function} Callback function execute when drag mode is active
        this.touchEndCallback;          // {Function} Callback function execute after capture `touchend` event
        this.touchStartCallback;        // {Function} Callback function execute after capture `touchstart` event
        this.wrapper;                   // {Element} content container parent

        /**
         * Initialize state using configuration
         *
         * @private
         */
        this.init = function (cfg) {
            var isTouch;
            this.startX = -1;
            this.startY = -1;
            this.moveX = -1;
            this.moveY = -1;
            this.endX = -1;
            this.endY = -1;

            this.container = document.querySelector(cfg.containerSelector);
            this.switchModeDelay = cfg.switchModeDelay || 1500;
            this.dragAndScrollDuration = cfg.dragAndScrollDuration || 230;
            this.moveTolerance = cfg.moveTolerance === 0 ? 0 : cfg.moveTolerance || 10;
            this.draggableSelector = cfg.draggableSelector;
            this.draggableSelectorExclude = cfg.draggableSelectorExclude;
            this.mode = 'normal';
            this.debug = cfg.debug || false;
            this.root = document.querySelector(cfg.rootSelector);
            this.animationDuration = cfg.animationDuration ||330;
            this.noop = function() {};
            this.tapsNumber = 0;
            this.lastTapTime = 0;
            this.log = this.debug ? this.logToConsole : this.noop;
            this.placeHolderClass = cfg.placeHolderClass || "";
            this.cloneClass = cfg.cloneClass || "";
            this.wrapper = cfg.wrapperSelector ? document.querySelector(cfg.wrapperSelector) : this.container.parentNode;
            this.touchStartCallback = typeof cfg.touchStartCallback === 'function' ? cfg.touchStartCallback : this.noop;
            this.doubleTapCallback = typeof cfg.doubleTapCallback === 'function' ? cfg.doubleTapCallback : this.noop;
            this.touchEndCallback = typeof cfg.touchEndCallback === 'function' ? cfg.touchEndCallback : this.noop;
            this.touchDragCallback = typeof cfg.touchDragCallback === 'function' ? cfg.touchDragCallback : this.noop;
            this.dragAndScrollCallback = typeof cfg.dragAndScrollCallback === 'function' ? cfg.dragAndScrollCallback : this.noop;
            this.doubleTapDelay = cfg.doubleTapDelay || 500;

            /*
             * Detect if browser supports touch events
             * and define start, move and end events
             * according to browser capabilities
             */
            if(isTouch = ('ontouchstart' in window)) {
                this.startEvent = 'touchstart';
                this.moveEvent = 'touchmove';
                this.endEvent = 'touchend';
                this.contextMenuEvent = 'contextmenu';
                this.touchCancelEvent = 'touchcancel';
                this.clickEvent = 'click';
                this.captureStart = this.captureTouchStart;
                this.captureMove = this.captureTouchMove;
                this.captureEnd = this.captureTouchEnd;
            } else {
                throw new Error('Not supported!');
            }
        };

        /* PRIVATE METHODS */

        /**
         * Iterates over array-like object and calls callback function
         * for each item
         *
         * @param {Array|NodeList|Arguments} scope - array-like object
         * @param {Function} callback - function to be called for each element in scope
         * @returns {Array|NodeList|Arguments} scope
         */
        this.forEach = function (scope, callback) {
            /*
             * NodeList and Arguments don't have forEach,
             * therefore borrow it from Array.prototype
             */
            return Array.prototype.forEach.call(scope, callback);
        };

        /**
         * Returns index of item in array-like object
         *
         * @param {Array|NodeList|Arguments} scope - array-like object
         * @param {*} item - item which index to be found
         * @returns {Number} index of item in the array-like object
         */
        this.indexOf = function (scope, item) {
            /*
             * NodeList and Arguments don't have indexOf,
             * therefore borrow it from Array.prototype
             */
            return Array.prototype.indexOf.call(scope, item);
        };

        /**
         * Cuts item from array-like object and pastes before reference item
         *
         * @param {Array|NodeList|Arguments} scope
         * @param {*} item
         * @param {*} referenceItem
         */
        this.insertBefore = function (scope, item, referenceItem) {
            var itemIndex,
                referenceItemIndex,
                splice;

            splice = Array.prototype.splice;
            itemIndex = this.indexOf(scope, item);
            referenceItemIndex = this.indexOf(scope, referenceItem);

            splice.call(
                scope,
                    referenceItemIndex - (itemIndex < referenceItemIndex ? 1 : 0),
                0,
                splice.call(scope, itemIndex, 1)[0]
            );
        };

        /**
         * Log to console
         *
         * @private
         */
        this.logToConsole = function () {
            console.log.apply(console, arguments);
        };


        this.getDraggableElement = function (touch) {
            var currentElement = touch.target;
            var element = undefined;

            this.draggable = jQuery(this.draggableSelector, this.container);
            //Since we are listening on the root element,
            //we would like to identify when a draggable element is being touched.
            //The target element of the event is the lowest element in the DOM hierarchy
            //where the user touched the screen.
            //We need to climb in the DOM tree from the target element until we identify the draggable element,
            //or getting out of container scope.
            while (typeof element === 'undefined' && currentElement !== this.root) {
                //Only draggable tiles
                if (this.indexOf(this.draggable, currentElement) >= 0 && jQuery(currentElement).not(this.draggableSelectorExclude).length > 0) {
                    element = currentElement;
                }
                currentElement = currentElement.parentNode;
            }

            return element;
        };

        /**
         * Capture X and Y coordinates of touch start event
         *
         * @param {TouchEvent} evt - touch start event
         * @private
         */
        this.captureTouchStart = function (evt) {
            var touch;
            this.endHandler(evt);
            this.element = undefined;

            if(evt.touches.length === 1) {
                touch = evt.touches[0];
                this.element = this.getDraggableElement(touch);
                this.startX = touch.pageX;
                this.startY = touch.pageY;
                this.lastMoveX = 0;
                this.lastMoveY = 0;
                //Check if it is a doubletap flow or single tap
                if (this.lastTapTime && this.lastElement && this.element && (this.lastElement === this.element)
                    && Math.abs(Date.now() - this.lastTapTime) < this.doubleTapDelay) {
                        this.lastTapTime = 0;
                        this.tapsNumber = 2;
                }
                else {
                    this.lastTapTime = Date.now();
                    this.tapsNumber = 1;
                    this.lastElement = this.element;
                }
            }
            this.log('captureTouchStart('+ this.startX +', '+ this.startY +')');
        };

        /**
         * Handler for `mousedown` or `touchstart`
         *
         * @private
         */
        this.startHandler = function (evt) {
            this.log('startHandler');
            clearTimeout(this.timer);
            delete this.timer;
            this.captureStart(evt);
            if(this.element) {
                this.touchStartCallback(evt, this.element);
                if (this.tapsNumber === 2) {
                    this.mode = 'double-tap';
                    return;
                }
                this.timer = setTimeout(function () {
                    this.log('mode switched to drag');
                    this.mode = 'drag';
                    this.createClone();
                }.bind(this), this.switchModeDelay);
            }
        }.bind(this);

        /**
         * Capture X and Y coordinates of touch move event
         *
         * @param {TouchEvent} evt - touch move event
         * @private
         */
        this.captureTouchMove = function (evt) {
            var touch;
            if(evt.touches.length === 1) {
                touch = evt.touches[0];
                this.moveX = touch.pageX;
                this.moveY = touch.pageY;
            }
            this.log('captureTouchMove(' + this.moveX + ', ' + this.moveY + ')');
        };

        /**
         * Handler for `mousemove` or `touchmove`
         *
         * @private
         */
        this.moveHandler = function(evt) {
            this.log('moveHandler');
            this.captureMove(evt);
            switch(this.mode) {
                case 'normal':
                    if (Math.abs(this.startX - this.moveX) > this.moveTolerance || Math.abs(this.startY - this.moveY) > this.moveTolerance) {
                        this.log('-> normal');
                        this.mode = 'scroll';
                        clearTimeout(this.timer);
                        delete this.timer;
                    }
                    break;
                case 'scroll':
                    this.log('-> scroll');
                    break;
                case 'drag':
                    evt.preventDefault();
                    this.log('-> drag');
                    this.mode = 'drag-and-scroll';
                    this.translateClone();
                    this.dragAndScroll();
                    this.touchDragCallback(evt, this.element);
                    break;
                case 'drag-and-scroll':
                    evt.stopPropagation();
                    evt.preventDefault();
                    this.log('-> drag-and-scroll');
                    this.translateClone();
                    this.dragAndScroll();
                    this.moveDraggable();
                    this.dragAndScrollCallback(evt, this.clone);
                    break;
            }
        }.bind(this);

        /**
         * Capture X and Y coordinates of touch end event
         *
         * @param {TouchEvent} evt - touch move event
         * @private
         */
        this.captureTouchEnd = function (evt) {
            var touch;
            if(evt.changedTouches.length === 1) {
                touch = evt.changedTouches[0];
                this.endX = touch.pageX;
                this.endY = touch.pageY;
            }
            this.log('captureTouchEnd('+ this.endX +', '+ this.endY +')');
        };

        /**
         * Handler for `contextmenu` event. Disable right click on Chrome
         *
         * @private
         */
        this.contextMenuHandler = function (evt) {
            evt.preventDefault();
        }.bind(this);

        /**
         *
         * @param event
         */
        this.clickHandler = function (event) {
            if (this.preventClickFlag) {
                this.preventClickFlag = false;
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
                clearTimeout(this.preventClickTimeoutId);
            }
        }.bind(this);

        /**
         * This function solves a bug which causes the tile to be launched after D&D.
         */
        this.preventClick = function () {
            this.preventClickFlag = true;
            this.preventClickTimeoutId = setTimeout(function () {
                this.preventClickFlag = false;
            }, 100);
        };

        /**
         * Handler for `mouseup` or `touchend`
         *
         * @private
         */
        this.endHandler = function (evt) {
            this.log('endHandler');
            this.captureEnd(evt);
            switch(this.mode) {
                case 'normal':
                    this.log('-> normal');
                    break;
                case 'scroll':
                    this.log('-> scroll');
                    break;
                case 'drag':
                    this.log('-> drag');
                    this.removeClone();
                    this.touchEndCallback(evt, this.element);
                    this.preventClick();
                    break;
                case 'drag-and-scroll':
                    this.log('-> drag-and-scroll');
                    this.removeClone();
                    this.touchEndCallback(evt, this.element);
                    this.preventClick();
                    evt.stopPropagation();
                    evt.preventDefault();
                    break;
                case 'double-tap':
                    this.log('-> double-tap');
                    this.doubleTapCallback(evt, this.element);
                    break;
            }
            clearTimeout(this.timer);
            delete this.timer;
            this.lastMoveX = 0;
            this.lastMoveY = 0;
            this.mode = 'normal';
        }.bind(this);

        /**
         * Create clone of draggable element
         *
         * @private
         */
        this.createClone = function () {
            var style,
                rect;

            rect = this.element.getBoundingClientRect();
            this.clone = this.element.cloneNode(true);
            this.clone.className += (' ' + this.cloneClass);
            this.element.className += (' ' + this.placeHolderClass);
            style = this.clone.style;
            style.position = 'fixed';
            style.display = 'block';
            style.top = rect.top + 'px';
            style.left = rect.left + 'px';
            style.width = rect.width + 'px';
            style.zIndex = '100'
            style.webkitTransition = '-webkit-transform 0ms cubic-bezier(0.33, 0.66, 0.66, 1)';
            style.transition = '-webkit-transform 0ms cubic-bezier(0.33, 0.66, 0.66, 1)';
            style.webkitTransform = 'translate3d(0px, 0px, 0px) ';
            this.root.appendChild(this.clone);

            this.log('createClone');
        };

        /**
         * Remove clone of draggable element
         *
         * @private
         */
        this.removeClone = function () {
            this.element.className = this.element.className.split(' ' + this.placeHolderClass).join('');
            this.clone.parentElement.removeChild(this.clone);
            // unset reference to DOM element of the clone, otherwise it will remain DOM fragment
            this.clone = null;
            this.log('removeClone');
        };

        /**
         * Translate clone of draggable element
         *
         * @private
         */
        this.translateClone = function () {
            var deltaX,
                deltaY;

            deltaX = this.moveX - this.startX;
            deltaY = this.moveY - this.startY;
            this.clone.style.webkitTransform = 'translate3d(' + deltaX + 'px, ' + deltaY + 'px, 0px)';

            this.log('translateClone (' + deltaX + ', ' + deltaY + ')');
        };

        /**
         * Scroll while dragging if needed
         *
         * @private
         */
        this.dragAndScroll = function () {
            var
            /*
             * Indicates how much pixels of draggable element are overflowing in a vertical axis.
             * When deltaY is negative - content should be scrolled down,
             * when deltaY is positive - content should be scrolled up,
             * when deltaY is zero - content should not be scrolled
             */
                deltaY,
            /*
             * Duration of scrolling animation in milliseconds.
             * Greater value makes scroll faster, lower values - smoother
             */
                duration,
                style,
                that;

            function startAnimation() {
                style.webkitTransition = '-webkit-transform ' + duration + 'ms linear';
                style.transition = '-webkit-transform ' + duration + 'ms linear';
                style.webkitTransform = 'translate(0px, ' + deltaY + 'px) scale(1) translateZ(0px)';
            }

            function clearAnimation() {
                style.webkitTransition = '';
                style.transition = '';
                style.webkitTransform = '';
                that.wrapper.scrollTop -= deltaY;
            }

            function getDeltaY() {
                var rect,
                    delta;

                if(that.clone) {
                    rect = that.clone.getBoundingClientRect();

                    // Up
                    delta = that.wrapper.offsetTop - rect.top;
                    if (delta > 0) {
                        return delta;
                    }

                    // Down
                    delta = that.wrapper.offsetTop + that.wrapper.offsetHeight - (rect.top + that.clone.offsetHeight);
                    if (delta < 0) {
                        return delta;
                    }
                }
                return 0;
            }

            function isScrollPossible() {
                //Down
                if (deltaY < 0) {
                    //Calculate the difference between (document - wrapper) and (difference between : document - wrapper + container height + wrapper height )
                    return that.wrapper.getBoundingClientRect().top - (that.container.getBoundingClientRect().top + that.container.offsetHeight) + that.wrapper.offsetHeight < 0;
                }
                //Up
                //Calculate the difference between (document - wrapper) and (document - container + container.top)
                return that.container.getBoundingClientRect().top - (that.wrapper.getBoundingClientRect().top + that.container.offsetTop) < 0;
            }

            function start() {
                startAnimation();
                that.dragAndScrollTimer = setTimeout(function() {
                    clearAnimation();
                    that.dragAndScrollTimer = undefined;
                    if((deltaY = getDeltaY()) !== 0 && isScrollPossible()) {
                        start();
                    }
                }, duration);
            }

            that = this;
            deltaY = getDeltaY();
            if(deltaY !== 0 && !this.dragAndScrollTimer && isScrollPossible()) {
                duration = this.dragAndScrollDuration;
                style = this.container.style;
                start();
            }

            this.log('dragAndScroll (' + deltaY + ')');
        };

        /**
         * Move draggable element forward and backward
         * across another draggable elements
         *
         * @private
         */
        this.moveDraggable = function() {
            var elementIndex,
                hoverElement,
                hoverElementIndex,
                isHorizontalIntersection,
                isVerticalIntersection,
                rect,
                style;



            this.forEach(this.draggable, function(item, index) {
                /*
                 * There is no way to break native forEach,
                 * so just speed it up using fast check
                 * before executing expensive DOM manipulations
                 */
                if(!hoverElement) {
                    rect = item.getBoundingClientRect();
                    style = window.getComputedStyle(item);
                    isHorizontalIntersection = !(rect.right < this.moveX || rect.left > this.moveX);
                    isVerticalIntersection = !(rect.bottom < this.moveY || rect.top > this.moveY);
                    if(isHorizontalIntersection && isVerticalIntersection) {
                        hoverElement = item;
                        hoverElementIndex = index;
                    }
                }
            }.bind(this));

            if(hoverElement && this.element !== hoverElement) {

                /*
                 * Reorder draggable elements
                 */
                elementIndex = this.indexOf(this.draggable, this.element);
                //Check if there was enough movement in order to mover the element
                if (Math.abs(this.lastMoveX - this.moveX) >= this.moveTolerance && Math.abs(this.lastMoveY - this.moveY) >= this.moveTolerance) {
                    if (hoverElementIndex < elementIndex) {
                        hoverElement.parentNode.insertBefore(this.element, hoverElement);
                        this.insertBefore(this.draggable, this.element, hoverElement);
                    } else if (hoverElementIndex > elementIndex) {
                        hoverElement.parentNode.insertBefore(this.element, hoverElement.nextSibling);
                        this.insertBefore(this.draggable, this.element, this.draggable[hoverElementIndex + 1]);
                    }
                    this.lastMoveX = this.moveX;
                    this.lastMoveY = this.moveY;
                }
            }

            this.log('moveDraggable');
        };

        /* PUBLIC METHODS */

        /**
         * Enable feature
         *
         * @public
         */
        this.enable = function () {
            this.log('enable');
            this.root.addEventListener(this.startEvent, this.startHandler, false);
            this.root.addEventListener(this.moveEvent, this.moveHandler, true);
            this.root.addEventListener(this.endEvent, this.endHandler, false);
            this.root.addEventListener(this.contextMenuEvent, this.contextMenuHandler, false);
            this.root.addEventListener(this.clickEvent, this.clickHandler, true);
            this.root.addEventListener(this.touchCancelEvent, this.endHandler, false);

            return this;
        };

        /**
         * Disable feature
         *
         * @public
         */
        this.disable = function () {
            this.log('disable');
            this.root.removeEventListener(this.startEvent, this.startHandler, false);
            this.root.removeEventListener(this.moveEvent, this.moveHandler, true);
            this.root.removeEventListener(this.endEvent, this.endHandler, false);
            this.root.removeEventListener(this.contextMenuEvent, this.contextMenuHandler, false);
            this.root.removeEventListener(this.clickEvent, this.clickHandler, true);
            this.root.removeEventListener(this.touchCancelEvent, this.endHandler, false);

            return this;
        };

        /*
         * Initialize dynamic feature state
         * and behaviour using configuration
         */
        this.init(cfg);
    };
})();

}; // end of sap/ushell/touchSupport.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.AboutButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.AboutButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.AboutButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/AboutButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/AboutButton
 * @extends sap.m.Button
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.AboutButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.AboutButton", { metadata : {

	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.AboutButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.AboutButton.extend
 * @function
 */


// Start of sap/ushell/ui/footerbar/AboutButton.js
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, navigator*/

    jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ObjectHeader'); // unlisted dependency retained

    jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Button'); // unlisted dependency retained

    

    jQuery.sap.declare("sap.ushell.ui.footerbar.AboutButton");

    /**
     * AboutButton
     *
     * @name sap.ushell.ui.footerbar.AboutButton
     * @private
     * @since 1.16.0
     */
    sap.ushell.ui.footerbar.AboutButton.prototype.init = function () {
        this.setIcon('sap-icon://hint');
        this.setWidth('100%');
        this.setText(sap.ushell.resources.i18n.getText("about"));
        this.setTooltip(sap.ushell.resources.i18n.getText("about"));
        this.attachPress(this.showAboutDialog);
        //call the parent sap.m.Button init method
        if (sap.m.Button.prototype.init) {
            sap.m.Button.prototype.init.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.AboutButton.prototype.showAboutDialog = function () {

        jQuery.sap.require("sap.ushell.services.AppConfiguration");

        var translationBundle = sap.ushell.resources.i18n,
            metaData = sap.ushell.services.AppConfiguration.getMetadata(),
            oSimpleForm = new sap.ui.layout.form.SimpleForm({
            	id: 'aboutDialogFormID',
                editable: false,
                content : [
                    new sap.m.Label({text : translationBundle.getText("technicalName")}),
                    new sap.m.Text({text : metaData.libraryName || ''}),
                    new sap.m.Label({text : translationBundle.getText("fioriVersionFld")}),
                    new sap.m.Text({text : metaData.version || ''}),
//                    new sap.m.Label({text : translationBundle.getText("fioriBuildFld")}),
//                    new sap.m.Text({text : sap.ui.buildinfo.buildtime || ''}),
                    new sap.m.Label({text : translationBundle.getText("sapui5Fld")}),
                    new sap.m.Text({text : (sap.ui.version || "") + (' (' + (sap.ui.buildinfo.buildtime || "") + ')') || ''}),
                    new sap.m.Label({text : translationBundle.getText("userAgentFld")}),
                    new sap.m.Text({text : navigator.userAgent || ''}),
                    new sap.m.Label({text : ''})
                ]
            }),
            oHeader = new sap.m.ObjectHeader({
                title : metaData.title,
                icon : metaData.icon
            }).addStyleClass('sapUshellAboutDialogHeader'),
            oDialog,
            oVBox,
            okButton = new sap.m.Button({
                text : translationBundle.getText("okBtn"),
                press : function () {
                    oDialog.close();
                }
            });

        if (jQuery.isEmptyObject(metaData) || !metaData.icon) {
            oVBox = new sap.m.VBox({
                items: [oSimpleForm]
            });
        }
        else {
            oVBox = new sap.m.VBox({
                items: [oHeader, oSimpleForm]
            });
        }

        oDialog = new sap.m.Dialog({
        	id: "aboutContainerDialogID",
            title: translationBundle.getText("about"),
            contentWidth : "250px",
            horizontalScrolling: false,
            leftButton: okButton,
            afterClose : function () {
                oDialog.destroy();
            }
        });

        oDialog.addContent(oVBox);
        oDialog.open();
    };
}());
}; // end of sap/ushell/ui/footerbar/AboutButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.AboutButtonRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.AboutButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.AboutButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.AboutButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.AboutButtonRenderer.render = ;

}());
}; // end of sap/ushell/ui/footerbar/AboutButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.AddBookmarkButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.AddBookmarkButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.AddBookmarkButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/AddBookmarkButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBeforePressHandler beforePressHandler} : any</li>
 * <li>{@link #getAfterPressHandler afterPressHandler} : any</li>
 * <li>{@link #getAppData appData} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/AddBookmarkButton
 * @extends sap.m.Button
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.AddBookmarkButton", { metadata : {

	library : "sap.ushell",
	properties : {
		"beforePressHandler" : {type : "any", group : "Misc", defaultValue : null},
		"afterPressHandler" : {type : "any", group : "Misc", defaultValue : null},
		"appData" : {type : "object", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.AddBookmarkButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.AddBookmarkButton.extend
 * @function
 */


/**
 * Getter for property <code>beforePressHandler</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>beforePressHandler</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getBeforePressHandler
 * @function
 */

/**
 * Setter for property <code>beforePressHandler</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oBeforePressHandler  new value for property <code>beforePressHandler</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setBeforePressHandler
 * @function
 */


/**
 * Getter for property <code>afterPressHandler</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>afterPressHandler</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getAfterPressHandler
 * @function
 */

/**
 * Setter for property <code>afterPressHandler</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oAfterPressHandler  new value for property <code>afterPressHandler</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setAfterPressHandler
 * @function
 */


/**
 * Getter for property <code>appData</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>appData</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getAppData
 * @function
 */

/**
 * Setter for property <code>appData</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oAppData  new value for property <code>appData</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setAppData
 * @function
 */


// Start of sap/ushell/ui/footerbar/AddBookmarkButton.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    /*global sap, window, location */

    /**
     * AddBookmarkButton
     * 
     * @name sap.ushell.ui.footerbar.AddBookmarkButton
     * @private
     * @since 1.15.0
     */
    jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Label'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Input'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Button'); // unlisted dependency retained

    

    jQuery.sap.declare("sap.ushell.ui.footerbar.AddBookmarkButton");

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.init = function () {

        this.setIcon('sap-icon://add-favorite');
        this.setWidth('100%');
        this.setText(sap.ushell.resources.i18n.getText("addToHomePageBtn"));
        this.setTooltip(sap.ushell.resources.i18n.getText("addToHomePageBtn_tooltip"));
        this.setEnabled();  // disables button if shell not initialized

        var self = this;

        this.attachPress(function () {
            if (self.getBeforePressHandler()) {
                self.getBeforePressHandler()();
            }

            self.showAddBookmarkDialog(function () {
                if (self.getAfterPressHandler()) {
                    self.getAfterPressHandler()();
                }
            });
        });
        //call the parent sap.m.Button init method
        if (sap.m.Button.prototype.init) {
            sap.m.Button.prototype.init.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.exit = function () {
        if (this.oGroupsSelect) {
            this.oGroupsSelect.destroy();
        }
        if (this.oSimpleForm) {
            this.oSimpleForm.destroy();
        }
        if (this.oDialog) {
            this.oDialog.destroy();
        }
        //call the parent sap.m.Button exit method
        if (sap.m.Button.prototype.exit) {
            sap.m.Button.prototype.exit.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.showAddBookmarkDialog = function (cb) {
        var self = this;
        this.oResourceBundle = sap.ushell.resources.i18n;
        this.appData = this.getAppData() || {};
        this.oTitleInput = new sap.m.Input('bookmarkTitleInput', {value: this.appData.title || ''});
        //on every change in the input verify if there is a text in the input - if so enable ok, otherwise disable
        this.oTitleInput.attachLiveChange(function () {
            self._toggleOkButton(this.getValue(), self.oDialog.getBeginButton());
        });
        this.oSubTitleInput = new sap.m.Input('bookmarkSubTitleInput', {value: this.appData.subtitle || ''});
        this.oInfoInput = new sap.m.Input('bookmarkInfoInput', {value: this.appData.info || ''});

        this.oGroupsSelect = new sap.m.Select("groupsSelect", {
            tooltip: "{i18n>bookmarkDialogoInfo_tooltip}",
            items : {
                path : "/groups",
                template : new sap.ui.core.ListItem({
                    text : "{title}"
                })
            },
            maxWidth: "384px"
        });

        // check if group were loaded in the model. If not - reload them
        var currentModel = sap.ui.getCore().byId("shell").getModel();
        if (!currentModel.oData.groups.length) {
            var oLaunchPageService = sap.ushell.Container.getService("LaunchPage"),
                oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.publish("launchpad", "loadDashboardGroups");
        }
        this.oGroupsSelect.setModel(currentModel);

        this.cb = cb;

        var oTitle = new sap.m.Label({text: this.oResourceBundle.getText('titleFld')}),
            oSubTitle = new sap.m.Label({text: this.oResourceBundle.getText('subtitleFld')}),
            oIconImage = new sap.ui.core.Icon({src: this.appData.icon || 'sap-icon://home', size: '32px'}),
            oInfo = new sap.m.Label({text: this.oResourceBundle.getText('infoMsg')}),
            oGroups = new sap.m.Label({text: this.oResourceBundle.getText('GroupListItem_label')});

        var content = [
            oIconImage,
            oTitle,
            this.oTitleInput,
            oSubTitle,
            this.oSubTitleInput,
            oInfo,
            this.oInfoInput
        ];

        content.push(oGroups);
        content.push(this.oGroupsSelect);

        this.oSimpleForm = new sap.ui.layout.form.SimpleForm({
            id: 'bookmarkFormId',
            content: content
        });

        var oResources = sap.ushell.resources.i18n;

        this.oTitleInput.setTooltip(oResources.getText("bookmarkDialogoTitle_tooltip"));
        this.oSubTitleInput.setTooltip(oResources.getText("bookmarkDialogoSubTitle_tooltip"));
        this.oInfoInput.setTooltip(oResources.getText("bookmarkDialogoInfo_tooltip"));
        this.oGroupsSelect.setTooltip(oResources.getText("bookmarkDialogoGroup_tooltip"));

        this._openDialog(this.oSimpleForm);
    };

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype._toggleOkButton = function (sValue, oOkButton) {
        oOkButton.setEnabled((sValue) ? true : false);
    };

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype._openDialog = function (oContent) {
        var okButton = new sap.m.Button('bookmarkOkBtn', {
            text: this.oResourceBundle.getText('okBtn'),
            press: this._handleOkButtonPress.bind(this),
            enabled : false
        }),
            cancelButton = new sap.m.Button('bookmarkCancelBtn', {
                text: this.oResourceBundle.getText('cancelBtn'),
                press: function () {
                    this.oDialog.close();
                    this.cb();
                }.bind(this)
            });
        this._toggleOkButton(this.appData.title, okButton); //if primary title is not empty enable the ok button - otherwise disable
        this.oDialog = new sap.m.Dialog({
            id: 'bookmarkDialog',
            title: this.oResourceBundle.getText('addToHomePageBtn'),
            contentWidth: '400px',
            content: oContent,
            beginButton : okButton,
            endButton: cancelButton,
            afterClose : function () {
                this.oGroupsSelect.destroy();
                this.oSimpleForm.destroy();
                this.oDialog.destroy();
                //after we destroy the Dialog, no need to save a reference to it
                //in the onExit method, we try to destroy these elements again in case
                //they exists, so we have to delete them
                delete (this.oGroupsSelect);
                delete (this.oSimpleForm);
                delete (this.oDialog);
            }.bind(this)
        });
        this.oDialog.open();
    };

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype._handleOkButtonPress = function () {
        var selectedGroupData;

        if (this.oGroupsSelect.getSelectedItem()) {
            selectedGroupData = this.oGroupsSelect.getSelectedItem().getBindingContext().getObject();
        }
        var oData = {
                title : this.oTitleInput.getValue(),
                subtitle : this.oSubTitleInput.getValue(),
                url : this.appData.customUrl ? this.appData.customUrl : location.hash || window.location.href,
                icon : this.appData.icon,
                info : this.oInfoInput.getValue(),
                numberUnit : this.appData.numberUnit,
                serviceUrl : typeof (this.appData.serviceUrl) === "function" ? this.appData.serviceUrl() : this.appData.serviceUrl,
                serviceRefreshInterval : this.appData.serviceRefreshInterval,
                group : selectedGroupData
            },
            oEventBus = sap.ui.getCore().getEventBus();
        oEventBus.publish("launchpad", "addBookmarkTile", oData);

        this.oDialog.close();
        this.cb();

    };

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.setEnabled = function (bEnabled) {
        var sState = "",
            bPersonalization = true;

        if (sap.ui.getCore().byId("shell")) {
            sState = sap.ui.getCore().byId("shell").getModel().getProperty("/currentState").stateName || "";
            if (sap.ui.getCore().byId("shell").getModel().getProperty("/personalization") !== undefined) {
                bPersonalization = sap.ui.getCore().byId("shell").getModel().getProperty("/personalization");
            }
        }
        if (sState === 'headerless' || sState === 'standalone' || sState === 'embedded' || !bPersonalization) {
            bEnabled = false;
        }
        if (!sap.ushell.Container) {
            if (this.getEnabled()) {
                jQuery.sap.log.warning(
                    "Disabling 'Save as Tile' button: unified shell container not initialized",
                    null,
                    "sap.ushell.ui.footerbar.AddBookmarkButton"
                );
            }
            bEnabled = false;
        }
        sap.m.Button.prototype.setEnabled.call(this, bEnabled);
        if (!bEnabled) {
            this.addStyleClass("sapUshellAddBookmarkButton");
        }
    };

}());
}; // end of sap/ushell/ui/footerbar/AddBookmarkButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.AddBookmarkButtonRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.AddBookmarkButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.AddBookmarkButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.AddBookmarkButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.AddBookmarkButtonRenderer.render = ;
}());
}; // end of sap/ushell/ui/footerbar/AddBookmarkButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.ContactSupportButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.ContactSupportButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.ContactSupportButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/ContactSupportButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/CreateTicketButton
 * @extends sap.m.Button
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.ContactSupportButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.ContactSupportButton", { metadata : {

	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.ContactSupportButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.ContactSupportButton.extend
 * @function
 */


// Start of sap/ushell/ui/footerbar/ContactSupportButton.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    /*global jQuery, sap, window*/

    
    jQuery.sap.declare("sap.ushell.ui.footerbar.ContactSupportButton");

    /**
     * ContactSupportButton
     *
     * @name sap.ushell.ui.footerbar.ContactSupportButton
     * @private
     * @since 1.16.0
     */
    sap.ushell.ui.footerbar.ContactSupportButton.prototype.init = function () {
        this.setIcon('sap-icon://email');
        this.setWidth('100%');
        this.setText(sap.ushell.resources.i18n.getText("contactSupportBtn"));
        this.setTooltip(sap.ushell.resources.i18n.getText("contactSupportBtn_tooltip"));
        this.attachPress(this.showContactSupportDialog);
        this.setEnabled();// disables button if shell not initialized
    };

    sap.ushell.ui.footerbar.ContactSupportButton.prototype.showContactSupportDialog = function () {
        jQuery.sap.require("sap.ushell.services.Container");
        jQuery.sap.require("sap.ui.layout.form.SimpleForm");
        jQuery.sap.require("sap.m.TextArea");
        jQuery.sap.require("sap.m.Link");
        jQuery.sap.require("sap.m.Label");
        jQuery.sap.require("sap.m.Text");
        jQuery.sap.require("sap.m.Dialog");
        jQuery.sap.require("sap.m.Button");
        jQuery.sap.require("sap.ushell.UserActivityLog");

        this.translationBundle = sap.ushell.resources.i18n;
        this.oClientContext = sap.ushell.UserActivityLog.getMessageInfo();
        this.oLink = new sap.m.Link({text: this.translationBundle.getText("technicalDataLink")});
        this.oBottomSimpleForm = new sap.ui.layout.form.SimpleForm("bottomForm", {editable: false, content: [this.oLink]});
        this.sendButton = new sap.m.Button("contactSupportSendBtn", {
            text: this.translationBundle.getText("sendBtn"),
            enabled: false,
            press: function () {
                var oSupportTicketService = sap.ushell.Container.getService("SupportTicket"),
                    oText = this.oTextArea.getValue(),
                    oSupportTicketData = {text: oText, clientContext: this.oClientContext},
                    promise = oSupportTicketService.createTicket(oSupportTicketData);

                promise.done(function (sMessageNumber) {
                    sap.ushell.Container.getService("Message").info(this.translationBundle.getText("supportTicketCreationSuccess"));
                }.bind(this));
                promise.fail(function (sMessageNumber) {
                    sap.ushell.Container.getService("Message").error(this.translationBundle.getText("supportTicketCreationFailed"));
                }.bind(this));

                this.oDialog.close();
            }.bind(this)
        });
        this.cancelButton = new sap.m.Button("contactSupportCancelBtn", {
            text: this.translationBundle.getText("cancelBtn"),
            press: function () {
                this.oDialog.close();
            }.bind(this)
        });
        this.oTextArea = new sap.m.TextArea("textArea", {
            rows: 7,
            liveChange: function () {
                if (/\S/.test(this.oTextArea.getValue())) {
                    this.sendButton.setEnabled(true);
                } else {
                    this.sendButton.setEnabled(false);
                }
            }.bind(this)
        });

        this.oTopSimpleForm = new sap.ui.layout.form.SimpleForm("topForm", {editable: false, content: [this.oTextArea]});
        this.oDialog = new sap.m.Dialog({
            id: "ContactSupportDialog",
            title: this.translationBundle.getText("contactSupportBtn"),
            contentWidth : "300px",
            leftButton: this.sendButton,
            rightButton: this.cancelButton,
            initialFocus: "textArea",
            afterOpen: function () {
                //Fix ios 7.1 bug in ipad4 where there is a gray box on the screen when you close the keyboards
                $("#textArea").on("focusout", function () {
                    window.scrollTo(0, 0);
                });
            },
            afterClose: function () {
                this.oDialog.destroy();
            }.bind(this)
        });

        this.oTextArea.setPlaceholder(this.translationBundle.getText("txtAreaPlaceHolderHeader"));
        this.oLink.attachPress(this._embedLoginDetailsInBottomForm.bind(this));
        this.oDialog.addContent(this.oTopSimpleForm);
        this.oDialog.addContent(this.oBottomSimpleForm);
        this.oDialog.open();
    };

    sap.ushell.ui.footerbar.ContactSupportButton.prototype._embedLoginDetailsInBottomForm = function () {
        this.oDialog.removeContent(this.oBottomSimpleForm.getId());
        this.oBottomSimpleForm.destroy();
        var applicationType = "",
            url = "",
            additionalInformation = "",
            aBotomFormContent = [];

        if (this.oClientContext.navigationData.applicationInformation) {
            applicationType = this.oClientContext.navigationData.applicationInformation.applicationType;
            url = this.oClientContext.navigationData.applicationInformation.url;
            additionalInformation = this.oClientContext.navigationData.applicationInformation.additionalInformation;
        }
        aBotomFormContent.push(new sap.m.Text({text: this.translationBundle.getText("loginDetails")}).addStyleClass('ushellContactSupportHeaderInfoText'));
        aBotomFormContent.push(new sap.m.Label({text: this.translationBundle.getText("userFld")}));
        aBotomFormContent.push(new sap.m.Text({text: this.oClientContext.userDetails.fullName || ''}));
        aBotomFormContent.push(new sap.m.Label({text: this.translationBundle.getText("serverFld")}));
        aBotomFormContent.push(new sap.m.Text({text: window.location.host }));
        if (this.oClientContext.userDetails.eMail && this.oClientContext.userDetails.eMail !== '') {
            aBotomFormContent.push(new sap.m.Label({text: this.translationBundle.getText("eMailFld")}));
            aBotomFormContent.push(new sap.m.Text({text: this.oClientContext.userDetails.eMail || ''}));
        }
        aBotomFormContent.push(new sap.m.Label({text: this.translationBundle.getText("languageFld")}));
        aBotomFormContent.push(new sap.m.Text({text: this.oClientContext.userDetails.Language || ''}));
        //Required to align the following Text under the same column.
        aBotomFormContent.push(new sap.m.Text({text: ''}));
        aBotomFormContent.push(new sap.m.Text({text: this.translationBundle.getText("navigationDataFld")}).addStyleClass('ushellContactSupportHeaderInfoText'));
        aBotomFormContent.push(new sap.m.Label({text: this.translationBundle.getText("hashFld")}));
        aBotomFormContent.push(new sap.m.Text({text: this.oClientContext.navigationData.navigationHash || ''}));
        //Required to align the following Text under the same column.
        aBotomFormContent.push(new sap.m.Text({text: ''}));
        aBotomFormContent.push(new sap.m.Text({text: this.translationBundle.getText("applicationInformationFld")}).addStyleClass('ushellContactSupportHeaderInfoText'));
        aBotomFormContent.push(new sap.m.Label({text: this.translationBundle.getText("applicationTypeFld")}));
        aBotomFormContent.push(new sap.m.Text({text: applicationType}));
        aBotomFormContent.push(new sap.m.Label({text: this.translationBundle.getText("urlFld")}));
        aBotomFormContent.push(new sap.m.Text({text: url}));
        aBotomFormContent.push(new sap.m.Label({text: this.translationBundle.getText("additionalInfoFld")}));
        aBotomFormContent.push(new sap.m.Text({text: additionalInformation}));

        this.oBottomSimpleForm = new sap.ui.layout.form.SimpleForm('technicalInfoBox', {
            layout: sap.ui.layout.form.SimpleFormLayout.ResponsiveLayout,
            content: aBotomFormContent
        });
        if (sap.ui.Device.os.ios && sap.ui.Device.system.phone) {
            this.oBottomSimpleForm.addStyleClass("ushellContactSupportFixWidth");
        }

        var originalAfterRenderSimpleForm = this.oBottomSimpleForm.onAfterRendering;
        this.oBottomSimpleForm.onAfterRendering = function () {
            originalAfterRenderSimpleForm.apply(this, arguments);
            var node = jQuery(this.getDomRef());
            node.attr("tabIndex", 0);
            jQuery.sap.delayedCall(700, node, function () {
                this.focus();
            });
        }

        this.oDialog.addContent(this.oBottomSimpleForm);
    };

    sap.ushell.ui.footerbar.ContactSupportButton.prototype.setEnabled = function (bEnabled) {
        if (!sap.ushell.Container) {
            if (this.getEnabled()) {
                jQuery.sap.log.warning(
                    "Disabling 'Contact Support' button: unified shell container not initialized",
                    null,
                    "sap.ushell.ui.footerbar.ContactSupportButton"
                );
            }
            bEnabled = false;
        }
        sap.m.Button.prototype.setEnabled.call(this, bEnabled);
    };
}());

}; // end of sap/ushell/ui/footerbar/ContactSupportButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.ContactSupportButtonRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.ContactSupportButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.ContactSupportButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.ContactSupportButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.CreateTicketButtonRenderer.render = ;
}());
}; // end of sap/ushell/ui/footerbar/ContactSupportButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.HideGroupsButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.HideGroupsButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.HideGroupsButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/HideGroupsButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A button to hide groups from the dashboard, for the UShell footerbar.
 * @extends sap.m.Button
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.HideGroupsButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.HideGroupsButton", { metadata : {

	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.HideGroupsButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.HideGroupsButton.extend
 * @function
 */


// Start of sap/ushell/ui/footerbar/HideGroupsButton.js
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.HideGroupsButton");
    

    /**
     * @name sap.ushell.ui.footerbar.HideGroupsButton
     */
    sap.ushell.ui.footerbar.HideGroupsButton.prototype.init = function (){
        this.setIcon('sap-icon://group-2');
        this.setTooltip(sap.ushell.resources.i18n.getText("hideGroupsBtn_tooltip"));
        this.setWidth('100%');
        this.setText(sap.ushell.resources.i18n.getText("hideGroupsBtn_title"));
        this.attachPress(this.openHideGroupsDialog);
        //call the parent sap.m.Button init method
        if (sap.m.Button.prototype.init) {
            sap.m.Button.prototype.init.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.HideGroupsButton.prototype.openHideGroupsDialog = function () {
        jQuery.sap.require("sap.m.Dialog");
        jQuery.sap.require("sap.m.Button");
        jQuery.sap.require("sap.m.Table");
        jQuery.sap.require("sap.m.Switch");

        var that = this;

        this.handleChange = function(event){
            var parent = event.oSource.getParent();
            parent.toggleStyleClass('hideGroupsTableItem');
            parent.getCells()[0].toggleStyleClass('hideGroupsDisabledCell');
        };

        this.groupsTableTemplate = new sap.m.ColumnListItem({
            cells: [
                new sap.m.Text({text: "{title}"}),
                new sap.m.Switch({state: "{isGroupVisible}", visible: "{isEnabled}", change: that.handleChange, customTextOff: " ", customTextOn: " ", tooltip: sap.ushell.resources.i18n.getText("hideGroups_switchTooltip")
                })
            ]
        });

        this.groupsTable = new sap.m.Table("hideGroupsTable", {
            backgroundDesign: sap.m.BackgroundDesign.Transparent,
            showSeparators: sap.m.ListSeparators.Inner,
            columns: [
                new sap.m.Column({
                    hAlign: sap.ui.core.TextAlign.Left,
                    vAlign: "Middle"
                }),
                new sap.m.Column({
                    hAlign: sap.ui.core.TextAlign.Right,
                    vAlign: "Middle",
                    width: "79px"
               })
            ]
        });
        this.groupsTable.addStyleClass('hideGroupsTable');

        var oOrigOnAfterRendering = this.groupsTable.onAfterRendering;
        this.groupsTable.onAfterRendering = function(event){
            oOrigOnAfterRendering.apply(that.groupsTable, arguments);
            
            var items = event.srcControl.mAggregations.items;
            if(items){
                for(var i=0; i<items.length; i++){
                    if(!items[i].getCells()[1].mProperties.state){ //if it is disabled, need to mark the row with different background color
                        items[i].addStyleClass('hideGroupsTableItem');
                        items[i].getCells()[0].addStyleClass('hideGroupsDisabledCell');
                    }
                }
            }
            setTimeout(function() { 
               $('.sapMListTblRow').first().focus();
            }, 200);
            
        }

        this.groupsTable.setModel(this.getModel());
        
        var personalizationEnabled = this.getModel().getProperty("/personalization");
        var emptyGroupFilter = [];
        //When personalization is disabled, empty groups should not appear in the Hide Groups dialog
        //(as they are also not appearing in the dashboard and group list)
        if (!personalizationEnabled){
        	emptyGroupFilter.push(new sap.ui.model.Filter("tiles/length", sap.ui.model.FilterOperator.GT, 0));
        }
        
        this.groupsTable.bindItems({
            path: "/groups",
            template: this.groupsTableTemplate,
            filters: emptyGroupFilter
        });

        this.saveButton = new sap.m.Button("saveBtn", {
            text: sap.ushell.resources.i18n.getText("okBtn"),
            press: function (){

            	setTimeout(function() {
            	    var oModel = this.getModel();
            	    var groups = oModel.getProperty('/groups');

                	if(groups){
                		var oLaunchPageSrv = sap.ushell.Container.getService("LaunchPage");
                		var aHiddenGroupsIDs = [];

                		for(var i=0; i<groups.length; i++){
                			if(!groups[i].isGroupVisible){
                				var id = oLaunchPageSrv.getGroupId(groups[i].object);
                				aHiddenGroupsIDs.push(id);
                			} 
                		}
                		oLaunchPageSrv.hideGroups(aHiddenGroupsIDs).done(function(){
                		    that.handleToastMessage(aHiddenGroupsIDs.length);
                		}).fail(function(){
                            var errorMsg = new sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage("HideGroupsErrorMessage", {
                                title: sap.ushell.resources.i18n.getText("error"),
                                content: new sap.m.Text({
                                    text: sap.ushell.resources.i18n.getText("hideGroups_error")
                                })
                            });
                            errorMsg.open();
                		});

                		oModel.updateBindings('items');
                		oModel.updateBindings('groups');
                		//it seems we do not need to update the catalog groups (for the footer popup), as when opening the catalog, the filter is reapplied anyhow.
                	}
            	}.bind(this), 100);//There is a flickering when the dialog is closed in the first time. adding minimal timeout to prevent it.

            	this.oDialog.close();
            }.bind(this)
        });

        this.handleToastMessage = function(numOfHiddenGroups){
            var sMsg = "";
            if(typeof(numOfHiddenGroups) === undefined) return;

            if(numOfHiddenGroups === 0){  //All groups are visible on your home page
                sMsg = sap.ushell.resources.i18n.getText("hideGroups_none");
            }else if(numOfHiddenGroups === 1){//1 group is hidden on your home page
                sMsg = sap.ushell.resources.i18n.getText("hideGroups_single");
            }else{//{0} groups are hidden on your home page
                sMsg = sap.ushell.resources.i18n.getText("hideGroups_multiple", numOfHiddenGroups);
            }
            sap.ushell.Container.getService("Message").show(sap.ushell.services.Message.Type.INFO, sMsg);
        };

        this.cancelButton = new sap.m.Button("CancelBtn", {
            text: sap.ushell.resources.i18n.getText("cancelBtn"),
            press: function () {
                //Need to revert any model changes if took place by the user prior to pressing the cancel button
                if(that.aGroupsStates){
                    var groups = this.getModel().getProperty('/groups');
                    for(var i=0; i<that.aGroupsStates.length; i++){
                        if(groups[i].groupId === that.aGroupsStates[i].groupId){ //just to be sure that the groups order was not changed...if it was - skip this group (most chances are that there has been no change)
                            groups[i].isGroupVisible = that.aGroupsStates[i].isVisible;
                        }
                    }
                }
                this.oDialog.close();
            }.bind(this)
        });

        this.oDialog = new sap.m.Dialog({
            id: "groupsVisibilityDialog",
            title: sap.ushell.resources.i18n.getText("hideGroups_title"),
            contentWidth : "300px",
            stretch: jQuery.device.is.phone,
            content : this.groupsTable,
            beginButton: this.saveButton,
            endButton: this.cancelButton,
            initialFocus: "groupsVisibilityDialog",
            afterClose: function () {
                this.oDialog.destroy();
            }.bind(this)
        });

        this.getModelStates = function(groups){
            if(!groups) return;
            var aStates = [];
            for(var i=0; i<groups.length; i++){
                aStates.push({
                groupId: groups[i].groupId,
                isVisible: groups[i].isGroupVisible
                });
            }
            return aStates;
        }

        this.aGroupsStates = this.getModelStates(this.getModel().getProperty('/groups'));
        this.oDialog.open();
    };

}());

}; // end of sap/ushell/ui/footerbar/HideGroupsButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.HideGroupsButtonRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.HideGroupsButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.HideGroupsButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.HideGroupsButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.HideGroupsButtonRenderer.render = ;

}());
}; // end of sap/ushell/ui/footerbar/HideGroupsButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.JamDiscussButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.JamDiscussButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.JamDiscussButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/JamDiscussButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBeforePressHandler beforePressHandler} : any</li>
 * <li>{@link #getAfterPressHandler afterPressHandler} : any</li>
 * <li>{@link #getJamData jamData} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/JamDiscussButton
 * @extends sap.m.Button
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.JamDiscussButton", { metadata : {

	library : "sap.ushell",
	properties : {
		"beforePressHandler" : {type : "any", group : "Misc", defaultValue : null},
		"afterPressHandler" : {type : "any", group : "Misc", defaultValue : null},
		"jamData" : {type : "object", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.JamDiscussButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.JamDiscussButton.extend
 * @function
 */


/**
 * Getter for property <code>beforePressHandler</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>beforePressHandler</code>
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton#getBeforePressHandler
 * @function
 */

/**
 * Setter for property <code>beforePressHandler</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oBeforePressHandler  new value for property <code>beforePressHandler</code>
 * @return {sap.ushell.ui.footerbar.JamDiscussButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton#setBeforePressHandler
 * @function
 */


/**
 * Getter for property <code>afterPressHandler</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>afterPressHandler</code>
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton#getAfterPressHandler
 * @function
 */

/**
 * Setter for property <code>afterPressHandler</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oAfterPressHandler  new value for property <code>afterPressHandler</code>
 * @return {sap.ushell.ui.footerbar.JamDiscussButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton#setAfterPressHandler
 * @function
 */


/**
 * Getter for property <code>jamData</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>jamData</code>
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton#getJamData
 * @function
 */

/**
 * Setter for property <code>jamData</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oJamData  new value for property <code>jamData</code>
 * @return {sap.ushell.ui.footerbar.JamDiscussButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton#setJamData
 * @function
 */


// Start of sap/ushell/ui/footerbar/JamDiscussButton.js
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    

    jQuery.sap.declare("sap.ushell.ui.footerbar.JamDiscussButton");

    /**
     * JamDiscussButton
     * 
     * @name sap.ushell.ui.footerbar.JamDiscussButton
     * @private
     * @since 1.15.0
     */
    sap.ushell.ui.footerbar.JamDiscussButton.prototype.init = function () {
        jQuery.sap.require("sap.ushell.services.Container");

        var self = this;

        this.setEnabled();        // disables button if shell not initialized or Jam not active
        this.setIcon('sap-icon://discussion-2');
        this.setText(sap.ushell.resources.i18n.getText("discussBtn"));

        this.attachPress(function () {
            if (self.getBeforePressHandler()) {
                self.getBeforePressHandler()();
            }
            this.showDiscussDialog(self.getAfterPressHandler());
        });
        //call the parent sap.m.Button init method
        if (sap.m.Button.prototype.init) {
            sap.m.Button.prototype.init.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.JamDiscussButton.prototype.showDiscussDialog = function (cb) {
        jQuery.sap.require('sap.collaboration.components.fiori.feed.dialog.Component');
        if (!this.discussComponent) {
            this.discussComponent = sap.ui.getCore().createComponent({
                name: "sap.collaboration.components.fiori.feed.dialog"
            });
        }
        this.discussComponent.setSettings(this.getJamData());
        this.discussComponent.open();

        //TODO: call callback after dialog vanishes
        if (cb) {
            cb();
        }
    };

    sap.ushell.ui.footerbar.JamDiscussButton.prototype.setEnabled = function (bEnabled) {
        if (!sap.ushell.Container) {
            if (this.getEnabled()) {
                jQuery.sap.log.warning(
                    "Disabling JamDiscussButton: unified shell container not initialized",
                    null,
                    "sap.ushell.ui.footerbar.JamDiscussButton"
                );
            }
            bEnabled = false;
        } else {
            var user = sap.ushell.Container.getUser();
            if (!(user && user.isJamActive())) {
                if (this.getEnabled()) {
                    jQuery.sap.log.info(
                        "Disabling JamDiscussButton: user not logged in or Jam not active",
                        null,
                        "sap.ushell.ui.footerbar.JamDiscussButton"
                    );
                }
                bEnabled = false;
                this.setVisible(false);
            }
        }
        sap.m.Button.prototype.setEnabled.call(this, bEnabled);
    };

}());

}; // end of sap/ushell/ui/footerbar/JamDiscussButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.JamDiscussButtonRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.JamDiscussButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.JamDiscussButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.JamDiscussButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.JamDiscussButtonRenderer.render = ;
}());
}; // end of sap/ushell/ui/footerbar/JamDiscussButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.JamShareButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.JamShareButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.JamShareButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/JamShareButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBeforePressHandler beforePressHandler} : any</li>
 * <li>{@link #getAfterPressHandler afterPressHandler} : any</li>
 * <li>{@link #getJamData jamData} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/JamShareButton
 * @extends sap.m.Button
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.JamShareButton", { metadata : {

	library : "sap.ushell",
	properties : {
		"beforePressHandler" : {type : "any", group : "Misc", defaultValue : null},
		"afterPressHandler" : {type : "any", group : "Misc", defaultValue : null},
		"jamData" : {type : "object", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.JamShareButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.JamShareButton.extend
 * @function
 */


/**
 * Getter for property <code>beforePressHandler</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>beforePressHandler</code>
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton#getBeforePressHandler
 * @function
 */

/**
 * Setter for property <code>beforePressHandler</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oBeforePressHandler  new value for property <code>beforePressHandler</code>
 * @return {sap.ushell.ui.footerbar.JamShareButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton#setBeforePressHandler
 * @function
 */


/**
 * Getter for property <code>afterPressHandler</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>afterPressHandler</code>
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton#getAfterPressHandler
 * @function
 */

/**
 * Setter for property <code>afterPressHandler</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oAfterPressHandler  new value for property <code>afterPressHandler</code>
 * @return {sap.ushell.ui.footerbar.JamShareButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton#setAfterPressHandler
 * @function
 */


/**
 * Getter for property <code>jamData</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>jamData</code>
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton#getJamData
 * @function
 */

/**
 * Setter for property <code>jamData</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oJamData  new value for property <code>jamData</code>
 * @return {sap.ushell.ui.footerbar.JamShareButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton#setJamData
 * @function
 */


// Start of sap/ushell/ui/footerbar/JamShareButton.js
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.JamShareButton");

    

    /**
     * JamShareButton
     *
     * @name sap.ushell.ui.footerbar.JamShareButton
     * @private
     * @since 1.15.0
     */
    sap.ushell.ui.footerbar.JamShareButton.prototype.init = function () {
        jQuery.sap.require("sap.ushell.services.Container");

        var self = this;

        this.setEnabled();        // disables button if shell not initialized or Jam not active
        this.setIcon('sap-icon://share-2');
        this.setText(sap.ushell.resources.i18n.getText("shareBtn"));

        this.attachPress(function () {
            if (self.getBeforePressHandler()) {
                self.getBeforePressHandler()();
            }
            this.showShareDialog(self.getAfterPressHandler());
        });
        //call the parent sap.m.Button init method
        if (sap.m.Button.prototype.init) {
            sap.m.Button.prototype.init.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.JamShareButton.prototype.showShareDialog = function (cb) {
        jQuery.sap.require('sap.collaboration.components.fiori.sharing.dialog.Component');
        if (!this.shareComponent) {
            this.shareComponent = sap.ui.getCore().createComponent({
                name: "sap.collaboration.components.fiori.sharing.dialog"
            });
        }
        this.shareComponent.setSettings(this.getJamData());
        this.shareComponent.open();

        //TODO: call callback after dialog vanishes
        if (cb) {
            cb();
        }
    };

    sap.ushell.ui.footerbar.JamShareButton.prototype.exit = function () {
        if (this.shareComponent) {
            this.shareComponent.destroy();
        }
        //call the parent sap.m.Button exit method
        if (sap.m.Button.prototype.exit) {
            sap.m.Button.prototype.exit.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.JamShareButton.prototype.setEnabled = function (bEnabled) {
        if (!sap.ushell.Container) {
            if (this.getEnabled()) {
                jQuery.sap.log.warning(
                    "Disabling JamShareButton: unified shell container not initialized",
                    null,
                    "sap.ushell.ui.footerbar.JamShareButton"
                );
            }
            bEnabled = false;
        } else {
            var user = sap.ushell.Container.getUser();
            if (!(user && user.isJamActive())) {
                if (this.getEnabled()) {
                    jQuery.sap.log.info(
                        "Disabling JamShareButton: user not logged in or Jam not active",
                        null,
                        "sap.ushell.ui.footerbar.JamShareButton"
                    );
                }
                bEnabled = false;
                this.setVisible(false);
            }
        }
        sap.m.Button.prototype.setEnabled.call(this, bEnabled);
    };

}());

}; // end of sap/ushell/ui/footerbar/JamShareButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.JamShareButtonRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.JamShareButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.JamShareButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.JamShareButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.JamShareButtonRenderer.render = ;
}());
}; // end of sap/ushell/ui/footerbar/JamShareButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.LoginDetailsButtonRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.LoginDetailsButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.LoginDetailsButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.LoginDetailsButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.LoginDetailsButtonRenderer.render = ;
}());
}; // end of sap/ushell/ui/footerbar/LoginDetailsButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.LogoutButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.LogoutButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.LogoutButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/LogoutButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A logout button for the UShell footerbar.
 * @extends sap.m.Button
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.LogoutButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.LogoutButton", { metadata : {

	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.LogoutButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.LogoutButton.extend
 * @function
 */


// Start of sap/ushell/ui/footerbar/LogoutButton.js
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.LogoutButton");

    

    /**
     * LogoutButton
     *
     * @name sap.ushell.ui.footerbar.LogoutButton
     * @private
     * @since 1.16.0
     */
    sap.ushell.ui.footerbar.LogoutButton.prototype.init = function () {
        this.setIcon('sap-icon://log');
        this.setTooltip(sap.ushell.resources.i18n.getText("logoutBtn_tooltip"));
        this.setWidth('100%');
        this.setText(sap.ushell.resources.i18n.getText("logoutBtn_title"));
        this.attachPress(this.logout);
        this.setEnabled();  // disables button if shell not initialized
        //call the parent sap.m.Button init method
        if (sap.m.Button.prototype.init) {
            sap.m.Button.prototype.init.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.LogoutButton.prototype.logout = function () {
        jQuery.sap.require('sap.m.MessageBox');
        var bShowLoadingScreen = true,
            bIsLoadingScreenShown = false,
            oLoading = new sap.ushell.ui.launchpad.LoadingDialog({text: ""});

        sap.ushell.Container.getGlobalDirty().done(function (dirtyState) {
            bShowLoadingScreen = false;
            if (bIsLoadingScreenShown === true) {
                oLoading.exit();
                oLoading = new sap.ushell.ui.launchpad.LoadingDialog({text: ""});
            }

            var shell = sap.ui.getCore().byId("shell");
            if (shell) {
                var currentState = shell.getModel().getProperty("/currentState/stateName");
                //Set dirty state to "clean" when communication between browser windows via local-storage isn't possible (i.e. - MAYBE_DIRTY state).
                if (dirtyState === sap.ushell.Container.DirtyState.MAYBE_DIRTY && ((currentState === "home" || currentState === "catalog"))) {
                    dirtyState = sap.ushell.Container.DirtyState.CLEAN;
                }
            }
            var oLogoutDetails = _getLogoutDetails(dirtyState);
            sap.m.MessageBox.show(oLogoutDetails.message, oLogoutDetails.icon,
                oLogoutDetails.messageTitle, [sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL],
                function (oAction) {
                    if (oAction === sap.m.MessageBox.Action.OK) {
                        oLoading.openLoadingScreen();
                        oLoading.showAppInfo(sap.ushell.resources.i18n.getText('beforeLogoutMsg'), null);
                        sap.ushell.Container.logout();
                    }
                }, sap.ui.core.ElementMetadata.uid("confirm"));
        });
        if (bShowLoadingScreen === true) {
            oLoading.openLoadingScreen();
            bIsLoadingScreenShown = true;
        }
    };

    sap.ushell.ui.footerbar.LogoutButton.prototype.setEnabled = function (bEnabled) {
        if (!sap.ushell.Container) {
            if (this.getEnabled()) {
                jQuery.sap.log.warning(
                    "Disabling 'Logout' button: unified shell container not initialized",
                    null,
                    "sap.ushell.ui.footerbar.LogoutButton"
                );
            }
            bEnabled = false;
        }
        sap.m.Button.prototype.setEnabled.call(this, bEnabled);
    };

    var _getLogoutDetails = function(dirtyState) {
        var oLogoutDetails = {},
            oResourceBundle = sap.ushell.resources.i18n;

        if (dirtyState === sap.ushell.Container.DirtyState.DIRTY || dirtyState === sap.ushell.Container.DirtyState.MAYBE_DIRTY) {
            oLogoutDetails.message = oResourceBundle.getText('unsaved_data_warning_popup_message');
            oLogoutDetails.icon = sap.m.MessageBox.Icon.WARNING;
            oLogoutDetails.messageTitle = oResourceBundle.getText("unsaved_data_warning_popup_title");
        }
        else {
            oLogoutDetails.message = oResourceBundle.getText('logoutConfirmationMsg');
            oLogoutDetails.icon = sap.m.MessageBox.Icon.QUESTION;
            oLogoutDetails.messageTitle = oResourceBundle.getText("title_confirm");
        }

        return oLogoutDetails;
    };

}());

}; // end of sap/ushell/ui/footerbar/LogoutButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.LogoutButtonRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.LogoutButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.LogoutButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.LogoutButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.LogoutButtonRenderer.render = ;

}());
}; // end of sap/ushell/ui/footerbar/LogoutButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.SettingsButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.SettingsButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.SettingsButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/SettingsButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/SettingsButton
 * @extends sap.m.Button
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.SettingsButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.SettingsButton", { metadata : {

	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.SettingsButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.SettingsButton.extend
 * @function
 */


// Start of sap/ushell/ui/footerbar/SettingsButton.js
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.SettingsButton");

    

    /**
     * SettingsButton
     * 
     * @name sap.ushell.ui.footerbar.SettingsButton
     * @private
     * @since 1.16.0
     */
    sap.ushell.ui.footerbar.SettingsButton.prototype.init = function () {
        jQuery.sap.require("sap.ushell.ui.footerbar.AboutButton");
        jQuery.sap.require("sap.ushell.ui.footerbar.LoginDetailsButton");
        jQuery.sap.require("sap.ushell.ui.footerbar.LogoutButton");

        this.setIcon('sap-icon://action-settings');
        this.setTooltip(sap.ushell.resources.i18n.getText("helpBtn_tooltip"));

        this.attachPress(this.showSettingsMenu);

        var oAboutButton = new sap.ushell.ui.footerbar.AboutButton(),
            oLoginDetailsButton = new sap.ushell.ui.footerbar.LoginDetailsButton(),
            oLogoutButton = new sap.ushell.ui.footerbar.LogoutButton();

        this.defaultMenuItems = [oAboutButton, oLoginDetailsButton, oLogoutButton];
        //call the parent sap.m.Button init method
        if (sap.m.Button.prototype.init) {
            sap.m.Button.prototype.init.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.SettingsButton.prototype.setMenuItems = function (buttons) {
        this.menuItems = buttons;
    };

    sap.ushell.ui.footerbar.SettingsButton.prototype.showSettingsMenu = function () {
        var oActionSheet = new sap.m.ActionSheet({
        	id: 'settingsMenu',
            showHeader : false,
            buttons : (this.menuItems || []).concat(this.defaultMenuItems)
        });

        oActionSheet.setPlacement(sap.m.PlacementType.Vertical);
        oActionSheet.openBy(this);

        oActionSheet.attachAfterClose(function () {
            oActionSheet.removeAllButtons();
            oActionSheet.destroy();
        });
    };
}());
}; // end of sap/ushell/ui/footerbar/SettingsButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.SettingsButtonRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.SettingsButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.LoginDetailsButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.SettingsButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.SettingsButtonRenderer.render = ;

}());
}; // end of sap/ushell/ui/footerbar/SettingsButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.CatalogListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.CatalogListItem.
jQuery.sap.declare("sap.ushell.ui.launchpad.CatalogListItem");

jQuery.sap.require('sap.m.ListItemBase'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/CatalogListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getGroupId groupId} : string</li>
 * <li>{@link #getInfoState infoState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getIconInset iconInset} : boolean (default: true)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getHeaderLevel headerLevel} : sap.m.HeaderLevel (default: sap.m.HeaderLevel.H6)</li>
 * <li>{@link #getEditMode editMode} : boolean (default: false)</li>
 * <li>{@link #getAllowEditMode allowEditMode} : boolean (default: true)</li>
 * <li>{@link #getMarkChange markChange} : int (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.CatalogListItem#event:drop drop} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.CatalogListItem#event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.CatalogListItem#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.CatalogListItem#event:dblPress dblPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.CatalogListItem#event:sapEnter sapEnter} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.CatalogListItem#event:sapEscape sapEscape} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.CatalogListItem#event:focusOut focusOut} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The CatalogListItem is a list item providing image, titel and description.
 * @extends sap.m.ListItemBase
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.ListItemBase.extend("sap.ushell.ui.launchpad.CatalogListItem", { metadata : {

	library : "sap.ushell",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"description" : {type : "string", group : "Misc", defaultValue : null},
		"info" : {type : "string", group : "Misc", defaultValue : null},
		"groupId" : {type : "string", group : "Misc", defaultValue : null},
		"infoState" : {type : "sap.ui.core.ValueState", group : "Misc", defaultValue : sap.ui.core.ValueState.None},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"activeIcon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"iconInset" : {type : "boolean", group : "Misc", defaultValue : true},
		"iconDensityAware" : {type : "boolean", group : "Misc", defaultValue : true},
		"headerLevel" : {type : "sap.m.HeaderLevel", group : "Misc", defaultValue : sap.m.HeaderLevel.H6},
		"editMode" : {type : "boolean", group : "Misc", defaultValue : false},
		"allowEditMode" : {type : "boolean", group : "Misc", defaultValue : true},
		"markChange" : {type : "int", group : "Misc", defaultValue : 0}
	},
	events : {
		"drop" : {}, 
		"afterRendering" : {}, 
		"press" : {}, 
		"dblPress" : {}, 
		"sapEnter" : {}, 
		"sapEscape" : {}, 
		"focusOut" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.CatalogListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.CatalogListItem.extend
 * @function
 */

sap.ushell.ui.launchpad.CatalogListItem.M_EVENTS = {'drop':'drop','afterRendering':'afterRendering','press':'press','dblPress':'dblPress','sapEnter':'sapEnter','sapEscape':'sapEscape','focusOut':'focusOut'};


/**
 * Getter for property <code>title</code>.
 * ListItem title.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setTitle
 * @function
 */


/**
 * Getter for property <code>description</code>.
 * Description.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getDescription
 * @function
 */

/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setDescription
 * @function
 */


/**
 * Getter for property <code>info</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>info</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getInfo
 * @function
 */

/**
 * Setter for property <code>info</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sInfo  new value for property <code>info</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setInfo
 * @function
 */


/**
 * Getter for property <code>groupId</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>groupId</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getGroupId
 * @function
 */

/**
 * Setter for property <code>groupId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sGroupId  new value for property <code>groupId</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setGroupId
 * @function
 */


/**
 * Getter for property <code>infoState</code>.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>infoState</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getInfoState
 * @function
 */

/**
 * Setter for property <code>infoState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oInfoState  new value for property <code>infoState</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setInfoState
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setIcon
 * @function
 */


/**
 * Getter for property <code>activeIcon</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getActiveIcon
 * @function
 */

/**
 * Setter for property <code>activeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sActiveIcon  new value for property <code>activeIcon</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setActiveIcon
 * @function
 */


/**
 * Getter for property <code>iconInset</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconInset</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getIconInset
 * @function
 */

/**
 * Setter for property <code>iconInset</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconInset  new value for property <code>iconInset</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setIconInset
 * @function
 */


/**
 * Getter for property <code>iconDensityAware</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getIconDensityAware
 * @function
 */

/**
 * Setter for property <code>iconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setIconDensityAware
 * @function
 */


/**
 * Getter for property <code>headerLevel</code>.
 *
 * Default value is <code>H6</code>
 *
 * @return {sap.m.HeaderLevel} the value of property <code>headerLevel</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getHeaderLevel
 * @function
 */

/**
 * Setter for property <code>headerLevel</code>.
 *
 * Default value is <code>H6</code> 
 *
 * @param {sap.m.HeaderLevel} oHeaderLevel  new value for property <code>headerLevel</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setHeaderLevel
 * @function
 */


/**
 * Getter for property <code>editMode</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>editMode</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getEditMode
 * @function
 */

/**
 * Setter for property <code>editMode</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEditMode  new value for property <code>editMode</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setEditMode
 * @function
 */


/**
 * Getter for property <code>allowEditMode</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>allowEditMode</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getAllowEditMode
 * @function
 */

/**
 * Setter for property <code>allowEditMode</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bAllowEditMode  new value for property <code>allowEditMode</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setAllowEditMode
 * @function
 */


/**
 * Getter for property <code>markChange</code>.
 * Time in ms the item is marked when changed. Disabled if set to 0.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>markChange</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getMarkChange
 * @function
 */

/**
 * Setter for property <code>markChange</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iMarkChange  new value for property <code>markChange</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setMarkChange
 * @function
 */


/**
 * Event triggered if another sap.ui.core/Control is dropped on this element
 *
 * @name sap.ushell.ui.launchpad.CatalogListItem#drop
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'drop' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself. 
 *  
 * Event triggered if another sap.ui.core/Control is dropped on this element
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#attachDrop
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'drop' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#detachDrop
 * @function
 */

/**
 * Fire event drop to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.CatalogListItem#fireDrop
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.CatalogListItem#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#attachAfterRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#detachAfterRendering
 * @function
 */

/**
 * Fire event afterRendering to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.CatalogListItem#fireAfterRendering
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.CatalogListItem#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.CatalogListItem#firePress
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.CatalogListItem#dblPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'dblPress' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#attachDblPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'dblPress' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#detachDblPress
 * @function
 */

/**
 * Fire event dblPress to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.CatalogListItem#fireDblPress
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.CatalogListItem#sapEnter
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'sapEnter' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#attachSapEnter
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'sapEnter' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#detachSapEnter
 * @function
 */

/**
 * Fire event sapEnter to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.CatalogListItem#fireSapEnter
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.CatalogListItem#sapEscape
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'sapEscape' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#attachSapEscape
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'sapEscape' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#detachSapEscape
 * @function
 */

/**
 * Fire event sapEscape to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.CatalogListItem#fireSapEscape
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.CatalogListItem#focusOut
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'focusOut' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#attachFocusOut
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'focusOut' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#detachFocusOut
 * @function
 */

/**
 * Fire event focusOut to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.CatalogListItem#fireFocusOut
 * @function
 */


// Start of sap/ushell/ui/launchpad/CatalogListItem.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * This file defines behavior for the control, sap.ushell.ui.launchpad.CatalogListItem
 */
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-core'); // unlisted dependency retained

jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-widget'); // unlisted dependency retained

jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-mouse'); // unlisted dependency retained

jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-droppable'); // unlisted dependency retained


/**
 * @name sap.ushell.ui.launchpad.CatalogListItem
 * 
 * @private
 */
sap.ushell.ui.launchpad.CatalogListItem.prototype.init = function() {
    this.oEditInputField = new sap.m.Input();
    this.oEditInputField.setPlaceholder(sap.ushell.resources.i18n.getText("new_group_name"));
};

sap.ushell.ui.launchpad.CatalogListItem.prototype.getEditInputField = function() {
    return this.oEditInputField;
};

sap.ushell.ui.launchpad.CatalogListItem.prototype.onAfterRendering  = function() {
    this.$().droppable({
        hoverClass : "sapUshellCatalogLIHover",
        tolerance : "pointer",
    }).bind("drop", jQuery.proxy(this._handleDrop, this));
    this.fireAfterRendering();
};

sap.ushell.ui.launchpad.CatalogListItem.prototype.onBeforeRendering = function() {
    this.$().unbind("drop", this._handleDrop).droppable("destroy");
    this.oEditInputField.setValue( this.getTitle() );
};

sap.ushell.ui.launchpad.CatalogListItem.prototype.exit = function() {
    this.$().unbind("drop", this._handleDrop).droppable("destroy");

    if (this._image) {
        this._image.destroy();
    }

    sap.m.ListItemBase.prototype.exit.apply(this, arguments);
};

/**
 * @private
 */
sap.ushell.ui.launchpad.CatalogListItem.prototype._handleDrop = function(event, ui) {
    this.fireDrop({
        control : ui && ui.draggable && (ui.draggable.length > 0)
            && sap.ui.getCore().byId(ui.draggable[0].id) || undefined
    });
};

/**
 * @private
 */
sap.ushell.ui.launchpad.CatalogListItem.prototype._getImage = function(sImgId, sImgStyle, sSrc, bIconDensityAware) {
    var oImage = this._image;
    if(oImage)
    {
        oImage.setSrc(sSrc);
        if(oImage instanceof sap.m.Image)
            oImage.setDensityAware(bIconDensityAware);
    }
    else
    {
        oImage = sap.ui.core.IconPool.createControlByURI({
            id: sImgId,
      src : sSrc,
      densityAware : bIconDensityAware
    }, sap.m.Image).setParent(this, null, true);
    }

    if(oImage instanceof sap.m.Image){
        oImage.addStyleClass(sImgStyle, true);
    }
    else{
        oImage.addStyleClass(sImgStyle + "Icon", true);
    }

    return this._image = oImage;
};

// overwrite base method to hook into the active handling
sap.ushell.ui.launchpad.CatalogListItem.prototype._activeHandlingInheritor = function() {
    var img = sap.ui.getCore().byId(this.getId() + "-img");
    if(img instanceof sap.ui.core.Icon){
        img.$().toggleClass('sapMSLIIconActive', this._active);
        return;
    }

    if (img && this.getActiveIcon()) {
            img.setSrc(this.getActiveIcon());
    }
};

// overwrite base method to hook into the inactive handling
sap.ushell.ui.launchpad.CatalogListItem.prototype._inactiveHandlingInheritor = function() {
    var img = sap.ui.getCore().byId(this.getId() + "-img");
        if(img instanceof sap.ui.core.Icon){
        img.$().toggleClass('sapMSLIIconActive', this._active);
        return;
    }

    if (img) {
            img.setSrc(this.getIcon());
    }
};

sap.ushell.ui.launchpad.CatalogListItem.prototype.onclick = function(oBrowserEvent) {
    this.firePress({
        id : this.getId()
    });
};

sap.ushell.ui.launchpad.CatalogListItem.prototype.ondblclick = function(oBrowserEvent) {
    this.fireDblPress({
        id : this.getId()
    });
};

sap.ushell.ui.launchpad.CatalogListItem.prototype.onsapenter = function(oBrowserEvent) {
    this.fireSapEnter({
        id : this.getId()
    });
};

sap.ushell.ui.launchpad.CatalogListItem.prototype.onsapescape = function(oBrowserEvent) {
    this.fireSapEscape({
        id : this.getId()
    });
};

sap.ushell.ui.launchpad.CatalogListItem.prototype.onfocusout = function() {
    this.fireFocusOut();
};

// override setters
sap.ushell.ui.launchpad.CatalogListItem.prototype.setDescription = function(sDescription) {
    var jDesc = this.$().find('.sapUshellCatalogLIDescription');
    this.setProperty("description", sDescription, true);
    if (this.getMarkChange() && jDesc.text()) {
        this.addStyleClass("sapUshellCatalogLIRecentChange"); // add style class marking change 
        window.clearTimeout(this.markChangeTimer);            // clear existing timeout
        this.markChangeTimer = window.setTimeout(
                $.proxy(this.removeStyleClass, this, "sapUshellCatalogLIRecentChange"),
                this.getMarkChange());                        // remove style class after timeout 
    }
    jDesc.text(sDescription);
    return this;
};

}; // end of sap/ushell/ui/launchpad/CatalogListItem.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.CatalogListItemRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

jQuery.sap.declare("sap.ushell.ui.launchpad.CatalogListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.m.ListItemBaseRenderer'); // unlisted dependency retained


/**
 * @class CatalogListItem renderer.
 * @static
 * 
 * @private
 */
sap.ushell.ui.launchpad.CatalogListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);
var translationBundle = sap.ushell.resources.i18n;

sap.ushell.ui.launchpad.CatalogListItemRenderer.renderLIAttributes = function (rm, oLI) {
    rm.addClass("sapUshellCatalogLI");
    if (oLI._showSeparators  == sap.m.ListSeparators.None && !oLI.getIconInset()) {
        rm.addClass("sapUshellCatalogLIShowSeparatorNone");
    }
    if (oLI.getIcon())
        rm.addClass("sapUshellCatalogLIIcon");
    if (!oLI.getIconInset())
        rm.addClass("sapUshellCatalogLIIconThumb");
    if (oLI.getDescription() && oLI.getIcon() &&  oLI.getIconInset())
        rm.addClass("sapUshellCatalogLIDescIcon");
    if (oLI.getDescription() && !oLI.getIcon())
        rm.addClass("sapUshellCatalogLIDescNoIcon");
    if (!oLI.getDescription() && oLI.getIcon())
        rm.addClass("sapUshellCatalogLINoDescIcon");
    if (oLI.getType() == sap.m.ListType.Detail || oLI.getType() == sap.m.ListType.DetailAndActive)
        rm.addClass("sapUshellCatalogLIDetail");

};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oLI an object representation of the control that should be
 *          rendered
 */
sap.ushell.ui.launchpad.CatalogListItemRenderer.renderLIContent = function (rm, oLI) {

    var isDescription = oLI.getTitle() && oLI.getDescription() || (oLI._showSeparators  == sap.m.ListSeparators.None && !oLI.getIconInset());
    var isInfo = oLI.getInfo();

    if (isDescription) {
        rm.write("<div");
        rm.addClass("sapUshellCatalogLIDiv");
        rm.writeAttributeEscaped("title", oLI.getTitle() + " " + translationBundle.getText("catalogListItem_tooltip"));
        rm.writeClasses();
        rm.write(">");
    }

    rm.write("<div");
    if (!isDescription) {
        rm.addClass("sapUshellCatalogLIDiv");
    }
    rm.addClass("sapUshellCatalogLITitleDiv");
    rm.writeClasses();
    rm.write(">");

    //noFlex: make an additional div for the contents table
    if (!isDescription && oLI._bNoFlex){
        rm.write('<div class="sapMLIBNoFlex">');
    }
    // List item text (also written when no title for keeping the space)
    rm.write("<");
    rm.write(oLI.getHeaderLevel().toLowerCase());
    if (isDescription) {
        rm.addClass("sapUshellCatalogLITitle");
    } else {
        rm.addClass("sapUshellCatalogLITitleOnly");
    }
    rm.writeClasses();
    rm.writeAccessibilityState(oLI, {label : oLI.getTitle() + " " + translationBundle.getText("CatalogListItemTitle_label")});
    rm.write(">");

    if (oLI.getEditMode()) {
        rm.renderControl(oLI.getEditInputField());
    } else {
        rm.writeEscaped(oLI.getTitle());
    }

    rm.write("</");
    rm.write(oLI.getHeaderLevel().toLowerCase());
    rm.write(">");

    //info div top when @sapUiInfoTop: true;
    if (isInfo && (sap.ui.core.theming.Parameters.get("sapUiInfoTop") == "true" || !isDescription)) {
        rm.write("<div");
        rm.writeAttribute("id", oLI.getId() + "-info");
        rm.addClass("sapUshellCatalogLIInfo");
        rm.addClass("sapUshellCatalogLIInfo" + oLI.getInfoState());
        rm.writeClasses();
        rm.write(">");
        rm.writeEscaped(isInfo);
        rm.write("</div>");
    }

    //noFlex: make an additional div for the contents table
    if(!isDescription && oLI._bNoFlex){
        rm.write('</div>');
    }
    rm.write("</div>");

    rm.write("<div");
    rm.addClass("sapUshellCatalogLIDescriptionDiv");
    rm.writeClasses();
   
    rm.write(">");

    // List item text
    if (isDescription) {
        rm.write("<div");
        rm.addClass("sapUshellCatalogLIDescription");
        rm.writeClasses();
        rm.writeAccessibilityState(oLI, {	
    		label : translationBundle.getText("CatalogListItemDescription_label") + oLI.getDescription()
    	});
        rm.write(">");
        rm.writeEscaped(oLI.getDescription());
        rm.write("</div>");
    }

        if(isInfo && sap.ui.core.theming.Parameters.get("sapUiInfoTop") == "false" && isDescription){
        rm.write("<div");
        rm.writeAttribute("id", oLI.getId() + "-info");
        rm.addClass("sapUshellCatalogLIInfo");
        if(oLI._showSeparators == sap.m.ListSeparators.None && oLI.getInfoState() == sap.ui.core.ValueState.None)
            rm.addClass("sapUshellCatalogLIInfo" + oLI.getInfoState() + "ShowSeparatorNone");
        else
            rm.addClass("sapUshellCatalogLIInfo" + oLI.getInfoState());
        rm.writeClasses();
        rm.write(">");
        rm.writeEscaped(isInfo);
        rm.write("</div>");
    }
    rm.write("</div>");

    if (isDescription) {
        rm.write("</div>");
    }

    // image
    if (oLI.getIcon()) {
        if (oLI.getIconInset()) {
            var oList = sap.ui.getCore().byId(oLI._listId);
            if(oList && oList.getMode() == sap.m.ListMode.None && !oList.getShowUnread()){
                rm.renderControl(oLI._getImage((oLI.getId() + "-img"), "sapUshellCatalogLIImgFirst", oLI.getIcon(), oLI.getIconDensityAware()));
            }
            else{
                rm.renderControl(oLI._getImage((oLI.getId() + "-img"), "sapUshellCatalogLIImg", oLI.getIcon(), oLI.getIconDensityAware()));
            }
        } else {
            rm.renderControl(oLI._getImage((oLI.getId() + "-img"), "sapUshellCatalogLIImgThumb", oLI.getIcon(), oLI.getIconDensityAware()));
        }
    }

};

}; // end of sap/ushell/ui/launchpad/CatalogListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.DashboardGroupsContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.DashboardGroupsContainer.
jQuery.sap.declare("sap.ushell.ui.launchpad.DashboardGroupsContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/DashboardGroupsContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAccessibilityLabel accessibilityLabel} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGroups groups} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.DashboardGroupsContainer#event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/launchpad/DashboardGroupsContainer
 * @extends sap.ui.core.Control
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.ushell.ui.launchpad.DashboardGroupsContainer", { metadata : {

	library : "sap.ushell",
	properties : {
		"accessibilityLabel" : {type : "string", group : "", defaultValue : null}
	},
	aggregations : {
		"groups" : {type : "sap.ui.core.Control", multiple : true, singularName : "group"}
	},
	events : {
		"afterRendering" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.DashboardGroupsContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer.extend
 * @function
 */

sap.ushell.ui.launchpad.DashboardGroupsContainer.M_EVENTS = {'afterRendering':'afterRendering'};


/**
 * Getter for property <code>accessibilityLabel</code>.
 * An value for an optional accessibility label
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>accessibilityLabel</code>
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#getAccessibilityLabel
 * @function
 */

/**
 * Setter for property <code>accessibilityLabel</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAccessibilityLabel  new value for property <code>accessibilityLabel</code>
 * @return {sap.ushell.ui.launchpad.DashboardGroupsContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#setAccessibilityLabel
 * @function
 */


/**
 * Getter for aggregation <code>groups</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#getGroups
 * @function
 */


/**
 * Inserts a group into the aggregation named <code>groups</code>.
 *
 * @param {sap.ui.core.Control}
 *          oGroup the group to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the group should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the group is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the group is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.DashboardGroupsContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#insertGroup
 * @function
 */

/**
 * Adds some group <code>oGroup</code> 
 * to the aggregation named <code>groups</code>.
 *
 * @param {sap.ui.core.Control}
 *            oGroup the group to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.DashboardGroupsContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#addGroup
 * @function
 */

/**
 * Removes an group from the aggregation named <code>groups</code>.
 *
 * @param {int | string | sap.ui.core.Control} vGroup the group to remove or its index or id
 * @return {sap.ui.core.Control} the removed group or null
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#removeGroup
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>groups</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#removeAllGroups
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>groups</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oGroup the group whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#indexOfGroup
 * @function
 */
	

/**
 * Destroys all the groups in the aggregation 
 * named <code>groups</code>.
 * @return {sap.ushell.ui.launchpad.DashboardGroupsContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#destroyGroups
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.DashboardGroupsContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.DashboardGroupsContainer</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.DashboardGroupsContainer</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.DashboardGroupsContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#attachAfterRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.DashboardGroupsContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.DashboardGroupsContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#detachAfterRendering
 * @function
 */

/**
 * Fire event afterRendering to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.DashboardGroupsContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#fireAfterRendering
 * @function
 */


// Start of sap/ushell/ui/launchpad/DashboardGroupsContainer.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer
 *
 * @private
 */
/*global jQuery, sap*/

(function () {
    "use strict";

    // Overwrite update function (version without filter/sort support)
    sap.ushell.ui.launchpad.DashboardGroupsContainer.prototype.updateGroups = sap.ushell.override.updateAggregatesFactory("groups");
    // Alternative (supports all bindings, uses default as fallback)
    //sap.ushell.ui.launchpad.TileContainer.prototype.updateAggregation = sap.ushell.override.updateAggregation;

    sap.ushell.ui.launchpad.DashboardGroupsContainer.prototype.onAfterRendering = function () {
        this.fireAfterRendering();
    };
}());

}; // end of sap/ushell/ui/launchpad/DashboardGroupsContainer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.DashboardGroupsContainerRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/
/**
 * @class DashboardGroupsContainer renderer.
 * @static
 * 
 * @private
 */

(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.ui.launchpad.DashboardGroupsContainerRenderer");

    sap.ushell.ui.launchpad.DashboardGroupsContainerRenderer = {};

    /**
     * Renders the HTML for the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.DashboardGroupsContainerRenderer.render = function (oRm, oControl) {
        oRm.write("<div");
        oRm.writeControlData(oControl);
        oRm.addClass("sapUshellDashboardGroupsContainer");
        oRm.writeClasses();
        if (oControl.getAccessibilityLabel()){
        	oRm.writeAccessibilityState(oControl, {label : oControl.getAccessibilityLabel()});
        }
        oRm.write(">");

        var aGroups = oControl.getGroups();

        jQuery.each(aGroups, function () {
            oRm.write("<div");
            oRm.addClass("sapUshellDashboardGroupsContainerItem");
            oRm.writeClasses();
            oRm.write(">");

            oRm.renderControl(this);

            oRm.write("</div>");
        });

        oRm.write("</div>");
    };
}());

}; // end of sap/ushell/ui/launchpad/DashboardGroupsContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.DeleteArea') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.DeleteArea.
jQuery.sap.declare("sap.ushell.ui.launchpad.DeleteArea");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/DeleteArea.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.ushell.ui.launchpad.DeleteAreaType (default: sap.ushell.ui.launchpad.DeleteAreaType.Dashboard)</li>
 * <li>{@link #getMessage message} : string (default: '')</li>
 * <li>{@link #getIcon icon} : string (default: '')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.DeleteArea#event:drop drop} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.DeleteArea#event:tileOver tileOver} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.DeleteArea#event:tileOut tileOut} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the new ui/launchpad/DeleteArea
 * @extends sap.ui.core.Control
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.ushell.ui.launchpad.DeleteArea", { metadata : {

	library : "sap.ushell",
	properties : {
		"type" : {type : "sap.ushell.ui.launchpad.DeleteAreaType", group : "Misc", defaultValue : sap.ushell.ui.launchpad.DeleteAreaType.Dashboard},
		"message" : {type : "string", group : "Misc", defaultValue : ''},
		"icon" : {type : "string", group : "Misc", defaultValue : ''}
	},
	events : {
		"drop" : {}, 
		"tileOver" : {}, 
		"tileOut" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.DeleteArea with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.DeleteArea.extend
 * @function
 */

sap.ushell.ui.launchpad.DeleteArea.M_EVENTS = {'drop':'drop','tileOver':'tileOver','tileOut':'tileOut'};


/**
 * Getter for property <code>type</code>.
 *
 * Default value is <code>Dashboard</code>
 *
 * @return {sap.ushell.ui.launchpad.DeleteAreaType} the value of property <code>type</code>
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Dashboard</code> 
 *
 * @param {sap.ushell.ui.launchpad.DeleteAreaType} oType  new value for property <code>type</code>
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#setType
 * @function
 */


/**
 * Getter for property <code>message</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>message</code>
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#getMessage
 * @function
 */

/**
 * Setter for property <code>message</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sMessage  new value for property <code>message</code>
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#setMessage
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#setIcon
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.DeleteArea#drop
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'drop' event of this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#attachDrop
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'drop' event of this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#detachDrop
 * @function
 */

/**
 * Fire event drop to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.DeleteArea#fireDrop
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.DeleteArea#tileOver
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tileOver' event of this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#attachTileOver
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tileOver' event of this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#detachTileOver
 * @function
 */

/**
 * Fire event tileOver to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.DeleteArea#fireTileOver
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.DeleteArea#tileOut
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tileOut' event of this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#attachTileOut
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tileOut' event of this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#detachTileOut
 * @function
 */

/**
 * Fire event tileOut to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.DeleteArea#fireTileOut
 * @function
 */


// Start of sap/ushell/ui/launchpad/DeleteArea.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @name sap.ushell.ui.launchpad.DeleteArea
 * 
 * @private
 */
/*global jQuery, sap, $, window*/


(function () {
    "use strict";
    sap.ushell.ui.launchpad.DeleteArea.prototype.init = function () {
        // do something for initialization...
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype.onAfterRendering = function () {
        if (this.getType() === sap.ushell.ui.launchpad.DeleteAreaType.Dashboard) {
            this.jqDeleteArea_visual = this.$().find(".sapUshellDeleteArea_dashboard_visual");
            this.jqDeleteArea_functional = this.$().find(".sapUshellDeleteArea_dashboard_functional");
            this.tileOver(false);
        } else {
            this.jqDeleteArea_visual = this.$().find(".sapUshellDeleteArea_grouplist_visual");
            this.jqDeleteArea_functional = this.$().find(".sapUshellDeleteArea_grouplist_functional");
            this.groupOver(false);
        }
        //New message on the DeleteArea (near the trashcan) for usability standarts
        this.jqDeleteArea_HoverMessage = this.jqDeleteArea_visual.siblings(".sapUshellDeleteArea_HoverMessage");
        if (sap.ui.Device.system.desktop) {
            this._addDroppable();
        }
    };

    sap.ushell.ui.launchpad.DeleteArea.prototype.setMessage = function (message) {
        // suppress the re-rendering, and modify the html itself to avoid flickering
        this.setProperty("message", message, true);
        this.$().find(".sapUshellDeleteArea_HoverMessage").text(message);
    };

    sap.ushell.ui.launchpad.DeleteArea.prototype._addDroppable = function () {
        if (this.jqDeleteArea_functional.is(".ui-droppable")) {
            return;
        }

        this.jqDeleteArea_functional.droppable({
            greedy: 'true',
            tolerance: 'touch',
            accept: jQuery.proxy(this._handleAccept, this),
            drop: jQuery.proxy(this._handleDrop, this),
            over: jQuery.proxy(this._handleOver, this),
            out: jQuery.proxy(this._handleOut, this)
        });
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype.tileOver = function (bool) {
        this.jqDeleteArea_functional.data("tileOver", bool);
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype.groupOver = function (bool) {
        this.jqDeleteArea_functional.data("groupOver", bool);
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype.getFunctionalArea = function () {
        return this.jqDeleteArea_functional;
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype.getVisualArea = function () {
        return this.jqDeleteArea_visual;
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype.show = function () {
        this.jqDeleteArea_functional.removeClass("sapUshellDeleteArea_functional_hidden").addClass("sapUshellDeleteArea_functional_show");
        if (this.getType() === sap.ushell.ui.launchpad.DeleteAreaType.Dashboard){
            if (sap.ui.Device.os.android){
                this.jqDeleteArea_visual.removeClass("sapUshellDeleteArea_visual_hidden").addClass("sapUshellDeleteArea_visual_show sapUshellDeleteArea_dashboard_visual_show");
            } else {
                this.jqDeleteArea_visual.switchClass("sapUshellDeleteArea_visual_hidden", "sapUshellDeleteArea_visual_show sapUshellDeleteArea_dashboard_visual_show", 250, "swing");
            }
        } else {
            if (sap.ui.Device.os.android) {
                this.jqDeleteArea_visual.removeClass("sapUshellDeleteArea_visual_hidden").addClass("sapUshellDeleteArea_visual_show sapUshellDeleteArea_grouplist_visual_show");
            } else {
                this.jqDeleteArea_visual.switchClass("sapUshellDeleteArea_visual_hidden", "sapUshellDeleteArea_visual_show sapUshellDeleteArea_grouplist_visual_show", 250, "swing");
            }
        }
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype.hide = function () {
        this.jqDeleteArea_visual.removeClass("sapUshellDeleteArea_visual_hover");
        if (this.getType() === sap.ushell.ui.launchpad.DeleteAreaType.Dashboard){
            this.jqDeleteArea_visual.switchClass("sapUshellDeleteArea_visual_show sapUshellDeleteArea_dashboard_visual_show", "sapUshellDeleteArea_visual_hidden", 250, "swing");
            this.jqDeleteArea_visual.removeClass("sapUshellDeleteArea_dashboard_visual_hover");
        } else {
            this.jqDeleteArea_visual.switchClass("sapUshellDeleteArea_visual_show sapUshellDeleteArea_grouplist_visual_show", "sapUshellDeleteArea_visual_hidden", 250, "swing");
            this.jqDeleteArea_visual.removeClass("sapUshellDeleteArea_grouplist_visual_hover");
        }
        this.jqDeleteArea_functional.removeClass("sapUshellDeleteArea_functional_show").addClass("sapUshellDeleteArea_functional_hidden");  
        this.jqDeleteArea_HoverMessage.switchClass("", "sapUshellDeleteArea_HoverMessage_Hide", 50, "swing");//only in group deletion we do not reach the handleDrop (since the confirmation mechanism) so remove the message here as well.
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype._handleAccept = function (d) {
        if (this.getType() === sap.ushell.ui.launchpad.DeleteAreaType.GroupList) {
            return d.hasClass("sapUshellGroupListItem");
        } else {
            return true;
        }
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype._handleDrop = function (event, ui) {
        this.fireEvent("drop", {
            functionalArea : this.jqDeleteArea_functional,
            ui : ui
        });
        this.jqDeleteArea_HoverMessage.switchClass("", "sapUshellDeleteArea_HoverMessage_Hide", 50, "swing");//after deleting a tile, the message should disappear.
    };

    sap.ushell.ui.launchpad.DeleteArea.prototype.adjustStyleOnOverIn = function (isDashboardDeleteArea, objectForDeletion) {
        if (isDashboardDeleteArea) {
            this.jqDeleteArea_visual.switchClass("", "sapUshellDeleteArea_visual_hover sapUshellDeleteArea_dashboard_visual_hover", 100, "swing");
        } else {
            this.jqDeleteArea_visual.switchClass("", "sapUshellDeleteArea_visual_hover sapUshellDeleteArea_grouplist_visual_hover", 100, "swing");
        }
        this.jqDeleteArea_HoverMessage.switchClass("sapUshellDeleteArea_HoverMessage_Hide", "", 150, "swing"); //on hover in, the message should appear

        if (objectForDeletion) {    //add opacity to the tile / group once it is entered the delete area
            objectForDeletion.addClass("sapUshellDeletedObjectTranparency");
        }
    };

    sap.ushell.ui.launchpad.DeleteArea.prototype._handleOver = function (event, ui) {
        var that = this, isDashboardDeleteArea = (this.getType() === sap.ushell.ui.launchpad.DeleteAreaType.Dashboard);

        // dashboard delete area scenario
        if (isDashboardDeleteArea) {
            this.tileOver(true);
        }
        else {
            // groups list delete area scenario
            // a temporary solution to the scenario where the dragged object is a group - we need to distinguish between 'reset group' scenario and the rest of them
            // the default string used is of 'delete group' - so we change it only if this group is not-removable, e.g. reset-group scenario
            if (ui.draggable) {
                var oDraggable = sap.ui.getCore().byId(ui.draggable.attr('id'));
                if (oDraggable) {
                    this.setDeleteAreaMessage(oDraggable);
                }
            }
            this.groupOver(true);
        }

        //Hide placeholder and animate clones to new positions
        this.fireTileOver();

        this.adjustStyleOnOverIn(isDashboardDeleteArea, ui.helper);
    };


    sap.ushell.ui.launchpad.DeleteArea.prototype.setDeleteAreaMessage = function (element) {
        //var oRemovable = sap.ui.getCore().byId(element.attr('id')).getRemovable();
        if (element.getRemovable()) {
            // delete group scenario
            this.setMessage(sap.ushell.resources.i18n.getText("deleteAreaMsgForGroup"));
        }
        else {
            // reset group scenario
            this.setMessage(sap.ushell.resources.i18n.getText("reset_group"));
        }
    };
    /**
     * @param DOM element
     * @returns {boolean}
     */
    sap.ushell.ui.launchpad.DeleteArea.prototype.isElementOverDeleteArea = function (element) {
        var elementRect = element.getBoundingClientRect(),
            deleteAreaY,
            deleteAreaX,
            elementY,
            elementX;

        //get deleteArea position
        deleteAreaY = this.jqDeleteArea_visual[0].offsetTop;
        deleteAreaX = this.jqDeleteArea_visual[0].offsetLeft;

        //get the right bottom corner of the element
        elementY = elementRect.top + elementRect.height;
        elementX = elementRect.left + elementRect.width;

        var isHorizontalIntersection = elementX >= deleteAreaX + this.jqDeleteArea_visual[0].offsetWidth / 5;
        var isVerticalIntersection = elementY >= deleteAreaY +  this.jqDeleteArea_visual[0].offsetHeight / 5;

        return isHorizontalIntersection && isVerticalIntersection;
    };

    sap.ushell.ui.launchpad.DeleteArea.prototype.adjustStyleOnOverOut = function (isDashboardDeleteArea, objectForDeletion) {
        if (isDashboardDeleteArea){
            this.jqDeleteArea_visual.switchClass("sapUshellDeleteArea_visual_hover sapUshellDeleteArea_dashboard_visual_hover", "", 100, "swing");
        } else {
            this.jqDeleteArea_visual.switchClass("sapUshellDeleteArea_visual_hover sapUshellDeleteArea_grouplist_visual_hover", "", 100, "swing");
        }
        this.jqDeleteArea_HoverMessage.switchClass("", "sapUshellDeleteArea_HoverMessage_Hide", 50, "swing");//on hover out, the message should disappear

        if(objectForDeletion){     //remove the opacity from the tile / group once it exits the delete area
            objectForDeletion.removeClass("sapUshellDeletedObjectTranparency");
        }
    };

    sap.ushell.ui.launchpad.DeleteArea.prototype._handleOut = function (event, ui) {
        var that = this,
            isDashboardDeleteArea = (this.getType() === sap.ushell.ui.launchpad.DeleteAreaType.Dashboard);        
        
        if (isDashboardDeleteArea) {
            this.tileOver(false);
        } else {
            this.groupOver(false);
        }

        //Hide placholder and animate clones to new positions
        this.fireTileOut();

        this.adjustStyleOnOverOut(isDashboardDeleteArea, ui.helper);
    };
}());

}; // end of sap/ushell/ui/launchpad/DeleteArea.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.DeleteAreaRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap, $, window*/

(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.ui.launchpad.DeleteAreaRenderer");    
    /**
     * @class DeleteArea renderer.
     * @static
     *
     * @private
     */
    sap.ushell.ui.launchpad.DeleteAreaRenderer = {};   
    /**
     * Renders the HTML for the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.DeleteAreaRenderer.render = function (oRm, oControl) {
        oRm.write("<div");
        oRm.writeControlData(oControl);
        oRm.write(">");


        oRm.write("<div");
        // icon
        oRm.addClass("sapUshellDeleteArea_visual");
        oRm.addClass("sapUshellDeleteArea_visual_hidden");
        if (oControl.getType() === sap.ushell.ui.launchpad.DeleteAreaType.Dashboard) {
            oRm.addClass("sapUshellDeleteArea_dashboard");
            oRm.addClass("sapUshellDeleteArea_dashboard_visual");
        } else {
            oRm.addClass("sapUshellDeleteArea_grouplist");
            oRm.addClass("sapUshellDeleteArea_grouplist_visual");
        }
        oRm.writeStyles();
        oRm.writeClasses();
        oRm.write(">");
        if (oControl.getIcon()) {
            var oIcon = new sap.ui.core.Icon({src: oControl.getIcon()});
            oIcon.addStyleClass('sapUshellDeleteAreaIcon');
            oRm.renderControl(oIcon);
        }
        oRm.write("</div>");

        //New div for message on the DeleteArea (near the trashcan) for usability standarts
        oRm.write("<div");
        oRm.addClass("sapUshellDeleteArea_HoverMessage");
        oRm.addClass("sapUshellDeleteArea_HoverMessage_Hide");
        oRm.writeStyles();
        oRm.writeClasses();
        oRm.write(">" + oControl.getMessage() );
        oRm.write("</div>");

        oRm.write("<div");
        oRm.addClass("sapUshellDeleteArea_functional");
        oRm.addClass("sapUshellDeleteArea_functional_hidden");
        if (oControl.getType() === sap.ushell.ui.launchpad.DeleteAreaType.Dashboard) {
            oRm.addClass("sapUshellDeleteArea_dashboard_functional");
        } else {
            oRm.addClass("sapUshellDeleteArea_grouplist_functional");
        }
        oRm.writeStyles();
        oRm.writeClasses();
        oRm.write(">");
        oRm.write("</div>");
        oRm.write("</div>");
    };
}());

}; // end of sap/ushell/ui/launchpad/DeleteAreaRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage.
jQuery.sap.declare("sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage");

jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/EmbeddedSupportErrorMessage.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Dialog#constructor sap.m.Dialog}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/launchpad/EmbeddedSupportErrorMessage
 * @extends sap.m.Dialog
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Dialog.extend("sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage", { metadata : {

	library : "sap.ushell",
	events : {
		"afterClose" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage.extend
 * @function
 */

sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage.M_EVENTS = {'afterClose':'afterClose'};


/**
 *
 * @name sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage#afterClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage#attachAfterClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage#detachAfterClose
 * @function
 */

/**
 * Fire event afterClose to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage#fireAfterClose
 * @function
 */


// Start of sap/ushell/ui/launchpad/EmbeddedSupportErrorMessage.js
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, navigator*/

    jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Button'); // unlisted dependency retained

    

    jQuery.sap.declare("sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage");

    /**
     * EmbeddedSupportErrorMessage
     *
     * @name sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage
     * @private
     * @since 1.20.0
     */

    sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage.prototype.open = function () {
        var oContactSupportButton,
            oContactSupport,
            oCloseButton;

        this.translationBundle = sap.ushell.resources.i18n;
        oContactSupportButton = new sap.m.Button({
            id : sap.ui.core.ElementMetadata.uid("supportBtn"),
            text : this.translationBundle.getText("contactSupportBtn"),
            press : function () {
                this.close();
                jQuery.sap.require("sap.ushell.ui.footerbar.ContactSupportButton");
                this.oContactSupport = new sap.ushell.ui.footerbar.ContactSupportButton(
                    "ContactSupportErrorMsg",{
                        visible : true
                    });
                if (this.oContactSupport) {
                    this.oContactSupport.showContactSupportDialog();
                    //oContactSupport is redundant after creation of the Contact Support Dialog.
                    this.oContactSupport.destroy();
                }
            }.bind(this)
        });
        oCloseButton = new sap.m.Button({
            id : sap.ui.core.ElementMetadata.uid("closeBtn"),
            text : this.translationBundle.getText("close"),
            press : function () {
                this.close();
            }.bind(this)
        });

        this.setType(sap.m.DialogType.Message);
        this.setIcon('sap-icon://alert');
        this.setRightButton(oCloseButton);
        this.setLeftButton(oContactSupportButton);
        this._addStyleClassToContent();
        this.addStyleClass('sapMMessageBoxError');
        this.attachAfterClose(function () {
            this.destroy();
        }.bind(this));

        //call the parent sap.m.Dialog open method
        if (sap.m.Dialog.prototype.open) {
            sap.m.Dialog.prototype.open.apply(this, arguments);
        }
    }

    sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage.prototype._addStyleClassToContent = function () {
        var aContent = this.getContent(),
            oCurrentContent,
            index;

        for (index in aContent){
            oCurrentContent = aContent[index];
            if ("sap.m.Text" === oCurrentContent.getMetadata().getName() && !oCurrentContent.aCustomStyleClasses){
                oCurrentContent.addStyleClass("sapMMsgBoxText");
            }
        }
    };
}());
}; // end of sap/ushell/ui/launchpad/EmbeddedSupportErrorMessage.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.EmbeddedSupportErrorMessageRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.launchpad.EmbeddedSupportErrorMessageRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.DialogRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage
     * @static
     * @private
     */
    sap.ushell.ui.launchpad.EmbeddedSupportErrorMessageRenderer = sap.ui.core.Renderer.extend(sap.m.DialogRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */

}());
}; // end of sap/ushell/ui/launchpad/EmbeddedSupportErrorMessageRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.GroupListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.GroupListItem.
jQuery.sap.declare("sap.ushell.ui.launchpad.GroupListItem");

jQuery.sap.require('sap.m.ListItemBase'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/GroupListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getDefaultGroup defaultGroup} : boolean (default: false)</li>
 * <li>{@link #getShow show} : boolean (default: true)</li>
 * <li>{@link #getEditMode editMode} : boolean (default: false)</li>
 * <li>{@link #getGroupId groupId} : string</li>
 * <li>{@link #getIndex index} : int</li>
 * <li>{@link #getAllowEditMode allowEditMode} : boolean (default: true)</li>
 * <li>{@link #getRemovable removable} : boolean</li>
 * <li>{@link #getNumberOfTiles numberOfTiles} : int (default: 0)</li>
 * <li>{@link #getIsGroupVisible isGroupVisible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.GroupListItem#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.GroupListItem#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.GroupListItem#event:drop drop} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.GroupListItem#event:over over} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.GroupListItem#event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.GroupListItem#event:out out} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/launchpad/GroupListItem
 * @extends sap.m.ListItemBase
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.ListItemBase.extend("sap.ushell.ui.launchpad.GroupListItem", { metadata : {

	library : "sap.ushell",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"defaultGroup" : {type : "boolean", group : "Misc", defaultValue : false},
		"show" : {type : "boolean", group : "Misc", defaultValue : true},
		"editMode" : {type : "boolean", group : "Misc", defaultValue : false},
		"groupId" : {type : "string", group : "Misc", defaultValue : null},
		"index" : {type : "int", group : "Misc", defaultValue : null},
		"allowEditMode" : {type : "boolean", group : "Misc", defaultValue : true},
		"removable" : {type : "boolean", group : "Misc", defaultValue : null},
		"numberOfTiles" : {type : "int", group : "Misc", defaultValue : 0},
		"isGroupVisible" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {
		"press" : {}, 
		"change" : {}, 
		"drop" : {}, 
		"over" : {}, 
		"afterRendering" : {}, 
		"out" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.GroupListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.GroupListItem.extend
 * @function
 */

sap.ushell.ui.launchpad.GroupListItem.M_EVENTS = {'press':'press','change':'change','drop':'drop','over':'over','afterRendering':'afterRendering','out':'out'};


/**
 * Getter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setTitle
 * @function
 */


/**
 * Getter for property <code>defaultGroup</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>defaultGroup</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getDefaultGroup
 * @function
 */

/**
 * Setter for property <code>defaultGroup</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDefaultGroup  new value for property <code>defaultGroup</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setDefaultGroup
 * @function
 */


/**
 * Getter for property <code>show</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>show</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getShow
 * @function
 */

/**
 * Setter for property <code>show</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShow  new value for property <code>show</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setShow
 * @function
 */


/**
 * Getter for property <code>editMode</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>editMode</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getEditMode
 * @function
 */

/**
 * Setter for property <code>editMode</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEditMode  new value for property <code>editMode</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setEditMode
 * @function
 */


/**
 * Getter for property <code>groupId</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>groupId</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getGroupId
 * @function
 */

/**
 * Setter for property <code>groupId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sGroupId  new value for property <code>groupId</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setGroupId
 * @function
 */


/**
 * Getter for property <code>index</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>index</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getIndex
 * @function
 */

/**
 * Setter for property <code>index</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iIndex  new value for property <code>index</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setIndex
 * @function
 */


/**
 * Getter for property <code>allowEditMode</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>allowEditMode</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getAllowEditMode
 * @function
 */

/**
 * Setter for property <code>allowEditMode</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bAllowEditMode  new value for property <code>allowEditMode</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setAllowEditMode
 * @function
 */


/**
 * Getter for property <code>removable</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>removable</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getRemovable
 * @function
 */

/**
 * Setter for property <code>removable</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bRemovable  new value for property <code>removable</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setRemovable
 * @function
 */


/**
 * Getter for property <code>numberOfTiles</code>.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>numberOfTiles</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getNumberOfTiles
 * @function
 */

/**
 * Setter for property <code>numberOfTiles</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iNumberOfTiles  new value for property <code>numberOfTiles</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setNumberOfTiles
 * @function
 */


/**
 * Getter for property <code>isGroupVisible</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>isGroupVisible</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getIsGroupVisible
 * @function
 */

/**
 * Setter for property <code>isGroupVisible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIsGroupVisible  new value for property <code>isGroupVisible</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setIsGroupVisible
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.GroupListItem#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.GroupListItem#firePress
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.GroupListItem#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.GroupListItem#fireChange
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.GroupListItem#drop
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'drop' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#attachDrop
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'drop' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#detachDrop
 * @function
 */

/**
 * Fire event drop to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.GroupListItem#fireDrop
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.GroupListItem#over
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'over' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#attachOver
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'over' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#detachOver
 * @function
 */

/**
 * Fire event over to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.GroupListItem#fireOver
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.GroupListItem#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#attachAfterRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#detachAfterRendering
 * @function
 */

/**
 * Fire event afterRendering to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.GroupListItem#fireAfterRendering
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.GroupListItem#out
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'out' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#attachOut
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'out' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#detachOut
 * @function
 */

/**
 * Fire event out to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.GroupListItem#fireOut
 * @function
 */


// Start of sap/ushell/ui/launchpad/GroupListItem.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/
/**
 * @name sap.ushell.ui.launchpad.GroupListItem
 *
 * @private
 */
(function () {
    "use strict";

    jQuery.sap.require('sap.m.Input'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-core'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-widget'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-mouse'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-droppable'); // unlisted dependency retained


    sap.ushell.ui.launchpad.GroupListItem.prototype.init = function () {
        this._sDefaultValue = sap.ushell.resources.i18n.getText("new_group_name");
        this._sOldTitle = "";

        this.oEditInputField = new sap.m.Input({
            //placeholder : "{i18n>new_group_name}", // Does not work? i18n is not in the model...
            placeholder : this._sDefaultValue,
            value : this.getTitle()
        });

        var that = this;
        this.oEditInputField.onfocusout = function(){
            jQuery.proxy(that._stopEdit, that)();
            //Fix ios 7.1 bug in ipad4 where there is a gray box on the screen when you close the keyboards
            window.scrollTo(0, 0);
        }
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.exit = function () {
        if (sap.ui.Device.system.desktop) {
            this.$().unbind("drop", this._handleDrop)
                .unbind("dropover", this._handleDropOver)
                .droppable("destroy");
        }
        this.oEditInputField.destroy();
        sap.m.ListItemBase.prototype.exit.apply(this, arguments);
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.onBeforeRendering = function() {
        if (sap.ui.Device.system.desktop) {
            this.$().unbind("drop", this._handleDrop)
                .unbind("dropover", this._handleDropOver)
                .droppable("destroy");
        }
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.onAfterRendering = function () {
        var jqThis = jQuery.sap.byId(this.sId),
            bHideItem = !this.getShow() || (this.getDefaultGroup() && !this.groupHasVisibleTiles()) ||
                (!this.groupHasVisibleTiles() && sap.ui.getCore().byId("shell") && sap.ui.getCore().byId("shell").getModel() &&
                    !sap.ui.getCore().byId("shell").getModel().getProperty("/personalization"));

        if (this.getEditMode()) {
            this.focus();
            //fix for android devices which not accept the focus correctly
            jQuery.sap.byId(this.oEditInputField.sId).click();
        }

        //Make this groupListItem droppable
        if (sap.ui.Device.system.desktop) {
            this.$().droppable({
                greedy: true,
                tolerance: "pointer",
                accept: ".sapUshellTile",
                over: jQuery.proxy(this._handleOver, this),
                out: jQuery.proxy(this._handleOut, this),
                drop: jQuery.proxy(this._handleDrop, this)
            });
        }

        if (!bHideItem) {
            jqThis.css("display", "flex");
        } else {
            jqThis.css("display", "none");
        }

        this.fireAfterRendering();
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.groupHasVisibleTiles = function () {
        var groupTiles = this.getModel().getProperty("/groups/" + this.getIndex() + "/tiles");
        return sap.ushell.utils.groupHasVisibleTiles(groupTiles);
    }

    // focus handling
    sap.ushell.ui.launchpad.GroupListItem.prototype.getFocusDomRef = function () {
        // delegate to input field if in edit mode, otherwise revert to default
        return (this.getEditMode() && this.oEditInputField && this.oEditInputField.getFocusDomRef()) || this.getDomRef();
    };

    // SAPUI5 events
    sap.ushell.ui.launchpad.GroupListItem.prototype._startEdit = function () {
        if (this.getAllowEditMode()) {
            this._sOldTitle = this.oEditInputField.getValue();
            this.setEditMode(true);
            this.focus(); // grab focus -> will be delegated to input field

            // mark entire text
            var that = this;
            setTimeout(function() {
                that.oEditInputField.selectText(0, that.oEditInputField.getValue().length);
            });
        }
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype._stopEdit = function () {
        // This event may be called twice, first by sapenter/sapescape, then by the triggered focusout.
        // Make sure we send changes only once.
        if(!this.getEditMode()) {
            return;
        }

        // Check if we need to update the title.
        // Note: sapescape is send to the input first, which has already reset
        //  its content when this is called. Therefore:
        //  this._sOldTitle == sCurrentTitle and no change is necessary.
        var sCurrentTitle = this.oEditInputField.getValue().trim(),
            sNewTitle = sCurrentTitle || this._sDefaultValue,
            bHasChanged = sNewTitle !== this._sOldTitle;

        if(bHasChanged) {
            this.setTitle(sNewTitle).fireChange({
                newTitle: sNewTitle
            });
        }
        this.setEditMode(false);

        // Workaround for IE9 (blurring <body> or <span> switches the application (e.g. from ie9 to notepad or outlook))
        // See http://tjvantoll.com/2013/08/30/bugs-with-document-activeelement-in-internet-explorer/
        var activeElement = document.activeElement;
        if ( activeElement.nodeName.toLowerCase() !== "body" && activeElement.nodeName.toLowerCase() !== "span") {
            // "Blur" triggers the _stopEdit event to be fired again. Workaround: Make sure
            // to call this only after the EditMode has been set to false to allow a quick
            // exit in the beginning.
            activeElement.blur();
        }

        //Call the resize handler
        var jqOuterGroupList = jQuery("#groupList");
        jqOuterGroupList.trigger("resize", [jqOuterGroupList.width(), jqOuterGroupList.height()]);
    };

    // jQuery events
    sap.ushell.ui.launchpad.GroupListItem.prototype._handleOver = function (event, ui) {
        //Sometimes, the jQuery hoverClass does not work properly for some reason
        //Better take care of that explicitly:
        jQuery("#" + this.sId).addClass("sapUshellDrop");
        this.fireOver({
            control : (ui && ui.draggable && (ui.draggable.length > 0)
                && sap.ui.getCore().byId(ui.draggable[0].id)) || undefined
        });
    };
    sap.ushell.ui.launchpad.GroupListItem.prototype._handleOut = function (event, ui) {
        //Sometimes, the jQuery hoverClass does not work properly for some reason
        //Better take care of that explicitly:
        jQuery("#" + this.sId).removeClass("sapUshellDrop");
        this.fireOut({
            control : (ui && ui.draggable && (ui.draggable.length > 0)
                && sap.ui.getCore().byId(ui.draggable[0].id)) || undefined
        });
    };
    sap.ushell.ui.launchpad.GroupListItem.prototype._handleDrop = function (event, ui) {
        this.fireDrop({
            control : (ui && ui.draggable && (ui.draggable.length > 0)
                && sap.ui.getCore().byId(ui.draggable[0].id)) || undefined
        });
    };

    // browser events
    // use onmousedown instead of onclick because a click will not end the edit mode if the user starts immediately dragging another tile
    sap.ushell.ui.launchpad.GroupListItem.prototype.onclick = function (oEvent) {
        this.firePress({
            id : this.getId()
        });
    };
    sap.ushell.ui.launchpad.GroupListItem.prototype.onmousedown = function () {
        this.focus(); // grab focus
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.ondblclick = function () {
        if (sap.ui.getCore().byId("shell") && sap.ui.getCore().byId("shell").getModel() &&
                sap.ui.getCore().byId("shell").getModel().getProperty("/personalization")) {
            this._startEdit();
        }
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.onsapenter = function () {
        this._stopEdit();
        this.firePress({
            id : this.getId(),
            action: "sapenter"
        });
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.onsapescape = function () {
        this._stopEdit();
    };

    // override setters
    sap.ushell.ui.launchpad.GroupListItem.prototype.setEditMode = function (bMode) {
        this.setProperty("editMode", bMode, true); // suppress rerendering

        //Call the resize handler (some delay so IE9 can catch up)
        setTimeout(function () {
            var jqOuterGroupList = jQuery("#groupList");
            jqOuterGroupList.trigger("resize", [jqOuterGroupList.width(), jqOuterGroupList.height()]);
        }, 5);

        return this.toggleStyleClass("sapUshellEditing", bMode);
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.setAllowEditMode = function (bAllowEditMode) {
        this.setProperty("allowEditMode", bAllowEditMode, true); // suppress rerendering
        return this;
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.setRemovable = function (bRemovable) {
        this.setProperty("removable", bRemovable, true); // suppress rerendering
        return this;
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.setGroupId = function (sGroupId) {
        this.setProperty("groupId", sGroupId, true); // suppress rerendering
        return this;
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.setTitle = function (sTitle) {
        this.setProperty("title", sTitle); // DO NOT suppress rerendering - otherwise groups list (UI) is not re-rendered and old tooltip still showing        
        this.oEditInputField.setValue(sTitle);
        this.$().find(".sapMSLITitleOnly").text(sTitle);
        return this;
    };
}());

}; // end of sap/ushell/ui/launchpad/GroupListItem.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.GroupListItemRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/
/**
 * @class GroupListItem renderer.
 * @static
 * 
 * @private
 */

(function () {
    "use strict";
    
    jQuery.sap.declare("sap.ushell.ui.launchpad.GroupListItemRenderer");
    jQuery.sap.require('sap.m.ListItemBaseRenderer'); // unlisted dependency retained


    /**
     * @class GroupListItem renderer.
     * @static
     */
    sap.ushell.ui.launchpad.GroupListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);
    var translationBundle = sap.ushell.resources.i18n;

    sap.ushell.ui.launchpad.GroupListItemRenderer.renderLIAttributes = function(rm, oLI) {
        rm.addClass("sapUshellGroupLI");
        if (oLI.getEditMode()) {
            rm.addClass("sapUshellEditing");
        }
    };

    /**
     * Renders the HTML for the list content part of the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oLI an object representation of the list item control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.GroupListItemRenderer.renderLIContent = function (rm, oLI) {
        rm.write("<div");
        rm.addClass("sapMSLIDiv");
        rm.addClass("sapMSLITitleDiv");
        rm.writeClasses();

        if (!oLI.getVisible()) {
            rm.addStyle("display", "none");
            rm.writeStyles();
        }
        rm.write(">");

        // List item text (also written when no title for keeping the space)
        rm.renderControl(oLI.oEditInputField);
        rm.write("<div");
        rm.addClass("sapMSLITitleOnly");
        rm.writeClasses();
        rm.writeAccessibilityState(oLI, {label : oLI.getTitle() + translationBundle.getText("GroupListItem_label")});
        rm.write(">");
        rm.writeEscaped(oLI.getTitle());
        rm.write("</div>");

        rm.write("</div>");
    };
}());

}; // end of sap/ushell/ui/launchpad/GroupListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.HeaderTileRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

/**
 * @class HeaderTile renderer.
 * @static
 * 
 * @private
 */

jQuery.sap.declare("sap.ushell.ui.launchpad.HeaderTileRenderer");
sap.ushell.ui.launchpad.HeaderTileRenderer = {};
var translationBundle = sap.ushell.resources.i18n;

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ushell.ui.launchpad.HeaderTileRenderer.render = function(oRm, oControl) {
    oRm.write("<");
    oRm.write(oControl.getHeaderLevel().toLowerCase());
    oRm.writeControlData(oControl);
    oRm.addClass("sapUshellHeaderTile");
    oRm.addClass("sapUiStrongBackgroundTextColor");
    if (!oControl.getVisible()) {
        oRm.addClass("sapUshellHidden");
    }
    oRm.writeClasses();
    oRm.writeAccessibilityState(oControl, {label : oControl.getHeaderText() + translationBundle.getText("HeaderCategory")});
    oRm.write(">");
    oRm.writeEscaped(oControl.getHeaderText());
    oRm.write("</");
    oRm.write(oControl.getHeaderLevel().toLowerCase());
    oRm.write(">");
};

}; // end of sap/ushell/ui/launchpad/HeaderTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.LoadingDialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.LoadingDialog.
jQuery.sap.declare("sap.ushell.ui.launchpad.LoadingDialog");

jQuery.sap.require('sap.m.BusyDialog'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/LoadingDialog.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIconUri iconUri} : sap.ui.core.URI</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.BusyDialog#constructor sap.m.BusyDialog}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Displays a loading dialog with an indicator that an app is loading
 * @extends sap.m.BusyDialog
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.LoadingDialog
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.BusyDialog.extend("sap.ushell.ui.launchpad.LoadingDialog", { metadata : {

	library : "sap.ushell",
	properties : {
		"iconUri" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.LoadingDialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.LoadingDialog.extend
 * @function
 */


/**
 * Getter for property <code>iconUri</code>.
 * the sap-icon://-style URI of an icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconUri</code>
 * @public
 * @name sap.ushell.ui.launchpad.LoadingDialog#getIconUri
 * @function
 */

/**
 * Setter for property <code>iconUri</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconUri  new value for property <code>iconUri</code>
 * @return {sap.ushell.ui.launchpad.LoadingDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LoadingDialog#setIconUri
 * @function
 */


// Start of sap/ushell/ui/launchpad/LoadingDialog.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true*/
    jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained


    sap.ushell.ui.launchpad.LoadingDialog.prototype.init = function () {
        // call parent
        sap.m.BusyDialog.prototype.init.call(this, arguments);
        this.oIcon = new sap.ui.core.Icon();
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.exit = function () {
        // call parent
        sap.m.BusyDialog.prototype.exit.call(this, arguments);
        if (this.oIcon) {
            this.oIcon.destroy();
            this.oIcon = null;
        }
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.isOpen = function () {
        var oPopup = this._oPopup;
        return oPopup.isOpen();
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.setPopupVisible = function (visible) {
        this.toggleStyleClass("sapUshellLoadingDialogInvisible", !visible);
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.setAppInfoVisible = function (visible) {
        this.toggleStyleClass("sapUshellLoadingDialogAppDataInvisible", !visible);
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.openLoadingScreen = function () {
        if (!this._oPopup.isOpen()) {
        	this.setPopupVisible(true); 
            this.open();
            jQuery('.sapUiBLy').addClass('sapUshellLoadingDialog');
        }
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.showAppInfo = function (sAppTitle, sIconUri) {
        var that = this,
            fTimeoutHelper = function (that) {
                that.setAppInfoVisible(true);
            };
        this.setText(sAppTitle);
        this.setIconUri(sIconUri);
        this.oIcon.setSrc(sIconUri);
        window.setTimeout(function () {
            fTimeoutHelper(that);
        }, 50);
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.closeLoadingScreen = function () {
        var that = this,
            fTimeoutHelper = function (that) {
                that.setText(null);
                that.setIconUri(null);
                that.setAppInfoVisible(false);
                if(that.isActive()){
                    that.close();
                }
                jQuery('.sapMDialogBLyInit').removeClass('sapUshellLoadingDialog');
            };

        if (this._oPopup && this._oPopup.isOpen()) {
            this.setPopupVisible(false);
            window.setTimeout(function () {
                fTimeoutHelper(that);
            }, 300);
        }
    };
}());
}; // end of sap/ushell/ui/launchpad/LoadingDialog.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.LoadingDialogRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap, navigator*/

(function () {
    "use strict";
    /*jslint nomen: true*/
    jQuery.sap.declare("sap.ushell.ui.launchpad.LoadingDialogRenderer");

    /**
     * @class sap.ushell.ui.launchpad.LoadingDialogRenderer
     * @static
     * @private
     */
    sap.ushell.ui.launchpad.LoadingDialogRenderer = {};


    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     * @private
     */
    sap.ushell.ui.launchpad.LoadingDialogRenderer.render = function (oRm, oControl) {
        var sTooltip = oControl.getTooltip_AsString();
        // add custom class to label
        oControl._oLabel.addStyleClass("sapUshellLoadingDialogLabel");
        oRm.write("<div");
        oRm.writeControlData(oControl);
        oRm.addClass("sapUshellLoadingDialogControl sapMBusyDialog sapMCommonDialog");
        if (sap.ui.Device.system.iphone) {
            oRm.addClass("sapMDialogHidden");
        }
        if (!oControl._isPlatformDependent) {
            if (!oControl.getText() && !oControl.getTitle() && !oControl.getShowCancelButton()) {
                oRm.addClass("sapMBusyDialogSimple");
            }
        }
        oRm.writeClasses();
        if (sTooltip) {
            oRm.writeAttributeEscaped("title", sTooltip);
        }
        oRm.write(">");
        if (oControl.getTitle()) {
            oRm.write("<header class=\"sapMDialogTitle\">");
            oRm.writeEscaped(oControl.getTitle());
            oRm.write("</header>");
        }

        if (jQuery.os.ios || !oControl._isPlatformDependent) {
            this.renderAppInfo(oRm, oControl);
            this.renderFioriFlower(oRm, oControl);
        } else {
            this.renderFioriFlower(oRm, oControl);
            this.renderAppInfo(oRm, oControl);
        }

        if (oControl.getShowCancelButton()) {
            oRm.write("<footer class='sapMBusyDialogFooter sapMFooter-CTX'>");
            oRm.renderControl(oControl._oButton);
            oRm.write("</footer>");
        }
        oRm.write("</div>");
    };

    sap.ushell.ui.launchpad.LoadingDialogRenderer.renderAppInfo = function (oRm, oControl) {
        oRm.write("<div").addClass("sapUshellLoadingDialogAppData").writeClasses().write(">");
        if (oControl.getIconUri()) {
            oRm.renderControl(oControl.oIcon);
        }
        oRm.renderControl(oControl._oLabel);
        oRm.write("</div>");
    };

    sap.ushell.ui.launchpad.LoadingDialogRenderer.renderFioriFlower = function (oRm, oControl) {
        /*jslint regexp: true */
        var i,
            bReplaceFlower = false,
            aUserAgentRegexes = [
                /Android\s4\.2.+GT-I9505.+Chrome\/18/ // Chrome 18 on Android 4.2.x / Samsung Galaxy S4
            ];
        // some browsers do not get the flower but the replacement
        if (navigator.userAgent) {
            for (i = 0; i < aUserAgentRegexes.length; i = i + 1) {
                // if one of the user agent matches, the replacement is drawn
                if (aUserAgentRegexes[i].test(navigator.userAgent)) {
                    bReplaceFlower = true;
                    // exit loop
                    break;
                }
            }
        }
        // create either flowery code or busy indicator
        if (jQuery.support.cssAnimations && !bReplaceFlower) {
            //Handle flower animation direction in rtl
            var bRtl = sap.ui.getCore().getConfiguration().getRTL();
            oRm.write("<div id='fiori2-loader'>");
            oRm.write("<div class='fiori2-blossom'>");
            if (!bRtl) {
                for (i = 1; i < 6; i = i + 1) {
                    oRm.write("<div class='fiori2-leafContainer fiori2-leafContainer" + i + "'>");
                    oRm.write("<div class='fiori2-leaf fiori2-leaf" + i + "'></div>");
                    // end leafContainer
                    oRm.write("</div>");
                }
            } else {
                for (i = 1; i < 6; i = i + 1) {
                    oRm.write("<div class='fiori2-leafContainer fiori2-leafContainer" + i + "'>");
                    oRm.write("<div class='fiori2-leaf rtlFiori2-leaf" + i + "'></div>");
                    // end leafContainer
                    oRm.write("</div>");
                }
            }
            // end blossom
            oRm.write("</div>");

            // end fiori2-loader
            oRm.write("</div>");
        } else {
            oRm.renderControl(oControl._busyIndicator);
        }
    };

}());

}; // end of sap/ushell/ui/launchpad/LoadingDialogRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.Panel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.Panel.
jQuery.sap.declare("sap.ushell.ui.launchpad.Panel");

jQuery.sap.require('sap.m.Panel'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/Panel.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTranslucent translucent} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getHeaderContent headerContent} : sap.ui.core.Control[]</li>
 * <li>{@link #getHeaderBar headerBar} : sap.m.Bar</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Panel#constructor sap.m.Panel}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Panel control is a container for controls with header text, header controls, or a header bar.
 * @extends sap.m.Panel
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.Panel
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Panel.extend("sap.ushell.ui.launchpad.Panel", { metadata : {

	library : "sap.ushell",
	properties : {
		"translucent" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	aggregations : {
		"headerContent" : {type : "sap.ui.core.Control", multiple : true, singularName : "headerContent"}, 
		"headerBar" : {type : "sap.m.Bar", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.Panel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.Panel.extend
 * @function
 */


/**
 * Getter for property <code>translucent</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>translucent</code>
 * @public
 * @name sap.ushell.ui.launchpad.Panel#getTranslucent
 * @function
 */

/**
 * Setter for property <code>translucent</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bTranslucent  new value for property <code>translucent</code>
 * @return {sap.ushell.ui.launchpad.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Panel#setTranslucent
 * @function
 */


/**
 * Getter for aggregation <code>headerContent</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.Panel#getHeaderContent
 * @function
 */


/**
 * Inserts a headerContent into the aggregation named <code>headerContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oHeaderContent the headerContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the headerContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the headerContent is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Panel#insertHeaderContent
 * @function
 */

/**
 * Adds some headerContent <code>oHeaderContent</code> 
 * to the aggregation named <code>headerContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oHeaderContent the headerContent to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Panel#addHeaderContent
 * @function
 */

/**
 * Removes an headerContent from the aggregation named <code>headerContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vHeaderContent the headerContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed headerContent or null
 * @public
 * @name sap.ushell.ui.launchpad.Panel#removeHeaderContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>headerContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.Panel#removeAllHeaderContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>headerContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oHeaderContent the headerContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.Panel#indexOfHeaderContent
 * @function
 */
	

/**
 * Destroys all the headerContent in the aggregation 
 * named <code>headerContent</code>.
 * @return {sap.ushell.ui.launchpad.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Panel#destroyHeaderContent
 * @function
 */


/**
 * Getter for aggregation <code>headerBar</code>.<br/>
 * 
 * @return {sap.m.Bar}
 * @public
 * @name sap.ushell.ui.launchpad.Panel#getHeaderBar
 * @function
 */


/**
 * Setter for the aggregated <code>headerBar</code>.
 * @param {sap.m.Bar} oHeaderBar
 * @return {sap.ushell.ui.launchpad.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Panel#setHeaderBar
 * @function
 */
	

/**
 * Destroys the headerBar in the aggregation 
 * named <code>headerBar</code>.
 * @return {sap.ushell.ui.launchpad.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Panel#destroyHeaderBar
 * @function
 */


// Start of sap/ushell/ui/launchpad/Panel.js
// Copyright (c) 2013 SAP AG, All Rights Reserved

/**
 * @name sap.ushell.ui.launchpad.Panel
 * 
 * @private
 */


sap.ushell.ui.launchpad.Panel.prototype.updateAggregation = sap.ushell.override.updateAggregation;

}; // end of sap/ushell/ui/launchpad/Panel.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.PanelRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
jQuery.sap.declare("sap.ushell.ui.launchpad.PanelRenderer");

/**
 * @class Panel renderer. 
 * @static
 * 
 * @private
 */
sap.ushell.ui.launchpad.PanelRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ushell.ui.launchpad.PanelRenderer.render =  function(oRm, oControl) {
    // Return immediately if control is invisible
    if (!oControl.getVisible()) {
        return;
    }

    oRm.write("<section");
    oRm.writeControlData(oControl);
    oRm.addClass("sapMPanel");
    oRm.addClass("sapUshellPanel");
    if (!oControl.getTranslucent()) {
        oRm.addClass("sapMPanelBG");
    }
    oRm.addStyle("width", oControl.getWidth());
    oRm.addStyle("height", oControl.getHeight());
    oRm.writeClasses();
    oRm.writeStyles();
    oRm.write(">");
    var aHeaderChildren = oControl.getHeaderContent();
    var jLength = aHeaderChildren.length;
    if(oControl.getHeaderText() || jLength > 0 || oControl.getHeaderBar()) {
        oRm.write("<header");
        oRm.addClass("sapMPanelHdr");
        oRm.writeClasses();
        oRm.write(">");
        if(oControl.getHeaderText() || jLength > 0) {
            oRm.write("<");
            oRm.write(oControl.getHeaderLevel().toLowerCase());
            oRm.write(">");
            if (oControl.getHeaderText()) {
                oRm.writeEscaped(oControl.getHeaderText());
            }
            for (var j = 0; j < jLength; j++) {
                oRm.renderControl(aHeaderChildren[j]);
            }
            oRm.write("</");
            oRm.write(oControl.getHeaderLevel().toLowerCase());
            oRm.write(">");
        }
        if (oControl.getHeaderBar()) {
/*            oRm.addClass("sapUshellPanelHdrBar");*/
            oRm.renderControl(oControl.getHeaderBar());
        }
        oRm.write("</header>");
    }
    oRm.write("<div");
    oRm.addClass("sapMPanelContent");
    oRm.writeClasses();
    oRm.write(">");
    var aChildren = oControl.getContent();
    var iLength = aChildren.length;
    for (var i = 0; i < iLength; i++) {
        oRm.renderControl(aChildren[i]);
    }
    oRm.write("</div>");
    oRm.write("</section>");
};

}; // end of sap/ushell/ui/launchpad/PanelRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.PlusTileRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/
/**
 * @class PlusTile renderer.
 * @static
 * 
 * @private
 */
(function () {
    "use strict";
    
    jQuery.sap.declare("sap.ushell.ui.launchpad.PlusTileRenderer");

    /**
     * @class PlusTile renderer.
     * @static
     */
    sap.ushell.ui.launchpad.PlusTileRenderer = {};
    var translationBundle = sap.ushell.resources.i18n;

    /**
     * Renders the HTML for the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.PlusTileRenderer.render = function (oRm, oControl) {
        oRm.write("<div");
        oRm.writeAttribute("tabindex", "0");
        oRm.writeControlData(oControl);
        oRm.addClass("sapUshellTile");
        oRm.addClass("sapUshellPlusTile");
        oRm.writeClasses();
        oRm.writeAccessibilityState(oControl, {label : translationBundle.getText("TilePlus_label")});
        oRm.write(">");
        oRm.renderControl(oControl.oIcon);

        oRm.write("</div>");
    };
}());

}; // end of sap/ushell/ui/launchpad/PlusTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchResultAppItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.SearchResultAppItem.
jQuery.sap.declare("sap.ushell.ui.launchpad.SearchResultAppItem");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/SearchResultAppItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSearchTerm searchTerm} : string</li>
 * <li>{@link #getTargetUrl targetUrl} : sap.ui.core.URI</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/launchpad/SearchResultAppItem
 * @extends sap.m.Button
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultAppItem
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.launchpad.SearchResultAppItem", { metadata : {

	library : "sap.ushell",
	properties : {
		"searchTerm" : {type : "string", group : "Appearance", defaultValue : null},
		"targetUrl" : {type : "sap.ui.core.URI", group : "Behavior", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.SearchResultAppItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.SearchResultAppItem.extend
 * @function
 */


/**
 * Getter for property <code>searchTerm</code>.
 * the search term used for searching apps. Occurrences of this search term in the app title are highlighted
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>searchTerm</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultAppItem#getSearchTerm
 * @function
 */

/**
 * Setter for property <code>searchTerm</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSearchTerm  new value for property <code>searchTerm</code>
 * @return {sap.ushell.ui.launchpad.SearchResultAppItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultAppItem#setSearchTerm
 * @function
 */


/**
 * Getter for property <code>targetUrl</code>.
 * The app's target URL for navigating to the app
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>targetUrl</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultAppItem#getTargetUrl
 * @function
 */

/**
 * Setter for property <code>targetUrl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sTargetUrl  new value for property <code>targetUrl</code>
 * @return {sap.ushell.ui.launchpad.SearchResultAppItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultAppItem#setTargetUrl
 * @function
 */


// Start of sap/ushell/ui/launchpad/SearchResultAppItem.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */

    sap.ushell.ui.launchpad.SearchResultAppItem.prototype.init = function () {
        if (sap.m.Button.prototype.init) {
            sap.m.Button.prototype.init.call(this);
        }
        this.setType(sap.m.ButtonType.Transparent);
        this.attachPress(this._onPress, this);
        this.addStyleClass("sapUshellSearchResultAppItem");
    };

    sap.ushell.ui.launchpad.SearchResultAppItem.prototype.exit = function () {
        if (sap.m.Button.prototype.exit) {
            sap.m.Button.prototype.exit.call(this);
        }
        this.detachPress(this._onPress, this);
    };

    sap.ushell.ui.launchpad.SearchResultAppItem.prototype.setTargetUrl = function (sUrl) {
        this.setEnabled(!!sUrl);
        this.setProperty("targetUrl", sUrl);
        return this;
    };

    sap.ushell.ui.launchpad.SearchResultAppItem.prototype._onPress = function () {
        if (this.getTargetUrl()) {
            if (this.getTargetUrl().startsWith('#'))
                window.location = this.getTargetUrl();
            else 
                window.open(this.getTargetUrl());
        }
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchResultAppItem.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchResultAppItemRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    /*global jQuery, sap, window */
    jQuery.sap.declare("sap.ushell.ui.launchpad.SearchResultAppItemRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained


    sap.ushell.ui.launchpad.SearchResultAppItemRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Searches for occurrences of a given search term and substitutes substrings wrapped in HTML bold tag
     *
     * @param {string} sHighlightTerm an array of strings that will be detected and replaced
     * @param {string} sText contains the text to be highlighted
     * @returns {string} the text with all occurrences wrapped
     * 
     * @private
     */
    sap.ushell.ui.launchpad.SearchResultAppItemRenderer.highlight = function (sHighlightTerm, sText) {
        var regExpHighlight;
        if (sHighlightTerm) {
            // build regular expression with escaped highlight term (case insensitive + greedy)
            regExpHighlight = new RegExp("(" + sHighlightTerm.replace(/([.*+?\^=!:${}()|\[\]\/\\])/g, "\\$1") + ")", "gi");
            // regexp replace occurrence with wrapped self
            sText = sText.replace(regExpHighlight, "<b>$1</b>");
        }
        return sText;
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchResultAppItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchResultApps') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.SearchResultApps.
jQuery.sap.declare("sap.ushell.ui.launchpad.SearchResultApps");

jQuery.sap.require('sap.m.Table'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/SearchResultApps.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowGrowingTrigger showGrowingTrigger} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getResults results} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Table#constructor sap.m.Table}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A list containing all app search results
 * @extends sap.m.Table
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultApps
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Table.extend("sap.ushell.ui.launchpad.SearchResultApps", { metadata : {

	publicMethods : [
		// methods
		"resetGrowing"
	],
	library : "sap.ushell",
	properties : {
		"showGrowingTrigger" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	aggregations : {
		"results" : {type : "sap.ui.core.Control", multiple : true, singularName : "result"}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.SearchResultApps with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.SearchResultApps.extend
 * @function
 */


/**
 * Getter for property <code>showGrowingTrigger</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showGrowingTrigger</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultApps#getShowGrowingTrigger
 * @function
 */

/**
 * Setter for property <code>showGrowingTrigger</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowGrowingTrigger  new value for property <code>showGrowingTrigger</code>
 * @return {sap.ushell.ui.launchpad.SearchResultApps} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultApps#setShowGrowingTrigger
 * @function
 */


/**
 * Getter for aggregation <code>results</code>.<br/>
 * all found Applications
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultApps#getResults
 * @function
 */


/**
 * Inserts a result into the aggregation named <code>results</code>.
 *
 * @param {sap.ui.core.Control}
 *          oResult the result to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the result should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the result is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the result is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.SearchResultApps} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultApps#insertResult
 * @function
 */

/**
 * Adds some result <code>oResult</code> 
 * to the aggregation named <code>results</code>.
 *
 * @param {sap.ui.core.Control}
 *            oResult the result to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.SearchResultApps} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultApps#addResult
 * @function
 */

/**
 * Removes an result from the aggregation named <code>results</code>.
 *
 * @param {int | string | sap.ui.core.Control} vResult the result to remove or its index or id
 * @return {sap.ui.core.Control} the removed result or null
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultApps#removeResult
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>results</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultApps#removeAllResults
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>results</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oResult the result whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultApps#indexOfResult
 * @function
 */
	

/**
 * Destroys all the results in the aggregation 
 * named <code>results</code>.
 * @return {sap.ushell.ui.launchpad.SearchResultApps} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultApps#destroyResults
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.SearchResultApps#resetGrowing
 * @function
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


// Start of sap/ushell/ui/launchpad/SearchResultApps.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */

    sap.ushell.ui.launchpad.SearchResultApps.RANGESET = "SearchResultApps";
    sap.ushell.ui.launchpad.SearchResultApps._columns = {
        Phone : 1,
        Tablet : 2,
        Desktop : 3
    };

    sap.ushell.ui.launchpad.SearchResultApps.prototype.init = function () {
        if (sap.m.Table.prototype.init) {
            sap.m.Table.prototype.init.call(this);
        }
        this._internalModel = new sap.ui.model.json.JSONModel({items: []});
        this.setModel(this._internalModel, "internalModel");

        this._oColumnList = new sap.m.ColumnListItem({
            cells: {
                path: "internalModel>cells",
                factory : function (sId, oContext) {
                    return new sap.ushell.ui.launchpad.SearchResultAppItem({
                        icon: oContext.getProperty("icon"),
                        text: oContext.getProperty("text"),
                        targetUrl: oContext.getProperty("targetUrl")
                    });
                }
            }
        });
        this.bindItems({path : "internalModel>/items", template : this._oColumnList});

        sap.ui.Device.media.initRangeSet(
            sap.ushell.ui.launchpad.SearchResultApps.RANGESET,
            [500, 1024],
            "px",
            ["Phone", "Tablet", "Desktop"]
        );
        sap.ui.Device.media.attachHandler(this._handleMediaChange, this, sap.ushell.ui.launchpad.SearchResultApps.RANGESET);
    };

    sap.ushell.ui.launchpad.SearchResultApps.prototype.exit = function () {
        sap.ui.Device.media.detachHandler(this._handleMediaChange, this, sap.ushell.ui.launchpad.SearchResultApps.RANGESET);
        if (sap.m.Table.prototype.exit) {
            sap.m.Table.prototype.exit.call(this);
        }
        if (this._oColumnList) {
            this._oColumnList.destroy();
        }
    };

    sap.ushell.ui.launchpad.SearchResultApps.prototype.resetGrowing = function () {
        this._internalModel.setData({items: []});
        if (this._oGrowingDelegate) {
            this._oGrowingDelegate.reset();
        }
    };

    sap.ushell.ui.launchpad.SearchResultApps.prototype.setGrowing = function (bGrowing) {
        sap.m.Table.prototype.setGrowing.apply(this, [bGrowing]);
        if (bGrowing && this._oGrowingDelegate) {
            this._oGrowingDelegate._getTrigger = this._getTrigger;
        }
        return this;
    };

    sap.ushell.ui.launchpad.SearchResultApps.prototype._handleMediaChange = function (event) {
        this.rerender();
    };

    sap.ushell.ui.launchpad.SearchResultApps.prototype._getTrigger = function (sId) {
        if (!this._oTrigger) {
            this._oTrigger = new sap.m.CustomListItem({
                id : sId,
                visible: this._oControl.getShowGrowingTrigger(),
                content : new sap.m.Button({
                    type: sap.m.ButtonType.Transparent,
                    text: this._oControl.getGrowingTriggerText(),
                    press: [this.requestNewPage, this]
                }).addStyleClass("sapUshellSearchResultAppsGrowingTriggerBtn")
            });
            this._oTrigger
                .setParent(this._oControl, null, true)
                .addStyleClass("sapUshellSearchResultAppsGrowingTrigger");
        }
        return this._oTrigger;
    };

    sap.ushell.ui.launchpad.SearchResultApps.prototype.onBeforeRendering = function () {
        var sDevice = sap.ui.Device.media.getCurrentRange(sap.ushell.ui.launchpad.SearchResultApps.RANGESET),
            iColumns = sap.ushell.ui.launchpad.SearchResultApps._columns[sDevice.name],
            aItems = [],
            aResults = this.getResults(),
            iMaxColumns = aResults.length < iColumns ? aResults.length : iColumns,
            oLineItem,
            i,
            j;

        // reset columns
        this.destroyAggregation("columns", true);
        for (i = 0; i < iMaxColumns; i = i + 1) {
            this.addColumn(new sap.m.Column());
        }

        // build new columns from "results"
        for (i = 0; i < aResults.length; i = i + iColumns) {
            oLineItem = {cells: []};
            for (j = 0; j < iColumns; j = j + 1) {
                if (aResults[i + j]) {
                    oLineItem.cells.push({
                        icon: aResults[i + j].getIcon(),
                        text: aResults[i + j].getText(),
                        targetUrl: aResults[i + j].getTargetUrl()
                    });
                } else {
                    // fill empty columns
                    oLineItem.cells.push({});
                }
            }
            aItems.push(oLineItem);
        }

        this._internalModel.setProperty("/items", aItems);
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchResultApps.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchResultAppsRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */

    jQuery.sap.declare("sap.ushell.ui.launchpad.SearchResultAppsRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.TableRenderer'); // unlisted dependency retained


    sap.ushell.ui.launchpad.SearchResultAppsRenderer = sap.ui.core.Renderer.extend(sap.m.TableRenderer);

    sap.ushell.ui.launchpad.SearchResultAppsRenderer.renderContainerAttributes = function (rm, oControl) {
        sap.m.TableRenderer.renderContainerAttributes(rm, oControl);
        rm.addClass("sapUshellSearchResultApps");
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchResultAppsRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchSuggestionList') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.SearchSuggestionList.
jQuery.sap.declare("sap.ushell.ui.launchpad.SearchSuggestionList");

jQuery.sap.require('sap.m.List'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/SearchSuggestionList.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDisableKeyboardNavigation disableKeyboardNavigation} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.SearchSuggestionList#event:pressEsc pressEsc} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.SearchSuggestionList#event:pressUpFirstItem pressUpFirstItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.List#constructor sap.m.List}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/launchpad/SearchSuggestionList
 * @extends sap.m.List
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.List.extend("sap.ushell.ui.launchpad.SearchSuggestionList", { metadata : {

	library : "sap.ushell",
	properties : {
		"disableKeyboardNavigation" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	events : {
		"pressEsc" : {}, 
		"pressUpFirstItem" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.SearchSuggestionList with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.SearchSuggestionList.extend
 * @function
 */

sap.ushell.ui.launchpad.SearchSuggestionList.M_EVENTS = {'pressEsc':'pressEsc','pressUpFirstItem':'pressUpFirstItem'};


/**
 * Getter for property <code>disableKeyboardNavigation</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>disableKeyboardNavigation</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#getDisableKeyboardNavigation
 * @function
 */

/**
 * Setter for property <code>disableKeyboardNavigation</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisableKeyboardNavigation  new value for property <code>disableKeyboardNavigation</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#setDisableKeyboardNavigation
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#pressEsc
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'pressEsc' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#attachPressEsc
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'pressEsc' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#detachPressEsc
 * @function
 */

/**
 * Fire event pressEsc to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#firePressEsc
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#pressUpFirstItem
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'pressUpFirstItem' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#attachPressUpFirstItem
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'pressUpFirstItem' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#detachPressUpFirstItem
 * @function
 */

/**
 * Fire event pressUpFirstItem to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#firePressUpFirstItem
 * @function
 */


// Start of sap/ushell/ui/launchpad/SearchSuggestionList.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */

    
    jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained


    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.init = function (oEvent) {
        sap.m.List.prototype.init.call(this,oEvent);
        this.setShowNoData(false);
        this.setShowSeparators(sap.m.ListSeparators.Inner);

        this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
        this.oItemNavigation.attachEvent("AfterFocus", this._afterFocus);
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.exit = function (oEvent) {
        this.oItemNavigation.detachEvent("AfterFocus", this._afterFocus);
        this.oItemNavigation.destroy();
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.updateAggregation = sap.ushell.override.updateAggregation;

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.addItem = function (oItem) {
        if (oItem instanceof sap.ushell.ui.launchpad.SearchSuggestionListItem) {
            oItem.attachFocus(this._focusItem, this);
        }
        return sap.m.List.prototype.addItem.call(this, oItem);
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.removeItem = function (oItem) {
        if (oItem instanceof sap.ushell.ui.launchpad.SearchSuggestionListItem) {
            oItem.detachFocus(this._focusItem, this);
        }
        return sap.m.List.prototype.removeItem.call(this, oItem);
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.setDisableKeyboardNavigation = function (bDisabled) {
        if (bDisabled) {
            this.removeDelegate(this.oItemNavigation);
        } else {
            this.addDelegate(this.oItemNavigation);
        }

        this.setProperty("disableKeyboardNavigation", bDisabled);
        return this;
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.onsapright = function () {
        var self = this.oItemNavigation;
        self.setFocusedIndex(self.getItemDomRefs().lastIndexOf(self.getFocusedDomRef()));
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.onsapup = function (oEvent) {
        if (oEvent.srcControl === this.getItems()[0]) {
            this.removeDelegate(this.oItemNavigation);
            this.firePressUpFirstItem();
        }
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.onsapescape = function () {
        this.removeDelegate(this.oItemNavigation);
        this.firePressEsc();
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.onAfterRendering = function () {
        //Collect the dom references of the items
        var oFocusRef = this.getDomRef(),
            aDomRefs = oFocusRef.getElementsByTagName("li"),
            aItems = [],
            iMaxColumns = 0;

        // Get max number of columns in one row
        jQuery.each(aDomRefs, function (i, value) {
            var iClolumns = value.getElementsByClassName("sapUshellSearchSuggestionListItemNavItem").length;
            if (iClolumns > iMaxColumns) {
                iMaxColumns = iClolumns;
            }
        });

        // Build Grid
        jQuery.each(aDomRefs, function (i, value) {
            var oLinks = value.getElementsByClassName("sapUshellSearchSuggestionListItemNavItem"),
                j = 0;
            if (oLinks.length > 0) {
                for (j; j < iMaxColumns; j = j + 1) {
                    aItems.push(oLinks[j] || aItems[aItems.length - 1]);
                }
            }
        });

        // After each rendering the delegate needs to be initialized as well.
        this.oItemNavigation
            .setRootDomRef(oFocusRef)
            .setItemDomRefs(aItems)
            .setCycling(true)
            .setColumns(iMaxColumns)
            .setSelectedIndex(0);
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype._afterFocus = function (oEvent) {
        this.setFocusedIndex(this.getItemDomRefs().indexOf(this.getFocusedDomRef()));
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype._focusItem = function () {
        this.addDelegate(this.oItemNavigation);
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchSuggestionList.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchSuggestionListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.SearchSuggestionListItem.
jQuery.sap.declare("sap.ushell.ui.launchpad.SearchSuggestionListItem");

jQuery.sap.require('sap.m.ListItemBase'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/SearchSuggestionListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getIsGroupFooter isGroupFooter} : boolean (default: false)</li>
 * <li>{@link #getCategorySeperator categorySeperator} : string (default: '/')</li>
 * <li>{@link #getCategoryFirstSeperator categoryFirstSeperator} : string (default: '')</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getMaxCategories maxCategories} : int (default: 2)</li>
 * <li>{@link #getIsGroupHeader isGroupHeader} : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCategories categories} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.SearchSuggestionListItem#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.SearchSuggestionListItem#event:focus focus} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/launchpad/SearchSuggestionListItem
 * @extends sap.m.ListItemBase
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.ListItemBase.extend("sap.ushell.ui.launchpad.SearchSuggestionListItem", { metadata : {

	library : "sap.ushell",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"isGroupFooter" : {type : "boolean", group : "Misc", defaultValue : false},
		"categorySeperator" : {type : "string", group : "Misc", defaultValue : '/'},
		"categoryFirstSeperator" : {type : "string", group : "Misc", defaultValue : ''},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"maxCategories" : {type : "int", group : "Misc", defaultValue : 2},
		"isGroupHeader" : {type : "boolean", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"categories" : {type : "sap.ui.core.Control", multiple : true, singularName : "category"}
	},
	events : {
		"press" : {}, 
		"focus" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.SearchSuggestionListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem.extend
 * @function
 */

sap.ushell.ui.launchpad.SearchSuggestionListItem.M_EVENTS = {'press':'press','focus':'focus'};


/**
 * Getter for property <code>text</code>.
 * Suggestion text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setText
 * @function
 */


/**
 * Getter for property <code>isGroupFooter</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isGroupFooter</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getIsGroupFooter
 * @function
 */

/**
 * Setter for property <code>isGroupFooter</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsGroupFooter  new value for property <code>isGroupFooter</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setIsGroupFooter
 * @function
 */


/**
 * Getter for property <code>categorySeperator</code>.
 *
 * Default value is <code>/</code>
 *
 * @return {string} the value of property <code>categorySeperator</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getCategorySeperator
 * @function
 */

/**
 * Setter for property <code>categorySeperator</code>.
 *
 * Default value is <code>/</code> 
 *
 * @param {string} sCategorySeperator  new value for property <code>categorySeperator</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setCategorySeperator
 * @function
 */


/**
 * Getter for property <code>categoryFirstSeperator</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>categoryFirstSeperator</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getCategoryFirstSeperator
 * @function
 */

/**
 * Setter for property <code>categoryFirstSeperator</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCategoryFirstSeperator  new value for property <code>categoryFirstSeperator</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setCategoryFirstSeperator
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setIcon
 * @function
 */


/**
 * Getter for property <code>maxCategories</code>.
 *
 * Default value is <code>2</code>
 *
 * @return {int} the value of property <code>maxCategories</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getMaxCategories
 * @function
 */

/**
 * Setter for property <code>maxCategories</code>.
 *
 * Default value is <code>2</code> 
 *
 * @param {int} iMaxCategories  new value for property <code>maxCategories</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setMaxCategories
 * @function
 */


/**
 * Getter for property <code>isGroupHeader</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>isGroupHeader</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getIsGroupHeader
 * @function
 */

/**
 * Setter for property <code>isGroupHeader</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bIsGroupHeader  new value for property <code>isGroupHeader</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setIsGroupHeader
 * @function
 */


/**
 * Getter for aggregation <code>categories</code>.<br/>
 * Category Control
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getCategories
 * @function
 */


/**
 * Inserts a category into the aggregation named <code>categories</code>.
 *
 * @param {sap.ui.core.Control}
 *          oCategory the category to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the category should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the category is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the category is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#insertCategory
 * @function
 */

/**
 * Adds some category <code>oCategory</code> 
 * to the aggregation named <code>categories</code>.
 *
 * @param {sap.ui.core.Control}
 *            oCategory the category to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#addCategory
 * @function
 */

/**
 * Removes an category from the aggregation named <code>categories</code>.
 *
 * @param {int | string | sap.ui.core.Control} vCategory the category to remove or its index or id
 * @return {sap.ui.core.Control} the removed category or null
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#removeCategory
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>categories</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#removeAllCategories
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>categories</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oCategory the category whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#indexOfCategory
 * @function
 */
	

/**
 * Destroys all the categories in the aggregation 
 * named <code>categories</code>.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#destroyCategories
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#firePress
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#focus
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'focus' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#attachFocus
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'focus' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#detachFocus
 * @function
 */

/**
 * Fire event focus to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#fireFocus
 * @function
 */


// Start of sap/ushell/ui/launchpad/SearchSuggestionListItem.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */

    

    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.addCategory = function (oCategory) {
        this.addAggregation("categories", oCategory);

        oCategory.addEventDelegate({
            onmouseover: this._focusCategory
        }, this);
        oCategory.addEventDelegate({
            onsapenter: this.onsapenter
        }, oCategory);
        return this;
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.setActive = function (oEvent) {
        return this;
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.updateAggregation = sap.ushell.override.updateAggregation;


    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.firePress = function (oEvent) {
        if (!this.getIsGroupFooter()) {
            sap.m.ListItemBase.prototype.firePress.call(this);
        }
    };


    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.onmouseover = function (oEvent) {
        if (jQuery(oEvent.target).hasClass('sapUshellSearchSuggestionListItemNavItem')) {
            this.focus();
            this.fireFocus();
        }
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.onsapenter = function () {
        this.firePress();
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.getFocusDomRef = function () {
        return (this.getDomRef() && this.getDomRef().getElementsByClassName("sapUshellSearchSuggestionListItemNavItem")[0]) || null;
    };


    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype._focusCategory = function (oEvent) {
        oEvent.srcControl.focus();
        oEvent.preventDefault();
        oEvent.stopPropagation();
        this.fireFocus();
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchSuggestionListItem.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    jQuery.sap.declare("sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ListItemBaseRenderer'); // unlisted dependency retained


    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLIAttributes = function (rm, oLI) {
        rm.addClass("sapUshellSearchSuggestionListItem");
        if (oLI.getIsGroupFooter()) {
            rm.addClass("sapUshellSearchSuggestionListItemGroupFooter");
        }
        if (oLI.getIsGroupHeader()) {
            rm.addClass("sapMGHLI sapMGHLIUpperCase sapMLIBTypeInactive sapMListHdr");
        }
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLIContent = function (rm, oLI) {
        var aCategories = oLI.getCategories();

        if (oLI.getIsGroupHeader()) {
            this.renderLIGroupHeader(rm, oLI);
        } else if (oLI.getIsGroupFooter()) {
            this.renderLIGroupFooter(rm, oLI);
        } else if (oLI.getText()) {
            if (oLI.getIcon()) {
                this.renderLIIcon(rm, oLI);
            }
            this.renderLIText(rm, oLI);
        }

        if (aCategories.length > 0) {
            this.renderLICategories(rm, oLI, aCategories);
        }
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLIIcon = function (rm, oLI) {
        rm.write("<div");
        rm.addClass("sapUshellSearchSuggestionListItemIcon");
        rm.writeClasses();
        rm.write(">");
        rm.renderControl(new sap.ui.core.Icon({src: oLI.getIcon()}));
        rm.write('</div>');
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLIGroupHeader = function (rm, oLI) {
        rm.write("<label");
        rm.addClass("sapMGHLITitle");
        rm.writeClasses();
        rm.write(">");
        rm.writeEscaped(oLI.getText());
        rm.write('</label>');
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLIGroupFooter = function (rm, oLI) {
        rm.write("<span>");
        rm.writeEscaped(oLI.getText());
        rm.write('</span>');
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLIText = function (rm, oLI) {
        rm.write("<div");
        rm.addClass("sapUshellSearchSuggestionListItemText");
        rm.writeClasses();
        rm.write(">");

        rm.write("<a");
        rm.addClass("sapUshellSearchSuggestionListItemNavItem");
        rm.writeClasses();
        rm.write("style='display: inline-block;' tabindex='0'>");

        rm.write(oLI.getText());

        rm.write('</a>');
        rm.write('</div>');
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLICategories = function (rm, oLI, aCategories) {
        var iMaxCatToDisplay = oLI.getMaxCategories(),
            iCatToDisplay = aCategories.length < iMaxCatToDisplay ? aCategories.length : iMaxCatToDisplay,
            i;

        rm.write("<div");
        rm.addClass("sapUshellSearchSuggestionListItemCategory");
        rm.writeClasses();
        rm.write(">");

        this.renderLICategoryFirstSeperator(rm, oLI);
        for (i = 0; i < iCatToDisplay; i = i + 1) {
            rm.renderControl(aCategories[i].addStyleClass("sapUshellSearchSuggestionListItemNavItem"));
            if ((i + 1) < iCatToDisplay) {
                this.renderLICategorySeperator(rm, oLI);
            }
        }

        rm.write('</div>');
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLICategoryFirstSeperator = function (rm, oLI) {
        rm.write("<div");
        rm.addClass("sapUshellSearchSuggestionListItemCategoryFirstSeperator");
        rm.writeClasses();
        rm.write(">");
        rm.writeEscaped(oLI.getCategoryFirstSeperator());
        rm.write('</div>');
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLICategorySeperator = function (rm, oLI) {
        rm.write("<div");
        rm.addClass("sapUshellSearchSuggestionListItemCategorySeperator");
        rm.writeClasses();
        rm.write(">");
        rm.writeEscaped(oLI.getCategorySeperator());
        rm.write('</div>');
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchSuggestionListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchSuggestionListRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */

    jQuery.sap.declare("sap.ushell.ui.launchpad.SearchSuggestionListRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ListRenderer'); // unlisted dependency retained


    sap.ushell.ui.launchpad.SearchSuggestionListRenderer = sap.ui.core.Renderer.extend(sap.m.ListRenderer);

    sap.ushell.ui.launchpad.SearchSuggestionListRenderer.renderContainerAttributes = function (rm, oControl) {
        rm.addClass("sapUshellSearchSuggestionList");
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchSuggestionListRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.Tile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.Tile.
jQuery.sap.declare("sap.ushell.ui.launchpad.Tile");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/Tile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTall tall} : boolean (default: false)</li>
 * <li>{@link #getLong long} : boolean (default: false)</li>
 * <li>{@link #getUuid uuid} : string</li>
 * <li>{@link #getTarget target} : string</li>
 * <li>{@link #getDraggable draggable} : boolean (default: false)</li>
 * <li>{@link #getDragContainer dragContainer} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDebugInfo debugInfo} : string</li>
 * <li>{@link #getRgba rgba} : string</li>
 * <li>{@link #getAnimationRendered animationRendered} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTileViews tileViews} : sap.ui.core.Control[]</li>
 * <li>{@link #getFootItems footItems} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.Tile#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.Tile#event:dragStart dragStart} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.Tile#event:dragStop dragStop} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.Tile#event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A tile to be displayed in the tile container. This tile acts as container for specialized tile implementations.
 * @extends sap.ui.core.Control
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.Tile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.ushell.ui.launchpad.Tile", { metadata : {

	library : "sap.ushell",
	properties : {
		"tall" : {type : "boolean", group : "Misc", defaultValue : false},
		"long" : {type : "boolean", group : "Misc", defaultValue : false},
		"uuid" : {type : "string", group : "Misc", defaultValue : null},
		"target" : {type : "string", group : "Misc", defaultValue : null},
		"draggable" : {type : "boolean", group : "Misc", defaultValue : false},
		"dragContainer" : {type : "string", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "Misc", defaultValue : true},
		"debugInfo" : {type : "string", group : "Misc", defaultValue : null},
		"rgba" : {type : "string", group : "Misc", defaultValue : null},
		"animationRendered" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	aggregations : {
		"tileViews" : {type : "sap.ui.core.Control", multiple : true, singularName : "tileView"}, 
		"footItems" : {type : "sap.ui.core.Control", multiple : true, singularName : "footItem"}
	},
	events : {
		"press" : {}, 
		"dragStart" : {}, 
		"dragStop" : {}, 
		"afterRendering" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.Tile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.Tile.extend
 * @function
 */

sap.ushell.ui.launchpad.Tile.M_EVENTS = {'press':'press','dragStart':'dragStart','dragStop':'dragStop','afterRendering':'afterRendering'};


/**
 * Getter for property <code>tall</code>.
 * Whether tile spans more than one row
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>tall</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getTall
 * @function
 */

/**
 * Setter for property <code>tall</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bTall  new value for property <code>tall</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setTall
 * @function
 */


/**
 * Getter for property <code>long</code>.
 * Whether tile spans more than one column
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>long</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getLong
 * @function
 */

/**
 * Setter for property <code>long</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bLong  new value for property <code>long</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setLong
 * @function
 */


/**
 * Getter for property <code>uuid</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>uuid</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getUuid
 * @function
 */

/**
 * Setter for property <code>uuid</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUuid  new value for property <code>uuid</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setUuid
 * @function
 */


/**
 * Getter for property <code>target</code>.
 * Hyperlink target
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>target</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getTarget
 * @function
 */

/**
 * Setter for property <code>target</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTarget  new value for property <code>target</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setTarget
 * @function
 */


/**
 * Getter for property <code>draggable</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>draggable</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getDraggable
 * @function
 */

/**
 * Setter for property <code>draggable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDraggable  new value for property <code>draggable</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setDraggable
 * @function
 */


/**
 * Getter for property <code>dragContainer</code>.
 * jQuery selector specifying where drag helper is appended to.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>dragContainer</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getDragContainer
 * @function
 */

/**
 * Setter for property <code>dragContainer</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDragContainer  new value for property <code>dragContainer</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setDragContainer
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setVisible
 * @function
 */


/**
 * Getter for property <code>debugInfo</code>.
 * Technical information about the tile which is logged when the tile is clicked
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>debugInfo</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getDebugInfo
 * @function
 */

/**
 * Setter for property <code>debugInfo</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDebugInfo  new value for property <code>debugInfo</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setDebugInfo
 * @function
 */


/**
 * Getter for property <code>rgba</code>.
 * the RGBA value of the tile
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>rgba</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getRgba
 * @function
 */

/**
 * Setter for property <code>rgba</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sRgba  new value for property <code>rgba</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setRgba
 * @function
 */


/**
 * Getter for property <code>animationRendered</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>animationRendered</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getAnimationRendered
 * @function
 */

/**
 * Setter for property <code>animationRendered</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bAnimationRendered  new value for property <code>animationRendered</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setAnimationRendered
 * @function
 */


/**
 * Getter for aggregation <code>tileViews</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getTileViews
 * @function
 */


/**
 * Inserts a tileView into the aggregation named <code>tileViews</code>.
 *
 * @param {sap.ui.core.Control}
 *          oTileView the tileView to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the tileView should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the tileView is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the tileView is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#insertTileView
 * @function
 */

/**
 * Adds some tileView <code>oTileView</code> 
 * to the aggregation named <code>tileViews</code>.
 *
 * @param {sap.ui.core.Control}
 *            oTileView the tileView to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#addTileView
 * @function
 */

/**
 * Removes an tileView from the aggregation named <code>tileViews</code>.
 *
 * @param {int | string | sap.ui.core.Control} vTileView the tileView to remove or its index or id
 * @return {sap.ui.core.Control} the removed tileView or null
 * @public
 * @name sap.ushell.ui.launchpad.Tile#removeTileView
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>tileViews</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.Tile#removeAllTileViews
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>tileViews</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oTileView the tileView whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.Tile#indexOfTileView
 * @function
 */
	

/**
 * Destroys all the tileViews in the aggregation 
 * named <code>tileViews</code>.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#destroyTileViews
 * @function
 */


/**
 * Getter for aggregation <code>footItems</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getFootItems
 * @function
 */


/**
 * Inserts a footItem into the aggregation named <code>footItems</code>.
 *
 * @param {sap.ui.core.Control}
 *          oFootItem the footItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the footItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the footItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the footItem is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#insertFootItem
 * @function
 */

/**
 * Adds some footItem <code>oFootItem</code> 
 * to the aggregation named <code>footItems</code>.
 *
 * @param {sap.ui.core.Control}
 *            oFootItem the footItem to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#addFootItem
 * @function
 */

/**
 * Removes an footItem from the aggregation named <code>footItems</code>.
 *
 * @param {int | string | sap.ui.core.Control} vFootItem the footItem to remove or its index or id
 * @return {sap.ui.core.Control} the removed footItem or null
 * @public
 * @name sap.ushell.ui.launchpad.Tile#removeFootItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>footItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.Tile#removeAllFootItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>footItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oFootItem the footItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.Tile#indexOfFootItem
 * @function
 */
	

/**
 * Destroys all the footItems in the aggregation 
 * named <code>footItems</code>.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#destroyFootItems
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.Tile#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.Tile#firePress
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.Tile#dragStart
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'dragStart' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#attachDragStart
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'dragStart' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#detachDragStart
 * @function
 */

/**
 * Fire event dragStart to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.Tile#fireDragStart
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.Tile#dragStop
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'dragStop' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#attachDragStop
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'dragStop' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#detachDragStop
 * @function
 */

/**
 * Fire event dragStop to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.Tile#fireDragStop
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.Tile#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#attachAfterRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#detachAfterRendering
 * @function
 */

/**
 * Fire event afterRendering to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.Tile#fireAfterRendering
 * @function
 */


// Start of sap/ushell/ui/launchpad/Tile.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/
/**
 * @name sap.ushell.ui.launchpad.Tile
 *
 * @private
 */
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true*/

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-core'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-widget'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-mouse'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-draggable'); // unlisted dependency retained

    

    sap.ushell.ui.launchpad.Tile.prototype.ontap = function (event, ui) {
        // dump debug info when tile is clicked
        jQuery.sap.log.info(
            "Tile clicked:",
            this.getDebugInfo(),
            "sap.ushell.ui.launchpad.Tile"
        );

        // NOTE: for now, the on press animation is not used, as it caused too much
        // confusion
        return;
        var oSrc = event.srcElement,
            bIsInFooter = true,
            i,
            fTimeoutHelper = function () {
                var fHelper2 = function () {
                    this.toggleStyleClass("sapUshellTileHide", false);
                };
                this.toggleStyleClass("sapUshellTileHide", true);
                this.toggleStyleClass("sapUshellTileTapped", false);
                window.setTimeout(jQuery.proxy(fHelper2, this), 800);
            };
        // we do not need to support animations for phones and if the browser does not support it
        if (sap.ui.Device.system.phone || !jQuery.support.cssAnimations) {
            return;
        }
        // workaround: check whether the clicked source element is within the main section of the tile (i.e. in sapUshellTileInner)
        // If a parent is outside, e.g. in the footer (Catalog view), we suppress the animation
        for (i = 0; i < 6; i = i + 1) {
            if (jQuery(oSrc) && (jQuery(oSrc).hasClass("sapUshellTileInner") || jQuery(oSrc).hasClass("sapUshellPlusTile"))) {
                bIsInFooter = false;
                break;
            }
            // go up one level
            oSrc = jQuery(oSrc).parent();
        }
        if (bIsInFooter) {
            // the tapped item is the footer button or something not within the tile - ignore
            return;
        }
        this.toggleStyleClass("sapUshellTileTapped", true);
        window.setTimeout(jQuery.proxy(fTimeoutHelper, this), 1000);
    };

    sap.ushell.ui.launchpad.Tile.prototype.destroy = function (bSuppressInvalidate) {
        this.destroyTileViews();
        sap.ui.core.Control.prototype.destroy.call(this, bSuppressInvalidate);
    };

    sap.ushell.ui.launchpad.Tile.prototype.addTileView = function (oObject, bSuppressInvalidate) {
        // Workaround for a problem in addAggregation. If a child is added to its current parent again,
        // it is actually removed from the aggregation. Prevent this by removing it from its parent first.
        oObject.setParent(null);
        sap.ui.base.ManagedObject.prototype.addAggregation.call(this, "tileViews", oObject, bSuppressInvalidate);
    };

    sap.ushell.ui.launchpad.Tile.prototype.destroyTileViews = function () {
        // Don't delete the tileViews when destroying the aggregation. They are stored in the model and must be handled manually.
        if (this.mAggregations["tileViews"]) {
            this.mAggregations["tileViews"].length = 0;
        }
    };

    sap.ushell.ui.launchpad.Tile.prototype.exit = function () {
        if (this.getDraggable()) {
            this._setDraggable(false);
        }
    };

    sap.ushell.ui.launchpad.Tile.prototype.onBeforeRendering = function () {
        if (this.getDraggable()) {
            this._setDraggable(false);
        }
    };

    sap.ushell.ui.launchpad.Tile.prototype.onAfterRendering = function () {
        if (this.getDraggable()) {
            this._setDraggable(true);
        }

        var sRGBAvalue = this.getRgba();
        if (sRGBAvalue) {
            this._redrawRGBA();
        }
        this.fireAfterRendering();
    };

    sap.ushell.ui.launchpad.Tile.prototype.onsapenter = function () {
        this.firePress({
            id : this.getId()
        });
    };

    sap.ushell.ui.launchpad.Tile.prototype.onsapspace = function () {
        this.firePress({
            id : this.getId()
        });
    };

    //jQuery events
    sap.ushell.ui.launchpad.Tile.prototype._handleDragStart = function (event, ui) {
        this.fireDragStart();
    };

    sap.ushell.ui.launchpad.Tile.prototype._handleDragStop = function (event, ui) {
        this.fireDragStop();
    };

    // override setters
    sap.ushell.ui.launchpad.Tile.prototype.setDraggable = function (bDraggable) {
        this.setProperty("draggable", bDraggable, true); // suppress rerendering
        this._setDraggable(bDraggable);
        return this;
    };

    sap.ushell.ui.launchpad.Tile.prototype.setVisible = function (bVisible) {
        this.setProperty("visible", bVisible, true); // suppress rerendering
        return this.toggleStyleClass("sapUshellHidden", !bVisible);
    };

    sap.ushell.ui.launchpad.Tile.prototype.setRgba = function (sValue) {
        this.setProperty("rgba", sValue, true); // suppress re-rendering
        this._redrawRGBA(arguments);
    };

    sap.ushell.ui.launchpad.Tile.prototype.setAnimationRendered = function (bVal) {
        this.setProperty('animationRendered', bVal, true); // suppress re-rendering
    };

    sap.ushell.ui.launchpad.Tile.prototype._handleTileShadow = function (jqTile, args) {
        jqTile.unbind('mouseenter mouseleave');
        var updatedShadowColor = this.getRgba();
        jqTile.hover(

            function () {
                var sOriginalTileShadow = jQuery(jqTile).css('box-shadow'),
                    sTitleShadowDimension = sOriginalTileShadow ? sOriginalTileShadow.split(') ')[1] : null,
                    sUpdatedTileShadow;

                if (sTitleShadowDimension) {
                    sUpdatedTileShadow = sTitleShadowDimension + " " + updatedShadowColor;
                    jQuery(this).css('box-shadow', sUpdatedTileShadow);
                }
            },
            function () {
                jQuery(this).css('box-shadow', '');
            }
        );
    };

    sap.ushell.ui.launchpad.Tile.prototype._redrawRGBA = function (args) {
        var sRGBAvalue = this.getRgba();

        if (sRGBAvalue) {
            var jqTile = jQuery.sap.byId(this.getId()),
                bIsIE9 = (jQuery.browser.msie && (parseInt(jQuery.browser.version, 9) === 9));

            //In case this method is called before the tile was rendered
            if (!jqTile) {
                return;
            }

            if (!this.getModel().getProperty('/animationRendered')) {
                // If IE9
                if (bIsIE9) {
                    jqTile.animate({backgroundColor: sRGBAvalue}, 2000);
                } else {
                    jqTile.css('transition', 'background-color 2s');
                    jqTile.css('background-color', sRGBAvalue);
                }
            } else {
                jqTile.css('background-color', sRGBAvalue);
            }
            this._handleTileShadow(jqTile, args);
        }
    };

    sap.ushell.ui.launchpad.Tile.prototype.setLong = function (bLong) {
        this.setProperty("long", bLong, true); // suppress rerendering
        return this.toggleStyleClass("sapUshellLong", bLong);
    };

    sap.ushell.ui.launchpad.Tile.prototype.setTall = function (bTall) {
        this.setProperty("tall", bTall, true); // suppress rerendering
        return this.toggleStyleClass("sapUshellTall", bTall);
    };

    sap.ushell.ui.launchpad.Tile.prototype.setUuid = function (sUuid) {
        this.setProperty("uuid", sUuid, true); // suppress rerendering
        return this;
    };

    /**
     *@private
     */
    sap.ushell.ui.launchpad.Tile.prototype._setDraggable = function (bDraggable) {
        if (this.getDomRef()) {
            if (bDraggable) {
                this.$().draggable({
                    containment : "window",
                    handle : ".sapUshellTileInner",
                    helper : function () {
                        var clone = jQuery(this).clone();
                        clone.removeClass('sapUshellTileFooter');
                        clone.find('.sapUshellTileFooterElement').remove();
                        clone.css("margin", 0);
                        return clone;
                    },
                    appendTo: this.getDragContainer() || "body",
                    opacity : 0.5,
                    delay: 200,
                    zIndex: 100,
                    scroll: false
                }).bind("dragstart", jQuery.proxy(this._handleDragStart, this))
                    .bind("dragstop", jQuery.proxy(this._handleDragStop, this));
            } else {
                if (this.$().hasClass("ui-draggable")) {
                    this.$().unbind("dragstart", this._handleDragStart)
                         .unbind("dragstop", this._handleDragStop)
                         .draggable("destroy");
                }
            }
        }
    };

}());
}; // end of sap/ushell/ui/launchpad/Tile.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.TileContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.TileContainer.
jQuery.sap.declare("sap.ushell.ui.launchpad.TileContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/TileContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getScrollType scrollType} : string (default: 'item')</li>
 * <li>{@link #getAnimationSpeed animationSpeed} : int (default: 500)</li>
 * <li>{@link #getGroupId groupId} : string</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getShowPlaceholder showPlaceholder} : boolean (default: true)</li>
 * <li>{@link #getDefaultGroup defaultGroup} : boolean (default: false)</li>
 * <li>{@link #getHeaderText headerText} : string</li>
 * <li>{@link #getHeaderLevel headerLevel} : sap.m.HeaderLevel (default: sap.m.HeaderLevel.H2)</li>
 * <li>{@link #getGroupHeaderLevel groupHeaderLevel} : sap.m.HeaderLevel (default: sap.m.HeaderLevel.H4)</li>
 * <li>{@link #getShowGroupHeader showGroupHeader} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getSortable sortable} : boolean (default: true)</li>
 * <li>{@link #getShowNoData showNoData} : boolean (default: false)</li>
 * <li>{@link #getNoDataText noDataText} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTiles tiles} : sap.ushell.ui.launchpad.Tile[]</li>
 * <li>{@link #getFooterContent footerContent} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.TileContainer#event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.TileContainer#event:add add} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A container that arranges Tile controls.
 * @extends sap.ui.core.Control
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.ushell.ui.launchpad.TileContainer", { metadata : {

	library : "sap.ushell",
	properties : {
		"scrollType" : {type : "string", group : "Misc", defaultValue : 'item'},
		"animationSpeed" : {type : "int", group : "Misc", defaultValue : 500},
		"groupId" : {type : "string", group : "Misc", defaultValue : null},
		"showHeader" : {type : "boolean", group : "Misc", defaultValue : true},
		"showPlaceholder" : {type : "boolean", group : "Misc", defaultValue : true},
		"defaultGroup" : {type : "boolean", group : "Misc", defaultValue : false},
		"headerText" : {type : "string", group : "Misc", defaultValue : null},
		"headerLevel" : {type : "sap.m.HeaderLevel", group : "Misc", defaultValue : sap.m.HeaderLevel.H2},
		"groupHeaderLevel" : {type : "sap.m.HeaderLevel", group : "Misc", defaultValue : sap.m.HeaderLevel.H4},
		"showGroupHeader" : {type : "boolean", group : "Misc", defaultValue : true},
		"visible" : {type : "boolean", group : "Misc", defaultValue : true},
		"sortable" : {type : "boolean", group : "Misc", defaultValue : true},
		"showNoData" : {type : "boolean", group : "Misc", defaultValue : false},
		"noDataText" : {type : "string", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"tiles" : {type : "sap.ushell.ui.launchpad.Tile", multiple : true, singularName : "tile"}, 
		"footerContent" : {type : "sap.ui.core.Control", multiple : true, singularName : "footerContent"}
	},
	events : {
		"afterRendering" : {}, 
		"add" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.TileContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.TileContainer.extend
 * @function
 */

sap.ushell.ui.launchpad.TileContainer.M_EVENTS = {'afterRendering':'afterRendering','add':'add'};


/**
 * Getter for property <code>scrollType</code>.
 *
 * Default value is <code>item</code>
 *
 * @return {string} the value of property <code>scrollType</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getScrollType
 * @function
 */

/**
 * Setter for property <code>scrollType</code>.
 *
 * Default value is <code>item</code> 
 *
 * @param {string} sScrollType  new value for property <code>scrollType</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setScrollType
 * @function
 */


/**
 * Getter for property <code>animationSpeed</code>.
 * Animation Speed in milliseconds (ms)
 *
 * Default value is <code>500</code>
 *
 * @return {int} the value of property <code>animationSpeed</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getAnimationSpeed
 * @function
 */

/**
 * Setter for property <code>animationSpeed</code>.
 *
 * Default value is <code>500</code> 
 *
 * @param {int} iAnimationSpeed  new value for property <code>animationSpeed</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setAnimationSpeed
 * @function
 */


/**
 * Getter for property <code>groupId</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>groupId</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getGroupId
 * @function
 */

/**
 * Setter for property <code>groupId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sGroupId  new value for property <code>groupId</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setGroupId
 * @function
 */


/**
 * Getter for property <code>showHeader</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getShowHeader
 * @function
 */

/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setShowHeader
 * @function
 */


/**
 * Getter for property <code>showPlaceholder</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showPlaceholder</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getShowPlaceholder
 * @function
 */

/**
 * Setter for property <code>showPlaceholder</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowPlaceholder  new value for property <code>showPlaceholder</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setShowPlaceholder
 * @function
 */


/**
 * Getter for property <code>defaultGroup</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>defaultGroup</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getDefaultGroup
 * @function
 */

/**
 * Setter for property <code>defaultGroup</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDefaultGroup  new value for property <code>defaultGroup</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setDefaultGroup
 * @function
 */


/**
 * Getter for property <code>headerText</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>headerText</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getHeaderText
 * @function
 */

/**
 * Setter for property <code>headerText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeaderText  new value for property <code>headerText</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setHeaderText
 * @function
 */


/**
 * Getter for property <code>headerLevel</code>.
 *
 * Default value is <code>H2</code>
 *
 * @return {sap.m.HeaderLevel} the value of property <code>headerLevel</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getHeaderLevel
 * @function
 */

/**
 * Setter for property <code>headerLevel</code>.
 *
 * Default value is <code>H2</code> 
 *
 * @param {sap.m.HeaderLevel} oHeaderLevel  new value for property <code>headerLevel</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setHeaderLevel
 * @function
 */


/**
 * Getter for property <code>groupHeaderLevel</code>.
 * Header level (H1-H6) used for headers of tile groups.
 *
 * Default value is <code>H4</code>
 *
 * @return {sap.m.HeaderLevel} the value of property <code>groupHeaderLevel</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getGroupHeaderLevel
 * @function
 */

/**
 * Setter for property <code>groupHeaderLevel</code>.
 *
 * Default value is <code>H4</code> 
 *
 * @param {sap.m.HeaderLevel} oGroupHeaderLevel  new value for property <code>groupHeaderLevel</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setGroupHeaderLevel
 * @function
 */


/**
 * Getter for property <code>showGroupHeader</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showGroupHeader</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getShowGroupHeader
 * @function
 */

/**
 * Setter for property <code>showGroupHeader</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowGroupHeader  new value for property <code>showGroupHeader</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setShowGroupHeader
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setVisible
 * @function
 */


/**
 * Getter for property <code>sortable</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>sortable</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getSortable
 * @function
 */

/**
 * Setter for property <code>sortable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bSortable  new value for property <code>sortable</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setSortable
 * @function
 */


/**
 * Getter for property <code>showNoData</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showNoData</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getShowNoData
 * @function
 */

/**
 * Setter for property <code>showNoData</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowNoData  new value for property <code>showNoData</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setShowNoData
 * @function
 */


/**
 * Getter for property <code>noDataText</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>noDataText</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getNoDataText
 * @function
 */

/**
 * Setter for property <code>noDataText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNoDataText  new value for property <code>noDataText</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setNoDataText
 * @function
 */


/**
 * Getter for aggregation <code>tiles</code>.<br/>
 * 
 * @return {sap.ushell.ui.launchpad.Tile[]}
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getTiles
 * @function
 */


/**
 * Inserts a tile into the aggregation named <code>tiles</code>.
 *
 * @param {sap.ushell.ui.launchpad.Tile}
 *          oTile the tile to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the tile should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the tile is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the tile is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#insertTile
 * @function
 */

/**
 * Adds some tile <code>oTile</code> 
 * to the aggregation named <code>tiles</code>.
 *
 * @param {sap.ushell.ui.launchpad.Tile}
 *            oTile the tile to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#addTile
 * @function
 */

/**
 * Removes an tile from the aggregation named <code>tiles</code>.
 *
 * @param {int | string | sap.ushell.ui.launchpad.Tile} vTile the tile to remove or its index or id
 * @return {sap.ushell.ui.launchpad.Tile} the removed tile or null
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeTile
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>tiles</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ushell.ui.launchpad.Tile[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeAllTiles
 * @function
 */

/**
 * Checks for the provided <code>sap.ushell.ui.launchpad.Tile</code> in the aggregation named <code>tiles</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ushell.ui.launchpad.Tile}
 *            oTile the tile whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#indexOfTile
 * @function
 */
	

/**
 * Destroys all the tiles in the aggregation 
 * named <code>tiles</code>.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#destroyTiles
 * @function
 */


/**
 * Getter for aggregation <code>footerContent</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getFooterContent
 * @function
 */


/**
 * Inserts a footerContent into the aggregation named <code>footerContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oFooterContent the footerContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the footerContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the footerContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the footerContent is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#insertFooterContent
 * @function
 */

/**
 * Adds some footerContent <code>oFooterContent</code> 
 * to the aggregation named <code>footerContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oFooterContent the footerContent to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#addFooterContent
 * @function
 */

/**
 * Removes an footerContent from the aggregation named <code>footerContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vFooterContent the footerContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed footerContent or null
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeFooterContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>footerContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeAllFooterContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>footerContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oFooterContent the footerContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#indexOfFooterContent
 * @function
 */
	

/**
 * Destroys all the footerContent in the aggregation 
 * named <code>footerContent</code>.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#destroyFooterContent
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.TileContainer#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#attachAfterRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#detachAfterRendering
 * @function
 */

/**
 * Fire event afterRendering to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.TileContainer#fireAfterRendering
 * @function
 */


/**
 * Event fired when placeholder is clicked
 *
 * @name sap.ushell.ui.launchpad.TileContainer#add
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'add' event of this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/> itself. 
 *  
 * Event fired when placeholder is clicked
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#attachAdd
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'add' event of this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#detachAdd
 * @function
 */

/**
 * Fire event add to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.TileContainer#fireAdd
 * @function
 */


// Start of sap/ushell/ui/launchpad/TileContainer.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/
/**
 * @name sap.ushell.ui.launchpad.TileContainer
 *
 * @private
 */

(function () {
    "use strict";
    

    sap.ushell.ui.launchpad.TileContainer.prototype.init = function () {
        jQuery.sap.require("sap.ushell.ui.launchpad.PlusTile");

        this.oPlusTile = new sap.ushell.ui.launchpad.PlusTile({
            groupId : this.getGroupId(),
            press : [ this.fireAdd, this ]
        });
        this.oPlusTile.setParent(this);
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.exit = function () {
        if (this.oPlusTile) {
            this.oPlusTile.destroy();
        }
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.onAfterRendering = function () {
        this.setVisible();
        this.fireAfterRendering();
    };

    // Improve handling of aggregation updates
    sap.ushell.ui.launchpad.TileContainer.prototype.updateAggregation = sap.ushell.override.updateAggregation;
    sap.ushell.ui.launchpad.TileContainer.prototype.updateTiles = function (sReason) {
        var sName = "tiles";
        if (this.isTreeBinding(sName)) {
            // no idea how to handle -> delegate to parent
            sap.ui.base.ManagedObject.prototype.updateAggregation.apply(this, arguments);
        } else {
            jQuery.sap.log.debug("Updating TileContainer. Reason: ", sReason);
            switch (sReason) {
            case "filter":
                try {
                    this.filterTiles(); // may fail if filter broadens after non-filter update
                } catch (ex) {
                    this.updateAggregation(sName);
                }
                break;
            default:
                this.updateAggregation(sName);
            }
        }
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.handleNoItemsToDisplayMessage = function (isVisibleTiles) {
//        display noFilteredItems and clear the text when
        if (isVisibleTiles) {
            this.setNoDataText('');
            this.$().find(".sapUshellNoFilteredItems").removeAttr("tabindex");
        } else {
            if (this.getShowNoData()) {
                if (this.getNoDataText()) {
                    this.setNoDataText(this.getNoDataText());
                } else {
                    this.setNoDataText(sap.ushell.resources.i18n.getText("noFilteredItems"));
                }
                this.$().find(".sapUshellNoFilteredItems").attr("tabindex", 0);
            }
        }
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.createMissingElementsInOnScreenElements = function (indexingMaps, elementsToDisplay, indexSearchMissingFilteredElem, bGrouped, aSorters, oBindingInfo, fnaddNewItem, fnAddTileGroup) {
        var path,
            oNewGroup = null,
            sGroup = null,
            j = indexSearchMissingFilteredElem,
            bShowGroupHeader = this.getShowGroupHeader(),
            elementsToDisplayLength = elementsToDisplay.length;

        for (j = indexSearchMissingFilteredElem; j < elementsToDisplayLength; j++) {
            path = elementsToDisplay[j].getPath();
            //is aBindingContexts[j] not displayed
            if (!indexingMaps.onScreenPathIndexMap[path]) {
                //entry does not exist and should be displayed.
                var oGroupHeader;
                if (bGrouped && aSorters.length > 0) {
                    oNewGroup = aSorters[0].fnGroup(elementsToDisplay[j]);
                    if (typeof oNewGroup === "string") {
                        oNewGroup = {
                            key: oNewGroup
                        };
                    }
                    if (sGroup === null && j > 0) {
                        sGroup = aSorters[0].fnGroup(elementsToDisplay[j - 1]);
                    }

                    //delete the sGroup logic, check only if not in indexingMaps.onScreenHeaders[oNewGroup.key].
                    if (oNewGroup.key !== sGroup) {
                        if (oBindingInfo.groupHeaderFactory) {
                            oGroupHeader = oBindingInfo.groupHeaderFactory(oNewGroup);
                        }

                        if(!indexingMaps.onScreenHeaders[oNewGroup.key]) {
                        	fnAddTileGroup(oNewGroup, oGroupHeader);
                            indexingMaps.onScreenHeaders[oNewGroup.key] = {aItemsRefrenceIndex: this.getTiles().length - 1, isVisible: bShowGroupHeader};
                    	}
                        sGroup = oNewGroup.key;
                    }
                }
                fnaddNewItem(elementsToDisplay[j]);
                indexingMaps.onScreenPathIndexMap[path] = {aItemsRefrenceIndex: this.getTiles().length - 1, isVisible: true};
            } else {
                //order problem needs to refresh.
                throw true;
            }
        }
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.addNewItem = function (elementToDisplay) {
        var sName = "tiles",
            oAggregationInfo = this.getMetadata().getJSONKeys()[sName],
            oBindingInfo = this.mBindingInfos[sName],
            fnFactory = oBindingInfo.factory,
            addNewItem = $.proxy(function (oContext) {
                var sId = this.getId() + "-" + jQuery.sap.uid(),
                    oClone = fnFactory(sId, oContext);
                oClone.setBindingContext(oContext, oBindingInfo.model);
                this[oAggregationInfo._sMutator](oClone);
            }, this);

        addNewItem(elementToDisplay);
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.markVisibleOnScreenElements = function (elementsToDisplay, indexingMaps) {
        var indexSearchMissingFilteredElem = 0,
            path,
            elementsToDisplayLength = elementsToDisplay.length;

        for (indexSearchMissingFilteredElem = 0; indexSearchMissingFilteredElem < elementsToDisplayLength; indexSearchMissingFilteredElem++) {
            path = elementsToDisplay[indexSearchMissingFilteredElem].getPath();
            //is aBindingContexts[j] not displayed
            if (indexingMaps.onScreenPathIndexMap[path]) {
                //entry exists and should be display.
                indexingMaps.onScreenPathIndexMap[path].isVisible = true;
            } else {
                return indexSearchMissingFilteredElem;
            }
        }

        return indexSearchMissingFilteredElem;
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.indexOnScreenElements = function (onScreenItems) {
        var path,
            indexOnScreen,
            indexingMaps = {onScreenHeaders: {}, onScreenPathIndexMap: {}},
            onScreenItemsLength = onScreenItems.length;

        for (indexOnScreen = 0; indexOnScreen < onScreenItemsLength; indexOnScreen++) {
            var curOnScreenItem = onScreenItems[indexOnScreen];
            if (curOnScreenItem.getHeaderText) {
                //it is a header
                indexingMaps.onScreenHeaders[curOnScreenItem.getHeaderText()] = {aItemsRefrenceIndex: indexOnScreen, isVisible: false};
            } else if (curOnScreenItem.getBindingContext()) {
                //it is a tile
                path = curOnScreenItem.getBindingContext().getPath();
                indexingMaps.onScreenPathIndexMap[path] = {aItemsRefrenceIndex: indexOnScreen, isVisible: false};
            }
        }

        return indexingMaps;
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.showHideTilesAndHeaders = function (indexingMaps, onScreenItems) {
        var scrPathKey,
            sName = "tiles",
            isVisibleTiles = false,
            bShowGroupHeader = this.getShowGroupHeader(),
            oBinding = this.mBindingInfos[sName].binding,
            entry;

        for (scrPathKey in indexingMaps.onScreenPathIndexMap) {
            if (indexingMaps.onScreenPathIndexMap.hasOwnProperty(scrPathKey)) {
                entry = indexingMaps.onScreenPathIndexMap[scrPathKey];
                var realItem = onScreenItems[entry.aItemsRefrenceIndex];
                realItem.setVisible(entry.isVisible);

                //set the corresponding header to be displayed.
                if (entry.isVisible) {                	
                    var groupHeader = oBinding.aSorters[0].fnGroup(realItem.getBindingContext());
                    indexingMaps.onScreenHeaders[groupHeader].isVisible = bShowGroupHeader;
                    isVisibleTiles = true;
                }
            }
        }

        //show headers...
        for (scrPathKey in indexingMaps.onScreenHeaders) {
            if (indexingMaps.onScreenHeaders.hasOwnProperty(scrPathKey)) {
                entry = indexingMaps.onScreenHeaders[scrPathKey];
                onScreenItems[entry.aItemsRefrenceIndex].setVisible(entry.isVisible);
            }
        }
        
        return isVisibleTiles;
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.filterTiles = function () {
        var sName = "tiles",
            oBindingInfo = this.mBindingInfos[sName],
            oBinding = this.mBindingInfos[sName].binding,
            aBindingContexts = oBinding.getContexts(),
            aItems = this.getTiles(),
            isVisibleTiles = false,
            indexSearchMissingFilteredElem;

        //index the on screen elements according to the path
        var indexingMaps = this.indexOnScreenElements(aItems);

        //search for the missing filtered elements
        indexSearchMissingFilteredElem = this.markVisibleOnScreenElements(aBindingContexts, indexingMaps);

        //validate data is still can be added to the screen object and still the ordering will be ok else call refresh.
        if (aBindingContexts[indexSearchMissingFilteredElem] && this.getTiles().length > 0) {
            var lastDomPath = this.getTiles()[this.getTiles().length - 1].getBindingContext().getPath();
            var firstFltrPath = aBindingContexts[indexSearchMissingFilteredElem].getPath();
            var spLastOnScreen = lastDomPath.split('/');
            var spFirstOnFilter = firstFltrPath.split('/');
            var indexLastOnScreen = spLastOnScreen[spLastOnScreen.length - 1];
            var indexFirstOnFilter = spFirstOnFilter[spFirstOnFilter.length - 1];
            if (parseInt(indexLastOnScreen) > parseInt(indexFirstOnFilter)) {
                throw true;
            }
        }

        //add the missing elements and check if there is a need for header.
        this.createMissingElementsInOnScreenElements(indexingMaps, aBindingContexts, indexSearchMissingFilteredElem, oBinding.isGrouped(), oBinding.aSorters, oBindingInfo, this.addNewItem.bind(this), this.addTileGroup.bind(this));

        aItems = this.getTiles();

        //show/ hide all the tiles ...
        isVisibleTiles = this.showHideTilesAndHeaders(indexingMaps, aItems);
        this.handleNoItemsToDisplayMessage(isVisibleTiles);
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.addTileGroup = function (oGroup, oHeader) {
        this.addAggregation("tiles", oHeader || new sap.ushell.ui.launchpad.HeaderTile({
            headerText: oGroup.text || oGroup.key,
            headerLevel : oGroup.headerLevel || this.getGroupHeaderLevel(),
            visible : this.getShowGroupHeader()
        }).addStyleClass("sapUshellTileContainerHdr"));
    };

    // Override setters
    sap.ushell.ui.launchpad.TileContainer.prototype.setNoDataText = function (oNoDataText) {
        this.setProperty("noDataText", oNoDataText, true); // suppress rerendering
        if (this.getShowNoData()) {
            this.$().find(".sapUshellNoFilteredItems").text(oNoDataText);
        }
        return this;
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.setGroupId = function (v) {
        this.setProperty("groupId", v, true);        // set property, but suppress rerendering
        if (this.oPlusTile) {
            this.oPlusTile.setGroupId(v);
        }
        return this;
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.setHeaderText = function (sHeaderText) {
        this.setProperty("headerText", sHeaderText, true);        // set property, but suppress rerendering
        this.$().find(".sapUshellContainerTitle").text(sHeaderText);
        return this;
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.setSortable = function (bSortable) {
        if (bSortable) {
            this.$().find(".ui-sortable").sortable('enable');
        } else {
            this.$().find(".ui-sortable").sortable('disable');
        }
        return this;
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.setVisible = function (bVisible) {
        if (!this.groupHasVisibleTiles() && sap.ui.getCore().byId("shell") && sap.ui.getCore().byId("shell").getModel() &&
            !sap.ui.getCore().byId("shell").getModel().getProperty("/personalization")) {
            bVisible = false;
        }
        this.setProperty("visible", bVisible); // suppress rerendering
        return this.toggleStyleClass("sapUshellHidden", !bVisible);
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.groupHasVisibleTiles = function () {
        var sPath = '',
            tiles = this.getTiles();
        if (this.getBindingContext()) {
            sPath = this.getBindingContext().sPath;
            tiles = this.getModel().getProperty(sPath).tiles;
        }
        return sap.ushell.utils.groupHasVisibleTiles(tiles);
    }
}());

}; // end of sap/ushell/ui/launchpad/TileContainer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.TileContainerRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    
    jQuery.sap.declare("sap.ushell.ui.launchpad.TileContainerRenderer");

    /**
     * @class TileContainer renderer.
     * @static
     *
     * @private
     */
    sap.ushell.ui.launchpad.TileContainerRenderer = {};

    /**
     * Renders the HTML for the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.TileContainerRenderer.render = function (oRm, oControl) {
        var aTiles = oControl.getTiles(),
            aFootItems = oControl.getFooterContent() || [],
            bHideTileContainer = (oControl.getDefaultGroup() && aTiles.length === 0) || !oControl.getVisible(),
            bVisibleTileExists = false;

        oRm.write("<div");
        oRm.writeControlData(oControl);

        oRm.addClass("sapUshellTileContainer");
        oRm.writeAttribute("tabindex", "0");
        oRm.writeClasses();

        if (bHideTileContainer) {
            oRm.addStyle("display", "none");
            oRm.writeStyles();
        }

        oRm.write(">");

        // PositionAnchor that if we scroll to this container, it will be under
        // UnifiedShell
        oRm.write("<a");
        oRm.addClass("sapUshellContainerPositionAnchor");
        oRm.writeClasses();
        oRm.writeAttribute("name", oControl.getId() + "-position");
        oRm.write("></a>");

        if (oControl.getShowHeader()) {
            // Title
            oRm.write("<");
            oRm.write(oControl.getHeaderLevel().toLowerCase());
            oRm.addClass('sapUshellContainerTitle');
            oRm.addClass("sapUiStrongBackgroundTextColor");
            oRm.writeClasses();
            oRm.write(">");
            oRm.writeEscaped(oControl.getHeaderText());
            oRm.write("</");
            oRm.write(oControl.getHeaderLevel().toLowerCase());
            oRm.write(">");

            // Title END
        }

        oRm.write("<div");
        oRm.addClass('sapUshellTilesContainer-sortable');
        oRm.addClass('sapUshellInner');
        oRm.writeClasses();
        oRm.write(">");

        // Tiles rendering, and checking if there is at lest one visible Tile
        jQuery.each(aTiles, function (index, tile) {
            if (tile.getVisible()) {
                bVisibleTileExists = true;
            }
            if (this.getVisible) {
                oRm.renderControl(this);
            }
        });

        // If no tiles in group or default group
        if (oControl.getShowPlaceholder() && aTiles.length === 0 && !bHideTileContainer) {
            oRm.renderControl(oControl.oPlusTile);
        }

        // hook method to render no data
        if (oControl.getShowNoData()) {
            this.renderNoData(oRm, oControl, !aTiles.length || !bVisibleTileExists);
        }

        oRm.write("</div>");
        // Tiles END

        // Footer
        if (aFootItems.length > 0) {
            oRm.write("<footer");
            oRm.addClass('sapUshellTilesContainerFtr');
            oRm.writeClasses();
            oRm.write(">");
            jQuery.each(aFootItems, function () {
                oRm.renderControl(this);
            });
            oRm.write("</footer>");
        }
        oRm.write("</div>");
    };

    // Rendering a message in case no Tiles are visible after applying the user filter
    sap.ushell.ui.launchpad.TileContainerRenderer.renderNoData = function (oRm, oControl, displayData) {
        oRm.write("<div id='" + oControl.getId() + "-listNoData' class='sapUshellNoFilteredItems sapUiStrongBackgroundTextColor'>");
        if (displayData) {
            if (oControl.getNoDataText()) {
                oRm.writeEscaped(oControl.getNoDataText());
            } else {
                oRm.writeEscaped(oControl.getNoDataText(sap.ushell.resources.i18n.getText("noFilteredItems")));
            }
        } else {
            oRm.writeEscaped("");
        }
        oRm.write("</div>");
    };

}());

}; // end of sap/ushell/ui/launchpad/TileContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.TileRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    
    jQuery.sap.declare("sap.ushell.ui.launchpad.TileRenderer");

    /**
     * @class Tile renderer.
     * @static
     *
     * @private
     */
    sap.ushell.ui.launchpad.TileRenderer = {};
    var translationBundle = sap.ushell.resources.i18n;

    /**
     * Renders the HTML for the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.TileRenderer.render = function (oRm, oControl) {
        var oTileView = null;
        try {
            oTileView = oControl.getTileViews()[0];
        } catch (ex) {
            jQuery.sap.log.warning("Failed to load tile view: ", ex.message);
            oTileView = new sap.m.Text({ text: "Failed to load. "});
        }

        oRm.write("<div");
        oRm.writeControlData(oControl);
        oRm.addClass("sapUshellTile");
        if (oControl.getFootItems() && oControl.getFootItems().length > 0) {
            oRm.addClass("sapUshellTileFooter");
        }
        if (oControl.getLong()) {
            oRm.addClass("sapUshellLong");
        }
        if (oControl.getTall()) {
            oRm.addClass("sapUshellTall");
        }
        if (!oControl.getVisible()) {
            oRm.addClass("sapUshellHidden");
        }
        oRm.writeClasses();
    	oRm.writeAccessibilityState(oControl, {role : 'link', label : translationBundle.getText("TileDetails_lable")});
        oRm.write(">");

        // Tile Content
        oRm.addClass("sapUshellTileInner");
        if (this.renderTileView) {
            this.renderTileView(oRm, oTileView, oControl.getTarget());
        }

        // Tile Footer Items
        oRm.write("<footer");
        oRm.addClass("sapUshellTileFooterElement");
        oRm.writeClasses();
        oRm.write(">");
        jQuery.each(oControl.getFootItems(), function () {
            oRm.renderControl(this);
        });
        oRm.write("</footer>");

        oRm.write("</div>");
    };

    sap.ushell.ui.launchpad.TileRenderer.renderTileView = function (oRm, oTileView, sTarget) {
        if ((sTarget || "") !== "") {
            oRm.write("<a");
            oRm.writeClasses();
            oRm.writeAttributeEscaped("href", "#" + sTarget);
            oRm.write(">");
            oRm.renderControl(oTileView);
            oRm.write("</a>");
        } else {
            oRm.write("<div");
            oRm.writeClasses();
            oRm.writeAttribute("title", sap.ushell.resources.i18n.getText("launchTile_tooltip"));
            oRm.write(">");
            oRm.renderControl(oTileView);
            oRm.write("</div>");
        }
    };

}());

}; // end of sap/ushell/ui/launchpad/TileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.TileState') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.TileState.
jQuery.sap.declare("sap.ushell.ui.launchpad.TileState");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new TileState.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getState state} : string (default: 'Loaded')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The tile state control that displays loading indicator, while tile view is loading and failed status in case tile view is not available.
 * @extends sap.ui.core.Control
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.TileState
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.ushell.ui.launchpad.TileState", { metadata : {

	library : "sap.ushell",
	properties : {
		"state" : {type : "string", group : "Misc", defaultValue : 'Loaded'}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.TileState with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.TileState.extend
 * @function
 */


/**
 * Getter for property <code>state</code>.
 * The load status.
 *
 * Default value is <code>Loaded</code>
 *
 * @return {string} the value of property <code>state</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileState#getState
 * @function
 */

/**
 * Setter for property <code>state</code>.
 *
 * Default value is <code>Loaded</code> 
 *
 * @param {string} sState  new value for property <code>state</code>
 * @return {sap.ushell.ui.launchpad.TileState} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileState#setState
 * @function
 */


// Start of sap/ushell/ui/launchpad/TileState.js
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


sap.ushell.ui.launchpad.TileState.prototype.init = function() {
	this._rb = sap.ushell.resources.i18n;
	
	this._sFailedToLoad = this._rb.getText("cannotLoadTile");
	
	this._oWarningIcon = new sap.ui.core.Icon(this.getId() + "-warn-icon",{
		src : "sap-icon://notification",
		size : "1.37rem"
	}); 
	
	this._oWarningIcon.addStyleClass("sapSuiteGTFtrFldIcnMrk");
};

sap.ushell.ui.launchpad.TileState.prototype.exit = function() {
	this._oWarningIcon.destroy();
};

sap.ushell.ui.launchpad.TileState.prototype.setState = function(oState, isSuppressed) {
	this.setProperty("state", oState, isSuppressed);
	return this;
};

}; // end of sap/ushell/ui/launchpad/TileState.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.TileStateRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.ushell.ui.launchpad.TileStateRenderer");

/**
 * @class TileState renderer.
 * @static
 */
sap.ushell.ui.launchpad.TileStateRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ushell.ui.launchpad.TileStateRenderer.render = function(rm, oControl) {
    rm.write("<div");

    rm.writeControlData(oControl);

    rm.addClass("sapUshellGT");

    rm.write(">");

    var sState = oControl.getState();
    rm.write("<div");
    rm.addClass("sapUshellOverlay");
    rm.writeClasses();
    rm.writeAttribute("id", oControl.getId() + "-overlay");
    rm.write(">");
    switch(sState) {
        case "Loading":
            var oBusy = new sap.ui.core.HTML({
                content:"<div class='sapUshellTileStateLoading'><div>"
            });
            oBusy.setBusyIndicatorDelay(0);
            oBusy.setBusy(true);
            rm.renderControl(oBusy);
            break;

        case "Failed":
            rm.write("<div");
            rm.writeAttribute("id", oControl.getId() + "-failed-ftr");
            rm.addClass("sapUshellTileStateFtrFld");
            rm.writeClasses();
            rm.write(">");
            rm.write("<div");
            rm.writeAttribute("id", oControl.getId() + "-failed-icon");
            rm.addClass("sapUshellTileStateFtrFldIcn");
            rm.writeClasses();
            rm.write(">");
            rm.renderControl(oControl._oWarningIcon);
            rm.write("</div>");

            rm.write("<div");
            rm.writeAttribute("id", oControl.getId() + "-failed-text");
            rm.addClass("sapUshellTileStateFtrFldTxt");
            rm.writeClasses();
            rm.write(">");
            rm.writeEscaped(oControl._sFailedToLoad);
            rm.write("</div>");

            rm.write("</div>");
            break;
        default:
    }
    rm.write("</div>");
    rm.write("</div>");
};

}; // end of sap/ushell/ui/launchpad/TileStateRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.TileBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.tile.TileBase.
jQuery.sap.declare("sap.ushell.ui.tile.TileBase");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui/tile/TileBase.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getSubtitle subtitle} : string</li>
 * <li>{@link #getIcon icon} : string</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getInfoState infoState} : sap.ushell.ui.tile.State (default: sap.ushell.ui.tile.State.Neutral)</li>
 * <li>{@link #getTargetURL targetURL} : string</li>
 * <li>{@link #getHighlightTerms highlightTerms} : any (default: [])</li>
 * <li>{@link #getActions actions} : any (default: [])</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.tile.TileBase#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Base class for tiles that already provides several visual elements like title, subtitle, icon and additional information
 * @extends sap.ui.core.Control
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.tile.TileBase
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.ushell.ui.tile.TileBase", { metadata : {

	library : "sap.ushell",
	properties : {
		"title" : {type : "string", group : "Data", defaultValue : null},
		"subtitle" : {type : "string", group : "Data", defaultValue : null},
		"icon" : {type : "string", group : "Data", defaultValue : null},
		"info" : {type : "string", group : "Data", defaultValue : null},
		"infoState" : {type : "sap.ushell.ui.tile.State", group : "", defaultValue : sap.ushell.ui.tile.State.Neutral},
		"targetURL" : {type : "string", group : "Behavior", defaultValue : null},
		"highlightTerms" : {type : "any", group : "Appearance", defaultValue : []},
		"actions" : {type : "any", group : "Appearance", defaultValue : []}
	},
	aggregations : {
		"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.tile.TileBase with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.tile.TileBase.extend
 * @function
 */

sap.ushell.ui.tile.TileBase.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>title</code>.
 * The title of this tile
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setTitle
 * @function
 */


/**
 * Getter for property <code>subtitle</code>.
 * A subtitle of this tile (optional)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>subtitle</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getSubtitle
 * @function
 */

/**
 * Setter for property <code>subtitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSubtitle  new value for property <code>subtitle</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setSubtitle
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * An icon for the tile
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setIcon
 * @function
 */


/**
 * Getter for property <code>info</code>.
 * Additional information displayed at the bottom of the tile
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>info</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getInfo
 * @function
 */

/**
 * Setter for property <code>info</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sInfo  new value for property <code>info</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setInfo
 * @function
 */


/**
 * Getter for property <code>infoState</code>.
 * The state of the info field
 *
 * Default value is <code>Neutral</code>
 *
 * @return {sap.ushell.ui.tile.State} the value of property <code>infoState</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getInfoState
 * @function
 */

/**
 * Setter for property <code>infoState</code>.
 *
 * Default value is <code>Neutral</code> 
 *
 * @param {sap.ushell.ui.tile.State} oInfoState  new value for property <code>infoState</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setInfoState
 * @function
 */


/**
 * Getter for property <code>targetURL</code>.
 * If given, the Control is wrapped into a link pointing to this URL. If empty or not set, the link is not rendered
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>targetURL</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getTargetURL
 * @function
 */

/**
 * Setter for property <code>targetURL</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTargetURL  new value for property <code>targetURL</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setTargetURL
 * @function
 */


/**
 * Getter for property <code>highlightTerms</code>.
 * contains an array of terms that should be highlighted; per default, the array is empty
 *
 * Default value is <code>[]</code>
 *
 * @return {any} the value of property <code>highlightTerms</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getHighlightTerms
 * @function
 */

/**
 * Setter for property <code>highlightTerms</code>.
 *
 * Default value is <code>[]</code> 
 *
 * @param {any} oHighlightTerms  new value for property <code>highlightTerms</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setHighlightTerms
 * @function
 */


/**
 * Getter for property <code>actions</code>.
 * contains an array of tile actions; per default, the array is empty
 *
 * Default value is <code>[]</code>
 *
 * @return {any} the value of property <code>actions</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getActions
 * @function
 */

/**
 * Setter for property <code>actions</code>.
 *
 * Default value is <code>[]</code> 
 *
 * @param {any} oActions  new value for property <code>actions</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setActions
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.tile.TileBase#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ushell.ui.tile.TileBase#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.tile.TileBase#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.tile.TileBase#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#destroyContent
 * @function
 */


/**
 * called when the tile is clicked / pressed
 *
 * @name sap.ushell.ui.tile.TileBase#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ushell.ui.tile.TileBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.tile.TileBase</code>.<br/> itself. 
 *  
 * called when the tile is clicked / pressed
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.tile.TileBase</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ushell.ui.tile.TileBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.tile.TileBase#firePress
 * @function
 */


// Start of sap/ushell/ui/tile/TileBase.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

/**
 * Base class for applaunchers that provides basic properties like title,
 * subtitle, icon and additional information.
 * 
 * @name sap.ushell.ui.tile.TileBase
 * 
 * @since   1.15.0
 * @private
 */

(function () {
    "use strict";

    function _isChildOf(parent, child) {
        if( child != null ) {
            while( child.parentNode ) {
                if( (child = child.parentNode) == parent ) {
                    return true;
                }
            }
        }
        return false;
    }

    var _lastActionSheet = undefined;

    sap.ushell.ui.tile.TileBase.prototype._getActionButton = function(oData){
        var oButtonData = {
            press: function(){
                var targetUrl = oButtonData.targetURL;
                if (typeof targetUrl !== "string" ) {
                    return;
                }
                targetUrl = jQuery.trim(targetUrl);
                if (targetUrl.length) {
                    var navigationService = sap.ushell.Container.getService("CrossApplicationNavigation");
                    navigationService.toExternal({ target: { shellHash: targetUrl }});
                }
            }
        };
        jQuery.extend(oButtonData, oData);
        return new sap.m.Button(oButtonData);
    }

    sap.ushell.ui.tile.TileBase.prototype.setActions = function (actions) {
        this.setProperty('actions', actions);
        if ((!actions || !actions.length) && !this.oActionSheet) {
            return;
        }
        //requirements will only be loaded when we have actions;
        if (!jQuery.sap.isDeclared('sap.m.ActionSheet')) {
            jQuery.sap.require("sap.m.Button");
            jQuery.sap.require("sap.m.ActionSheet");
        }
        if (!actions || !actions.length) {
            this.oActionSheet.destroy();
            delete this.oActionSheet;
            return;
        }
        if (!this.oActionSheet) {
            this.oActionSheet = new sap.m.ActionSheet({
                placement: sap.m.PlacementType.Auto
            });
        }
        this.oActionSheet.removeAllButtons();
        for (var i=0; i<actions.length; i++) {
            this.oActionSheet.addButton(this._getActionButton(actions[i]));
        }
        return this;
    }

    sap.ushell.ui.tile.TileBase.prototype.ontap = function (e) {
        this.firePress({});
    };

    sap.ushell.ui.tile.TileBase.prototype.onsapenter = function (e) {
        this.firePress({});
    };

    sap.ushell.ui.tile.TileBase.prototype.onsapspace = function (e) {
        this.firePress({});
    };

    sap.ushell.ui.tile.TileBase.prototype.onmouseover = function (e) {
        if (!sap.ui.Device.system.desktop) {
            return;
        }
        if (this._mouseOverInProgress ||  (this.oActionSheet && this.oActionSheet.isOpen())) return;
        this._mouseOverInProgress = true;
        var actions = this.getActions();
        if (!actions || !actions.length) return;
        this._showActionsTimeout = setTimeout((function(){
            if (!this.oActionSheet) return;
            if (typeof _lastActionSheet === 'object') {
                //wrap close in try catch block to avoid exception in case actionSheet is destroyed
                try{
                    _lastActionSheet.close();
                }
                catch(e){
                    //ignore
                }

            }
            this.oActionSheet.openBy(this.getParent());
            _lastActionSheet = this.oActionSheet;
        }).bind(this), 800);
    };

    sap.ushell.ui.tile.TileBase.prototype.onmouseout = function (e) {
        var element = this.getDomRef();
        var _currentMouseTarget = null;
        if( e.toElement ) {
            _currentMouseTarget = event.toElement;
        } else if( e.relatedTarget ) {
            _currentMouseTarget = event.relatedTarget;
        }
        if( !_isChildOf(element, _currentMouseTarget) && element != _currentMouseTarget ) {
            this._mouseOverInProgress = false;
            clearTimeout(this._showActionsTimeout);
        }
    };

}());

}; // end of sap/ushell/ui/tile/TileBase.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.TileBaseRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    
    jQuery.sap.declare("sap.ushell.ui.tile.TileBaseRenderer");

    /**
     * @name sap.ushell.ui.tile.TileBaseRenderer
     * @static
     * @private
     */
    sap.ushell.ui.tile.TileBaseRenderer = {};
    var translationBundle = sap.ushell.resources.i18n;

    /**
     * Searches for occurrences of given searchTerms and substitutes substrings with themselves wrapped in HTML bold tag
     *
     * @param {array} aHighlightTerms an array of strings that will be detected and replaced
     * @param {string} sText contains the text to be highlighted
     * @returns {string} the text with all occurrences wrapped
     * 
     * @private
     */
    sap.ushell.ui.tile.TileBaseRenderer.highlight = function (aHighlightTerms, sText) {
        var i,
            regexpHighlightTerm,
            // immediately escape string for displaying as HTML
            sEscapedText = jQuery.sap.encodeHTML(sText).replace(/&#xa;/g, "<br/>");
        if (aHighlightTerms && aHighlightTerms.length && aHighlightTerms.length > 0) {
            for (i = 0; i < aHighlightTerms.length; i = i + 1) {
                // build regular expression with escaped highlight term (case insensitive + greedy)
                regexpHighlightTerm = new RegExp("(" + jQuery.sap.encodeHTML(aHighlightTerms[i]).replace(/([.*+?\^=!:${}()|\[\]\/\\])/g, "\\$1") + ")", "gi");
                // regexp replace occurrence with wrapped self
                sEscapedText = sEscapedText.replace(regexpHighlightTerm, "<b>$1</b>");
            }
        }
        return sEscapedText;
    };

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    sap.ushell.ui.tile.TileBaseRenderer.render = function (oRm, oControl) {
        // is it necessary to wrap the control into a link?
        var sTileTitleTooltip = translationBundle.getText('launchTileTitle_tooltip', [oControl.getTitle()]),
            sInfoPrefix,
            oIcon;
        oRm.write("<div");
        oRm.writeControlData(oControl);
        if(oControl.getTargetURL()){
            oRm.writeAttributeEscaped("data-targeturl", oControl.getTargetURL());
        }
        oRm.writeAttributeEscaped("tabindex", "0");
        oRm.addClass("sapUshellTileBase");
        oRm.writeClasses();
        oRm.write(">");

        // plain title + subtitle wrapper
        oRm.write("<div");
        oRm.addClass("sapUshellTileBaseHeader");
        oRm.writeClasses();
        oRm.write(">");

        // title
        oRm.write("<h3");
        oRm.addClass("sapUshellTileBaseTitle");
        oRm.writeClasses();
        oRm.writeAttributeEscaped('title', sTileTitleTooltip);
        oRm.writeAccessibilityState(oControl, {label : translationBundle.getText("TileTitle_lable") + oControl.getTitle()});
        oRm.write(">");
        // note: this mustn't be escaped, as highlight already does that
        oRm.write(this.highlight(oControl.getHighlightTerms(), oControl.getTitle() || ""));
        oRm.write("</h3>");

        // subtitle
        if (oControl.getSubtitle()) {
            oRm.write("<h4");
            oRm.addClass("sapUshellTileBaseSubtitle");
            oRm.writeClasses();
            oRm.writeAccessibilityState(oControl, {label : translationBundle.getText("TileSubTitle_lable") + oControl.getSubtitle()});
            oRm.write(">");
            // note: this mustn't be escaped, as highlight already does that
            oRm.write(this.highlight(oControl.getHighlightTerms(), oControl.getSubtitle()));
            oRm.write("</h4>");
        }

        oRm.write("</div>");

        /* render inheriting controls  */
        if (typeof (this.renderPart) === 'function') {
            this.renderPart(oRm, oControl);
        }

        // icon
        if (oControl.getIcon()) {
            oIcon = new sap.ui.core.Icon({src: oControl.getIcon()});
            oIcon.addStyleClass("sapUshellTileBaseIcon");
            oRm.renderControl(oIcon);
        }

        // begin sapUshellTileBaseInfo
        if (oControl.getInfo() || ((typeof (this.getInfoPrefix) === 'function')) && this.getInfoPrefix(oControl)) {
            oRm.write("<div");
            oRm.addClass("sapUshellTileBaseInfo");
            oRm.addClass(oControl.getInfoState() ? "sapUshellTileBase" + oControl.getInfoState() : "sapUshellTileBase" + sap.ushell.ui.tile.State.Neutral);
            oRm.writeClasses();
            oRm.writeAccessibilityState(oControl, {label : translationBundle.getText("TileInfo_lable") + oControl.getInfo()});
            oRm.write(">");

            // it is possible for subclasses to prefix the info with arbitrary information (e.g. unit ex DynamicTiles)
            if (typeof (this.getInfoPrefix) === 'function') {
                sInfoPrefix = this.getInfoPrefix(oControl);
                oRm.writeEscaped(sInfoPrefix);
            }
            // info string
            if (oControl.getInfo()) {
                // number units are separated from info text with a comma
                if (sInfoPrefix) {
                    oRm.write(", ");
                }
                // note: this mustn't be escaped, as highlight already does that
                oRm.write(this.highlight(oControl.getHighlightTerms(), oControl.getInfo()));
            }
            // end sapUshellTileBaseInfo
            oRm.write("</div>");

        }

        // end control div element
        oRm.write("</div>");
    };
}());
}; // end of sap/ushell/ui/tile/TileBaseRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.utils') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview This file contains miscellaneous utility functions.
 */

(function () {
    "use strict";
    /*global dispatchEvent, document, jQuery, localStorage, sap */

    // ensure that sap.ushell exists
    jQuery.sap.declare("sap.ushell.utils");

    sap.ushell.utils = {};
    var visibilityCalcTimer;

    /**
     * Creates an <code>Error</code> object and logs the error message immediately.
     *
     * @param {string} sMessage
     *   the error message
     * @param {string} [sComponent]
     *   the error component to log
     *
     * @class An error that is written to the log.
     * @constructor
     * @since 1.15.0
     */
    sap.ushell.utils.Error = function (sMessage, sComponent) {
        this.name = "sap.ushell.utils.Error";
        this.message = sMessage;
        jQuery.sap.log.error(sMessage, null, sComponent);
    };

    sap.ushell.utils.Error.prototype = new Error();

    /**
     * Wrapper for localStorage.setItem() including exception handling
     * caused by exceeding storage quota limits
     * or exception is always thrown (safari private browsing mode)
     *
     * @param {string} sKey
     *   the key for the storage entry
     * @param {string} sValue
     *   the value for the storage entry
     * @param {boolean} [bLocalEvent=false]
     *   when true the storage event is also fired for the source window
     *
     * @since 1.21.2
     * @private
     */
    sap.ushell.utils.localStorageSetItem = function (sKey, sValue, bLocalEvent) {
        var oEvent;
        try {
            localStorage.setItem(sKey, sValue);
            if (bLocalEvent) {
                oEvent = document.createEvent("StorageEvent");
                // Events are fired only if setItem works
                // If we want to decouple this (to have eventing to the same window)
                // we have to provide a wrapper for localStorage.getItem and -removeItem() also
                oEvent.initStorageEvent("storage", false, false,
                        sKey, "", sValue, "", localStorage);
                dispatchEvent(oEvent);
            }
        } catch (e) {
            jQuery.sap.log.warning("Error calling localStorage.setItem(): " + e, null,
                "sap.ushell.utils");
        }
    };

    /**
     * Creates an empty map.
     * @class A mapping from arbitrary string(!) keys (including "get" or "hasOwnProperty") to
     * values of any type.
     * @since 1.15.0
     */
    sap.ushell.utils.Map = function () {
        this.entries = {};
    };

    /**
     * Associates the specified value with the specified key in this map. If the map previously
     * contained a mapping for the key, the old value is replaced by the specified value. Returns
     * the old value. Note: It might be a good idea to assert that the old value is
     * <code>undefined</code> in case you expect your keys to be unique.
     *
     * @param {string} sKey
     *   key with which the specified value is to be associated
     * @param {any} vValue
     *   value to be associated with the specified key
     * @returns {any}
     *   the old value
     * @since 1.15.0
     */
    sap.ushell.utils.Map.prototype.put = function (sKey, vValue) {
        var vOldValue = this.get(sKey);
        this.entries[sKey] = vValue;
        return vOldValue;
    };

    /**
     * Returns <tt>true</tt> if this map contains a mapping for the specified key.
     *
     * @param {string} sKey
     *   key whose presence in this map is to be tested
     * @returns {boolean}
     *   <tt>true</tt> if this map contains a mapping for the specified key
     * @since 1.15.0
     */
    sap.ushell.utils.Map.prototype.containsKey = function (sKey) {
        if (typeof sKey !== "string") {
            throw new sap.ushell.utils.Error("Not a string key: " + sKey, "sap.ushell.utils.Map");
        }
        return Object.prototype.hasOwnProperty.call(this.entries, sKey);
    };

    /**
     * Returns the value to which the specified key is mapped, or <code>undefined</code> if this map
     * contains no mapping for the key.
     * @param {string} sKey
     *   the key whose associated value is to be returned
     * @returns {any}
     *   the value to which the specified key is mapped, or <code>undefined</code> if this map
     *   contains no mapping for the key
     * @since 1.15.0
     */
    sap.ushell.utils.Map.prototype.get = function (sKey) {
        if (this.containsKey(sKey)) {
            return this.entries[sKey];
        }
        //return undefined;
    };

    /**
     * Returns an array of this map's keys. This array is a snapshot of the map; concurrent
     * modifications of the map while iterating do not influence the sequence.
     * @returns {string[]}
     *   this map's keys
     * @since 1.15.0
     */
    sap.ushell.utils.Map.prototype.keys = function () {
        return Object.keys(this.entries);
    };

    /**
     * Removes a key together with its value from the map.
     * @param {string} sKey
     *  the map's key to be removed
     * @since 1.17.1
     */
    sap.ushell.utils.Map.prototype.remove = function (sKey) {
        delete this.entries[sKey];
    };

    /**
     * Returns this map's string representation.
     *
     * @returns {string}
     *   this map's string representation
     * @since 1.15.0
     */
    sap.ushell.utils.Map.prototype.toString = function () {
        var aResult = ['sap.ushell.utils.Map('];
        aResult.push(JSON.stringify(this.entries));
        aResult.push(')');
        return aResult.join('');
    };

    /**
     * Serves as a marker for functions that are to be exposed in QUnit tests. Calls to this
     * function are expected to be placed directly before the named function declaration (even
     * <b>after</b> the JSDoc). The function itself does nothing.
     *
     * @param {object} o
     *   the object to which this function will be attached in tests; must not be <code>this</code>
     *   (use <code>that</code> instead)
     * @param {string} [sExternalFunctionName]
     *   Optional external function name (since 1.25.0) to be used instead of the "local" function
     *   name which may have been changed e.g. by a minifier. Use this parameter in case of
     *   integration tests (and only then) which MUST be able to run against minified productive
     *   code!<p>
     *   <b>BEWARE:</b> Integration tests should rely on
     *   <code>sap.ushell.utils.testPublishAt</code> only in exceptional cases!
     * @since 1.15.0
     */
    sap.ushell.utils.testPublishAt = function (o, sExternalFunctionName) {
      // intentionally left blank
    };

    /**
     * Setting Tiles visibility using the Visibility contract, according to the view-port's position.
     *
     * Serves only the last caller, with a delay of 1 sec in order to make sure that rendering is complete
     */
    sap.ushell.utils.handleTilesVisibility = function () {

        // If a previous call is still waiting  - cancel it
        clearTimeout(visibilityCalcTimer);

        // Set the new timer
        visibilityCalcTimer = setTimeout(function () {
            var start = new Date(),
            // Get the visible and non-visible Tiles
            aTiles = sap.ushell.utils.getVisibleTiles();

            if ((typeof aTiles != "undefined") && aTiles.length > 0){
                var launchPageService = sap.ushell.Container.getService("LaunchPage");

                aTiles.forEach(function (oTile) {
                    launchPageService.setTileVisible(sap.ushell.utils.getTileObject(oTile), oTile.isDisplayedInViewPort);
                });
                jQuery.sap.log.debug("Visible Tiles: " + aTiles.filter(function (oTile) {return oTile.isDisplayedInViewPort; }).length);
                jQuery.sap.log.debug("NonVisible Tiles: " + aTiles.filter(function (oTile) {return !oTile.isDisplayedInViewPort; }).length);
            }

            var duration = new Date() - start;
            jQuery.sap.log.debug("Start time is: " + start + " and duration is: " + duration);
        }, 1000);
    };

    /**
     * Setting Tiles visibility using the Visibility contract as not visible.
     *
     * The affected tiles are only the visible tiles according to the view port's position.
     *
     * This action happens immediately with no timers or timeouts.
     */
    sap.ushell.utils.setTilesNoVisibility = function () {
        // this method currently is used upon navigation (i.e. Shell.controlelr - openApp)
        // as there is logic that is running in the background such as OData count calls of the dynamic tiles
        // which are still visible at navigation (as no one had marked it otherwise).
        var aTiles = sap.ushell.utils.getVisibleTiles();
        if ((typeof aTiles !== "undefined") && aTiles.length > 0) {
            var launchPageService = sap.ushell.Container.getService("LaunchPage");

            aTiles.forEach(function (oTile) {
                launchPageService.setTileVisible(sap.ushell.utils.getTileObject(oTile), false);
            });
            jQuery.sap.log.debug("Visible Tiles: " + aTiles.filter(function (oTile) {return oTile.isDisplayedInViewPort; }).length);
            jQuery.sap.log.debug("NonVisible Tiles: " + aTiles.filter(function (oTile) {return !oTile.isDisplayedInViewPort; }).length);
        }
    };

    /**
     * Gets a hash and returns only the semanticObject-action part of it
     */
    sap.ushell.utils.getBasicHash = function (hash) {
        // Check hash validity
        if (!sap.ushell.utils.validHash(hash)) {
            jQuery.sap.log.debug("Utils ; getBasicHash ; Got invalid hash");
            return;
        }

        var oURLParsing = sap.ushell.Container.getService("URLParsing"),
            oShellHash = oURLParsing.parseShellHash(hash);

        return oShellHash ?  oShellHash.semanticObject + "-" + oShellHash.action : hash;
    };

    sap.ushell.utils.validHash = function (hash) {
        return (hash && hash.constructor === String && $.trim(hash) != "");
    };

    sap.ushell.utils.handleTilesOpacity = function () {
        jQuery.sap.require("sap.ui.core.theming.Parameters");

        var that = this,
            aTilesOpacityValues,
            currentTile,
            appUsagePromise,
            appUsage,
            sColor = sap.ui.core.theming.Parameters.get("sapUshellTileBackgroundColor"),
            rgbColor = this.hexToRgb(sColor),
            jqTiles,
            calculatedOpacity,
            RGBAformat,
            jqTile,
            sCurrentHash,
            rgbaValue,
            oContext,
            pathSegments,
            groupind,
            tileInd,
            oCore = sap.ui.getCore(),
            oModel = oCore.byId("shell").getModel(),
            oUserRecentsService = sap.ushell.Container.getService("UserRecents");
        //In case of custom theme where UI5 parameters are not used - tiles opacity cannot be supported
        if (rgbColor) {
            RGBAformat = "rgba(" + rgbColor.r + "," + rgbColor.g + "," + rgbColor.b + ",{0})";
            appUsagePromise = oUserRecentsService.getAppsUsage();

            appUsagePromise.done(function(appUsage) {
                aTilesOpacityValues = appUsage.usageMap;
                jqTiles = jQuery('.sapUshellTile');
                var groups = oModel.getProperty("/groups");
                oModel.setProperty('/animationRendered', true);

                for (var index = 0; index < jqTiles.length; index++) {
                    jqTile = jQuery(jqTiles[index]);
                    sCurrentHash = this.getBasicHash(jqTile.find('.sapUshellTileBase').attr('data-targeturl'));
                    if (sCurrentHash) {
                        calculatedOpacity = this.convertToRealOpacity(aTilesOpacityValues[sCurrentHash], appUsage.maxUsage);
                        rgbaValue = RGBAformat.replace("{0}", calculatedOpacity);
                        currentTile = sap.ui.getCore().byId(jqTile.attr('id'));
                        oContext = currentTile.getBindingContext();
                        pathSegments = oContext.sPath.split('/');
                        groupind = pathSegments[2];
                        tileInd = pathSegments[4];
                        groups[groupind].tiles[tileInd].rgba = rgbaValue;
//                        oModel.setProperty( oContext.sPath + "/rgba", rgbaValue);
//                        currentTile.setAnimationRendered(true);
                    }
                }

                oModel.setProperty("/groups", groups);
            }.bind(this));
        }

    };

    sap.ushell.utils.convertToRealOpacity = function(amountOfUsage, max) {
    	var aOpacityLevels = [1, 0.95, 0.9, 0.85, 0.8],
    	    iOpacityVariance = Math.floor(max/aOpacityLevels.length),
    	    iOpacityLevelIndex;

    	if (!amountOfUsage) {
    		return aOpacityLevels[0];
    	}
    	else if (!max){
    		return aOpacityLevels[aOpacityLevels.length - 1];
    	}
    	else{
    		iOpacityLevelIndex = Math.floor((max - amountOfUsage)/iOpacityVariance);
    		return iOpacityLevelIndex < aOpacityLevels.length ? aOpacityLevels[iOpacityLevelIndex] : aOpacityLevels[aOpacityLevels.length - 1];
    	}
    };

    sap.ushell.utils.hexToRgb = function(hex) {
        var bIsHexIllegal = !hex || hex[0] != '#' || (hex.length  != 4 && hex.length != 7),
        	result;

        //If hex consists of three-character RGB notation, convert it into six-digit form
        hex = !bIsHexIllegal && hex.length === 4 ? '#' + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3] : hex;
        result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    };

    /**
     * Iterate over all the Tiles and mark each one as visible or non-visible according to the view-port's position
     *
     *  @returns Array of Tile objects, each one includes the flag "isDisplayedInViewPort" indicating its visibility
     */
    sap.ushell.utils.getVisibleTiles = function () {

        var nWindowHeight = document.body.clientHeight,
            oControl = sap.ui.getCore().byId("dashboardGroups"),
            oNavContainer = sap.ui.getCore().byId("navContainer"),
            groupsIndex,
            tilesIndex,
            group,
            groupTiles,
            oTile,
            tileDomRef,
            tileOffset,
            tileTop,
            tileBottom,
            shellHdrHeight = jQuery('#shell-hdr').height(),
            aTiles = [];



        if (oControl && oControl.getGroups() && oNavContainer) {
            //verify we are in the dashboard page
            var sCurrentState = oNavContainer.getModel().getProperty("/currentState/stateName"),
            	bIsInDashBoard = sCurrentState === "home",
                aGroups = oControl.getGroups();

            // Loop over all Groups
            //jQuery.each(aGroups, function(groupIndex) {
            for (groupsIndex = 0; groupsIndex < aGroups.length; groupsIndex = groupsIndex + 1) {
                group = aGroups[groupsIndex];
                groupTiles = group.getTiles();
                if (groupTiles) {
                    // Loop over all Tiles in the current Group
                    for (tilesIndex = 0; tilesIndex < groupTiles.length; tilesIndex = tilesIndex + 1) {

                        oTile = groupTiles[tilesIndex];

                        if (!bIsInDashBoard) {
                            // if current state is not dashboard ("Home") set not visible
                            oTile.isDisplayedInViewPort = false;
                        }
                        else {
                            tileDomRef = jQuery(oTile.getDomRef());
                            tileOffset = tileDomRef.offset();

                            // On Dashboard loading - the Dashboard Groups Container is rendered once in an empty state on initialization
                            // and then again when all data is loaded and the Groups need to be rendered.
                            // This condition is for exiting the function when it is called for the 1st time
                            if (!tileOffset) {
                                return;
                            }

                            tileTop = tileDomRef.offset().top;
                            tileBottom = tileTop + tileDomRef.height();

                            // If the Tile is located above or below the view-port
                            oTile.isDisplayedInViewPort = (tileBottom > shellHdrHeight) && (tileTop < nWindowHeight);
                        }
                        aTiles.push(oTile);
                    } // End of Tiles loop
                }
            } // End of Groups loop

        }
        return aTiles;
    };

    sap.ushell.utils.getTileObject = function (ui5TileObject) {
        var bindingContext = ui5TileObject.getBindingContext();
        return bindingContext.getObject().object;
    };

    sap.ushell.utils.addBottomSpace = function () {
    	var jqContainer = jQuery('#dashboardGroups').find('.sapUshellTileContainer'),
	        oOffset = jQuery('#dashboardPage').offset(),
	        edgeMargin = oOffset && oOffset.top;

	    var nBottomSpace = jQuery(window).height() - edgeMargin - jqContainer.last().parent().height();
	    nBottomSpace = (nBottomSpace < 0) ? 0 : nBottomSpace;

	    // Add margin to the bottom of the screen in order to allow the lower TileContainer (in case it is chosen)
	    //to be shown on the top of the view-port
	    jQuery('.sapUshellDashboardGroupsContainer').css("margin-bottom", nBottomSpace + "px");
    };

    sap.ushell.utils.groupHasVisibleTiles = function (groupTiles) {
        var visibleTilesInGroup = false,
            tileIndex,
            tempTile;

        if (!groupTiles || (groupTiles && groupTiles.length === 0)) {
        	return false;
        }

        for (tileIndex = 0; tileIndex < groupTiles.length; tileIndex = tileIndex + 1) {
            tempTile = groupTiles[tileIndex];
            // Check if the Tile is visible on the relevant device
            if (tempTile.isTileIntentSupported) {
                visibleTilesInGroup = true;
                break;
            }
        }
        return visibleTilesInGroup;
    }
}());

}; // end of sap/ushell/utils.js
if ( !jQuery.sap.isDeclared('sap.ushell.User') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The <code>sap.ushell.User</code> object with related functions.
 */

(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.User");

    

    // "private" methods (static) without need to access properties -------------

    /**
     * Determines the theme root for the given theme
     * @params {string} theme
     * @params {string} system theme root
     * @returns {string} theme root for the given theme
     *
     * @private
     */
    function determineThemeRoot(sTheme, sSystemThemeRoot) {
        if (sTheme.indexOf("sap_") === 0) {
            // SAP theme
            return "";
        }
        return sSystemThemeRoot;
    }

    /**
     * Clone a JSON object.
     *
     * @param {object} object to clone
     * @returns {object} copy of the input object
     *
     * @private
     */
    function clone(oObject) {
        if (oObject === undefined) {
            return undefined;
        }
        try {
            return JSON.parse(JSON.stringify(oObject));
        } catch (e) {
            return undefined;
        }
    }

    // "public class" -----------------------------------------------------------

    /**
     * Constructs a new representation (wrapper) of the user object as loaded by the
     * startup service.
     *
     * @param {object} oContainerAdapterConfig
     *    the result of the startup service call
     * @class A representation of a user
     * @constructor
     * @since 1.15.0
     */
    sap.ushell.User = function (oContainerAdapterConfig) {
        // actually the parameter contains the container adapter config

        // constructor code -------------------------------------------------------
        var aChangedProperties = [],
            sSystemThemeRoot = oContainerAdapterConfig.themeRoot || "",
            oCurrentTheme = oContainerAdapterConfig.bootTheme || {theme: "", root: ""},
            oNextStartupTheme = oCurrentTheme;
                // theme + theme root returned by the startup service when the launchpad is started next time

        // "private" or hidden methods --------------------------------------------


        // "public" methods -------------------------------------------------------

        /**
         * Returns this user's email address.
         *
         * @returns {string}
         *   this user's email address
         * @since 1.15.0
         */
        this.getEmail = function () {
            return oContainerAdapterConfig.email;
        };

        /**
         * Returns this user's first name.
         *
         * @returns {string}
         *   this user's first name
         * @since 1.15.0
         */
        this.getFirstName = function () {
            return oContainerAdapterConfig.firstName;
        };

        /**
         * Returns this user's full name.
         *
         * @returns {string}
         *   this user's full name
         * @since 1.15.0
         */
        this.getFullName = function () {
            return oContainerAdapterConfig.fullName;
        };

        /**
         * Returns this user's ID.
         *
         * @returns {string}
         *   this user's ID
         * @since 1.15.0
         */
        this.getId = function () {
            return oContainerAdapterConfig.id;
        };

        /**
         * Returns this user's language.
         *
         * @returns {string}
         *   this user's language
         * @since 1.15.0
         */
        this.getLanguage = function () {
            return oContainerAdapterConfig.language;
        };

        /**
         * Returns this user's language tag as defined by this
         * <a href="http://tools.ietf.org/html/bcp47">spec</a>.
         *
         * @returns {string}
         *   this user's language tag according to BCP 47
         * @since 1.15.0
         */
        this.getLanguageBcp47 = function () {
            return oContainerAdapterConfig.languageBcp47;
        };

        /**
         * Returns this user's last name.
         *
         * @returns {string}
         *   this user's last name
         * @since 1.15.0
         */
        this.getLastName = function () {
            return oContainerAdapterConfig.lastName;
        };

        /**
         * Returns a URI to this user's image.
         *
         * @returns {string}
         *   a URI to this user's image
         * @since 1.21.1
         */
        this.getImage = function () {
            return oContainerAdapterConfig.image;
        };

        /**
         * Returns <code>true</code> if SAP Jam is active for this user.
         *
         * @returns {boolean}
         *   <code>true</code> if SAP Jam is active for this user
         * @since 1.15.0
         */
        this.isJamActive = function () {
            return oContainerAdapterConfig.isJamActive === true;
        };

        /**
         * Returns this user's selected theme.
         *
         * @returns {string}
         *   this user's selected theme
         * @since 1.15.0
         */
        this.getTheme = function () {
            return oCurrentTheme.theme;
        };

        /**
         * Sets this user's selected theme and applies it.
         * Also the theme is prepared to be stored as next start theme on the front-end server.
         * The save itself has to be triggered by method updateUserPreferences of the UserInfo service.
         * The theme root where the theme to be applied is read from is determined considering the
         * theme name. If the theme starts with sap_ the theme is read from the standard UI5
         * theme path. For all other themes the front-end server's system theme root is used.
         *
         * @since 1.15.0
         */
        this.setTheme = function (sNewTheme) {
            if (this.isSetThemePermitted() === false) {
                throw new Error("setTheme not permitted");
            }
            if (sNewTheme !== oNextStartupTheme.theme) {
                // The current theme is not relevant here
                this.setChangedProperties("THEME", oNextStartupTheme.theme, sNewTheme);
                oNextStartupTheme.theme = sNewTheme;
                    // This leads to a consistent state only if UserInfo.updateUserPreferences is called!
            }
            oCurrentTheme.theme = sNewTheme;
            oCurrentTheme.root = determineThemeRoot(sNewTheme, sSystemThemeRoot);
            // Apply the selected theme in UI5
            if (oCurrentTheme.root) {
                sap.ui.getCore().applyTheme(oCurrentTheme.theme, oCurrentTheme.root + "/UI5/");
            } else {
                sap.ui.getCore().applyTheme(oCurrentTheme.theme);
            }
        };

        /**
         * Returns <code>true</code> if accessibility is active for this user.
         *
         * @returns {boolean}
         *   <code>true</code> if accessibility is active for this user
         * @since 1.15.0
         */
        this.getAccessibilityMode = function () {
            return oContainerAdapterConfig.accessibility;
        };

        /**
         * Set this user's Accessibility mode.
         *
         * @since 1.15.0
         */
        this.setAccessibilityMode = function (accessibility) {
            if (this.isSetAccessibilityPermitted() === false) {
                jQuery.sap.log.error("setAccessibilityMode not permitted");
                throw true;
            }

            oContainerAdapterConfig.accessibility = accessibility;
        };

        /**
         * Return <code>true</code> if user is permitted to modify accessibility property.
         *
         * @returns {boolean}
         *   <code>true</code> if user is permitted to modify accessibility property.
         * @since 1.15.0
         */
        this.isSetAccessibilityPermitted = function () {
            return oContainerAdapterConfig.setAccessibilityPermitted;
        };

        /**
         * Return <code>true</code> if user is permitted to modify theme property.
         *
         * @returns {boolean}
         *   <code>true</code> if user is permitted to modify theme property.
         * @since 1.15.0
         */
        this.isSetThemePermitted = function () {
            return oContainerAdapterConfig.setThemePermitted;
        };

        /**
         * Returns this user's array of changed properties.
         *
         * @returns {string}
         *   this user's array of changed properties
         * @since 1.23.0
         */
        this.getChangedProperties = function () {
            return clone(aChangedProperties);
        };

        /**
         * Updates the ChangedProperties attributes array on each setter invocation
         *
         * @since 1.23.0
         */
        this.setChangedProperties = function (propertyName, currentValue, newValue) {
            aChangedProperties.push({ name : propertyName, oldValue : currentValue, newValue : newValue });
        };

        /**
         * Cleans the ChangedProperties array
         *
         * @since 1.23.0
         */
        this.resetChangedProperties = function () {
            aChangedProperties = [];
        };
        // TODO Would a resetChangedProperty - reset a specific property instead of the whole array -  not make more sense?
    };
}());

}; // end of sap/ushell/User.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.container.ApplicationContainer') ) {
//Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The UI integration's SAPUI5 control which supports application embedding.
 * @version 1.24.5
 */
(function () {
    "use strict";
    /*jslint nomen:true */
    /*global  addEventListener, removeEventListener, document, localStorage, jQuery, sap, URI*/

    var sPREFIX = "sap.ushell.components.container.",
        sCOMPONENT = sPREFIX + "ApplicationContainer",
        sDIRTY_STATE_PREFIX = "sap.ushell.Container.dirtyState.",
        mLogouts, /* {sap.ushell.utils.Map} */
        oResourceBundle;

    // Do not use the variables so that UI5 optimizers recognize this declaration
    jQuery.sap.declare("sap.ushell.components.container.ApplicationContainer");

    
    
    jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained


    mLogouts = new sap.ushell.utils.Map();

    /**
     * @namespace The application types supported by the embedding container.
     *
     * @since 1.15.0
     * @private
     */
    sap.ushell.components.container.ApplicationType = {
//          UI5: "UI5", // SAP UI development toolkit for HTML5
        /**
         * This type represents web applications identified by any uniform resource locator. They
         * will be embedded into an <code>IFRAME</code>.
         *
         * @constant
         * @default "URL"
         * @name sap.ushell.components.container.ApplicationType.URL
         * @since 1.15.0
         * @type string
         */
        URL: "URL",
        /**
         * This type represents applications built with Web Dynpro for ABAP. The embedding
         * container knows how to embed such applications in a smart way.
         *
         * @constant
         * @default "WDA"
         * @name sap.ushell.components.container.ApplicationType.WDA
         * @since 1.15.0
         * @type string
         */
        WDA: "WDA",
        /**
         * This type represents applications embedded via NetWeaver Business Client.
         * The embedding container knows how to embed such applications in a smart way.
         *
         * @constant
         * @default "NWBC"
         * @name sap.ushell.components.container.ApplicationType.NWBC
         * @since 1.19.0
         * @type string
         */
        NWBC: "NWBC"
    };

    /**
     * Returns the logout handler function for the given container object.
     *
     * @param {sap.ushell.components.container.ApplicationContainer} oContainer
     *   the container object for which the logout handler is of interest
     * @returns {function}
     *   the logout handler function for the given container. If no handler is registered
     *   <code>undefined</code> is returned.
     * @private
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function getLogoutHandler(oContainer) {
        return mLogouts.get(oContainer.getId());
    }

    /**
     * Returns a map of all search parameters present in the search string of the given URL.
     *
     * @param {string} sUrl
     *   the URL
     * @returns {object}
     *   a <code>map&lt;string, string[]></code> from key to array of values
     * @private
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function getParameterMap(sUrl) {
        // TODO use published API
        // discussed with Frank to request a function all() or get() without parameter
        return jQuery.sap.getUriParameters(sUrl).mParams;
    }

    /**
     * Returns a translated text from the resource bundle.
     *
     * @param {string} sKey
     *   the key in the resource bundle
     * @param {string[]} [aArgs]
     *   arguments to replace {0}..{9}
     * @returns {string}
     *   the translated text
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function getTranslatedText(sKey, aArgs) {
        if (!oResourceBundle) {
            oResourceBundle = jQuery.sap.resources({
                url: jQuery.sap.getModulePath(sPREFIX) + "/resources/resources.properties",
                language: sap.ui.getCore().getConfiguration().getLanguage()
            });
        }
        return oResourceBundle.getText(sKey, aArgs);
    }

    /**
     * Creates some SAPUI5 control telling the user that an error has occured.
     *
     * @returns {sap.ui.core.Control}
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function createErrorControl() {
        return new sap.ui.core.Icon({
            size: "2rem",
            src: "sap-icon://error",
            tooltip: getTranslatedText("an_error_has_occured")
        });
    }

    /**
     * Destroys the child aggregation.
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function destroyChild(oContainer) {
        var oChild = oContainer.getAggregation("child"),
            sComponentName;

        if (oChild instanceof sap.ui.core.ComponentContainer) {
            // name contains .Component - must be trimmed
            sComponentName = oChild.getComponentInstance().getMetadata().getName()
                .replace(/\.Component$/, "");
            jQuery.sap.log.debug("unloading component " + sComponentName, null, sCOMPONENT);
        }
        oContainer.destroyAggregation("child");
    }

    /**
     * Creates a new SAPUI5 view or component for the given container and makes it a child. A view
     * is created if the name ends with ".view.(viewType)".
     * @param {sap.ushell.components.container.ApplicationContainer} oContainer
     *   the container
     * @param {string} sUrl
     *   the base URL
     * @param {string} sAdditionalInformation
     *   the additional information in the form "SAPUI5=<view_or_component_name>"
     * @returns {sap.ui.core.mvc.View|sap.ui.core.Control}
     *   the view, or some "error" control
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function createUi5View(oContainer, sUrl, sAdditionalInformation) {
        /*jslint regexp: true */
        var oComponent,
            oControl,
            iIndex,
            iLast,
            aMatches,
            sNamespace,
            oViewData,
            sViewName,
            sViewType;

        iIndex = sUrl.indexOf("?");
        if (iIndex >= 0) {
            // pass GET parameters of URL via view data
            oViewData = getParameterMap(sUrl);
            sUrl = sUrl.slice(0, iIndex);
        }

        if (sUrl.slice(-1) !== '/') {
            sUrl += '/'; // ensure URL ends with a slash
        }

        if (/\.view\.(\w+)$/i.test(sAdditionalInformation)) {
            // ends with ".view.(viewType)": a view description
            // /SAPUI5=(namespace)/(viewName).view.(viewType)/
            aMatches = /^SAPUI5=(?:([^\/]+)\/)?([^\/]+)\.view\.(\w+)$/i.exec(sAdditionalInformation);
            if (!aMatches) {
                jQuery.sap.log.error("Invalid SAPUI5 URL", sAdditionalInformation, sCOMPONENT);
                return createErrorControl();
            }
            // determine namespace, view name, and view type
            sNamespace = aMatches[1];
            sViewName = aMatches[2];
            sViewType = aMatches[3].toUpperCase(); // @see sap.ui.core.mvc.ViewType

            if (sNamespace) {
                // prefix view name with namespace
                sViewName = sNamespace + "." + sViewName;
            } else {
                // derive namespace from view name's "package"
                iLast = sViewName.lastIndexOf(".");
                if (iLast < 1) {
                    jQuery.sap.log.error("Missing namespace", sAdditionalInformation, sCOMPONENT);
                    return createErrorControl();
                }
                sNamespace = sViewName.slice(0, iLast);
            }
        } else {
            // a component
            sNamespace = sAdditionalInformation.replace(/^SAPUI5=/, "");
        }

        jQuery.sap.registerModulePath(sNamespace, sUrl + sNamespace.replace(/\./g, '/'));

        // destroy the child control before creating a new control with the same ID
        destroyChild(oContainer);
        if (sViewName) {
            oControl = sap.ui.view({
                id: oContainer.getId() + "-content",
                type: sViewType,
                viewData: oViewData || {},
                viewName: sViewName
            });
            oContainer.fireEvent("applicationConfiguration");
        } else {
            jQuery.sap.log.debug("loading component " + sNamespace, null, sCOMPONENT);

            oComponent = sap.ui.component({
                id: oContainer.getId() + "-component",
                componentData: oViewData ? {startupParameters: oViewData} : {},
                name: sNamespace
            });
            //TODO ensure event is fired even in error case (try/catch)
            oContainer.fireEvent("applicationConfiguration",
                {"configuration": oComponent.getMetadata().getConfig()});
            oControl = new sap.ui.core.ComponentContainer({
                id: oContainer.getId() + "-content",
                component: oComponent
            });
        }
        oControl.setWidth(oContainer.getWidth());
        oControl.setHeight(oContainer.getHeight());
        oControl.addStyleClass("sapUShellApplicationContainer");
        // Note: As a composite control, we need to aggregate our children (at least internally)!
        oContainer.setAggregation("child", oControl, true);
        return oControl;
    }

    /**
     * Creates a new SAPUI5 component for the given container and makes it a child.
     * @param {sap.ushell.components.container.ApplicationContainer} oContainer
     *   the container
     * @param {string} sUrl
     *   the base URL
     * @param {string} sAdditionalInformation
     *   the additional information in the form "SAPUI5.Component=&lt;component-name&gt;"
     * @returns {sap.ui.core.ComponentContainer|sap.ui.core.Control}
     *   a componentContainer for the component or or some "error" control
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function createUi5Component(oContainer, sUrl, sComponentName) {
        /*jslint regexp: true */
        var iIndex,
            oComponent,
            oComponentContainer,
            oComponentData = {};

        iIndex = sUrl.indexOf("?");
        if (iIndex >= 0) {
            // pass GET parameters of URL via component data as member startupParameters (to allow
            // blending with other oComponentData usage, e.g. extensibility use case)
            oComponentData = { startupParameters : getParameterMap(sUrl) };
            sUrl = sUrl.slice(0, iIndex);
        }

        if (sUrl.slice(-1) !== '/') {
            sUrl += '/'; // ensure URL ends with a slash
        }
        // the root component's name is also the namespace for all component-internal modules; so
        // we register the URL (which must point to the component's folder) as module path;
        // TODO: clarify if there are requirements for additional path components
        jQuery.sap.registerModulePath(sComponentName, sUrl);

        // applications require these but should not load it, to degrade carefully
        // when running outside of the shell, so we must require this
        jQuery.sap.require("sap.ushell.services.CrossApplicationNavigation");

        // destroy the child control before creating a new control with the same ID
        destroyChild(oContainer);

        jQuery.sap.log.debug("loading component " + sComponentName, null, sCOMPONENT);

        oComponent = sap.ui.component({
            id: oContainer.getId() + "-component",
            name: sComponentName,
            componentData: oComponentData
        });
        //TODO ensure event is fired even in error case (try/catch)
        oContainer.fireEvent("applicationConfiguration",
                {"configuration": oComponent.getMetadata().getConfig()});
        oComponentContainer = new sap.ui.core.ComponentContainer({
            id: oContainer.getId() + "-content",
            component: oComponent
        });
        oComponentContainer.setHeight(oContainer.getHeight());
        oComponentContainer.setWidth(oContainer.getWidth());
        oComponentContainer.addStyleClass("sapUShellApplicationContainer");

        // Note: As a composite control, we need to aggregate our children (at least internally)!
        oContainer.setAggregation("child", oComponentContainer, true);

        return oComponentContainer;
    }

    /**
     * Creates a system object that describes the URL's server.
     * @param {string} sUrl
     *   the URL
     * @param {object}
     *   the system object with <code>alias</code>, <code>baseUrl</code> describing the URL's
     *   server and <code>client</code> the client from the request property
     *   <code>sap-client</code>.
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function createSystemForUrl(sUrl) {
        var oAnchor = document.createElement("a"),
            sClient = jQuery.sap.getUriParameters(sUrl).get("sap-client"),
            sBase;

        oAnchor.href = sUrl;
        sBase = oAnchor.protocol + "//" + oAnchor.host;
        return new sap.ushell.System({
            alias: sClient ? sBase + "?sap-client=" + sClient : sBase,
            baseUrl: sBase,
            client: sClient || undefined,
            platform: "abap"
        });
    }

    /**
     * Determine if the source of a received postMessage can be considered as trusted. We consider
     * the content window of the application container's iframe as trusted, plus any other window
     * with the same origin in case of application type NWBC.
     *
     * @param {object} oContainer
     *   the application container instance
     * @param {object} oMessage
     *   the postMessage event object
     * @returns {boolean}
     *   true if source is considered to be trustworthy
     * @private
     * @since 1.24
     */
    function isTrustedPostMessageSource(oContainer, oMessage) {
        var bTrusted = false,
            oDomRef = oContainer.getDomRef(),
            sApplicationType = oContainer.getApplicationType(),
            oUri,
            sOrigin;

        if (oDomRef) {
            if (sApplicationType === sap.ushell.components.container.ApplicationType.NWBC) {
                // if our frame embeds an NWBC application, we trust the frame itself and all frames from the same origin
                // this is required to support the WDA intent-based navigation scenario
                oUri = URI(oDomRef.src);
                sOrigin = oUri.protocol() + "://" + oUri.host();

                bTrusted = (oMessage.source === oDomRef.contentWindow) || (oMessage.origin === sOrigin);
            } else if (sApplicationType === sap.ushell.components.container.ApplicationType.URL) {
                // if our frame embeds an arbitrary URL application, we only trust it if it's from the same origin than our own page
                // for generalization of the feature, we would need some white list check here; right now, we need application type URL
                // only for testing
                oUri = URI();
                sOrigin = oUri.protocol() + "://" + oUri.host();

                bTrusted = (oMessage.origin === sOrigin);
            }
        }

        return bTrusted;
    }

    /**
     * Helper method for handling CrossApplicationNavigation service invocation via post message events
     * <p>
     * This feature is disabled by default, because it is not consumed by WebDynpro ABAP in version 1.24 (UI Add-on SP10).
     * It can be enabled via launchpad configuration as follows (not a public option, might be changed later):
     * <code>
     *  {
     *      services: {
     *          PostMessage: {
     *              config: {
     *                  enabled: true
     *              }
     *          }
     *      }
     *  }
     * </code>
     *
     * @param {object} oContainer the ApplicationContainer instance
     * @param {Event} oMessage
     *   the received postMessage event
     * @param {object] oMessageData the parsed message data
     *
     * @private
     * @since 1.24
     *
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function handleCrossApplicationNavigationMessageEvent(oContainer, oMessage, oMessageData) {
        // we anticipate the PostMessage service for the configuration although it's not there
        // (if it doesn't come, we'll just remove the configuration option)
        var oPostMessageServiceConfig = jQuery.sap.getObject("sap-ushell-config.services.PostMessage.config", 0),
            sService = oMessageData && oMessageData.service;

        if (!(sService && (sService.indexOf("sap.ushell.services.CrossApplicationNavigation") === 0))) {
            // silently ignore any other messages
            return;
        }

        if (!(oPostMessageServiceConfig && oPostMessageServiceConfig.enabled === true)) {
            jQuery.sap.log.error("Received message for CrossApplicationNavigation, but this feature is disabled."
                    + " It can be enabled via launchpad configuration property 'services.PostMessage.config.enabled: true'",
                    undefined, "sap.ushell.components.container.ApplicationContainer");
            return;
        }

        if (!isTrustedPostMessageSource(oContainer, oMessage)) {
            // log w/ warning level, message would normally processed by us
            jQuery.sap.log.warning("Received message from untrusted origin: " + oMessage.origin,
                    oMessage.data, "sap.ushell.components.container.ApplicationContainer");
            return;
        }

        if (oMessageData.service === "sap.ushell.services.CrossApplicationNavigation.hrefForExternal"
                && oMessageData.type === "request") {
            oMessage.source.postMessage(JSON.stringify({
                type: "response",
                service: oMessageData.service,
                request_id: oMessageData.request_id,
                status: "success",
                body: {
                    result: sap.ushell.Container.getService("CrossApplicationNavigation").hrefForExternal(oMessageData.body.args)
                }
            }), oMessage.origin);
        } else if (oMessageData.service === "sap.ushell.services.CrossApplicationNavigation.getSemanticObjectLinks") {
            try {
                sap.ushell.Container.getService("CrossApplicationNavigation")
                    .getSemanticObjectLinks(oMessageData.body.semanticObject, oMessageData.body.parameters, oMessageData.body.ignoreFormFactors)
                    .done(function (oResult) {
                        oMessage.source.postMessage(JSON.stringify({
                            type: "response",
                            service: oMessageData.service,
                            request_id: oMessageData.request_id,
                            status: "success",
                            body: {
                                result: oResult
                            }
                        }), oMessage.origin);
                    });
            } catch (oError) {
                oMessage.source.postMessage(JSON.stringify({
                    type: "response",
                    service: oMessageData.service,
                    request_id: oMessageData.request_id,
                    status: "error",
                    body: {
                        message: oError.message
                    }
                }), oMessage.origin);
            }
        } else if (oMessageData.service === "sap.ushell.services.CrossApplicationNavigation.isIntentSupported") {
            sap.ushell.Container.getService("CrossApplicationNavigation")
                .isIntentSupported(oMessageData.body.intents)
                .done(function (oResult) {
                    oMessage.source.postMessage(JSON.stringify({
                        type: "response",
                        service: oMessageData.service,
                        request_id: oMessageData.request_id,
                        status: "success",
                        body: {
                            result: oResult
                        }
                    }), oMessage.origin);
                });
        } else if (oMessageData.service === "sap.ushell.services.CrossApplicationNavigation.toExternal"
                && oMessageData.type === "request") {
            sap.ushell.Container.getService("CrossApplicationNavigation").toExternal(oMessageData.body.args);
            oMessage.source.postMessage(JSON.stringify({
                type: "response",
                service: oMessageData.service,
                request_id: oMessageData.request_id,
                status: "success",
                body: {}
            }), oMessage.origin);
        }
    }

    /**
     * Event handler receiving post message events
     *
     * @param {Event} oMessage
     *   the received postMessage event
     *
     * @private
     * @since 1.21.2
     *
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function handleMessageEvent(oContainer, oMessage) {
        var oMessageData = oMessage.data;


        if (typeof oMessageData === "string") {
            // it's possible that the data attribute is passed as string (IE9)
            try {
                oMessageData = JSON.parse(oMessage.data);
            } catch (e) {
                // could be some message which is not meant for us, so we just log with debug level
                jQuery.sap.log.debug(
                    "Message received from origin '" + oMessage.origin + "' cannot be parsed: " + e,
                    oMessageData,
                    "sap.ushell.components.container.ApplicationContainer"
                );
                return;
            }
        }
        // TODO: restructure if statement
        if (oMessageData.action === "pro54_setGlobalDirty" &&
                localStorage.getItem(oContainer.globalDirtyStorageKey) ===
                sap.ushell.Container.DirtyState.PENDING) {
            if (!isTrustedPostMessageSource(oContainer, oMessage)) {
                // log w/ warning level, message would normally processed by us
                jQuery.sap.log.warning("Received message from untrusted origin: " + oMessage.origin,
                        oMessageData, "sap.ushell.components.container.ApplicationContainer");
                return;
            }
            jQuery.sap.log.debug(
                "getGlobalDirty() pro54_setGlobalDirty SetItem key:"
                    + oContainer.globalDirtyStorageKey + " value: "
                    + oMessageData.parameters.globalDirty,
                null,
                "sap.ushell.components.container.ApplicationContainer"
            );
            sap.ushell.utils.localStorageSetItem(oContainer.globalDirtyStorageKey,
                oMessageData.parameters.globalDirty, true);
        } else {
            // delegate to separate method for CrossAppNavigation invocation
            handleCrossApplicationNavigationMessageEvent(oContainer, oMessage, oMessageData);
        }
    }

    /**
     * Logout Event Handler.
     * Calls the logout URL when the NWBC is used in the canvas.
     *
     * @param {sap.ushell.components.container.ApplicationContainer} oContainer
     *   application container having the NWBC iframe
     * @param {sap.ui.base.Event} oEvent
     *   oEvent.preventDefault() is called to let the caller know that the
     *   following redirect has to be deferred in order get the NWBC logout done.
     *
     * @private
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function logout(oContainer, oEvent) {
        var oIframe = oContainer.getDomRef();

        if (oContainer.getApplicationType() === sap.ushell.components.container.ApplicationType.NWBC
                && oIframe && oIframe.tagName === "IFRAME") {
            oIframe.contentWindow.postMessage(JSON.stringify(
                { action: "pro54_disableDirtyHandler"}
            ), '*');
            // tell caller that at least one NWBC needs some time to receive a message
            oEvent.preventDefault();
        }
    }

    /**
     * Renders the given child control inside a DIV representing the given container.
     *
     * @param {sap.ui.core.RenderManager} oRenderManager
     * @param {sap.ushell.components.container.ApplicationContainer} oContainer
     *     the application container which is "replaced" by the error control
     * @param {sap.ui.core.Control} [oChild]
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function renderControlInDiv(oRenderManager, oContainer, oChild) {
        oRenderManager
            .write("<div")
            .writeControlData(oContainer)
            .writeAccessibilityState(oContainer)
            .addClass("sapUShellApplicationContainer")
            .writeClasses(oContainer)
            .addStyle("height", oContainer.getHeight())
            .addStyle("width", oContainer.getWidth())
            .writeStyles()
            .write(">")
            .renderControl(oChild);
        oRenderManager
            .write("</div>");
    }

    /**
     * Renders the given container control with the help of the given render manager using the given
     * attributes.
     *
     * @param {sap.ui.core.RenderManager} oRenderManager
     * @param {sap.ushell.components.container.ApplicationContainer} oContainer
     * @param {sap.ushell.components.container.ApplicationType} sApplicationType
     *   the application type
     * @param {string} sUrl
     *   the base URL
     * @param {string} sAdditionalInformation
     *   the additional information in the form "SAPUI5=&lt;view name&gt;"
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function render(oRenderManager, oContainer, sApplicationType, sUrl, sAdditionalInformation) {
        var fnLogout;

        // remove container from list of NWBC-containing containers
        // (if this container was an NWBC container before)
        localStorage.removeItem(oContainer.globalDirtyStorageKey);

        // render as SAPUI5 component if specified in additionalInformation
        if (sAdditionalInformation
                && sAdditionalInformation.indexOf("SAPUI5.Component=") === 0
                && sApplicationType === sap.ushell.components.container.ApplicationType.URL) {
            renderControlInDiv(oRenderManager, oContainer,
                createUi5Component(oContainer, sUrl,
                    sAdditionalInformation.replace(/^SAPUI5\.Component=/, "")));
            return;
        }

        // render as SAPUI5 view if specified in additionalInformation
        if (sAdditionalInformation
                && sAdditionalInformation.indexOf("SAPUI5=") === 0
                && sApplicationType === sap.ushell.components.container.ApplicationType.URL) {
            renderControlInDiv(oRenderManager, oContainer,
                createUi5View(oContainer, sUrl, sAdditionalInformation));
            return;
        }
        jQuery.sap.log.debug("Not resolved as \"SAPUI5.Component=\" or \"SAPUI5=\" , " +
            "will attempt to load into iframe " + sAdditionalInformation);

        try {
            sUrl = oContainer.getFrameSource(sApplicationType, sUrl, sAdditionalInformation);
        } catch (ex) {
            jQuery.sap.log.error(ex.message || ex, null, sCOMPONENT);
            oContainer.fireEvent("applicationConfiguration");
            oRenderManager.renderControl(createErrorControl());
            return;
        }

        if (sap.ushell.Container) {
            fnLogout = getLogoutHandler(oContainer);
            if (!fnLogout) {
                if (sApplicationType === sap.ushell.components.container.ApplicationType.NWBC) {
                    // create only for NWBC if not already existing
                    fnLogout = logout.bind(null, oContainer);
                    mLogouts.put(oContainer.getId(), fnLogout);
                    sap.ushell.Container.attachLogoutEvent(fnLogout);
                    sap.ushell.Container.addRemoteSystem(createSystemForUrl(sUrl));
                }
            } else {
                if (sApplicationType !== sap.ushell.components.container.ApplicationType.NWBC) {
                    // detach if not used *anymore*
                    sap.ushell.Container.detachLogoutEvent(fnLogout);
                    mLogouts.remove(oContainer.getId());
                }
            }
        }

        if (sApplicationType === sap.ushell.components.container.ApplicationType.NWBC) {
            // add this container to list of NWBC-containing containers
            sap.ushell.utils.localStorageSetItem(oContainer.globalDirtyStorageKey,
                sap.ushell.Container.DirtyState.INITIAL);
        }

        // embed URL via <IFRAME>
        oContainer.fireEvent("applicationConfiguration");
        oRenderManager
            .write("<iframe")
            .writeControlData(oContainer)
            .writeAccessibilityState(oContainer)
            .writeAttributeEscaped("src", sUrl)
            .addClass("sapUShellApplicationContainer")
            .writeClasses(oContainer)
            .addStyle("height", oContainer.getHeight())
            .addStyle("width", oContainer.getWidth())
            .writeStyles()
            .write("></iframe>");
    }

    /**
     * Creates a new container control embedding the application with the given URL. The default
     * application type is "URL" and allows to embed web applications into an <code>IFRAME</code>.
     * By default, the container is visible and occupies the whole width and height of its parent.
     *
     * @class A container control capable of embedding a variety of application types.
     * <p>
     * <strong>Experimental API: This container is still under construction, so some
     * implementation details can be changed in future.</strong>
     * </p><p>
     * <b>Note:</b> The browser does not allow to move an <code>IFRAME</code> around in the DOM
     * while keeping its state. Thus every rerendering of this control necessarily resets the
     * embedded web application to its initial state!
     * </p><p>
     * <b>Note:</b> You <b>must</b> <code>exit</code> the control when you no longer need it.
     *
     * </p><p>
     * <b>Embedding SAPUI5 Components:</b>
     * </p><p>
     * The container is able to embed an SAPUI5 component. It is embedded directly into the page,
     * no <code>IFRAME</code> is used.
     * </p><p>
     * SAPUI5 components are described with <code>applicationType</code> "URL", a base URL and the
     * component name in <code>additionalInformation</code>. The format is
     * <code>SAPUI5=<i>componentNamespace</i></code>. The application container will register a
     * module path for the URL with the component's namespace.
     * </p><p>
     * The query parameters from the URL will be passed into the component. They can be retrieved
     * using the method <code>getComponentData()</code>. Query parameters are always passed as
     * arrays (see example 2 below).
     * </p><p>
     * <b>Example 1:</b> Let <code>url</code> be "http://anyhost:1234/path/to/app" and
     * <code>additionalInformation</code> be "SAPUI5=some.random.package". Then the
     * container registers the path "http://anyhost:1234/path/to/app/some/random/package" for the
     * namespace "some.random.package", loads and creates "some.random.package.Component".
     * </p><p>
     * <b>Example 2:</b> Let <code>url</code> be "http://anyhost:1234/?foo=bar&foo=baz&bar=baz".
     * Then the <code>componentData</code> object will be
     * <code>{foo: ["bar", "baz"], bar: ["baz"]}</code>.
     * </p><p>
     * <b>Warning:</b> The container control embeds a <i>component</i> only. This can only work if
     * this component is fully encapsulated and properly declares all dependencies in its metadata
     * object. If you want to support that your component can be embedded into a shell using this
     * container, you have to prepare it accordingly:
     * <ul>
     * <li>The container control can only embed components that originate on the same server as the
     * shell due to the browser's same origin policy. Consider using an SAP Web Dispatcher if this
     * is not the case.
     * <li>If your component relies on some additional Javascript, declare the dependencies to
     * libraries or other components in the component's metadata object.
     * <li>Do <i>not</i> use <code>jQuery.sap.registerModulePath()</code> with a relative URL. The
     * base for this relative URL is the web page. And this page is the shell when embedding the
     * component via the container, not the page you used when developing the component.
     * <li>If your component needs additional styles, declare them using the <code>includes</code>
     * property of the component metadata object.
     * <li> Consider calling <code>jQuery.sap.getModulePath(&lt;componentName&gt;)</code> to
     * determine the root path of your component.
     * <li>If any of these requirements is not met, it is still possible to embed this view with
     * its own page using <code>applicationType="URL"</code>, no <code>additionalInformation</code>
     * and the URL of the web page in <code>url</code>. Then of course it is embedded using an
     * <code>IFRAME</code>. This has many limitations, especially the resource-based navigation
     * using hash changes will not be supported.
     * </ul>
     *
     * </p><p>
     * <b>Embedding SAPUI5 Views</b>
     * <p>
     * Embedding views is <strong>deprecated</strong> and might not be supported in future versions.
     * </p>
     * <p>
     * It is also possible to embed a SAPUI5 view. It is embedded directly into the page, no
     * <code>IFRAME</code> is used.
     * </p><p>
     * SAPUI5 views are described with <code>applicationType</code> "URL", a base URL and the view
     * description in <code>additionalInformation</code>. The format is
     * <code>SAPUI5=<i>namespace</i>.<i>viewName</i>.view.<i>viewType</i></code>. From
     * this information the module path and the view URL is determined. Request parameters present
     * in the URL will be passed to the created view and can be accessed via
     * <code>sap.ui.core.mvc.View#getViewData()</code>. The object passed to the view data is the
     * same as describe for the component data above.
     * </p><p>
     * <b>Warning:</b> The container control embeds a <i>view</i> only. So similar restrictions
     * as for components apply. Since the view has no metadata object to describe dependencies you
     * will have to use <code>jQuery.sap.require()</code> to load needed modules and
     * <code>jQuery.sap.includeStyleSheet()</code> to load additional styles.
     *
     * @extends sap.ui.core.Control
     * @name sap.ushell.components.container.ApplicationContainer
     * @since 1.15.0
     *
     * @property {string} [additionalInformation=""]
     *   Additional information about the application. Currently this is used to describe a SAPUI5
     *   component or a view in a SAPUI5 application.
     * @property {object} [application]
     *   The application descriptor as received from the start-up service. If an application is
     *   given the properties <code>url</code>, <code>applicationType</code> and
     *   <code>additionalInformation</code> are taken from the application and <i>not</i> from the
     *   control properties.
     * @property {sap.ushell.components.container.ApplicationType} [applicationType="URL"]
     *   The type of the embedded application.
     * @property {sap.ui.core.CSSSize} [height="100%"]
     *   The container's height as a CSS size. This attribute is provided to the browser "as is"!
     *   <b>Note:</b> The HTML 4.01 specification allows pixels and percentages,
     *   but the HTML 5 specification allows pixels only!
     * @property {string} url
     *   The URL to the embedded application.
     * @property {boolean} [visible="true"]
     *   Whether the container control is visible at all. <b>Note:</b> An invisible container does
     *   not render any DOM content. Changing the visibility leads to rerendering!
     * @property {sap.ui.core.CSSSize} [width="100%"]
     *   The container's width as a CSS size. This attribute is provided to the browser "as is"!
     *   <b>Note:</b> The HTML 4.01 specification allows pixels and percentages,
     *   but the HTML 5 specification allows pixels only!
     */
    /**
     * Event which is fired when the <code>ApplicationContainer</code> control is rendered. The
     * event holds a technology specific configuration object for the embedded application.
     * As of now, only configuration for an embedded <em>SAPUI5 component</em> is supported.
     *
     * @event
     * @name sap.ushell.components.container.ApplicationContainer.applicationConfiguration
     * @param {object} configuration
     *     The technology specific configuration object of the embedded application.
     *     <code>undefined</code>, if the <code>ApplicationContainer</code> control does not
     *     provide a configuration for the technology of the embedded application or if there is a
     *     rendering issue with the application.<br/>
     *     For SAPUI5 components, the <code>config</code> property of the component metadata is
     *     provided.
     *
     * @public
     */
    sap.ui.core.Control.extend(sCOMPONENT, {
        metadata: {
            properties: {
                additionalInformation: {defaultValue: "", type: "string"},
                application: {type: "object"},
                applicationType: {defaultValue: "URL", type: sPREFIX + "ApplicationType"},
                height: {defaultValue: "100%", type: "sap.ui.core.CSSSize"},
                url: {defaultValue: "", type: "string"},
                visible: {defaultValue: true, type: "boolean"},
                width: {defaultValue: "100%", type: "sap.ui.core.CSSSize"}
            },
            events: {
                "applicationConfiguration": {}
            },
            aggregations: {
                child: {multiple: false, type: "sap.ui.core.Control", visibility: "hidden"}
            },
            library: "sap.ushell"
        },

        exit: function () {
            var fnLogout;
            if (sap.ushell.Container) {
                fnLogout = getLogoutHandler(this);
                if (fnLogout) {
                    sap.ushell.Container.detachLogoutEvent(fnLogout);
                    mLogouts.remove(this.getId());
                }
            }
            // remove container from list of NWBC-containing containers
            // (if this container was an NWBC container before)
            localStorage.removeItem(this.globalDirtyStorageKey);

            // remove all event listeners
            if (this._unloadEventListener) {
                removeEventListener("unload", this._unloadEventListener);
            }

            if (this._storageEventListener) {
                removeEventListener("storage", this._storageEventListener);
            }

            if (this._messageEventListener) {
                removeEventListener("message", this._messageEventListener);
            }

            destroyChild(this);

            // just to be sure in case it will be added some time
            if (sap.ui.core.Control.exit) {
                sap.ui.core.Control.exit.apply(this);
            }
        },

        /**
         * Initialization of <code>ApplicationContainer</code> instance.
         */
        init: function () {
            var that = this;
            this.globalDirtyStorageKey = sDIRTY_STATE_PREFIX + jQuery.sap.uid();

            // be sure to remove entry from list of NWBC-containing containers
            // when the window is closed
            this._unloadEventListener = this.exit.bind(this);
            addEventListener("unload", this._unloadEventListener); //TODO doesn't work in IE9 when F5 is pressed?!

            this._storageEventListener =  function (oStorageEvent) {
                if (oStorageEvent.key === that.globalDirtyStorageKey
                        && oStorageEvent.newValue ===  sap.ushell.Container.DirtyState.PENDING
                        && that.getApplicationType() ===
                            sap.ushell.components.container.ApplicationType.NWBC) {
                    var oIframe = that.getDomRef();
                    if (oIframe && oIframe.tagName === "IFRAME") {
                        jQuery.sap.log.debug(
                            "getGlobalDirty() send pro54_getGlobalDirty ",
                            null,
                            "sap.ushell.components.container.ApplicationContainer"
                        );
                        oIframe.contentWindow.postMessage(
                            JSON.stringify({action: "pro54_getGlobalDirty"}),
                            '*'
                        );
                    }
                }
            };
            addEventListener('storage', this._storageEventListener);

            this._messageEventListener = handleMessageEvent.bind(null, this);
            addEventListener('message', this._messageEventListener);
        },

        /**
         * Renders the given container control with the help of the given render manager.
         *
         * @param {sap.ui.core.RenderManager} oRenderManager
         * @param {sap.ushell.components.container.ApplicationContainer} oContainer
         *
         * @private
         */
        renderer: function (oRenderManager, oContainer) {
            // Note: "this" refers to the renderer instance, which does not matter here!
            var oApplication = oContainer.getApplication(),
                oLaunchpadData = oContainer.launchpadData,
                oLoadingIndicator;

            if (!oContainer.getVisible()) {
                // Note: even invisible controls need to render their ID for later re-rendering
                renderControlInDiv(oRenderManager, oContainer);
                return;
            }

            if (oContainer.error) {
                delete oContainer.error;
                renderControlInDiv(oRenderManager, oContainer, createErrorControl());
            } else if (!oApplication) {
                // the standard properties
                render(oRenderManager, oContainer, oContainer.getApplicationType(),
                    oContainer.getUrl(), oContainer.getAdditionalInformation());
            } else if (!oApplication.isResolvable()) {
                // the standard application data
                render(oRenderManager, oContainer, oApplication.getType(),
                    oApplication.getUrl(), "");
            } else if (oLaunchpadData) {
                // the application, already resolved
                // Note that ResolveLink appends a "?" to the URL if additionalData (aka
                // additionalInformation) is supplied.
                render(oRenderManager, oContainer, oLaunchpadData.applicationType,
                    oLaunchpadData.Absolute.url.replace(/\?$/, ""),
                    oLaunchpadData.applicationData);
            } else {
                jQuery.sap.log.debug("Resolving " + oApplication.getUrl(), null,
                    sCOMPONENT);

                oApplication.resolve(function (oResolved) {
                    jQuery.sap.log.debug("Resolved " + oApplication.getUrl(),
                        JSON.stringify(oResolved),
                        sCOMPONENT);
                    // TODO where to keep the internal property launchpadData? At the Application!
                    oContainer.launchpadData = oResolved;
                    destroyChild(oContainer);
                }, function (sError) {
                    var fnApplicationErrorHandler = oApplication.getMenu().getDefaultErrorHandler();
                    if (fnApplicationErrorHandler) {
                        fnApplicationErrorHandler(sError);
                    }
                    destroyChild(oContainer);
                    oContainer.error = sError;
                });
                oLoadingIndicator = new sap.m.Text({
                    text: getTranslatedText("loading", [oApplication.getText()])
                });
                destroyChild(oContainer);
                oContainer.setAggregation("child", oLoadingIndicator);
                renderControlInDiv(oRenderManager, oContainer, oLoadingIndicator);
            }
        }
    });

    /**
     * Returns the resulting source URL for the (internal) frame used to embed the given application.
     * This hook method may be overridden; we recommend to replace it per object, not at the
     * prototype.
     * <p>
     * The default implementation returns the URL "as is", but checks that the given application
     * type is one of <code>sap.ushell.components.container.ApplicationType</code> and throws
     * an error in case it is not. It ignores the additional information.
     * <p>
     * You may want to end your implementation with
     * <code>return
     * sap.ushell.components.container.ApplicationContainer.prototype.getFrameSource.call(this,
     * sApplicationType, sUrl, sAdditionalInformation);</code> in order to reuse the default
     * behavior. To override the error checks, simply replace any additional application types you
     * wish to support with <code>sap.ushell.components.container.ApplicationType.URL</code>.
     *
     * @param {sap.ushell.components.container.ApplicationType} sApplicationType
     *   the application type
     * @param {string} sUrl
     *   the base URL
     * @param {string} sAdditionalInformation
     *   the additional information
     * @returns {string}
     * @since 1.15.0
     */
    sap.ushell.components.container.ApplicationContainer.prototype.getFrameSource
        = function (sApplicationType, sUrl, sAdditionalInformation) {
            if (!Object.prototype.hasOwnProperty.call(
                    sap.ushell.components.container.ApplicationType,
                    sApplicationType
                )) {
                // Note: do not use sap.ushell.utils.Error here as the exception is already caught
                // and logged in render()
                throw new Error("Illegal application type: " + sApplicationType);
            }
            return sUrl;
        };
}());

}; // end of sap/ushell/components/container/ApplicationContainer.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.controls.PictureTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.components.factsheet.controls.PictureTile.
jQuery.sap.declare("sap.ushell.components.factsheet.controls.PictureTile");

jQuery.sap.require('sap.m.CustomTile'); // unlisted dependency retained



/**
 * Constructor for a new components/factsheet/controls/PictureTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '32px')</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '32px')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getTileContent tileContent} : string | sap.ushell.components.factsheet.controls.PictureViewerItem</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.components.factsheet.controls.PictureTile#event:pictureDelete pictureDelete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.CustomTile#constructor sap.m.CustomTile}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Tile control embedding an image and allowing custom sizing
 * @extends sap.m.CustomTile
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.CustomTile.extend("sap.ushell.components.factsheet.controls.PictureTile", { metadata : {

	library : "sap.ushell",
	properties : {
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '32px'},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '32px'}
	},
	associations : {
		"tileContent" : {type : "sap.ushell.components.factsheet.controls.PictureViewerItem", multiple : false}
	},
	events : {
		"pictureDelete" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.components.factsheet.controls.PictureTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.components.factsheet.controls.PictureTile.extend
 * @function
 */

sap.ushell.components.factsheet.controls.PictureTile.M_EVENTS = {'pictureDelete':'pictureDelete'};


/**
 * Getter for property <code>height</code>.
 * height (in pixels) of the picture viewer control.
 *
 * Default value is <code>32px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>32px</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ushell.components.factsheet.controls.PictureTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile#setHeight
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * width (in pixels) of the picture viewer control.
 *
 * Default value is <code>32px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>32px</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ushell.components.factsheet.controls.PictureTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile#setWidth
 * @function
 */


/**
 * Reference to one PictureViewerItem coming from the PictureViewer.
 *
 * @return {string} Id of the element which is the current target of the <code>tileContent</code> association, or null
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile#getTileContent
 * @function
 */

/**
 * Reference to one PictureViewerItem coming from the PictureViewer.
 *
 * @param {string | sap.ushell.components.factsheet.controls.PictureViewerItem} vTileContent 
 *    Id of an element which becomes the new target of this <code>tileContent</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ushell.components.factsheet.controls.PictureTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile#setTileContent
 * @function
 */


	
/**
 * Fired when the user deletes a picture
 *
 * @name sap.ushell.components.factsheet.controls.PictureTile#pictureDelete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'pictureDelete' event of this <code>sap.ushell.components.factsheet.controls.PictureTile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.components.factsheet.controls.PictureTile</code>.<br/> itself. 
 *  
 * Fired when the user deletes a picture
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.components.factsheet.controls.PictureTile</code>.<br/> itself.
 *
 * @return {sap.ushell.components.factsheet.controls.PictureTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile#attachPictureDelete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'pictureDelete' event of this <code>sap.ushell.components.factsheet.controls.PictureTile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.components.factsheet.controls.PictureTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile#detachPictureDelete
 * @function
 */

/**
 * Fire event pictureDelete to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.components.factsheet.controls.PictureTile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.components.factsheet.controls.PictureTile#firePictureDelete
 * @function
 */


// Start of sap/ushell/components/factsheet/controls/PictureTile.js

sap.ushell.components.factsheet.controls.PictureTile.prototype.init = function(oTileContent) {
	
	this._oDeletePictureButton = new sap.m.Button({
        icon:"sap-icon://sys-cancel",
        press: jQuery.proxy(this._deletePictureRequestHandler, this),
        type: sap.m.ButtonType.Transparent
    }).addStyleClass("sapCaUiPTDeleteButton");
	
	if (!sap.ui.Device.system.desktop) {
		 this.attachPress(this._tilePressedHandler);
		 this.attachBrowserEvent("swipe", jQuery.proxy(this._tileSwipedHandler, this));
		 this._oDeletePictureButton.addStyleClass("hide");
	}
};

    
/**
 * Reference to one PictureViewerItem coming from the PictureViewer.
 *
 * @override
 * @param {string | sap.ushell.components.factsheet.controls.PictureViewerItem} vTileContent
 *    Id of an element which becomes the new target of this <code>tileContent</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ushell.components.factsheet.controls.PictureTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile#setTileContent
 * @function
 */
sap.ushell.components.factsheet.controls.PictureTile.prototype.setTileContent = function(oTileContent) {
	this.setContent(null);
	if (oTileContent) {
        var image = oTileContent.getImage();
        
//		if (sap.ui.Device.system.desktop) {
			this.setContent(image);
//		} else {
//			this.setContent(new sap.ca.ui.ZoomableScrollContainer({
//				content : oTileContent.getImage()
//			}));
//		}
		
	} else {
		this.setContent(null);
	}
	this.setAssociation("tileContent", oTileContent);
};



/**
 * Sets the pixel size of the tile 
 * @param {int} iWidth width
 * @param {int} iHeight height
 * @private
 */ 
sap.ushell.components.factsheet.controls.PictureTile.prototype.setSize = function(iWidth,iHeight){

	this._width = iWidth;
	this._height = iHeight;
	
	var $this = this.$();
	if ($this){
		$this.css({width: iWidth+"px", height: iHeight+"px"});
		
		// adding this class later because display: inline-block is causing issue for width/height calculation
		jQuery.sap.byId(this.getId()+"-wrapper").addClass("sapCaUiPTWrapper");
	}
};


sap.ushell.components.factsheet.controls.PictureTile.prototype._tilePressedHandler = function (oEvent) {	
    this.switchVisibility();
};

sap.ushell.components.factsheet.controls.PictureTile.prototype.switchVisibility = function (bVisible) {
	var $delBtn = this._oDeletePictureButton.$();
	if (bVisible === undefined){
		$delBtn.toggleClass("hide");
	}
	else {
		$delBtn.toggleClass("hide", !bVisible);	
	}
	
	
};

sap.ushell.components.factsheet.controls.PictureTile.prototype._tileSwipedHandler = function (oEvent) {
    var $deleteBtn = this._oDeletePictureButton.$();
    if ($deleteBtn && !$deleteBtn.hasClass("hide")){
    	$deleteBtn.addClass("hide");
    		
    }	
};

/**
 * 
 */
sap.ushell.components.factsheet.controls.PictureTile.prototype._deletePictureRequestHandler = function () {

	this.firePictureDelete();
    
};


}; // end of sap/ushell/components/factsheet/controls/PictureTile.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.controls.PictureViewer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.components.factsheet.controls.PictureViewer.
jQuery.sap.declare("sap.ushell.components.factsheet.controls.PictureViewer");

jQuery.sap.require('sap.m.TileContainer'); // unlisted dependency retained



/**
 * Constructor for a new components/factsheet/controls/PictureViewer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTileScaling tileScaling} : float (default: 0.95)</li>
 * <li>{@link #getRemovable removable} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.ushell.components.factsheet.controls.PictureViewerItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.components.factsheet.controls.PictureViewer#event:pictureDeleted pictureDeleted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.TileContainer#constructor sap.m.TileContainer}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Picture viewer control relying on the TileContainer control
 * @extends sap.m.TileContainer
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.TileContainer.extend("sap.ushell.components.factsheet.controls.PictureViewer", { metadata : {

	library : "sap.ushell",
	properties : {
		"tileScaling" : {type : "float", group : "Misc", defaultValue : 0.95},
		"removable" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	defaultAggregation : "items",
	aggregations : {
		"items" : {type : "sap.ushell.components.factsheet.controls.PictureViewerItem", multiple : true, singularName : "item"}
	},
	events : {
		"pictureDeleted" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.components.factsheet.controls.PictureViewer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.components.factsheet.controls.PictureViewer.extend
 * @function
 */

sap.ushell.components.factsheet.controls.PictureViewer.M_EVENTS = {'pictureDeleted':'pictureDeleted'};


/**
 * Getter for property <code>tileScaling</code>.
 * Percentage of the space occupied by the image in the picture viewer control. Please note that if the factor is too close to 1, the navigation arrows usually displayed in desktop mode will not be available
 *
 * Default value is <code>0.95</code>
 *
 * @return {float} the value of property <code>tileScaling</code>
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#getTileScaling
 * @function
 */

/**
 * Setter for property <code>tileScaling</code>.
 *
 * Default value is <code>0.95</code> 
 *
 * @param {float} fTileScaling  new value for property <code>tileScaling</code>
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#setTileScaling
 * @function
 */


/**
 * Getter for property <code>removable</code>.
 * Defines whether or not you can remove a picture
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>removable</code>
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#getRemovable
 * @function
 */

/**
 * Setter for property <code>removable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bRemovable  new value for property <code>removable</code>
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#setRemovable
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * Aggregation of PictureViewerItem that contains either a picture URI or the actual Image control.
 * 
 * <strong>Note</strong>: this is the default aggregation for components/factsheet/controls/PictureViewer.
 * @return {sap.ushell.components.factsheet.controls.PictureViewerItem[]}
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ushell.components.factsheet.controls.PictureViewerItem}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ushell.components.factsheet.controls.PictureViewerItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ushell.components.factsheet.controls.PictureViewerItem} vItem the item to remove or its index or id
 * @return {sap.ushell.components.factsheet.controls.PictureViewerItem} the removed item or null
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ushell.components.factsheet.controls.PictureViewerItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ushell.components.factsheet.controls.PictureViewerItem</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ushell.components.factsheet.controls.PictureViewerItem}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#destroyItems
 * @function
 */


/**
 * Thrown when user delete an image
 *
 * @name sap.ushell.components.factsheet.controls.PictureViewer#pictureDeleted
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'pictureDeleted' event of this <code>sap.ushell.components.factsheet.controls.PictureViewer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.components.factsheet.controls.PictureViewer</code>.<br/> itself. 
 *  
 * Thrown when user delete an image
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.components.factsheet.controls.PictureViewer</code>.<br/> itself.
 *
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#attachPictureDeleted
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'pictureDeleted' event of this <code>sap.ushell.components.factsheet.controls.PictureViewer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#detachPictureDeleted
 * @function
 */

/**
 * Fire event pictureDeleted to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.components.factsheet.controls.PictureViewer#firePictureDeleted
 * @function
 */


// Start of sap/ushell/components/factsheet/controls/PictureViewer.js
jQuery.sap.declare("sap.ushell.components.factsheet.controls.PictureViewer");
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained

jQuery.sap.require('sap.m.TileContainer'); // unlisted dependency retained


sap.ushell.components.factsheet.controls.PictureViewer.prototype.init = function () {

    sap.m.TileContainer.prototype.init.apply(this);
    this.setEditable(false);

    if (sap.ui.getCore().isMobile()){
		jQuery(window).bind("tap", jQuery.proxy(this._reset, this));
        var oStaticArea = sap.ui.getCore().getStaticAreaRef();
        this.$blocker = jQuery("<div class='sapCaPVBly sapUiBLy'></div>").css("visibility", "hidden");
        jQuery(oStaticArea).append(this.$blocker);
	}
    if (sap.ui.getCore().isMobile()) {
        //sap.ui.Device.orientation.attachHandler(jQuery.proxy(this._onOrientationChange, this));
    }
    else {
        jQuery(window).bind("resize", jQuery.proxy(this._resize, this));
    }

    this.addStyleClass("sapCaPW");
    
    // onBeforeRendering() is not called the first time
    this.addStyleClass("sapCaPWRendering");


};

/**
 * Handles the resize event for the tile container.
 * This is called whenever the orientation of browser size changes.
 * @private
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype._resize = function() {
    if (this._oDragSession) {
        return;
    }

    setTimeout(jQuery.proxy(function() {
        this._applyDimension();
        this._update(false);
        delete this._iInitialResizeTimeout;
    },this),
        this._iInitialResizeTimeout);

    this._iInitialResizeTimeout = 0; //now we do not need to wait
};

sap.ushell.components.factsheet.controls.PictureViewer.prototype.exit = function () {

    this.$blocker.remove();

    if (sap.ui.getCore().isMobile()) {
        //sap.ui.Device.orientation.detachHandler(jQuery.proxy(this._onOrientationChange, this));
    }
    else {
        jQuery(window).unbind("resize", jQuery.proxy(this._resize, this));
    }

    sap.m.TileContainer.prototype.exit.apply(this);

	if (!sap.ui.Device.system.desktop){
		jQuery(window).unbind("tap", jQuery.proxy(this._reset, this));	
	}
};

/**
 * Set the percentage of the space occupied by the image in the picture viewer control.
 * Please note that if the factor is too close to 1, the navigation arrows usually displayed in desktop mode will not be available
 * @override
 * @public
 * @param fTileScale
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype.setTileScaling = function (fTileScale) {
    if (fTileScale < 0 || fTileScale > 1) {
        fTileScale = 0.75;
        jQuery.sap.log.error("Tile Scaling should be a float value between 0 and 1 and not " + fTileScale
            + ". Setting it to 0.75 by default.");
    }
    this.setProperty('tileScaling', fTileScale);
};

/**
 * Adds some item <code>oItem</code>
 * to the aggregation named <code>items</code>.
 *
 * @override
 * @param {sap.ushell.components.factsheet.controls.PictureViewerItem}
    *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#addItem
 * @function
 *
 * @deprecated Use aggregation "tiles"
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype.addItem = function (oItem) {
    this.insertItem(oItem, this.getItems().length);
};

/**
 * Inserts a item into the aggregation named <code>items</code>.
 * When adding a new item to the aggregation, a sap.ca.ui.PictureTile is actually created
 * with its own ID and added to the internal TileContainer.
 *
 * @override
 * @param {sap.ushell.components.factsheet.controls.PictureViewerItem}
    *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
    *             iIndex the <code>0</code>-based index the item should be inserted at; for
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *             greater than the current size of the aggregation, the item is inserted at
 *             the last position
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#insertItem
 * @function
 *
 * @deprecated Use aggregation "tiles"
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype.insertItem = function (oItem, iIndex) {

    var tileToAdd = new sap.ushell.components.factsheet.controls.PictureTile({
    	tileContent:oItem
    });
    tileToAdd.attachPictureDelete(jQuery.proxy(this._deletePictureRequestHandler, this));

    this.insertTile(tileToAdd, iIndex);
    this.insertAggregation("items", oItem, iIndex);

    return this;
};



sap.ushell.components.factsheet.controls.PictureViewer.prototype.insertTile = function (oTile, iIndex) {

	oTile.attachPictureDelete(jQuery.proxy(this._deletePictureRequestHandler, this));
	sap.m.TileContainer.prototype.insertTile.apply(this, arguments);
};


sap.ushell.components.factsheet.controls.PictureViewer.prototype.deleteTile = function (oTile) {
	sap.m.TileContainer.prototype.deleteTile.apply(this, arguments);
	
	oTile.destroy();
};


/**
 * Removes the picture at index <code>iIndex</code> from the <code>items</code> aggregation.
 *
 * @override
 * @param {sap.ushell.components.factsheet.controls.PictureViewerItem}
    *          iIndex the index of the picture to delete; if empty, the current picture is deleted
 * @param {int}
    *             iIndex the <code>0</code>-based index of the picture collection to delete;
 *             if <code>iIndex</code> is out of range or empty, the current image will be deleted.
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#deletePicture
 * @function
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype.deletePicture = function (iIndex) {

    var pictureTileIndexToDelete, pictureTileToDelete, numberOfPictures;
    numberOfPictures = this.getTiles().length;

    if (typeof iIndex != "number" || iIndex < 0 || iIndex >= numberOfPictures) {
        pictureTileIndexToDelete = this.getPageFirstTileIndex();
    } 
    else {
        pictureTileIndexToDelete = iIndex;
    }

    if (pictureTileIndexToDelete > -1) {
        pictureTileToDelete = this.getTiles()[pictureTileIndexToDelete];
        pictureTileToDelete.detachPictureDelete(jQuery.proxy(this._deletePictureRequestHandler, this));
        this.deleteTile(pictureTileToDelete);
        this.removeAggregation("items", pictureTileIndexToDelete, true);
    }
    else {
    	jQuery.sap.log.warning("Cannot find and delete a picture at index : " + iIndex);
    }

    return this;
};

/**
 * Select the picture at index <code>iIndex</code> from the <code>items</code> aggregation.
 *
 * @override
 * @param {sap.ushell.components.factsheet.controls.PictureViewerItem}
    *          iIndex the index of the picture to select; if empty, the first picture is selected
 * @param {int}
    *             iIndex the <code>0</code>-based index of the aggregation to select; for
 *             a negative value of <code>iIndex</code>, the picture at position 0 is selected; for a value
 *             greater than the current size of the aggregation, the selected picture at the last position is selected
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#selectPicture
 * @function
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype.selectPicture = function (iIndex) {

    var numberOfPictures = this.getTiles().length;

    if (typeof iIndex != "number") {
        iIndex = 0;
    }
    else if (iIndex < 0) {
        iIndex = 0;
    }
    else if (iIndex >= numberOfPictures) {
        iIndex = numberOfPictures - 1;
    }

    if (this._bRendered) {
    	this.addStyleClass("sapCaPWRendering");
    }
    else {    	
    }
    this._selectedIndex = iIndex;
    
    
    return this;
};
sap.ushell.components.factsheet.controls.PictureViewer.prototype.setSelectedIndex = function (iIndex) {
	this.selectPicture(iIndex);
};

/**
 * Gets the current picture index.
 *
 * @override
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} the current picture index
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#getCurrentPictureIndex
 * @function
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype.getCurrentPictureIndex = function () {
    return this.getPageFirstTileIndex();
};

/**
 * Gets the image index from the TileContainer and fires an event
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype._deletePictureRequestHandler = function (oEvent) {

	var pictureTileIndexToDelete = this.indexOfTile(oEvent.getSource());
	
	this.deleteTile(oEvent.getSource());
	
	this.firePictureDeleted({
        index:pictureTileIndexToDelete
    });
	
	
};



/**
 * Get rid of potential visible "delete" button 
 * 
 * Only used on mobile devices
 * 
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype._reset = function (oEvent) {
	var i = this.getCurrentPictureIndex();
	
	var aTiles = this.getTiles();
	if (i > -1 && aTiles && aTiles.length > i){
		var oTile = aTiles[i];
		if (oTile){
			
			var $target = jQuery(oEvent.target);
			var $this = this.$();
			if ($this.length > 0 && $target.length > 0){
				
				
				var $parent = $target.closest(this.$());
				
				if ($parent.length === 0){ // the "tap" was outside the PictureViewer
					oTile.switchVisibility(false);
				}
				
			}
		}
		
	}
};

/**
 * Specify whether or not you can delete a picture.
 * If FALSE the delete button will never be visible. Default value is TRUE
 * @override
 * @public
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype.setRemovable = function (bValue) {
	
	this.setProperty("removable",bValue,true);	
	this.toggleStyleClass("sapCaPWEditable",bValue);
	
};

sap.ushell.components.factsheet.controls.PictureViewer.prototype.setEditable = function(bValue){
	// set Editable to false no matter what
	sap.m.TileContainer.prototype.setEditable.call(this, false);	
};


/**
 * Returns the dimension (width and height) of a tile
 * @returns {object} width and height of a tile
 * @private
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype._getTileDimension = function() {

    if (!this._bRendered)
        return;

    var $scroller = jQuery.sap.byId(this.getId()+"-scrl");
    var oTileDim = {
        width  : $scroller.width(),
        height : $scroller.height()
    };
    return oTileDim;
};


sap.ushell.components.factsheet.controls.PictureViewer.prototype.onBeforeRendering = function() {

    this.addStyleClass("sapCaPWRendering");
    
};

/**
 * Handles the internal event onAfterRendering
 * @private
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype.onAfterRendering = function() {
	
	var that = this;
	this._bRendered = true;
	//init resizing
	//this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef().parentElement,  jQuery.proxy(this._resize, this));
    

	//init the dimensions to the container scoll area 
	this._applyDimension();
	this.$().toggleClass("sapCaPWEditable",this.getRemovable() === true);
	this._sInitialResizeTimeoutId = setTimeout(function() {			
			that.addStyleClass("sapCaPWRendering");
			that._applyPageStartIndex(that._selectedIndex);
			
			that._update(false);
			
		}, this._iInitialResizeTimeout);
	
	//Set initial focus
	if(sap.ui.Device.system.desktop) {
		var oFocusTile = this.getTiles()[0],
			iTimeout = this._iInitialResizeTimeout;
		if(!!oFocusTile) {
			
			setTimeout(jQuery.proxy(function() {
				this._findTile(oFocusTile.$()).focus();
			},this),iTimeout); 
		}
	}
	
};


/**
 * @override
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype._update = function(bAnimated) {
	
	sap.m.TileContainer.prototype._update.apply(this, arguments);
	
	this.removeStyleClass("sapCaPWRendering");
	if (sap.ui.getCore().isMobile()){
		var that = this;
		var thatBlocker = this.$blocker;
		setTimeout(jQuery.proxy(function() {
			thatBlocker.fadeOut(200, function(){that.css("visibility", "hidden").css("z-index", 0);});	
		},this),250); 
		
	}
	
};


/**
 * Applies the containers dimensions
 * @private
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype._applyDimension = function() {
    var oDim = this._getContainerDimension(),
        sId = this.getId(),
        $this = this.$(),
        oThisPos,
        iOffset = 10,
        iTopOffset = 60,
        $Content = jQuery.sap.byId( sId + "-cnt"),
        contentPos,
        contentOuterHeight,
        pagerHeight = jQuery.sap.byId( sId + "-pager").outerHeight();

    jQuery.sap.byId( sId + "-scrl").css({
        width : oDim.outerwidth + "px",
        height : (oDim.outerheight - pagerHeight) + "px"
    });

    $Content.css({
        height : (oDim.outerheight - pagerHeight) + "px",
        visibility : "visible"
    });

    $this.css("visibility","visible");
    oThisPos = $this.position();

    contentPos  = $Content.position();
    contentOuterHeight = $Content.outerHeight();

    if (jQuery.device.is.phone) {
        iOffset = 2;        
    } else if (sap.ui.Device.system.desktop) {
        iOffset = 0;        
    }

    jQuery.sap.byId( sId + "-blind").css({
        top : (contentPos.top + iOffset) + "px",
        left : (contentPos.left + iOffset) + "px",
        width : ($Content.outerWidth() - iOffset) + "px",
        height : (contentOuterHeight - iOffset) + "px"
    });

    jQuery.sap.byId( sId + "-rightedge").css({
        top : (oThisPos.top + iOffset + iTopOffset) + "px",
        right : iOffset + "px",
        height : (contentOuterHeight - iOffset - iTopOffset) + "px"
    });

    jQuery.sap.byId( sId + "-leftedge").css({
        top : (oThisPos.top + iOffset + iTopOffset) + "px",
        left : (oThisPos.left + iOffset) + "px",
        height : (contentOuterHeight - iOffset - iTopOffset) + "px"
    });
};


/**
 *
 * Adding overlay to hide blinking while switching orientation
 *
 * @private
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype.showBlockerLayer = function(callback) {

	// get higher z-index
	if (sap.ui.getCore().isMobile()){
		var zindex = 20;
		jQuery(sap.ui.getCore().getStaticAreaRef()).children().each(function(index, value){
			var z = parseInt(jQuery(value).css("z-index"));
			if (!isNaN(z)){
				zindex = Math.max(zindex, z);	
			}		
		});	
		jQuery.sap.log.debug("blocker layer z-index calculated : " + zindex+1);
	    this.$blocker.css("z-index", zindex+1).css("visibility", "visible").fadeIn(200, function(){
	    																					if (callback) 
																								callback.call();
	    																					});
	}
	else {
		if (callback) 
			callback.call();
	}
	

};



}; // end of sap/ushell/components/factsheet/controls/PictureViewer.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.controls.PictureViewerItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.components.factsheet.controls.PictureViewerItem.
jQuery.sap.declare("sap.ushell.components.factsheet.controls.PictureViewerItem");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new components/factsheet/controls/PictureViewerItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSrc src} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getImage image} : sap.m.Image</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Picture viewer control relying on the TileContainer control
 * @extends sap.ui.core.Control
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewerItem
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.ushell.components.factsheet.controls.PictureViewerItem", { metadata : {

	library : "sap.ushell",
	properties : {
		"src" : {type : "string", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"image" : {type : "sap.m.Image", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.components.factsheet.controls.PictureViewerItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.components.factsheet.controls.PictureViewerItem.extend
 * @function
 */


/**
 * Getter for property <code>src</code>.
 * Image source url.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>src</code>
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewerItem#getSrc
 * @function
 */

/**
 * Setter for property <code>src</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSrc  new value for property <code>src</code>
 * @return {sap.ushell.components.factsheet.controls.PictureViewerItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewerItem#setSrc
 * @function
 */


/**
 * Getter for aggregation <code>image</code>.<br/>
 * Pass in an existing Image control to be used inside the PictureViewer
 * 
 * @return {sap.m.Image}
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewerItem#getImage
 * @function
 */


/**
 * Setter for the aggregated <code>image</code>.
 * @param {sap.m.Image} oImage
 * @return {sap.ushell.components.factsheet.controls.PictureViewerItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewerItem#setImage
 * @function
 */
	

/**
 * Destroys the image in the aggregation 
 * named <code>image</code>.
 * @return {sap.ushell.components.factsheet.controls.PictureViewerItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewerItem#destroyImage
 * @function
 */


// Start of sap/ushell/components/factsheet/controls/PictureViewerItem.js
/*!
 * @copyright@
*/

/**
 * Setter for property <code>src</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @param {string} sSrc  new value for property <code>src</code>
 * @return {sap.ushell.components.factsheet.controls.PictureViewerItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewerItem#setSrc
 * @function
 */
sap.ushell.components.factsheet.controls.PictureViewerItem.prototype.setSrc = function(sSrc) {
	this.setProperty("src", sSrc);
	// Also create or update the internal image
	var oImage = this.getImage();
	if (oImage == null) {
		oImage = new sap.m.Image();
	}
	oImage.setSrc(sSrc);
	this.setImage(oImage);
	return this;
};

/**
 * Called when the control is destroyed
 */
sap.ushell.components.factsheet.controls.PictureViewerItem.prototype.exit = function() {
    var oImage = this.getImage();
    if (oImage) {
        oImage.destroy();
    }
};
}; // end of sap/ushell/components/factsheet/controls/PictureViewerItem.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.action.ActionTile.controller') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.action.ActionTile.controller');
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global Tiles, document, jQuery, OData, sap */
    sap.ui.getCore().loadLibrary("sap.m");
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    

    sap.ui.controller("sap.ushell.components.tiles.action.ActionTile", {
        onInit: function () {
            var oView = this.getView(),
                oViewData = oView.getViewData(),
                oResourceModel = sap.ushell.components.tiles.utils.getResourceBundleModel(),
                oTileApi = oViewData.chip, // instance specific CHIP API
                sConfig = oTileApi.configuration.getParameterValueAsString('tileConfiguration'),
                oConfig = sap.ushell.components.tiles.utils.getActionConfiguration(sConfig,
                    oTileApi.configurationUi.isEnabled()),
                oModel,
                that = this;

            function formatDisplayText(sSemanticObject, sSemanticAction) {
                var oBundle = oResourceModel.getResourceBundle(),
                    sResult = oBundle.getText("configuration.semantic_object")+
                        ":\n" + sSemanticObject + "\n\n" +
                        oBundle.getText("configuration.semantic_action") + ":\n" +
                        sSemanticAction;
                return sResult;
            }

            oView.setModel(oResourceModel, "i18n");
            oModel = new sap.ui.model.json.JSONModel({
                config: oConfig,
                displayText: formatDisplayText(oConfig.semantic_object, oConfig.semantic_action)
            });
            oView.setModel(oModel);

            // implement configurationUi contract: setup configuration UI
            if (oTileApi.configurationUi.isEnabled()) {
                // attach configuration UI provider, which is essentially a components.tiles.action.Configuration
                oTileApi.configurationUi.setUiProvider(function () {
                    var oConfigurationUi = sap.ushell.components.tiles.utils.getConfigurationUi(that.getView(), "sap.ushell.components.tiles.action.Configuration");
                    oTileApi.configurationUi.attachCancel(this.onCancelConfiguration.bind(null, oConfigurationUi));
                    oTileApi.configurationUi.attachSave(this.onSaveConfiguration.bind(this, oConfigurationUi, formatDisplayText)); // mind the closure
                    return oConfigurationUi;
                }.bind(this));

                oView.byId("actionTile").setTooltip(
                    oResourceModel.getResourceBundle().getText("edit_configuration.tooltip")
                );
            }
        },

        onPress: function (oEvent) {
            // trigger to show the configuration UI if the tile is pressed in Admin mode
            var oTileApi = this.getView().getViewData().chip;
            if (oTileApi.configurationUi.isEnabled()) {
                oTileApi.configurationUi.display();
            }
        },


        // configuration save handler
        // The target mapping tile is enhanced with mapping_signature and supported form_factors properties.
        onSaveConfiguration: function (oConfigurationView, fnFormatDisplayText) {
            var
            // the deferred object required from the configurationUi contract
                oDeferred = jQuery.Deferred(),
                oModel = oConfigurationView.getModel(),
            // tile model placed into configuration model by getConfigurationUi
                oTileModel = oModel.getProperty("/tileModel"),
                oTileApi = oConfigurationView.getViewData().chip;

            //error handler
            function logErrorAndReject(oError) {
                jQuery.sap.log.warning(oError, null, "sap.ushell.components.tiles.action.ActionTile.controller");
                oDeferred.reject(oError);
            }

            //If the mandatory fields are missing, then through an error message requesting the user to enter those fields
            if(jQuery.trim(oModel.getProperty("/config/semantic_action"))=="" ||
                    (jQuery.trim(oModel.getProperty("/config/navigation_provider"))=="LPD" &&
                            (jQuery.trim(oModel.getProperty("/config/navigation_provider_role"))=="" ||
                                    jQuery.trim(oModel.getProperty("/config/navigation_provider_instance"))=="" ||
                                    (jQuery.trim(oModel.getProperty("/config/target_application_alias"))=="" && jQuery.trim(oModel.getProperty("/config/target_application_id"))==""))) ||
                                    (jQuery.trim(oModel.getProperty("/config/navigation_provider"))=="SAPUI5" &&
                                            (jQuery.trim(oModel.getProperty("/config/display_title_text"))=="" ||
                                                    jQuery.trim(oModel.getProperty("/config/url"))=="" ||
                                                    jQuery.trim(oModel.getProperty("/config/ui5_component"))=="")) ||
                                                    (jQuery.trim(oModel.getProperty("/config/desktopChecked"))=="" &&
                                                            jQuery.trim(oModel.getProperty("/config/phoneChecked"))=="" &&
                                                            jQuery.trim(oModel.getProperty("/config/tabletChecked")))) {
                var oSemActionInput = oConfigurationView.byId("semantic_actionInput"),
                    oTargetAppTitleInput = oConfigurationView.byId("target_application_descriptionInput"),
                    oTargetAppURLInput = oConfigurationView.byId("target_application_urlInput"),
                    oTargetAppCompInput = oConfigurationView.byId("target_application_componentInput"),
                    oNavProviderRoleInput = oConfigurationView.byId("navigation_provider_roleInput"),
                    oNavProviderInstanceInput = oConfigurationView.byId("navigation_provider_instanceInput"),
                    oTargetAppAliasInput = oConfigurationView.byId("target_application_aliasInput"),
                    oTargetAppIdInput = oConfigurationView.byId("target_application_idInput"),
                    oFormFactorDesktopInput = oConfigurationView.byId("desktopCB"),
                    oFormFactorTabletInput = oConfigurationView.byId("tabletCB"),
                    oFormFactorPhoneInput = oConfigurationView.byId("phoneCB");

                if (oSemActionInput.getValue()=="") {
                    oSemActionInput.setValueState(sap.ui.core.ValueState.Error);
                }
                if (jQuery.trim(oModel.getProperty("/config/navigation_provider"))=="SAPUI5" && oTargetAppTitleInput.getValue()=="") {
                    oTargetAppTitleInput.setValueState(sap.ui.core.ValueState.Error);
                }
                if (jQuery.trim(oModel.getProperty("/config/navigation_provider"))=="SAPUI5" && oTargetAppURLInput.getValue()=="") {
                    oTargetAppURLInput.setValueState(sap.ui.core.ValueState.Error);
                }
                if (jQuery.trim(oModel.getProperty("/config/navigation_provider"))=="SAPUI5" && oTargetAppCompInput.getValue()=="") {
                    oTargetAppCompInput.setValueState(sap.ui.core.ValueState.Error);
                }
                if (jQuery.trim(oModel.getProperty("/config/navigation_provider"))=="LPD" && oNavProviderRoleInput.getValue()=="") {
                    oNavProviderRoleInput.setValueState(sap.ui.core.ValueState.Error);
                }
                if (jQuery.trim(oModel.getProperty("/config/navigation_provider"))=="LPD" && oNavProviderInstanceInput.getValue()=="") {
                    oNavProviderInstanceInput.setValueState(sap.ui.core.ValueState.Error);
                }
                if (jQuery.trim(oModel.getProperty("/config/navigation_provider"))=="LPD" && oTargetAppAliasInput.getValue()=="" && oTargetAppIdInput.getValue()=="") {
                    oTargetAppAliasInput.setValueState(sap.ui.core.ValueState.Error);
                    oTargetAppIdInput.setValueState(sap.ui.core.ValueState.Error);
                }
                if (jQuery.trim(oModel.getProperty("/config/desktopChecked"))=="" &&
                        jQuery.trim(oModel.getProperty("/config/phoneChecked"))=="" &&
                        jQuery.trim(oModel.getProperty("/config/tabletChecked"))) {
                    oFormFactorDesktopInput.setValueState(sap.ui.core.ValueState.Error);
                    oFormFactorTabletInput.setValueState(sap.ui.core.ValueState.Error);
                    oFormFactorPhoneInput.setValueState(sap.ui.core.ValueState.Error);
                }
                oDeferred.reject("mandatory_fields_missing");
                return oDeferred.promise();
            }

            //Before saving the model data, check if Mapping signature table contains duplicate parameter names
            //in this case the save will fail and all the data will be lost as this is the designer behavior.
            if(sap.ushell.components.tiles.utils.tableHasDuplicateParameterNames(oModel.getProperty("/config/rows"))){
                var oBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle();
                oDeferred.reject(oBundle.getText("configuration.signature.uniqueParamMessage.text"));
            }
            else{   //only if the data is valid proceed with the save operation

                // Decide according to special flag if the setting in form factor are default
                // if so , the configuration should not be saved - this is crucial for the backend checks
                var oFormFactor = oModel.getProperty("/config/formFactorConfigDefault") ? undefined : sap.ushell.components.tiles.utils.buildFormFactorsObject(oModel);
                var sMappingSignature = sap.ushell.components.tiles.utils.getMappingSignatureString(oModel.getProperty("/config/rows"), oModel.getProperty("/config/isUnknownAllowed"));
                // get the configuration to save from the model
                var configToSave = {
                        semantic_object: jQuery.trim(oModel.getProperty("/config/semantic_object")) || "",
                        semantic_action: jQuery.trim(oModel.getProperty("/config/semantic_action")) || "",
                        //navigation_provider: "LPD", // set fixed to launchpad
                        //Modified for new LPD_CUST implementation
                        display_title_text : jQuery.trim(oModel.getProperty("/config/display_title_text")) || "",
                        url: jQuery.trim(oModel.getProperty("/config/url")) || "",
                        ui5_component: jQuery.trim(oModel.getProperty("/config/ui5_component")) || "",
                        navigation_provider: jQuery.trim(oModel.getProperty("/config/navigation_provider")),
                        navigation_provider_role: jQuery.trim(oModel.getProperty("/config/navigation_provider_role")) || "",
                        navigation_provider_instance: jQuery.trim(oModel.getProperty("/config/navigation_provider_instance")) || "",
                        target_application_id: jQuery.trim(oModel.getProperty("/config/target_application_id")) || "",
                        target_application_alias: jQuery.trim(oModel.getProperty("/config/target_application_alias")) || "",
                        display_info_text: jQuery.trim(oModel.getProperty("/config/display_info_text")),
                        form_factors: oFormFactor,     //retrieve a structure describing form factor's mode (from application or admin selection) + form factors values.
                        mapping_signature: sMappingSignature
                };
                // use bag in order to store translatable properties
                var tilePropertiesBag = oTileApi.bag.getBag('tileProperties');
                tilePropertiesBag.setText('display_title_text', configToSave.display_title_text);
                
                // use configuration contract to write parameter values
                oTileApi.writeConfiguration.setParameterValues({tileConfiguration: JSON.stringify(configToSave)},
                    // success handler
                    function () {
                        var sConfig = oTileApi.configuration.getParameterValueAsString('tileConfiguration'),
                            oConfigurationConfig = sap.ushell.components.tiles.utils.getActionConfiguration(sConfig, false),
                            oTileConfig = sap.ushell.components.tiles.utils.getActionConfiguration(sConfig, true);
                        // switching the model under the tile -> keep the tile model
                        oModel = new sap.ui.model.json.JSONModel({config: oConfigurationConfig, tileModel: oTileModel});
                        oConfigurationView.setModel(oModel);
                        // update model (no merge)
                        oTileModel.setData({config: oTileConfig, displayText: fnFormatDisplayText(oTileConfig.semantic_object, oTileConfig.semantic_action)}, false);
                        //Added for new LPD_CUST implementation
                        tilePropertiesBag.save(
                                // success handler
                                function () {
                                    jQuery.sap.log.debug("property bag 'tileProperties' saved successfully");
                                    // update possibly changed values via contracts
                                    if (oTileApi.title) {
                                        oTileApi.title.setTitle(
                                                configToSave.display_title_text,
                                                // success handler
                                                function () {
                                                    oDeferred.resolve();
                                                },
                                                logErrorAndReject //error handler
                                        );
                                    } else {
                                        oDeferred.resolve();
                                    }
                                },
                                logErrorAndReject //error handler
                        );
                    },
                    logErrorAndReject //error handler
                );
            }
            return oDeferred.promise();
        },

        // configuration cancel handler
        onCancelConfiguration: function (oConfigurationView) {
            // re-load old configuration and display
            var oViewData = oConfigurationView.getViewData(),
                oModel = oConfigurationView.getModel(),
            // tile model placed into configuration model by getConfigurationUi
                oTileModel = oModel.getProperty("/tileModel"),
                oTileApi = oViewData.chip,
                oCurrentConfig = sap.ushell.components.tiles.utils.getActionConfiguration(
                    oTileApi.configuration.getParameterValueAsString('tileConfiguration'),
                    false
                );
            oConfigurationView.getModel().setData({config: oCurrentConfig, tileModel: oTileModel}, false);
        }
    });
}());
}; // end of sap/ushell/components/tiles/action/ActionTile.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.action.Configuration.controller') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.action.Configuration.controller');
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global Tiles, jQuery, OData, sap */

    
    sap.ui.controller("sap.ushell.components.tiles.action.Configuration", {

        sEnterValuePlaceHolder:  "",
        sDuplicateErrorMsg: "",
        sDuplicateErrorTitle: "",
        sInvalidParmMsg: "",

        aDefaultObjects: [
            {obj: "", name: ""},
            {obj: "*", name: "*"}
        ],

        onConfigurationInputChange: function (oControlEvent) {
            sap.ushell.components.tiles.utils.checkTMInput(this.getView(), oControlEvent);
        },
        onInit: function () {
            var oView = this.getView(),
                oSemanticObjectSelector = oView.byId("semantic_objectInput"),
                oResourceModel = sap.ushell.components.tiles.utils.getResourceBundleModel();
            oView.setModel(oResourceModel, "i18n");
            oView.setViewName("sap.ushell.components.tiles.action.Configuration");
            // initialize semantic object input field
            sap.ushell.components.tiles.utils.createSemanticObjectModel(this, oSemanticObjectSelector, this.aDefaultObjects);
            // make sure that the chose object is written back to the configuration
            oSemanticObjectSelector.attachChange(function (oControlEvent) {
                var sValue = oControlEvent.getSource().getValue();
                oView.getModel().setProperty("/config/semantic_object", sValue);
            });
            var oBundle = oResourceModel.getResourceBundle();
            this.sEnterValuePlaceHolder = oBundle.getText("configuration.signature.table.valueFieldLbl");
            this.sDuplicateErrorMsg = oBundle.getText("configuration.signature.uniqueParamMessage.text");
            this.sDuplicateErrorTitle = oBundle.getText("configuration.signature.uniqueParamMessage.title");
            this.sInvalidParmMsg = oBundle.getText("configuration.signature.invalidParamMessage.text");

        },

      //This function applies table logic for the mapping signature structure according to the Mandatory check-box:
        //if mandatory is unselected: Value and isRegularExpression fields should be disabled and vice versa...
        handleMandatoryChange : function(oMandatoryCheckBox){
            var sId = oMandatoryCheckBox.getParameter('id');
            var aParentCells = sap.ui.getCore().byId(sId).getParent().getCells();
            //var parentID = oMandatoryCheckBox.oSource.getParent().getId();

            var bIsMandatory = oMandatoryCheckBox.getParameter('checked')
            if(bIsMandatory) {
                aParentCells[2].setEnabled(true);  //Value field
                aParentCells[2].setPlaceholder(this.sEnterValuePlaceHolder);
                aParentCells[4].setEnabled(false); //DefaultValue field
                aParentCells[4].setValue("");
                aParentCells[4].setPlaceholder("");
                aParentCells[3].setEnabled(true);  //IsRegularExpression check-box field
            }
            else {
                aParentCells[2].setEnabled(false); //Value field
                aParentCells[2].setValue("");
                aParentCells[2].setPlaceholder(""); //Were requested that a disabled text field will not show the Enter Value
                aParentCells[4].setEnabled(true);  //DefaultValue field
                aParentCells[4].setPlaceholder(this.sEnterValuePlaceHolder);
                aParentCells[3].setEnabled(false); //IsRegularExpression check-box field
                aParentCells[3].setChecked(false);
            }
        },
        
        addRow : function(){
            var oView = this.getView();
            var oModel = oView.getModel();
            var rows = oModel.getProperty('/config/rows');
            
            //Init a row template for adding new empty row to the params table (mapping signature)
            var newParamRow = sap.ushell.components.tiles.utils.getEmptyRowObj();
            rows.push(newParamRow);
            oModel.setProperty('/config/rows', rows);
        },

        deleteRow : function(){
            var oView = this.getView();
            var oModel = oView.getModel();
            var rows = oModel.getProperty('/config/rows');
            
            var table = oView.byId("mappingSignatureTable");
            var aSelectedItemsIndexes = table.getSelectedIndices();
            var aSortedDescending = aSelectedItemsIndexes.sort(function(a,b){return b-a}).slice();
            
            for(var i = 0 ; i < aSortedDescending.length ; i++){
                table.removeSelectionInterval(aSortedDescending[i],aSortedDescending[i]);//Make sure to turn off the selection or it will pass to the next row.
                rows.splice(aSortedDescending[i],1);        //There is a major assumption here that the index in the model is identical to the index in the table !!!
            }
            oModel.setProperty('/config/rows', rows);
        },
        //Will be called on change event of the name column in Parameters table.
        //2 parameters cannot have the same name. (in case the user decide to ignore the error message, there is a second validation on the save)
        checkDuplicateNames: function(changeEvent){

            var oModel = this.getView().getModel();
            var rows = oModel.getProperty('/config/rows');
            var nameCol = sap.ui.getCore().byId(changeEvent.getParameter('id'));
            var sNewValue = changeEvent.getParameter('newValue');

            if(sNewValue!="" && !(/^[-/\w]+$/.test(sNewValue))) {
                nameCol.setValueState(sap.ui.core.ValueState.Error);
                sap.m.MessageBox.alert(this.sInvalidParmMsg, this.focusNameField.bind(nameCol), this.sDuplicateErrorTitle);
            }
            if(sap.ushell.components.tiles.utils.tableHasDuplicateParameterNames(rows)){
                nameCol.setValueState(sap.ui.core.ValueState.Error);
                sap.m.MessageBox.alert(this.sDuplicateErrorMsg, this.focusNameField.bind(nameCol), this.sDuplicateErrorTitle);
            }else{
                nameCol.setValueState(sap.ui.core.ValueState.None);
            }
        },
        //a callback function for the duplicate error MessageBox
        focusNameField: function(){
            this.focus();
        },

        // forward value helper request to utils
        onValueHelpRequest: function (oEvent) {
            sap.ushell.components.tiles.utils.objectSelectOnValueHelpRequest(this, oEvent);
        },
        onFormFactorChange: function () {
            var oModel = this.getView().getModel();
            oModel.setProperty('/config/formFactorConfigDefault', false);
        },
        
        //Will be called on change event of the application type radio buttons.
        onApplicationTypeChange: function(oEvent) {
            sap.ushell.components.tiles.utils.displayApplicationTypeFields(this.getView());
        }
    });
}());
}; // end of sap/ushell/components/tiles/action/Configuration.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.applauncher.Configuration.controller') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.applauncher.Configuration.controller');
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global Tiles, jQuery, sap */

    
    sap.ui.controller("sap.ushell.components.tiles.applauncher.Configuration", {

        // checks given inputs
        onConfigurationInputChange: function (oControlEvent) {
        	sap.ushell.components.tiles.utils.checkInput(this.getView(), oControlEvent);
        },
        // default semantic objects for static applauncher: blank
        aDefaultObjects : [{obj: "", name: ""}],
        onInit: function () {
            var oView = this.getView(),
                oTargetUrl = oView.byId("targetUrl"),
                oSemanticObjectSelector = oView.byId("navigation_semantic_objectInput"),
                oResourceModel = sap.ushell.components.tiles.utils.getResourceBundleModel();

            oView.setModel(oResourceModel, "i18n");
            // set view name for identification in utils
            oView.setViewName("sap.ushell.components.tiles.applauncher.Configuration");
            sap.ushell.components.tiles.utils.createSemanticObjectModel(this, oSemanticObjectSelector, this.aDefaultObjects);

            // make sure that the chose object is written back to the configuration
            oSemanticObjectSelector.attachChange(function (oControlEvent) {
                var sValue = oControlEvent.getSource().getValue();
                oView.getModel().setProperty("/config/navigation_semantic_object", sValue);
            });
            // toggle editable property of targetURL input field depending on navigation_use_semantic_object
            function targetUrlVisibilityFormatter(bUseLaunchpad) {
                return !bUseLaunchpad;
            }
            oTargetUrl.bindProperty("enabled", {
                formatter: targetUrlVisibilityFormatter,
                path: "/config/navigation_use_semantic_object"
            });
        },

        onAfterRendering: function(){

        	sap.ushell.components.tiles.utils.updateTooltipForDisabledProperties(this.getView());
        },

        // forward semantic object value helper request to utils
        onValueHelpRequest : function (oEvent) {
        	sap.ushell.components.tiles.utils.objectSelectOnValueHelpRequest(this, oEvent);
        },
        // change handler for check box
        onCheckBoxChange : function (oEvent) {
            var oView = this.getView(),
                oSemanticObjectSelector = oView.byId("navigation_semantic_objectInput"),
                oModel = oSemanticObjectSelector.getModel(),
                value = oEvent.getSource().getSelected();
            oModel.setProperty("/enabled", value);
        },
        // forward icon value help request to utils
        onIconValueHelpRequest : function (oEvent) {
        	sap.ushell.components.tiles.utils.iconSelectOnValueHelpRequest(this, oEvent);
        },
        // forward icon close request to utils
        onSelectIconClose: function () {
        	sap.ushell.components.tiles.utils.onSelectIconClose(this.getView());
        },
        // forward icon ok to utils
        onSelectIconOk: function () {
        	sap.ushell.components.tiles.utils.onSelectIconOk(this.getView());
        }
    });
}());
}; // end of sap/ushell/components/tiles/applauncher/Configuration.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.applauncher.StaticTile.controller') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.applauncher.StaticTile.controller');
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global document, jQuery, OData, sap, Tiles */
    sap.ui.getCore().loadLibrary("sap.m");
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    

    sap.ui.controller("sap.ushell.components.tiles.applauncher.StaticTile", {

        onInit : function () {
            var oStaticTileView = this.getView(),
                oViewData = oStaticTileView.getViewData(),
                oTileApi = oViewData.chip, // instance specific CHIP API

                oConfig = sap.ushell.components.tiles.utils.getConfiguration(oTileApi, oTileApi.configurationUi.isEnabled(), false),
                oModel,
                sKeywords,
                aKeywords,
                that = this,
                sNavigationTargetUrl = oConfig.navigation_target_url,
                sSystem;

            sSystem = oTileApi.url.getApplicationSystem();
            if (sSystem) { // propagate system to target application
                sNavigationTargetUrl += ((sNavigationTargetUrl.indexOf("?") < 0) ? "?" : "&")
                    + "sap-system=" + sSystem;
            }
            this.navigationTargetUrl = sNavigationTargetUrl;
            /*
             * Model of the applauncher tile consisting of config (tile configuration), nav (target URL set to '' in case of Admin UI), and search (highlight terms)
             */
            oModel = new sap.ui.model.json.JSONModel({
                config : oConfig,
                nav: {navigation_target_url: (oTileApi.configurationUi && oTileApi.configurationUi.isEnabled() ? "" : sNavigationTargetUrl)},
                search: {
                    display_highlight_terms: []
                }
            });
            oStaticTileView.setModel(oModel);

            // implement search contract
            if (oTileApi.search) {
                // split and clean keyword string (may be comma + space delimited)
                sKeywords = oStaticTileView.getModel().getProperty("/config/display_search_keywords");
                aKeywords = jQuery.grep(sKeywords.split(/[, ]+/), function (n, i) { return n && n !== ""; });
                // defined in search contract:
                oTileApi.search.setKeywords(aKeywords);
                oTileApi.search.attachHighlight(
                    function (aHighlightWords) {
                        oStaticTileView.getModel().setProperty("/search/display_highlight_terms", aHighlightWords);
                    }
                );
            }

            // implement preview contract
            if (oTileApi.preview) {
                oTileApi.preview.setTargetUrl(sNavigationTargetUrl);
                oTileApi.preview.setPreviewIcon(oConfig.display_icon_url);
                oTileApi.preview.setPreviewTitle(oConfig.display_title_text);
            }

            // implement configurationUi contract: setup configuration UI
            if (oTileApi.configurationUi.isEnabled()) {
                oTileApi.configurationUi.setUiProvider(function () {
                    // attach configuration UI provider, which is essentially a components.tiles.applauncher.Configuration
                    var oConfigurationUi = sap.ushell.components.tiles.utils.getConfigurationUi(oStaticTileView, "sap.ushell.components.tiles.applauncher.Configuration");
                    oTileApi.configurationUi.attachCancel(that.onCancelConfiguration.bind(null, oConfigurationUi));
                    oTileApi.configurationUi.attachSave(that.onSaveConfiguration.bind(null, oConfigurationUi));
                    return oConfigurationUi;
                });

                this.getView().getContent()[0].setTooltip(
                		sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle()
                        .getText("edit_configuration.tooltip")
                );
            }
        },
        // trigger to show the configuration UI if the tile is pressed in Admin mode
        onPress: function (oEvent) {
            var oStaticTileView = this.getView(),
                oViewData = oStaticTileView.getViewData(),
                oTileApi = oViewData.chip;

            if (oTileApi.configurationUi.isEnabled()) {
                oTileApi.configurationUi.display();
            }
            else if(this.navigationTargetUrl){
                if(this.navigationTargetUrl[0] === '#'){
                    hasher.setHash(this.navigationTargetUrl);
                }
                else{
                    window.open(this.navigationTargetUrl, '_blank');
                }
            }
        },

        // configuration save handler
        onSaveConfiguration: function (oConfigurationView) {
            var
                // the deferred object required from the configurationUi contract
                oDeferred = jQuery.Deferred(),
                oModel = oConfigurationView.getModel(),
                // tile model placed into configuration model by getConfigurationUi
                oTileModel = oModel.getProperty("/tileModel"),
                oTileApi = oConfigurationView.getViewData().chip,
                // get the configuration to save from the model
                configToSave = {
                    display_icon_url : oModel.getProperty("/config/display_icon_url"),
                    display_info_text : oModel.getProperty("/config/display_info_text"),
                    display_title_text : oModel.getProperty("/config/display_title_text"),
                    display_subtitle_text: oModel.getProperty("/config/display_subtitle_text"),
                    navigation_use_semantic_object : oModel.getProperty("/config/navigation_use_semantic_object"),
                    navigation_target_url : oModel.getProperty("/config/navigation_target_url"),
                    navigation_semantic_object : jQuery.trim(oModel.getProperty("/config/navigation_semantic_object")) || "",
                    navigation_semantic_action : jQuery.trim(oModel.getProperty("/config/navigation_semantic_action")) || "",
                    navigation_semantic_parameters : jQuery.trim(oModel.getProperty("/config/navigation_semantic_parameters")),
                    display_search_keywords: oModel.getProperty("/config/display_search_keywords")
                };
            //If the input fields icon, semantic object and action are failing the input validations, then through an error message requesting the user to enter/correct those fields
            var bReject = sap.ushell.components.tiles.utils.checkInputOnSaveConfig(oConfigurationView);
            if(bReject) {
                oDeferred.reject("mandatory_fields_missing");
                return oDeferred.promise();
            }
            // overwrite target URL in case of semantic object navigation
            if (configToSave.navigation_use_semantic_object) {
                configToSave.navigation_target_url = sap.ushell.components.tiles.utils.getSemanticNavigationUrl(configToSave);
                oModel.setProperty("/config/navigation_target_url", configToSave.navigation_target_url);
            }

            // use bag in order to store translatable properties
            var tilePropertiesBag = oTileApi.bag.getBag('tileProperties');
            tilePropertiesBag.setText('display_title_text', configToSave.display_title_text);
            tilePropertiesBag.setText('display_subtitle_text', configToSave.display_subtitle_text);
            tilePropertiesBag.setText('display_info_text', configToSave.display_info_text);
            tilePropertiesBag.setText('display_search_keywords', configToSave.display_search_keywords);

            function logErrorAndReject(oError) {
                jQuery.sap.log.error(oError, null, "sap.ushell.components.tiles.applauncher.StaticTile.controller");
                oDeferred.reject(oError);
            }

            // use configuration contract to write parameter values
            oTileApi.writeConfiguration.setParameterValues(
                {tileConfiguration : JSON.stringify(configToSave)},
                // success handler
                function () {
                    var oConfigurationConfig = sap.ushell.components.tiles.utils.getConfiguration(oTileApi, false, false),
                        oTileConfig = sap.ushell.components.tiles.utils.getConfiguration(oTileApi, true, false),
                        // switching the model under the tile -> keep the tile model
                        oModel = new sap.ui.model.json.JSONModel({
                            config : oConfigurationConfig,
                            // set empty target url in configuration mode
                            nav: {navigation_target_url: ""},
                            // keep tile model
                            tileModel: oTileModel
                        });
                    oConfigurationView.setModel(oModel);
                    // update tile model
                    oTileModel.setData({config: oTileConfig, nav: {navigation_target_url: ""}}, false);

                    // update tile model
                    if (oTileApi.preview) {
                        oTileApi.preview.setTargetUrl(oConfigurationConfig.navigation_target_url);
                        oTileApi.preview.setPreviewIcon(oConfigurationConfig.display_icon_url);
                        oTileApi.preview.setPreviewTitle(oConfigurationConfig.display_title_text);
                    }
                    tilePropertiesBag.save(
                        // success handler
                        function () {
                            jQuery.sap.log.debug("property bag 'tileProperties' saved successfully");
                            // update possibly changed values via contracts
                            if (oTileApi.title) {
                                oTileApi.title.setTitle(
                                    configToSave.display_title_text,
                                    // success handler
                                    function () {
                                        oDeferred.resolve();
                                    },
                                    logErrorAndReject // error handler
                                );
                            } else {
                                oDeferred.resolve();
                            }
                        },
                        logErrorAndReject // error handler
                    );
                },
                logErrorAndReject // error handler
            );

            return oDeferred.promise();
        },

        // configuration cancel handler
        onCancelConfiguration: function (oConfigurationView) {
            // re-load old configuration and display
            var oViewData = oConfigurationView.getViewData(),
                oModel = oConfigurationView.getModel(),
                // tile model placed into configuration model by getConfigurationUi
                oTileModel = oModel.getProperty("/tileModel"),
                oTileApi = oViewData.chip,

                oCurrentConfig = sap.ushell.components.tiles.utils.getConfiguration(oTileApi, oTileApi.configurationUi.isEnabled(), false);

            oConfigurationView.getModel().setData({
                config: oCurrentConfig,
                // set empty target url in configuration mode
                nav: {navigation_target_url: ""},
                tileModel: oTileModel
            }, false);
        }
    });
}());
}; // end of sap/ushell/components/tiles/applauncher/StaticTile.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.applauncherdynamic.Configuration.controller') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.applauncherdynamic.Configuration.controller');
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, Tiles */

    
    sap.ui.controller("sap.ushell.components.tiles.applauncherdynamic.Configuration", {

        // checks given inputs
        onConfigurationInputChange: function (oControlEvent) {
        	sap.ushell.components.tiles.utils.checkInput(this.getView(), oControlEvent);
        },
        // default semantic objects for dynamic applauncher: blank
        aDefaultObjects : [{obj: "", name: ""}],
        onInit: function () {
            var oView = this.getView(),
                oSemanticObjectSelector = oView.byId("navigation_semantic_objectInput"),
                oResourceModel = sap.ushell.components.tiles.utils.getResourceBundleModel();

            oView.setModel(oResourceModel, "i18n");
            // set view name for identification in utils
            oView.setViewName("sap.ushell.components.tiles.applauncherdynamic.Configuration");
            sap.ushell.components.tiles.utils.createSemanticObjectModel(this, oSemanticObjectSelector, this.aDefaultObjects);

            // make sure that the chose object is written back to the configuration
            oSemanticObjectSelector.attachChange(function (oControlEvent) {
                var sValue = oControlEvent.getSource().getValue();
                oView.getModel().setProperty("/config/navigation_semantic_object", sValue);
            });
            // toggle editable property of targetURL input field depending on navigation_use_semantic_object
            oView.byId("targetUrl").bindProperty("enabled", {
                formatter: function (bUseLaunchpad) {
                    return !bUseLaunchpad;
                },
                path: "/config/navigation_use_semantic_object"
            });
        },

        onAfterRendering: function(){

        	sap.ushell.components.tiles.utils.updateTooltipForDisabledProperties(this.getView());
        },

        // forward semantic object value helper request to utils
        onValueHelpRequest : function (oEvent) {
        	sap.ushell.components.tiles.utils.objectSelectOnValueHelpRequest(this, oEvent);
        },
        // change handler for check box
        onCheckBoxChange : function (oEvent) {
            var oView = this.getView(),
                oSemanticObjectSelector = oView.byId("navigation_semantic_objectInput"),
                oModel = oSemanticObjectSelector.getModel(),
                value = oEvent.getSource().getSelected();

            oModel.setProperty("/enabled", value);
        },
        // forward icon value help request to utils
        onIconValueHelpRequest : function (oEvent) {
        	sap.ushell.components.tiles.utils.iconSelectOnValueHelpRequest(this, oEvent);
        },
        // forward icon close request to utils
        onSelectIconClose: function () {
        	sap.ushell.components.tiles.utils.onSelectIconClose(this.getView());
        },
        // forward icon ok to utils
        onSelectIconOk: function () {
        	sap.ushell.components.tiles.utils.onSelectIconOk(this.getView());
        }
    });
}());
}; // end of sap/ushell/components/tiles/applauncherdynamic/Configuration.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.applauncherdynamic.DynamicTile.controller') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.applauncherdynamic.DynamicTile.controller');
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, OData, sap, setTimeout, Tiles */
    sap.ui.getCore().loadLibrary("sap.m");
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.datajs'); // unlisted dependency retained

    

    sap.ui.controller("sap.ushell.components.tiles.applauncherdynamic.DynamicTile", {
        // handle to control/cancel browser's setTimeout()
        timer : null,
        // handle to control/cancel data.js OData.read()
        oDataRequest : null,
        onInit : function () {
            var oView = this.getView(),
                oViewData = oView.getViewData(),
                oTileApi = oViewData.chip,
                oConfig = sap.ushell.components.tiles.utils.getConfiguration(oTileApi, oTileApi.configurationUi.isEnabled(), false),
                oModel,
                sKeywords,
                aKeywords,
                that = this,
                sNavigationTargetUrl = oConfig.navigation_target_url,
                sSystem;

            sSystem = oTileApi.url.getApplicationSystem();
            if (sSystem) { // propagate system to target application
                sNavigationTargetUrl += ((sNavigationTargetUrl.indexOf("?") < 0) ? "?" : "&")
                    + "sap-system=" + sSystem;
            }
            this.navigationTargetUrl = sNavigationTargetUrl;
            /*
             * Model of the applauncher tile consisting of
             *          config (tile configuration),
             *          data (dyanmic data read from a data source)
             *          nav (target URL set to '' in case of Admin UI), and
             *          search (highlight terms)
             */
            oModel = new sap.ui.model.json.JSONModel({
                config: oConfig,
                data: sap.ushell.components.tiles.utils.getDataToDisplay(oConfig, {
                    number: (oTileApi.configurationUi.isEnabled() ? 1234 : "...")
                }),
                nav: {navigation_target_url: (oTileApi.configurationUi && oTileApi.configurationUi.isEnabled() ? "" : sNavigationTargetUrl)},
                search: {
                    display_highlight_terms: []
                }
            });
            oView.setModel(oModel);

            // implement search contract
            if (oTileApi.search) {
                // split and clean keyword string (may be comma + space delimited)
                sKeywords = oView.getModel().getProperty("/config/display_search_keywords");
                aKeywords = jQuery.grep(sKeywords.split(/[, ]+/), function (n, i) { return n && n !== ""; });
                // defined in search contract:
                oTileApi.search.setKeywords(aKeywords);
                oTileApi.search.attachHighlight(
                    function (aHighlightWords) {
                        // update model for highlighted search term
                        oView.getModel().setProperty("/search/display_highlight_terms", aHighlightWords);
                    }
                );
            }

            // implement preview contract
            if (oTileApi.preview) {
                oTileApi.preview.setTargetUrl(sNavigationTargetUrl);
                oTileApi.preview.setPreviewIcon(oConfig.display_icon_url);
                oTileApi.preview.setPreviewTitle(oConfig.display_title_text);
            }

            // implement refresh contract
            if (oTileApi.refresh) {
                oTileApi.refresh.attachRefresh(this.refreshHandler.bind(null, this));
            }

            // attach the refresh handler also for the visible contract, as we would like
            // on setting visible to true, to directly go and call the oData call
            if (oTileApi.visible) {
                oTileApi.visible.attachVisible(this.visibleHandler.bind(this));
            }

            // implement configurationUi contract: setup configuration UI
            if (oTileApi.configurationUi.isEnabled()) {
                oTileApi.configurationUi.setUiProvider(function () {
                    // attach configuration UI provider, which is essentially a components.tiles.dynamicapplauncher.Configuration
                    var oConfigurationUi = sap.ushell.components.tiles.utils.getConfigurationUi(oView, "sap.ushell.components.tiles.applauncherdynamic.Configuration");
                    oTileApi.configurationUi.attachCancel(that.onCancelConfiguration.bind(null, oConfigurationUi));
                    oTileApi.configurationUi.attachSave(that.onSaveConfiguration.bind(null, oConfigurationUi));
                    return oConfigurationUi;
                });

                this.getView().getContent()[0].setTooltip(
                		sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle()
                        .getText("edit_configuration.tooltip")
                );
            } else {
                if (!oTileApi.preview || !oTileApi.preview.isEnabled()) {
                    if (!sSystem) {
                        sap.ushell.Container.addRemoteSystemForServiceUrl(oConfig.service_url);
                    } // else registration is skipped because registration has been done already
                      // outside this controller (e.g. remote catalog registration)

                    // start fetching data from backend service if not in preview or admin mode
                    this.onUpdateDynamicData();
                }
            }
        },
        // convenience function to stop browser's timeout and OData calls
        stopRequests: function () {
            if (this.timer) {
                clearTimeout(this.timer);
            }
            if (this.oDataRequest) {
                try {
                    this.oDataRequest.abort();
                }catch (e){
                    jQuery.sap.log.warning(e.name,e.message);
                }
            }
        },
        // destroy handler stops requests
        onExit: function () {
            this.stopRequests();
        },
        // trigger to show the configuration UI if the tile is pressed in Admin mode
        onPress: function (oEvent) {
            var oView = this.getView(),
                oViewData = oView.getViewData(),
                oTileApi = oViewData.chip;
            if (oTileApi.configurationUi.isEnabled()) {
                oTileApi.configurationUi.display();
            }
            else if(this.navigationTargetUrl){
                if(this.navigationTargetUrl[0] === '#'){
                    hasher.setHash(this.navigationTargetUrl);
                }
                else{
                    window.open(this.navigationTargetUrl, '_blank');
                }
            }
        },
        // dynamic data updater
        onUpdateDynamicData: function () {
            var oView = this.getView(),
                oConfig = oView.getModel().getProperty("/config"),
                nservice_refresh_interval = oConfig.service_refresh_interval;
            if (!nservice_refresh_interval) {
                nservice_refresh_interval = 0;
            } else if (nservice_refresh_interval < 10) {
                // log in English only
                jQuery.sap.log.warning(
                    "Refresh Interval " + nservice_refresh_interval
                        + " seconds for service URL " + oConfig.service_url
                        + " is less than 10 seconds, which is not supported. "
                        + "Increased to 10 seconds automatically.",
                    null,
                    "sap.ushell.components.tiles.applauncherdynamic.DynamicTile.controller"
                );
                nservice_refresh_interval = 10;
            }
            if (oConfig.service_url) {
                this.loadData(oView, nservice_refresh_interval);
            }
        },
        extractData : function (oData) {
            var name,
                aKeys = ["results", "icon", "title", "number", "numberUnit", "info", "infoState", "infoStatus", "targetParams", "subtitle", "stateArrow", "numberState", "numberDigits", "numberFactor"];

            if (typeof oData === "object" && Object.keys(oData).length === 1) {
                name = Object.keys(oData)[0];
                if (jQuery.inArray(name, aKeys) === -1) {
                    return oData[name];
                }
            }
            return oData;
        },
        // configuration save handler
        onSaveConfiguration: function (oConfigurationView) {
            var
            // the deferred object required from the configurationUi contract
                oDeferred = jQuery.Deferred(),
                oModel = oConfigurationView.getModel(),
            // tile model placed into configuration model by getConfigurationUi
                oTileModel = oModel.getProperty("/tileModel"),
                oTileApi = oConfigurationView.getViewData().chip,
            // get the configuration to save from the model
                configToSave = {
                    display_icon_url : oModel.getProperty("/config/display_icon_url"),
                    display_title_text: oModel.getProperty("/config/display_title_text"),
                    display_subtitle_text: oModel.getProperty("/config/display_subtitle_text"),
                    display_info_text: oModel.getProperty("/config/display_info_text"),
                    display_number_unit : oModel.getProperty("/config/display_number_unit"),
                    service_url: oModel.getProperty("/config/service_url"),
                    service_refresh_interval: oModel.getProperty("/config/service_refresh_interval"),
                    navigation_use_semantic_object : oModel.getProperty("/config/navigation_use_semantic_object"),
                    navigation_target_url : oModel.getProperty("/config/navigation_target_url"),
                    navigation_semantic_object : jQuery.trim(oModel.getProperty("/config/navigation_semantic_object")) || "",
                    navigation_semantic_action : jQuery.trim(oModel.getProperty("/config/navigation_semantic_action")) || "",
                    navigation_semantic_parameters : jQuery.trim(oModel.getProperty("/config/navigation_semantic_parameters")),
                    display_search_keywords: oModel.getProperty("/config/display_search_keywords")
                };
            //If the input fields icon, semantic object and action are failing the input validations, then through an error message requesting the user to enter/correct those fields
            var bReject = sap.ushell.components.tiles.utils.checkInputOnSaveConfig(oConfigurationView);            
            if(bReject) {
                oDeferred.reject("mandatory_fields_missing");
                return oDeferred.promise();
            }
            // overwrite target URL in case of semantic object navigation
            if (configToSave.navigation_use_semantic_object) {
                configToSave.navigation_target_url = sap.ushell.components.tiles.utils.getSemanticNavigationUrl(configToSave);
                oModel.setProperty("/config/navigation_target_url", configToSave.navigation_target_url);
            }

            // use bag contract in order to store translatable properties
            var tilePropertiesBag = oTileApi.bag.getBag('tileProperties');
            tilePropertiesBag.setText('display_title_text', configToSave.display_title_text);
            tilePropertiesBag.setText('display_subtitle_text', configToSave.display_subtitle_text);
            tilePropertiesBag.setText('display_info_text', configToSave.display_info_text);
            tilePropertiesBag.setText('display_search_keywords', configToSave.display_search_keywords);

            function logErrorAndReject(oError) {
                jQuery.sap.log.error(oError, null, "sap.ushell.components.tiles.applauncherdynamic.DynamicTile.controller");
                oDeferred.reject(oError);
            }

            // use configuration contract to write parameter values
            oTileApi.writeConfiguration.setParameterValues(
                {tileConfiguration : JSON.stringify(configToSave)},
                // success handler
                function () {
                    var oConfigurationConfig = sap.ushell.components.tiles.utils.getConfiguration(oTileApi, false, false),
                    // get tile config data in admin mode
                        oTileConfig = sap.ushell.components.tiles.utils.getConfiguration(oTileApi, true, false),
                    // switching the model under the tile -> keep the tile model
                        oModel = new sap.ui.model.json.JSONModel({
                            config: oConfigurationConfig,
                            // keep tile model
                            tileModel: oTileModel
                        });
                    oConfigurationView.setModel(oModel);

                    // update tile model
                    oTileModel.setData({data: oTileConfig, nav: {navigation_target_url: ""}}, false);
                    if (oTileApi.preview) {
                        oTileApi.preview.setTargetUrl(oConfigurationConfig.navigation_target_url);
                        oTileApi.preview.setPreviewIcon(oConfigurationConfig.display_icon_url);
                        oTileApi.preview.setPreviewTitle(oConfigurationConfig.display_title_text);
                    }

                    tilePropertiesBag.save(
                        // success handler
                        function () {
                            jQuery.sap.log.debug("property bag 'tileProperties' saved successfully");
                            // update possibly changed values via contracts
                            if (oTileApi.title) {
                                oTileApi.title.setTitle(
                                    configToSave.display_title_text,
                                    // success handler
                                    function () {
                                        oDeferred.resolve();
                                    },
                                    logErrorAndReject // error handler
                                );
                            } else {
                                oDeferred.resolve();
                            }
                        },
                        logErrorAndReject // error handler
                    );
                },
                logErrorAndReject // error handler
            );

            return oDeferred.promise();
        },

        // configuration cancel handler
        onCancelConfiguration: function (oConfigurationView) {
            // re-load old configuration and display
            var oViewData = oConfigurationView.getViewData(),
                oModel = oConfigurationView.getModel(),
            // tile model placed into configuration model by getConfigurationUi
                oTileModel = oModel.getProperty("/tileModel"),
                oTileApi = oViewData.chip,
                oCurrentConfig = sap.ushell.components.tiles.utils.getConfiguration(oTileApi, false, false);
            oConfigurationView.getModel().setData({config: oCurrentConfig, tileModel: oTileModel}, false);
        },
        // loads data from backend service
        loadData: function (oDynamicTileView, nservice_refresh_interval) {
            var oConfig = oDynamicTileView.getModel().getProperty("/config"),
                sUrl = oConfig.service_url,
                that = this;
            var oTileApi = this.getView().getViewData().chip;

            if (/;o=([;\/?]|$)/.test(sUrl)) { // URL has placeholder segment parameter ;o=
                sUrl = oTileApi.url.addSystemToServiceUrl(sUrl);
            }
            //set the timer if required
            if (nservice_refresh_interval > 0) {
                // log in English only
                jQuery.sap.log.info(
                    "Wait " + nservice_refresh_interval + " seconds before calling "
                        + oConfig.service_url + " again",
                    null,
                    "sap.ushell.components.tiles.applauncherdynamic.DynamicTile.controller"
                );
                // call again later
                this.timer = setTimeout(that.loadData.bind(that, oDynamicTileView, nservice_refresh_interval, false), (nservice_refresh_interval * 1000));
            }

            // Verify the the Tile visibility is "true" in order to issue an oData request
            if(oTileApi.visible.isVisible() && !that.oDataRequest){
                that.oDataRequest = OData.read(
	                {requestUri: sUrl},
	                // sucess handler
	                function (oResult) {
                        that.oDataRequest = undefined;
	                    var oData = oResult,
	                        oDataToDisplay;
	                    if (typeof oResult === "object") {
	                        oData = that.extractData(oData);
	                    } else if (typeof oResult === "string") {
	                        oData = {number: oResult};
	                    }
	                    oDataToDisplay = sap.ushell.components.tiles.utils.getDataToDisplay(oConfig, oData);

	                    // set data to display
	                    oDynamicTileView.getModel().setProperty("/data", oDataToDisplay);

	                    // rewrite target URL
	                    oDynamicTileView.getModel().setProperty("/nav/navigation_target_url",
                            sap.ushell.components.tiles.utils.addParamsToUrl(
                            that.navigationTargetUrl,
                            oDataToDisplay
                        ));
	                },
	                // error handler
	                function (oMessage) {
                        that.oDataRequest = undefined;
	                    var sMessage = oMessage && oMessage.message ? oMessage.message : oMessage,
	                        oResourceBundle = sap.ushell.components.tiles.utils.getResourceBundleModel()
	                            .getResourceBundle();
	                    if (oMessage.response) {
	                        sMessage += " - " + oMessage.response.statusCode + " "
	                            + oMessage.response.statusText;
	                    }
	                    // log in English only
	                    jQuery.sap.log.error(
	                        "Failed to update data via service "
	                            + oConfig.service_url
	                            + ": " + sMessage,
	                        null,
	                        "sap.ushell.components.tiles.applauncherdynamic.DynamicTile"
	                    );
	                    oDynamicTileView.getModel().setProperty("/data",
	                    		sap.ushell.components.tiles.utils.getDataToDisplay(oConfig, {
	                            number: "???",
	                            info: oResourceBundle.getText("dynamic_data.error"),
	                            infoState: "Critical"
	                        })
            );
        }
    ); // End of oData.read
}
},
    // loads data once if not in configuration mode
    refreshHandler: function (oDynamicTileController) {
        var oTileApi = oDynamicTileController.getView().getViewData().chip;
        if (!oTileApi.configurationUi.isEnabled()) {
            oDynamicTileController.loadData(oDynamicTileController.getView(), 0);
        }
        else{
            oDynamicTileController.stopRequests();
        }
    },

    // load data in place in case setting visibility from false to true
    // with no additional timer registered
    visibleHandler: function (isVisible) {
        if (isVisible) {
            this.refreshHandler(this);
        }
    }

    });
}());

}; // end of sap/ushell/components/tiles/applauncherdynamic/DynamicTile.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorArea.AreaChartTile.view') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatorArea.AreaChartTile.view');
//Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */
    
    
    
    jQuery.sap.require('sap.ca.ui.model.format.NumberFormat'); // unlisted dependency retained

    sap.ui.getCore().loadLibrary("sap.suite.ui.commons");
    
    sap.ui.jsview("tiles.indicatorArea.AreaChartTile", {
        getControllerName: function () {
            return "tiles.indicatorArea.AreaChartTile";
        },
        createContent: function (oController) {
            this.setHeight('100%');
            this.setWidth('100%');
            var preview = this.getViewData().chip.preview;
            var header = "Lorem ipsum";
            var subheader =  "Lorem ipsum";
            if(preview && preview.getTitle()){
                header = preview.getTitle();
                subheader = preview.getDescription();
            }
            var buildChartItem = function(sName) {
                return new sap.suite.ui.commons.MicroAreaChartItem({
                    color: "Good",
                    points: {
                        path: "/"+sName+"/data",
                        template: new sap.suite.ui.commons.MicroAreaChartPoint({
                            x: "{day}",
                            y: "{balance}"

                        })
                    }
                });
            };




            var buildMACLabel = function(sName) {
                return new sap.suite.ui.commons.MicroAreaChartLabel({ 
                    label: "{/"+sName+"/label}", 
                    color: "{/"+sName+"/color}" 
                });
            };   

            var oGenericTileData = {
                    subheader : subheader,
                    header : header,
                    footerNum : "",
                    footerComp : "",
                    scale: "",
                    unit: "",
                    value: 8888,
                    size:"Auto",
                    frameType:"OneByOne",
                    state: sap.suite.ui.commons.LoadState.Loading,
                    /* valueColor:sap.suite.ui.commons.InfoTileValueColor.Error,
                    indicator: sap.suite.ui.commons.DeviationIndicator.None,*/
//                    title : "US Profit Margin",
//                    footer : "",
//                    description: "",
//
//                    width: "100%",
//                    height: "100%",
//                    chart: {
//                        color:"Good",
//                        data: [
//                               {day: 0, balance: 0},
//                               {day: 30, balance: 20},
//                               {day: 60, balance: 20},
//                               {day: 100, balance: 80}
//                               ]
//                    },
//                    target: {
//                        color:"Error",
//                        data: [
//                               {day: 0, balance: 0},
//                               {day: 30, balance: 30},
//                               {day: 60, balance: 40},
//                               {day: 100, balance: 90}
//                               ]
//                    },
//                    maxThreshold: {
//                        color: "Good",
//                        data: [
//                               {day: 0, balance: 0},
//                               {day: 30, balance: 40},
//                               {day: 60, balance: 50},
//                               {day: 100, balance: 100}
//                               ]
//                    },
//                    innerMaxThreshold: {
//                        color: "Error",
//                        data: [
//                               ]
//                    },
//                    innerMinThreshold: {
//                        color: "Neutral",
//                        data: [
//                               ]
//                    },
//                    minThreshold: {
//                        color: "Error",
//                        data: [
//                               {day: 0, balance: 0},
//                               {day: 30, balance: 20},
//                               {day: 60, balance: 30},
//                               {day: 100, balance: 70},
//                               ]
//                    },
//                    minXValue: 0,
//                    maxXValue: 100,
//                    minYValue: 0,
//                    maxYValue: 100,
//                    firstXLabel: { label: "June 123", color: "Error"   },
//                    lastXLabel: { label: "June 30", color: "Error" },
//                    firstYLabel: { label: "0M", color: "Good" },
//                    lastYLabel: { label: "80M", color: "Critical" },
//                    minLabel: { },
//                    maxLabel: { }
            };





            var oNVConfContS = new sap.suite.ui.commons.MicroAreaChart({
                width: "{/width}",
                height: "{/height}",
                size : "{/size}",
                target: buildChartItem("target"),
                innerMinThreshold: buildChartItem("innerMinThreshold"),
                innerMaxThreshold: buildChartItem("innerMaxThreshold"),
                minThreshold: buildChartItem("minThreshold"),
                maxThreshold: buildChartItem("maxThreshold"),
                chart: buildChartItem("chart"),
                minXValue: "{/minXValue}",
                maxXValue: "{/maxXValue}",
                minYValue: "{/minYValue}",
                maxYValue: "{/maxYValue}",
                firstXLabel: buildMACLabel("firstXLabel"), 
                lastXLabel: buildMACLabel("lastXLabel"), 
                firstYLabel: buildMACLabel("firstYLabel"),
                lastYLabel: buildMACLabel("lastYLabel"),
                minLabel: buildMACLabel("minLabel"),
                maxLabel: buildMACLabel("maxLabel"),
            });

            var oNVConfS = new sap.suite.ui.commons.TileContent({
                unit : "{/unit}",
                size : "{/size}",
                footer : "{/footerNum}",
                content: oNVConfContS,
            });

            this.oGenericTile = new sap.suite.ui.commons.GenericTile({
                subheader : "{/subheader}",
                frameType : "{/frameType}",
                size : "{/size}",
                header : "{/header}",
                tileContent : [oNVConfS]
            });

            var oGenericTileModel = new sap.ui.model.json.JSONModel();
            oGenericTileModel.setData(oGenericTileData);
            this.oGenericTile.setModel(oGenericTileModel);
            /* new tiles.indicatorArea.areaChartTileService({
                tile : oNVConfContS,
                kpiCode :'sap.hba.ecc.mm.pur.NonManagedSpend',// 'com.sap.PS.KPI10',
                variantId : 'sap.hba.ecc.mm.pur.NonManagedSpendLast7Days',//'com.sap.var2~I077920~2013-12-03 07:26:14.4960000',
            });
             */

            return this.oGenericTile;
        }
    });
}());
}; // end of sap/ushell/components/tiles/indicatorArea/AreaChartTile.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.Renderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The SAPUI5 component of SAP's Fiori Wave 2 renderer for the Unified Shell.
 *
 * @version 1.24.5
 */
/**
 * @namespace Namespace for SAP's fiori2 renderer for the Unified Shell. The renderer consists
 * of an SAPUI5 component called <code>sap.ushell.renderers.fiori2.Renderer</code>.
 *
 * @name sap.ushell.renderers.fiori2
 * @see sap.ushell.renderers.fiori2.Renderer
 * @since 1.9.0
 * @private
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.renderers.fiori2.Renderer");

    jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

    

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.createRenderer("fiori2")</code>.
     *
     * @class The SAPUI5 component of SAP's Fiori Wave 2 renderer for the Unified Shell.
     *
     * @extends sap.ui.core.UIComponent
     * @name sap.ushell.renderers.fiori2.Renderer
     * @see sap.ushell.services.Container#createRenderer
     * @since 1.15.0
     * @public
     */
    sap.ui.core.UIComponent.extend("sap.ushell.renderers.fiori2.Renderer", {
        metadata : {
            version : "1.24.5",
            dependencies : {
                version : "1.24.5",
                libs : [ "sap.ui.core", "sap.ui.unified", "sap.m" ],
                components: []
            }
        }
    });

    /**
     * *TODO*
     *
     * @returns *TODO*
     *
     * @methodOf sap.ushell.renderers.fiori2.Renderer#
     * @name createContent
     * @since 1.15.0
     *
     * @private
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.createContent = function () {
        var predefineState = jQuery.sap.getUriParameters().get("appState") || jQuery.sap.getUriParameters().get("sap-ushell-config"),
            viewData = this.getComponentData() || {};

        if(predefineState){
            if(!viewData.config){
                viewData.config = {};
            }
            viewData.config.appState = predefineState;
        }

        return sap.ui.view('mainShell', {
            type: sap.ui.core.mvc.ViewType.JS,
            viewName: "sap.ushell.renderers.fiori2.Shell",
            viewData: viewData
        });
    };
}());

}; // end of sap/ushell/renderers/fiori2/Renderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.Shell.controller') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.Shell.controller');
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, console, location, window, f2p, document, setTimeout*/

    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    setTimeout(function () {
        jQuery.sap.require("sap.ushell.renderers.fiori2.launchpad.DashboardManager");
    }, 10);

    /* dont delay these cause they are needed for direct bookmarks */
    
    
    
    
    
    
    // create global model and add some demo data
    var enableHashChange = true,
        mobile = sap.ui.Device.system.phone,
        oUserRecentsService,
        oModel = new sap.ui.model.json.JSONModel({
            groups : [],
            animationRendered : false,
            title : "My demo title",
            searchAvailable: false,
            rtl: false,
            personalization: true,
            searchTerm: "",
            states : {
                "home" : {
                    "stateName" : "home",
                    "showCurtain" : false,
                    "headerHiding" : false,
                    "headerVisible" : true,
                    "showCatalog" : false,
                    "showPane" : false,
                    "headItems" : ["configBtn"],
                    "headEndItems" : ["sf"],
                    "search" : "",
                    "paneContent" : [],
                    "actions" : ["ContactSupportBtn", "loginDetails", "hideGroupsBtn", "logoutBtn"]
                },
                "app" : {
                    "stateName" : "app",
                    "showCurtain" : false,
                    "headerHiding" : true,
                    "headerVisible" : true,
                    "headEndItems" : ["sf"],
                    "showCatalog" : false,
                    "showPane" : false,
                    "search" : "",
                    "headItems" : ["homeBtn"],
                    "actions" : ["ContactSupportBtn", "aboutBtn", "loginDetails", "logoutBtn"],
                    "shellActions": ["ContactSupportBtn", "aboutBtn", "loginDetails", "logoutBtn"] //when opening an app, take the original actions from here
                },
                "minimal" : {
                    "stateName" : "minimal",
                    "showCurtain" : false,
                    "headerHiding" : false,
                    "headerVisible" : true,
                    "headEndItems" : [],
                    "showCatalog" : false,
                    "showPane" : false,
                    "headItems" : [],
                    "actions" : ["ContactSupportBtn", "aboutBtn", "loginDetails", "logoutBtn"],
                    "shellActions": ["ContactSupportBtn", "aboutBtn", "loginDetails", "logoutBtn"] //when opening an app, take the original actions from here
                },
                "standalone" : {
                    "stateName" : "standalone",
                    "showCurtain" : false,
                    "headerHiding" : true,
                    "headerVisible" : true,
                    "headEndItems" : [],
                    "showCatalog" : false,
                    "showPane" : false,
                    "headItems" : [],
                    "actions" : ["ContactSupportBtn", "aboutBtn"],
                    "shellActions": ["ContactSupportBtn", "aboutBtn"] //when opening an app, take the original actions from here
                },
                "embedded" : {
                    "stateName" : "embedded",
                    "showCurtain" : false,
                    "headerHiding" : true,
                    "headerVisible" : true,
                    "headEndItems" : ["standardActionsBtn"],
                    "showCatalog" : false,
                    "showPane" : false,
                    "headItems" : [],
                    "actions" : ["ContactSupportBtn", "aboutBtn"],
                    "shellActions": ["ContactSupportBtn", "aboutBtn"] //when opening an app, take the original actions from here
                },
                "headerless" : {
                    "stateName" : "headerless",
                    "showCurtain" : false,
                    "headerHiding" : true,
                    "headerVisible" : false,
                    "headEndItems" : [],
                    "showCatalog" : false,
                    "showPane" : false,
                    "headItems" : [],
                    "actions" : [],
                    "shellActions": []//when opening an app, take the original actions from here
                },
//                "historyScreen" : {
//                    "stateName" : "historyScreen",
//                    "showCurtain" : true,
//                    "headerHiding" : false,
//                    "showCatalog" : false,
//                    "search" : "",
//                    "curtainContent" : ["searchHistoryPage"],
//                    "paneCurtainContent" : ["searchFilterPage"]
//                },
//                "searchResults" : {
//                    "stateName" : "searchResults",
//                    "showCurtain" : true,
//                    "headerHiding" : false,
//                    "showCatalog" : false,
//                    "search" : "",
//                    "curtainContent" : ["searchResultPage"],
//                    "paneCurtainContent" : ["searchFilterPage"]
//                },
//                "suggestions" : {
//                    "stateName" : "suggestions",
//                    "showCurtain" : true,
//                    "headerHiding" : false,
//                    "showCatalog" : false,
//                    "search" : "",
//                    "curtainContent" : ["suggestionResultPage"],
//                    "paneCurtainContent" : ["searchFilterPage"]
//                },
                "catalog" : {
                    "stateName" : "catalog",
                    "showCurtain" : false,
                    "headerHiding" : true,
                    "headerVisible" : true,
                    "headEndItems" : ["sf"],
                    "showCatalog" : true,
                    "showPane" : false,
                    "search" : "",
                    "headItems" : ["homeBtn"],
                    "actions" : ["ContactSupportBtn", "loginDetails", "logoutBtn"]
                },
                "catalogApp" : {
                    "stateName" : "catalogApp",
                    "showCurtain" : false,
                    "headerHiding" : true,
                    "headerVisible" : true,
                    "headEndItems" : ["sf"],
                    "showCatalog" : false,
                    "showPane" : false,
                    "search" : "",
                    "headItems" : ["backBtn"],
                    "actions" : ["ContactSupportBtn", "aboutBtn", "loginDetails", "logoutBtn"],
                    "shellActions": ["ContactSupportBtn", "aboutBtn", "loginDetails", "logoutBtn"] //when opening an app, take the original actions from here
                }
            }
        }),
        bCloseOverlayByFunction = false,
        oConfig = {},
        //allowed application state list that are allowed to be configured by oConfig.appState property
        allowedAppStates = ['minimal', 'app', 'standalone','embedded','headerless'];

    oModel.setSizeLimit(10000); // override default of 100 UI elements on list bindings

    /**
     * @name sap.ushell.renderers.fiori2.Shell
     * @extends sap.ui.core.mvc.Controller
     * @public
     */
    sap.ui.controller("sap.ushell.renderers.fiori2.Shell", {

        catalogPageId : "catalogPage",

        /**
         * SAPUI5 lifecycle hook.
         * @public
         */
        onInit: function () {
            // Add global model to view
            this.getView().setModel(oModel);
            var oViewData = this.getView().getViewData();
            if (oViewData){
                oConfig = oViewData.config || {};
            }
            // Bind the translation model to this view
            this.getView().setModel(sap.ushell.resources.i18nModel, "i18n");

            sap.ui.getCore().getEventBus().subscribe("externalSearch", this.externalSearchTriggered, this);
            sap.ui.getCore().getEventBus().subscribe("showCatalog", this.showCatalog, this);
            sap.ui.getCore().getEventBus().subscribe("openApp", this.openApp, this);
            sap.ui.getCore().getEventBus().subscribe("launchpad", "contentRendered", this.loadCoreExt);
            
            // this handling of configuration should is done before the code block below otherwise the doHashChange is
            // triggered before the personalization flag is disabled (URL may contain hash value which invokes navigation)
            if (oConfig) {
                if (oConfig.appState === "headerless") {
                    // we need to make sure that appState is not headerless as in headerless mode we disable personalization by design.
                    oModel.setProperty("/personalization", false);

                    // when appState is headerless we also remove the header in home state and disable the personalization.
                    // this is needed in case headerless mode will be used to navigate to the dashboard and not directly to an application.
                    // As 'home' is the official state for the dash board, we change the header visibility property of this state
                    oModel.setProperty("/states/home/headerVisible", false);
                } else {

                    if (oConfig.enablePersonalization !== undefined) {
                        oModel.setProperty("/personalization", oConfig.enablePersonalization);
                    }
                    if (oConfig.enableSetTheme !== undefined) {
                        oModel.setProperty("/setTheme", oConfig.enableSetTheme);
                    }
                }
            }

            oUserRecentsService = sap.ushell.Container.getService("UserRecents");
            this.history = new sap.ushell.renderers.fiori2.History();
            this.oNavContainer = sap.ui.getCore().byId("navContainer");
            this.oLoadingDialog = sap.ui.getCore().byId("loadingDialog");
            this.toggleRtlMode(sap.ui.getCore().getConfiguration().getRTL());
            this.oShellNavigation = sap.ushell.Container.getService("ShellNavigation");
            // must be after event registration (for synchronous navtarget resolver calls)
            this.oShellNavigation.init(jQuery.proxy(this.doHashChange, this));
            sap.ushell.Container.getService("Message").init(jQuery.proxy(this.doShowMessage, this));
            sap.ushell.Container.setLogonFrameProvider(this._getLogonFrameProvider());
            this.bContactSupportEnabled = sap.ushell.Container.getService("SupportTicket").isEnabled();
            if (this.bContactSupportEnabled) {
                sap.ushell.UserActivityLog.activate();
            }

            if (oConfig && oConfig.enableHideGroups !== undefined) {
                oModel.setProperty("/enableHideGroups", oConfig.enableHideGroups);
            }

        },

        /**
         * This method will be used by the Container service in order to create, show and destroy a Dialog control with an
         * inner iframe. The iframe will be used for rare scenarios in which additional authentication is required. This is
         * mainly related to SAML 2.0 flows.
         * The api sequence will be managed by UI2 services.
         * @returns {{create: Function, show: Function, destroy: Function}}
         * @private
         */
        _getLogonFrameProvider: function () {
            var oView = this.getView();

            return {
                /* @returns a DOM reference to a newly created iFrame. */
                create: function () {
                    return oView.createIFrameDialog();
                },

                /* make the current iFrame visible to user */
                show: function () {
                    oView.showIFrameDialog();
                },

                /* hide, close, and destroy the current iFrame */
                destroy: function () {
                    oView.destroyIFrameDialog();
                }
            };
        },

        onExit: function () {
            sap.ui.getCore().getEventBus().unsubscribe("externalSearch", this.externalSearchTriggered, this);
            sap.ui.getCore().getEventBus().unsubscribe("showCatalog", this.showCatalog, this);
            sap.ui.getCore().getEventBus().unsubscribe("openApp", this.openApp, this);
            this.oShellNavigation.hashChanger.destroy();
            this.getView().aDanglingControls.forEach(function (oControl) {
                if (oControl.destroyContent) {
                    oControl.destroyContent();
                }
                oControl.destroy();
            });
            this.getView().oDashboardManager.destroy();
            sap.ushell.UserActivityLog.deactivate();
        },

        // temporary, should not be exposed
        getModel: function () {
            return oModel;
        },

        showCatalog : function (sChannelId, sEventId, oData) {
            if (!this.isCatalogExist()) {
                var oCatalog = sap.ui.view({
                    id : this.catalogPageId,
                    viewName : "sap.ushell.renderers.fiori2.launchpad.catalog.Catalog",
                    viewData : {},
                    type : sap.ui.core.mvc.ViewType.JS
                });
                this.oNavContainer.addPage(oCatalog);
            }
            this.switchViewState("catalog");
            this.oNavContainer.to(this.catalogPageId, this.getAnimationType());
            this.setAppIcons({title: sap.ushell.resources.i18n.getText("tile_catalog")});
            this.oLoadingDialog.closeLoadingScreen();
            sap.ui.getCore().getEventBus().publish("showCatalogEvent", oData);

            //Add access keys
            // reset selections
            jQuery(document).off('keydown.dashboard');
            jQuery(document).off('keydown.catalog');
            // add catalog events
            jQuery(document).on('keydown.catalog', sap.ushell.renderers.fiori2.AccessKeysHandler.catalogKeydownHandler);
        },

        isCatalogExist : function() {
            return (sap.ui.getCore().byId(this.catalogPageId)) ? true : false;
        },

        getAnimationType : function() {
            return sap.ui.Device.os.android ? "show" : "slide";
        },

        openShellOverlay : function (oData) {
//            var oShellOverlay = sap.ui.getCore().byId("shellOverlay");
//            oShellOverlay.open();
        },

        closeShellOverlay : function () {
//            var oShellOverlay = sap.ui.getCore().byId("shellOverlay");
//            if (oShellOverlay && oShellOverlay.isActive()) {
//                bCloseOverlayByFunction = true;
//                oShellOverlay.close();
//            }
        },

        onCurtainClose : function (oEvent) {
            jQuery.sap.log.warning("Closing Curtain", oEvent);

//            sap.ui.getCore().getEventBus().publish("closeCurtain");

            bCloseOverlayByFunction = false;
//            sap.ui.getCore().byId("sf").focus();
        },

        /**
         * Callback registered with Message service. Triggered on message show request.
         *
         * @private
         */
        doShowMessage: function (iType, sMessage, oParameters) {
            jQuery.sap.require("sap.m.MessageToast");
            jQuery.sap.require("sap.m.MessageBox");
            if (iType === sap.ushell.services.Message.Type.ERROR) {
                if (sap.ushell.Container.getService("SupportTicket").isEnabled()) {
                    jQuery.sap.require("sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage");
                    var errorMsg = new sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage("EmbeddedSupportErrorMessage", {
                        title: oParameters.title || sap.ushell.resources.i18n.getText("error"),
                        content: new sap.m.Text({
                            text: sMessage
                        })
                    });
                    errorMsg.open();
                } else {
                    sap.m.MessageBox.show(sMessage, sap.m.MessageBox.Icon.ERROR,
                        oParameters.title || sap.ushell.resources.i18n.getText("error"));
                }
            } else if (iType === sap.ushell.services.Message.Type.CONFIRM) {
                if (oParameters.actions) {
                    sap.m.MessageBox.show(sMessage, sap.m.MessageBox.Icon.QUESTION, oParameters.title, oParameters.actions, oParameters.callback);
                } else {
                    sap.m.MessageBox.confirm(sMessage, oParameters.callback, oParameters.title);
                }
            } else {
                sap.m.MessageToast.show(sMessage, { duration: oParameters.duration || 3000 });
            }
        },

        /**
         * Callback registered with NavService. Triggered on navigation requests
         *
         * Set application container based on information in URL hash.
         * @public
         */
        ignoreHashChange : function (sShellHash, sAppPart, sOldShellHash) {
        },

        /**
         * Callback registered with NavService. Triggered on navigation requests
         *
         * Set application container based on information in URL hash.
         * @public
         */
        doHashChange : function (sShellHash, sAppPart, sOldShellHash, oParseError) {
            if (!enableHashChange) {
                enableHashChange = true;
                return;
            }

            sShellHash = this.fixShellHash(sShellHash);

            //Need to save this value because next string can change it.
            var originalHistoryLength = this.history.getHistoryLength();

            // check if the hash could be parsed (see CSN 0001102839 2014)
            if (oParseError) {
                this.hashChangeFailure(originalHistoryLength, oParseError.message, null, "sap.ushell.renderers.fiori2.Shell.controller");
                return;
            }

            this.history.hashChange(sShellHash, sOldShellHash);

            var oURLParsing = sap.ushell.Container.getService("URLParsing");
            var oShellHash = oURLParsing.parseShellHash(sShellHash);

            var oCurrentState = oModel.getProperty("/currentState");
            var bInCatalog = oCurrentState && oCurrentState.stateName === "catalog";
            var bOpenApp = oShellHash && oShellHash.action !== sap.ushell.renderers.fiori2.Navigation.CATALOG.ACTION;
            if (!bInCatalog || bOpenApp) {
                this.oLoadingDialog.setText("");
                this.oLoadingDialog.openLoadingScreen();
            }


            if (oShellHash && oShellHash.contextRaw && oShellHash.contextRaw === "navResCtx") {
                var oApplication = {};
                oApplication.additionalInformation = oShellHash.params.additionalInformation[0];
                oApplication.url = oShellHash.params.url[0];
                oApplication.applicationType = oShellHash.params.applicationType[0];
                this.openSomething(sShellHash, sOldShellHash, sAppPart, oApplication);
            } else {
                sap.ushell.Container.getService("NavTargetResolution")
                    .resolveHashFragment(sShellHash)
                    .done(jQuery.proxy(this.openSomething, this, sShellHash, sOldShellHash, sAppPart))
                    .fail(jQuery.proxy(function (sMsg) {
                        this.hashChangeFailure(originalHistoryLength, "Failed to resolve navigation target: " + sShellHash, sMsg, "sap.ushell.renderers.fiori2.Shell.controller");
                    }, this));
            }
        },

        hashChangeFailure : function(iHistoryLength, sMessage, sDetails, sComponent){
            this.reportError(sMessage, sDetails, sComponent);
            this.oLoadingDialog.closeLoadingScreen();
            //use timeout to avoid "MessageService not initialized.: error
            this.delayedMessageError(sap.ushell.resources.i18n.getText("fail_to_start_app_config_err"));

            if (iHistoryLength === 0) {
                // if started with an illegal shell hash (deep link), we just remove the hash
                this.cleanHash();
            } else {
                //navigate to the previous URL since in this state the hash that has failed to load is in the URL
                this.historyBack();
            }
         },

        reportError : function (sMessage, sDetails, sComponent) {
            jQuery.sap.log.error(sMessage, sDetails, sComponent);
        },

        delayedMessageError : function(sMsg) {
            setTimeout(function () {
                sap.ushell.Container.getService("Message").error(sMsg);
            }, 0);
        },

        fixShellHash : function(sShellHash) {
            if (!sShellHash) {
                sShellHash = '#';
            } else if (sShellHash.charAt(0) !== '#') {
                sShellHash = '#' + sShellHash;
            }
            return (sShellHash);
        },

        cleanHash : function() {
            window.location.hash = "";
        },

        changeHash : function(sHash) {
            window.location.hash = sHash;
        },

        //navigate to the previous URL since in this state the hash that has failed to load is in the URL
        historyBack : function() {
            window.history.back(1);
        },

        /**
         *  open either an app or the dashboard
         * @public
         */
        openSomething : function (sShellHash, sOldShellHash, sAppPart, oApplication) {
            var oApplicationInformation;

            if (!this.oNavContainer.getParent()) {
                sap.ui.getCore().byId("shell").addContent(this.oNavContainer);
            }

            if (oApplication) {
                // application opened
                try {
                    oApplicationInformation = sap.ushell.Container.getService("URLParsing")
                        .parseShellHash(sShellHash);
                } catch (e) {
                    // this happens when trying to parse hashes from fiori wave one
                    oApplicationInformation = undefined;
                }

                if (oApplicationInformation === undefined) {
                    // This will happen, when a custom app is opened, like Wikipedia
                    jQuery.sap.log.warning("Could not parse shell hash: " + sShellHash);
                    oApplicationInformation = {};
                }
                oApplicationInformation.sShellHash = sShellHash;
                oApplicationInformation.sOldShellHash = sOldShellHash;
                oApplicationInformation.sAppPart = sAppPart;
                oApplicationInformation.oApplication = oApplication;

                if (oApplication.applicationType === sap.ushell.renderers.fiori2.Navigation.CATALOG.ID) {
                    if (oModel.getProperty("/personalization")) {
                        sap.ui.getCore().getEventBus()
                            .publish("showCatalog", oApplicationInformation);
                    } else {
                        this.openDashboard();
                        this.cleanHash();
                        this.oLoadingDialog.closeLoadingScreen();
                    }
                } else {
                    try {
                        jQuery.sap.require('sap.fiori.core-ext');
                    } catch (error) {
                        jQuery.sap.log.warning("failed to load sap.fiori.core-ext!");
                    }
                    oApplicationInformation.oMetadata = sap.ushell.services.AppConfiguration.getMetadata(oApplication);
                    sap.ui.getCore().getEventBus()
                        .publish("openApp", oApplicationInformation);
                }
            } else {

                var oCurrentState = oModel.getProperty("/currentState");
                if (oCurrentState && oCurrentState.stateName === "catalogApp") {
                    this.showCatalog();
                } else {
                    this.openDashboard();
                }
            }
        },

        /**
        *  opens the dashboard
        * @public
        */
        openDashboard : function () {
            var openedFromCatalog = oModel.getProperty("/currentState") && oModel.getProperty("/currentState").stateName === "catalog";
            this.switchViewState("home");
            this.oNavContainer.backToTop();
            sap.ushell.services.AppConfiguration.setCurrentApplication(null);
            this.setAppIcons(null);

            if (openedFromCatalog) {
                // if a new group was created in the catalog - then the bottom space needs to be recalculated
                sap.ushell.utils.addBottomSpace();
            }
            //Recheck tiles visibility on open dashboard. Tiles will be visible on this stage, if user pressed Back from application
            try {
                sap.ushell.utils.handleTilesVisibility();
            } catch (e) {
                //nothing has to be done
            }

            //Add access keys
            // reset selections
            jQuery(document).off('keydown.dashboard');
            jQuery(document).off('keydown.catalog');
            // add dashboard events
            jQuery(document).on('keydown.dashboard', sap.ushell.renderers.fiori2.AccessKeysHandler.dashboardKeydownHandler);
            var oUnifiedShell = sap.ui.getCore().byId('shell');
            oUnifiedShell.focusOnConfigBtn();
        },

        /**
         *
         * @param sChannelId
         * @param sEventId
         * @param {Object} oApplication
         * @public
         */
        openApp : function (sChannelId, sEventId, oData) {


            //TODO - Temp for sFin demo
            this.getView().showDemoPopover = false;


            jQuery.sap.log.warning("Triggering navigation to ", oData);
            var oAppContainer,
                oApplication = oData.oApplication,
                oMetadata = oData.oMetadata || {},
                oInnerControl = null,
                appid = oData.sShellHash.replace(/\W/g, "-"),
                aOldPages,
                sAppTitle = oMetadata.title || "",
                sAppIcon = oMetadata.icon || null,
                messageSrvc = sap.ushell.Container.getService('Message');

            if (!oConfig || !oConfig.changeOpacity || oConfig.changeOpacity !== 'off') {
                // Triggering the app usage mechanism to log this openApp action.
                // Using setTimeout in order not to delay the openApp action
                setTimeout (function () {
                    oUserRecentsService.addAppUsage(oData.sShellHash);
                }, 700);
            }
            
            if (oApplication) {
                try {

                    // WebGUI Application Integration
                    if (oApplication.applicationType === "NWBC" && !(oData && oData.contextRaw && oData.contextRaw === "navResCtx") &&
                            this.history.getHistoryLength() > 1) {
                        enableHashChange = false;
                        window.history.back(1);
                        //open the new FLP html with the resolved tiny url
                        var tarShellHash = oData;
                        var oShellHash = oData;
                        var strShellH;
                        oShellHash.params.additionalInformation = oApplication.additionalInformation;
                        oShellHash.params.url = oApplication.url;
                        oShellHash.params.applicationType = oApplication.applicationType;
                        oShellHash.target = tarShellHash;
                        tarShellHash.contextRaw = oShellHash.contextRaw = "navResCtx";
                        var oShellH = sap.ushell.Container.getService("ShellNavigation").hrefForExternal(oShellHash, true);
                        
                        if(oShellH.skippedParams) {
                        	strShellH = "#" + oData.semanticObject + "-" + oData.action; 
                        } else {
                        	strShellH = oShellH.hash;
                        }
                        this.openAppNewWindow(strShellH);
                        this.oLoadingDialog.closeLoadingScreen();
                        return;
                    }

                    if (!this.oNavContainer.getPage("application" + appid) && !this.oNavContainer.getPage("shellPage" + appid)) {
                        jQuery.sap.require('sap.ushell.components.container.ApplicationContainer');
                        oAppContainer = new sap.ushell.components.container.ApplicationContainer("application" + appid, oApplication);

                        //after the app container is rendered, publish an event to notify
                        //that an app was opened
                        var origAfterRendering = oAppContainer.onAfterRendering;
                        oAppContainer.onAfterRendering = function () {
                            if (origAfterRendering) {
                                origAfterRendering.apply(this, arguments);
                            }
                            //wrapped in setTimeout since "pubilsh" is not async
                            setTimeout(function () {
                                sap.ui.getCore().getEventBus().publish("launchpad", "appOpened", oApplication);
                                jQuery.sap.log.info('app was opened');
                            }, 0);
                        };
                        //after the app container exit, publish an event to notify
                        //that an app was closed
                        var origExit = oAppContainer.exit;
                        oAppContainer.exit = function () {
                            if (origExit) {
                                origExit.apply(this, arguments);
                            }
                            //wrapped in setTimeout since "pubilsh" is not async
                            setTimeout(function () {
                                sap.ui.getCore().getEventBus().publish("launchpad", "appClosed", oApplication);
                                jQuery.sap.log.info('app was closed');
                            }, 0);
                        };

                        sap.ushell.services.AppConfiguration.setCurrentApplication(oApplication);
                        this.oLoadingDialog.showAppInfo(sAppTitle, sAppIcon);
                        if (!oMetadata.fullWidth && oApplication.applicationType !== "NWBC") {
                            oInnerControl = new sap.m.Shell("shellPage" + appid, {
                                logo: sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif'),
                                title : sAppTitle,
                                showLogout : false,
                                app : oAppContainer
                            }).addStyleClass("sapUshellApplicationPage");
                            if (!sAppTitle) {
                                oInnerControl.addStyleClass("sapUshellApplicationPageNoHdr");
                            }
                        } else {
                            //temporary solution for setting the light background for applications
                            oAppContainer.addStyleClass('sapMShellGlobalInnerBackground');
                            oInnerControl = oAppContainer;
                        }
                        this.oNavContainer.addPage(oInnerControl);
                    } else if (this.oNavContainer.getPage("application" + appid) || this.oNavContainer.getPage("shellPage" + appid)) {
                        oInnerControl = this.oNavContainer.getPage("application" + appid) || this.oNavContainer.getPage("shellPage" + appid);
                    }

                    this.setAppIcons(oMetadata);
                    if (oApplication.applicationType[0] === "NWBC" || oApplication.applicationType === "NWBC") {
                        this.switchViewState("minimal");
                        enableHashChange = false;
                        this.changeHash(oData.semanticObject + "-" + oData.action);
                    } else {
                        var oCurrentState = oModel.getProperty("/currentState");
                        if (oCurrentState && oCurrentState.stateName === "catalog") {
                            this.switchViewState("catalogApp");
                        } else {
                            var appState = "app";
                            if (allowedAppStates.indexOf(oConfig.appState) >= 0) {
                                appState = oConfig.appState;
                            }
                            this.switchViewState(appState);
                        }
                    }

                    if (this.history.backwards && this.oNavContainer.getInitialPage() !== this.oNavContainer.getCurrentPage().getId()) {
                        this.oNavContainer.to(oInnerControl, "slideBack");
                    } else {
                        this.oNavContainer.to(oInnerControl, this.oNavContainer.getInitialPage() ? "slide" : "show");
                    }
                    //TODO: this should be done at some other place. we need this here if the user refresh the page while in an application
                    setTimeout(function () {
                        this.oLoadingDialog.closeLoadingScreen();
                    }.bind(this), 300);
                } catch (e) {
                    // create a new navContainer because old one is in a irreparable state
                    // save all other pages besides the page which causes the error
                    this.reportError(e.name, e.message, sAppTitle);
                    this.oNavContainer.removePage(this.oNavContainer.getCurrentPage()).destroy();
                    aOldPages = this.oNavContainer.removeAllPages();

                    this.oNavContainer.destroy();
                    this.oNavContainer = this.getView().initNavContainer(this);

                    jQuery.each(aOldPages, jQuery.proxy(function (i, v) {
                        if (!this.oNavContainer.getPage(v.getId())) {
                            this.oNavContainer.addPage(v);
                        }
                        if (v.getId() === this.oNavContainer.getInitialPage()) {
                            v.removeStyleClass("sapMNavItemHidden"); // still there because of old navContainer
                        }
                    }, this));
                    this.navigateToHome();
                    this.oLoadingDialog.closeLoadingScreen();
                    messageSrvc.error(sap.ushell.resources.i18n.getText("fail_to_start_app_runtime_err"));
                }
            }
            // close if we are on first position (no app has be launched before)
            if (this.history.getHistoryLength() < 1) {
                this.oLoadingDialog.closeLoadingScreen();
            }
        },

        openAppNewWindow : function (sUrl) {
            window.open(sUrl);
        },

        setAppIcons: function (oMetadataConfig) {
            // TODO Implement adjustment of relative paths:
            // Should be relative to Component.js, not to HTML file!
            var sModulePath = jQuery.sap.getModulePath("sap.ushell");
            var oLaunchIconPhone = (oMetadataConfig && oMetadataConfig.homeScreenIconPhone) ||
                (sModulePath + '/themes/base/img/launchicons/57_iPhone_Desktop_Launch.png'),
                oLaunchIconPhone2 = (oMetadataConfig && oMetadataConfig["homeScreenIconPhone@2"]) ||
                    (sModulePath + '/themes/base/img/launchicons/114_iPhone-Retina_Web_Clip.png'),
                oLaunchIconTablet = (oMetadataConfig && oMetadataConfig.homeScreenIconTablet) ||
                    (sModulePath + '/themes/base/img/launchicons/72_iPad_Desktop_Launch.png'),
                oLaunchIconTablet2 = (oMetadataConfig && oMetadataConfig["homeScreenIconTablet@2"]) ||
                    (sModulePath + '/themes/base/img/launchicons/144_iPad_Retina_Web_Clip.png'),
                oFavIcon = (oMetadataConfig && oMetadataConfig.favIcon) ||
                    (sModulePath + '/themes/base/img/launchpad_favicon.ico'),
                sTitle = (oMetadataConfig && oMetadataConfig.title) ||
                    //TODO define proper localization tag for default window title
                    sap.ushell.resources.i18n.getText("homeBtn_tooltip"),
                sCurrentFavIconHref = this.getFavIconHref();
            if (sap.ui.Device.os.ios) {
                jQuery.sap.setIcons({
                    'phone': oLaunchIconPhone,
                    'phone@2': oLaunchIconPhone2,
                    'tablet': oLaunchIconTablet,
                    'tablet@2': oLaunchIconTablet2,
                    'favicon': oFavIcon,
                    'precomposed': true
                });
            } else if (sCurrentFavIconHref !== oFavIcon) {
                jQuery.sap.setIcons({
                    'phone': '',
                    'phone@2': '',
                    'tablet': '',
                    'tablet@2': '',
                    'favicon': oFavIcon,
                    'precomposed': true
                });
            }

            window.document.title = sTitle;
        },

        getFavIconHref: function () {
            return jQuery('link').filter('[rel="shortcut icon"]').attr('href') || '';
        },

        externalSearchTriggered: function (sChannelId, sEventId, oData) {
            oModel.setProperty("/searchTerm", oData.searchTerm);
            oData.query = oData.searchTerm;
//            sap.ui.getCore().byId("sfOverlay").fireSearch(oData);
        },

        onAfterNavigate: function (oEvent) {
            var sHome = this.oNavContainer.getInitialPage(), //DashboardPage
                sFrom = oEvent.getParameter("fromId");

            if (sFrom !== sHome && sFrom !== this.catalogPageId) {
                this.oNavContainer.removeAggregation("pages", sFrom, true);
                sap.ui.getCore().byId(sFrom).destroy();
            }
            this.oLoadingDialog.closeLoadingScreen();
        },

        onAfterRendering: function () {
            if (window.f2p) {
                f2p.add(f2p.m.endHomePage);
            }
        },

        navigateToHome: function (oEvent) {
            if (!oEvent || (oEvent && oEvent.getParameter("id") === 'homeBtn')){
                location.hash = '';
                this.openDashboard();
            }
            else {
                sap.ushell.renderers.fiori2.Navigation.openCatalogByHash({
                    groupContext: null
                });
            }
        },

        toggleSearch : function (bIsAvailable) {
            oModel.setProperty("/searchAvailable", bIsAvailable);
        },

        toggleRtlMode : function (bRtl) {
            oModel.setProperty("/rtl", bRtl);
        },

        togglePane : function (oEvent) {
            var oSource = oEvent.getSource(),
                bState = oSource.getSelected();
            if (!sap.ui.getCore().byId('groupList')) {
                var oGroupListPage = this.getView().oDashboardManager.getGroupListView();

                // desktop and IOS7 both use the browser's scroller thus both should be checked
                if (sap.ui.Device.system.desktop) {
                    oGroupListPage.addStyleClass("sapUshellGroupListDesktopScrollbar");
                }
                this.getModel().setProperty('/states/home/paneContent', [oGroupListPage.getId()]);
                this.getModel().setProperty('/currentState/paneContent', [oGroupListPage.getId()]);
            }
            if (oEvent.getParameter("id") === "categoriesBtn") {
                oSource.getModel().setProperty("/currentState/showCurtainPane", !bState);
            } else {
                oSource.getModel().setProperty("/currentState/showPane", !bState);
                setTimeout (function () {
                    var oShell = sap.ui.getCore().byId("shell");
                    if(oShell){
                        oShell.setFocusOnFirstGroupInList();
                    }
                }, 1500);
            }

            setTimeout(function () {
                $("li.sapUshellOver").click();
            }, 400);         
        },

        getActiveViews: function () {
            var aCurtainContent = this.getModel().getProperty("/currentState/curtainContent"),
                oPage = sap.ui.getCore().byId(aCurtainContent[0]),
                aActiveViews = [];

            // the two search suggestion controller need to know
            // which is currently active to not trigger request twice
            jQuery.each(oPage.getContent(), function (i, v) {
                aActiveViews.push(v.getId());
            });

            return aActiveViews;
        },

        getLastSearchScreen: function(){
            return oModel.getProperty("/lastSearchScreen");
        },

        saveSearchScreen: function(sState){
            if (sState === 'historyScreen' || sState === 'searchResults' || sState === 'suggestions') {
                oModel.setProperty("/lastSearchScreen", sState);
            }
        },

        switchViewState: function (sState, bSaveLastState) {
            var sPath = sState[0] === "/" ? sState : "/states/" + sState,
                oState = oModel.getProperty(sPath),
                /** @type sap.ui.unified.Shell */
                oShell = sap.ui.getCore().byId("shell"),
                oCurrentState = oModel.getProperty("/currentState") || {};

            if (!oShell.getSearch() || oState.search !== oShell.getSearch().getId()) {
                oShell.setSearch(sap.ui.getCore().byId(oState.search));
            }

            this.saveSearchScreen(sState);

            if (!!bSaveLastState) {
                oModel.setProperty("/lastState", oCurrentState);
            }

            oState = jQuery.extend({}, oCurrentState, oState);
            oModel.setProperty("/currentState", oState);

            if (sState === "searchResults") {
            	oModel.setProperty("/lastSearchScreen", '');
            	if (window.location.href.indexOf("#Action-search") > -1) {
            		this.closeShellOverlay();
            	}
            	else {
            		var searchModel = sap.ui.getCore().getModel("searchModel");
            		window.location.href = "#Action-search&/searchTerm=" + encodeURI(searchModel.getProperty("/searchBoxTerm")) + "&dataSource=" + encodeURI(JSON.stringify(searchModel.getDataSourceJson()));
            	}
            }
            else {
            	if (!!oState.showCurtain) {
                    this.openShellOverlay();
                } else {
                    this.closeShellOverlay();
                }
            }
        },

        pressActionBtn: function (oEvent) {

        	// don't hide the shell header when the action sheet is open on mobile devices only
        	if (!sap.ui.Device.system.desktop) {
        		this.getModel().setProperty("/headerHiding", false);
        	}
            var oActionSheet = sap.ui.getCore().byId('headActions');
            if (!oActionSheet) {
                var oLoginDetails = new sap.ushell.ui.footerbar.LoginDetailsButton("loginDetails"),
                    oLogoutButton = new sap.ushell.ui.footerbar.LogoutButton("logoutBtn"),
                    oAboutButton = new sap.ushell.ui.footerbar.AboutButton("aboutBtn");

                var oHideGroupsButton = new sap.ushell.ui.footerbar.HideGroupsButton("hideGroupsBtn");
                if(!this.getModel().getProperty('/enableHideGroups')){ //Decided to always add the button but in case the hideGroups feature is off- hide it.
                   oHideGroupsButton.setVisible(false);
                }

                var oContactSupport = new sap.ushell.ui.footerbar.ContactSupportButton("ContactSupportBtn", {
                    visible: this.bContactSupportEnabled
                });

                oActionSheet = new sap.m.ActionSheet("headActions", {
                    placement: sap.m.PlacementType.Bottom,
                    buttons: {path: "/currentState/actions", factory: function (sId, oContext) {
                        return sap.ui.getCore().byId(oContext.getObject());
                    }}
                });
                oActionSheet.updateAggregation = this.getView().updateShellAggregation;
                oActionSheet.setModel(this.getModel());
                this.getView().aDanglingControls.push(oActionSheet, oLoginDetails, oLogoutButton, oAboutButton, oContactSupport, oHideGroupsButton);
            }
            oActionSheet.openBy(oEvent.getSource());

            oActionSheet.attachAfterClose(oActionSheet, function() {
            	// reset header hiding according to the current state (on mobile devices only)
            	if (!sap.ui.Device.system.desktop) {
            		var currentState = sap.ui.getCore().byId('shell').getModel().getProperty("/currentState"),
            		headerHiding = currentState.headerHiding;
            		this.getModel().setProperty("/headerHiding", headerHiding);
            	}
            });
        },

        loadCoreExt: function () {
            //if sap.fiori.core or sap.fiori.core-ext are loaded, we do not need to load core-ext
            var bAlreadyLoaded =   jQuery.sap.isDeclared('sap.fiori.core', true) ||
                                jQuery.sap.isDeclared('sap.fiori.core-ext', true),
                oLoaderWorker,
                sPathToWorker = '';

            if (bAlreadyLoaded) {
                return;
            }
            //if HTML5 Web Workers are supported use it to load core-ext
            if (window.Worker) {
                sPathToWorker = jQuery.sap.getModulePath('sap.ushell.loader', '.js');
                //initiate the Worker
                oLoaderWorker = new window.Worker(sPathToWorker);
                //add a listener for messages from the worker
                oLoaderWorker.onmessage = function (oEvent) {
                    if (oEvent.data && !oEvent.data.error) {
                        try {
                            window.eval(oEvent.data);
                            jQuery.sap.declare('sap.fiori.core-ext' + '');
                        } catch (e) {
                            jQuery.sap.log.warning('failed to load sap.fiori.core-ext');
                        }
                    } else {
                        jQuery.sap.log.warning('failed to load sap.fiori.core-ext');
                    }
                    //terminate the worker, if the worker will be extended the terminate call should be modified
                    oLoaderWorker.terminate();
                };
                //ask the loader to load core-ext
                oLoaderWorker.postMessage({
                    action: 'loadResource',
                    url: window['sap-ui-debug'] ? '../fiori/core-ext-dbg.js' : '../fiori/core-ext.js'
                });
            } else {
                //if WebWorker isn't supported, use a require statement in a setTimeout so that this call will not
                //disrupt other code flow
                setTimeout(function () {
                    try {
                        jQuery.sap.require('sap.fiori.core-ext');
                    } catch (error) {
                        jQuery.sap.log.warning("failed to load sap.fiori.core-ext");
                    }
                }, 0);
            }
        }
    });
}());

}; // end of sap/ushell/renderers/fiori2/Shell.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.launchpad.DashboardManager') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, console, document, $, setTimeout, window */
    /*jslint plusplus: true, nomen: true, bitwise: true */

    jQuery.sap.declare("sap.ushell.renderers.fiori2.launchpad.DashboardManager");
    
    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-core'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-widget'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-mouse'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-sortable'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-draggable'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-droppable'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-effect'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-effect-shake'); // unlisted dependency retained


    /**
     * Return translated text. Private function in this module.
     * @param sMsgId
     *      Id of the text that is to be translated.
     * @param aParams
     *      Array of parameters to be included in the resulted string instead of place holders.
     */
    var getLocalizedText = function (sMsgId, aParams) {
        return aParams ? sap.ushell.resources.i18n.getText(sMsgId, aParams)  : sap.ushell.resources.i18n.getText(sMsgId);
    };

    /**
     * This function returns the number of tiles which are supported on the current device in the current catalog.
     * @param oCatalogModel
     * @returns {Number}
     * @private
     */
    var getNumIntentSupportedTiles = function (oCatalogModel) {
        var aCatalogTiles = this.oModel.getProperty('/catalogTiles'),
            aCurrentCatalogSupportedTiles = aCatalogTiles.filter(function (oTile) {
                return oTile.catalogId === oCatalogModel.id && oTile.isTileIntentSupported === true;
            });

        return aCurrentCatalogSupportedTiles.length;
    };

    sap.ui.base.EventProvider.extend("sap.ushell.renderers.fiori2.launchpad.DashboardManager", {
        metadata : {
            publicMethods : ["getModel", "getDashboardView", "getGroupListView", "loadPersonalizedGroups", "attachEvent", "detachEvent", "attachEventOnce"]
        },

        constructor : function (sId, mSettings) {
            //make this class only available once
            if (sap.ushell.renderers.fiori2.launchpad.getDashboardManager && sap.ushell.renderers.fiori2.launchpad.getDashboardManager()) {
                return sap.ushell.renderers.fiori2.launchpad.getDashboardManager();
            }
            sap.ushell.renderers.fiori2.launchpad.getDashboardManager = jQuery.sap.getter(this.getInterface());
            this.oPageBuilderService = sap.ushell.Container.getService("LaunchPage");
            this.oModel = mSettings.model;
            this.oConfig = mSettings.config;
            this.oDashboardView = sap.ui.view('dashboard', {
                type: sap.ui.core.mvc.ViewType.JS,
                viewName: "sap.ushell.renderers.fiori2.launchpad.dashboard.DashboardContent",
                viewData: {
                    config: this.oConfig
                }
            });
            this.oDashboardView.setWidth('');
            this.oDashboardView.setDisplayBlock(true);
            this.oSortableDeferred = $.Deferred();
            this.oSortableDeferred.resolve();
            this.aRequestQueue = [];
            this.bRequestRunning = false;
            this.registerEvents();
            this.oTileCatalogToGroupsMap = {};
            this.tileViewUpdateQueue = [];
            this.tileViewUpdateTimeoutID = 0;
        },

        registerEvents : function () {
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.subscribe("launchpad", "addBookmarkTile", this._createBookmark, this);
            oEventBus.subscribe("launchpad", "loadDashboardGroups", this.loadPersonalizedGroups, this);
            oEventBus.subscribe("launchpad", "createGroup", this._createGroup, this);
            oEventBus.subscribe("launchpad", "deleteGroup", this._deleteGroup, this);
            oEventBus.subscribe("launchpad", "resetGroup", this._resetGroup, this);
            oEventBus.subscribe("launchpad", "changeGroupTitle", this._changeGroupTitle, this);
            oEventBus.subscribe("launchpad", "moveGroup", this._moveGroup, this);
            oEventBus.subscribe("launchpad", "deleteTile", this._deleteTile, this);
            oEventBus.subscribe("launchpad", "moveTile", this._moveTile, this);
            oEventBus.subscribe("launchpad", "sortableStart", this._sortableStart, this);
            oEventBus.subscribe("launchpad", "sortableStop", this._sortableStop, this);
            oEventBus.subscribe("showCatalog", this.loadAllCatalogs, this);

            this.oDashboardView.addEventDelegate({
                onBeforeFirstShow: jQuery.proxy(function (evt) {
                    try {
                        this.loadPersonalizedGroups();
                    } catch (err) {
                        console.log("DahsboardManager ; oDashboardView.addEventDelegate failed ; exception: " + err);
                    }
                }, this),
                onAfterHide: jQuery.proxy(function (evt) {
                    try {
                        sap.ushell.utils.setTilesNoVisibility();// setting no visibility on all visible tiles
                    } catch (err) {
                        console.log("DahsboardManager ; Call to _sap.ushell.utils.setTilesNoVisibility failed ; exception: " + err);
                    }
                }, this)
            });
        },

        destroy : function () {
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.unsubscribe("launchpad", "addBookmarkTile", this._createBookmark, this);
            oEventBus.unsubscribe("launchpad", "loadDashboardGroups", this.loadPersonalizedGroups, this);
            oEventBus.unsubscribe("launchpad", "createGroup", this._createGroup, this);
            oEventBus.unsubscribe("launchpad", "deleteGroup", this._deleteGroup, this);
            oEventBus.unsubscribe("launchpad", "resetGroup", this._resetGroup, this);
            oEventBus.unsubscribe("launchpad", "changeGroupTitle", this._changeGroupTitle, this);
            oEventBus.unsubscribe("launchpad", "moveGroup", this._moveGroup, this);
            oEventBus.unsubscribe("launchpad", "deleteTile", this._deleteTile, this);
            oEventBus.unsubscribe("launchpad", "moveTile", this._moveTile, this);
            oEventBus.unsubscribe("launchpad", "sortableStart", this._sortableStart, this);
            oEventBus.unsubscribe("launchpad", "sortableStop", this._sortableStop, this);
            oEventBus.unsubscribe("showCatalog", this.loadAllCatalogs, this);

            this.oDashboardView.destroy();

            sap.ushell.renderers.fiori2.launchpad.getDashboardManager = undefined;
        },


        _refreshTiles : function () {
            var that = this,
                aGroups = this.oModel.getProperty("/groups");

            jQuery.each(aGroups, function (nIndex, oGroup) {
                jQuery.each(oGroup.tiles, function (nIndex, oTile) {
                    that.oPageBuilderService.refreshTile(oTile.object);
                });
            });
        },

        _sortableStart : function () {
            this.oSortableDeferred = $.Deferred();
        },

        _createBookmark : function (sChannelId, sEventId, oData) {
            var tileGroup = oData.group ? oData.group.object : "",
                groupId = oData.group ? oData.group.groupId : 0,
                targetGroup;

            delete oData.group;

            this._addRequest($.proxy(function () {
                var oResultPromise = sap.ushell.Container.getService("Bookmark").addBookmark(oData, tileGroup),
                    oResourceBundle = sap.ushell.resources.i18n;
                oResultPromise.always($.proxy(this._checkRequestQueue, this));
                oResultPromise.done(function (oTile) {
                    if (!oTile) {
                        this.loadPersonalizedGroups();
                        return;
                    }

                    var newTile = this._getTileModel(oTile);

                    targetGroup = this.oModel.getProperty("/groups/" + (this._getIndexOfGroup(groupId) || 0));
                    targetGroup.tiles.push(newTile);
                    this.oModel.setProperty("/groups/"  + this._getIndexOfGroup(groupId), targetGroup);
                    if (sap.ushell.Container) { // TODO at least in some test cases this is not present
                        sap.ushell.Container.getService('Message').info(oResourceBundle.getText('tile_created_msg'));
                    }

                }.bind(this));

                oResultPromise.fail(function (sMsg) {
                    jQuery.sap.log.error(
                        "Failed to add bookmark",
                        sMsg,
                        "sap.ushell.ui.footerbar.AddBookmarkButton"
                    );
                    if (sap.ushell.Container) {
                        sap.ushell.Container.getService('Message').error(oResourceBundle.getText('fail_to_add_tile_msg'));
                    }
                });
            }, this));
        },

        _sortableStop : function () {
            this.oSortableDeferred.resolve();
        },

        _handleAfterSortable : function (fFunc) {
            return $.proxy(function () {
                var outerArgs = Array.prototype.slice.call(arguments);
                this.oSortableDeferred.done(function () {
                    fFunc.apply(null, outerArgs);
                });
            }, this);
        },

        _addRequest : function (fRequest) {
            this.aRequestQueue.push(fRequest);
            if (!this.bRequestRunning) {
                this.bRequestRunning = true;
                this.aRequestQueue.shift()();
            }
        },

        _checkRequestQueue : function () {
            if (this.aRequestQueue.length === 0) {
                this.bRequestRunning = false;
            } else {
                this.aRequestQueue.shift()();
            }
        },

        _requestFailed : function () {
            this.aRequestQueue = [];
            this.bRequestRunning = false;
        },

        /*
         * oData should have the following parameters:
         * title
         */
        _createGroup : function (sChannelId, sEventId, oData) {
            var that = this,
                oGroup = this._getGroupModel(null),
                aGroups = this.oModel.getProperty("/groups"),
                oModel = this.oModel;

            oModel.setProperty("/groupList-skipScrollToGroup", true);
            window.setTimeout(function () {
                oModel.setProperty("/groups/" + aGroups.length, oGroup);
            }, 500);
            window.setTimeout(function () {
                oModel.setProperty("/groupList-skipScrollToGroup", false);
            }, 1000);

            // We don't call the backend here as the user hasn't had the opportunity to give the group a name yet.
            // The group will be persisted after it got a name, in the changeGroupTitle handler.
            // TODO: This depends on the behaviour of the GroupList, which enters edit-mode immediately after creating a group.
            //       It would be better if this event would be fired after the group has a name.
        },

        _getIndexOfGroup : function (sGroupId) {
            var nGroupIndex = null,
                aGroups = this.oModel.getProperty("/groups");
            jQuery.each(aGroups, function (nIndex, oGroup) {
                if (oGroup.groupId === sGroupId) {
                    nGroupIndex = nIndex;
                    return false;
                }
            });
            return nGroupIndex;
        },

        _getPathOfGroup : function (sGroupId) {
            return "/groups/" + this._getIndexOfGroup(sGroupId);
        },

        _getPathOfTile : function (sTileId) {
            var aGroups = this.oModel.getProperty("/groups"),
                nResGroupIndex = null,
                nResTileIndex = null;

            jQuery.each(aGroups, function (nGroupIndex, oGroup) {
                jQuery.each(oGroup.tiles, function (nTileIndex, oTile) {
                    if (oTile.uuid === sTileId) {
                        nResGroupIndex = nGroupIndex;
                        nResTileIndex = nTileIndex;
                        return false;
                    }
                });

                if (nResGroupIndex !== null) {
                    return false;
                }
            });

            return nResGroupIndex !== null ? "/groups/" + nResGroupIndex + "/tiles/" + nResTileIndex : null;
        },

        // see http://stackoverflow.com/questions/5306680/move-an-array-element-from-one-array-position-to-another
        _moveInArray : function (aArray, nFromIndex, nToIndex) {
            if (nToIndex >= aArray.length) {
                var k = nToIndex - aArray.length;
                while ((k--) + 1) {
                    aArray.push(undefined);
                }
            }
            aArray.splice(nToIndex, 0, aArray.splice(nFromIndex, 1)[0]);
        },

        _updateGroupIndices : function (aArray) {
            var k;
            for (k = 0; k < aArray.length; k++) {
                aArray[k].index = k;
            }
        },
        /*
         * oData should have the following parameters
         * groupId
         */
        _deleteGroup : function (sChannelId, sEventId, oData) {
            var that = this,
                sGroupId = oData.groupId,
                aGroups = this.oModel.getProperty("/groups"),
                nGroupIndex = this._getIndexOfGroup(sGroupId),
                oGroup = null,
                oResultPromise,
                oModel,
                nextSelectedItemIndex,
                oBus;

            nextSelectedItemIndex = aGroups.length - 1 === nGroupIndex ? nGroupIndex - 1 : nGroupIndex;
            this._destroyGroupModel("/groups" + nGroupIndex);
            oGroup = aGroups.splice(nGroupIndex, 1)[0].object;
            oModel = this.oModel;
            oModel.setProperty("/groupList-skipScrollToGroup", true);
            oModel.setProperty("/groups", aGroups);
            this._updateGroupIndices(aGroups);

            if (nextSelectedItemIndex >= 0) {
                oBus = sap.ui.getCore().getEventBus();
                window.setTimeout($.proxy(oBus.publish, oBus, "launchpad", "scrollToGroup", { groupId : this.oModel.getProperty("/groups")[nextSelectedItemIndex].groupId }), 200);
            }

            window.setTimeout(function () {
                oModel.setProperty("/groupList-skipScrollToGroup", false);
            }, 1000);

            this._addRequest($.proxy(function () {
                var groupName = sap.ushell.Container.getService("LaunchPage").getGroupTitle(oGroup);
                try {
                    oResultPromise = this.oPageBuilderService.removeGroup(oGroup);
                } catch (err) {
                    this._resetGroupsOnFailure("fail_to_delete_group_msg");
                    return;
                }

                oResultPromise.done($.proxy( this._showLocalizedMessage("group_deleted_msg", [groupName])));
                oResultPromise.fail( this._handleAfterSortable(that._resetGroupsOnFailureHelper("fail_to_delete_group_msg")));
                oResultPromise.always( $.proxy(this._checkRequestQueue, this) );
            }, this));
        },

        /*
         * oData should have the following parameters
         * groupId
         */
        _resetGroup : function (sChannelId, sEventId, oData) {
            var that = this,
                sGroupId = oData.groupId,
                nGroupIndex = this._getIndexOfGroup(sGroupId),
                oGroup = this.oModel.getProperty("/groups/" + nGroupIndex),
                oResultPromise;

            this.oModel.setProperty("/groups/" + nGroupIndex + "/sortable", false);

            this._addRequest($.proxy(function () {
                try {
                    oResultPromise = this.oPageBuilderService.resetGroup(oGroup.object);
                } catch (err) {
                    this._resetGroupsOnFailure("fail_to_reset_group_msg");
                    return;
                }

                oResultPromise.done(this._handleAfterSortable($.proxy(function (sGroupId, oGroup, oResetedGroup) {
                    var nGroupIndex = that._getIndexOfGroup(sGroupId);

                    this._loadGroup(nGroupIndex, oResetedGroup || oGroup.object);
                    this._showLocalizedMessage("group_reset_msg", [oGroup.title]);
                    this.oModel.setProperty("/groups/" + nGroupIndex + "/sortable", true);
                }, this, sGroupId, oGroup)));

                oResultPromise.fail(this._handleAfterSortable(that._resetGroupsOnFailureHelper("fail_to_reset_group_msg")));
                oResultPromise.always($.proxy(this._checkRequestQueue, this));
            }, this));
        },

        /*
         * oData should have the following parameters
         * fromIndex
         * toIndex
         */
        _moveGroup : function (sChannelId, sEventId, oData) {
            var iFromIndex = oData.fromIndex,
                iToIndex = oData.toIndex,
                aGroups = this.oModel.getProperty("/groups"),
                oModel = this.oModel,
                oResultPromise;

            //Fix the indices to support hidden groups
            iFromIndex = this._adjustFromGroupIndex(iFromIndex, aGroups);

            //Move var definition after fixing the from index.
            var oGroup = aGroups[iFromIndex],
            sGroupId = oGroup.groupId;
            //Fix the to index accordingly
            iToIndex = this._adjustToGroupIndex(iToIndex, aGroups, sGroupId);

            this._moveInArray(aGroups, iFromIndex, iToIndex);
            this._updateGroupIndices(aGroups);
            oModel.setProperty("/groupList-skipScrollToGroup", true);
            oModel.setProperty("/groups", aGroups);

            window.setTimeout(function () {
                oModel.setProperty("/groupList-skipScrollToGroup", false);
            }, 1000);

            if (oGroup.isDefaultGroup) {
                that.toggleDefaultGroupVisibility(false);
            }

            this._addRequest($.proxy(function () {
                var oGroup = this.oModel.getProperty(this._getPathOfGroup(sGroupId));
                try {
                    oResultPromise = this.oPageBuilderService.moveGroup(oGroup.object, iToIndex);
                } catch (err) {
                    this._resetGroupsOnFailure("fail_to_move_group_msg");
                    return;
                }
                oResultPromise.fail(this._handleAfterSortable(this._resetGroupsOnFailureHelper("fail_to_move_group_msg")));
                oResultPromise.always($.proxy(this._checkRequestQueue, this));
            }, this));
        },

        /*
         * toIndex - The index in the UI of the required group new index. (it is not including the group itself)
         * groups - The list of groups in the model (including hidden and visible groups)
         * The function returns the new index to be used in the model - since there might be hidden groups that should be taken in account
         */
        _adjustToGroupIndex : function(toIndex, groups, groupId ){
                var visibleCounter = 0,
                    bIsGroupIncluded = false,
                    i = 0;
                // In order to get the new index, count all groups (visible+hidden) up to the new index received from the UI.
                for (i = 0; i < groups.length && visibleCounter < toIndex; i++) {
                    if (groups[i].isGroupVisible) {
                        if (groups[i].groupId === groupId) {
                            bIsGroupIncluded = true;
                        } else {
                            visibleCounter++;
                        }
                    }
                }
                if (bIsGroupIncluded) {
                    return i - 1;
                }
                return i;
        },

        _adjustFromGroupIndex : function(index, groups){

        	var visibleGroupsCounter = 0;
        	for(var i=0; i<groups.length; i++){
        		if(groups[i].isGroupVisible){
        			visibleGroupsCounter++;
        		}
        		if(visibleGroupsCounter === index+1){
        			return i;
        		}
        	}
        	//Not suppose to happen, but if not found return the input index
        	return index;
        },
        /*
         * oData should have the following parameters
         * groupId
         * newTitle
         */
        _changeGroupTitle : function (sChannelId, sEventId, oData) {
            var sNewTitle = oData.newTitle,
                sGroupId = oData.groupId,
                nGroupIndex = this._getIndexOfGroup(sGroupId),
                oGroup = this.oModel.getProperty("/groups/" + nGroupIndex),
                oResultPromise;

            this.oModel.setProperty("/groups/" + nGroupIndex + "/title", sNewTitle);

            // Check, if the group has already been persisted.
            if (!oGroup.object) {
                // Add the group in the backend.
                this._addRequest($.proxy(function () {
                    try {
                        oResultPromise = this.oPageBuilderService.addGroup(sNewTitle);
                    } catch (err) {
                        this._resetGroupsOnFailure("fail_to_create_group_msg");
                        return;
                    }

                    oResultPromise.done(this._handleAfterSortable($.proxy(function (sGroupId, oNewGroup) {
                        var nGroupIndex = this._getIndexOfGroup(sGroupId);
                        this._loadGroup(nGroupIndex, oNewGroup);
                    }, this, sGroupId)));

                    oResultPromise.fail( this._handleAfterSortable(this._resetGroupsOnFailureHelper("fail_to_create_group_msg")));
                }, this));
            } else {
                // Rename the group in the backend.
                // model is already changed - it only has to be made persistent in the backend
                this._addRequest($.proxy(function () {
                    try {
                        oResultPromise = this.oPageBuilderService.setGroupTitle(oGroup.object, sNewTitle);
                    } catch (err) {
                        this._resetGroupsOnFailure("fail_to_rename_group_msg");
                        return;
                    }

                    // Revert to the old title.
                    oResultPromise.fail(this._handleAfterSortable($.proxy(function (sGroupId, sOldTitle) {
                        var sGroupPath = this._getPathOfGroup(sGroupId);
                        this._showLocalizedError("fail_to_rename_group_msg");
                        this.oModel.setProperty(sGroupPath + "/title", sOldTitle);
                        this._requestFailed();
                    }, this, sGroupId)));
                }, this));
            }

            oResultPromise.always($.proxy(this._checkRequestQueue, this));
        },

        _createTile : function (oData) {
            var oCatalogTileContext = oData.catalogTileContext,
                oContext = oData.groupContext,
                oGroup = this.oModel.getProperty(oContext.getPath()),
                sGroupId = oGroup.groupId,
                oResultPromise,
                deferred = jQuery.Deferred(),
                oResponseData = {};

            //publish event for UserActivityLog
            var oBus = sap.ui.getCore().getEventBus();
            $.proxy(oBus.publish, oBus, "launchpad", "addTile", {
                catalogTileContext : oCatalogTileContext,
                groupContext: oContext
            });

            if (oContext.getObject().isDefaultGroup) {
                this.toggleDefaultGroupVisibility(true);
            }

            if (!oCatalogTileContext) {
                jQuery.sap.log.warning("DashboardManager: Did not receive catalog tile object. Abort.", this);
                return;
            }

            this._addRequest($.proxy(function () {
                try {
                    oResultPromise = this.oPageBuilderService.addTile(oCatalogTileContext.getProperty("src"), oContext.getProperty("object"));
                } catch (err) {
                    this._resetGroupsOnFailure("fail_to_add_tile_msg");
                    return;
                }

                var that = this;
                oResultPromise
                    .done(this._handleAfterSortable($.proxy(function (sGroupId, oTile) {
                        var sGroupPath = this._getPathOfGroup(sGroupId);
                        this._addTileToGroup(sGroupPath, oTile);
                        oResponseData = {group: oGroup, status: 1, action: 'add'}; // 1 - success
                        deferred.resolve(oResponseData);
                    }, this, sGroupId)))
                     .fail(function() {
                        oResponseData = {group: oGroup, status: 0, action: 'add'};  // 0 - failure
                        deferred.resolve(oResponseData);
                    })
                    .always(
                        function(){
                            that._checkRequestQueue();
                    });
            }, this));

            return deferred.promise();
        },

        _createGroupAndSaveTile : function (oData) {
            var oCatalogTileContext = oData.catalogTileContext,
                sNewTitle = oData.newGroupName,
                oResultPromise,
                deferred = jQuery.Deferred(),
                that = this,
                oResponseData = {};

            if (sap.ushell.utils.validHash(sNewTitle) && oCatalogTileContext){

                var oGroup = this._getGroupModel(null),
                    aGroups = this.oModel.getProperty("/groups"),
                    oBus = sap.ui.getCore().getEventBus(),
                    sGroupId = oGroup.groupId;

                var index = aGroups.length;
                this.oModel.setProperty("/groups/" + index, oGroup);
                this.oModel.setProperty("/groups/" + index + "/title", sNewTitle);

                if (!oCatalogTileContext) {
                    jQuery.sap.log.warning("DashboardManager: Did not receive catalog tile object. Abort.", this);
                    return;
                }

                // Create new group
                this._addRequest($.proxy(function () {
                    try {
                        oResultPromise = this.oPageBuilderService.addGroup(sNewTitle);
                    } catch (err) {
                        this._resetGroupsOnFailure("fail_to_create_group_msg");
                        return;
                    }

                    oResultPromise.done(this._handleAfterSortable($.proxy(function (sGroupId, oNewGroup) {
                        var nGroupIndex = this._getIndexOfGroup(sGroupId);

                        this._loadGroup(nGroupIndex, oNewGroup);

                        var oContext = new sap.ui.model.Context(this.oModel, "/groups/" + nGroupIndex);

                        var promise = this._createTile({
                            catalogTileContext : oCatalogTileContext,
                            groupContext: oContext
                        });

                        promise.done(function(data){
                            oResponseData = {group: data.group, status: 1, action: 'addTileToNewGroup'}; // 1 - success
                            deferred.resolve(oResponseData);
                        }).fail(function(data){
                            oResponseData = {group: data.group, status: 0, action: 'addTileToNewGroup'}; // 0 - failure
                            deferred.resolve(oResponseData);
                        });
                    }, this, sGroupId)));

                    oResultPromise.fail(function(data){
                        this._handleAfterSortable(this._resetGroupsOnFailureHelper("fail_to_create_group_msg"));
                        oResponseData = {group: data.group, status: 0, action: 'createNewGroup'}; // 0 - failure
                        deferred.resolve(oResponseData); // 0 - failure
                    });

                    oResultPromise.always($.proxy(this._checkRequestQueue, this));
                }, this));
            }
            return deferred.promise();
        },

        /*
         * Dashboard
         * oData should have the following parameters
         * tileId
         * groupId
         */
        _deleteTile : function (sChannelId, sEventId, oData) {
            var that = this,
                sTileId = oData.tileId,
                aGroups = this.oModel.getProperty("/groups");

            jQuery.each(aGroups, function (nGroupIndex, oGroup) {
                var bFoundFlag = false;
                jQuery.each(oGroup.tiles, function (nTileIndex, oTmpTile) {
                    if (oTmpTile.uuid === sTileId) {
                        // Remove tile from group.
                        that._destroyTileModel("/groups/" + nGroupIndex + "/tiles/" + nTileIndex);
                        var oTile = oGroup.tiles.splice(nTileIndex, 1)[0],
                            oResultPromise;

                        that.oModel.setProperty("/groups/" + nGroupIndex + "/tiles", oGroup.tiles);

                        if (oGroup.isDefaultGroup && oGroup.tiles.length == 0) {
                            that.toggleDefaultGroupVisibility(false);
                        }

                        that._addRequest(function () {
                            try {
                                oResultPromise = that.oPageBuilderService.removeTile(oGroup.object, oTile.object);
                            } catch (err) {
                                this._resetGroupsOnFailure("fail_to_remove_tile_msg");
                                return;
                            }

                            oResultPromise.done(that._handleAfterSortable(function () {
                                var sTileName = sap.ushell.Container.getService("LaunchPage").getTileTitle(oTile.object);
                                if (sTileName) {
                                    that._showLocalizedMessage("tile_deleted_msg", [sTileName]);
                                } else {
                                    that._showLocalizedMessage("empty_tile_deleted_msg");
                                }

                            }.bind(oTile)));
                            oResultPromise.fail(that._handleAfterSortable(that._resetGroupsOnFailureHelper("fail_to_remove_tile_msg")));
                            oResultPromise.always( $.proxy(that._checkRequestQueue, that) );
                        });
                        sap.ushell.utils.handleTilesVisibility();
                        bFoundFlag = true;
                        return false;
                    }
                });
                if (bFoundFlag) {
                    return false;
                }
            });
        },

        _sendDeleteTileRequest : function (oGroup, oTile) {
            var oResultPromise,
                tmpPageBuilderService = sap.ushell.Container.getService('LaunchPage');
            try {
                oResultPromise = tmpPageBuilderService.removeTile(oGroup, oTile.object);
            } catch (err) {
                jQuery.sap.log.error("_deleteCatalogTileFromGroup ; removeTile ; Exception occurred: " + err);
            }

            return oResultPromise;
        },

        /*
         * Delete all instances of a catalog Tile from a Group  
         */
        _deleteCatalogTileFromGroup : function (oData) {
            var that = this,
                sDeletedTileCatalogId = decodeURIComponent(oData.tileId),
                iGroupIndex = oData.groupIndex,
                oGroup = this.oModel.getProperty("/groups/" + iGroupIndex),
                aTiles = this.oModel.getProperty("/groups/" + iGroupIndex + "/tiles/"),
                serv = sap.ushell.Container.getService("LaunchPage"),
                deferred = jQuery.Deferred(),
                aDeleteTilePromises = [],
                sTmpTileCatalogId,
                index,
                that = this,
                aFilteredTiles;

                aFilteredTiles = oGroup.tiles.filter(
                        function (oTile) {
                            var sTmpTileCatalogId = serv.getCatalogTileId(oTile.object);
                            if (sTmpTileCatalogId !== sDeletedTileCatalogId) {
                                return true;
                            } else {
                                // Initialize oPositiveDeferred object that will later be resolved with the status of the delete request
                                var oPositiveDeferred = jQuery.Deferred(),
                                // Send the delete request to the server
                                oDeletePromise = that._sendDeleteTileRequest(oGroup.object, oTile );

                                oDeletePromise.done(
                                    (function (deferred) {
                                        return function () {
                                            deferred.resolve({status: true});
                                        }
                                    })(oPositiveDeferred));

                                oDeletePromise.fail(
                                    (function (deferred) {
                                        return function () {
                                            deferred.resolve({status: false});
                                        }
                                    })(oPositiveDeferred));

                                aDeleteTilePromises.push(oPositiveDeferred);

                                return false;
                            }
                });

                oGroup.tiles = aFilteredTiles;

                // Wait for all of the delete requests before resolving the deferred
                jQuery.when.apply(jQuery, aDeleteTilePromises).
                	done(
                		function( result ){
                            var bSuccess = true,
                                index = 0,
                                promisesLength = aDeleteTilePromises.length;
		                    // Check if at least one deleteTilePromises has failure status
		                	for ( index; index < promisesLength; index++) {
		                	    if( ! result.status) {
                                    bSuccess = false;
		                			break;
		                        }
		                	}
                            if(bSuccess){
                             //   that.oModel.setProperty("/groups/" + iGroupIndex + "/tiles/", oGroup.tiles);
                            	that.oModel.setProperty("/groups/" + iGroupIndex, oGroup );
                            }

                            deferred.resolve({group: oGroup, status: bSuccess, action: 'remove'});
                        });
            return deferred.promise();
        },

        /*
         * oData should have the following parameters:
         * fromGroupId
         * toGroupId
         * fromIndex
         * toIndex can be null => append as last tile in group
         */
        _moveTile : function (sChannelId, sEventId, oData) {
            var that = this,
                nNewIndex = oData.toIndex,
                sNewGroupId = oData.toGroupId,
                sTileId = oData.sTileId,

                oTile,
                nTileIndex,

                oOldGroup,
                nOldGroupIndex,

                oNewGroup,
                nNewGroupIndex,

                aGroups = this.oModel.getProperty("/groups");

            jQuery.each(aGroups, function (nTmpGroupIndex, oTmpGroup) {
                var bFoundFlag = false;
                jQuery.each(oTmpGroup.tiles, function (nTmpTileIndex, oTmpTile) {
                    if (oTmpTile.uuid === sTileId) {
                        oTile = oTmpTile;
                        nTileIndex = nTmpTileIndex;
                        oOldGroup = oTmpGroup;
                        nOldGroupIndex = nTmpGroupIndex;
                        bFoundFlag = true;
                        return false;
                    }
                });
                if (bFoundFlag) {
                    return false;
                }
            });
            jQuery.each(aGroups, function (nTmpGroupIndex, oTmpGroup) {
                if (oTmpGroup.groupId === sNewGroupId) {
                    oNewGroup = oTmpGroup;
                    nNewGroupIndex = nTmpGroupIndex;

                    if (oOldGroup.isDefaultGroup && nOldGroupIndex != nNewGroupIndex && oOldGroup.tiles.length <= 1) {
                        that.toggleDefaultGroupVisibility(false);
                    }
                }
            });

            // When a tile is dragged into an empty group, the Plus-Tiles in the empty list cause
            // the new index to be off by one, i.e. 1 instead of 0, which causes an error.
            // This is a generic check which sanitizes the values if necessary.
            if (nNewIndex && nNewIndex > oNewGroup.tiles.length) {
                nNewIndex = oNewGroup.tiles.length;
            }

            if (oOldGroup.groupId === sNewGroupId) {
                if (nNewIndex === null || nNewIndex === undefined) {
                    // moved over group list to same group
                    oOldGroup.tiles.splice(nTileIndex, 1);
                    // Tile is appended. Set index accordingly.
                    nNewIndex = oOldGroup.tiles.length;
                    // append as last item
                    oOldGroup.tiles.push(oTile);
                } else {
                    nNewIndex = this._adjustTileIndex(nNewIndex, oTile, oOldGroup);
                    this._moveInArray(oOldGroup.tiles, nTileIndex, nNewIndex);
                }

                this.oModel.setProperty("/groups/" + nOldGroupIndex + "/tiles", oOldGroup.tiles);
            } else {
                // remove from old group
                oOldGroup.tiles.splice(nTileIndex, 1);
                this.oModel.setProperty("/groups/" + nOldGroupIndex + "/tiles", oOldGroup.tiles);

                // add to new group
                if (nNewIndex === null || nNewIndex === undefined) {
                    // Tile is appended. Set index accordingly.
                    nNewIndex = oNewGroup.tiles.length;
                    // append as last item
                    oNewGroup.tiles.push(oTile);
                } else {
                    nNewIndex = this._adjustTileIndex(nNewIndex, oTile, oNewGroup);
                    oNewGroup.tiles.splice(nNewIndex, 0, oTile);
                }
                this.oModel.setProperty("/groups/" + nNewGroupIndex + "/tiles", oNewGroup.tiles);
            }
            // Re-calculate the visibility of the Tiles
            sap.ushell.utils.handleTilesVisibility();

            // change in backend
            var oSourceGroup = this.oModel.getProperty("/groups/" + nOldGroupIndex).object,
                oTargetGroup = this.oModel.getProperty("/groups/" + nNewGroupIndex).object,
                oResultPromise;

            this._addRequest($.proxy(function () {
                try {
                    oResultPromise = this.oPageBuilderService.moveTile(oTile.object, nTileIndex, nNewIndex, oSourceGroup, oTargetGroup);
                } catch (err) {
                    this._resetGroupsOnFailure("fail_to_move_tile_msg");
                    return;
                }

                oResultPromise.done(this._handleAfterSortable($.proxy(function (sTileId, oTargetTile) {
                    var sTilePath = this._getPathOfTile(sTileId),
                        srvc = this.oPageBuilderService;

                    // If we cannot find the tile, it might have been deleted -> Check!
                    if(sTilePath) {
                        // Update the model with the new tile.
                        this.oModel.setProperty(sTilePath + "/object", oTargetTile);
                    }
                }, this, sTileId)));

                oResultPromise.fail(this._handleAfterSortable(this._resetGroupsOnFailureHelper("fail_to_move_tile_msg")));
                oResultPromise.always($.proxy(this._checkRequestQueue, this));
            }, this));
        },

        // Adjust the moved-tile new index according to the visible+hidden tiles
        _adjustTileIndex : function (newLocationIndex, oTile, newGroup) {
            var visibleCounter = 0,
                bIsTileIncluded = false,
                i = 0;
            // In order to get the new index, count all tiles (visible+hidden) up to the new index received from the UI.
            for (i = 0; i < newGroup.tiles.length && visibleCounter < newLocationIndex; i++) {
                if (newGroup.tiles[i].isTileIntentSupported) {
                    if (newGroup.tiles[i] === oTile) {
                        bIsTileIncluded = true;
                    } else {
                        visibleCounter++;
                    }
                }
            }
            if (bIsTileIncluded) {
                return i - 1;
            }
            return i;
        },

        //  Set default Group visibility
        toggleDefaultGroupVisibility : function (bVisible) {
            var oDashboardItem = this.oDashboardView.oDashboardGroupsBox.getGroups()[0],
            oGroupListItem;
    	    // In case GroupList exists on the DOM .
            if (sap.ui.getCore().byId('groupList')) {
                oGroupListItem = sap.ui.getCore().byId('groupList').oGroupList.getItems()[0];
                if (oGroupListItem) {
            	// Hide/Show the Default Group in the group list
                    oGroupListItem.setShow(bVisible);
                }
            }
            if (oDashboardItem) {
                oDashboardItem.setVisible(bVisible);
            }
        },

        // temporary - should not be exposed
        getModel : function () {
            return this.oModel;
        },

        getDashboardView : function () {
            if (!sap.ui.getCore().byId('dashboard')) {
                this.oDashboardView = sap.ui.jsview("dashboard", "sap.ushell.renderers.fiori2.launchpad.dashboard.DashboardContent");
            }
            return this.oDashboardView;
        },

        getGroupListView : function () {
            if (!sap.ui.getCore().byId('groupList')) {
                this.oGroupListView = sap.ui.jsview("groupList", "sap.ushell.renderers.fiori2.launchpad.group_list.GroupList");
            }
            return this.oGroupListView;
        },

        // CATALOG LOADING

        loadAllCatalogs : function (sChannelId, sEventId, oData) {
        	if (!this.oModel.getProperty("/catalogs") ||
                    !sap.ushell.Container.getService("LaunchPage").isCatalogsValid()) {
                var that = this;

                // catalog also needs groups 
                if (!this.oModel.getProperty("/groups") || this.oModel.getProperty("/groups").length === 0 ) {
                    this.loadPersonalizedGroups();
                }
                this.numOfLoadedCatalogs = 0;
                this._destroyAllGroupModels("/catalogs");
                this._destroyAllTileModels("/catalogTiles");
                // Clear existing Catalog items
                this.oModel.setProperty("/catalogs", []);
                this.oModel.setProperty("/catalogTiles", []);
                // Trigger loading of catalogs
                sap.ushell.Container.getService("LaunchPage").getCatalogs()
                //once all catalogs are loaded, check for errors
                .done(this.onDoneLoadingCatalogs.bind(this))
                //in case of a severe error, show an error message
                .fail(that._showLocalizedErrorHelper("fail_to_load_catalog_msg"))
                //for each loaded catalog, add it to the model
                .progress(this.addCatalogToModel.bind(this));
            }
            var aGroups = this.getModel().getProperty("/groups");
        	if (aGroups && aGroups .length !== 0) {
            	this.mapCatalogTilesToGroups();
            	// update the catalogTile model after mapCatalogTilesToGroups() was called
            	this.updateCatalogTilesToGroupsMap();
            }
        },

        updateCatalogTilesToGroupsMap : function () {
            var catalogTiles = this.getModel().getProperty("/catalogTiles"),
	    	tile,
	    	index,
	    	tileId,
	    	associatedGrps,
	    	aGroups;
            var srvc = sap.ushell.Container.getService("LaunchPage");
            var catalogTilesModel = this.getModel().getProperty("/catalogTiles");
            // if the catalogTile model doesn't exist, it will be updated in some time later
            if (catalogTiles) {
              for (index = 0; index < catalogTiles.length; index++) {
                     tile = catalogTiles[index];
                     tileId = encodeURIComponent(srvc.getCatalogTileId(tile.src));
                     associatedGrps = this.getModel().getProperty("/catalogTiles/" + index + "/associatedGroups");
                     aGroups = this.oTileCatalogToGroupsMap[tileId];
                     associatedGrps = aGroups ? aGroups : [] ;
                     catalogTilesModel[index].associatedGroups = associatedGrps;
              }
            }
            this.getModel().setProperty("/catalogTiles", catalogTilesModel);
        },

        addCatalogToModel : function (oCatalog){
            var aCurrentCatalogs = this.oModel.getProperty('/catalogs');
            var srvc = sap.ushell.Container.getService("LaunchPage");
            var sCatalogId = srvc.getCatalogId(oCatalog);
            var bCatalogExist = false;
            //check if the catalog already exist in the model
            aCurrentCatalogs.forEach(function (oCat){
               if (oCat.id === sCatalogId){
                   bCatalogExist = true;
               }
            });

            if (!bCatalogExist) {
                var oCatalogModel = {
                    title: srvc.getCatalogTitle(oCatalog),
                    id: srvc.getCatalogId(oCatalog),
                    "static": false,
                    tiles: []
                };
                srvc.getCatalogTiles(oCatalog).done(function (aTiles) {
                    //if this catalog has no tiles we do not need to add it to the model
                    if (!aTiles.length) {
                        return;
                    }
                    var oCatalogData = {
                        catalog: oCatalogModel.title,
                        id: oCatalogModel.id,
                        index: this.numOfLoadedCatalogs
                    };
                    this.setCatalogTiles("/catalogTiles", true, oCatalogData, aTiles);
                    oCatalogModel.numIntentSupportedTiles = getNumIntentSupportedTiles.call(this, oCatalogModel);
                    aCurrentCatalogs.push(oCatalogModel);
                    this.oModel.setProperty('/catalogs', aCurrentCatalogs);
                    this.numOfLoadedCatalogs++;
                }.bind(this)
                ).fail(this._showLocalizedErrorHelper("fail_to_load_catalog_tiles_msg"));
            }
        },

        onDoneLoadingCatalogs : function (aCatalogs) {
            var srvc = sap.ushell.Container.getService("LaunchPage");
            var aLoadedCatalogs = aCatalogs.filter(function (oCatalog) {
                return !srvc.getCatalogError(oCatalog);
            });
            //check if some of the catalogs failed to load
            if (aLoadedCatalogs.length !== aCatalogs.length){
                this._showLocalizedError("partialCatalogFail");
            }
            var aCurrentCatalogs = this.oModel.getProperty('/catalogs');
            //filter out the "Loading Catalogs..." menu item if exists
            if (aCurrentCatalogs[0] && aCurrentCatalogs[0].title === sap.ushell.resources.i18n.getText('catalogsLoading')) {
                aCurrentCatalogs.splice(0, 1);
            }
            //create the "All" static entry for the catalogSelect menu
            aCurrentCatalogs.splice(0, 0, {
                title : getLocalizedText("all"),
                "static" : true,
                tiles : [],
                numIntentSupportedTiles : -1//only in order to present this option in the Catalog.view (dropdown menu)since there is a filter there on this property
            });
            this.oModel.setProperty('/catalogs', aCurrentCatalogs);
            sap.ushell.utils.handleTilesVisibility();
        },

        setCatalogTiles : function (sPath, bAppend, oData, aCatalogTiles) {
            var srvc = sap.ushell.Container.getService("LaunchPage");

            // Fill tile info for current catalog
            this.oModel.setProperty(sPath, $.merge((bAppend && this.oModel.getProperty(sPath)) || [], $.map(
                aCatalogTiles,
                function (oCatalogTile, iTile) {
                    var catalogTileId = encodeURIComponent(srvc.getCatalogTileId(oCatalogTile)),
                    	associatedGrps = this.oTileCatalogToGroupsMap[catalogTileId] || [];

                    return {
                	    associatedGroups : associatedGrps,
                        src : oCatalogTile,
                        catalog : oData.catalog,
                        catalogIndex : oData.index * 100000 + iTile,
                        catalogId : oData.id,
                        title : srvc.getCatalogTileTitle(oCatalogTile),
                        keywords : (srvc.getCatalogTileKeywords(oCatalogTile) || []).join(','),
                        id : catalogTileId,
                        size : srvc.getCatalogTileSize(oCatalogTile),
                        content : [srvc.getCatalogTileView(oCatalogTile)],
                        isTileIntentSupported : srvc.isTileIntentSupported(oCatalogTile)
                    };
                }.bind(this)
            )));
        },

        mapCatalogTilesToGroups : function () {

            this.oTileCatalogToGroupsMap = {};

            //Calculate the relation between the CatalogTile and the instances.
            var oGroups = this.oModel.getProperty("/groups"),
            	srvc = sap.ushell.Container.getService("LaunchPage"),
                indexGrps = 0,
                oGroup,
        	    tileInd,
        	    oTiles,
        	    tileId,
    		    tileGroups,
    		    groupId;

            for (indexGrps = 0; indexGrps < oGroups.length; indexGrps++) {
            	oGroup = oGroups[indexGrps];
            	oTiles = oGroup.tiles;

	        	if (oTiles) {
	        	    for (tileInd = 0; tileInd < oTiles.length; ++tileInd) {
		        		tileId = encodeURIComponent(srvc.getCatalogTileId(oTiles[tileInd].object));
		        		tileGroups = this.oTileCatalogToGroupsMap[tileId] || [];
		        		groupId = srvc.getGroupId(oGroup.object);
		        		if (tileGroups.indexOf(groupId) === -1 && (typeof (oGroup.isGroupVisible) === 'undefined' || oGroup.isGroupVisible)) {
		        			tileGroups.push(groupId);
		        		}
		        		this.oTileCatalogToGroupsMap[tileId] = tileGroups;
	        	    }
	        	}
            }
        },

        /**
         * Shows a localized message in the Message-Toast.
         * @param {string} sMsgId
         *      The localization id of the message
         * @param {object} oParams
         *      Additional parameters for the Message Toast showing the message. Can be undefined.
         * @param {sap.ushell.services.Message.Type} [iType=sap.ushell.services.Message.Type.INFO]
         *      The message type (optional)
         */
        _showLocalizedMessage : function (sMsgId, oParams, iType) {
            sap.ushell.Container.getService("Message").show(iType || sap.ushell.services.Message.Type.INFO, getLocalizedText(sMsgId, oParams), oParams);
        },
        /**
         * Shows a localized error message in the Message-Toast.
         * @param {string} sMsgId
         *      The localization id of the message
         * @param {object} oParams
         *      Additional parameters for the Message Toast showing the message. Can be undefined.
         *
         */
        _showLocalizedError : function (sMsgId, oParams) {
            this._showLocalizedMessage(sMsgId, oParams, sap.ushell.services.Message.Type.ERROR);
        },

        /**
         * A wrapper for _showLocalizedError to reduce boilerplate code in error handling.
         * @param {string} sMsgId
         *      The localization id of the message
         * @param {object} oParams
         *      Additional parameters for the Message Toast showing the message. Can be undefined.
         * @returns {Function}
         *      A function that will call _showLocalizedError with the given parameters.
         */
        _showLocalizedErrorHelper : function (sMsgId, oParams) {
            var that = this;
            return function () {
                that._showLocalizedError(sMsgId, oParams);
            };
        },

        /**
         * Helper function to bind an error message to a reset-function, which reloads all groups
         * from a group array when called.
         * @param {string} sMsgId
         *      The id of the localized string.
         * @returns {Function}
         *      The reset function, which returns the dashboard into an consistent state.
         */
        _resetGroupsOnFailureHelper : function (sMsgId) {
            var that = this;
            return function (aGroups) {
                that._showLocalizedError(sMsgId);
//                that._requestFailed();

                // Give the Toast a chance to be shown before the reload freezes the screen.
                setTimeout(function () {
                    that.loadGroupsFromArray(aGroups);
                });
            };
        },

        /**
         * Helper function to reset groups after a backend failure.
         * @param {string} sMsgId
         *      The id of the localized string.
         */
        _resetGroupsOnFailure : function (sMsgId, aParameters) {
            this._requestFailed();
            this._showLocalizedError(sMsgId, aParameters);
            this.loadPersonalizedGroups();
            this.oModel.updateBindings(true);
        },

        /**
         * Load all groups in the given array. The default group will be loaded first.
         * @param aGroups
         *      The array containing all groups (including the default group).
         */
        loadGroupsFromArray : function (aGroups) {
            var that = this;

            this.oPageBuilderService.getDefaultGroup().done(function (oDefaultGroup) {
                var i,
                    k = 1;

                that._loadGroup(0, oDefaultGroup);
                for (i = 0; i < aGroups.length; ++i) {
                    if (aGroups[i] !== oDefaultGroup) {
                        that._loadGroup(k, aGroups[i]);
                        k++;
                    }
                }
                for (i = aGroups.length; i < that.oModel.getProperty("/groups/length"); ++i) {
                    that._destroyGroupModel("/groups/" + i);
                }
                //set new length in case there are less new groups
                that.oModel.setProperty("/groups/length", aGroups.length);

                if (that.oModel.getProperty('/currentState/stateName') === "catalog") {
                	// update the catalogTile's groups mapping, and update the catalogTile
                	// model if nedded only when in the catalog flow
                	that.mapCatalogTilesToGroups();
                	that.updateCatalogTilesToGroupsMap();
                }
            }).fail(that._resetGroupsOnFailureHelper("fail_to_get_default_group_msg"));
        },

        /**
         * Load all tiles in a group and add the group to the internal model.
         * @param nIndex
         *      The index at which the group should be added. 0 is reserved for the default group.
         * @param oGroup
         *      The group as it is returned by the UI2 services.
         */
        _loadGroup : function (nIndex, oGroup) {
            var that = this,
                sGroupPath = "/groups/" + nIndex;
            this._destroyGroupModel(sGroupPath);
            // Set group on model
            var sOldGroupId = this.oModel.getProperty(sGroupPath + "/groupId"),
                oNewGroupModel = this._getGroupModel(oGroup, nIndex === 0);

            // If the group already exists, keep the id. The backend-handlers relay on the id staying the same.
            if(sOldGroupId) {
                oNewGroupModel.groupId = sOldGroupId;
            }

            oNewGroupModel.index = nIndex;
            this.oModel.setProperty(sGroupPath, oNewGroupModel);
        },

        _getGroupModel : function (oGroup, bDefault) {
            var srvc = this.oPageBuilderService,
                aGroupTiles = (oGroup && srvc.getGroupTiles(oGroup)) || [],
                aModelTiles = [],
                i,
                isSortable;

            if (sap.ui.getCore().byId("shell") && sap.ui.getCore().byId("shell").getModel()) {
            	isSortable = sap.ui.getCore().byId("shell").getModel().getProperty("/personalization");
            }

            for (i = 0; i < aGroupTiles.length; ++i) {
                aModelTiles.push(this._getTileModel(aGroupTiles[i]));
            }

            return {
                title           : (bDefault && getLocalizedText("my_group")) ||
                                  (oGroup && srvc.getGroupTitle(oGroup)) ||
                                  "",
                object          : oGroup,
                groupId         : jQuery.sap.uid(),
                tiles           : aModelTiles,
                isDefaultGroup  : bDefault || false,
                editMode        : !oGroup,
                removable       : !oGroup || srvc.isGroupRemovable(oGroup),
                sortable        : isSortable,
                isGroupVisible  : !oGroup || srvc.isGroupVisible(oGroup),
                isEnabled       : !bDefault //Currently only default groups is considered as locked
            };
        },

        _addTileToGroup : function (sGroupPath, oTile) {
            var sTilePath = sGroupPath + "/tiles",
                iNumTiles = this.oModel.getProperty(sTilePath).length;

            this.oModel.setProperty(sTilePath + "/" + iNumTiles, this._getTileModel(oTile));
        },

        _updateModelWithTileView : function(sTileUUID, oTileView){
            var that = this;

            //add the tile view to the update queue
            this.tileViewUpdateQueue.push({uuid: sTileUUID, view: oTileView});

            /*
            in order to avoid many updates to the model we wait to allow
            other tile update to accumulate in the queue.
            therefore we clear the previous call to update the model
            and create a new one
             */
            if(this.tileViewUpdateTimeoutID){
                clearTimeout(this.tileViewUpdateTimeoutID);
            }
            this.tileViewUpdateTimeoutID = setTimeout(function(){
                that.tileViewUpdateTimeoutID = undefined;
                /*
                we wait with the update till the personalization operation is done
                to avoid the rendering of the tiles during D&D operation
                 */
                that.oSortableDeferred.done(function(){
                    that._updateModelWithTilesViews();
                });
            }, 50);
        },

        _updateModelWithTilesViews : function(){
            var aGroups = this.oModel.getProperty("/groups"),
                aTiles,
                oTileModel,
                oUpdatedTile,
                sSize;

            if (!aGroups) {
                return;
            }

            /*
            go over the tiles in the model and search for tiles to update.
            tiles are identified using uuid
             */
            for (var i = 0; i < aGroups.length; i = i + 1) {
                //group loop - get the groups tiles
                aTiles = aGroups[i].tiles;
                for (var j = 0; j < aTiles.length; j = j + 1) {
                    //group tiles loop - get the tile model
                    oTileModel = aTiles[j];
                    for (var q = 0; q < this.tileViewUpdateQueue.length; q++){
                        //updated tiles view queue loop - check if the current tile was updated
                        oUpdatedTile = this.tileViewUpdateQueue[q];
                        if(oTileModel.uuid == oUpdatedTile.uuid){
                            if(oUpdatedTile.view){
                                /*
                                 if view is provided then we destroy the current content
                                 (TileState control) and set the tile view
                                 */
                                oTileModel.content[0].destroy();
                                oTileModel.content = [oUpdatedTile.view];
                            }
                            else{
                                //some error on getTileView, therefore we set the state to 'Failed'
                                oTileModel.content[0].setState("Failed");
                            }
                            /*
                             in some cases tile size can be different then the initial value
                             therefore we read and set the size again
                             */
                            sSize = this.oPageBuilderService.getTileSize(oTileModel.object);
                            oTileModel['long'] = ((sSize !== null) && (sSize === "1x2" || sSize === "2x2")) || false;
                            oTileModel.tall = ((sSize !== null) && (sSize === "2x1" || sSize === "2x2")) || false;
                            break;
                        }
                    }
                }
            }

            //clear the update queue and set the model
            this.tileViewUpdateQueue = [];
            this.oModel.setProperty("/groups", aGroups);
        },

        _getTileModel : function (oTile) {
            var srvc = this.oPageBuilderService,
                sSize = srvc.getTileSize(oTile),
                sTileUUID = jQuery.sap.uid(),
                oTileView,
                fUpdateModelWithView,
                that = this,
                oDfd;;

            // first we set visibility of tile to false
            // before we get the tile's model etc.
            srvc.setTileVisible(oTile, false);

            oDfd = srvc.getTileView(oTile);

            /*
             register done and fail handlers for the getTileView API.
             */
            oDfd.done(function(oView){
                oTileView = oView;
                if(fUpdateModelWithView){
                    //call to the '_updateModelWithTileView' with uuid and view
                    fUpdateModelWithView.apply(that, [sTileUUID, oTileView]);
                }
            });
            oDfd.fail(function(){
                if(fUpdateModelWithView){
                    //call to the '_updateModelWithTileView' with uuid and no view to indicate failure
                    fUpdateModelWithView.apply(that, [sTileUUID]);
                }
                else{
                    // in case call is synchronise we set the view with 'TileState' control with 'Failed' status
                    oTileView = new sap.ushell.ui.launchpad.TileState({state: "Failed"});
                }
            });

            /*
             in case getTileView is asynchronous we set the 'fUpdateModelWithView' to handle the view
              update, and create a 'Loading' TileState control as the tile view
             */
            if(!oTileView){
                fUpdateModelWithView = this._updateModelWithTileView;
                oTileView = new sap.ushell.ui.launchpad.TileState({state: "Loading"});
            }

            return {
                "object"  : oTile,
                "uuid"    : sTileUUID,
                "content" : [oTileView],
                "long"    : ((sSize !== null) && (sSize === "1x2" || sSize === "2x2")) || false,
                "tall"    : ((sSize !== null) && (sSize === "2x1" || sSize === "2x2")) || false,
                "target"  : srvc.getTileTarget(oTile) || "",
                "debugInfo": srvc.getTileDebugInfo(oTile),
                "isTileIntentSupported": srvc.isTileIntentSupported(oTile),
                "rgba"  : ""
            };
        },

        _destroyAllGroupModels : function (oTarget) {
            var aGroups = (typeof oTarget === "string") ? this.oModel.getProperty(oTarget) : oTarget,
                i;
            if (aGroups) {
                for (i = 0; i < aGroups.length; i = i + 1) {
                    this._destroyGroupModel(aGroups[i]);
                }
            }
        },

        _destroyGroupModel : function (oTarget) {
            var oGroupModel = (typeof oTarget === "string") ? this.oModel.getProperty(oTarget) : oTarget,
                i;
            if (oGroupModel) {
                this._destroyAllTileModels(oGroupModel.tiles);
            }
        },

        _destroyAllTileModels : function (oTarget) {
            var aTiles = (typeof oTarget === "string") ? this.oModel.getProperty(oTarget) : oTarget,
                i;
            if (aTiles) {
                for (i = 0; i < aTiles.length; i = i + 1) {
                    this._destroyTileModel(aTiles[i]);
                }
            }
        },

        _destroyTileModel : function (oTarget) {
            var oTileModel = (typeof oTarget === "string") ? this.oModel.getProperty(oTarget) : oTarget,
                i;
            if (oTileModel && oTileModel.content) {
                for (i = 0; i < oTileModel.content.length; i = i + 1) {
                    oTileModel.content[i].destroy();
                }
            }
        },

        /**
         * Load all user groups from the backend. (Triggered on initial page load.)
         */
        loadPersonalizedGroups : function () {
            var that = this,
                oGroupsPromise = this.oPageBuilderService.getGroups();

            oGroupsPromise.done(function (aGroups) {
                that.loadGroupsFromArray(aGroups);
            });

            oGroupsPromise.fail(that._showLocalizedErrorHelper("fail_to_load_groups_msg"));
        }
    });
}());

}; // end of sap/ushell/renderers/fiori2/launchpad/DashboardManager.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.launchpad.catalog.Catalog.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.launchpad.catalog.Catalog.view');
//Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */

    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    
    
    
    

    sap.ui.jsview("sap.ushell.renderers.fiori2.launchpad.catalog.Catalog", {

        createContent: function (oController) {
            var translationBundle = sap.ushell.resources.i18n,
            	that = this,
            	aVisibleGroupsMap = undefined;

            function ifnot(v) {
                return !v;
            }
            function iflong(sLong) {
                return ((sLong !== null) && (sLong === "1x2" || sLong === "2x2")) || false;
            }
            function iftall(size) {
                return ((size !== null) && (size === "2x2" || size === "2x1")) || false;
            }
            function falseIfPhone(v) {
                if (sap.ui.Device.system.phone) {
                    return false;
                }

                return ifnot(v);
            }
            function to_int(v) {
                return parseInt(v, 10) || 0;
            }
            function get_icon(aGroupsIDs) {
            	var iconName = (aGroupsIDs && aGroupsIDs.length > 0) ? "accept" : "add";
            	return sap.ui.core.IconPool.getIconURI(iconName);
            }
            function formatTiles(v) {
                return (v && v > 0) ?
                        v + ((v > 1 && (" " + translationBundle.getText("tiles"))) || (" " + translationBundle.getText("tile"))) :
                        translationBundle.getText("no_tiles");
            }

            var oButton = new sap.m.Button({
                icon : {
                    path : "associatedGroups",
                    formatter : get_icon
                },
                tooltip: {
                    parts: ["i18n>addTileToGroup", "i18n>addAssociatedTileToGroup", "associatedGroups"],
                    formatter : function (sAddTileGroups, sAddTileToMoreGroups, aGroupsIDs) {
                        return aGroupsIDs && aGroupsIDs.length ? sAddTileToMoreGroups : sAddTileGroups;
                    }
                },
                press : [ oController.onTileFooterClick, oController ]
            }), oTileTemplate = new sap.ushell.ui.launchpad.Tile({
                afterRendering : [ oController.onTileAfterRendering, oController ],
                tileViews : {
                    path : "content",
                    factory : function (sId, oContext) { return oContext.getObject(); }
                },
                footItems : [oButton],
                "long" : {
                    path : "size",
                    formatter : iflong
                },
                "tall" : {
                    path : "size",
                    formatter : iftall
                },
                index: {
                    path : "id",
                    formatter : to_int
                }
            }), tilesContainer = new sap.ushell.ui.launchpad.TileContainer("catalogTiles", {
                showHeader : false,
                showPlaceholder : false,
                showGroupHeader : "{/showCatalogHeaders}",
                groupHeaderLevel : sap.m.HeaderLevel.H3,
                showNoData : true,
                tiles : {
                    path : "/catalogTiles",
                    template : oTileTemplate,
                    sorter : new sap.ui.model.Sorter("catalogIndex", false, function (oContext) {
                        return (oContext && oContext.getProperty("catalog")) || "";
                    })
                },
                afterRendering : function (oEvent) {
                    var jqThis = jQuery(oEvent.getSource());
                    //because the catalog can be loaded with a filter in the URL we also have to
                    //check if tiles exist in the model, and not just in the UI control
                    if (this.getTiles().length || this.getModel().getProperty('/catalogTiles/length')) {
                        //Enable tiles search/filter only after tiles are rendered.
                        //Timeout needed because of some bug in UI5 that doesn't enable control on this point.
                    	setTimeout(function () {
                            sap.ui.getCore().byId("catalogSearch").setEnabled(true);
                        });
                        sap.ui.getCore().getEventBus().publish("launchpad", "contentRendered");
                        if (!sap.ui.Device.os.ios) {
                            sap.ui.getCore().getEventBus().publish("launchpad", "contentRefresh");
                        }
                    }
                    jQuery.sap.byId("catalogTilesPage").find("label").parent().attr("tabindex", "0");
                    jQuery.sap.byId("catalogTiles").removeAttr("tabindex", 0);
                }
            });

            //hidden Catalog item to support TabIndex
            var hiddenCatalogTabFocusHelper = new sap.m.Button('hiddenCatalogTabFocusHelper');
            hiddenCatalogTabFocusHelper.addEventDelegate({
                onfocusin: function () {
                    try {
                        var shellData = sap.ui.getCore().byId('homeBtn').focus();
                    } catch (e) {
                    }
                }
            });
            
            oButton.constructor.prototype.setIcon = function (v) {
                this.setProperty("icon", v, true);          // set property, but suppress rerendering
                if (v && this._image && this._image.setSrc) {
                    this._image.setSrc(v);                  // set property of internal control
                }
                return this;
            };
            var oFilterVisibleTiles = new sap.ui.model.Filter("numIntentSupportedTiles", sap.ui.model.FilterOperator.NE, 0);
            var oCatalogSelect = new sap.m.Select("catalogSelect", {
                name : "Browse",
                tooltip: "{i18n>catalogSelect_tooltip}",
                items : {
                    path : "/catalogs",
                    template : new sap.ui.core.ListItem({
                        text : "{title}"
                    }),
                    filters: [oFilterVisibleTiles]
                },
                change : [ oController.onCategoryFilter, oController ]
            });

            /*
             override original onAfterRendering as currently sap.m.Select
             does not support afterRendering handler in the constructor
             this is done to support tab order accessibility
             */
            var origCatalogSelectOnAfterRendering = oCatalogSelect.onAfterRendering;
            oCatalogSelect.onAfterRendering = function () {
                origCatalogSelectOnAfterRendering.apply(this, arguments);
                jQuery.sap.byId("catalogSelect").attr("tabindex", 0);
            };

            /*
             * setting followOf to false, so the popover won't close on IE.
             */
            var origOnAfterRenderingPopover = oCatalogSelect._onAfterRenderingPopover;
            oCatalogSelect._onAfterRenderingPopover = function() {
                if (this._oPopover) {
                    this._oPopover.setFollowOf(false);
                }
                if (origOnAfterRenderingPopover) {
                    origOnAfterRenderingPopover.apply(this, arguments);
                }
            };

            var oCatalogSearch = new sap.m.SearchField("catalogSearch", {
        	tooltip: "{i18n>catalogSearch_tooltip}",
                enabled: false, //we Disable search/filtering of tiles till they will be rendered, to avoid bugs.
                value: {path: "/catalogSearchFilter"},
                placeholder: "{i18n>search_catalog}",
                liveChange : [ oController.onLiveFilter, oController ]
            });

            /*
             override original onAfterRendering as currently sap.m.Select
             does not support afterRendering handler in the constructor,
             this is done to support tab order accessibility
             */
            var origCatalogSearchOnAfterRendering = oCatalogSearch.onAfterRendering;
            oCatalogSearch.onAfterRendering = function () {
                origCatalogSearchOnAfterRendering.apply(this, arguments);
                jQuery.sap.byId("catalogSearch").find("input").attr("tabindex", 0);
            };

            var oDetailPage = new sap.m.Page("catalogTilesPage", {
                showHeader : true,
                showFooter : false,
                showNavButton : true,
                title : "{i18n>tile_catalog}",
                content : [ new sap.ushell.ui.launchpad.Panel({
                    translucent : true,
                    headerText : "",
                    headerLevel : sap.m.HeaderLevel.H2,
                    headerBar : new sap.m.Bar("catalogHeader", {
                        translucent : true,
                        tooltip: "{i18n>tile_catalog_header_tooltip}",
                        contentLeft : [ oCatalogSelect ],
                        contentRight : [ oCatalogSearch ]
                    }).addStyleClass("sapUshellCatalogMain"),
                    content : [ tilesContainer, hiddenCatalogTabFocusHelper]
                })],
                navButtonPress : [oController.onNavButtonPress, oController]
            }).addStyleClass("sapUshellCatalog");
            return oDetailPage;
        },

        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.launchpad.catalog.Catalog";
        }
    });
}());

}; // end of sap/ushell/renderers/fiori2/launchpad/catalog/Catalog.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.launchpad.dashboard.DashboardContent.controller') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.launchpad.dashboard.DashboardContent.controller');
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, console, setTimeout, clearTimeout */
    /*jslint plusplus: true, nomen: true */
    

    sap.ui.controller("sap.ushell.renderers.fiori2.launchpad.dashboard.DashboardContent", {

        onInit : function () {
            this.sViewId = "#" + this.oView.getId();
            //On Android 4.x, and Safari mobile in Chrome and Safari browsers sometimes we can see bug with screen rendering
            //so _webkitMobileRenderFix function meant to fix it after  `contentRefresh` event.
            if (sap.ui.Device.browser.mobile) {
                    sap.ui.getCore().getEventBus().subscribe("launchpad", "contentRefresh", this._webkitMobileRenderFix, this);
            }
            this.isDesktop = (sap.ui.Device.system.desktop && (navigator.userAgent.toLowerCase().indexOf('tablet')<0));
        },

        onExit: function () {
            sap.ui.getCore().getEventBus().unsubscribe("launchpad", "contentRefresh", this._webkitMobileRenderFix, this);
        },

        onAfterRendering : function () {
            var oEventBus = sap.ui.getCore().getEventBus();

            //Bind launchpad event handlers
            oEventBus.unsubscribe("launchpad", "scrollToGroup", this._scrollToGroup, this);
            oEventBus.subscribe("launchpad", "scrollToGroup", this._scrollToGroup, this);

            //Bind grouplist event handlers
            oEventBus.unsubscribe("grouplist", "GroupListOver", this._handleGroupListOver, this);
            oEventBus.unsubscribe("grouplist", "GroupListOut", this._handleGroupListOut, this);
            oEventBus.unsubscribe("grouplist", "GroupListItemOver", this._handleGroupListItemOver, this);
            oEventBus.unsubscribe("grouplist", "GroupListItemOut", this._handleGroupListItemOut, this);
            oEventBus.unsubscribe("grouplist", "GroupListItemDrop", this._handleGroupListItemDrop, this);
            oEventBus.subscribe("grouplist", "GroupListOver", this._handleGroupListOver, this);
            oEventBus.subscribe("grouplist", "GroupListOut", this._handleGroupListOut, this);
            oEventBus.subscribe("grouplist", "GroupListItemOver", this._handleGroupListItemOver, this);
            oEventBus.subscribe("grouplist", "GroupListItemOut", this._handleGroupListItemOut, this);
            oEventBus.subscribe("grouplist", "GroupListItemDrop", this._handleGroupListItemDrop, this);

            //Temporary workaround for Android Chrome rendering problem, after group has been renamed.
            if (sap.ui.Device.os.android) {
                oEventBus.unsubscribe("launchpad", "changeGroupTitle", this._changeGroupTitleHandler, this);
                oEventBus.subscribe("launchpad", "changeGroupTitle", this._changeGroupTitleHandler, this);
            }

            // The delete area is moved out of the scrollable area
            jQuery("#__area0").appendTo("#shellPage");
            var timer;
            jQuery(window).bind("resize", function () {
                clearTimeout(timer);
                timer = setTimeout(this._resizeHandler.bind(this), 300);
            }.bind(this));

            // Register scroll event handler for Desktop use-case  (OR apple IOS7)
            if (sap.ui.Device.system.desktop) {
                jQuery("#dashboardPage-cont").scroll(sap.ushell.utils.handleTilesVisibility);
            } else {
                // Register scroll event handler for mobile devices use-case
                setTimeout(function () {
                    this.oDashboardPage = sap.ui.getCore().byId("dashboardPage");
                    this.oScroller = this.oDashboardPage.getScrollDelegate();

                    if(this.oScroller && this.oScroller._scroller) {
                        // Keep the original onScrollMove event
                        if (!this.oOriginalScrollMove) {
                            this.oOriginalScrollMove = this.oScroller._scroller.options.onScrollMove;
                        }
                        var that = this;
                        // Set a new event handler for onScrollMove
                        this.oScroller._scroller.options.onScrollMove = function (oEvent) {

                            // Calling the original onScrollMove event
                            that.oOriginalScrollMove.apply(that.oScroller);
                            sap.ushell.utils.handleTilesVisibility();
                        };
                    }
                    else {
                        jQuery("#dashboardPage-cont").scroll(sap.ushell.utils.handleTilesVisibility);
                        //TODO consider removing this line
                        jQuery("#dashboard").scroll(sap.ushell.utils.handleTilesVisibility);
                    }
                }.bind(this), 1500);
            }
        },

        //Change Group Title Handler for temporary workaround for Android Chrome rendering problem, after group has been renamed.
        _changeGroupTitleHandler: function () {
            this._forceBrowserRerenderElement(document.getElementById('groupList'));
        },

        //force browser to repaint Body, by setting it `display` property to 'none' and to 'block' again
        _forceBrowserRerenderElement: function (element) {
            var animationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame;
            if (animationFrame) {
                animationFrame(function () {
                    var display = element.style.display;
                    element.style.display = 'none';
                    element.offsetHeight;
                    element.style.display = display;
                });
            } else {
                console.log('unsupported browser for animation frame');
            }
        },

        //function fixes Android 4.x Chrome, and Safari bug with poor rendering
        _webkitMobileRenderFix: function () {
            //force Chrome to repaint Body, by setting it `display` property to 'none' and to 'block' again
            if (sap.ui.Device.browser.chrome || sap.ui.Device.os.ios || sap.ui.Device.os.android) {
                // this includes almost all browsers and devices
                // if this is the IOS6 (as the previous fix causes double flickering
                // and this one only one flickering)
                this._forceBrowserRerenderElement(document.body);
            }
        },

        _resizeHandler : function () {
            this._addBottomSpace();
            sap.ushell.utils.handleTilesVisibility();
        },

        _addBottomSpace : function () {
        	sap.ushell.utils.addBottomSpace();
        },

        _scrollToGroup : function (sChannelId, sEventId, oData) {

            var sGroupId,
                that = this;

            if (oData.group) {
                sGroupId = oData.group.getGroupId();
            } else {
                // in case of scroll after deletion, the oData contains only the groupId.
                sGroupId = oData.groupId;
            }

            jQuery.each(this.oView.oDashboardGroupsBox.getGroups(), function (nIndex, oGroup) {
                if (oGroup.getGroupId() === sGroupId) {
                    var iY;

                    if (sap.ui.Device.system.desktop) {
                        if (nIndex === 0) {
                            sap.ui.getCore().byId("dashboardPage").scrollTo(0, 500);
                        }
                        else {
                            var jqDashboardPageCont = jQuery("#dashboardPage-cont");
                            var iTopSpacing = jQuery('#shell-hdr').height() + parseInt(jQuery('.sapUshellContainerTitle').css('margin-top'),10);
                            iY = jQuery.sap.byId(oGroup.sId).offset().top + jqDashboardPageCont.scrollTop() - iTopSpacing;
                            sap.ui.getCore().byId("dashboardPage").scrollTo(iY, 500);
                        }
                    } else {
                        iY =  -1*( document.getElementById('dashboardGroups').getBoundingClientRect().top) + document.getElementById(oGroup.sId).getBoundingClientRect().top;
                        jQuery('#dashboard').animate({scrollTop : iY}, 500,that.fHandleScrollEnd);
                    }

                    //on press event we need to set the group in focus as well unless we are in edit mode
                    if (oData.group && oData.focus && !oData.group.getEditMode()) {
                        jQuery.sap.byId(oGroup.sId).focus();
                    }
                    //fix bottom space, if this a deletion scenario the 'oData.groupId' will return true
                    if (oData.groupId || oData.groupChanged) {
                        that._addBottomSpace();
                    }

                    jQuery('#groupList .sapUshellDefaultGroupItem, #groupList .sapUshellGroupListItem')
                        .removeClass('sapUshellOver')
                        .eq(nIndex).addClass('sapUshellOver');

                    // Call Tiles visibility scrolling handler
                    //TODO should be triggered by Scroll event - consider removing it
                    sap.ushell.utils.handleTilesVisibility();

                    return false;
                }
            });
        },

        fHandleScrollEnd : function() {

            //Notify groupList
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.publish("grouplist", "ScrollAnimationEnd");
        },

        makeGroupSortable : function (jqTileContainer) {
            var jqGroup = jqTileContainer.find('.sapUshellInner');

            if (jqGroup.hasClass("ui-sortable")) {
                return;
            }

            this._sortable(jqGroup);
        },

        _getTileTopOffset : function (oTile, tilePosition, dashboardScrollTop) {
            var iTileTopOffset = 0 + dashboardScrollTop;
            iTileTopOffset += oTile.closest(".sapUshellDashboardGroupsContainerItem").position().top;
            iTileTopOffset += tilePosition.top;
            return iTileTopOffset;
        },

        _sortable : function (jqGroup) {
            var that = this,
                jqDashboardGroup = jQuery.sap.byId(this.oView.oDashboardGroupsBox.getId()),
                jqCloneArea = jqDashboardGroup.find(".sapUshellCloneArea");

            that.bActive = false;

            //Check if there already is a clone area
            if (jqCloneArea.length <= 0) {
                jqCloneArea = jQuery("<div id='cloneArea' class='sapUshellCloneArea sapUshellDashboardGroupsContainerItem'></div>");
                jqDashboardGroup.append(jqCloneArea);
            }

            jqGroup.sortable({ //create sortable tiles
                containment: "document", // this.jqParentParent.parent().parent(),
                items: '>:not(.sapUshellPlusTile)',
                connectWith: ".sapUshellInner.sapUshellTilesContainer-sortable",
                placeholder: "sapUshellTile-placeholder",
                tolerance: "pointer",
                helper: function (event, element) {
                    var clone = element.clone();
                    var jqCloneATag = clone.find('a');
                    if (jqCloneATag.length) {
                        var tagAContent = jqCloneATag.html();
                        jqCloneATag.replaceWith(jQuery('<div>'+tagAContent+'</div>'));
                    }
                    clone.find('[title]').removeAttr('title');
                    clone.attr("id", clone.attr("id") + '-helperclone');
                    clone.addClass("sapUshellSortableHelperClone");
                    clone.css("font-size", element.css("font-size"));
                    clone.hide();
                    setTimeout(function () {
                        clone.appendTo('body');
                        clone.show();
                    }, 1);
                    return clone;
                },
                revert: 250,
                start:  this._handleSortableStart.bind(this),
                change: this._handleSortableChange.bind(this),
                stop: this._handleSortableStop.bind(this)
            }).disableSelection(); //disable text selection browser-behaviour

            if (sap.ui.Device.system.phone) {
                jqGroup.sortable('disable');
            }
        },

        _bindTileEvents : function (oEvent) {

            if (!sap.ui.Device.system.tablet) {
                return;
            }

            var that = this,
                oTile = oEvent.getSource();

            var jqThis = jQuery.sap.byId(oTile.sId);

            jqThis.bind("mousedown", function (event) {
                if (that.bActive === false) {
                    try {
                        jQuery(".sapUshellInner.sapUshellTilesContainer-sortable").sortable('disable');
                    } catch (e) {
                        jQuery.sap.log.warning('tile container sortable was not initialized. intializing again now.');
                        jQuery(".sapUshellInner.sapUshellTilesContainer-sortable").each(function () {
                            that._sortable(jQuery(this));
                        });
                    }

                    var _this = jQuery(this),
                        _event = event;

                    clearTimeout(that.fdownTimer);
                    that.fdownTimer = setTimeout(function () {
                        that.bActive = true;

                        jQuery(_this).effect("shake", {
                            times: 1,
                            distance: 5,
                            complete: function () {
                                if (!that.bActive) {
                                    return;
                                }

                                //deactivate scrolling during drag and drop on mobile devices
                                var oDashboardPage = sap.ui.getCore().byId("dashboardPage"),
                                    oScroller = oDashboardPage.getScrollDelegate();

                                if (oScroller && oScroller._scroller) {
                                    oScroller._scroller.disable();
                                }
                                jQuery(".sapUshellInner.sapUshellTilesContainer-sortable").sortable('enable');
                                jQuery(this).trigger(_event);
                            }
                        }, 50);
                    }, 150);
                }
            });


            jqThis
                .bind('mouseup', $.proxy(that, '_resetDraggingTimeout'))
                .bind('mousemove', $.proxy(that, '_resetDraggingTimeout'))
                .bind('scrollstart', $.proxy(that, '_resetDraggingTimeout'))
                .bind('touchmove', $.proxy(that, '_resetDraggingTimeout'))
                .bind('touchcancel', $.proxy(that, '_resetDraggingTimeout'));

        },

        _resetDraggingTimeout : function () {
            clearTimeout(this.fdownTimer);
            this.bActive = false;

            if (!sap.ui.Device.system.desktop) {
                //activate scrolling after drag and drop on mobile devices
                var oDashboardPage = sap.ui.getCore().byId("dashboardPage"),
                    oScroller = oDashboardPage.getScrollDelegate();

                if (oScroller && oScroller._scroller) {
                    oScroller._scroller.enable();
                }
            }
        },

        _handleSortableStart : function (event, ui) {

            this.sortableInfo = {};
            this.sortableInfo.dashboardGroups = document.getElementById(this.oView.oDashboardGroupsBox.getId());
            this.sortableInfo.jqDashboardGroups = jQuery(this.sortableInfo.dashboardGroups);
            var jqTiles = this.sortableInfo.jqDashboardGroups.find(".sapUshellTile");
            //fix for ios, that prevent iPada tile from lunch after Drag and Drop
            if (sap.ui.Device.os.ios && sap.ui.Device.system.tablet) {
                jqTiles.find('a').removeAttr('href');
            }
            this.sortableInfo.originalTiles =  jqTiles.not(".sapUshellSortableHelperClone").not(ui.item);
            this.sortableInfo.cloneArea = this.sortableInfo.jqDashboardGroups.find("#cloneArea");
            this.sortableInfo.tilesFirstContainer = this.sortableInfo.jqDashboardGroups.find('.sapUshellTileContainer:visible:first');
            this.sortableInfo.containerLeftMargin = parseInt(this.sortableInfo.tilesFirstContainer.css("margin-left"));
            this.sortableInfo.jqDashboardPageCont = jQuery("#dashboardPage-cont");


            var uiCore = sap.ui.getCore();
            uiCore.getEventBus().publish("launchpad", "sortableStart");

            var oTile = uiCore.byId(ui.item[0].id);
            if (oTile.getLong()) {
                ui.placeholder.addClass("sapUshellLong");
            }
            if (oTile.getTall()) {
                ui.placeholder.addClass("sapUshellTall");
            }

            // Make the dragged item "unclickable" to prevent opening apps while/immediately after
            // drag'n'drop, because doing this produces ui errors.
            ui.item.click(function(oEvent) {
                oEvent.preventDefault();
                oEvent.stopPropagation();
            });

            //show delete-area
            this.oView.oDashboardDeleteArea.show();

            if (!this.isDesktop) {
                return
            }

            //Flag the original tile that is currently being dragged
            //ui.item.addClass("sapUshellExcludeMe");

            var that = this,
            //Refresh the current margin (window scaling and opening the sidebar change the margin)
                containerOffsetLeft = parseFloat(jQuery("#dashboardPage-scroll").offset().left),
                dashboardOffsetLeft = this.sortableInfo.jqDashboardGroups.offset().left;//css("width")

            this.sortableInfo.cloneArea.css("left", dashboardOffsetLeft - containerOffsetLeft);

            //Clone all existing tiles
            //Iterate through all tiles
            var dashboardPageScrollTop = this.sortableInfo.jqDashboardPageCont.scrollTop();
            for(var i=0; i<this.sortableInfo.originalTiles.length; i++) {
                //Clone the current tile (including style)
                var jqTile = this.sortableInfo.originalTiles.eq(i),
                    oClonedTile = jqTile.clone();
                var tile = jqTile[0];
                tile.tilePosition = jqTile.position();
                tile.tileOffset = jqTile.offset();
                oClonedTile.attr("id", oClonedTile.attr("id") + '-clone');
                oClonedTile.css("font-size", jqTile.css("font-size"));
                oClonedTile.addClass("sapUshellClonedTile");

                //Save the clone and the current group (sapUshellDashboardGroupsContainerItem)
                jqTile.data("clone", oClonedTile);

                //Position the clone inside the cloneArea
                var sTileLeftOffset = parseInt(tile.tilePosition.left) + this.sortableInfo.containerLeftMargin + "px",
                    iTileTopOffset = that._getTileTopOffset(jqTile, tile.tilePosition, dashboardPageScrollTop);

                //Set the new position
                oClonedTile.css("left", sTileLeftOffset);
                oClonedTile.css("top", iTileTopOffset + "px");

                //Append the clone...
                that.sortableInfo.cloneArea.append(oClonedTile);

                jqTile.css("visibility", "hidden");
            }
        },

        _handleSortableStop : function (event, ui) {
            // Make sure that helper is disposed
            jQuery(".sapUshellSortableHelperClone").remove();

            //hide delete-area
            this.oView.oDashboardDeleteArea.hide();

            var uiCore = sap.ui.getCore(),
                oTile = uiCore.byId(ui.item[0].id),
                oEventBus = uiCore.getEventBus();

            if(oTile) {
                var oOldGroup = oTile.getParent();

                if (!oTile.bDeletionFlag) {
                    // Move tile in model if user actually moved a tile directly between groups.
                    // Only process if the event is not thrown by a helper and the tile was not
                    // deleted.
                    // If the tile was dropped on a group, oTile == undefined, as the drop handler
                    // destroyed it (see _handleGroupListItemDrop()). Nothing to be done here.
                    if (oTile.getLong()) {
                        jQuery(".sapUshellTile-placeholder").removeClass("sapUshellLong");
                    }

                    var oNewGroup = sap.ui.getCore().byId(ui.item.parents(".sapUshellTileContainer").attr("id")),
                        sNewGroupId = oNewGroup.getGroupId(),
                        nNewIndex = ui.item.index();

                    oOldGroup.removeTile(oTile, true);
                    oNewGroup.insertTile(oTile, nNewIndex, true);

                    oEventBus.publish("launchpad", "moveTile", {
                        sTileId    : oTile.getUuid(),
                        toGroupId  : sNewGroupId,
                        toIndex    : nNewIndex
                    });

                    // Workaround: Prevent a new sort from being started before re-rendering has happened.
                    // This is necessary because the delayed rendering would corrupt an ongoing sort, as it
                    // deletes the current container (& sortable) and creates a new one.)
                    // (But don't do this, when we're deleting tiles. In this case rerendering was already
                    // triggered by the deletion handler in mouseStop.)
                    ui.item.parent().sortable('disable');

                } else if (oTile.bDeletionFlag) {
                    oOldGroup.removeTile(oTile, true);
                    oTile.bDeletionFlag = false;

                    oEventBus.publish("launchpad", "deleteTile", {
                        tileId  : oTile.getUuid()
                    });

                    oTile.destroy();
                }
            }

            if (sap.ui.Device.system.phone) {
                that.bActive = false;
                jQuery(".sapUshellInner.sapUshellTilesContainer-sortable").sortable('disable');
            }

            if (this.isDesktop) {
                //Show all original tiles and reset everything
                var jqShellTile = jQuery(".sapUshellTile").not(".sapUshellClonedTile");
                jqShellTile.removeData("clone");
                jqShellTile.removeClass("sapUshellExcludeMe");
                jqShellTile.css("visibility", "visible");

                //Delete all clones
                var jqDashboardGroup = jQuery.sap.byId(this.oView.oDashboardGroupsBox.getId()),
                    jqCloneArea = jqDashboardGroup.find("#cloneArea");
                jqCloneArea.empty();
            }

            delete this.sortableInfo;
            oEventBus.publish("launchpad", "sortableStop");
        },

        /**
         *
         * @param event
         * @param ui : tile DOM Reference
         * @private
         */
        _handleDrop : function (event, ui) {
            var jqTile = jQuery(ui);
            //hide delete-area
            this.oView.oDashboardDeleteArea.hide();

            var oNewGroup = sap.ui.getCore().byId(jqTile.parents(".sapUshellTileContainer").attr("id")),
                sNewGroupId = oNewGroup.getGroupId(),
                nNewIndex = jqTile.index(),
                uiCore = sap.ui.getCore(),
                oTile = uiCore.byId(jqTile.attr('id')),
                oOldGroup = oTile.getParent(),
                oEventBus = uiCore.getEventBus(),
                oDeleteArea = jQuery(".sapUshellDeleteArea_dashboard_functional");
            if (oDeleteArea.data("tileOver") === true){
                oOldGroup.removeTile(oTile, true);

                oEventBus.publish("launchpad", "deleteTile", {
                    tileId: oTile.getUuid()
                });

                oTile.destroy();
                oDeleteArea.data("tileOver", false);

            } else {
                oOldGroup.removeTile(oTile, true);
                oNewGroup.insertTile(oTile, nNewIndex, true);

                oEventBus.publish("launchpad", "moveTile", {
                    sTileId: oTile.getUuid(),
                    toGroupId: sNewGroupId,
                    toIndex: nNewIndex
                });
            }
        },

        _handleSortableChange : function (event, ui, bAnimate) {
            if (typeof bAnimate == "undefined") {
                bAnimate = true;
            }

            // when moving from one group to another this should only be called for the target group
            if (ui && (ui.placeholder.length > 0)) {
                var jqTargetGroup = ui.placeholder.parent();
                var jqPlusTiles = jqTargetGroup.children('.sapUshellPlusTile');
                if (jqPlusTiles.length > 0) {
                    jqPlusTiles.detach();
                    jqTargetGroup.append(jqPlusTiles);
                }
            }

            if (!this.isDesktop) return;

            var that = this;
            var oOriginalTiles = this.sortableInfo.originalTiles;
            var dashboardPageScrollTop = this.sortableInfo.jqDashboardPageCont.scrollTop();

            for (var i=0; i<oOriginalTiles.length; i++) {
                //Get the original tile and its clone
                var jqTile = oOriginalTiles.eq(i);
                var tile = jqTile[0];
                var currentTilePosition = jqTile.position();
                var currentTileOffset = jqTile.offset();
                if ((currentTileOffset.left == tile.tileOffset.left) && (currentTileOffset.top == tile.tileOffset.top)) {
                    continue;
                }
                tile.tilePosition = currentTilePosition;
                tile.tileOffset = currentTileOffset;
                var oClonedTile = jqTile.data("clone");
                if (!oClonedTile) continue;

                //Get the invisible tile that has snapped to the new
                //location, get its position, and animate the visible
                //clone to it
                var tileLeftOffset = tile.tilePosition.left + this.sortableInfo.containerLeftMargin;
                var iTileTopOffset = that._getTileTopOffset(jqTile, tile.tilePosition, dashboardPageScrollTop);

                //Animate / move everything to their new locations
                if(bAnimate) {
                    //Stop currently running animations
                    //Without this, animations would queue up
                    oClonedTile.stop(true, false).animate({left: tileLeftOffset, top: iTileTopOffset}, {duration: 250}, {easing: "swing"});
                } else {
                    oClonedTile.css({left: tileLeftOffset, top: iTileTopOffset});
                }
            }
        },

        _handleGroupListOver : function (sChannel, sEventId, oEvent) {
            //Toggle transparency of the hovering tile
            jQuery(".sapUshellSortableHelperClone").toggleClass("sapUshellOverGroupList");

            //Hide the old placeholder
            jQuery(".sapUshellTile-placeholder").hide();
        },
        _handleGroupListOut : function (sChannel, sEventId, oEvent) {
            //Toggle transparency of the hovering tile
            jQuery(".sapUshellSortableHelperClone").toggleClass("sapUshellOverGroupList");

            //Show the old placeholder
            jQuery(".sapUshellTile-placeholder").show();

            //Reset the target drop group
            jQuery(".sapUshellGroupList").data("dropGroup", null);

            //Make the cloned tiles animate themselves to their new positions
            this._handleSortableChange(undefined, undefined, false);
        },
        _handleGroupListItemOver : function (sChannel, sEventId, oEvent) {
            //Memorize the group over which the tile is hovering
            jQuery(".sapUshellGroupList").data("dropGroup", oEvent.getSource());

            //Clone the old placeholder
            var jqPlaceholderClone = jQuery(".sapUshellTile-placeholder").not(".sapUshellPlaceholderClone").clone();
            jqPlaceholderClone.addClass("sapUshellPlaceholderClone");
            jqPlaceholderClone.attr("id", "placeholder-clone_" + oEvent.getSource().sId);

            //Identify the jQuery object of target group
            var jqTargetGroup;
            jQuery.each(this.oView.oDashboardGroupsBox.getGroups(), function (nIndex, oGroup) {
                if (oGroup.getGroupId() === oEvent.getSource().getGroupId()) {
                    jqTargetGroup = jQuery("#" + oGroup.sId).find(".sapUshellTilesContainer-sortable");
                    return false;
                }
            });

            //Attach cloned placeholder to last position of target group
            //Check if target group contains a plus tile (if so, insert before that)
            if(jqTargetGroup.find(".sapUshellPlusTile").length > 0) {
                //Append before plus tile
                jqTargetGroup.find(".sapUshellPlusTile").before(jqPlaceholderClone);
                jqPlaceholderClone.show();
            } else {
                //Append as last element
                jqTargetGroup.append(jqPlaceholderClone);
                jqPlaceholderClone.show();
            }

            //Make the original tile and the original placeholder invisible (if not already)
            //jQuery(".sapUshellExcludeMe.sapUshellSortableHelperClone").hide();
            jQuery(".sapUshellTile-placeholder").not(".sapUshellPlaceholderClone").hide();

            //Make the cloned tiles animate themselves to their new positions
            this._handleSortableChange(undefined, undefined, false);
        },
        _handleGroupListItemOut : function (sChannel, sEventId, oEvent) {
            //Remove my placeholder clones
            jQuery("#placeholder-clone_" + oEvent.getSource().sId).remove();

            //Make the cloned tiles animate themselves to their new positions
            //In theory, this should only be necessary in "over", but due to the wrong order of events,
            //a placeholder could be removed AFTER the over event, thus leading to strange behavior
            this._handleSortableChange(undefined, undefined, false);
        },

        _handleGroupListItemDrop : function (sChannel, sEventId, oEvent) {
            //Move the tile
            var oTile = oEvent.getParameter("control"),
                oOldGroup = oTile.getParent();

            oOldGroup.removeTile(oTile, true);

            this._publishAsync("launchpad", "moveTile", {
                sTileId    : oTile.getUuid(),
                toGroupId  : oEvent.getSource().getGroupId(),
                toIndex    : null
            });

            //Clean up the missing events
            this._handleGroupListOut(sChannel, sEventId, oEvent);
            this._handleGroupListItemOut(sChannel, sEventId, oEvent);

            // TODO: It would be good if we could move the tile to its new container.
            // But that requires the drag-item and the oTile to be moved.
            oTile.destroy();
        },
        _publishAsync : function (sChannelId, sEventId, oData) {
            var oBus = sap.ui.getCore().getEventBus();
            window.setTimeout($.proxy(oBus.publish, oBus, sChannelId, sEventId, oData), 1);
        }
    });
}());

}; // end of sap/ushell/renderers/fiori2/launchpad/dashboard/DashboardContent.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.launchpad.dashboard.DashboardContent.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.launchpad.dashboard.DashboardContent.view');
//Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, $, document, self */
    /*jslint plusplus: true, nomen: true, vars: true */

    
    
    
    

    var _mouseStop = $.ui.sortable.prototype._mouseStop;

    $.ui.sortable.prototype._mouseStop = function (event, noPropagation) {
        if (!event) {
            return;
        }

        if (this.options.revert) {
            var that = this,
                args = arguments,
                cur = that.placeholder.offset(),
                // the dur[ation] will not determine how long the revert animation is
                dur = $.isFunction(this.options.revert) ? this.options.revert.apply(this.element[0], [event, that._uiHash(this)]) : this.options.revert,
                rtl = sap.ui.getCore().getConfiguration().getRTL(),
                jqHelper = jQuery(this.helper),
                getTransitionPosition = function (oHelper) {
                	if (rtl) {
                		return 0
                	}else{
                		return (jQuery(document).width() - oHelper.width() - 10)
                	}
                };

            self.reverting = true;

            if (jQuery(".sapUshellDeleteArea_dashboard_functional").data("tileOver") === true) {
                //Animation to dashboard delete area

                //On IE and Safari use jQuery's animate(), otherwise use css transition (hardware accelerated)
                //See http://stackoverflow.com/questions/5899783/detect-safari-using-jquery
                var bIsIE       = $.browser.msie,
                    bIsIE10     = (bIsIE && (parseInt($.browser.version, 10) === 10)) ? true : false,
                    bIsSafari   = (!(navigator.userAgent.indexOf('Chrome') > -1)) && (navigator.userAgent.indexOf("Safari") > -1);

                if (!bIsIE10 && (bIsIE || bIsSafari)) {
                    $(this.helper).animate({
                        top: (jQuery(document).height() - this.helper.height() - 10) + "px",
                        //Transition direction is different for rtl and ltr modes
                        left: getTransitionPosition(this.helper),
                        opacity: 0
                    }, !isNaN(dur) ? dur : 250, function () {
                        setTimeout(function () {
                            var sTileId = jQuery(that.currentItem).attr('id'),
                            oTile = sap.ui.getCore().byId(sTileId);
                            oTile.bDeletionFlag = true;
                            //Save that nothing is "over" the delete area anymore
                            jQuery(".sapUshellDeleteArea_dashboard_functional").data("tileOver", false);
                            _mouseStop.apply(that, args);
                        }, dur);
                    });
                } else {
                    jQuery(this.helper).css({
                        top                 : (jQuery(document).height() - this.helper.height() - 10),
                        //Transition direction is different for rtl and ltr modes
                        left                : getTransitionPosition(this.helper),
                        opacity             : 0,
                        WebkitTransition    : 'top ' + dur + 'ms ease-in-out, left ' + dur + 'ms ease-in-out, opacity ' + dur + 'ms ease-in-out, ',
                        MozTransition       : 'top ' + dur + 'ms ease-in-out, left ' + dur + 'ms ease-in-out, opacity ' + dur + 'ms ease-in-out, ',
                        MsTransition        : 'top ' + dur + 'ms ease-in-out, left ' + dur + 'ms ease-in-out, opacity ' + dur + 'ms ease-in-out, ',
                        OTransition         : 'top ' + dur + 'ms ease-in-out, left ' + dur + 'ms ease-in-out, opacity ' + dur + 'ms ease-in-out, ',
                        transition          : 'top ' + dur + 'ms ease-in-out, left ' + dur + 'ms ease-in-out, opacity ' + dur + 'ms ease-in-out'
                    });

                    setTimeout(function () {
                        var sTileId = jQuery(that.currentItem).attr('id'),
                        oTile = sap.ui.getCore().byId(sTileId);
                        oTile.bDeletionFlag = true;
                        //Save that nothing is "over" the delete area anymore
                        jQuery(".sapUshellDeleteArea_dashboard_functional").data("tileOver", false);
                        _mouseStop.apply(that, args);
                    }, dur);
                }
            } else {
                _mouseStop.apply(that, args);
            }
        } else {
            this._clear(event, noPropagation);
        }

        return false;
    };

    sap.ui.jsview("sap.ushell.renderers.fiori2.launchpad.dashboard.DashboardContent", {

        createContent: function (oController) {
            var that = this,
                oEventBus = sap.ui.getCore().getEventBus();

            this.oDashboardGroupsBox = this._getDashboardGroupsBox(oController);
            this.oDashboardDeleteArea =  this._getDashboardDeleteArea(oController);

            this.oDashboardDeleteArea.attachEvent("tileOver", function () {
                jQuery(".sapUshellTile-placeholder").hide();
                jQuery(".sapUshellExcludeMe.sapUshellSortableHelperClone").hide();
                that.oController._handleSortableChange();
            });

            this.oDashboardDeleteArea.attachEvent("tileOut", function () {
                jQuery(".sapUshellTile-placeholder").show();
                jQuery(".sapUshellExcludeMe.sapUshellSortableHelperClone").show();
                that.oController._handleSortableChange();
            });

            //First hidden Dashboard item to support TabIndex
            var firstHiddenDashboardTabFocusHelper = new sap.m.Button('firstHiddenDashboardTabFocusHelper');
            firstHiddenDashboardTabFocusHelper.addEventDelegate({
                onfocusin: function () {
                    try {
                        var shellData = sap.ui.getCore().byId('shell').getModel().getData();
                        if (shellData.currentState.showPane) {
                            var groupListPage = sap.ui.getCore().byId('groupListPage');
                            var footer = groupListPage.getFooter();
                            jQuery(footer.getDomRef()).find("[tabindex=0]").last().focus();
                        }
                        else {
                            sap.ui.getCore().byId('actionsBtn').focus();
                        }
                    } catch (e) {

                    }
                }
            });
            //Second hidden Dashboard item to support TabIndex
            var lastHiddenDashboardTabFocusHelper = new sap.m.Button('lastHiddenDashboardTabFocusHelper');
            lastHiddenDashboardTabFocusHelper.addEventDelegate({
                onfocusin: function () {
                    try {
                        var shellData = sap.ui.getCore().byId('configBtn').focus();
                    } catch (e) {
                    }
                }
            });

            return [firstHiddenDashboardTabFocusHelper, this.oDashboardGroupsBox, this.oDashboardDeleteArea, lastHiddenDashboardTabFocusHelper];

        },

        _getDashboardDeleteArea : function (oController) {
            var oDashboardDeleteArea =  new sap.ushell.ui.launchpad.DeleteArea({
                type: sap.ushell.ui.launchpad.DeleteAreaType.Dashboard,
                message: sap.ushell.resources.i18n.getText("deleteAreaMsgForTile"),
                icon: sap.ui.core.IconPool.getIconURI('delete')
            });

            return oDashboardDeleteArea;
        },

        _getDashboardGroupsBox : function (oController) {
            var that = this;
            var oTilesContainerTemplate = this._getTileContainerTemplate(oController),
                oViewData = this.getViewData(),
                oConfig;
            if (oViewData) {
                oConfig = oViewData.config;
            }

            var fAfterRenderingHandler = function () {
                if (this.getGroups().length) {
                    if ((sap.ui.Device.system.combi || !sap.ui.Device.system.desktop) && this.getModel().getProperty("/personalization")) {
                        this.touchSupport = new sap.ushell.touchSupport({
                            containerSelector: '#dashboardGroups',
                            wrapperSelector: sap.ui.Device.system.combi ? '#dashboardPage-cont' : undefined,
                            draggableSelector: ".sapUshellTile[role='link'],.sapUshellPlusTile",
                            draggableSelectorExclude: ".sapUshellPlusTile",
                            rootSelector : "#dashboardPage",
                            placeHolderClass : "sapUshellTile-placeholder",
                            cloneClass : "sapUshellTile-clone",
                            touchStartCallback : that._handleTouchStart.bind(that),
                            touchEndCallback : oController._handleDrop.bind(oController),
                            touchDragCallback : that._handleTouchDrag.bind(that),
                            dragAndScrollCallback : that._handleDelete.bind(that),
                            moveTolerance : 10,
                            switchModeDelay : 1000,
                            debug: jQuery.sap.debug()
                        }).enable();
                    }

                    sap.ui.getCore().getEventBus().publish("launchpad", "contentRendered");
                    sap.ui.getCore().getEventBus().publish("launchpad", "contentRefresh");
                    
                    var oLoadingDialog = sap.ui.getCore().byId("loadingDialog");
                    oLoadingDialog.closeLoadingScreen();
                    oController._addBottomSpace();

                    //Tile opacity is enabled by default, therefore we handle tile opacity in all cases except
                    //case where flag is explicitly set to false
                    if(!oConfig || oConfig.enableTilesOpacity !== false) {
                        sap.ushell.utils.handleTilesOpacity();
                    }
                }
                //Recheck tiles visibility on first load, and make visible tiles active
                try {
                    sap.ushell.utils.handleTilesVisibility();
                } catch (e) {
                    //nothing has to be done
                }

            };

            var hideGroupsFilter = []; //Add filter only if the feature is enabled.
            if(this.oViewData.config && this.oViewData.config.enableHideGroups){
                hideGroupsFilter.push(new sap.ui.model.Filter("isGroupVisible", sap.ui.model.FilterOperator.EQ, true));
            }
            var oGroupsContainer = new sap.ushell.ui.launchpad.DashboardGroupsContainer("dashboardGroups", {
                accessibilityLabel : sap.ushell.resources.i18n.getText("DashboardGroups_label"),
                groups : {
                    path: "/groups",
                    template : oTilesContainerTemplate,
                    filters : hideGroupsFilter
                },
                afterRendering : fAfterRenderingHandler
            });
            return oGroupsContainer;
        },
        _getTileContainerTemplate : function (oController) {
            var oFilter = new sap.ui.model.Filter("isTileIntentSupported", sap.ui.model.FilterOperator.EQ, true);
            var aAfterRenderingCallbacks = (sap.ui.Device.system.desktop && !sap.ui.Device.system.combi) ? [ oController._bindTileEvents, oController ] :  [function(){}];
            var oTilesContainerTemplate = new sap.ushell.ui.launchpad.TileContainer({
                headerText : "{title}",
                tooltip: "{title}",
                groupId: "{groupId}",
                defaultGroup: "{isDefaultGroup}",
                showHeader: true,
                showPlaceholder : true,
                tiles: {
                    path : "tiles",
                    template : new sap.ushell.ui.launchpad.Tile({
                        draggable : false,
                        "long" : "{long}",
                        "tall" : "{tall}",
                        uuid : "{uuid}",
                        target : "{target}",
                        rgba : "{rgba}",
                        animationRendered : false,
                        debugInfo : "{debugInfo}",
                        tileViews : {
                            path : "content",
                            factory : function(sId, oContext){
                                return oContext.getObject();
                            }
                        },
                        afterRendering : aAfterRenderingCallbacks
                    }),
                    filters : [oFilter]
                },
                add : function (oEvent) {
                    sap.ushell.renderers.fiori2.Navigation.openCatalogByHash({
                        groupContext : oEvent.getSource().getBindingContext()
                    });
                },
                afterRendering: function() {
                    if (this.getModel().getProperty("/personalization") && sap.ui.Device.system.desktop) {
                        var jqTileContainer = jQuery('#' + this.getId());
                        oController.makeGroupSortable(jqTileContainer);
                    }
                },
                removable: "{removable}",
                sortable: "{sortable}"
            });

            return oTilesContainerTemplate;
        },

        /**
         *
         * @param ui : tile DOM Reference
         * @private
         */
        _handleTouchStart : function(evt, ui) {

        },

        /**
         *
         * @param ui : tile DOM reference
         * @private
         */
        _handleTouchDrag : function (evt, ui) {
            //Prevent the tile to be launched after drop
            jQuery(ui).find("a").removeAttr('href');
            //show delete-area
            this.oDashboardDeleteArea.show();
            this.placeHolderElement = jQuery(".sapUshellTile-placeholder");
        },

        /**
         *
         * @param ui : tile DOM reference
         * @private
         */
        _handleDelete : function (evt, tile) {
            //If the tile positioned over the delete area
            if (this.oDashboardDeleteArea.isElementOverDeleteArea(tile)) {
                if (this.isOutsideDeleteArea){
                    this.oDashboardDeleteArea.tileOver(true);
                    this.oDashboardDeleteArea.adjustStyleOnOverIn(true, jQuery(tile));
                    this.isOutsideDeleteArea = false;
                    this.placeHolderElement.hide();
                }
            }
            else {
                if (!this.isOutsideDeleteArea) {
                    this.oDashboardDeleteArea.tileOver(false);
                    this.oDashboardDeleteArea.adjustStyleOnOverOut(true, jQuery(tile));
                    this.isOutsideDeleteArea = true;
                    this.placeHolderElement.show();
                }
            }
        },

        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.launchpad.dashboard.DashboardContent";
        }
    });
}());

}; // end of sap/ushell/renderers/fiori2/launchpad/dashboard/DashboardContent.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.launchpad.group_list.GroupList.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.launchpad.group_list.GroupList.view');
//Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, $, document */
    /*jslint plusplus: true, nomen: true */

    
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


    var _mouseStop = $.ui.sortable.prototype._mouseStop;

    $.ui.sortable.prototype._mouseStop = function (event, noPropagation) {
        if (!event) {
            return;
        }

        if (this.options.revert) {
            var that = this,
                args = arguments,
                cur = that.placeholder.offset(),
                // the duration will not determine how long the revert animation is
                dur = $.isFunction(this.options.revert) ? this.options.revert.apply(this.element[0], [event, that._uiHash(this)]) : this.options.revert,
                jqHelper = jQuery(this.helper);

            self.reverting = true;

            if (jQuery(".sapUshellDeleteArea_grouplist_functional").data("groupOver") === true) {
                var oGroup = sap.ui.getCore().byId(jQuery(that.currentItem).attr('id')),
                    bRemovable = oGroup.getRemovable(),
                    fOnConfirm = function () {
                        //User wants to delete
                        //Flag for deletion
                        jqHelper.data("deleteMe", true);
                        //Animation to grouplist delete area
                        jqHelper.animate({
                            top: (jQuery(document).height() - jqHelper.height() - 10) + "px",
                            left: "0px",
                            opacity: 0
                        }, !isNaN(dur) ? dur : 250, function () {
                            event.scrollToGroup = false;
                            that._clear(event);

                            //Delete the group!
                            var oEventBus = sap.ui.getCore().getEventBus();
                            oEventBus.publish("launchpad", bRemovable ? "deleteGroup" : "resetGroup", {
                                groupId : oGroup.getGroupId()
                            });

                            //show the original group list items after dragging is finished
                            var oController = sap.ui.getCore().byId('groupList').oController;
                            oController._getJqAllListItems().not(".sapUshellSortableHelperClone").not(".sapUshellClonedGrouplistItem").css("visibility", "");
                            //Save that nothing is "over" the delete area anymore
                            jQuery(".sapUshellDeleteArea_grouplist_functional").data("groupOver", false);
                        });
                    };
                //hide the dragged group while the confirm message is visible
                jqHelper.animate({opacity : 'hide'});
                oGroup.bDeletionFlag = true;

                fOnConfirm();

            } else if (jQuery(".sapUshellGroupList").data("dropGroup")) {
                var jqGroupListItem = jQuery.sap.byId(jQuery(".sapUshellGroupList").data("dropGroup").sId);

                //Animate tile right into the group list item
                jqHelper.animate({
                    top: jqGroupListItem.offset().top + 16,
                    left: jqGroupListItem.offset().left + 48,
                    height: "0px",
                    width: "0px",
                    opacity: 0
                }, !isNaN(dur) ? dur : 250, function () {
                    jQuery(".sapUshellGroupList").data("dropGroup", null);
                    _mouseStop.apply(that, args);
                });

            } else {
                _mouseStop.apply(that, args);
            }
        } else {
            event.scrollToGroup = true;
            this._clear(event, noPropagation);
        }

        return false;
    };

    sap.ui.jsview("sap.ushell.renderers.fiori2.launchpad.group_list.GroupList", {
        createContent: function (oController) {
            var that = this,
                oOpenCatalogItem =  this._getOpenCatalogItem(oController),
                oAddGroupItem = this._getAddGroupItem(oController),
                oGroupListItemTemplate = this._getGroupListItemTemplate(oController),
                nAddedListItemId = undefined,
                oShell = sap.ui.getCore().byId("shell"),
                oShellModel = oShell && oShell.getModel();

            this.oGrouplistDeleteArea = new sap.ushell.ui.launchpad.DeleteArea({
                type: sap.ushell.ui.launchpad.DeleteAreaType.GroupList,
                message: sap.ushell.resources.i18n.getText("deleteAreaMsgForGroup"),
                icon: sap.ui.core.IconPool.getIconURI('delete')
            });
            var hideGroupsFilter = [];//Add filter only if the feature is enabled.
            if(oShellModel && oShellModel.getProperty("/enableHideGroups")){
                hideGroupsFilter.push(new sap.ui.model.Filter("isGroupVisible", sap.ui.model.FilterOperator.EQ, true));
            }
            this.oGroupList = new sap.m.List("groupListItems",{
                items : {
                    path     : "/groups",
                    template : oGroupListItemTemplate,
                    filters : hideGroupsFilter
                }
            }).addStyleClass("sapUshellGroupItemList");
            //This two functions overwrite methods from ListBase class
            //sap.m.ListBase.prototype.onsapskipforward
            //sap.m.ListBase.prototype.onsapskipback
            // to avoid unpredicted behavior with F6
            jQuery.extend(this.oGroupList, {
                onsapskipforward: function () {},
                onsapskipback: function () {}
            });
            var fChangeHandler = function (oEvent) {
                var oList = oEvent.getSource().oList; //The list of groups from the model - items aggregation

                if (oList[oList.length-1].editMode){
                    var aListItems = that.oGroupList.getItems(); //The list of groupListItems from the DOM.
                    nAddedListItemId = aListItems[aListItems.length-1].getId(); //Since there might be hidden groups, take the last group from the model.
                }
            };

            /**
             *
             * @param ui : groupListItem DOM Reference
             * @private
             */
            this._handleTouchStart = function(evt, ui) {
                //In order to save the start position of the dragged element
                var jqElement = jQuery(ui);
                jqElement.attr('startPos',jqElement.index());
            },

            /**
             *
             * @param ui : groupListItem DOM Reference
             * @private
             */
            this._handleDoubleTap = function(evt, ui) {
                var groupListItem = sap.ui.getCore().byId(ui.getAttribute('id'));
                if (groupListItem) {
                    groupListItem.ondblclick();
                }
            },

            /**
             *
             * @param ui : groupListItem DOM reference
             * @private
             */
            this._handleTouchDrag = function (evt, ui) {
                //remove the sapUshellOver class from all groupListItems in order to prevent multiple selection
                jQuery(this.getDomRef()).find(".sapUshellOver").removeClass('sapUshellOver');
                //show delete-area
                this.oGrouplistDeleteArea.show();
            },

            this.oGroupList.onBeforeRendering = function () {
                if (that.touchSupport) {
                    that.touchSupport.disable();
                    that.touchSupport = null;
                }
            },

            this._handleDelete = function (evt, groupListItem) {
                //If the tile positioned over the delete area
                if (this.oGrouplistDeleteArea.isElementOverDeleteArea(groupListItem)) {
                    if (this.isOutsideDeleteArea) {
                        var oGroup = sap.ui.getCore().byId(groupListItem.getAttribute('id'));
                        this.oGrouplistDeleteArea.setDeleteAreaMessage(oGroup);
                        this.oGrouplistDeleteArea.groupOver(true);
                        this.oGrouplistDeleteArea.adjustStyleOnOverIn(true, jQuery(groupListItem));
                        this.isOutsideDeleteArea = false;
                    }
                }
                else {
                    if (!this.isOutsideDeleteArea) {
                        this.oGrouplistDeleteArea.groupOver(false);
                        this.oGrouplistDeleteArea.adjustStyleOnOverOut(true, jQuery(groupListItem));
                        this.isOutsideDeleteArea = true;
                    }
                }
            },

            this.oGroupList.onAfterRendering = function () {
                oController._updateGroupSelection();

                if (this.getModel().getProperty("/personalization")) {
                    if (!sap.ui.Device.system.desktop) {
                        that.touchSupport = new sap.ushell.touchSupport({
                            containerSelector: "#groupListPage-scroll .sapUshellGroupItemList",
                            draggableSelector: ".sapUshellGroupLI:not(.sapUshellDefaultGroupItem)",
                            rootSelector : "#groupList",
                            wrapperSelector : "#groupListPage-scroll",
                            touchStartCallback : that._handleTouchStart.bind(that),
                            touchEndCallback : oController._handleDrop.bind(oController),
                            touchDragCallback : that._handleTouchDrag.bind(that),
                            dragAndScrollCallback : that._handleDelete.bind(that),
                            doubleTapCallback: that._handleDoubleTap.bind(that),
                            placeHolderClass : "sapUshellGroupListItem-placeholder",
                            cloneClass :"sapUshellGroupListItem-clone",
                            moveTolerance : 1,
                            switchModeDelay : 1000,
                            debug: jQuery.sap.debug()
                        }).enable();
                    }
                    else {
                        jQuery.proxy(oController.makeSortable, oController)();
                    }
                }

                if (nAddedListItemId) {
                    var jqAddedListItem = jQuery.sap.byId(nAddedListItemId);

                    jqAddedListItem
                        .css('opacity', 0)
                        .slideDown(300)
                        .animate(
                            { opacity: 1 },
                            { queue: false, duration: 300 }
                        );

                    nAddedListItemId = undefined;
                }

                this.getBinding("items").detachChange(fChangeHandler);
                this.getBinding("items").attachChange(fChangeHandler);
            };

            this.oGroupList.updateItems = sap.ushell.override.updateAggregatesFactory("items");

            //hidden Sidebar item to support TabIndex
            var lastHiddenSidebarTabFocusHelper = new sap.m.Button("lastHiddenSidebarTabFocusHelper");
            lastHiddenSidebarTabFocusHelper.addEventDelegate({
                onfocusin: function () {
                    try {
                        if (!sap.ushell.renderers.fiori2.AccessKeysHandler.goToEdgeTile('first')) {
                            sap.ui.getCore().byId('actionsBtn').focus();
                        }
                    } catch (e) {
                    }
                }
            });

            //hidden Sidebar item to support TabIndex
            var firstHiddenSidebarTabFocusHelper = new sap.m.Button("firstHiddenSidebarTabFocusHelper");
            firstHiddenSidebarTabFocusHelper.addEventDelegate({
                onfocusin: function () {
                    try {
                        var actionsBtn = sap.ui.getCore().byId('actionsBtn');
                        actionsBtn.focus();
                    } catch (e) {
                    }
                }
            });

            if (sap.ui.getCore().byId("shell") && sap.ui.getCore().byId("shell").getModel()
                    && sap.ui.getCore().byId("shell").getModel().getProperty("/personalization")) {
                this.oActionList = new sap.m.List({
                    items : [ oAddGroupItem, oOpenCatalogItem ]
                });

              //This two functions overwrite methods from ListBase class
                //sap.m.ListBase.prototype.onsapskipforward
                //sap.m.ListBase.prototype.onsapskipback
                // to avoid unpredicted behavior with F6
                jQuery.extend(this.oActionList, {
                    onsapskipforward: function () {},
                    onsapskipback: function () {}
                });
                this.oActionList._navToTabChain = function () {};
                /*
                 override original onAfterRendering as currently sap.m.List
                 does not support afterRendering handler in the constructor
                 this is done to support tab order accessibility
                 */
                var origOpenCatalogListOnAfterRendering = this.oActionList.onAfterRendering;
                this.oActionList.onAfterRendering = function (oEvent) {
                    origOpenCatalogListOnAfterRendering.call(this, oEvent);
                    var oControl = oEvent.srcControl.getItems()[0];
                };

                var groupListFooter = new sap.m.Bar({
                    id: "groupListFooter",
                    contentMiddle: [this.oActionList, lastHiddenSidebarTabFocusHelper]
                });
                groupListFooter.addStyleClass("sapUshellPersonalizationOn");

                this.groupListPage = new sap.m.Page({
                    id: "groupListPage", // sap.ui.core.ID
                    showHeader: false,
                    showFooter: true,
                    content: [firstHiddenSidebarTabFocusHelper, this.oGroupList], // sap.ui.core.Control
                    footer: groupListFooter,
                    enableScrolling: !!sap.ui.Device.system.desktop
                });
                this.groupListPage.addStyleClass("sapUshellPersonalizationOn");
            } else {
                this.groupListPage = new sap.m.Page({
                    id: "groupListPage", // sap.ui.core.ID
                    showHeader: false,
                    showFooter: false,
                    content: [firstHiddenSidebarTabFocusHelper, this.oGroupList] // sap.ui.core.Control
                });
            }
            this.addStyleClass("sapUshellGroupList");


            return [this.groupListPage, this.oGrouplistDeleteArea];
        },

        _getOpenCatalogItem : function () {
            var fOpenCatalog = function () {
                sap.ushell.renderers.fiori2.Navigation.openCatalogByHash({
                    groupContext : null
                });
            },
                oOpenCatalogItem = new sap.m.ActionListItem("openCatalogActionItem", {
                    text: "{i18n>open_catalog}",
                    tooltip: "{i18n>openCatalog_tooltip}",
                    press: fOpenCatalog
                });

            return oOpenCatalogItem;
        },

        _getGroupListItemTemplate : function (oController) {
            var fOnAfterRenderingHandler = function (oEvent) {
                if (this.getParent().getItems()[0] === this) {
                    this.setAllowEditMode(false);
                    if (this.getDefaultGroup()) {
                        this.addStyleClass("sapUshellDefaultGroupItem");
                    }
                } else {
                    this.addStyleClass("sapUshellGroupListItem");
                }

                oController._bindGroupListItemEvents(oEvent);
                jQuery(this.getDomRef()).attr("tabindex", "0");
            };

            return new sap.ushell.ui.launchpad.GroupListItem({
                index : "{index}",
                title : "{title}",
                tooltip : "{title}",
                defaultGroup : "{isDefaultGroup}",
                groupId : "{groupId}",
                editMode : "{editMode}",
                //xTODO: This information does not belong into the ui element, but there is no other way to make it accessible to drop-event-handler (_mouseStop).
                removable : "{removable}",
                numberOfTiles : "{tiles/length}",
                afterRendering : fOnAfterRenderingHandler,
                isGroupVisible: "{isGroupVisible}",
                press : [ function (oEvent) {
                    this._handleGroupListItemPress(oEvent);
                }, oController ],
                change : [ oController.onGroupTitleChange, oController],
                over : [ oController._handleGroupListItemOver, oController ],
                out : [ oController._handleGroupListItemOut, oController ],
                drop : [ oController._handleGroupListItemDrop, oController ]
            });
        },

        _getAddGroupItem : function (oController) {

            var oAddGroupItem = new sap.m.ActionListItem("addGroupActionItem", {
                text : "{i18n>add_group}",
                tooltip: "{i18n>add_group_tooltip}",
                press : [ function () {
                    oController._handleGroupCreate.apply(oController, arguments);
                }, oController]
            });

            return oAddGroupItem;
        },

        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.launchpad.group_list.GroupList";
        }
    });
}());

}; // end of sap/ushell/renderers/fiori2/launchpad/group_list/GroupList.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.HistoryScreen.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.HistoryScreen.view');
//Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, SearchLayout */

    
    
    
    
    
    

    sap.ui.jsview("sap.ushell.renderers.fiori2.search.HistoryScreen", {
        createContent: function (oController) {
            var self = this;
            var oSearchItemTemplate,
                oListSearches;

            // recent datassources
            // var oRecentDataSources =  new sap.ushell.renderers.fiori2.search.DataSourceList({
            //     data
            // });

            if (sap.ui.getCore().getModel("searchModel").isNormalSearchEnable()){
            	this.oRecentDataSources = new sap.ushell.renderers.fiori2.search.DataSourceList({
                    // dataSources : [{objectName:{label:"blub"}}, {objectName:{label:"b23lub"}}, {objectName:{label:"bsdlub"}}, {objectName:{label:"baalub"}}],
                    dsPress : function(params){
                        var ds = params.getParameters().ds;
                        // self.viewSwitcher.switchViewState("searchResults");
                        self.getModel("searchModel").setDataSource(ds, false);
                        self.searchfield.focus();
                    },
                    showNoData: false,
                    dataSources : "{/dataSources}"
                    
                });
            }
            

            // recent apps
            // oRecentApps =  new sap.ushell.ui.launchpad.SearchResultApps({
            //     showNoData: false,
            //     growing: true,
            //     growingThreshold: 2,
            //     growingTriggerText: {path: "i18n>showMore"},
            //     showGrowingTrigger: false,
            //     results: {
            //         path : "/apps",
            //         template : new sap.ushell.ui.launchpad.SearchResultAppItem({
            //             icon: "{icon}",
            //             text: "{title}",
            //             targetUrl: "{url}"
            //         })
            //     },
            //     visible: {
            //         path: "/apps/length",
            //         formatter: function (iAppCount) {
            //             return (iAppCount !== 0);
            //         }
            //     }
            // }).addStyleClass("sapUshellHistoryScreenRecentApps");

            // recent searches

            oListSearches = new sap.m.List({
                inset : false,
                showSeparators : sap.m.ListSeparators.Inner,
                visible: {
                    path: "/searches/length",
                    formatter: function (recentSearchCount) {
                        return (recentSearchCount !== 0);
                    }
                }
            }).addStyleClass("sapUshellHistoryScreenRecentSearches");

            oListSearches.bindAggregation("items", "/searches", function (path, bData) {
                
                var oSearchItemTemplate = new sap.m.StandardListItem({
                    title: {
                        parts: ["sTerm", "oDataSource/objectName/value", "oDataSource"],
                        formatter: function (sTerm, sObjectNameValue, oDataSource) {
                            if (sObjectNameValue === "$$ALL$$") {
                                return sTerm;
                            }
                            if (!oDataSource) return sTerm;
                            var dsLabel = oDataSource.label || oDataSource.objectName.label || oDataSource.objectName.value;

                            return sTerm + (dsLabel ? ", " + dsLabel : "");
                        }
                    },
                    type: "Active"
                });
                oSearchItemTemplate.data("sSearchTerm", "{sTerm}");
    //            oSearchItemTemplate.data("sObjectNameValue", "{oObjectName/value}");
    //            oSearchItemTemplate.data("sObjectNameLabel", "{oObjectName/label}");
                oSearchItemTemplate.data("oDataSource", "{oDataSource}");
                oSearchItemTemplate.onAfterRendering = function(){
                    $(this.getDomRef()).click(function (){
                        // oController.searchAgain();
                        self.getModel("searchModel").setDataSource(bData.getObject().oDataSource,false);
                        self.getModel("searchModel").setSearchTerm(bData.getObject().sTerm, false);
                    	window.location.href = "#Action-search&/searchTerm=" + encodeURI(self.getModel("searchModel").getProperty("/searchBoxTerm")) + "&dataSource=" + encodeURI(JSON.stringify(self.getModel("searchModel").getDataSourceJson()));
                        if (self.viewSwitcher) 
                        	self.viewSwitcher.switchViewState("searchResults");
                    });
                    $(this.getDomRef()).keyup(function(event){
                        if(event.keyCode == 13){
                        	this.click();
                        }
                    });
                };

                return oSearchItemTemplate;

            });
            this.searchLayout = new SearchLayout({
                bottomHeader: {
                    parts: ["/searches/length", "i18n>recent_searches"],
                    formatter: function (iSearchCount, sLabel) {
                        return iSearchCount !== 0 ? sLabel : undefined;
                    }
                },
                bottomList: oListSearches,
                topHeader: {
                    parts: ["/dataSources/length", "i18n>searchIn"],
                    formatter: function (dsCount, sLabel) {
                        return dsCount !== 0 ? sLabel : undefined;
                    }
                },
                topList: self.oRecentDataSources,
                searchBusy : true
            });

            var sfId = "sfOverlay";
            if (self.getViewData()!==undefined && self.getViewData().sf!==undefined) 
            	sfId = self.getViewData().sf;
            sap.ui.getCore().byId(sfId).addEventDelegate({
                onsapdown: function (oEvent) {
                        self.oRecentDataSources.focus();

                        oEvent.preventDefault();
                        oEvent.stopPropagation();
                }
            });
            
            return this.searchLayout;
        },

        dsRequestFinished: function () {
            this.searchLayout.setSearchBusy(false);
        },

        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.search.HistoryScreen";
        }
    });
}());

}; // end of sap/ushell/renderers/fiori2/search/HistoryScreen.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.Search.controller') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.Search.controller');
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, console */

    
    
    /**
     * @name "sap.ushell.renderers.fiori2.SearchController
     * @extends sap.ui.core.mvc.Controller
     * @public
     */
    sap.ui.controller("sap.ushell.renderers.fiori2.search.Search", {

        /**
         * SAPUI5 lifecycle hook.
         * @public
         */
        onInit: function () {
            var self = this;

            // var searchModel = new sap.ushell.renderers.fiori2.search.SearchModel();
            // searchModel.searchInit();
            // self.getView().setModel(searchModel);
            // searchModel.attachRequestSent(function(oControlEvent){
            //     self.getView().onSearchStarted();
            // });
            // searchModel.attachRequestFailed(function(oControlEvent){
            //     self.getView().onSearchFailed();
            // });
            // searchModel.attachRequestCompleted(function(oControlEvent){
            //     self.getView().onSearchFinished(oControlEvent);
            // });
            // sap.ui.getCore().getEventBus().subscribe("search", searchModel._searchInvoked, searchModel);
        },

        onExit: function () {
            var self = this;
            // sap.ui.getCore().getEventBus().unsubscribe("search", self.getView().getModel()._searchInvoked, self.getView().getModel());
            sap.ui.getCore().getEventBus().unsubscribe("appSearchFinished", self.getView().appSearchFinished, self.getView());
            sap.ui.getCore().getEventBus().unsubscribe("searchFinished", self.getView().onSearchFinished, self.getView());
            sap.ui.getCore().getEventBus().unsubscribe("searchStarted",  self.getView().onAllSearchStarted, self.getView());
            sap.ui.getCore().getEventBus().unsubscribe("allSearchFinished",  self.getView().onAllSearchFinished, self.getView());
        },


        
    });
}());

}; // end of sap/ushell/renderers/fiori2/search/Search.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.Search.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.Search.view');
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview
 *
 * @version
 */
(function (global) {
    "use strict";
    /* global jQuery, sap, console, SearchLayout, SearchResultListWithDetail,
    SearchResultListItem, SearchResultListItemFooter, SearchResultListItemDetail */

    
    
    
    
    

    sap.ui.jsview("sap.ushell.renderers.fiori2.search.Search", {

        // create content
        // ===================================================================
        createContent: function(oController) {
            var self = this;

            var listProperties = {
                growing: true,
                threshold: 2,
                inset: false,
                showUnread: true,
                width: "auto",
                showNoData: false
            };
            
            sap.ui.getCore().getEventBus().subscribe("appSearchFinished", self.appSearchFinished, self);
            sap.ui.getCore().getEventBus().subscribe("searchFinished", self.onSearchFinished, self);
            sap.ui.getCore().getEventBus().subscribe("searchStarted",  self.onAllSearchStarted, self);
            sap.ui.getCore().getEventBus().subscribe("allSearchFinished",  self.onAllSearchFinished, self);


            self.resultList = new sap.m.List(listProperties);
            self.resultList.setGrowingThreshold(2000);
            self.resultList.bindAggregation("items", "/results", function (path, bData) {
                return self.assembleListItem(bData);
            });

            self.appSearchResult = self.assembleAppSearch();

            self.resultListWithDetail = new SearchResultListWithDetail({
                resultList: self.resultList
            });
            
            if (sap.ui.getCore().getModel("searchModel").isNormalSearchEnable()){
                self.showBottomList = true;
            }
            else {
            	self.showBottomList = false;
            }

            // self.facets = self.assembleFacets();

            self.searchLayout = new SearchLayout({
                showMainHeader:true,
                searchTerm: sap.ushell.resources.i18n.getText(""),
                topHeader: '{i18n>apps}',
                topList: self.appSearchResult,
                bottomHeader: sap.ushell.resources.i18n.getText("business_objects"),
                bottomHeaderIsUnspecific: true,
                bottomList: self.resultListWithDetail,
                facets: self.facets,
                searchBusy: false,
                showBottomList: self.showBottomList
            });
            
            self.searchContainer = new sap.search.DivContainer({
                content: self.searchLayout,
                cssClass : 'searchContainer'
            });

            return self.searchContainer;

        },

        // app search area
        // ===================================================================
        assembleAppSearch: function(){
            var self = this;
            var oTilesContainer = new sap.ushell.ui.launchpad.SearchResultApps({
                showNoData: false,
                growing: true,
                growingThreshold: 2,
                growingTriggerText: {path: "i18n>showMore"},
                results: {
                    path : "/tiles",
                    template : new sap.ushell.ui.launchpad.SearchResultAppItem({
                        icon: "{icon}",
                        text: "{title}",
                        targetUrl: "{url}"
                    })
                }
            });
            // oTilesContainer.addStyleClass("appSearchContent");
            this.oTilesContainer = oTilesContainer;



            var appSearchResult = new sap.search.DivContainer({
                content: [oTilesContainer],
                cssClass : 'appSearchResults'
            });
            // appSearchResult.addStyleClass('appSearchResults');

            // var oOpenCatalogLink = new sap.m.Link({
            //     text: "{i18n>open_catalog}",
            //     press: function () {
            //         sap.ui.getCore().getEventBus().publish("openCatalog", {
            //             groupContext: null
            //         });
            //     }
            // });

            // appSearchResult.addItem(oOpenCatalogLink);
            // oOpenCatalogLink.addStyleClass("catalogLink");

            return appSearchResult;
            //**************************************************** APP SEARCH END

        },

        _assembleDataSourceFacetList : function(){
            var self = this;

            var createFacetFilterItem = function(){
                var item = new sap.m.FacetFilterItem({
                            text: "{text}",
                            key: "{id}",
                            count: "{count}",
                            selected: "{selected}"
                            });
                item.data("dataSource","{dataSource}");
                return item;
            };

            var oJsonModel = new sap.ui.model.json.JSONModel({
                values : self.getModel().getDataSources()
            });

            var dataSourceList = new sap.m.FacetFilterList( {
                    title: "All Categories",
                    multiSelect: false,
                    allCount: self.getModel().getProperty("/count"),
                    items: {
                        path: "/values",
                        template: createFacetFilterItem()
                    },  
                    listClose: function(){
                        if(this.getSelectedItems()&&this.getSelectedItems().length>0){
                            var newDS = this.getSelectedItems()[0].data("dataSource");
                            self.getModel().setDataSource(newDS);
                            self.getModel().resetAttributeFacets(false);
                            self.getModel().resetFilterConditions();
                        }
                    }
            });
            dataSourceList.setModel(oJsonModel);
            return dataSourceList;
        },

        _assembleAttributeFacetList : function(facet){
            var self = this;

            var createFacetFilterItem = function(){
                var item = new sap.m.FacetFilterItem({
                            text: "{text}",
                            count: "{count}",
                            selected: "{selected}"
                            });
                item.data("filterCondition","{filterCondition}");
                return item;
            };

            var oJsonModel = new sap.ui.model.json.JSONModel({
                values : facet.items
            });

            var attributeFacetList = new sap.m.FacetFilterList( {
                    title: facet.title,
                    multiSelect: true,
                    allCount: facet.allCount,
                    items: {
                        path: "/values",
                        template: createFacetFilterItem()
                    },  
                    listClose: function(){
                        if(this.getSelectedItems()){
                            for (var i = 0, len = this.getSelectedItems().length; i < len; i++) {
                                var item = this.getSelectedItems()[i].data("filterCondition");
                                if(item.attribute&&item.operator&&item.value){
                                    self.getModel().addFilterCondition(item.attribute,item.operator,item.value,false);
                                }
                                else if(item.conditions){
                                    self.getModel().addFilterConditionGroup(item,false);       
                                }
                            }
                            // self.getModel().getProperty("/facets/attributes").push(this.data("facet"));
                            self.getModel()._searchFireQuery();
                        }
                    }
            });
            attributeFacetList.data("facet",facet);
            attributeFacetList.setModel(oJsonModel);
            return attributeFacetList;
        },

        // assemble facets
        // ===================================================================
        assembleFacets : function(){
            var self = this;
            if(self.getModel()){

                var dataSourceList = self._assembleDataSourceFacetList();
                var lists = [dataSourceList];
                for (var i = 0, len = self.getModel().getProperty("/facets/attributes").length; i < len; i++) {
                    var facet = self.getModel().getProperty("/facets/attributes")[i];
                    var list = self._assembleAttributeFacetList(facet);
                    lists.push(list);
                }
                var searchFilter = new sap.m.FacetFilter({
                    lists : lists,
                    reset : function(){
                        self.getModel().resetAttributeFacets(false);
                        self.getModel().resetFilterConditions(false);
                        self.getModel().resetDataSources(false);
                        self.getModel().resetDataSource();
                    } 
                });
                if(self.searchLayout){
                    self.searchLayout.setFacets(searchFilter);
                }
                return searchFilter;
            }
            
        },


        // assemble title item
        // ===================================================================
        assembleTitleItem: function (oData) {
            var item = new sap.m.CustomListItem();
            var title = new sap.m.Label({
                text: "{title}"
            });
            title.addStyleClass('bucketTitle');
            item.addStyleClass('bucketTitleContainer');
            item.addContent(new sap.m.HBox({
                items: [title]
            }));
            return item;
        },

        // assemble footer item
        // ===================================================================
        assembleFooterItem: function (oData) {
            var self = this;

            self.footerItem = new SearchResultListItemFooter({
                text : "{i18n>showMore}",
                showMore: function(){
                    var newSkip = self.getModel().getSkip()+10;
                    self.getModel().setSkip(newSkip);
                }
            });
            return self.footerItem;
        },

        // assemble result list item
        // ===================================================================
        assembleResultListItem: function(oData, path){
            var self = this;
            var item = new SearchResultListItem({
                title: "{$$Name$$}",
                titleUrl: "{uri}",
                type: "{dataSourceName}",
                imageUrl: "{imageUrl}",
                data: oData,
                visibleAttributes: 3,
                navigate: function(){
                    // alert("navigate event received from control");
                },
                previewOpen: function(){
                    self.selectItem(item, oData, path);
                    // self.searchLayout.setRightPaneStatus('preview');
                },
                previewClose: function(){
                    // self.hideDetail(this);
                    // self.showApps();
                    // self.selectedPath = null;

                    // if(this.selectedItem){
                    //     this.selectedItem.setStatus("closed");
                    // }
                }
            });
            
            
            // allow <b> in title and attributes
            item.addEventDelegate({                	                	
            	onAfterRendering: function(){
//            		var self = this;
            		$(this.getDomRef()).find(".searchResultListItem-main").bind('click', this.fireNavigate(this.getTitleUrl()));
            		this.setSafeText(
            				$(this.getDomRef()).find(".searchResultListItem-title, .searchResultListItem-attribute-value, .searchResultListItem-type"));                		
            	}
            }, item);

            if (self.selectedPath === path) // Saved path
            {
                // item.setStatus("open");
                // self.selectedItem = item;
                self.selectItem(item, oData, path);
            }

            return item;
        },


        selectItem: function(item, oData, path){
            var self = this;
            if (item === self.selectedItem)
            {
                return;
            }
            self.selectedPath = path;
            self.getModel().setProperty("/detail/title", oData ? oData.$$Name$$ : undefined);
            self.getModel().setProperty("/detail/titleUrl", oData ? oData.uri : undefined);
            self.getModel().setProperty("/detail/type", oData ? oData.dataSourceName : undefined);
            self.getModel().setProperty("/detail/data", oData);
            self.resultListWithDetail.setPreview(self.assembleDetail());
            if (item){
                item.setStatus("open");
            }

            if(self.selectedItem){
                self.selectedItem.setStatus("closed");
            }
            self.selectedItem = item;

        },

        assembleDetail: function(){
            var self = this;
            var detail = new SearchResultListItemDetail({
                headerLabel: "{i18n>more_information_on}",
                itemTitle: {path: "/detail/title"},
                itemTitleUrl: "{/detail/titleUrl}",
                itemType: "{/detail/type}",
                itemData: "{/detail/data}",
                firstDetailAttribute: 4,
                maxDetailAttributes: 8
            });
     
            // allow <b> in title and attributes
            detail.addEventDelegate({                	                	
            	onAfterRendering: function(){
//            		var self = this;
            		//$(this.getDomRef()).find(".searchResultListItem-main").bind('click', this.fireNavigate(this.getTitleUrl()));
            		this.setSafeText(
            				$(this.getDomRef()).find(".searchResultListItemDetail-title, .searchResultListItemDetail-attribute-value"));                		
            	}
            }, detail);
            
            return detail;
        },

//        _setSafeText: function(objs) {
//            objs.each(function(i,d) {
//                var $d = $(d);
//                var s = $d.text().replace(/<b>/gi, '').replace(/<\/b>/gi, '');  /// Only those two HTML tags are allowed.
//                if (s.indexOf('<') === -1) {
//                    $d.html($d.text());
//                }
//                //emphasize whyfound in case of ellipsis
//                var posOfWhyfound = $d.html().indexOf("<b>");
//                if (posOfWhyfound>-1 && d.offsetWidth < d.scrollWidth) {
//                    var emphasizeWhyfound = "..." + $d.html().substring(posOfWhyfound);
//                    $d.html(emphasizeWhyfound);                    
//                }
//            });
//        },
        
        // assemble list item
        // ===================================================================
        assembleListItem: function (bData) {
            var self = this;
            var oData = bData.getObject();
            if (oData.type === 'title') {
                return self.assembleTitleItem(oData);
            } else if (oData.type === 'footer') {
                return self.assembleFooterItem(oData);
            } else {
                return self.assembleResultListItem(oData, bData.getPath());
            }
        },

        onAllSearchStarted: function (){
            var self = this;
            if(self.getModel().getProperty("/isResultAppended")){
                self.footerItem.setShowSpinner(true);
                return;
            }

            this.searchLayout.setEnableNoResults(false);

//            self.resultList.setBusy(true);
//            if (self.viewSwitcher) {
//            	self.viewSwitcher.switchViewState("searchResults");
//            }
            self.searchLayout.setSearchBusy(true);
            
            //self.searchLayout.setBottomCount(0);
            if(self.selectedItem){
                self.selectedItem.setStatus("closed");
                if(self.resultListWithDetail.getPreview()){
                    self.resultListWithDetail.getPreview().destroy();
                }
            }
            this.selectedPath = null;
            this.oTilesContainer.resetGrowing();

            self.searchLayout.setBottomList(self.resultListWithDetail);


        },

        onAllSearchFinished: function () {
        	
        	this.searchLayout.setSearchTerm(this.getModel().getSearchTerm());
            this.searchLayout.setEnableNoResults(true);
            this.searchLayout.setSearchBusy(false);
            
        },

        onSearchFinished: function () {
            var self = this;
            var oSearchModel = this.getModel();
            if(self.getModel().getProperty("/isResultAppended")){
                self.footerItem.setShowSpinner(false);
                return;
            }
            // self.facets = self.assembleFacets();

            self.searchLayout.setSearchTerm(self.getModel().getSearchTerm());
            self.searchLayout.setBottomCount(self.getModel().getProperty("/count"));

            var dataSource = oSearchModel.getDataSource();
            var bottomLabel = this.getModel().getProperty('/dataSourceName');
            // if (dataSource)
            // {
            //     bottomLabel = dataSource.label;
            // }else{
            //     bottomLabel = sap.ushell.resources.i18n.getText("others");
            // }

            // self.searchLayout.setBottomHeader( || 'Others');

            if (!dataSource || dataSource.objectName.value.toLowerCase() === '$$all$$' )
            {
                self.searchLayout.setBottomHeaderIsUnspecific(true);
                self.searchLayout.setBottomHeader(sap.ushell.resources.i18n.getText("business_objects") );
                // self.searchLayout.setBottomCount(result.resultset.getSearchResultSet().totalcount);
            }else{
                self.searchLayout.setBottomHeaderIsUnspecific(false);
                self.searchLayout.setBottomHeader(bottomLabel);
            }


            var items = self.resultList.getItems();
            
            // test for focus
//          var sf = sap.ui.getCore().byId("sfOverlay").getFocusDomRef();
//          var sr = sap.ui.getCore().byId("searchResultsView").getDomRef();
////          $(sf).find('input').change(function(){$(sr).hide();});
//          $(sf).find('input').change(alert('haha');});
//          $(sf).focusout(function(){$(sr).show();});
            
            if (self.getModel().getProperty("/count") !== 0 && !self.getModel().getProperty("/isResultAppended"))
            {
                self.searchLayout.setBottomList(self.resultListWithDetail);
                // items[0].setStatus("open");
                var path = '/results/0'; // First item
                self.selectItem(items[0], this.getModel().getProperty(path), path); // sets the detail
            }else{
                // self.resultListWithDetail.setPreview(undefined);
                // self.searchLayout.setBottomList(undefined);
            }

//            if (self.viewSwitcher) {
//            	self.viewSwitcher.switchViewState("searchResults");
//            }
            sap.ui.getCore().getEventBus().publish("closeCurtain");
            
        },

        onSearchFailed : function(){
            var self = this;
            if(self.getModel().getProperty("/isResultAppended")){
                self.footerItem.setShowSpinner(false);
                return;
            }
            
            self.searchLayout.setSearchBusy(false);

        },

        appSearchFinished : function (bla, blub, oResult) {
            var self = this;
            var searchTerm = self.getModel().getSearchTerm();
            // if (searchTerm) { // HIGHLIGHTING!!
            //     var tiles = self.oTilesContainer.getTiles();
            //     var baseTitleElem;
            //     var regexObj = new RegExp('(' + searchTerm.replace(/[^A-Za-z0-9;]/g, "") + ')', "gi");
            //     for (var k=0; k<tiles.length; k++) {
            //         baseTitleElem = $(tiles[k].getDomRef()).find('.sapUshellTileBaseTitle');
            //         if (baseTitleElem && baseTitleElem.html()) {
            //             baseTitleElem.html(baseTitleElem.html().replace(regexObj, '<b>$1</b>'));
            //         }
            //     }
            // }
            if (!oResult.totalResults || oResult.totalResults === 0)
            {
                self.appsFound = false;
                self.searchLayout.setTopCount(oResult.totalResults);
                self.searchLayout.setTopList(undefined);
            }else{
                self.appsFound = true;
                self.searchLayout.setTopCount(oResult.totalResults);
                self.searchLayout.setTopList(self.appSearchResult);
            }

        },

        // onResultItemsChanged: function(){
        //     var self = this;
        //     self.resultList.setBusy(false);
        // },

        // startLoading: function () {
        //     // this.searchLayout.addStyleClass('loading');
        // },

        // finishLoading: function () {
        //     // this.searchLayout.removeStyleClass('loading');
        // },

        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.search.Search";
        }

    });

    // =======================================================================
    // UI5 Helper Methods
    // =======================================================================

    sap.ui.core.Control.extend("sap.search.DivLayout", {
        metadata : {
            aggregations: {
                content: {singularName: "content", multiple:true } // default type is "sap.ui.core.Control", multiple is "true"
            }
        },

        renderer : function(oRm, oControl) {      // the part creating the HTML

            var aChildren = oControl.getContent();
            for (var i = 0; i < aChildren.length; i++) { // loop over all child Controls,
                                                       // render the colored box around them
                oRm.renderControl(aChildren[i]);   // render the child Controls
            }

        }
    });


    sap.ui.core.Control.extend("sap.search.DivContainer", {      // call the new Control type "my.Hello"
                                                  // and let it inherit from sap.ui.core.Control
        metadata : {                              // the Control API
            properties : {
                "cssClass" : "string"
            },
            aggregations: {
               "content": {singularName: "content", multiple:true } // default type is "sap.ui.core.Control", multiple is "true"
            },
        },

        renderer : function(oRm, oControl) {      // the part creating the HTML
            oRm.write('<div');
            oRm.writeControlData(oControl);  // writes the Control ID
            oRm.addClass(oControl.getCssClass());
            oRm.writeClasses();
            oRm.write('>');
            var aChildren = oControl.getContent();
            for (var i = 0; i < aChildren.length; i++) { // loop over all child Controls,
                oRm.renderControl(aChildren[i]);   // render the child Controls
            }
            oRm.write('</div>');
        }
    });


}(window));

}; // end of sap/ushell/renderers/fiori2/search/Search.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.SearchSuggestions.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchSuggestions.view');
//Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, setTimeout */

    
    
    

    sap.ui.jsview("sap.ushell.renderers.fiori2.search.SearchSuggestions", {
        createContent: function (oController) {
            var self = this;
            var dataSourceSection = new sapUshellSuggestSection();
            var suggestSection = new sapUshellSuggestSection();
            var appSection = new sapUshellSuggestSection();

            self.suggestList =  new sapUshellSuggestionList({
                sections : [dataSourceSection, suggestSection, appSection]
            });
            self.suggestList.addStyleClass('sapUshellSearchSuggestionList');

            var sfId = "sfOverlay";
            if (self.getViewData().sf!==undefined) 
            	sfId = self.getViewData().sf;
            sap.ui.getCore().byId(sfId).addEventDelegate({
                onsapdown: function (oEvent) {
                    // if (self.suggestList.getItems().length > 0) {
                        // self.suggestList.setDisableKeyboardNavigation(false);
                        self.suggestList.focus();

                        oEvent.preventDefault();
                        oEvent.stopPropagation();
                    // }
                },
                onsapescape: function (oEvent) {
                    oController.closeSuggestions();

                    oEvent.preventDefault();
                    oEvent.stopPropagation();
                }
            });

            var buildHeader = function(){
                return new sap.m.GroupHeaderListItem ({
                    title : "{title}"
                }).addStyleClass ('sapUshellSuggestHeader');
            };

            var buildFooter = function(){
                return new sap.m.CustomListItem({
                    type:sap.m.ListType.Inactive,
                    content: [new sap.m.Label({text: "{text}"}).addStyleClass ('sapUshellSuggestEnter')]
                });
            };

            var onEnter = function(item, callback){

                var oldAfterRendering = item.onAfterRendering;

                item.onAfterRendering = function(){
                    if (oldAfterRendering) oldAfterRendering.apply(this, arguments);
                    var domref = $(this.getDomRef());
                    domref.keypress(function(e) {
                        if (e.which === 13) {
                            callback();
                        }
                    });
                };
                
            };

            var onClick = function(item, callback){

                item.addEventDelegate({
                    onclick: function (oEvent) {
                        callback(oEvent);
                        oEvent.stopImmediatePropagation();
                        oEvent.stopPropagation();
                    },
                    ontouch: function (oEvent) {
                        callback(oEvent);
                        oEvent.stopImmediatePropagation();
                        oEvent.stopPropagation();
                    }
                });

                
            };
            
            var newSearch = function(searchterm, datasource){
                if (searchterm) 
                    self.getModel().setSearchTerm(searchterm, false);
                    
                if (datasource)
                    self.getModel().setDataSource(datasource, false);

//                self.getModel()._searchFireQuery();
                window.location.href = "#Action-search&/searchTerm=" + encodeURI(self.getModel().getProperty("/searchBoxTerm")) + "&dataSource=" + encodeURI(JSON.stringify(self.getModel().getDataSourceJson()));
                if (self.viewSwitcher) 
                	self.viewSwitcher.switchViewState("searchResults");
            };

            var getNewDS = function(objectName, objectNameLabel){
                return {
                    objectName: {
                        value: objectName,
                        label: objectNameLabel
                    }, 
                    packageName: { label: "", value: "" },
                    schemaName: { label: "", value: "" }
                };
            };

            var dataSourceSelected = function(datasource){
                self.getModel().setDataSource(datasource, false);
                self.getModel().setProperty("/searchBoxTerm", "");
                self.getModel().doSuggestion();
            };

            dataSourceSection.bindAggregation("items", "/dataSourceSection", function (path, bData) {
                if(bData.getObject().isTitle)
                    return buildHeader();
                 

                var suggestDSSelected = function(){
                    var ds = getNewDS(bData.getObject().labelRaw, bData.getObject().label);
                    // dataSourceSelected(ds);
                    self.getModel().setDataSource(ds, false);
                    self.getModel().setProperty("/searchBoxTerm", "");

                    self.searchfield.focus();
                };
                var listItem =  new sap.m.CustomListItem({
                    type:sap.m.ListType.Active,
                    content: [
                        new sap.ushell.renderers.fiori2.search.DataSourcePill({
                            dataSourceName: "{dataSourceLabel}",
                            press: function(){
                                suggestDSSelected();
                            }
                        }).addStyleClass ('sapUshellSuggestDataSource').addStyleClass('sapUshellSearchSuggestionNavItem')
                    ],
                    press: function(){
                        suggestDSSelected();
                    }
                }).addStyleClass ('sapUshellSuggestListItem');

                onEnter(listItem, function(){
                    suggestDSSelected();
                });

                return listItem;
            });



            suggestSection.bindAggregation("items", "/suggestSection", function (path, bData) {
                if(bData.getObject().isTitle)
                    return buildHeader();

                if(bData.getObject().isFooter)
                    return buildFooter();
                
                var left = new sap.m.Link({text: "{label}"
                }).addStyleClass ('sapUshellSuggestText').addStyleClass('sapUshellSearchSuggestionNavItem');

//                left.onAfterRendering = function(){
//                    self.bTagUnescaper(this.getDomRef());
//                };
                
                left.addEventDelegate({                	                	
                	onAfterRendering: function(){
                        self.bTagUnescaper(this.getDomRef());                		
                	}
                }, left);

                onClick(left, function(){
                    newSearch(bData.getObject().labelRaw);
                    // event.stopPropagation();
                });


                var dataSource = new sap.ushell.renderers.fiori2.search.DataSourcePill({
                    dataSourceName: "{dataSourceLabel}"
                }).addStyleClass ('sapUshellSuggestDataSourceRight').addStyleClass ('sapUshellSuggestDataSource').addStyleClass('sapUshellSearchSuggestionNavItem');

                var content = [left];
                if (bData.getObject().dataSourceLabel)
                    content.push(dataSource);

                var listItem =  new sap.m.CustomListItem({
                    type:sap.m.ListType.Active,
                    content: content
                }).addStyleClass ('sapUshellSuggestListItem');

                onClick(listItem, function(){
                    newSearch(bData.getObject().labelRaw, bData.getObject().dataSource);
                });

                onEnter(left, function(){
                    newSearch(bData.getObject().labelRaw);
                });
                onEnter(dataSource, function(){
                    // dataSourceSelected(bData.getObject().dataSource);
                    newSearch(bData.getObject().labelRaw, bData.getObject().dataSource);
                });

                return listItem;

            });

            appSection.bindAggregation("items", "/appSection", function (path, bData) {
                if(bData.getObject().isTitle){
                    return buildHeader();
                }
                // var listItem = new sap.m.DisplayListItem ({
                //     type:sap.m.ListType.Active,
                //     label: "{label}",
                //     press: function(){
                //         window.location = bData.getObject().targetURL;
                //     }
                // });

                var appSelected = function(){
                    if (bData.getObject().targetURL) {
                        window.location = bData.getObject().targetURL;
                    }else{

                        jQuery.sap.require("sap.ca.ui.message.message");
                        sap.ca.ui.message.showMessageBox({
                            type: sap.ca.ui.message.Type.ERROR,
                            message: sap.ushell.resources.i18n.getText("noappurl"),
                            details: ""
                        });

                    }
                };

                var label = new sap.m.Link({
                    text: "{label}",
                    press: appSelected
                }).addStyleClass ('sapUshellSuggestText').addStyleClass('sapUshellSearchSuggestionNavItem');

                var icon = new sap.ui.core.Icon ({
                    src: bData.getObject().icon
                }).addStyleClass('sapUshellSuggestIcon');
                var listItem =  new sap.m.CustomListItem({
                    type:sap.m.ListType.Active,
                    content: [icon,label],
                    press: appSelected
                }).addStyleClass ('sapUshellSuggestListItem');

//                label.onAfterRendering = function(){
//                    self.bTagUnescaper(this.getDomRef());
//                };

                label.addEventDelegate({                	                	
                	onAfterRendering: function(){
                        self.bTagUnescaper(this.getDomRef());                		
                	}
                }, label);
                
                onEnter(listItem, appSelected);

                return listItem;

            });


            return self.suggestList;

        },

        bTagUnescaper: function (domref) {
            var innerhtml = domref.innerHTML;
            while( innerhtml.indexOf('&lt;b&gt;')+innerhtml.indexOf('&lt;/b&gt;') >= -1  ){ // while these tags are found
                innerhtml = innerhtml.replace('&lt;b&gt;', '<b>');
                innerhtml = innerhtml.replace('&lt;/b&gt;', '</b>');
            }
            
            domref.innerHTML = innerhtml;
            
        },


        focusSearchfield: function (oEvent) {
            sap.ui.getCore().byId("sfOverlay").focus();
        },

        onAfterRendering: function () {
            // if (!this.getModel("suggestions").getProperty("/visible")) {
            //     this.hideSuggestions();
            // }
        },

        hideSuggestions: function () {
            //this.$().slideUp(200);
        },

        showSuggestions: function () {
            this.$().slideDown(200);
            if (this.getParent() && this.getParent().scrollTo) {
                this.getParent().scrollTo(0);
            } else {
                this.$().parent().scrollTop(0);
            }
        },

        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.search.SearchSuggestions";
        }
    });
}());

}; // end of sap/ushell/renderers/fiori2/search/SearchSuggestions.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.Container') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The Unified Shell's container which manages renderers, services, and adapters.
 *
 * @version 1.24.5
 */
/**
 * @namespace Namespace for Unified Shell.
 *
 * @name sap.ushell
 * @see sap.ushell.adapters
 * @see sap.ushell.renderers
 * @see sap.ushell.services
 * @since 1.15.0
 * @public
 */
/**
 * @namespace Default namespace for Unified Shell adapters. Note that there should be subordinate
 * namespaces per platform, for example <code>sap.ushell.adapters.abap</code> or
 * <code>sap.ushell.adapters.demo</code>.
 *
 * @name sap.ushell.adapters
 * @see sap.ushell.adapters.abap
 * @see sap.ushell.adapters.demo
 * @since 1.15.0
 * @public
 */
/**
 * @namespace Default namespace for Unified Shell renderers. Note that there should be subordinate
 * namespaces per renderer, for example <code>sap.ushell.renderers.standard</code>.
 *
 * @name sap.ushell.renderers
 * @see sap.ushell.renderers.standard
 * @since 1.15.0
 * @public
 */
/**
 * @namespace Default namespace for Unified Shell services. They can usually be placed directly
 * into this namespace, for example <code>sap.ushell.services.Container</code>.
 *
 * @name sap.ushell.services
 * @see sap.ushell.services.Container
 * @since 1.15.0
 * @public
 */
(function () {
    "use strict";
    /*global close, document, jQuery, localStorage, OData, sap, setTimeout, window */
    jQuery.sap.declare("sap.ushell.services.Container");

    
    

        // The configuration as read from window["sap-ushell-config"]
    var oConfig,
        sDIRTY_STATE_PREFIX = "sap.ushell.Container.dirtyState.",
        // Map with platform specific packages for the service adapters. This map is passed in
        // bootstrap and is valid for the given logon platform
        mPlatformPackages;

    /*
     * Try to close window.
     * Note: Most browsers do NOT allow closing windows by JS if they were opened manually.
     *
     */
    sap.ushell.utils.testPublishAt(sap.ushell.services);
    function closeWindow() {
        close();
    }

    /*
     * Redirect window to something other than "/sap/public/bc/icf/logoff".
     */
    sap.ushell.utils.testPublishAt(sap.ushell.services);
    function redirectWindow() {
        // TODO:
        // Here we should provide a dedicated web page telling the user that he is logged out
        document.location = "about:blank";
    }

    /*
     * Getter for <code>localStorage</code> to facilitate testing.
     *
     * @returns {Storage}
     *   the local storage instance
     */
    sap.ushell.utils.testPublishAt(sap.ushell.services);
    function getLocalStorage() {
        return localStorage;
    }

    /*
     * Gets the platform specific package of the adapters.
     * @param {string} sPlatform
     *     the platform
     * @returns {string}
     */
    function getPlatformPackage(sPlatform) {
        if (mPlatformPackages && mPlatformPackages[sPlatform]) {
            return mPlatformPackages[sPlatform];
        }
        return "sap.ushell.adapters." + sPlatform;
    }

    /**
     * Gets the service configuration from window["sap-ushell-config"].services[sServiceName].
     * Ensures to return an object.
     *
     * @param {string} sServiceName
     *    the service name
     * @returns {object}
     */
    function getServiceConfig(sServiceName) {
        return (oConfig.services && oConfig.services[sServiceName]) || {};
    }

    /**
     * Creates an adapter. Loads the adapter module if necessary. The resulting module name is
     * <code>"sap.ushell.adapters." + oSystem.platform + "." + sName + "Adapter"</code> unless
     * configured differently.
     *
     * @param {string} sName
     *     the service name
     * @param {sap.ushell.System} oSystem
     *     the target system
     * @param {string} [sParameter]
     *     a parameter which is passed to the constructor (since 1.15.0)
     * @returns {object}
     *     the adapter
     */
    function createAdapter(sName, oSystem, sParameter) {
        var oAdapterConfig = getServiceConfig(sName).adapter || {},
            sAdapterName = oAdapterConfig.module
                || getPlatformPackage(oSystem.getPlatform()) + "." + sName + "Adapter";
        jQuery.sap.require(sAdapterName);
        return new (jQuery.sap.getObject(sAdapterName))(oSystem, sParameter,
            {config: oAdapterConfig.config || {}});
    }

    /**
     * @class The Unified Shell's container which manages renderers, services, and adapters.
     *
     * @name sap.ushell.services.Container
     * @see sap.ushell.bootstrap
     * @since 1.15.0
     * @public
     */
    /**
     * Constructs a new Unified Shell container for the given container adapter.
     *
     * @param {object} oAdapter
     *     the platform-specific adapter corresponding to this service
     *
     * @private
     * @since 1.15.0
     */
    function Container(oAdapter) {
        var oLogoutEventProvider = new sap.ui.base.EventProvider(),
            sRemoteSystemPrefix = "sap.ushell.Container." + oAdapter.getSystem().getPlatform()
                    + ".remoteSystem.",
            mRemoteSystems = {},
            oGlobalDirtyDeferred,
            fnStorageEventListener,
            oLocalStorage = getLocalStorage(),
            mServicesByName = new sap.ushell.utils.Map(),
            sSessionTerminationKey = "sap.ushell.Container." + oAdapter.getSystem().getPlatform()
                    + ".sessionTermination",
            that = this;

        // BEWARE: constructor code below!

        /**
         * Cancels the logon procedure in the current frame, if any. This MUST be used by the
         * logon frame provider in case the user wants to close the logon frame for good.
         * It will report "Authentication cancelled" and let all pending requests for the current
         * realm fail. As a side-effect, it also calls <code>destroy</code> on the logon frame
         * provider.
         *
         * @methodOf sap.ushell.services.Container#
         * @name cancelLogon
         * @since 1.21.2
         * @public
         * @see sap.ushell.services.Container#setLogonFrameProvider
         */
        this.cancelLogon = function () {
            if (this.oFrameLogonManager) {
                this.oFrameLogonManager.cancelLogon();
            }
        };

        /**
         * Creates a new renderer instance for the given renderer name.
         * <p>
         * Names without a dot are interpreted as package names within the default naming convention
         * and will be expanded to
         * <code>"sap.ushell.renderers." + sRendererName + ".Renderer"</code>.
         * Names containing a dot are used "as is".
         * <p>
         * The resulting name must point to a SAPUI5 object which is first required and then
         * created (constructor call without arguments).
         * The object must be either a control (i.e. extend <code>sap.ui.core.Control</code>) or a
         * UI component (i.e. extend <code>sap.ui.core.UIComponent</code>), which is then
         * automatically wrapped into a <code>sap.ui.core.ComponentContainer</code> control by this
         * method. This <code>sap.ui.core.ComponentContainer</code> is created with
         * <code>height</code> and <code>width</code> set to "100%" to accommodate the complete
         * available space.
         * <p>
         * The returned renderer is supposed to be added to a direct child (for example
         * <code>DIV</code>) of the <code>BODY</code> of the page and there should be no other
         * parts of the page consuming space outside the renderer.
         * Use CSS class <code>sapUShellFullHeight</code> at <code>HTML</code>, <code>BODY</code>
         * and at the element to which the renderer is added to allow the renderer to use 100%
         * height.
         *
         * @param {string} [sRendererName]
         *     The renderer name, such as "standard" or "acme.foo.bar.MyRenderer"; it is taken from
         *     the configuration property <code>defaultRenderer</code> if not given here.
         * @returns {sap.ui.core.Control}
         *     the renderer
         *
         * @methodOf sap.ushell.services.Container#
         * @name createRenderer
         * @since 1.15.0
         * @public
         */
        this.createRenderer = function (sRendererName) {
            var oComponentData,
                sComponentName,
                oRenderer,
                oRendererConfig;

            sRendererName = sRendererName || oConfig.defaultRenderer;
            if (!sRendererName) {
                throw new Error("Missing renderer name");
            }
            oRendererConfig = (oConfig.renderers && oConfig.renderers[sRendererName]) || {};
            sComponentName = oRendererConfig.module || (sRendererName.indexOf(".") < 0
                ? "sap.ushell.renderers." + sRendererName + ".Renderer"
                : sRendererName);
            jQuery.sap.require(sComponentName);
            if (oRendererConfig.componentData && oRendererConfig.componentData.config) {
                oComponentData = {config: oRendererConfig.componentData.config};
            }
            oRenderer = new (jQuery.sap.getObject(sComponentName))({
                componentData: oComponentData
            });
            if (oRenderer instanceof sap.ui.core.UIComponent) {
                oRenderer = new sap.ui.core.ComponentContainer(
                    {component: oRenderer, height: "100%", width: "100%"}
                );
            }
            if (!(oRenderer instanceof sap.ui.core.Control)) {
                throw new Error("Unsupported renderer type for name " + sRendererName);
            }
            return oRenderer;
        };

        /**
         * @namespace An enumeration for the application work protect mode state.
         *
         * @name sap.ushell.Container.DirtyState
         * @since 1.21.1
         * @public
         */
        this.DirtyState = {
            /**
             * The embedded application is clean, there is no unsaved data.
             *
             * @public
             * @constant
             * @default "CLEAN"
             * @name sap.ushell.Container.DirtyState.CLEAN
             * @since 1.21.1
             * @type string
             */
            CLEAN: "CLEAN",
            /**
             * The embedded application is dirty, the user has entered data
             * that is not yet saved.
             *
             * @public
             * @constant
             * @default "DIRTY"
             * @name sap.ushell.Container.DirtyState.DIRTY
             * @since 1.21.1
             * @type string
             */
            DIRTY: "DIRTY",
            /**
             * The embedded application container's dirty state cannot be determined because
             * of technical reasons.
             *
             * @public
             * @constant
             * @default "MAYBE_DIRTY"
             * @name sap.ushell.Container.DirtyState.MAYBE_DIRTY
             * @since 1.21.1
             * @type string
             */
            MAYBE_DIRTY: "MAYBE_DIRTY",
            /**
             * Technical state telling that the dirty state is currently being determined.
             *
             * @private
             * @constant
             * @default "PENDING"
             * @name sap.ushell.Container.DirtyState.PENDING
             * @since 1.21.1
             * @type string
             */
            PENDING: "PENDING",
            /**
             * Technical state for the initial value of the localStorage dirty state key.
             *
             * @private
             * @constant
             * @default "INTIAL"
             * @name sap.ushell.Container.DirtyState.INITIAL
             * @since 1.21.2
             * @type string
             */
            INITIAL: "INITIAL"
        };

        /**
         * Returns the global dirty state.
         *
         * All open UShell browser windows for the same origin are asked about their global dirty
         * state.
         *
         * @returns {jQuery.Deferred}
         *     A <code>jQuery.Deferred</code> object's promise receiving the dirty state
         *     (see {@link sap.ushell.Container.DirtyState}).
         * @throws  Raises an exception, if called again before promise is resolved.
         *
         * @methodOf sap.ushell.services.Container#
         * @name getGlobalDirty
         * @since 1.21.1
         * @public
         */
        this.getGlobalDirty = function () {
            var i,
                oDeferred = new jQuery.Deferred(),
                sUid = jQuery.sap.uid(),
                sStorageKey,
                iPending = 0,
                oDirtyState = this.DirtyState.CLEAN;

            function tryResolve() {
                if (iPending === 0 || oDirtyState === that.DirtyState.DIRTY) {
                    // no PENDING or already dirty, so we can end the process
                    oDeferred.resolve(oDirtyState);
                    jQuery.sap.log.debug(
                        "getGlobalDirty() Resolving: " + oDirtyState,
                        null,
                        "sap.ushell.Container"
                    );
                }
            }

            function onStorageEvent(oStorageEvent) {
                if (oStorageEvent.key.indexOf(sDIRTY_STATE_PREFIX) === 0
                        && oStorageEvent.newValue !== that.DirtyState.INITIAL
                        && oStorageEvent.newValue !== that.DirtyState.PENDING) {
                    jQuery.sap.log.debug(
                        "getGlobalDirty() Receiving event key: " + oStorageEvent.key
                            + " value: " + oStorageEvent.newValue,
                        null,
                        "sap.ushell.Container"
                    );
                    if (oStorageEvent.newValue === that.DirtyState.DIRTY
                            || oStorageEvent.newValue === that.DirtyState.MAYBE_DIRTY) {
                        oDirtyState = oStorageEvent.newValue;
                    }
                    iPending -= 1;
                    tryResolve();
                }
            }

            if (sap.ui.Device.browser.msie) { //TODO implement this feature for IE!
                return oDeferred.resolve(this.DirtyState.MAYBE_DIRTY).promise();
            }

            // check for private browsing mode in Safari
            try {
                oLocalStorage.setItem(sUid, "CHECK");
                oLocalStorage.removeItem(sUid);
            } catch (e) {
                jQuery.sap.log.warning("Error calling localStorage.setItem(): " + e, null,
                    "sap.ushell.Container");
                return oDeferred.resolve(this.DirtyState.MAYBE_DIRTY).promise();
            }

            if (oGlobalDirtyDeferred) {
                throw new Error("getGlobalDirty already called!");
            }

            oGlobalDirtyDeferred = oDeferred;
            window.addEventListener('storage', onStorageEvent);
            oDeferred.always(function () {
                window.removeEventListener('storage', onStorageEvent);
                oGlobalDirtyDeferred = undefined;
            });

            for (i = oLocalStorage.length - 1; i >= 0; i -= 1) {
                sStorageKey = oLocalStorage.key(i);
                if (sStorageKey.indexOf(sDIRTY_STATE_PREFIX) === 0) {
                    if (oLocalStorage.getItem(sStorageKey) === 'PENDING') {
                        // cleanup unanswered PENDINGS from call before
                        oLocalStorage.removeItem(sStorageKey);
                        jQuery.sap.log.debug(
                            "getGlobalDirty() Cleanup of unresolved 'PENDINGS':" + sStorageKey,
                            null,
                            "sap.ushell.Container"
                        );
                    } else {
                        iPending += 1;
                        sap.ushell.utils.localStorageSetItem(sStorageKey,
                            this.DirtyState.PENDING, true);
                        jQuery.sap.log.debug(
                            "getGlobalDirty() Requesting status for: " + sStorageKey,
                            null,
                            "sap.ushell.Container"
                        );
                    }
                }
            }
            tryResolve();

            setTimeout(function () {
                if (oDeferred.state() !== "resolved") {
                    // no use of constants because the Container may not exist anymore
                    oDeferred.resolve('MAYBE_DIRTY');
                    jQuery.sap.log.debug(
                        "getGlobalDirty() Timeout reached, - resolved 'MAYBE_DIRTY'",
                        null,
                        "sap.ushell.Container"
                    );
                }
            }, iPending * 2000);

            return oDeferred.promise();
        };

        /**
         * Returns the logon system.
         *
         * @returns {sap.ushell.System}
         *     object providing information about the system where the container is logged in.
         *     since 1.15.0 the return value is of type <code>sap.ushell.System</code>
         *
         * @since 1.15.0
         * @private
         */
        this.getLogonSystem = function () {
            return oAdapter.getSystem();
        };

       /**
         * Returns the logged-in user.
         *
         * @returns {sap.ushell.User}
         *      object providing information about the logged-in user
         *
         * @since 1.15.0
         * @private
         */
        this.getUser = function () {
            return oAdapter.getUser();
        };

        /**
         * Returns a service with the given name, creating it if necessary.
         * Services are singleton objects identified by their (resulting) name.
         * <p>
         * Names without a dot are interpreted as service names within the default naming convention
         * and will be expanded to <code>"sap.ushell.services." + sServiceName</code>.
         * Names containing a dot are not yet supported. This name may be overridden via
         * configuration. See example 2 below.
         * <p>
         * The resulting name must point to a constructor function which is first required as a
         * SAPUI5 module and then called to create a service instance.
         * The service will be passed to a corresponding service adapter for the current logon system, as well as a callback
         * interface (of virtual type <code>sap.ushell.services.ContainerInterface</code>) to the
         * container providing a method <code>createAdapter(oSystem)</code> to create further
         * adapters for the same service but connected to remote systems.
         * The third parameter will be <code>sParameter</code> as passed to this function.
         * The fourth parameter will be an
         * object with the property <code>config</code> supplied by the configuration. See
         * example 2 below.
         * <p>
         * The adapter for the logon system will be created before the service. Its constructor
         * gets three parameters. The first parameter is the logon system, the second parameter is
         * <code>sParameter</code> and the third parameter is an object with the property
         * <code>config</code> supplied by the configuration.
         * <p>
         * The service may declare itself adapterless by setting the property
         * <code>hasNoAdapter = true</code> at the constructor function. In this case no adapter
         * will be created and passed to the constructor and all other parameters will be shifted.
         * <p>
         * <b>Example 1:</b> The service <code>sap.ushell.services.UserInfo</code> is
         * parameterless. It indicates this by setting
         * <code>sap.ushell.services.UserInfo.hasNoAdapter = true;</code>.
         * <p>
         * <b>Example 2:</b> (Configuration)
         * <pre>
         * window["sap-ushell-config"] = {
         *     services: {
         *         Foo: {
         *             module: "my.own.Foo"
         *             config: {header: "hidden"},
         *             adapter: {
         *                 module: "my.own.FooAdapter",
         *                 config: {foo: "bar"}
         *             }
         *         }
         *     }
         * }
         * oService = sap.ushell.Container.getService("Foo", "runtimeConfig");
         * </pre>
         * Now <code>oService</code> is an instance of <code>my.own.Foo</code>. The third parameter
         * of the constructor will be "runtimeConfig", the fourth parameter
         * <code>{config: {header: "hidden"}}</code>. Its adapter is an instance of
         * <code>my.own.FooAdapter</code> constructed with the parameters logon system,
         * "runtimeConfig" and <code>{config: {foo: "bar"}}</code>.
         *
         * @param {string} sServiceName
         *     The service name, such as "Menu"
         * @param {string} [sParameter]
         *     A parameter which is passed to the service constructor and every adapter
         *     constructor. (since 1.15.0)
         * @returns {object}
         *     the service
         *
         * @methodOf sap.ushell.services.Container#
         * @name getService
         * @see sap.ushell.services.ContainerInterface
         * @since 1.15.0
         * @public
         */
        this.getService = function (sServiceName, sParameter) {
            /**
             * @class This is a virtual type for the callback interface passed by
             * {@link sap.ui.Container.getService()} to any newly created service.
             * @name sap.ushell.services.ContainerInterface
             * @see sap.ushell.services.Container#getService
             * @since 1.15.0
             * @public
             */
            var oContainerInterface = {},
                sModuleName,
                sKey,
                Service, // Service constructor function
                oService,
                oServiceAdapter,
                oServiceConfig,
                oServiceProperties;

            /**
             * For the given remote system, creates a new adapter that corresponds to the service
             * to which this container interface was passed at construction time.
             *
             * @param {sap.ushell.System} oSystem
             *     information about the remote system to which the resulting adapter should
             *     connect
             * @returns {jQuery.Deferred}
             *     A <code>jQuery.Deferred</code> object's promise receiving the remote adapter.
             *
             * @methodOf sap.ushell.services.ContainerInterface#
             * @name createAdapter
             * @since 1.15.0
             * @public
             */
            function createRemoteAdapter(oSystem) {
                var oDeferred = new jQuery.Deferred();
                if (!oSystem) {
                    throw new Error("Missing system");
                }
                // Note: this might become really asynchronous once the remote adapter is loaded
                // from the remote system itself
                oDeferred.resolve(createAdapter(sServiceName, oSystem, sParameter));
                sap.ushell.Container.addRemoteSystem(oSystem);
                return oDeferred.promise();
            }

            if (!sServiceName) {
                throw new Error("Missing service name");
            }
            if (sServiceName.indexOf(".") >= 0) {
                //TODO support this once we have some configuration and can thus find adapters
                throw new Error("Unsupported service name");
            }
            oServiceConfig = getServiceConfig(sServiceName);
            sModuleName = oServiceConfig.module || "sap.ushell.services." + sServiceName;
            sKey = sModuleName + "/" + (sParameter || "");
            oServiceProperties = {config: oServiceConfig.config || {}};
            if (!mServicesByName.containsKey(sKey)) {
                jQuery.sap.require(sModuleName);
                Service = jQuery.sap.getObject(sModuleName);

                if (Service.hasNoAdapter === true) {
                    // has no adapter: don't create and don't pass one
                    oService = new Service(oContainerInterface, sParameter, oServiceProperties);
                } else {
                    // create and pass adapter for logon system as first parameter
                    oServiceAdapter = createAdapter(sServiceName, oAdapter.getSystem(),
                        sParameter);
                    oContainerInterface.createAdapter = createRemoteAdapter;
                    oService = new Service(oServiceAdapter, oContainerInterface, sParameter,
                        oServiceProperties);
                }

                mServicesByName.put(sKey, oService);
                return oService;
            }
            return mServicesByName.get(sKey);
        };

        /**
         * Get list of remote systems currently in use.
         *
         * @returns {object} map of sap.ushell.System
         *
         * @since 1.17.1
         * @private
         */
        sap.ushell.utils.testPublishAt(that);
        function getRemoteSystems() {
            var sSystemAlias,
                oSystemData,
                i,
                sKey;

            for (i = oLocalStorage.length - 1; i >= 0; i -= 1) {
                sKey = oLocalStorage.key(i);
                if (sKey.indexOf(sRemoteSystemPrefix) === 0) {
                    try {
                        sSystemAlias = sKey.substring(sRemoteSystemPrefix.length);
                        oSystemData = JSON.parse(oLocalStorage.getItem(sKey));
                        mRemoteSystems[sSystemAlias] = new sap.ushell.System(oSystemData);
                    } catch (e) {
                        // local storage contained garbage (non-parseable)
                        oLocalStorage.removeItem(sKey);
                    }
                }
            }
            return mRemoteSystems;
        }


        /**
         * Stub OData.read() and OData.request() to intercept OData request during logout process.
         * After 5 seconds an error handler is invoked to let the caller know about still ongoing
         * logout process.
         *
         * @since 1.17.1
         * @private
         */
        sap.ushell.utils.testPublishAt(that, "suppressOData");
        function suppressOData() {
            function stub(sErrorMessage, fnSuccess, fnFailure) {
                jQuery.sap.log.warning(sErrorMessage, null,
                    "sap.ushell.Container");
                if (fnFailure) {
                    setTimeout(fnFailure.bind(null, sErrorMessage), 5000);
                }
                // the original APIs provides abort handler which have to be stubbed also
                return { abort: function () {return; }};
            }
            OData.read = function (oRequest, fnSuccess, fnFailure) {
                return stub("OData.read('" +
                            (oRequest && oRequest.Uri ? oRequest.requestUri : oRequest) +
                            "') disabled during logout processing",
                            fnSuccess, fnFailure);
            };
            OData.request = function (oRequest, fnSuccess, fnFailure) {
                return stub("OData.request('" + (oRequest ? oRequest.requestUri : "") +
                            "') disabled during logout processing", fnSuccess, fnFailure);
            };
        }

        /**
         * Adds a system to the list of remote systems currently in use. On logout
         * this list is processed and performs a logout for each system via the ContainerAdapter
         * specific for its platform.
         *
         * @param  {sap.ushell.System} oRemoteSystem
         *         Remote system to be added.
         *
         * @methodOf sap.ushell.services.Container#
         * @name addRemoteSystem
         * @since 1.15.0
         * @public
         */
        /* Internal details
           oRemoteSystem.getAlias() is the unique key within the remote systems list.
           oRemoteSystem.getPlatform determines which ContainerAdapter implementation is used.
           oRemoteSystem.getBaseUrl determines the logout request routing; there are 3 routing modes:
           1. empty baseUrl:
             The logout is done with its platform-specific, server-absolute service path e.g.
             oRemoteSystem.platform is 'abap':
               '/sap/public/bc/icf/logoff'
             oRemoteSystem.platform is 'hana':
               '<protocol://host:port>/sap/hana/xs/formLogin/token.xsjs'
           2. baseUrl beginning with '/' e.g. '/MY_PREFIX':
             The logout request was fired with the baseUrl as prefix e.g. platform 'abap':
               '<protocol://host:port>/MY_PREFIX/sap/public/bc/icf/logoff'
           3. baseUrl is ';o=':
             The logout request is fired with <code>;o=oRemoteSystem.alias</code>
             e.g. oRemoteSystem.platform 'abap' and oRemoteSystem.alias = 'MY_SYSTEM_ALIAS':
               '<protocol://host:port>/sap/public/bc/icf/logoff;o=MY_SYSTEM_ALIAS'
           Note: Cases 2. and 3. require a corresponding Web Dispatcher rule.
        */
        this.addRemoteSystem = function (oRemoteSystem) {
            var sAlias = oRemoteSystem.getAlias(),
                oOldSystem = mRemoteSystems[sAlias];

            if (oOldSystem) {
                if (oOldSystem.toString() === oRemoteSystem.toString()) { // --> JSON.stringify
                    return;
                }
                jQuery.sap.log.warning("Replacing " + oOldSystem + " by " + oRemoteSystem,
                    null, "sap.ushell.Container");
            } else {
                jQuery.sap.log.debug("Added " + oRemoteSystem, null, "sap.ushell.Container");
            }
            mRemoteSystems[sAlias] = oRemoteSystem;
            sap.ushell.utils.localStorageSetItem(sRemoteSystemPrefix + sAlias, oRemoteSystem);
        };

        /**
         * Derives a remote system from the given OData service URL heuristically. The platform
         * is identified by the URL's prefix, the alias is derived from a segment parameter named
         * "o". If this succeeds, {@link #addRemoteSystem} is called accordingly with a base URL
         * of ";o=".
         *
         * @param {string} sServiceUrl
         *     An OData service URL.
         *
         * @methodOf sap.ushell.services.Container#
         * @name addRemoteSystemForServiceUrl
         * @since 1.23.0
         * @private
         */
        this.addRemoteSystemForServiceUrl = function (sServiceUrl) {
            /*jslint regexp:true */
            var aMatches,
                oSystemInfo = {baseUrl: ";o="};

            if (!sServiceUrl || sServiceUrl.charAt(0) !== '/' || sServiceUrl.indexOf('//') === 0) {
                return;
            }

            // extract system alias from segment parameter named "o"
            aMatches = /^[^?]*;o=([^\/;?]*)/.exec(sServiceUrl);
            if (aMatches && aMatches.length >= 2) {
                oSystemInfo.alias = aMatches[1];
            }

            // heuristically determine platform from URL prefix
            sServiceUrl = sServiceUrl.replace(/;[^\/?]*/g, ""); // remove all segment parameters
            if (/^\/sap\/(bi|hana|hba)\//.test(sServiceUrl)) {
                oSystemInfo.platform = "hana";
                oSystemInfo.alias = oSystemInfo.alias || "hana"; // use legacy hana as fallback
            } else if (/^\/sap\/opu\//.test(sServiceUrl)) {
                oSystemInfo.platform = "abap";
            }

            if (oSystemInfo.alias && oSystemInfo.platform) {
                this.addRemoteSystem(new sap.ushell.System(oSystemInfo));
            }
        };

        /**
         * Attaches a listener to the logout event.
         *
         * @param  {function} fnFunction
         *     Event handler to be attached.
         *
         * @methodOf sap.ushell.services.Container#
         * @name attachLogoutEvent
         * @since 1.19.1
         * @public
         */
        this.attachLogoutEvent = function (fnFunction) {
            oLogoutEventProvider.attachEvent("Logout", fnFunction);
        };


        /**
         * Detaches a listener from the logout event.
         *
         * @param  {function} fnFunction
         *     Event handler to be detached.
         *
         * @methodOf sap.ushell.services.Container#
         * @name detachLogoutEvent
         * @since 1.19.1
         * @public
         */
        this.detachLogoutEvent = function (fnFunction, oListener) {
            oLogoutEventProvider.detachEvent("Logout", fnFunction);
        };


        /**
         * Logs out the current user from all relevant back-end systems, including the logon system
         * itself.
         *
         * @returns {jQuery.Deferred}
         *          A <code>jQuery.promise</code> to be resolved when logout is finished, even when it fails.
         *
         * @methodOf sap.ushell.services.Container#
         * @name logout
         * @since 1.15.0
         * @public
         */
        this.logout = function () {
            var oDeferred = new jQuery.Deferred();

            function resolve() {
                oAdapter.logout(true).always(function () {
                    oLocalStorage.removeItem(sSessionTerminationKey);
                    oDeferred.resolve();
                });
            }

            function logoutLogonSystem() {
                if (oLogoutEventProvider.fireEvent("Logout", true)) {
                    resolve();
                } else {
                    // defer UShell redirect to let NWBC receive message asynchronously
                    setTimeout(resolve, 1000);
                }
            }

            function federatedLogout() {
                var mRemoteSystems,
                    aRemoteLogoutPromises = [];

                if (fnStorageEventListener) {
                    // IE sends localStorage events also to the issuing window, -
                    // this is not needed hence we remove the listener in general at that point
                    window.removeEventListener('storage', fnStorageEventListener);
                }

                sap.ushell.utils.localStorageSetItem(sSessionTerminationKey, "pending");
                suppressOData();
                mRemoteSystems = getRemoteSystems();
                Object.keys(mRemoteSystems).forEach(function (sAlias) {
                    try {
                        aRemoteLogoutPromises.push(
                            createAdapter("Container", mRemoteSystems[sAlias]).logout(false)
                        );
                    } catch (e) {
                        jQuery.sap.log.warning("Could not create adapter for " + sAlias,
                            e.toString(), "sap.ushell.Container");
                    }
                    oLocalStorage.removeItem(sRemoteSystemPrefix + sAlias);
                });
                // wait for all remote system logouts to be finished
                // Note: We use done() and not always(), and we require all adapters to resolve
                // their logout(false) in any case. If we use always() and any adapter's promise is
                // rejected, the deferred object from when() is *immediately* rejected, too. Then
                // the redirect happens before all remote logouts are finished.
                // TODO force logoutLogonSystem after timeout?
                jQuery.when.apply(jQuery, aRemoteLogoutPromises).done(logoutLogonSystem);
            }

            if (typeof oAdapter.addFurtherRemoteSystems === 'function') {
                oAdapter.addFurtherRemoteSystems().always(federatedLogout);
            } else {
                federatedLogout();
            }

            return oDeferred.promise();
        };

        /**
         * Determines the current logon frame provider for the entire Unified Shell. Initially,
         * a rudimentary default provider is active and should be replaced as soon as possible
         * by the current renderer.
         * <p>
         * A logon frame provider is used to facilitate user authentication even for requests sent
         * via <code>XMLHttpRequest</code>. It is called back in order to create a hidden
         * <code>IFRAME</code>, to show it to the user, then to hide and destroy it. The frame
         * must be treated as a black box by the provider; especially with respect to the source of
         * the frame which is managed by the Unified Shell framework. Showing the frame might
         * require user interaction and some decoration around the frame. The frame should be
         * destroyed, not reused, to be on the safe side. Note that in typical cases with SAML2,
         * authentication happens automatically and the frame can stay hidden.
         * <p>
         * The following order of method calls is guaranteed:
         * <ol>
         *   <li> The <code>create</code> method is called first.
         *   <li> The <code>show</code> method may be called next (if there is HTML code to
         *   display).
         *   <li> The <code>destroy</code> method is called last.
         *   <li> A new cycle may start for a new logon process.
         * </ol>
         *
         * @param {object} oLogonFrameProvider
         *   The new logon frame provider which needs to implement at least the methods documented
         *   here.
         * @param {function} oLogonFrameProvider.create
         *   A function taking no arguments and returning a DOM reference to an empty
         *   <code>IFRAME</code> which is initially hidden.
         *   The frame must not be moved around in the DOM later on. Make sure to add all necessary
         *   parent objects immediately, to render SAPUI5 controls as needed, and to return the DOM
         *   reference synchronously.
         * @param {function} oLogonFrameProvider.destroy
         *   A function taking no arguments which hides and destroys the current frame.
         * @param {function} oLogonFrameProvider.show
         *   A function taking no arguments which is called to indicate that the current frame
         *   probably needs to be shown to the user because interaction is required. Note that
         *   there may be false positives here. It is up to the provider how and when the frame
         *   is shown exactly; make sure to provide a good user interaction design here.
         *
         * @methodOf sap.ushell.services.Container#
         * @name setLogonFrameProvider
         * @since 1.21.2
         * @public
         * @see sap.ushell.services.Container#cancelLogon
         */
        this.setLogonFrameProvider = function (oLogonFrameProvider) {
            if (this.oFrameLogonManager) {
                this.oFrameLogonManager.setLogonFrameProvider(oLogonFrameProvider);
            }
        };


        // constructor code -------------------------------------------------------
        // loose coupling to allow re-use from sap.ui2.srvc.Catalog#addSystemToServiceUrl
        sap.ui.getCore().getEventBus().subscribe("sap.ushell.Container",
            "addRemoteSystemForServiceUrl", function (sChannelId, sEventId, oData) {
                that.addRemoteSystemForServiceUrl(oData);
            });
        // register event handler for storage events issued by other UShell windows
        if (typeof oAdapter.logoutRedirect === 'function') {
            fnStorageEventListener = function (oStorageEvent) {
                function closeAndRedirectWindow() {
                    // Most browsers do not allow closing windows via JS that aren't opened via JS
                    // hence we additionally redirect to get these manually opened windows
                    // redirected at least.
                    // NOTE: It is important to NOT redirect to  "/sap/public/bc/icf/logoff"
                    // because on iPad Safari e.g. the event is not processed until the window gets
                    // the focus. This would terminate any new session opened in between.
                    closeWindow();
                    redirectWindow();
                }
                if (sap.ushell.Container !== that) {
                    // In integration test suite, old listeners remain which do not belong to the
                    // current sap.ushell.Container instance. IE sends events also to own window.
                    // Then these old listeners react as if a remote window logged out...
                    return;
                }
                // IE9 seems to get the events, but not the values in another window!?
                if (oStorageEvent.key.indexOf(sRemoteSystemPrefix) === 0
                        && oStorageEvent.newValue
                        && oStorageEvent.newValue !== oLocalStorage.getItem(oStorageEvent.key)) {
                    sap.ushell.utils.localStorageSetItem(oStorageEvent.key, oStorageEvent.newValue);
                }
                if (oStorageEvent.key === sSessionTerminationKey) {
                    if (oStorageEvent.newValue === "pending") {
                        suppressOData();
                        if (oLogoutEventProvider.fireEvent("Logout", true)) {
                            closeAndRedirectWindow();
                        } else {
                            // defer UShell closeWindow to let NWBC receive message asynchronously
                            setTimeout(closeAndRedirectWindow, 1000);
                        }
                    }
                }
            };
            window.addEventListener('storage', fnStorageEventListener);
        }
    }

    /**
     * Initializes the Unified Shell container for the given platform. This method must be called
     * exactly once in the very beginning by platform-specific code in order to bootstrap the
     * container. As soon as the returned promise has been resolved, the container will be available
     * as a singleton object <code>sap.ushell.Container</code>.
     * <p>
     * For convenience, platform-specific bootstrap code is available and can be easily included
     * (<b>before</b> the SAPUI5 bootstrap) by a corporate shell as follows:
     * <pre>
     * &lt;script src="/sap/public/bc/ui5_ui5/resources/sap/ushell_abap/bootstrap/abap.js"&gt;&lt;/script&gt;
     * &lt;script id="sap-ui-bootstrap" src=".../sap-ui-core.js"&gt;&lt;/script&gt;
     * </pre>
     * This bootstrap code will automatically defer the initialization of SAPUI5 until the
     * container is available. This is the preferred way of bootstrapping the Unified Shell.
     * <p>
     * Note: For SAPUI5 application projects the recommended way is to add a dependency to the
     * "sap.ushell_abap" library (<code>&lt;groupId&gt;com.sap.ushell&lt;/groupId&gt;
     * &lt;artifactId&gt;ushell_abap&lt;/artifactId&gt;</code>) and load the bootstrap code via the
     * application's resources folder:
     * <pre>
     * &lt;script src=".../resources/sap/ushell_abap/bootstrap/abap.js"&gt;&lt;/script&gt;
     * &lt;script id="sap-ui-bootstrap" src=".../sap-ui-core.js"&gt;&lt;/script&gt;
     * </pre>
     * <p>
     * Since 1.15.0 you can provide the function
     * <code>window['sap.ushell.bootstrap.callback']</code> for calling back from this method
     * asynchronously. SAPUI5's bootstrap is ongoing then. The same restrictions apply
     * as for the function <code>window['sap-ui-config']['xx-bootTask']</code>) when the Unified
     * Shell container has not yet finished its bootstrap. You cannot delay the bootstrap of SAPUI5
     * or the Unified Shell container; any errors are ignored. This callback is useful for
     * sending asynchronous back-end requests at the earliest opportunity without delaying
     * the core bootstrap of SAPUI5 and the Unified Shell container.
     *
     * @param {string} sPlatform
     *     the target platform, such as "abap" or "demo" (Note: there is no fixed enumeration of
     *     possible platforms)
     * @param {map<string, string>} [mAdapterPackagesByPlatform={}]
     *     the map with platform specific package names for the service adapters.
     *     You only need to specify these package names, if they differ from the standard name
     *     <code>"sap.ushell.adapters." + sPlatform</code>.
     * @returns {jQuery.Promise}
     *     a promise that is resolved once the container is available
     *
     * @since 1.15.0
     * @see sap.ushell.Container
     * @public
     */
    sap.ushell.bootstrap = function (sPlatform, mAdapterPackagesByPlatform) {
        var oAdapter;

        if (sap.ushell.Container !== undefined) {
            throw new Error("Cannot initialize twice");
        }
        sap.ushell.Container = null; // "loading..."

        // remember the configuration independently of window["sap-ushell-config"]
        oConfig = JSON.parse(JSON.stringify(window["sap-ushell-config"] || {}));

        // remember the platform package names
        mPlatformPackages = mAdapterPackagesByPlatform;

        if (typeof window["sap.ushell.bootstrap.callback"] === "function") {
            setTimeout(window["sap.ushell.bootstrap.callback"]);
        }

        if (oConfig.modulePaths) {
            Object.keys(oConfig.modulePaths).forEach(function (sModuleName) {
                jQuery.sap.registerModulePath(sModuleName, oConfig.modulePaths[sModuleName]);
            });
        }

        oAdapter = createAdapter("Container", new sap.ushell.System({
            // this is the initial logon system object
            alias: "",
            platform: oConfig.platform || sPlatform
        }));

        return oAdapter.load().done(function () {
            /**
             * The Unified Shell container as a singleton object. This object will only be
             * available after <code>sap.ushell.bootstrap()</code> has finished.
             *
             * @since 1.15.0
             * @type sap.ushell.services.Container
             * @see sap.ushell.bootstrap
             * @public
             */
            sap.ushell.Container = new Container(oAdapter);
        });
    };
}());

}; // end of sap/ushell/services/Container.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.Personalization') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The Unified Shell's personalization service, which provides
 *               generic read and write access to the currently logged on user's
 *               personalization settings for the app currently executed in the
 *               shell.
 *               
 * @version
 * 1.24.5
 */
(function () {
    "use strict";
    /*jslint nomen: true*/
    /*global jQuery, sap, setTimeout, clearTimeout */
    jQuery.sap.declare("sap.ushell.services.Personalization");
    // this file introduces 
    // jQuery.sap.declare("sap.ushell.services.Personalization.WindowValidityPersistenceAdapter");
    
    jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained

    // TODO conditional loading

    var sCONTAINER_PREFIX = "sap.ushell.personalization#",
        sITEM_PREFIX = "ITEM#",
        sVARIANT_PREFIX = "VARIANTSET#",
        sABAPTIMESTAMPFORMAT = "yyyyMMddHHmmss",
        sADMIN_PREFIX = "ADMIN#",
        sITEMKEY_SCOPE = "sap-ushell-container-scope",
        sITEMKEY_STORAGE = "sap-ushell-container-storageUTCTimestamp",
        sITEMKEY_EXPIRE = "sap-ushell-container-expireUTCTimestamp";
    function addContainerPrefix(sContainerKey) {
        return sCONTAINER_PREFIX + sContainerKey;
    }

    /*
     * Implementation note: 
     * 
     * ITEM#<itemkey>
     * VARIANTSET#<variantset>
     * sap-ushell-container-scope : {   }
     * sap-ushell-container-
     */


    // ---------------------
    // ------ Service ------
    // ---------------------
    /**
     * This method MUST be called by the Unified Shell's container only, others
     * MUST call <code>sap.ushell.Container.getService("Personalization")</code>.
     * Constructs a new instance of the personalization service.
     *
     * @param {object} oAdapter
     *            the service adapter for the personalization service,
     *            as already provided by the container
     *
     * @class The Unified Shell's personalization service, which provides a
     *        personalizer object that handles all personalization operations.
     *
     * @public
     * @constructor
     * @see sap.ushell.services.Container#getService
     *
     * @since 1.15.0
     */
    sap.ushell.services.Personalization = function (oAdapter) {
        this._oAdapter = oAdapter;
        this._oContainerMap = new sap.ushell.utils.Map();
        // map: sPrefixedContainerKey -> promise object of getPersonalizationContainer
        this._oPendingOperationsMap = new sap.ushell.utils.Map();
        // map: sContainerKey -> pending operation (deferred object, potentially extended with _sapTimeoutId, _sapFnSave)
    };

    sap.ushell.services.Personalization.prototype.SAVE_DEFERRED_DROPPED = "Deferred save dropped (OK) - Data superseeded by subsequent save";

    /**
     * Returns a personalizer object which handles personalization by
     * asynchronous operations storing the personalization data immediately via
     * the connected adapter. For each operation a round trip is executed.
     * 
     * Do not mix the usage of a personalizer and a personalization container
     * for one containerKey.
     *
     * @param {object} oPersId
     *            JSON object consisting of the following parts:
     *            container - Identifies the set of personalization data that is
     *            loaded/saved as one bundle from the back-end system. item - The
     *            name of the object the personalization is applied to.
     *
     * @returns {object} 
     *            {@link sap.ushell.services.Personalizer} which provides generic read and
     *            write access to the currently logged on user's personalization
     *            settings.
     *
     * @public
     * @since 1.15.0
     */
    sap.ushell.services.Personalization.prototype.getPersonalizer = function (oPersId) {
        return new sap.ushell.services.Personalizer(this, this._oAdapter, oPersId);
    };

    /**
     * Returns a transient personalizer object which handles personalization by
     * asynchronous operations storing the personalization data transiently as
     * an object property. Primary usage of the transient personalizer is a
     * personalization scenario with variants where the transient personalizer
     * is used as a buffer for table personalization data.
     *
     * @returns {object} 
     *            {@link sap.ushell.services.TransientPersonalizer} which 
     *            provides asynchronous read and write access to a transient personalization data storage.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.Personalization.prototype.getTransientPersonalizer = function () {
        return new sap.ushell.services.TransientPersonalizer();
    };


    /**
     * construct a cleansed scope object, returning only valid recognized parameters
     * This functionality is used to cleanse user input
     * @private
     */
    function rectifyScope(oScope) {
        // default scope is validity : Infinity
        var oCleanScope = { validity : Infinity };
        oCleanScope.validity = oScope && oScope.validity;
        if (oCleanScope.validity === null || oCleanScope.validity === undefined || typeof oCleanScope.validity !== "number") {
            oCleanScope.validity = Infinity;
        }
        if (!(typeof oCleanScope.validity === "number" &&  ((oCleanScope.validity >= 0 && oCleanScope.validity < 1000) || oCleanScope.validity === Infinity))) {
            oCleanScope.liftime = Infinity;
        }
        return oCleanScope;
    }



    /**
     * Factory method to obtain a Data Context object,
     * which is a local copy of the persistence layer data.
     * The Container data is asynchronously read on creation if present,
     * otherwise an initial object is created.
     * The Container data can then be *synchronously* modified (getItemValue, setItemValue). 
     * Only on invoking  the save()/saveDeferred() method the data is transferred to the persistence.
     * This allows the application to perform multiple local modifications and
     * delay the save operation.
     * 
     * Every getContainer operation returns a new local copy, containing the full data at the point of creation. 
     * 
     * Executing load() on the container reloads the data from the persistence, discarding local changes. 
     *
     * Note that the container allows the application to 
     * control the round trips to the back-end persistence. The factory method
     * getContainer is asynchronous and loads the container via
     * the connected adapter from the back-end system. All operations (but for the
     * save operation) are executed synchronously, operating on the local data.
     * This allows the application to control the round trips to the back-end
     * persistence.
     *
     * A container can contain a set of items, identified by a key. 
     * 
     * You can wrap a container in a VariantSetAdapter to read and write
     * a more complex structure (with multiple keys (variantSet,variant,item)). 
     *
     * Do not mix up the usage of a personalizer and a container
     * for one containerKey.
     * Do not use a PersonalizationContainer and a Container for the same key except for migration scenarios.
     *
     * scope / validity parameter (@since 1.22.0):
     *   An unspecified (undefined validity) or infinite (Infinity) validity indicates that data is persisted in the 
     *   Personalization data of the back-end system. A round trip is executed on an initial get and at least every save operation.
     *   Data is stored per user and retained indefinitely at the back-end system.
     *
     *   The validity parameter allows a designated storage validity for the created container. 
     *   A 0 validity indicates the data is only persisted within the Fiori Launchpad window. 
     *   No round trips to a back-end system are executed. Data is lost if the launchpad window state is lost 
     *   (e.g. by navigating to a different page, pressing F5 (reload page) or duplicating the window).
     *
     *
     * Security: It is the responsibility of the application to not persist information relevant to auditing or security
     * using the PersonalizationService with inappropriate validity models. No mechanisms exist
     * to destroy or selectively destroy application-specific data in the back-end persistence (especially for validity Infinity).
     *
     * For non-zero validity scopes, data will be transmitted and persisted in the back-end system. 
     *
     * For limited validity, actual deletion of data on the back-end system is subject to explicit cleanup execution of back-end jobs
     * and not guaranteed. The data may still be persisted and retrievable. The interface only assures that expired data is no longer 
     * exposed to the application code in the launchpad.
     *
     * The ContainerKey uniquely defines the Container, validity is not part of the key (there are no separate
     * namespaces per validity). 
     *
     * In general, mixing different validity models for a given container key is not supported. 
     * Fast chaining of different methods may source arbitrary persistence layers. 
     * The validity of the resulting object in the done function of a promise is the last get validity.
     *
     * The validity associated with the last getContainer or createEmptyContainer determines
     * the current validity of the container and the validity used during the next save operation.
     *
     * Naturally, if a delete or get with validity 0 is issued, it will *not* delete or retrieve a backend persistent 
     * storage
     * Thus a sequence  delete( [validity 0])/wait for promise, getContainer(sKey,{ validity : Infinity}) may return a valid dataset.
     *
     * @param {string}
     *            sContainerKey - identifies the container
     *            The string length is restricted to 40 characters
     * @param {Object} oScope - scope object<br/>
     *            currently the validity property of the scope object is relevant: 
     *            E.g. <code> { validity : 30}</code> indicates a validity of the data for 30 minutes.<br/>
     *            oScope.validity : validity of the container persistence in minutes<br/>
     *              valid values include 0 ( per FLP Window), <br/>
     *                           Infinity, undefined  (back-end persistence per user ) [Default] <br/>
     *                           nn Minutes (back-end persistence per user, ignored if older than nn minutes) 
     * 
     * @returns {object} Promise object whose done function returns a
     *            {@link sap.ushell.services.Personalization.ContextContainer} object 
     *            as parameter. The container provides setItemValue / getItemValue methods 
     *            to synchronously operate on personalization data. 
     *            By wrapping it in a VariantSetAdapter, an alternate interface to maintain variants can be obtained. 
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.prototype.getContainer = function (sContainerKey, oScope) {
        var sPrefixedContainerKey = "",
            oContainer = {},
            oPromiseContainer = {},
            oDeferred = {},
            oAdapterForScope,
            that = this;
        if (typeof sContainerKey !== "string") {
            throw new sap.ushell.utils.Error("sContainerKey is not a string: sap.ushell.services.Personalization");
        }
        if (sContainerKey.length > 40) {
            jQuery.sap.log.error("Personalization Service container key (\"" + sContainerKey + "\") should be less than 40 characters [current :" + sContainerKey.length + "]");
        }
        oScope = rectifyScope(oScope);
        sPrefixedContainerKey = addContainerPrefix(sContainerKey);
        oDeferred = new jQuery.Deferred();

        oAdapterForScope = this._oAdapter;
        if (oScope && oScope.validity === 0) {
            oAdapterForScope = new sap.ushell.services.Personalization.WindowValidityPersistenceAdapter(this);
        }
        oContainer = new sap.ushell.services.Personalization.ContextContainer(this, oAdapterForScope, sPrefixedContainerKey, oScope);

        oContainer.load()
            .fail(function () {
                oDeferred.reject();
            })
            .done(function () {
                // test validity
                if (oContainer._isExpired()) {
                    oContainer.clear();
                }
                oDeferred.resolve(oContainer);
            });
        return oDeferred.promise();
    };

    /**
    * Factory method to obtain an empty Data Context object. 
    * When data present in a prior context is not relevant 
    * (e.g. when using a "uniquely" generated key and planning to 
    * overwrite any colliding back-end data).
    * 
    * The call always returns an cleared container().
    *  
    * Note that an existing container at the back-end is not actually deleted or overwritten
    * unless a save operation is executed.
    * 
    * 
    * An initial object is returned. 
    * @param {string}
    *            sContainerKey - identifies the container
     *            The string length is restricted to 40 characters
    * @param {Object} oScope - scope object
    *            currently the validity property of the scope object is relevant: 
    *            E.g. <code> { validity : 30}</code> indicates a validity of the data for 30 minutes.<br/>
    *            oScope.validity : validity of the container persistence in minutes
    *              valid values include 0 ( per FLP Window), 
    *                           Infinity, undefined  ( Backend persistence per user ) [Default]
    *                           nn Minutes ( Backend persistence per user, ignored if older than nn minutes) 
    * 
    * @returns {object} Promise object whose done function returns a
    *            {@link sap.ushell.services.Personalization.ContextContainer} object 
    *            as parameter. The personalization container provides two different 
    *            interfaces to synchronously operate on personalization data. 
    *            In the item mode the container contains items as name value pairs for 
    *            personalization data. 
    *            In the variant mode the container contains variant sets which contain 
    *            variants containing items.
    * @public
    * @since 1.22.0
    */
    sap.ushell.services.Personalization.prototype.createEmptyContainer = function (sContainerKey, oScope) {
        var oPromise = this.getContainer(sContainerKey, oScope),
            oDeferred = new jQuery.Deferred();
        oPromise.fail(function () {
            oDeferred.reject();
        }).done(function (oContainer) {
            oContainer.clear();
            oDeferred.resolve(oContainer);
        });
        return oDeferred.promise();
    };


    /**
     * Asynchronously starts a deletion request for the given container identified by 
     * sContainerKey. Can be called without having ever called getContainer with the corresponding key
     * 
     * Note: After invoking this operation, the state of other Containers 
     * obtained for the same key is undefined! 
     * If you want to use the container after deletion, it is strongly recommended to obtain
     * a new instance of a container for the given key *after* the promise has returned. 
     *
     * Note: Invoking this operation while another save or load operation is under way may result in failure. 
     *
     * @param {string} sContainerKey
     *           identifies the container
     *
     * @returns {object} 
     *          promise for the deletion operation
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.prototype.delContainer = function (sContainerKey, oScope) {
        // delete the bag, the adapter container & the container
        var oContainer = {},
            oDeferred = {},
            oPrior,
            oDummyDeferred,
            sPrefixedContainerKey = "",
            that = this;
        oScope = rectifyScope(oScope);
        sPrefixedContainerKey = addContainerPrefix(sContainerKey);
        oDeferred = new jQuery.Deferred();

        oPrior = that._pendingContainerOperations_cancelAddNext(sContainerKey, null);
        oPrior.always(function () {
            that.getContainer(sContainerKey, oScope)  // delays to oPrior! registers a new op!
                .fail(function () {
                    that._pendingContainerOperations_cancelAddNext(sContainerKey, oDeferred); // reinstall oPrior (!)
                    oDeferred.reject();
                })
                .done(function (oContainer) {
                    var oAdapterForValidity = that._oAdapter;
                    // install the "latest" deferred 
                    that._pendingContainerOperations_cancelAddNext(sContainerKey, oDeferred); // the getContainer above executed a load --> no flush required 
                    if (oScope.validity === 0) {
                        oAdapterForValidity = new sap.ushell.services.Personalization.WindowValidityPersistenceAdapter(that);
                    }
                    oAdapterForValidity.delAdapterContainer(sPrefixedContainerKey)
                        .fail(function () {
                            oDeferred.reject();
                        })
                        .done(function () {
                            oDeferred.resolve();
                        });
                });
        });
        return oDeferred.promise();
    };


    // return old promise, 
    // add oDeferred as new, if null , retain old!
    sap.ushell.services.Personalization.prototype._pendingContainerOperations_flushAddNext = function (sContainerKey, oDeferred) {
        var oPendingOpDeferred,
            fnSave;
        oPendingOpDeferred = this._oPendingOperationsMap.get(sContainerKey);
        if (!oPendingOpDeferred) {
            oPendingOpDeferred = new jQuery.Deferred();
            oPendingOpDeferred.resolve();
        }
        if (oDeferred !== null) {
            this._oPendingOperationsMap.put(sContainerKey, oDeferred);
        }
        if (!oPendingOpDeferred || oPendingOpDeferred.state() !== "pending") {
            return oPendingOpDeferred;
        }
        clearTimeout(oPendingOpDeferred._sapTimeoutId); //system function!
        oPendingOpDeferred._sapTimeoutId = undefined;
        if (typeof oPendingOpDeferred._sapFnSave === "function") {
            fnSave = oPendingOpDeferred._sapFnSave;
            oPendingOpDeferred._sapFnSave = undefined; // function can only be triggered at most one time
            fnSave();
        }
        return oPendingOpDeferred;
    };


    sap.ushell.services.Personalization.prototype._pendingContainerOperations_cancelAddNext = function (sContainerKey, oDeferred) {
        var oPendingOpDeferred,
            fnSave;
        oPendingOpDeferred = this._oPendingOperationsMap.get(sContainerKey);
        if (!oPendingOpDeferred) {
            oPendingOpDeferred = new jQuery.Deferred();
            oPendingOpDeferred.resolve();
        }
        if (oDeferred !== null) {
            this._oPendingOperationsMap.put(sContainerKey, oDeferred);
        }
        if (!oPendingOpDeferred || oPendingOpDeferred.state() !== "pending") {
            return oPendingOpDeferred;
        }
        if (oPendingOpDeferred._sapTimeoutId) {
            clearTimeout(oPendingOpDeferred._sapTimeoutId);
            oPendingOpDeferred._sapTimeoutId = undefined;
            oPendingOpDeferred.resolve(sap.ushell.services.Personalization.prototype.SAVE_DEFERRED_DROPPED);
        }
        return oPendingOpDeferred;
    };

     /**
     * This interface is deprecated since 1.22, 
     * please use getContainer / delContainer.
     * 
     * Note: the underlying storage model for Objects stored with getContainer / getPersonalizationContainer
     * is identical.<br/>
     * Thus you can safely migrate your client implementation from the deprecated getContainer to 
     * getPersonalizationContainer without loss of data. 
     * One may even run mixed set of applications on the same container keys.
     * The sole differences are w.r.t. client side handling of the Context data within one session.
     *
     * If you want to use the variant interface, use the following pattern 
     * <code>
     *  getContainer(sContainerKey).done(function(oContainer) {
     *     var variantSetAdapter = new sap.ushell.services.Personalization.VariantSetAdapter(oContainer); 
     * }
     * </code>
     * 
     * 
     * Factory method to obtain a personalization container 
     * object which is a client-local buffer for personalization data. 
     * The Container data is asynchronously read on creation (if present, 
     * otherwise an initial object is created). 
     * The Container data can then be *synchronously* modified (read/write/delete). 
     * Only on invoking  the save() method the data is persisted on the back-end. 
     * This allows the application to perform multiple local modifications and 
     * delay the save operation. 
     * Note that the personalization container allows the application to 
     * control the round trips to the back-end persistence. The factory method 
     * getPersonalizationContainer is asynchronous and loads the container via 
     * the connected adapter from the back-end. All operations (but for the 
     * save operation) are executed synchronously, operating on the local data.
     * This allows the application to control the round trips to the back-end 
     * persistence.
     *
     * A personalization container can contain items as well as variant sets.
     * Variant sets have the following structure:
     * variantSet.variant.item
     * A variant set is enclosing several variants of the same data.
     * 
     * Example: An application has two types of variants. 
     * Variant type 1 contains filter values for a query, which are stored in item 1 of
     * the variant, and personalization data for a table, which are stored in item 2
     * of the variant.
     * Variant type 2 contains a setting (item 3) that is independent of
     * the filtering and the table settings. It might be used for a different
     * screen than the variants of type 1.
     * In this example you would have 2 variant sets, one for each variant type.
     *
     * Do not mix up the usage of a personalizer and a personalization container
     * for one containerKey.
     *
     * @param {string}
     *            sContainerKey - identifies the container
     * 
     * @returns {object} Promise object whose done function returns a
     *            {@link sap.ushell.services.PersonalizationContainer} object 
     *            as parameter. The personalization container provides two different 
     *            interfaces to synchronously operate on personalization data. 
     *            In the item mode the container contains items as name-value pairs for 
     *            personalization data. 
     *            In the variant mode the container contains variant sets which contain 
     *            variants containing items.
     *
     * @deprecated use getContainer()
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.Personalization.prototype.getPersonalizationContainer = function (sContainerKey) {
        var sPrefixedContainerKey = "",
            oContainer = {},
            oPromiseContainer = {},
            oDeferred = {},
            that = this;

        if (typeof sContainerKey !== "string") {
            throw new sap.ushell.utils.Error("sContainerKey is not a string: sap.ushell.services.Personalization");
        }
        sPrefixedContainerKey = addContainerPrefix(sContainerKey);
        if (this._oContainerMap.containsKey(sPrefixedContainerKey)) {
            return this._oContainerMap.get(sPrefixedContainerKey).promise();
        }
        oDeferred = new jQuery.Deferred();
        oPromiseContainer = new sap.ushell.services.PersonalizationContainer(this._oAdapter, sPrefixedContainerKey);
        oPromiseContainer
            .done(function (oContainer) {
                oDeferred.resolve(oContainer);
            })
            .fail(function (oContainer) {
                oDeferred.reject(oContainer);
            });
        this._oContainerMap.put(sPrefixedContainerKey, oDeferred);
        return oDeferred.promise();
    };

    /**
     * @deprecated Please use getContainer / delContainer 
     * Asynchronously starts a deletion request for the given container identified by 
     * sContainerKey. Can be called without having ever created a personalization container.
     * 
     * Note: After invoking this operation, the state of other PersonalizationContainers 
     * obtained for the same key is undefined! 
     * If you want to use the container after deletion, it is strongly recommended to obtain
     * a new instance of PersonalizationContainer for the given key *after* the promise has returned. 
     *
     * Note: Invoking this operation while another save or load operation is under way may result in failure. 
     *
     * @param {string} sContainerKey
     *           identifies the container
     *
     * @returns {object} 
     *          promise for the deletion operation
     *
     * @deprecated
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.Personalization.prototype.delPersonalizationContainer = function (sContainerKey) {
        // delete the bag, the adapter container & the container
        var oContainer = {},
            oDeferred = {},
            sPrefixedContainerKey = "",
            that = this;

        sPrefixedContainerKey = addContainerPrefix(sContainerKey);
        oDeferred = new jQuery.Deferred();
        this.getPersonalizationContainer(sContainerKey)
            .fail(function () {
                // TODO 
                oDeferred.reject();
            })
            .done(function (oContainer) {
                that._oAdapter.delAdapterContainer(sPrefixedContainerKey)
                    .fail(function () {
                        // TODO
                        oDeferred.reject();
                    })
                    .done(function () {
                        that._oContainerMap.remove(sPrefixedContainerKey);
                        oDeferred.resolve();
                    });
            });
        return oDeferred.promise();
    };

    // --------------------------
    // ------ Personalizer ------
    // --------------------------
    /**
     * To be called by the personalization service getPersonalizer method.
     *
     * @class The Unified Shell personalizer providing set get delete
     *        methods to access the persisted personalization data in direct mode.
     *
     * @public
     * @since 1.15.0
     */
    sap.ushell.services.Personalizer = function (oService, oAdapter, oPersId) {
        var CONTAINER_PREFIX = "sap.ushell.personalization#";
        this._sPersContainer = "";
        this._sPersItem = "";
        this._sPersVariant = null;
        this._oAdapter = {};
        this._oService = {};

        this._oService = oService;
        this._oAdapter = oAdapter;
        if (!oPersId || !oPersId.container || !oPersId.item ||
                typeof oPersId.container !== "string" || typeof oPersId.item !== "string") {
            throw new sap.ushell.utils.Error("Invalid input for oPersId: sap.ushell.services.Personalization");
        }
        this._sPersContainer = oPersId.container; // prefix is added in container constructor
        this._sPersItem = oPersId.item;
    };

    sap.ushell.services.Personalizer.prototype._getContainer = function (sPersContainer) {
        if (!this._oGetContainerPromise) {
            this._oGetContainerPromise = this._oService.getContainer(sPersContainer);
        }
        return this._oGetContainerPromise;
    };

    /**
     * Gets a personalization data value.
     * 
     * @returns {object} 
     *          Promise object which provides the personalization value.
     *          Promise object done function: param {object} oValue JSON
     *          object containing the personalization value. If there is no
     *          personalization data for the item, undefined is returned. Promise
     *          object fail function: param {string} sMessage Error message.
     *
     * @public
     * @since 1.15.0
     */
    sap.ushell.services.Personalizer.prototype.getPersData = function () {
        // async
        var oDeferred = {},
            that = this;

        oDeferred = new jQuery.Deferred();
        this._getContainer(this._sPersContainer)
            .fail(function () {
                // TODO 
                oDeferred.reject();
            })
            .done(function (oContainer) {
                oDeferred.resolve(oContainer.getItemValue(that._sPersItem));
            });

        oDeferred.fail(function () {
            jQuery.sap.log.error("Fail to get Personalization data for Personalizer container: " + that._sPersContainer);
        });
        return oDeferred.promise();
    };

    /**
     * Sets a personalization data value.
     *
     * @param {object} oValue
     *          JSON object containing the personalization value.
     * @returns {object} 
     *          Promise object which returns if the saving was
     *          successful or erroneous. Promise object done function: no
     *          params. Promise object fail function: param {string} sMessage
     *          Error message
     *
     * @public
     * @since 1.15.0
     */
    sap.ushell.services.Personalizer.prototype.setPersData = function (oValue) {
        // async
        var oDeferred = {},
            that = this;

        oDeferred = new jQuery.Deferred();
        this._getContainer(this._sPersContainer)
            .fail(function () {
                // TODO 
                oDeferred.reject();
            })
            .done(function (oContainer) {
                oContainer.setItemValue(that._sPersItem, oValue);
                oContainer.save()
                    .fail(function () {
                        // TODO
                        oDeferred.reject();
                    })
                    .done(function () {
                        oDeferred.resolve();
                    });
            });

        oDeferred.fail(function () {
            jQuery.sap.log.error("Fail to set Personalization data for Personalizer container: " + that._sPersContainer);
        });
        return oDeferred.promise();
    };
    /**
     * Deletes a personalization data value.
     *
     * @returns {object} 
     *          Promise object which returns if the deletion was
     *          successful or erroneous. Promise object done function: no
     *          params. Promise object fail function: param {string} sMessage
     *          Error message.
     *
     * @public
     * @since 1.15.0
     */
    sap.ushell.services.Personalizer.prototype.delPersData = function () {
        // async
        var oDeferred = {},
            that = this,
            oMessagingPromise;

        oDeferred = new jQuery.Deferred();
        this._oService.getPersonalizationContainer(this._sPersContainer)
            .fail(function () {
                // TODO
                oDeferred.reject();
            })
            .done(function (oContainer) {
                oContainer.delItem(that._sPersItem);
                oContainer.save()
                    .fail(function () {
                        // TODO
                        oDeferred.reject();
                    })
                    .done(function () {
                        oDeferred.resolve();
                    });
            });

        oMessagingPromise = oDeferred.promise();
        oMessagingPromise.fail(function () {
            jQuery.sap.log.error("Fail to delete Personalization data for Personalizer container: " + this._sPersContainer);
        });
        return oMessagingPromise;
    };

    // -----------------------------------
    // ------ TransientPersonalizer ------
    // -----------------------------------
    /**
     * To be called by the personalization service getTransientPersonalizer method.
     *
     * @class The transient personalizer shall be used
     *        in container mode for table personalization.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.TransientPersonalizer = function () {
        this._oValue = undefined;
    };

    /**
     * Gets a personalization data value.
     *
     * @returns {object} 
     *          Promise object which provides the personalization
     *          value. Promise object done function: param {object} oValue JSON
     *          object containing the personalization value. If there is no
     *          personalization data for the item, undefined is returned.
     *          Promise object fail function ins never triggered.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.TransientPersonalizer.prototype.getPersData = function () {
        var oDeferred;

        oDeferred = new jQuery.Deferred();
        oDeferred.resolve(this._oValue);
        return oDeferred.promise();
    };

    /**
     * Sets a personalization data value.
     *
     * @param {object} oValue 
     *          JSON object containing the personalization value.
     * @returns {object} 
     *          Promise object which returns if the saving was
     *          successful or erroneous. Promise object done function: no
     *          params. Promise fail function ins never triggered.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.TransientPersonalizer.prototype.setPersData = function (oValue) {
        var oDeferred;

        oDeferred = new jQuery.Deferred();
        this._oValue = oValue;
        oDeferred.resolve();
        return oDeferred.promise();
    };

    /**
     * Deletes a personalization data value.
     *
     * @returns {object} 
     *          Promise object which returns if the deletion was
     *          successful or erroneous. Promise object done function: no
     *          params. Promise object fail function ins never triggered.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.TransientPersonalizer.prototype.delPersData = function () {
        var oDeferred;

        oDeferred = new jQuery.Deferred();
        this._oValue = undefined;
        oDeferred.resolve();
        return oDeferred.promise();
    };

    /**
     * Synchronously sets a personalization data value.
     *
     * @param {object} oValue
     *            JSON object containing the personalization value.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.TransientPersonalizer.prototype.setValue = function (oValue) {
        this._oValue = oValue;
    };

    /**
     * Synchronously gets a personalization data value.
     *
     * @returns {object}
     *            JSON object containing the personalization value.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.TransientPersonalizer.prototype.getValue = function () {
        return this._oValue;
    };

    // -----------------------
    // ------ Container ------
    // -----------------------
    /**
     * To be called by the personalization service getPersonalizationContainer method.
     *
     * @class The personalization container is the anchor object of the unified shell 
     *        personalization in container mode.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer = function (oAdapter, sContainerKey) {
        this._sContainerKey = sContainerKey;
        this._oAdapterContainer = {};
        this._aLoadedVariantSetKeys = [];
        this._aLoadedItemKeys = [];
        var oDeferred = {},
            that = this;

        this._init();
        oDeferred = new jQuery.Deferred();
        if (!this._sContainerKey || typeof this._sContainerKey !== "string") {
            throw new sap.ushell.utils.Error("Invalid container key: sap.ushell.services.Personalization");
        }
        // get adapter container & load
        this._oAdapterContainer = oAdapter.getAdapterContainer(this._sContainerKey);
        this.load()
            .fail(function () {
                oDeferred.reject();
            })
            .done(function () {
                oDeferred.resolve(that);
            });
        return oDeferred.promise();
    };

    sap.ushell.services.PersonalizationContainer.prototype._init = function () {
        // resets all member variables of the personalization container
        this._oVariantSetMap = {};
        this._oItemMap = {};
        this._aLoadedVariantSetKeys = [];
        this._aLoadedItemKeys = [];
        this._oVariantSetMap = new sap.ushell.utils.Map();
        this._oItemMap = new sap.ushell.utils.Map();
    };

    function clone(oObject) {
        if (oObject === undefined) {
            return undefined;
        }
        try {
            return JSON.parse(JSON.stringify(oObject));
        } catch (e) {
            return undefined;
        }
    }

    function cloneToObject(oObject) {
        if (oObject === undefined) {
            return undefined;
        }
        try {
            return JSON.parse(oObject);
        } catch (e) {
            return undefined;
        }
    }

/**
 * (Re)loads the current container data from the underlying storage asynchronously.
 * The current local data is discarded. 
 *
 * Returns a promise for the load operation.
 * If another save/load/delete operation is not completed, the  operation may fail!
 * (wait for the other promise). 
 *
 * Synchronous read and write operations before the load is done have undefined 
 * effects.
 *
 * @returns {object}
 *          Promise object
 *
 * @public
 * @since 1.18.0
 */
    sap.ushell.services.PersonalizationContainer.prototype.load = function () {
        var oDeferred = {},
            aItemAndVaraintSetKeys = [],
            aVariantSetKeys = [],
            aItemKeys = [],
            aMigratedItemKeys = [],
            that = this;
        function migrateItemsToPrefix(aItemKeys) {
            // aItemKeys contains prefixed keys and unprefixed keys
            var aNonPrefixKeys = [],
                aPrefixKeys = [],
                aResultKeys = [];

            aNonPrefixKeys = aItemKeys.filter(function (s) {
                return s.indexOf(sITEM_PREFIX) !== 0;
                // match at first character -> index = 0 -> false -> filter out
                // match inside the string -> index > 0 -> true -> keep
                // no match -> index = -1 -> true -> keep
            });
            if (aNonPrefixKeys.length === 0) {
                return aItemKeys;
            }
            aPrefixKeys = aItemKeys.filter(function (s) {
                return s.indexOf(sITEM_PREFIX) === 0;
                // match at first character -> index = 0 -> true -> keep
                // match inside the string -> index > 0 -> false -> filter out
                // no match -> index = -1 -> false -> filter out
            });
            aNonPrefixKeys.forEach(function (sItemKey) {
                var oItemValue = {},
                    sPrefixedItemKey = "";
                sPrefixedItemKey = sITEM_PREFIX + sItemKey;
                oItemValue = clone(that._oAdapterContainer.getItemValue(sItemKey));
                // create a new prefixed item at the container
                that._oAdapterContainer.setItemValue(sPrefixedItemKey, oItemValue);
                    // delete the non prefixed item at the container
                that._oAdapterContainer.delItem(sItemKey);
                if (jQuery.inArray(sPrefixedItemKey, aPrefixKeys) === -1) {
                    aPrefixKeys.push(sPrefixedItemKey);
                }
            });
            return aPrefixKeys;
        }

        oDeferred = new jQuery.Deferred();
        if (!this._sContainerKey) {
            throw new sap.ushell.utils.Error("Invalid container key: sap.ushell.services.Personalization");
        }
        // delete local data
        this._init();
        // get adapter container & load
        this._oAdapterContainer.load()
            .fail(function () {
                // TODO
                oDeferred.reject();
            })
            .done(function () {
                aItemAndVaraintSetKeys = that._oAdapterContainer.getItemKeys().splice(0);
                aVariantSetKeys = aItemAndVaraintSetKeys.filter(function (s) {
                    return s.indexOf(sVARIANT_PREFIX) === 0;
                    // match at first character -> index = 0 -> true -> keep
                    // match inside the string -> index > 0 -> false -> filter out
                    // no match -> index = -1 -> false -> filter out
                });
                aVariantSetKeys.forEach(function (sVariantSetKey) {
                    var oVariantSet = {};
                    oVariantSet = new sap.ushell.services.PersonalizationContainerVariantSet(sVariantSetKey, that._oAdapterContainer);
                    that._oVariantSetMap.put(sVariantSetKey, oVariantSet);
                });
                aItemKeys = aItemAndVaraintSetKeys.filter(function (s) {
                    return s.indexOf(sVARIANT_PREFIX) !== 0;
                    // match at first character -> index = 0 -> false -> filter out
                    // match inside the string -> index > 0 -> true -> keep
                    // no match -> index = -1 -> true -> keep
                });
                aMigratedItemKeys = migrateItemsToPrefix(aItemKeys);
                aMigratedItemKeys.forEach(function (sItemKey) {
                    that._oItemMap.put(sItemKey, clone(that._oAdapterContainer.getItemValue(sItemKey)));
                });
                that._aLoadedVariantSetKeys = that._oVariantSetMap.keys().splice(0);
                that._aLoadedItemKeys = that._oItemMap.keys().splice(0);
                oDeferred.resolve();
            });
        return oDeferred.promise();
    };

    // -- common interface --  
    /**
     * Attempts to save the current container data at the underlying storage asynchronously.
     * The current state is serialized. 
     * @returns {object} 
     *             Promise object
     *
     * If another save/load/delete operation is not completed, the  operation may fail!
     * (wait for the other promise). 
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.save = function () {
        // async
        var oSaveContainer,
            oInnerPromise;
        this._serializeVariantSets();
        this._serializeItems();

        oSaveContainer = new jQuery.Deferred();
        function fnSaveSuccess() {
            oSaveContainer.resolve();
        }
        function fnSaveError() {
            oSaveContainer.reject();
        }
        try {
            oInnerPromise = this._oAdapterContainer.save(); // promise
            oInnerPromise.fail(fnSaveError);
            oInnerPromise.done(fnSaveSuccess);
        } catch (e) {
            oSaveContainer.reject();
        }
        return oSaveContainer.promise();
    };

    // -- item interface --
    /**
     * Returns an array with the keys of direct items in the container. 
     * @returns {array} 
     *             item keys
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.getItemKeys = function () {
        return this._oItemMap.keys().map(function (sEntry) {
            return sEntry.replace(sITEM_PREFIX, "", "");
        });
    };

    /**
     * Returns the value for a direct item from the container. 
     * @param {string} sItemKey
     *            item key
     * @returns {object} 
     *            item value (JSON object). In case the container does not contain a direct item with this key 
     * <code>undefined</code> is returned.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.getItemValue = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        return this._oItemMap.get(sITEM_PREFIX + sItemKey);
    };

    /**
     * Checks if a specific direct item is contained in the container. 
     * @param {string} sItemKey
     *            item key
     * @returns {boolean} 
     *            <tt>true</tt> if the container contains a direct item with the key
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.containsItem = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        return this._oItemMap.containsKey(sITEM_PREFIX + sItemKey);
    };

    /**
     * Sets the value of a direct item in the container.
     * In case the item is already existing its value is overwritten. In case it is not
     * existing a new item with this key and value is created.
     * @param {string} sItemKey
     *            item key
     * @param {object} sItemValue
     *            item value (JSON object)
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.setItemValue = function (sItemKey, oItemValue) {
        if (typeof sItemKey !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sItemKey is not a string: sap.ushell.services.Personalization");
        }
        this._oItemMap.put(sITEM_PREFIX + sItemKey, oItemValue);
    };

    /**
     * Deletes a direct item from the container.
     * In case the item does not exist, nothing happens.
     * @param {string} sItemKey
     *            item key
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.delItem = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        if (this.containsItem(sItemKey)) {
            this._oItemMap.remove(sITEM_PREFIX + sItemKey);
        }
    };

    sap.ushell.services.PersonalizationContainer.prototype._serializeItems = function () {
        var aItemKeys = [],
            aDiff = [],
            that = this;

        aItemKeys = this._oItemMap.keys();
        aItemKeys.forEach(function (sItemKey) {
            that._oAdapterContainer.setItemValue(sItemKey, clone(that._oItemMap.get(sItemKey)));
        });
        aDiff = this._aLoadedItemKeys.filter(function (sItemKey) {return !(aItemKeys.indexOf(sItemKey) > -1); });
        aDiff.forEach(function (sItemKey) {
            that._oAdapterContainer.delItem(sItemKey);
        });
    };

    // -- variant interface --
    /**
     * Returns an array with the keys of the variant sets in the container. 
     * @returns {array} 
     *             variant set keys
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.getVariantSetKeys = function () {
        var aAllKeys = [],
            aVariantSetKeys = [],
            aPrefixVariantSetKeys = [],
            that = this;

        aPrefixVariantSetKeys = this._oVariantSetMap.keys();
        aVariantSetKeys = aPrefixVariantSetKeys.map(function (sEntry) {
            return sEntry.replace(sVARIANT_PREFIX, "", "");
        });
        return aVariantSetKeys;
    };
    /**
     * Checks if a specific variant set is contained in the container. 
     * @param {string} sVariantSetKey
     *            variant set key
     * @returns {boolean} 
     *            <tt>true</tt> if the container contains a variant set with the key
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.containsVariantSet = function (sVariantSetKey) {
        return this._oVariantSetMap.containsKey(sVARIANT_PREFIX
                + sVariantSetKey);
    };
    /**
     * Returns the variant set object from the container. 
     * @param {string} sVariantSetKey
     *            variant set key
     * @returns {object} 
     *            {@link sap.ushell.services.PersonalizationContainerVariantSet}. 
     *            In case the container does not contain a variant set with this key
     *            <code>undefined</code> is returned.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.getVariantSet = function (sVariantSetKey) {
        var sPrefixedVariantSetKey,
            oVariantSet = {},
            oMapVariantSet = {};

        sPrefixedVariantSetKey = sVARIANT_PREFIX + sVariantSetKey;
        oVariantSet = this._oVariantSetMap.get(sPrefixedVariantSetKey);
        return oVariantSet;
    };
    /**
     * Creates a new variant set in the container.
     * In case a variant set with this key is already existing an exception is thrown. 
     * @param {string} sVariantSetKey
     *            variant set key
     * @returns {object} 
     *            {@link sap.ushell.services.PersonalizationContainerVariantSet}
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.addVariantSet = function (sVariantSetKey) {
        var oEmptyValue = {},
            oVariantSet = {},
            sPrefixedVariantSetKey = "";

        if (this.containsVariantSet(sVariantSetKey)) {
            throw new sap.ushell.utils.Error("Container already contains a variant set with key '"
                            + sVariantSetKey
                            + "': sap.ushell.services.Personalization");
        }
        sPrefixedVariantSetKey = sVARIANT_PREFIX + sVariantSetKey;
        oEmptyValue = {
            currentVariant : null,
            variants : {}
        };
        this._oAdapterContainer.setItemValue(sPrefixedVariantSetKey,
                oEmptyValue);

        oVariantSet = new sap.ushell.services.PersonalizationContainerVariantSet(sPrefixedVariantSetKey, this._oAdapterContainer);
        this._oVariantSetMap.put(sPrefixedVariantSetKey, oVariantSet);
        return oVariantSet;
    };

    sap.ushell.services.PersonalizationContainer.prototype._serializeVariantSets = function () {
        var aVariantSetKeys = [],
            sVariantSetKey = "",
            aDiff = [],
            that = this;

        aVariantSetKeys = this._oVariantSetMap.keys();
        aVariantSetKeys.forEach(function (sVariantSetKey) {
            var oVariantSet = {},
                oVariantSetData = {};
            oVariantSet = that._oVariantSetMap.get(sVariantSetKey);
            // variant set object was instantiated -> serialize
            oVariantSetData = oVariantSet._serialize();
            that._oAdapterContainer.setItemValue(sVariantSetKey, clone(oVariantSetData));
        });
        aDiff = this._aLoadedVariantSetKeys.filter(function (sVariantSetKey) {return !(aVariantSetKeys.indexOf(sVariantSetKey) > -1); });
        aDiff.forEach(function (sVariantSetKey) {
            that._oAdapterContainer.delItem(sVariantSetKey);
        });
    };

    /**
     * Deletes a variant set from the container.
     * In case the variant set does not exist nothing happens.
     * @param {string} sVariantSetKey
     *            variant set key
     *
     * @public
     * @since 1.18.0
     */
    // TODO check if deleting a non-existing variant set goes through
    sap.ushell.services.PersonalizationContainer.prototype.delVariantSet = function (sVariantSetKey) {
        var sPrefixedVariantSetKey = "";

        sPrefixedVariantSetKey = sVARIANT_PREFIX + sVariantSetKey;
        this._oVariantSetMap.remove(sPrefixedVariantSetKey);
        return this._oAdapterContainer.delItem(sPrefixedVariantSetKey);
    };



    // -----------------------
    // ------ Container ------
    // -----------------------
    /**
     * To be called by the personalization service getContainer method.
     *
     * @class The container is the anchor object of the unified shell 
     *        personalization in container mode.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer = function (oService, oAdapter, sContainerKey, oScope) {
        this._oService = oService;
        this._sContainerKey = sContainerKey;
        this._oAdapterContainer = {};
        this._oScope = oScope || { validity : Infinity };
        this._aLoadedKeys = [];
        var oDeferred = {},
            that = this;

        this.clear();
        if (!this._sContainerKey || typeof this._sContainerKey !== "string") {
            throw new sap.ushell.utils.Error("Invalid container key: sap.ushell.services.Personalization");
        }
        this._oAdapterContainer = oAdapter.getAdapterContainer(this._sContainerKey);
        return this;
    };

    /**
     * return the validity of this container
     * @deprecated only for testing!
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.getValidity = function () {
        return this._oScope.validity;
    };

    /**
     * clears the local copy data of this container
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.clear = function () {
        // resets all member variables of the personalization container
        this._oItemMap = {};
        this._aLoadedItemKeys = [];
        this._clear = true;
        this._oItemMap = new sap.ushell.utils.Map();
    };


    /**
    * (Re)loads the current container data from the underlying storage asynchronously.
    * The current local data is discarded. 
    *
    * Returns a promise for the load operation.
    * If another save/load/delete operation is not completed, the  operation may fail!
    * (wait for the other promise). 
    *
    * Synchronous read and write operations before the load is done have undefined 
    * effects.
    *
    * @returns {object}
    *          Promise object
    *
    * @public
    * @since 1.22.0
    */
    sap.ushell.services.Personalization.ContextContainer.prototype.load = function () {
        var oDeferred = {},
            aAllKeys = [],
            oPrior,
            that = this;

        oDeferred = new jQuery.Deferred();
        if (!this._sContainerKey) {
            throw new sap.ushell.utils.Error("Invalid container key: sap.ushell.services.Personalization");
        }
        // delete local data
        this.clear();
        oPrior = this._oService._pendingContainerOperations_flushAddNext(this._sContainerKey, oDeferred);
        // get adapter container & load
        oPrior.always(function () {
            that._oAdapterContainer.load().fail(function () {
                // TODO
                oDeferred.reject();
            }).done(function () {
                that._copyFromAdapter();
                oDeferred.resolve();
            });
        });
        return oDeferred.promise();
    };

    // copy data from adapter to local storage
    sap.ushell.services.Personalization.ContextContainer.prototype._copyFromAdapter = function () {
        var that = this,
            aAllKeys;
        aAllKeys = that._oAdapterContainer.getItemKeys().splice(0);
        aAllKeys.forEach(function (sItemKey) {
            that._oItemMap.put(sItemKey, JSON.stringify(that._oAdapterContainer.getItemValue(sItemKey)));
        });
        this._aLoadedItemKeys = that._oItemMap.keys().splice(0);
    };


    sap.ushell.services.Personalization.ContextContainer.prototype._isExpired = function () {
        var that = this,
            oFormatter,
            sTimestampExpire,
            sTimestampNow;
        if (this.getValidity() === Infinity || this.getValidity() === 0) {
            return false;
        }
        sTimestampExpire = this._getItemValueInternal(sADMIN_PREFIX, sITEMKEY_EXPIRE);
        oFormatter = sap.ui.core.format.DateFormat.getDateInstance({ pattern : sABAPTIMESTAMPFORMAT});
        sTimestampNow = oFormatter.format(this._getNow(), true);
        return sTimestampExpire && sTimestampNow > sTimestampExpire;
    };

    sap.ushell.services.Personalization.ContextContainer.prototype._getNow = function () {
        return new Date();
    };

    sap.ushell.services.Personalization.ContextContainer.prototype._copyToAdapterUpdatingValidity = function () {
        var aItemKeys = [],
            aDiff = [],
            that = this,
            oNow,
            oFormatter,
            sTimestampExpire,
            sTimestampStorage;
        if (this._clear) {
            aItemKeys = this._oAdapterContainer.getItemKeys().splice(0);
            aItemKeys.forEach(function (sItemKey) {
                that._oAdapterContainer.delItem(sItemKey);
            });
            this._clear = false;
        }
        if (this.getValidity() === Infinity || this.getValidity() === 0) {
            this._delItemInternal(sADMIN_PREFIX, sITEMKEY_SCOPE);
            this._delItemInternal(sADMIN_PREFIX, sITEMKEY_EXPIRE);
            this._delItemInternal(sADMIN_PREFIX, sITEMKEY_STORAGE);
        } else {
            oFormatter = sap.ui.core.format.DateFormat.getDateInstance({ pattern : sABAPTIMESTAMPFORMAT});
            oNow = this._getNow();
            sTimestampStorage = oFormatter.format(oNow, true); // true UTC times ! 
            sTimestampExpire = oFormatter.format(new Date(oNow.getTime() + this.getValidity() * 60000), /*UTC!*/ true);
            this._setItemValueInternal(sADMIN_PREFIX, sITEMKEY_SCOPE, this._oScope);
            this._setItemValueInternal(sADMIN_PREFIX, sITEMKEY_EXPIRE, sTimestampExpire);
            this._setItemValueInternal(sADMIN_PREFIX, sITEMKEY_STORAGE, sTimestampStorage);
        }
        aItemKeys = this._oItemMap.keys();
        aItemKeys.forEach(function (sItemKey) {
            that._oAdapterContainer.setItemValue(sItemKey, cloneToObject(that._oItemMap.get(sItemKey)));
        });
        aDiff = this._aLoadedItemKeys.filter(function (sItemKey) {return !(aItemKeys.indexOf(sItemKey) > -1); });
        aDiff.forEach(function (sItemKey) {
            that._oAdapterContainer.delItem(sItemKey);
        });
    };
    // -- common interface --  
    /**
     * Attempts to save the current container data at the underlying storage asynchronously.
     * The current state is serialized. 
     * @returns {object} 
     *             Promise object
     *
     * If another save/load/delete operation is not completed, the  operation may fail!
     * (wait for the other promise). 
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.save = function () {
        // async
        var oSaveDeferred,
            oInnerDeferred,
            oPrior,
            that = this;
        this._copyToAdapterUpdatingValidity();
        oSaveDeferred = new jQuery.Deferred();
        oPrior = this._oService._pendingContainerOperations_cancelAddNext(this._sContainerKey, oSaveDeferred);
        oPrior.always(function () {
            try {
                oInnerDeferred = that._oAdapterContainer.save() // promise
                    .fail(function () { oSaveDeferred.reject(); })
                    .done(function () { oSaveDeferred.resolve(); });
            } catch (e) {
                oSaveDeferred.reject();
            }
        });
        return oSaveDeferred.promise();
    };

    /**
     * Save the current container data at the underlying storage asynchronously at the earlies
     * nDelayInMilliseconds seconds before.
     * The current state is serialized.
     * 
     * @returns {object} 
     *             Promise object
     *
     * The operation may wait for completion of another pending operation.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.saveDeferred = function (nDelayInMilliseconds) {
        // async
        var oSaveDeferred,
            oInnerDeferred,
            oPrior,
            that = this;


        this._copyToAdapterUpdatingValidity();
        oSaveDeferred = new jQuery.Deferred();
        oPrior = this._oService._pendingContainerOperations_cancelAddNext(this._sContainerKey, oSaveDeferred);

        function fnDelayedSave() {
            oPrior.always(function () {
                try {
                    oInnerDeferred = that._oAdapterContainer.save() // promise
                        .fail(function () { oSaveDeferred.reject(); })
                        .done(function () { oSaveDeferred.resolve(); });
                } catch (e) {
                    oSaveDeferred.reject();
                }
            });
        }

        oSaveDeferred._sapFnSave = fnDelayedSave;
        oSaveDeferred._sapTimeoutId = setTimeout(fnDelayedSave, nDelayInMilliseconds);
        // we want to delay at least 200 ms,
        return oSaveDeferred.promise();
    };

    /**
     * flush all pending request;
     * The result of the promise may reflect the last pending operation in the queue
     * @returns {object} promise
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.flush = function () {
        // async
        var oSaveDeferred,
            oInnerDeferred,
            oPrior,
            that = this;
        this._copyToAdapterUpdatingValidity();
        oSaveDeferred = new jQuery.Deferred();
        oPrior = this._oService._pendingContainerOperations_flushAddNext(this._sContainerKey, oSaveDeferred);
        oPrior.fail(function () { oSaveDeferred.reject(); })
              .done(function () { oSaveDeferred.resolve(); });
        return oSaveDeferred.promise();
    };

    // -- item interface --
    /**
     * Returns an array with the keys of direct items in the container. 
     * @returns {array} 
     *             item keys
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.getItemKeys = function () {
        // return a list of the (prefix stripped)  "Item" keys. 
        var aFilteredTrueItemKeys = this._oItemMap.keys().filter(function (s) {
                return s.indexOf(sITEM_PREFIX) === 0;
                // match at first character -> index = 0 -> true -> keep
                // match inside the string -> index > 0 -> false -> filter out
                // no match -> index = -1 -> false -> filter out
            });
        return aFilteredTrueItemKeys.map(function (sEntry) {
            return sEntry.replace(sITEM_PREFIX, "", "");
        });
    };

    /**
     * Returns an array with all internal  keys of direct items in the container. 
     * @returns {array} 
     *             item keys
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype._getInternalKeys = function () {
        return this._oItemMap.keys().splice(0);
    };
    /**
     * Returns the value for a direct item from the container. 
     * (Value semantics, new copy is returned)
     * @param {string} sItemKey
     *            item key
     * @returns {object} 
     *            item value (JSON object). In case the container does not contain a direct item with this key 
     * <code>undefined</code> is returned.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.getItemValue = function (sItemKey) {
        return this._getItemValueInternal(sITEM_PREFIX, sItemKey);
    };

    sap.ushell.services.Personalization.ContextContainer.prototype._getItemValueInternal = function (sPrefix, sItemKey) {
        if (typeof sItemKey !== "string" || typeof sPrefix !== "string") {
            return undefined;
        }
        return cloneToObject(this._oItemMap.get(sPrefix + sItemKey));
    };
    /**
     * Checks if a specific direct item is contained in the container. 
     * @param {string} sItemKey
     *            item key
     * @returns {boolean} 
     *            <tt>true</tt> if the container contains a direct item with the key
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.containsItem = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        return this._oItemMap.containsKey(sITEM_PREFIX + sItemKey);
    };

    /**
     * Sets the value of a direct item in the container.
     * In case the item is already existing its value is overwritten. In case it is not
     * existing a new item with this key and value is created.
     * The value is serialized during set
     * @param {string} sItemKey
     *            item key
     *            The string length is restricted to 40 characters
     * @param {object} sItemValue
     *            item value (JSON object)
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.setItemValue = function (sItemKey, oItemValue) {
        this._setItemValueInternal(sITEM_PREFIX, sItemKey, oItemValue);
    };



    sap.ushell.services.Personalization.ContextContainer.prototype._setItemValueInternal = function (sItemPrefix, sItemKey, oItemValue) {
        if (typeof sItemKey !== "string" || typeof sItemPrefix !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sItemKey or sItemValue is not a string: sap.ushell.services.Personalization");
        }
        if (sItemKey.length > 40) {
            jQuery.sap.log.error("Personalization Service item key/variant set name (\"" + sItemKey + "\") should be less than 40 characters [current :" + sItemKey.length + "]");
        }
        this._oItemMap.put(sItemPrefix + sItemKey, JSON.stringify(oItemValue));
    };

    /**
     * Deletes a direct item from the container.
     * In case the item does not exist, nothing happens.
     * @param {string} sItemKey
     *            item key
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.delItem = function (sItemKey) {
        this._delItemInternal(sITEM_PREFIX, sItemKey);
    };

    sap.ushell.services.Personalization.ContextContainer.prototype._delItemInternal = function (sPrefix, sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        if (typeof sPrefix !== "string") {
            return undefined;
        }
        this._oItemMap.remove(sPrefix + sItemKey);
    };


    /** VariantSetAdapter 
    * amends ContextContainer with functionality to
    * 
    * Example: An application has two types of variants. 
    * Variant type 1 contains filter values for a query, which are stored in item 1 of
    * the variant, and personalization data for a table, which are stored in item 2
    * of the variant.
    * Variant type 2 contains a setting (item 3) that is independent of
    * the filtering and the table settings. It might be used for a different
    * screen than the variants of type 1.
    * In this example you would have 2 variant sets, one for each variant type.
    *
    * @class Wrapper object to expose a variant interface on a 
    *        ContextContainer object obtained from the Peronalization service:
    *        <code>
    *        getContainer(...).done( function(oContainer) { 
    *           that.oVariantSetContainer = new sap.ushell.services.Personalization.VariantSetAdapater(oContainer);
    *           });
    *        </code>
    *
    * @public
    * @since 1.18.0
    */
    sap.ushell.services.Personalization.VariantSetAdapter = function (oContextContainer) {
        this._oContextContainer = oContextContainer;
    };

    sap.ushell.services.Personalization.VariantSetAdapter.prototype.save = function () {
        return this._oContextContainer.save();
    };

    // -- variant interface --
    /**
     * Returns an array with the keys of the variant sets in the container. 
     * @returns {array} 
     *             variant set keys
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.Personalization.VariantSetAdapter.prototype.getVariantSetKeys = function () {
        var aPrefixVariantSetKeys = this._oContextContainer._getInternalKeys(),
            aVariantSetKeys = [];
        aVariantSetKeys = aPrefixVariantSetKeys.map(function (sEntry) {
            return sEntry.replace(sVARIANT_PREFIX, "", "");
        });
        return aVariantSetKeys;
    };
    /**
     * Checks if a specific variant set is contained in the container. 
     * @param {string} sVariantSetKey
     *            variant set key
     * @returns {boolean} 
     *            <tt>true</tt> if the container contains a variant set with the key
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.Personalization.VariantSetAdapter.prototype.containsVariantSet = function (sVariantSetKey) {
        return this.getVariantSetKeys().indexOf(sVariantSetKey) >= 0;
    };

    /**
     * Returns the variant set object from the container. 
     * @param {string} sVariantSetKey
     *            variant set key
     *            The string length is restricted to 40 characters
     * @returns {object} 
     *            {@link sap.ushell.services.PersonalizationContainerVariantSet}. 
     *            In case the container does not contain a variant set with this key
     *            <code>undefined</code> is returned.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSetAdapter.prototype.getVariantSet = function (sVariantSetKey) {
        var oVariantSet = this._oContextContainer._getItemValueInternal(sVARIANT_PREFIX, sVariantSetKey);
        if (!oVariantSet) {
            return undefined;
        }
        return new sap.ushell.services.Personalization.VariantSet(sVariantSetKey, this._oContextContainer);
    };
    /**
     * Creates a new variant set in the container.
     * In case a variant set with this key is already existing an exception is thrown. 
     * @param {string} sVariantSetKey
     *            variant set key
     * @returns {object} 
     *            {@link sap.ushell.services.PersonalizationContainerVariantSet}
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSetAdapter.prototype.addVariantSet = function (sVariantSetKey) {
        var oEmptyValue = {},
            oVariantSet = {},
            sPrefixedVariantSetKey = "";

        if (this.containsVariantSet(sVariantSetKey)) {
            throw new sap.ushell.utils.Error("Container already contains a variant set with key '"
                            + sVariantSetKey
                            + "': sap.ushell.services.Personalization");
        }
        oEmptyValue = {
            currentVariant : null,
            variants : {}
        };
        this._oContextContainer._setItemValueInternal(sVARIANT_PREFIX, sVariantSetKey,
                oEmptyValue);
        oVariantSet = new sap.ushell.services.Personalization.VariantSet(sVariantSetKey, this._oContextContainer);
        return oVariantSet;
    };

    /**
     * Deletes a variant set from the container.
     * In case the variant set does not exist nothing happens.
     * @param {string} sVariantSetKey
     *            variant set key
     *
     * @public
     * @since 1.22.0
     */
    // TODO check if deleting a non-existing variant set goes through
    sap.ushell.services.Personalization.VariantSetAdapter.prototype.delVariantSet = function (sVariantSetKey) {
        this._oContextContainer._delItemInternal(sVARIANT_PREFIX, sVariantSetKey);
    };


    // --- Variant Set ---
    /**
     * A VariantSet is a class representing a collection of 
     * Variants (identified by a key and name)
     * and a member variable indicating the 
     * "current variable"
     * 
     * When manipulating the underlying data, additional constraints are enforced.
     *
     * To be called by the personalization container.
     *
     * @class The personalization variant set contains variants of personalization data.
     *        It is used in the personalization container mode.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSet = function (sVariantSetKey, oContextContainer) {
        var sVariantKey,
            sVariantName,
            sCurrentVariantKey,
            oVariantNameMap = new sap.ushell.utils.Map(),
            oVariantMap = new sap.ushell.utils.Map(),
            oVariantData,
            oVariant,
            sVariantPartKey;
        this._oContextContainer = oContextContainer;
        this._sVariantSetKey = sVariantSetKey;
        this._oVariantSetData = this._oContextContainer._getItemValueInternal(sVARIANT_PREFIX, this._sVariantSetKey);

        if (Object.prototype.hasOwnProperty.call(this._oVariantSetData, "currentVariant")) {
            sCurrentVariantKey = this._oVariantSetData.currentVariant;
        } else {
            throw new sap.ushell.utils.Error("Corrupt variant set data: sap.ushell.services.Personalization");
            // TODO variant set name + container
        }
        if (Object.prototype.hasOwnProperty.call(this._oVariantSetData, "variants")) {
            for (sVariantKey in this._oVariantSetData.variants) {
                if (Object.prototype.hasOwnProperty.call(this._oVariantSetData.variants, sVariantKey)) {
                    sVariantName = this._oVariantSetData.variants[sVariantKey].name;
                    oVariantData = this._oVariantSetData.variants[sVariantKey].variantData;
                    if (oVariantNameMap.containsKey(sVariantName)) {
                        throw new sap.ushell.utils.Error("Variant name already exists: sap.ushell.services.Personalization");
                        // TODO skip? log instead error
                    } else {
                        oVariantNameMap.put(sVariantName, sVariantKey);
                        oVariant = new sap.ushell.services.PersonalizationContainerVariant(sVariantKey,
                                sVariantName, oVariantData);
                        oVariantMap.put(sVariantKey, oVariant);
                    }
                }
            }
        } else {
            throw new sap.ushell.utils.Error("Corrupt variant set data: sap.ushell.services.Personalization");
        }
        return this;
    };

    sap.ushell.services.Personalization.VariantSet.prototype._getVariantSet = function () {
        return this._oVariantSetData;
    };

    sap.ushell.services.Personalization.VariantSet.prototype._serialize = function () {
        this._oContextContainer._setItemValueInternal(sVARIANT_PREFIX, this._sVariantSetKey, this._oVariantSetData);
    };

    /**
     * Returns the current variant key.
     * @returns {string} 
     *             current variant key. In case the current variant was never set <code>null</code> is returned.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSet.prototype.getCurrentVariantKey = function () {
        return this._getVariantSet().currentVariant;
    };

    /**
     * Sets the current variant key.
     * @param {string} sVariantKey
     *            There is no validity check for the variant key.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSet.prototype.setCurrentVariantKey = function (sVariantKey) {
        this._getVariantSet().currentVariant = sVariantKey;
        this._serialize();
    };

    /**
     * Returns an array with the keys of the variants in the variant set. 
     * @returns {array} 
     *             variant keys
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSet.prototype.getVariantKeys = function () {
        var oVariantMap = new sap.ushell.utils.Map(),
            oVariantSetData = this._getVariantSet(this._sVariantSetKey),
            sVariantKey;
        if (Object.prototype.hasOwnProperty.call(oVariantSetData, "variants")) {
            for (sVariantKey in oVariantSetData.variants) {
                if (Object.prototype.hasOwnProperty.call(oVariantSetData.variants, sVariantKey)) {
                    oVariantMap.put(sVariantKey, "dummy");
                }
            }
        } else {
            throw new sap.ushell.utils.Error("Corrupt variant set data: sap.ushell.services.Personalization");
        }
        return oVariantMap.keys();
    };

    sap.ushell.services.Personalization.VariantSet.prototype.getVariantNamesAndKeys = function () {
        var oVariantNameMap = new sap.ushell.utils.Map(),
            oVariantMap = new sap.ushell.utils.Map(),
            oVariantSetData = this._getVariantSet(this._sVariantSetKey),
            sVariantKey,
            sVariantName,
            oVariantData;
        if (Object.prototype.hasOwnProperty.call(oVariantSetData, "variants")) {
            for (sVariantKey in oVariantSetData.variants) {
                if (Object.prototype.hasOwnProperty.call(oVariantSetData.variants, sVariantKey)) {
                    sVariantName = oVariantSetData.variants[sVariantKey].name;
                    oVariantData = oVariantSetData.variants[sVariantKey].variantData;
                    if (oVariantNameMap.containsKey(sVariantName)) {
                        throw new sap.ushell.utils.Error("Variant name already exists: sap.ushell.services.Personalization");
                        // TODO skip? log instead error
                    } else {
                        oVariantNameMap.put(sVariantName, sVariantKey);
                    }
                    oVariantMap.put(sVariantKey, "dummy");
                }
            }
        } else {
            throw new sap.ushell.utils.Error("Corrupt variant set data: sap.ushell.services.Personalization");
        }
        return oVariantNameMap.entries;
    };

    /**
     * Returns a variant object. 
     * @param {string} sVariantKey
     *            variant key 
     * @returns {object} 
     *            {@link sap.ushell.services.PersonalizationContainerVariant}. 
     *            In case the variant set does not contain a variant with this key 
     *            <code>undefined</code> is returned.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSet.prototype.getVariant = function (sVariantKey) {
        if (typeof sVariantKey !== "string") {
            return undefined;
        }
        var oVariantSetData = this._getVariantSet(this._sVariantSetKey),
            sVariantName,
            oVariant,
            oVariantData;
        if (Object.prototype.hasOwnProperty.call(oVariantSetData, "variants") && Object.prototype.hasOwnProperty.call(oVariantSetData.variants, sVariantKey)) {
            sVariantName = oVariantSetData.variants[sVariantKey].name;
            oVariantData = oVariantSetData.variants[sVariantKey].variantData;
            oVariant = new sap.ushell.services.Personalization.Variant(this,
                                                                        sVariantKey,
                    sVariantName, oVariantData);
            return oVariant;
        }
        return undefined;
    };

    /**
     * Returns the variant key corresponding to a variant name. 
     * @param {string} sVariantName
     *            variant name 
     * @returns {string}
     *            variant key. In case the variant set does not contain a variant with this name 
     *            <code>undefined</code> is returned.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSet.prototype.getVariantKeyByName = function (sVariantName) {
        if (typeof sVariantName !== "string") {
            return undefined;
        }
        var oVariantSetData = this._getVariantSet(this._sVariantSetKey),
            sVariantKey;
        if (Object.prototype.hasOwnProperty.call(oVariantSetData, "variants")) {
            for (sVariantKey in oVariantSetData.variants) {
                if (Object.prototype.hasOwnProperty.call(oVariantSetData.variants, sVariantKey)) {
                    if (sVariantName === oVariantSetData.variants[sVariantKey].name) {
                        return sVariantKey;
                    }
                }
            }
        } else {
            throw new sap.ushell.utils.Error("Corrupt variant set data: sap.ushell.services.Personalization");
        }
        return undefined;
    };

    /**
     * Checks if a specific variant is contained in the variant set. 
     * @param {string} sVariantKey
     *            variant key
     * @returns {boolean} 
     *            <tt>true</tt> if the variant set contains a variant with the key
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSet.prototype.containsVariant = function (sVariantKey) {
        var oVariantSetData = this._getVariantSet();
        if (typeof sVariantKey !== "string") {
            return undefined;
        }
        return Object.prototype.hasOwnProperty.call(oVariantSetData, "variants") && Object.prototype.hasOwnProperty.call(oVariantSetData.variants, sVariantKey);
    };

    /**
     * Creates a new variant in the variant set.
     * In case a variant with this name is already existing an exception is thrown. 
     * @param {string} sVariantSetName
     *            variant set name
     * @returns {object} 
     *            {@link sap.ushell.services.PersonalizationContainerVariant}
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSet.prototype.addVariant = function (sVariantName) {
        var aKeys = [],
            iMaxKey = 0,
            sVariantKey = "",
            oVariant = {};

        aKeys = this.getVariantKeys();
        // generate a new "unique" key not yet present in aKeys
        iMaxKey = parseInt(aKeys.sort(function (a, b) {
            return a - b;
        }).reverse()[0], 10); // get the highest key; in case of an empty
                              // variant set -> NaN
        sVariantKey = isNaN(iMaxKey) ? "0" : (iMaxKey + 1).toString();
            // tested for up to 1 mio variants
        if (aKeys.indexOf(sVariantKey) >= 0) {
            throw new sap.ushell.utils.Error("Variant key '" + sVariantKey
                    + "' already exists in variant set" + this._sVariantSetKey
                    + "': sap.ushell.services.Personalization");
        }
        if (typeof sVariantName !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sVariantName is not a string: sap.ushell.services.Personalization");
        }
        if (this.getVariantKeyByName(sVariantName) !== undefined) {
            throw new sap.ushell.utils.Error("Variant name '" + sVariantName
                    + "' already exists in variant set '"
                    + this._sVariantSetKey + "' (Old key: '"
                    + this.getVariantKeyByName(sVariantName) + "' New key: '"
                    + sVariantKey + "') ': sap.ushell.services.Personalization");
        }
        oVariant = new sap.ushell.services.Personalization.Variant(
            this,
            sVariantKey,
            sVariantName
        );
        this._getVariantSet(this._sVariantSetKey).variants[sVariantKey] = {
            name : sVariantName,
            variantData : {}
        };
        this._serialize();
        return oVariant;
    };



    /**
     * Deletes a variant from the variant set.
     * In case the variant does not exist nothing happens.
     * @param {string} sVariantKey
     *            variant key
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSet.prototype.delVariant = function (sVariantKey) {
        var oVariantSetData;
        if (typeof sVariantKey !== "string") {
            return undefined;
        }
        oVariantSetData = this._getVariantSet();
        if (oVariantSetData && oVariantSetData.variants) {
            delete this._oVariantSetData.variants[sVariantKey];
        }
        this._serialize();
    };

    // --- (Deprecated) Variant Set ---
    /**
     * To be called by the personalization container.
     *
     * @class The personalization variant set contains variants of personalization data.
     *        It is used in the personalization container mode.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariantSet = function (sVariantSetKey, oAdapterContainer) {
        var oVariantSetData,
            sVariantKey,
            sVariantName,
            oVariantData,
            oVariant,
            sVariantPartKey;

        this._sVariantSetKey = sVariantSetKey;
        this._oAdapterContainer = oAdapterContainer;
        this._oVariantNameMap = new sap.ushell.utils.Map();
        this._oVariantMap = new sap.ushell.utils.Map();
        oVariantSetData = clone(this._oAdapterContainer.getItemValue(sVariantSetKey));
        if (oVariantSetData.hasOwnProperty("currentVariant")) {
            this._sCurrentVariantKey = oVariantSetData.currentVariant;
        } else {
            throw new sap.ushell.utils.Error("Corrupt variant set data: sap.ushell.services.Personalization");
            // TODO variant set name + container
        }
        if (oVariantSetData.hasOwnProperty("variants")) {
            for (sVariantKey in oVariantSetData.variants) {
                if (oVariantSetData.variants.hasOwnProperty(sVariantKey)) {
                    sVariantName = oVariantSetData.variants[sVariantKey].name;
                    oVariantData = oVariantSetData.variants[sVariantKey].variantData;
                    if (this._oVariantNameMap.containsKey(sVariantName)) {
                        throw new sap.ushell.utils.Error("Variant name already exists: sap.ushell.services.Personalization");
                        // TODO skip? log instead error
                    } else {
                        this._oVariantNameMap.put(sVariantName, sVariantKey);
                        oVariant = new sap.ushell.services.PersonalizationContainerVariant(sVariantKey,
                                sVariantName, oVariantData);
                        this._oVariantMap.put(sVariantKey, oVariant);
                    }
                }
            }
        } else {
            throw new sap.ushell.utils.Error("Corrupt variant set data: sap.ushell.services.Personalization");
        }
        return this;
    };

    /**
     * Returns the current variant key.
     * @returns {string} 
     *             current variant key. In case the current variant was never set <code>null</code> is returned.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariantSet.prototype.getCurrentVariantKey = function () {
        return this._sCurrentVariantKey;
    };

    /**
     * Sets the current variant key.
     * @param {string} sVariantKey
     *            There is no validity check for the variant key.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariantSet.prototype.setCurrentVariantKey = function (sVariantKey) {
        this._sCurrentVariantKey = sVariantKey;
    };

    /**
     * Returns an array with the keys of the variants in the variant set. 
     * @returns {array} 
     *             variant keys
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariantSet.prototype.getVariantKeys = function () {
        return this._oVariantMap.keys();
    };

    sap.ushell.services.PersonalizationContainerVariantSet.prototype.getVariantNamesAndKeys = function () {
        return JSON.parse(JSON.stringify(this._oVariantNameMap.entries));
    };

    /**
     * Returns a variant object. 
     * @param {string} sVariantKey
     *            variant key 
     * @returns {object} 
     *            {@link sap.ushell.services.PersonalizationContainerVariant}. 
     *            In case the variant set does not contain a variant with this key 
     *            <code>undefined</code> is returned.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariantSet.prototype.getVariant = function (sVariantKey) {
        if (typeof sVariantKey !== "string") {
            return undefined;
        }
        return this._oVariantMap.get(sVariantKey);
    };

    /**
     * Returns the variant key corresponding to a variant name. 
     * @param {string} sVariantName
     *            variant name 
     * @returns {object} 
     *            variant key. In case the variant set does not contain a variant with this name 
     *            <code>undefined</code> is returned.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariantSet.prototype.getVariantKeyByName = function (sVariantName) {
        if (typeof sVariantName !== "string") {
            return undefined;
        }
        return this._oVariantNameMap.get(sVariantName);
    };

    /**
     * Checks if a specific variant is contained in the variant set. 
     * @param {string} sVariantKey
     *            variant key
     * @returns {boolean} 
     *            <tt>true</tt> if the variant set contains a variant with the key
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariantSet.prototype.containsVariant = function (sVariantKey) {
        if (typeof sVariantKey !== "string") {
            return undefined;
        }
        return this._oVariantMap.containsKey(sVariantKey);
    };

    /**
     * Creates a new variant in the variant set.
     * In case a variant with this name is already existing an exception is thrown. 
     * @param {string} sVariantSetName
     *            variant set name
     * @returns {object} 
     *            {@link sap.ushell.services.PersonalizationContainerVariant}
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariantSet.prototype.addVariant = function (sVariantName) {
        var aKeys = [],
            iMaxKey = 0,
            sVariantKey = "",
            oVariant = {};

        aKeys = this._oVariantMap.keys();
        iMaxKey = parseInt(this._oVariantMap.keys().sort(function (a, b) {
            return a - b;
        }).reverse()[0], 10); // get the highest key; in case of an empty
                              // variant set -> NaN
        sVariantKey = isNaN(iMaxKey) ? "0" : (iMaxKey + 1).toString();
            // tested for up to 1 mio variants
        if (this._oVariantMap.containsKey(sVariantKey)) {
            throw new sap.ushell.utils.Error("Variant key '" + sVariantKey
                    + "' already exists in variant set" + this._sVariantSetKey
                    + "': sap.ushell.services.Personalization");
        }
        if (typeof sVariantName !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sVariantName is not a string: sap.ushell.services.Personalization");
        }
        if (this._oVariantNameMap.containsKey(sVariantName)) {
            throw new sap.ushell.utils.Error("Variant name '" + sVariantName
                    + "' already exists in variant set '"
                    + this._sVariantSetKey + "' (Old key: '"
                    + this._oVariantNameMap.get(sVariantName) + "' New key: '"
                    + sVariantKey + "') ': sap.ushell.services.Personalization");
        }
        oVariant = new sap.ushell.services.PersonalizationContainerVariant(sVariantKey, sVariantName);
        this._oVariantMap.put(sVariantKey, oVariant);
        this._oVariantNameMap.put(sVariantName, sVariantKey);
        return oVariant;
    };

    sap.ushell.services.PersonalizationContainerVariantSet.prototype._serialize = function () {
        var oVariant = {},
            aVariantKeys = [],
            oVariantSetData = {},
            oVariantsData = {},
            that = this;

        oVariantSetData.currentVariant = this._sCurrentVariantKey;
        aVariantKeys = this.getVariantKeys();
        aVariantKeys.forEach(function (sVariantKey) {
            var oVariant = {};

            oVariant = that._oVariantMap.get(sVariantKey);
            oVariantsData[sVariantKey] = oVariant._serialize();
        });
        oVariantSetData.variants = oVariantsData;
        return oVariantSetData;
    };

    /**
     * Deletes a variant from the variant set.
     * In case the variant does not exist nothing happens.
     * @param {string} sVariantKey
     *            variant key
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariantSet.prototype.delVariant = function (sVariantKey) {
        var oVariant = this._oVariantMap.get(sVariantKey);
        if (oVariant) {
            this._oVariantNameMap.remove(oVariant.getVariantName());
            this._oVariantMap.remove(sVariantKey);
        }
    };


    // --- Variant ---
    /**
     * To be instantiated via Personalization.VariantSet  add / get Variant only
     *
     * @class The personalization variant contains personalization data.
     *        It is used in the personalization container mode.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.Variant = function (oVariantSet, sVariantKey,
            sVariantName) {
        if (typeof sVariantKey !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sVariantKey is not a string: sap.ushell.services.Personalization");
        }
        if (typeof sVariantName !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sVariantName is not a string: sap.ushell.services.Personalization");
        }
        this._oVariantSet = oVariantSet;
        this._sVariantKey = sVariantKey;
        this._sVariantName = sVariantName;
    };

    /**
     * Returns the key of this variant. 
     * @returns {string} 
     *             variant key.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.Variant.prototype.getVariantKey = function () {
        return this._sVariantKey;
    };

    /**
     * Returns the name of this variant. 
     * @returns {string} 
     *             variant name.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.Variant.prototype.getVariantName = function () {
        return this._sVariantName;
    };

    /**
     * Sets the name of the variant.
     *
     * In case a variant with <code>sVariantName</code> is already existing in the corresponding variant set an exception is thrown.
     *
     * @param {string} sVariantName
     *          variant name
     *
     * @public
     * @since 1.24.0
     */
    sap.ushell.services.Personalization.Variant.prototype.setVariantName = function (sVariantName) {
        var oVariantSetData = this._oVariantSet._getVariantSet(),
            oVariantData;

        if (typeof sVariantName !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sVariantName is not a string: sap.ushell.services.Personalization");
        }
        if (this._oVariantSet.getVariantKeyByName(sVariantName) !== undefined) {
            throw new sap.ushell.utils.Error("Variant with name '" + sVariantName
                    + "' already exists in variant set '"
                    + this._oVariantSet._sVariantSetKey
                    + "': sap.ushell.services.Personalization");
        }

        if (Object.prototype.hasOwnProperty.call(oVariantSetData, "variants") && Object.prototype.hasOwnProperty.call(oVariantSetData.variants, this._sVariantKey)) {
            oVariantData = oVariantSetData.variants[this._sVariantKey];
            oVariantData.name = sVariantName;
            this._sVariantName = sVariantName;
            this._oVariantSet._serialize();
        } else {
            throw new sap.ushell.utils.Error("Variant does not longer exist");
        }
    };

    /**
     * Returns the value for an item in this variant. 
     * @param {string} sItemKey
     *            item key
     * @returns {object} 
     *            item value (JSON object). In case the variant does not contain an item with this key 
     *            <code>undefined</code> is returned.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.Personalization.Variant.prototype.getItemValue = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        var vd = this._oVariantSet._getVariantSet().variants[this._sVariantKey].variantData;
        return Object.prototype.hasOwnProperty.call(vd, sItemKey) && clone(vd[sItemKey]);
    };

    /**
     * Sets the value for an item in this variant. 
     * @param {string} sItemKey
     *            item key
     * @param {object} 
     *            item value (JSON object)
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.Personalization.Variant.prototype.setItemValue = function (sItemKey, oItemValue) {
        if (typeof sItemKey !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sItemKey is not a string: sap.ushell.services.Personalization");
        }
        var vd,
            variant = this._oVariantSet._getVariantSet().variants && this._oVariantSet._getVariantSet().variants[this._sVariantKey];
        if (!variant) {
            throw new sap.ushell.utils.Error("Variant does not longer exist");
        }
        if (!variant.variantData) {
            variant.variantData = {};
        }
        vd = variant.variantData;
        vd[sItemKey] = clone(oItemValue);
        this._oVariantSet._serialize();
    };

    /**
     * Checks if a specific item is contained in this variant. 
     * @param {string} sItemKey
     *            item key
     * @returns {boolean} 
     *            <tt>true</tt> if the variant contains an item with the key
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.Personalization.Variant.prototype.containsItem = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        var vd = this.oAccess.variantSet._getVariantSet().variants[this._sVariantKey].variantData;
        return Object.prototype.hasOwnProperty.call(vd, sItemKey);
    };

    /**
     * Returns an array with the keys of all items in this variant. 
     * @returns {array} 
     *            item keys
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.Variant.prototype.getItemKeys = function () {
        var vd = this._oVariantSet._getVariantSet().variants[this._sVariantKey].variantData,
            sItemKey,
            oItemKeys = [];
        for (sItemKey in vd) {
            if (Object.prototype.hasOwnProperty.call(vd, sItemKey)) {
                oItemKeys.push(sItemKey);
            }
        }
        oItemKeys.sort();
        return oItemKeys;
    };

    /**
     * Deletes an item from this variant.
     * In case the item does not exist, nothing happens.
     * @param {string} sItemKey
     *            item key
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.Variant.prototype.delItem = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        var vd = this.oVariantSet._getVariantSet().variants[this._sVariantKey].variantData;
        delete vd[sItemKey];
        this.oVariantSet._serialize();
    };


    // --- Variant ---
    /**
     * To be called by the personalization variant set.
     *
     * @class The personalization variant contains personalization data.
     *        It is used in the personalization container mode.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariant = function (sVariantKey,
            sVariantName, oVariantData) {
        if (typeof sVariantKey !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sVariantKey is not a string: sap.ushell.services.Personalization");
        }
        if (typeof sVariantName !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sVariantName is not a string: sap.ushell.services.Personalization");
        }
        if (oVariantData && typeof oVariantData !== "object") {
            throw new sap.ushell.utils.Error("Parameter value of sVariantName is not a string: sap.ushell.services.Personalization");
        }
        this._oVariantKey = sVariantKey;
        this._oVariantName = sVariantName;
        this._oItemMap = new sap.ushell.utils.Map();
        this._oItemMap.entries = oVariantData || {}; // check if oVariantData
        // is a JSON object
    };

    /**
     * Returns the key of this variant. 
     * @returns {string} 
     *             variant key.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariant.prototype.getVariantKey = function () {
        return this._oVariantKey;
    };

    /**
     * Returns the name of this variant. 
     * @returns {string} 
     *             variant name.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariant.prototype.getVariantName = function () {
        return this._oVariantName;
    };

    /**
     * Returns the value for an item in this variant. 
     * @param {string} sItemKey
     *            item key
     * @returns {object} 
     *            item value (JSON object). In case the variant does not contain an item with this key 
     *            <code>undefined</code> is returned.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariant.prototype.getItemValue = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        return this._oItemMap.get(sItemKey);
    };

    /**
     * Sets the value for an item in this variant. 
     * @param {string} sItemKey
     *            item key
     * @param {object} 
     *            item value (JSON object)
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariant.prototype.setItemValue = function (sItemKey, oItemValue) {
        if (typeof sItemKey !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sItemKey is not a string: sap.ushell.services.Personalization");
        }
        return this._oItemMap.put(sItemKey, oItemValue);
    };

    /**
     * Checks if a specific item is contained in this variant. 
     * @param {string} sItemKey
     *            item key
     * @returns {boolean} 
     *            <tt>true</tt> if the variant contains an item with the key
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariant.prototype.containsItem = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        return this._oItemMap.containsKey(sItemKey);
    };

    /**
     * Returns an array with the keys of all items in this variant. 
     * @returns {array} 
     *            item keys
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariant.prototype.getItemKeys = function () {
        return this._oItemMap.keys();
    };

    /**
     * Deletes an item from this variant.
     * In case the item does not exist, nothing happens.
     * @param {string} sItemKey
     *            item key
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariant.prototype.delItem = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        return this._oItemMap.remove(sItemKey);
    };

    sap.ushell.services.PersonalizationContainerVariant.prototype._serialize = function () {
        var aItemKeys = [],
            oVariantData = {},
            oItemsData = {},
            that = this;

        oVariantData.name = this.getVariantName();
        aItemKeys = this._oItemMap.keys();
        aItemKeys.forEach(function (sItemKey) {
            oItemsData[sItemKey] = that.getItemValue(sItemKey);
        });
        oVariantData.variantData = oItemsData;
        return oVariantData;
    };



    // --- Container for storage with window validity, data is stored in sap.ushell.services.Personalization.WindowValidityPersistence  ---
    sap.ushell.services.Personalization.WindowValidityPersistenceAdapter = function (sServiceInstance) {
        if (!sap.ushell.services.Personalization.WindowValidityPersistenceAdapter.prototype.data) {
            sap.ushell.services.Personalization.WindowValidityPersistenceAdapter.prototype.data = {};
        }
    };


    sap.ushell.services.Personalization.WindowValidityPersistenceAdapter.prototype.getAdapterContainer = function (sContainerKey) {
        return new sap.ushell.services.Personalization.WindowValidityPersistenceAdapterContainer(sContainerKey);
    };

    sap.ushell.services.Personalization.WindowValidityPersistenceAdapter.prototype.delAdapterContainer = function (sContainerKey) {
        var oDeferred = new jQuery.Deferred();
        delete sap.ushell.services.Personalization.WindowValidityPersistenceAdapter.prototype.data[sContainerKey];
        oDeferred.resolve();
        return oDeferred.promise();
    };


    // --- Container for storage with window validity, data is stored in sap.ushell.services.Personalization.WindowValidityPersistence  ---
    sap.ushell.services.Personalization.WindowValidityPersistenceAdapterContainer = function (sContainerKey) {
        this._oItemMap = new sap.ushell.utils.Map();
        this._sContainerKey = sContainerKey;
    };


    sap.ushell.services.Personalization.WindowValidityPersistenceAdapterContainer.prototype.load = function () {
        var oDeferred = new jQuery.Deferred();
        this._oItemMap.entries = clone(sap.ushell.services.Personalization.WindowValidityPersistenceAdapter.prototype.data[this._sContainerKey]) || {};
        oDeferred.resolve();
        return oDeferred.promise();
    };

    sap.ushell.services.Personalization.WindowValidityPersistenceAdapterContainer.prototype.save = function () {
        var oDeferred = new jQuery.Deferred();
        sap.ushell.services.Personalization.WindowValidityPersistenceAdapter.prototype.data[this._sContainerKey] = clone(this._oItemMap.entries);
        oDeferred.resolve();
        return oDeferred.promise();
    };

    sap.ushell.services.Personalization.WindowValidityPersistenceAdapterContainer.prototype.getItemKeys = function () {
        return this._oItemMap.keys();
    };

    sap.ushell.services.Personalization.WindowValidityPersistenceAdapterContainer.prototype.containsItem = function (sItemKey) {
        this._oItemMap.containsKey(sItemKey);
    };

    sap.ushell.services.Personalization.WindowValidityPersistenceAdapterContainer.prototype.getItemValue = function (sItemKey) {
        return this._oItemMap.get(sItemKey);
    };

    sap.ushell.services.Personalization.WindowValidityPersistenceAdapterContainer.prototype.setItemValue = function (sItemKey, oItemValue) {
        this._oItemMap.put(sItemKey, oItemValue);
    };

    sap.ushell.services.Personalization.WindowValidityPersistenceAdapterContainer.prototype.delItem = function (sItemKey) {
        this._oItemMap.remove(sItemKey);
    };
}());

}; // end of sap/ushell/services/Personalization.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.UserRecents') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The Unified Shell's user activity service.
 *
 * @version 1.24.5
 */
(function () {
    "use strict";
    /*global jQuery, sap, console */
    jQuery.sap.declare("sap.ushell.services.UserRecents");
    

    /**
     * This method is just for internal use within this service.
     * Constructs a new instance of a recent list, used for recent searches and recent apps.
     *
     * @param {integer} iMaxLength
     *     maximum number of entries in the list
     * @param {function} fnEquals
     *     used to decide whether an entry should be updated instead of inserting a new one
     * @param {function} fnCompare
     *     uesed to sort the list
     * @param {function} fnLoad
     *     called to load recent list from backend
     * @param {function} fnSave
     *     called to save current list into backend
     *
     * @constructor
     */
    function RecentList(iMaxLength, fnEquals, fnCompare, fnLoad, fnSave) {
        var aRecents = [],

        // private functions
            fnUpdateIfAlreadyIn = function (oItem, iTimestampNow) {
                return aRecents.some(function (oRecentEntry) {
                    var bFound;
                    if (fnEquals(oRecentEntry.oItem, oItem)) {
                        oRecentEntry.oItem = oItem;
                        oRecentEntry.iTimestamp = iTimestampNow;
                        oRecentEntry.iCount = oRecentEntry.iCount + 1;
                        bFound = true;
                    } else {
                        bFound = false;
                    }
                    return bFound;
                });
            },

            fnInsertNew = function (oItem, iTimestampNow) {
                var oNewEntry = {oItem: oItem,
                        iTimestamp: iTimestampNow,
                        iCount: 1};
                if (aRecents.length === iMaxLength) {
                    aRecents.sort(fnCompare);
                    aRecents.pop();
                }
                aRecents.push(oNewEntry);
            };

        // public interface
        this.newItem = function (oItem) {
            var iTimestampNow = +new Date(),  // timestamp: thanks to http://stackoverflow.com/a/221297
                bAlreadyIn;
            fnLoad().done(function (aLoadedRecents) {
                aRecents = aLoadedRecents || [];

                bAlreadyIn = fnUpdateIfAlreadyIn(oItem, iTimestampNow);
                if (!bAlreadyIn) {
                    fnInsertNew(oItem, iTimestampNow);
                }
                fnSave(aRecents);
            });
        };

        this.getRecentItems = function () {
            var oDeferred = new jQuery.Deferred();

            fnLoad().done(function (aLoadedRecents) {
                aLoadedRecents = aLoadedRecents || [];
                aLoadedRecents.sort(fnCompare);
                aRecents = aLoadedRecents.slice(0, iMaxLength);
                oDeferred.resolve(jQuery.map(aRecents, function (oRecentEntry) {
                    return oRecentEntry.oItem;
                }));
            });

            return oDeferred.promise();
        };
    };

    /**
     * User action collector – counter of user usage of applications according to the URL hash
     *
     * @param {function} fnLoad
     *     called to load current list from backend
     *
     * @param {function} fnSave
     *     called to save current list into backend
     */
    function RecentAppsUsage(fnLoad, fnSave) {

        var oAppsUsageData,
            that = this,
            iMaximumDays = 30,
        	dataLoaded = false,
            nonSavedHashes = [];

        /**
         * Initialization of RecentAppsUsage.
         * Called from shell.controller's <code>init</code> function
         * - Loads user personalized data
         * - Defines a new day is the data structure, if needed
         * - Cleans empty hash usage arrays
         * @param currentDate
         */
        this.init = function () {
            var promise,
                currentDay = this.getDayFromDateObj(this.getCurrentDate()),
                oInitDefferred = jQuery.Deferred();

            // Personalized data not loaded yet 
            if (!dataLoaded || currentDay != oAppsUsageData.recentDay) {

                // Load data
                promise = fnLoad();

                // Load finished successfully
                promise.done(function (data) {
                    dataLoaded = true;

                    // Initialize structure from the loaded data, or define new
                    oAppsUsageData = data || {
                        recentDay : null,
                        recentAppsUsageMap : {}
                    };

                    // Update usage
                    that.calculateInitialUsage(currentDay);
                    oInitDefferred.resolve(oAppsUsageData);
                });
                promise.fail(function () {
                    jQuery.sap.log.error("UShell-lib ; RecentAppsUsage ; Load data in Init failed");
                    oInitDefferred.reject();
                });
            } else {
                // Data is already loaded
                oInitDefferred.resolve(oAppsUsageData);
            }
            return oInitDefferred.promise();
        };

        // API functions - Begin

        this.calculateInitialUsage = function (currentDay) {
            var that = this;
            // If the current day is different than the recent one -
            // add a new entry (for the current day's usage) to each hash usage array
            if (currentDay != oAppsUsageData.recentDay) {
                this.addNewDay();
                oAppsUsageData.recentDay = currentDay;

                // Remove hash entries that weren't touched lately
                // postpone to not delay main flow
                setTimeout( function(){
                    that.cleanUnusedHashes();
                }, 3000 );

                // Save the data after the "new day" routine
                this.saveAppsUsage(oAppsUsageData);
            }
        };

        /**
         * Records applications usage according to URL hashes
         *  - Check hash validity
         *  - Gets the relevant hash usage array
         *  - Add this usage (increment the value) or create a new array if needed
         *  - Save the data structure
         *  @param hash
         */
        this.addAppUsage = function (hash) {

            // Check hash validity
            if (!sap.ushell.utils.validHash(hash)) {
                return  jQuery.Deferred().
                        reject("Non valid hash").
                        promise();
            }

            var promise = this.init();

            promise.done( function() {
                // Get the data (usage per day) for the given hash
                var aAppUsageArray = oAppsUsageData.recentAppsUsageMap[hash] || [];

                // New app that wasn't opened so far. Insert "1" since this is the first time it is opened
                if (aAppUsageArray.length == 0) {
                    aAppUsageArray[0] = 1;
                } else {
                    // Increment the existing counter of this day for this hash (i.e. the last entry in the array)
                    aAppUsageArray[aAppUsageArray.length - 1] += 1;
                }
                oAppsUsageData.recentAppsUsageMap[hash] = aAppUsageArray;
                that.saveAppsUsage(oAppsUsageData);
            });
            promise.fail( function() {
            	Query.sap.log.error("Ushell-lib ; addAppUsage ; Initialization falied!");
            });
            return promise;
        };

        /**
         * Summarises and returns the usage per hash and the minimum and maximum values
         */
        this.getAppsUsage = function () {
            var result,
                promise,
                that = this,
                oDeffered = jQuery.Deferred();

            promise = that.init();

            // After initialization - summarize the usage
            promise.done( function () {
        	    result = that.summarizeUsage();
        		oDeffered.resolve(result);
        	});
        	promise.fail( function () {
        	    oDeffered.reject("Not initialized yet");
        	});
            return oDeffered.promise();
        };

        // API functions - End

        this.summarizeUsage = function () {
            var usageMap = {},
            hash,
            maxUsage,
            minUsage,
            firstHashUsage = true;

        	for (hash in oAppsUsageData.recentAppsUsageMap) {
                usageMap[hash] = this.getHashUsageSum(hash);
                if (firstHashUsage) {
                    maxUsage = minUsage = usageMap[hash];
                    firstHashUsage = false;
                } else {
                    if (usageMap[hash] < minUsage) {
                        minUsage = usageMap[hash];
                    } else if (usageMap[hash] > maxUsage) {
                        maxUsage = usageMap[hash];
                    }
                }
            }
        	return {usageMap : usageMap, maxUsage : maxUsage, minUsage : minUsage};
        };

        this.addNewDay = function () {
            var hash,
                aAppUsageArray;
            for (hash in oAppsUsageData.recentAppsUsageMap) {
                // Get the array of app/hash usage
                aAppUsageArray = oAppsUsageData.recentAppsUsageMap[hash];

                // Add an item in the Array for the new day
                aAppUsageArray[aAppUsageArray.length] = 0;

                // If the array size is > iMaximumDays, remove the first (oldest) entry
                if (aAppUsageArray.length > iMaximumDays) {
                    aAppUsageArray = aAppUsageArray.shift();
                }
            }
        };

        this.cleanUnusedHashes = function () {
            var usage,
                hash;
            for (hash in oAppsUsageData.recentAppsUsageMap) {
                usage = that.getHashUsageSum(hash);
                if (usage == 0) {
                    delete (oAppsUsageData.recentAppsUsageMap[hash]);
                }
            }
        };

        this.getHashUsageSum = function (hash) {
            var sum = 0,
                dayIndex,
                appUsageArray = oAppsUsageData.recentAppsUsageMap[hash],
                length = appUsageArray.length;

            for (dayIndex = 0; dayIndex < length; dayIndex++) {
                sum  += appUsageArray[dayIndex];
            }
            return sum;
        };

        this.saveAppsUsage = function (obj) {
            var promise = fnSave(obj);
            promise.fail(function () {
                jQuery.sap.log.error("Ushell-lib ; saveAppsUsage ; Save action failed");
            });
            promise.done(function (data) {

            });
            return promise;
        };

        this.getCurrentDate = function () {
        	return new Date();
        };

        this.getDayFromDateObj = function (dateObj) {
            return (dateObj.getUTCFullYear() + "/" + (dateObj.getUTCMonth() + 1) + "/" + dateObj.getUTCDate());
        };
    };

    // -------------------------------- RecentAppsUsage - End --------------------------------

    /**
     * @class The Unified Shell's page user recents service. It used for managing recent searches and recently viewed apps.
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     */
    sap.ushell.services.UserRecents = function () {
        var oRecentSearches,
            oRecentApps,
            oAppsUsage,
            oRecentDataSources,
            oPersonalizationService,
            oAppPersonalizer,
            oSearchesPersonalizer,
            oDataSourcePersonalizer,
            oAppsUsagePersonalizer,
            fnLoad,
            fnSave,
            sRecentAppsKey = "RecentApps",
            sAppsUsageKey = "AppsUsage",
            sRecentSearchesKey = "RecentSearches",
            sRecentDataSourcesKey = "RecentDataSources",
            sPersContainer = "sap.ushell.services.UserRecents";

        // BEWARE: constructor code below!

        /**
         * Notification that the given datasources has just been used. Adds the search to the LRU
         * list of datasources.
         *
         * @param {object} oDataSource
         *     the datasource identified by the string parameter <code>objectName.value</code>
         * @returns {object[]}
         *     the updated LRU list
         * @since 1.19.0
         * @public
         */
        this.noticeDataSource = function (oDataSource) {

            //Don't save $$ALL$$
            if ( (oDataSource && oDataSource.objectName && oDataSource.objectName.value &&oDataSource.objectName.value.toLowerCase() === "$$all$$") ||
                (oDataSource.objectName && oDataSource.objectName.toLowerCase && oDataSource.objectName.toLowerCase() === "$$all$$"))
            return;

            oRecentDataSources.newItem(oDataSource);
            return oRecentDataSources.getRecentItems();
        };

        /**
         * Returns the LRU list of datasources.
         *
         * @returns {object[]}
         *     the LRU list
         * @since 1.19.0
         * @public
         */
        this.getRecentDataSources = function () {
            return oRecentDataSources.getRecentItems();
        };

        /**
         * Notification that the given search item has just been used. Adds the search to the LRU
         * list of searches.
         *
         * @param {object} oSearchItem
         *     the searchItem identified by the string parameter <code>sTerm</code>
         * @returns {object[]}
         *     the updated LRU list
         * @since 1.15.0
         * @public
         */
        this.noticeSearch = function (oSearchItem) {
            oRecentSearches.newItem(oSearchItem);
            return oRecentSearches.getRecentItems();
        };

        /**
         * Returns the LRU list of searches.
         *
         * @returns {object[]}
         *     the LRU list
         * @since 1.15.0
         * @public
         */
        this.getRecentSearches = function () {
            return oRecentSearches.getRecentItems();
        };

        /**
         * Notification that the given app has just been used. Adds the app to the LRU list of apps.
         *
         * @param {object} oAppItem
         *     the searchItem identified by the string parameter <code>id</code>
         * @returns {object[]}
         *     the updated LRU list
         * @since 1.15.0
         * @public
         */
        this.noticeApp = function (oAppItem) {
            oRecentApps.newItem(oAppItem);
            return oRecentApps.getRecentItems();
        };

        /**
         * Returns the LRU list of apps.
         *
         * @returns {object[]}
         *     the LRU list
         * @since 1.15.0
         * @public
         */
        this.getRecentApps = function () {
            return oRecentApps.getRecentItems();
        };

        this.initAppsUsage = function () {
            oAppsUsage.init(new Date());
        };

        /**
         * API function for the New VD 1 - user action Collector
         * Increment usage count for the given hash. Currently called on openApp event
         * @param hash
         */
        this.addAppUsage = function (hash) {
        	var relevantHash = sap.ushell.utils.getBasicHash(hash);
        	oAppsUsage.addAppUsage(relevantHash);
        };

        /**
         * API function for the New VD 1 - user action Collector
         * Returns a map of total usage of all (used) applications, plus the maximum and minimum values.
         *
         * @returns promise object including the relevant data:
         *  In case of success - An object containing usage-per-hash map  and the minimum and maximum values
         *  In case of fail - Error message
         */
        this.getAppsUsage = function () {
            return oAppsUsage.getAppsUsage();
        };

        // constructor code -------------------------------------------------------

        oPersonalizationService = sap.ushell.Container.getService("Personalization");
        try {
            oAppPersonalizer = oPersonalizationService.getPersonalizer({container: sPersContainer, item: sRecentAppsKey});
            oSearchesPersonalizer = oPersonalizationService.getPersonalizer({container: sPersContainer, item: sRecentSearchesKey});
            oDataSourcePersonalizer = oPersonalizationService.getPersonalizer({container: sPersContainer, item: sRecentDataSourcesKey});
            oAppsUsagePersonalizer = oPersonalizationService.getPersonalizer({container: sPersContainer, item: sAppsUsageKey});

        } catch (err) {
            jQuery.sap.log.error("Personalization service does not work:");
            jQuery.sap.log.error(err.name + ": " + err.message);
        }

        fnLoad = function (oPersonalizer) {
            var oPromise,
                oDeferred;
            try {
                oPromise = oPersonalizer.getPersData();
            } catch (err) {
                jQuery.sap.log.error("Personalization service does not work:");
                jQuery.sap.log.error(err.name + ": " + err.message);
                oDeferred = new jQuery.Deferred();
                oDeferred.reject(err);
                oPromise = oDeferred.promise();
            }
            return oPromise;
        };

        fnSave = function (oPersonalizer, aList) {
            var promise;
            try {
                promise = oPersonalizer.setPersData(aList);
            } catch (err) {
                jQuery.sap.log.error("Personalization service does not work:");
                jQuery.sap.log.error(err.name + ": " + err.message);
            }
            return promise;
        };

        oRecentSearches = new RecentList(10, function (x, y) {
            var compare = false;
            if (x.oDataSource && y.oDataSource) {
                if (x.oDataSource.objectName && y.oDataSource.objectName) {
                    compare = ((x.sTerm === y.sTerm) && (x.oDataSource.objectName.value === y.oDataSource.objectName.value));
                }
                if (!x.oDataSource.objectName && !y.oDataSource.objectName) {
                    compare = (x.sTerm === y.sTerm);
                }
            }
            if (!x.oDataSource && !y.oDataSource) {
                compare = (x.sTerm === y.sTerm);
            }
            return compare;
        }, function (x, y) {
            return y.iTimestamp - x.iTimestamp; // youngest first
        },
            fnLoad.bind(this, oSearchesPersonalizer),
            fnSave.bind(this, oSearchesPersonalizer));

        oRecentDataSources = new RecentList(6, function (x, y) {
            if (x.objectName && y.objectName) 
                return x.objectName.value === y.objectName.value;
            return false;
        }, function (x, y) {
            return y.iTimestamp - x.iTimestamp; // youngest first
        },  fnLoad.bind(this, oDataSourcePersonalizer),
            fnSave.bind(this, oDataSourcePersonalizer));


        oRecentApps = new RecentList(6, function (x, y) {
            return x.semanticObject === y.semanticObject && x.action === y.action;
        }, function (x, y) {
            return y.iTimestamp - x.iTimestamp;
        }, fnLoad.bind(this, oAppPersonalizer), fnSave.bind(this, oAppPersonalizer));

        oAppsUsage = new RecentAppsUsage(fnLoad.bind(this, oAppsUsagePersonalizer), fnSave.bind(this, oAppsUsagePersonalizer));
    };

    var oEventBus = sap.ui.getCore().getEventBus();
    sap.ushell.services.UserRecents.hasNoAdapter = true;
}());

}; // end of sap/ushell/services/UserRecents.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.LoginDetailsButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.LoginDetailsButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.LoginDetailsButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/LoginDetailsButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/LoginDetailsButton
 * @extends sap.m.Button
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.LoginDetailsButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.LoginDetailsButton", { metadata : {

	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.LoginDetailsButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.LoginDetailsButton.extend
 * @function
 */


// Start of sap/ushell/ui/footerbar/LoginDetailsButton.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    /*global jQuery, sap, window*/

    jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Label'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Text'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Input'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Button'); // unlisted dependency retained

    
    

    jQuery.sap.declare("sap.ushell.ui.footerbar.LoginDetailsButton");

    /**
     * LoginDetailsButton
     *
     * @name sap.ushell.ui.footerbar.LoginDetailsButton
     * @private
     * @since 1.16.0
     */
    sap.ushell.ui.footerbar.LoginDetailsButton.prototype.init = function () {
        this.setIcon('sap-icon://person-placeholder');
        this.setWidth('100%');
        this.setText(sap.ushell.resources.i18n.getText("userPreferences"));
        this.setTooltip(sap.ushell.resources.i18n.getText("userPreferences_tooltip"));
        this.attachPress(this.showLoginDetailsDialog);
        this.setEnabled();  // disables button if shell not initialized
        //call the parent sap.m.Button init method
        if (sap.m.Button.prototype.init) {
            sap.m.Button.prototype.init.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.LoginDetailsButton.prototype.showLoginDetailsDialog = function () {

        var aItems = [],
            aThemes,
            oSimpleForm,
            okButton,
            cancelButton,
            oModel = sap.ui.getCore().byId("shell").getModel(),
            bThemeSelectionEnabled,
            currentThemeId,
            getThemesPromise,
            loadingThemesItem,
            simpleFormContext,
            that = this;

        try {
            this.userInfoService = sap.ushell.Container.getService("UserInfo");
            this.oUser = this.userInfoService.getUser();
        } catch (e) {
            jQuery.sap.log.error("Getting UserInfo service failed");
            this.oUser = sap.ushell.Container.getUser();
        }

        this.translationBundle = sap.ushell.resources.i18n;

        bThemeSelectionEnabled = this.oUser.isSetThemePermitted();
        currentThemeId = this.oUser.getTheme();

        loadingThemesItem = new sap.ui.core.Item({/*id : "themeItem_" + aThemes[index] , */text : sap.ushell.resources.i18n.getText('themesLoading'), enabled : true});

        // Construct themes drop-down list
        that.themeSelection = new sap.m.Select({
            id: "themesDropdown",
            enabled: !!oModel.getProperty("/setTheme"),
            visible: true,
            name: "Our Drop-Down",
            items: loadingThemesItem
        });

        simpleFormContext = [new sap.m.Text("userName", {text: that.oUser.getFullName() || ''})];
        if (that.oUser.getEmail()) {
            simpleFormContext.push(new sap.m.Label(''));
            simpleFormContext.push(new sap.m.Text("userEmail", {text: that.oUser.getEmail()}));
        }
        simpleFormContext = simpleFormContext.concat(
            new sap.m.Label("selectedTheme", {required: true, text: " " + this.translationBundle.getText("theme")}),
            that.themeSelection,
            new sap.m.Label("serverNameLbl", {text: this.translationBundle.getText("serverFld")}),
            new sap.m.Text("serverNameTxt", {text: window.location.host }),
            new sap.m.Label("languageLbl", {text: this.translationBundle.getText("languageFld")}),
            new sap.m.Text("languageTxt", {text: that.oUser.getLanguage() || ''})
        );

        oSimpleForm = new sap.ui.layout.form.SimpleForm({
            content: simpleFormContext
        });
        okButton = new sap.m.Button({
            id: "okButton",
            text: this.translationBundle.getText("okBtn"),
            press: that._dialogOkButtonHandler.bind(that),
            enabled: false
        });
        cancelButton = new sap.m.Button({
            id: "cancelButton",
            text: this.translationBundle.getText("cancelBtn"),
            press: function () {
                that.oDialog.close();
            }.bind(that)
        });

        that.oDialog = new sap.m.Dialog({
            id: "loginDetailsDialog",
            title: this.translationBundle.getText("userPreferences"),
            contentWidth: "300px",
            content: oSimpleForm,
            beginButton: okButton,
            endButton: cancelButton,
            afterClose: function () {
                that.themeSelection.destroy();
                that.oDialog.destroy();
                this.oUser.resetChangedProperties();
            }.bind(that)
        });

        that.oDialog.open();

        if (bThemeSelectionEnabled) {
            getThemesPromise = this.userInfoService.getThemeList();

            getThemesPromise.done(function (oData) {
                var index,
                    themeName;

                aThemes = oData.options || [];

                // Fill themes array from the result of userInfoService.getThemeList()
                for (index = 0; index < aThemes.length; index++) {
                    themeName =  aThemes[index].name;
                    if (themeName) {
                        aItems[index] = new sap.ui.core.Item({id: aThemes[index].id, text: themeName, enabled: true, key: themeName});
                    }
                }
                if (aThemes.length > 1) {
                    // Sort the array of themes according to theme name
                    aItems.sort(function (theme1, theme2) {
                        var theme1Name = theme1.getText().toLowerCase(),
                            theme2Name = theme2.getText().toLowerCase();
                        if (theme1Name < theme2Name) { //sort string ascending
                            return -1;
                        }
                        if (theme1Name > theme2Name) {
                            return 1;
                        }
                        return 0; //default return value (no sorting)
                    });
                }
                okButton.setEnabled();
            });

            getThemesPromise.fail(function () {
                // In case getThemeList failed - only currentTheme is relevant
                //  and theme selection is disabled in the UI
                aItems[0] = new sap.ui.core.Item({id: currentThemeId, text: currentThemeId, enabled: true, key: currentThemeId});
                bEnableThemeSelection = false;
            });
            getThemesPromise.always(jQuery.proxy(this._setThemeSelection, this, aItems, currentThemeId));
        } else {
            // In case theme selection is disabled by userInfoService - only currentTheme is relevant
            //  and theme selection is disabled in the UI
            that.themeSelection.addItem(new sap.ui.core.Item({id: currentThemeId, text: currentThemeId, enabled: true, key: currentThemeId}));
            that.themeSelection.setSelectedKey(currentThemeId);
            that.themeSelection.setEnabled(false);
        }
    };

    sap.ushell.ui.footerbar.LoginDetailsButton.prototype._setThemeSelection = function (aItems, currentThemeId) {
        var index,
            currentTheme,
            sCurrentThemeName;

        if (aItems) {
            this.themeSelection.removeAllItems();
            for (index = 0; index < aItems.length; index++) {
                this.themeSelection.addItem(aItems[index]);
            }
            // Themes drop-down list shows the current theme name - find theme name by theme Id
            currentTheme = aItems.filter(function (theme) {
                return theme.getId() === currentThemeId;
            });
            sCurrentThemeName = currentTheme.length ? currentTheme[0].getText() : {};

            if (sCurrentThemeName) {
                this.themeSelection.setSelectedKey(sCurrentThemeName);
            }
        }
    };

    sap.ushell.ui.footerbar.LoginDetailsButton.prototype._restoreUserPreferencesProperties = function (sErrorMessage) {
        //currently THEME is the only user preferences editable property
        var messageSrvc,
            oldTheme = this.oUser.getChangedProperties().filter(function (ChangedProperty) {
                return ChangedProperty.name === "THEME";
            })[0].oldValue;

        // Apply the previous theme to the user
        this.oUser.setTheme(oldTheme);
        messageSrvc = sap.ushell.Container.getService("Message");
        messageSrvc.error(this.translationBundle.getText("changeThemeFailed"));
        jQuery.sap.log.error(sErrorMessage);
    };

    sap.ushell.ui.footerbar.LoginDetailsButton.prototype._dialogOkButtonHandler = function () {
        this.oDialog.close();

        var currentTheme = this.oUser.getTheme(),
            oUserPreferencesPromise,
            message;

        if (this.themeSelection.getSelectedItemId() !== currentTheme) {

            // Apply the selected theme
            this.oUser.setTheme(this.themeSelection.getSelectedItemId());

            // In case that userInfoService is not available - this code will not be called because
            //  themeSelection.getSelectedKey() equals currentTheme
            oUserPreferencesPromise = this.userInfoService.updateUserPreferences(this.oUser);

            oUserPreferencesPromise.done(function () {
                message = this.translationBundle.getText("savedChanges");

                jQuery.sap.require("sap.m.MessageToast");
                sap.m.MessageToast.show(message, {
                    duration: 3000,
                    width: "15em",
                    my: "center bottom",
                    at: "center bottom",
                    of: window,
                    offset: "0 -50",
                    collision: "fit fit"
                });

                this.oUser.resetChangedProperties();
            }.bind(this));

            oUserPreferencesPromise.fail(function (sErrorMessage) {
                this._restoreUserPreferencesProperties(sErrorMessage);
            }.bind(this));
        }
    };

    sap.ushell.ui.footerbar.LoginDetailsButton.prototype.setEnabled = function (bEnabled) {
        if (!sap.ushell.Container) {
            if (this.getEnabled()) {
                jQuery.sap.log.warning(
                    "Disabling 'Login Details' button: unified shell container not initialized",
                    null,
                    "sap.ushell.ui.footerbar.LoginDetailsButton"
                );
            }
            bEnabled = false;
        }
        sap.m.Button.prototype.setEnabled.call(this, bEnabled);
    };

}());

}; // end of sap/ushell/ui/footerbar/LoginDetailsButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.HeaderTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.HeaderTile.
jQuery.sap.declare("sap.ushell.ui.launchpad.HeaderTile");




/**
 * Constructor for a new ui/launchpad/HeaderTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeaderLevel headerLevel} : sap.m.HeaderLevel (default: sap.m.HeaderLevel.H3)</li>
 * <li>{@link #getHeaderText headerText} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ushell.ui.launchpad.Tile#constructor sap.ushell.ui.launchpad.Tile}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A HeaderTile acts as a separator inside a TileContainer.
 * @extends sap.ushell.ui.launchpad.Tile
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.HeaderTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ushell.ui.launchpad.Tile.extend("sap.ushell.ui.launchpad.HeaderTile", { metadata : {

	library : "sap.ushell",
	properties : {
		"headerLevel" : {type : "sap.m.HeaderLevel", group : "Appearance", defaultValue : sap.m.HeaderLevel.H3},
		"headerText" : {type : "string", group : "Appearance", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.HeaderTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.HeaderTile.extend
 * @function
 */


/**
 * Getter for property <code>headerLevel</code>.
 *
 * Default value is <code>H3</code>
 *
 * @return {sap.m.HeaderLevel} the value of property <code>headerLevel</code>
 * @public
 * @name sap.ushell.ui.launchpad.HeaderTile#getHeaderLevel
 * @function
 */

/**
 * Setter for property <code>headerLevel</code>.
 *
 * Default value is <code>H3</code> 
 *
 * @param {sap.m.HeaderLevel} oHeaderLevel  new value for property <code>headerLevel</code>
 * @return {sap.ushell.ui.launchpad.HeaderTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.HeaderTile#setHeaderLevel
 * @function
 */


/**
 * Getter for property <code>headerText</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>headerText</code>
 * @public
 * @name sap.ushell.ui.launchpad.HeaderTile#getHeaderText
 * @function
 */

/**
 * Setter for property <code>headerText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeaderText  new value for property <code>headerText</code>
 * @return {sap.ushell.ui.launchpad.HeaderTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.HeaderTile#setHeaderText
 * @function
 */


// Start of sap/ushell/ui/launchpad/HeaderTile.js
// Copyright (c) 2013 SAP AG, All Rights Reserved

/**
 * @name sap.ushell.ui.launchpad.HeaderTile
 * 
 * @private
 */
//sap.ushell.HeaderTile.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/ushell/ui/launchpad/HeaderTile.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.PlusTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.PlusTile.
jQuery.sap.declare("sap.ushell.ui.launchpad.PlusTile");




/**
 * Constructor for a new ui/launchpad/PlusTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getGroupId groupId} : string (default: '')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.PlusTile#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ushell.ui.launchpad.Tile#constructor sap.ushell.ui.launchpad.Tile}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A specialized tile showing a plus icon.
 * @extends sap.ushell.ui.launchpad.Tile
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.PlusTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ushell.ui.launchpad.Tile.extend("sap.ushell.ui.launchpad.PlusTile", { metadata : {

	library : "sap.ushell",
	properties : {
		"groupId" : {type : "string", group : "Misc", defaultValue : ''}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.PlusTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.PlusTile.extend
 * @function
 */

sap.ushell.ui.launchpad.PlusTile.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>groupId</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>groupId</code>
 * @public
 * @name sap.ushell.ui.launchpad.PlusTile#getGroupId
 * @function
 */

/**
 * Setter for property <code>groupId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sGroupId  new value for property <code>groupId</code>
 * @return {sap.ushell.ui.launchpad.PlusTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.PlusTile#setGroupId
 * @function
 */


/**
 * Fired when user clicks on the tile
 *
 * @name sap.ushell.ui.launchpad.PlusTile#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ushell.ui.launchpad.PlusTile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.PlusTile</code>.<br/> itself. 
 *  
 * Fired when user clicks on the tile
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.PlusTile</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.PlusTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.PlusTile#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ushell.ui.launchpad.PlusTile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.PlusTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.PlusTile#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.PlusTile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.PlusTile#firePress
 * @function
 */


// Start of sap/ushell/ui/launchpad/PlusTile.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/
/**
 * @name sap.ushell.ui.launchpad.PlusTile
 * 
 * @private
 */
(function () {
    "use strict";

    sap.ushell.ui.launchpad.PlusTile.prototype.init = function () {
        this.oIcon = new sap.ui.core.Icon({
            src : 'sys-cancel',
            tooltip : sap.ushell.resources.i18n.getText("open_catalog")
        });
    }

    sap.ushell.ui.launchpad.PlusTile.prototype.exit = function () {
        if (this.oIcon) {
            this.oIcon.destroy();
        }
    }

    sap.ushell.ui.launchpad.PlusTile.prototype.onclick = function () {
        this.firePress();
    };

    sap.ushell.ui.launchpad.PlusTile.prototype.onsapspace = function () {
        this.firePress();
    };

    sap.ushell.ui.launchpad.PlusTile.prototype.onsapenter = function () {
        this.firePress();
    };

    // Override setters to avoid rerenderings
    sap.ushell.ui.launchpad.PlusTile.prototype.setGroupId = function (v) {
        this.setProperty("groupId", v, true);        // set property, but suppress rerendering
        return this;
    };
}());

}; // end of sap/ushell/ui/launchpad/PlusTile.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.DynamicTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.tile.DynamicTile.
jQuery.sap.declare("sap.ushell.ui.tile.DynamicTile");




/**
 * Constructor for a new ui/tile/DynamicTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getNumberValue numberValue} : string (default: '0.0')</li>
 * <li>{@link #getNumberState numberState} : sap.ushell.ui.tile.State (default: sap.ushell.ui.tile.State.Neutral)</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getNumberDigits numberDigits} : int (default: 0)</li>
 * <li>{@link #getStateArrow stateArrow} : sap.ushell.ui.tile.StateArrow (default: sap.ushell.ui.tile.StateArrow.None)</li>
 * <li>{@link #getNumberFactor numberFactor} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ushell.ui.tile.TileBase#constructor sap.ushell.ui.tile.TileBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * An applauncher for apps that need to display dynamically updated information
 * @extends sap.ushell.ui.tile.TileBase
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.tile.DynamicTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ushell.ui.tile.TileBase.extend("sap.ushell.ui.tile.DynamicTile", { metadata : {

	library : "sap.ushell",
	properties : {
		"numberValue" : {type : "string", group : "Data", defaultValue : '0.0'},
		"numberState" : {type : "sap.ushell.ui.tile.State", group : "Appearance", defaultValue : sap.ushell.ui.tile.State.Neutral},
		"numberUnit" : {type : "string", group : "Data", defaultValue : null},
		"numberDigits" : {type : "int", group : "Appearance", defaultValue : 0},
		"stateArrow" : {type : "sap.ushell.ui.tile.StateArrow", group : "Appearance", defaultValue : sap.ushell.ui.tile.StateArrow.None},
		"numberFactor" : {type : "string", group : "Data", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.tile.DynamicTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.tile.DynamicTile.extend
 * @function
 */


/**
 * Getter for property <code>numberValue</code>.
 * a number to be formatted with numberDigits decimal digits. Can be sap.ui.core.string as well.
 *
 * Default value is <code>0.0</code>
 *
 * @return {string} the value of property <code>numberValue</code>
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#getNumberValue
 * @function
 */

/**
 * Setter for property <code>numberValue</code>.
 *
 * Default value is <code>0.0</code> 
 *
 * @param {string} sNumberValue  new value for property <code>numberValue</code>
 * @return {sap.ushell.ui.tile.DynamicTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#setNumberValue
 * @function
 */


/**
 * Getter for property <code>numberState</code>.
 * The state of the number, indicating positive or negative conditions
 *
 * Default value is <code>Neutral</code>
 *
 * @return {sap.ushell.ui.tile.State} the value of property <code>numberState</code>
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#getNumberState
 * @function
 */

/**
 * Setter for property <code>numberState</code>.
 *
 * Default value is <code>Neutral</code> 
 *
 * @param {sap.ushell.ui.tile.State} oNumberState  new value for property <code>numberState</code>
 * @return {sap.ushell.ui.tile.DynamicTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#setNumberState
 * @function
 */


/**
 * Getter for property <code>numberUnit</code>.
 * The unit in which numberValue is measured
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#getNumberUnit
 * @function
 */

/**
 * Setter for property <code>numberUnit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumberUnit  new value for property <code>numberUnit</code>
 * @return {sap.ushell.ui.tile.DynamicTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#setNumberUnit
 * @function
 */


/**
 * Getter for property <code>numberDigits</code>.
 * the number of fractional decimal digits
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>numberDigits</code>
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#getNumberDigits
 * @function
 */

/**
 * Setter for property <code>numberDigits</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iNumberDigits  new value for property <code>numberDigits</code>
 * @return {sap.ushell.ui.tile.DynamicTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#setNumberDigits
 * @function
 */


/**
 * Getter for property <code>stateArrow</code>.
 * the state of the trend indicator
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ushell.ui.tile.StateArrow} the value of property <code>stateArrow</code>
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#getStateArrow
 * @function
 */

/**
 * Setter for property <code>stateArrow</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ushell.ui.tile.StateArrow} oStateArrow  new value for property <code>stateArrow</code>
 * @return {sap.ushell.ui.tile.DynamicTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#setStateArrow
 * @function
 */


/**
 * Getter for property <code>numberFactor</code>.
 * defines a scaling factor (like "%", "M" or "k") right to a scaled number
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>numberFactor</code>
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#getNumberFactor
 * @function
 */

/**
 * Setter for property <code>numberFactor</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumberFactor  new value for property <code>numberFactor</code>
 * @return {sap.ushell.ui.tile.DynamicTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#setNumberFactor
 * @function
 */


// Start of sap/ushell/ui/tile/DynamicTile.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * Applauncher displaying an application that provides a service that returns
 * dynamic data.
 * 
 * @name sap.ushell.ui.tile.DynamicTile
 * 
 * @since   1.15.0
 * @private
 */

}; // end of sap/ushell/ui/tile/DynamicTile.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.DynamicTileRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.ui.tile.DynamicTileRenderer");
    
    jQuery.sap.require('sap.ushell.ui.tile.State'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained


    /**
     * @name sap.ushell.ui.tile.DynamicTileRenderer.
     * @static
     * @private
     */
    sap.ushell.ui.tile.DynamicTileRenderer = sap.ui.core.Renderer.extend(sap.ushell.ui.tile.TileBaseRenderer);
    var translationBundle = sap.ushell.resources.i18n;

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    sap.ushell.ui.tile.DynamicTileRenderer.renderPart = function (oRm, oControl) {
        // write the HTML into the render manager
        oRm.write("<div");
        oRm.addClass("sapUshellDynamicTile");
        oRm.writeClasses();
        oRm.write(">");

        // dynamic data
        oRm.write("<div");
        oRm.addClass("sapUshellDynamicTileData");
        oRm.addClass((oControl.getNumberState() ? "sapUshellDynamicTileData" + oControl.getNumberState() :
                                                  "sapUshellDynamicTileData" + sap.ushell.ui.tile.State.Neutral));
        oRm.writeClasses();
        oRm.write(">");

        //sapUshellDynamicTileIndication that includes Arrow and number factor
        oRm.write("<div class='sapUshellDynamicTileIndication'>");

        // state arrow

            if (oControl.getStateArrow()) {
                oRm.write("<div");
                oRm.addClass("sapUshellDynamicTileStateArrow");
                oRm.addClass("sapUshellDynamicTileData" + oControl.getStateArrow());
                oRm.writeClasses();
                oRm.write(">");
                oRm.write("</div>");
            }

            // unit
        oRm.write('<br><div'); //br was added in order to solve the issue of all the combination of presentation options between Number - Arrow - Unit
        oRm.addClass("sapUshellDynamicTileNumberFactor");
        oRm.writeClasses();
        oRm.writeAccessibilityState(oControl, {label : translationBundle.getText("TileUnits_lable") + oControl.getNumberFactor()});
        oRm.write('>');
        oRm.writeEscaped(oControl.getNumberFactor());
        oRm.write('</div>');

        // closeing the sapUshellDynamicTileIndication scope
        oRm.write("</div>");
        //}

        // number
        var numValue = oControl.getNumberValue(),
            number;

        if (typeof numValue === "string" && isNaN(parseFloat(numValue))) {
            number = numValue;
        } else {
            var oNForm = sap.ui.core.format.NumberFormat.getFloatInstance({maxFractionDigits: oControl.getNumberDigits()});
            number = oNForm.format(oControl.getNumberValue());
        }

        oRm.write('<div');
        oRm.addClass("sapUshellDynamicTileNumber");
        oRm.writeClasses();
        if (number && number !== "") {
            oRm.writeAccessibilityState(oControl, {
                label : translationBundle.getText("TileValue_lable") + number
            });
            oRm.write('>');
            oRm.writeEscaped(number);
        } else {
            // in case numberValue is a String
            oRm.write('>');
            oRm.writeEscaped(oControl.getNumberValue());
        }
        oRm.write('</div>');

        // end of dynamic data
        oRm.write("</div>");

        // span element
        oRm.write("</div>");
    };


    sap.ushell.ui.tile.DynamicTileRenderer.getInfoPrefix = function (oControl) {
        return oControl.getNumberUnit();
    };
}());

}; // end of sap/ushell/ui/tile/DynamicTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.ImageTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.tile.ImageTile.
jQuery.sap.declare("sap.ushell.ui.tile.ImageTile");




/**
 * Constructor for a new ui/tile/ImageTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getImageSource imageSource} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ushell.ui.tile.TileBase#constructor sap.ushell.ui.tile.TileBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/tile/ImageTile
 * @extends sap.ushell.ui.tile.TileBase
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.tile.ImageTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ushell.ui.tile.TileBase.extend("sap.ushell.ui.tile.ImageTile", { metadata : {

	library : "sap.ushell",
	properties : {
		"imageSource" : {type : "string", group : "Appearance", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.tile.ImageTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.tile.ImageTile.extend
 * @function
 */


/**
 * Getter for property <code>imageSource</code>.
 * the URL of the image to display
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>imageSource</code>
 * @public
 * @name sap.ushell.ui.tile.ImageTile#getImageSource
 * @function
 */

/**
 * Setter for property <code>imageSource</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sImageSource  new value for property <code>imageSource</code>
 * @return {sap.ushell.ui.tile.ImageTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.ImageTile#setImageSource
 * @function
 */


// Start of sap/ushell/ui/tile/ImageTile.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * Applauncher displaying a tile with an added image
 * 
 * @name sap.ushell.ui.tile.ImageTile
 * 
 * @since   1.15.0
 * @private
 */
}; // end of sap/ushell/ui/tile/ImageTile.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.ImageTileRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.ui.tile.ImageTileRenderer");
    

    /**
     * @name sap.ushell.ui.tile.ImageTileRenderer
     * @static
     * @private
     */

    sap.ushell.ui.tile.ImageTileRenderer = sap.ui.core.Renderer.extend(sap.ushell.ui.tile.TileBaseRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     *
     * @private
     */
    sap.ushell.ui.tile.ImageTileRenderer.renderPart = function (oRm, oControl) {
        // write the HTML into the render manager
        oRm.write("<img");
        oRm.addClass("sapUshellImageTile");
        oRm.writeClasses();
        oRm.writeAttributeEscaped("src", oControl.getImageSource());
        oRm.write("/>");
    };
}());

}; // end of sap/ushell/ui/tile/ImageTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.StaticTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.tile.StaticTile.
jQuery.sap.declare("sap.ushell.ui.tile.StaticTile");




/**
 * Constructor for a new ui/tile/StaticTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ushell.ui.tile.TileBase#constructor sap.ushell.ui.tile.TileBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * An applauncher tile for simple, static apps, displaying title, subtitle, an icon and additional information
 * @extends sap.ushell.ui.tile.TileBase
 * @version 1.24.5
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.tile.StaticTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ushell.ui.tile.TileBase.extend("sap.ushell.ui.tile.StaticTile", { metadata : {

	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.tile.StaticTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.tile.StaticTile.extend
 * @function
 */


// Start of sap/ushell/ui/tile/StaticTile.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * Applauncher displaying a tile for an application that supports
 * a title, a subtitle, an icon and additional information
 * 
 * @name sap.ushell.ui.tile.StaticTile
 * 
 * @since   1.15.0
 * @private
 */
}; // end of sap/ushell/ui/tile/StaticTile.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.StaticTileRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";

    jQuery.sap.declare("sap.ushell.ui.tile.StaticTileRenderer");
    

    /**
     * @name sap.ushell.ui.tile.StaticTileRenderer 
     * @static
     * @private
     */
    sap.ushell.ui.tile.StaticTileRenderer = sap.ui.core.Renderer.extend(sap.ushell.ui.tile.TileBaseRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     *
     * @private
     */
    sap.ushell.ui.tile.StaticTileRenderer.renderPart = function (oRm, oControl) {
        // write the HTML into the base classes' render manager
        oRm.write("<span");
        oRm.addClass("sapUshellStaticTile");
        oRm.writeClasses();
        oRm.write(">");

        // span element
        oRm.write("</span>");
    };
}());

}; // end of sap/ushell/ui/tile/StaticTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.Shell.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.Shell.view');
//Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
	"use strict";
	/*global jQuery, sap, location, window, clearTimeout, setTimeout */

	
	
	
	
//	jQuery.sap.require("sap.ushell.renderers.fiori2.search.SearchSelect");

	//add touch support for mobile devices
	
	
	sap.ui.jsview("sap.ushell.renderers.fiori2.Shell", {

		/**
		 * Most of the following code acts just as placeholder for new Unified Shell Control.
		 *
		 * @param oController
		 * @returns {sap.ui.unified.Shell}
		 * @public
		 */
		createContent: function (oController) {
			var self = this;
			var oViewData = this.getViewData() || {},
			oConfig = oViewData.config || {},
			bStateEmbedded = (oConfig.appState === "embedded") ? true : false,
					bStateHeaderless = (oConfig.appState === "headerless") ? true : false,
							fnPaneButtonTooltip = function (bState, sShowTooltip, sHideTooltip) {
						return bState ? sHideTooltip : sShowTooltip;
					},
					fnShellUpdateAggItem = function (sId, oContext) {
						return sap.ui.getCore().byId(oContext.getObject());
					},
					oLoadingDialog = new sap.ushell.ui.launchpad.LoadingDialog({
						id: "loadingDialog",
						title: null,
						text: "",   // in order to calculate dimension before first call
						showCancelButton: false
					}),
					oConfigButton = new sap.ui.unified.ShellHeadItem({
						id: "configBtn",
						tooltip: "{i18n>showGrpsBtn_tooltip}",
						icon: sap.ui.core.IconPool.getIconURI("menu2"),
						selected: {path: "/currentState/showPane"},
						press: [oController.togglePane, oController]
					}),
					oHomeButton = new sap.ui.unified.ShellHeadItem({
						id: "homeBtn",
						title: "{i18n>homeBtn_tooltip}",
						tooltip: "{i18n>homeBtn_tooltip}",
						icon: sap.ui.core.IconPool.getIconURI("home"),
						press: [oController.navigateToHome, oController]
					}),
					oBackButton = new sap.ui.unified.ShellHeadItem({
						id: "backBtn",
						title: "{i18n>backBtn_tooltip}",
						tooltip: "{i18n>backBtn_tooltip}",
						icon: {
							parts : ["/rtl"],
							formatter : function (bRtl) {
								return bRtl ? sap.ui.core.IconPool.getIconURI("feeder-arrow") : sap.ui.core.IconPool.getIconURI("nav-back");
							}
						},
						press: [oController.navigateToHome, oController]
					});

					oConfigButton.addEventDelegate({
						onsaptabprevious: function (oEvent) {
							try {
								if (!sap.ushell.renderers.fiori2.AccessKeysHandler.goToEdgeTile('last')) {
									sap.ui.getCore().byId('actionsBtn').focus();
								}
								oEvent.preventDefault();
							} catch (e) {
							}
						}
					});

					oHomeButton.addEventDelegate({
						onsaptabprevious: function (oEvent) {
							try {
								if (!sap.ushell.renderers.fiori2.AccessKeysHandler.goToEdgeTile('last')) {
									jQuery(document).find(".sapUshellNoFilteredItems").focus();
								}
								oEvent.preventDefault();
							} catch (e) {
							}
						}
					});


					var oActionsUserButton,
					oActionsButton;
					if (bStateEmbedded) {
						oActionsButton = new sap.ui.unified.ShellHeadItem({
							id: "standardActionsBtn",
							tooltip: "{i18n>headerActionsTooltip}",
							icon: sap.ui.core.IconPool.getIconURI("account"),
							press: [oController.pressActionBtn, oController]
						});
					}
					else if (!bStateHeaderless) {
						oActionsUserButton = new sap.ui.unified.ShellHeadUserItem({
							id: "actionsBtn",
							username: sap.ushell.Container.getUser().getFullName(),
							tooltip: "{i18n>headerActionsTooltip}",
							image: sap.ui.core.IconPool.getIconURI("account"),
							press: [oController.pressActionBtn, oController]
						});
						oActionsUserButton.addEventDelegate({
							onsaptabnext: function(oEvent){
								try {
									var oShell = sap.ui.getCore().byId('shell'),
									oData = oShell.getModel().getData();
									if ( oData.currentState.stateName === "home") {
										if (oData.currentState.showPane) {
											var groupListPage = sap.ui.getCore().byId('groupListPage');
											var groupList = groupListPage.getContent()[1];
											var item = groupList.getItems()[0];
											if (item) {
												item.focus();
											} else {
												sap.ui.getCore().byId('addGroupActionItem').focus();
											}
										}
										else {
											if (!sap.ushell.renderers.fiori2.AccessKeysHandler.goToEdgeTile('first')) {
												sap.ui.getCore().byId('configBtn').focus();
											}else{
												oUnifiedShell.setFocusOnFirstGroupOnPage();
											}
										}
										oEvent.preventDefault();
									}
								} catch (e) {
								}
							}
						});
						/*
                 in case user image URI is set we try to get it,
                 only if request was successful, we set it on the
                 oActionsButton icon.
                 In case of success, 2 get requests will be executed
                 (one here and the second by the control) however
                 the second one will be taken from the cache
						 */
						var imageURI = sap.ushell.Container.getUser().getImage();

						if (imageURI) {
							//Using jQuery.ajax instead of jQuery.get in-order to be able to control the caching.
							jQuery.ajax({
								url: imageURI,
								//"cache: false" didn't work as expected hence, turning off the cache vie explicit headers.
								headers: {
									'Cache-Control': 'no-cache, no-store, must-revalidate',
									'Pragma': 'no-cache',
									'Expires': '0'
								},
								success: function () {
									oActionsUserButton.setImage(imageURI);
								},
								error: function () {
									jQuery.sap.log.error("Could not load user image from: " + imageURI, "", "sap.ushell.renderers.fiori2.Shell.view");
								}
							});
						}
					}


					var oUnifiedShell = new sap.ui.unified.Shell({
						id: "shell",
						fullHeightContent: true,
						showPane: {path: "/currentState/showPane"},
						headItems: {path: "/currentState/headItems", factory: fnShellUpdateAggItem},
						headEndItems: {path: "/currentState/headEndItems", factory: fnShellUpdateAggItem},
						user: oActionsUserButton,
						paneContent: {path: "/currentState/paneContent", factory: fnShellUpdateAggItem},
						headerHiding: {path: "/currentState/headerHiding"},
						headerVisible : {path: "/currentState/headerVisible"}
					});
					oUnifiedShell._setStrongBackground(true);

					// fixing double events which occur on Android. Two events are caught by the UI -
					// (touchend & click event) and thrown from the open/close pane button (oConfigButton)
					// e.g. sap.ui.unified.ShellHeadItem.onclick method
					// which causes the pane to remain in its state when trying to open / close the pane.
					// this is a temporary fix until we will do it on the ShellHeadItem class level.
					if (sap.ui.Device.os.android) {
						oConfigButton.addEventDelegate({
							onclick : function (e) {
								e.preventDefault();
							}
						});
					}

					oUnifiedShell.focusOnConfigBtn = function () {
						jQuery.sap.delayedCall(0, this, function () {
							if (!bStateHeaderless) {
								var oConfig = sap.ui.getCore().byId('configBtn');
								if( oConfig ){
									oConfig.focus();
								}
							}
						});
					};

					oUnifiedShell.oldInvalidate = oUnifiedShell.invalidate;
					oUnifiedShell.invalidate = function () {
						this.oldInvalidate.apply(this, arguments);
					};

					oUnifiedShell.setFocusOnFirstGroupOnPage = function(){
						var oDashboardGroupsNode = sap.ui.getCore().byId('dashboardGroups'),
						oNode = jQuery( oDashboardGroupsNode.getDomRef() ).find(".sapUshellTileContainer:first");
						if( oNode[0] ){
							oNode.focus();
						}else{
							sap.ui.getCore().byId('addGroupActionItem').focus();
						}
					};

					oUnifiedShell.setFocusOnFirstGroupInList = function(){
						var groupsNode = sap.ui.getCore().byId('groupList'),
						oNode = jQuery( groupsNode.getDomRef() ).find("li:first");
						if( oNode[0] ){
							oNode.focus();
						}
					};


					this.oDashboardManager = new sap.ushell.renderers.fiori2.launchpad.DashboardManager("dashboardMgr", {
						model : oController.getModel(),
						config : oConfig
					});

					var oDashboardPage = this.pageFactory("dashboardPage", this.oDashboardManager.getDashboardView(), !sap.ui.Device.system.desktop),
					oShellPage = this.pageFactory("shellPage", oUnifiedShell, true);

					this.initNavContainer(oController);

					if (bStateEmbedded) {
						oUnifiedShell.setIcon(sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif'));
					}
					else {
						this.initShellBarLogo(oUnifiedShell);
					}

					this.setDisplayBlock(true);

//					if (!sap.ui.Device.system.desktop) {
//					oShellPage.setEnableScrolling(false);
//					}
					this.aDanglingControls = [sap.ui.getCore().byId('navContainer'), oShellPage, oDashboardPage, oBackButton, oLoadingDialog, oHomeButton, oConfigButton];
					oUnifiedShell.updateAggregation = this.updateShellAggregation;

					var bSearchEnable = (oConfig.enableSearch !== false);
					oController.getModel().setProperty("/searchAvailable", bSearchEnable);

					if (bSearchEnable) {

						//Search Icon
						self.oSearchField = new sap.ui.unified.ShellHeadItem({
							id: "sf",
							tooltip: "{i18n>searchbox_tooltip}",
							icon: sap.ui.core.IconPool.getIconURI("search"),
//							width: "100%",
							visible: {path: "/searchAvailable"},
							press: function (event) {
								if(!self.oHeadSearchBox){
									self.initHeadSearchBox();
									self.openHeadSearchBox(event,true);

								}else{
									if(!self.oHeadSearchBox.getVisible()){
										self.openHeadSearchBox(event,false);									
									}else{
										if(self.oHeadSearchInput.getValue() === ""){
											self.closeHeadSearchBox(event);
										}else{
											self.handleHash(self.getModel("searchModelInHead"));
											self.oHeadSearchInput.destroySuggestionRows();
											self.closeHeadSearchBox(event);										
										}
									}	
								}


							}
						});

						self.aDanglingControls.push(self.oSearchField);

					}

					//This property is needed for a special scenario when a remote Authentication is required.
					//IFrame src is set by UI2 Services
					this.logonIFrameReference = null;

					return new sap.m.App({
						pages: oShellPage
					});
		},


		_getIconURI: function (ico) {
			var result = null;
			if (ico) {
				var match = /url[\s]*\('?"?([^\'")]*)'?"?\)/.exec(ico);
				if (match) {
					result = match[1];
				}
			}
			return result;
		},

		initShellBarLogo: function (oUnifiedShell) {
			jQuery.sap.require("sap.ui.core.theming.Parameters");
			var ico = sap.ui.core.theming.Parameters.get("sapUiGlobalLogo");
			if (ico) {
				ico = this._getIconURI(ico);
				if(!ico){
					oUnifiedShell.setIcon(sap.ui.resource("sap.ui.core", "mimes/logo/sap_50x26.png")); //sets the logo manually on the sap.ui.unified.Shell instance
				}
			}

			//Change the Theme icon once it is changed (in the theme designer) 
			var that=this;
			sap.ui.getCore().attachThemeChanged( function(){
				var newIco = sap.ui.core.theming.Parameters.get("sapUiGlobalLogo");
				if(newIco) {
					newIco= that._getIconURI(newIco);
					if(newIco) {
						oUnifiedShell.setIcon(newIco);
					}
				}
			});
		},

		initHeadSearchBox: function () {
			var self = this;
			var oShell;

			//Search Box, contains Select and Input
			self.oHeadSearchBox = sap.ui.getCore().byId("headSearchBox");
			if(!self.oHeadSearchBox){
				self.oHeadSearchBox = new sap.m.Toolbar({
					id: "headSearchBox"
				}).addStyleClass('sapUshellHeadSearchBox');
			}
			oShell = sap.ui.getCore().byId('shell');
			oShell.setSearch(self.oHeadSearchBox);
            
			//Search Select
			self.oHeadSearchSelect = sap.ui.getCore().byId("headSearchSelect");
			if(!self.oHeadSearchSelect){
				self.oHeadSearchSelect = new sap.m.Select({ 
					id: "headSearchSelect",
					name : "headSearchSelect",
//					maxWidth: "38%",
					autoAdjustWidth : true,
					items : {
						path : "searchModelInHead>/connectors",
						template: new sap.ui.core.Item({
							key: "{searchModelInHead>labelRaw}",
							text: "{searchModelInHead>label}"
						})
					}
				}).addStyleClass('sapUshellContainerSearchSelect');	
			}


			//Search Input
			self.oHeadSearchInput = sap.ui.getCore().byId("headSearchInput");
			if(!self.oHeadSearchInput){
				self.oHeadSearchInput = new sap.m.Input({
					id : "headSearchInput",
//					width: "60%",
					type : "Text",
					// value:  "{searchModelInHead>/searchBoxTerm}",
					showValueStateMessage: false,
					showTableSuggestionValueHelp: false,
					showSuggestion: true,
					filterSuggests: false,
					suggestionColumns: [new sap.m.Column({})],
					liveChange: function(oEvent){
						self.inputLiveChange(oEvent);
					},
					suggest: function(oEvent){
						self.handleSuggest(oEvent);
					},
					suggestionItemSelected: function(oEvent){
						if(self.changeTimer){
							window.clearTimeout(self.changeTimer);
							self.changeTimer = null;
						}
						self.selectSuggest(oEvent);
					}, 
					change: function(oEvent) {
						//workaround because suggestionItemSelected event will fire soon and
						//we must avoid to fire 2 searches. Just using suggestionItemSelected
						//does also not work since we cannot get the selected row from this event.
						self.changeTimer = window.setTimeout(function(){
							var searchModelInHead = self.getModel("searchModelInHead");
							self.handleHash(searchModelInHead);
							self.oHeadSearchInput.destroySuggestionRows();
							self.closeHeadSearchBox(event);	
							self.changeTimer = null;
						},100);
					}
				});            		
			}

//			self.oHeadSearchBox.addContent([self.oHeadSearchSelect, self.oHeadSearchInput]);
			self.oHeadSearchBox.addContent(self.oHeadSearchSelect);
			self.oHeadSearchBox.addContent(self.oHeadSearchInput);
            
            self.oHeadSearchBox.addEventDelegate({
				onAfterRendering: function(oEvent) {
                    // add class to select parent divs, set css style and animation 
                    jQuery('#headSearchBox').parent().parent().parent().addClass('headSearchDivContainer');
                    jQuery('#headSearchBox').parent().parent().addClass('headSearchDiv');
				}
			}, self.oHeadSearchBox);
		},

        
		openHeadSearchBox: function (event, bFirstTime) {
			var self = this;

			var oShell = sap.ui.getCore().byId('shell');
			var searchBox = oShell.getSearch();
			if(!searchBox){
				oShell.setSearch(self.oHeadSearchBox);
				bFirstTime=true;
			}			

			// Search Model in Core
			var searchModel = sap.ui.getCore().getModel("searchModel");
			if (!searchModel) {
				searchModel = new sap.ushell.renderers.fiori2.search.SearchModel();
				searchModel.setSizeLimit(200);

				sap.ui.getCore().setModel(searchModel, "searchModel");
				searchModel.searchInit();
			}
			else {
//				searchModel.setProperty('/isNormalSearchEnable', true);
			}
			searchModel.setSkip(0, false);

			self.setModel(sap.ushell.resources.i18nModel, "i18n");


			// Search Model in Head
			var searchModelInHead = self.getModel("searchModelInHead");
			if(!searchModelInHead){
				searchModelInHead = new sap.ushell.renderers.fiori2.search.SearchModel();
				searchModelInHead.setSizeLimit(200);

				self.setModel(searchModelInHead, "searchModelInHead");
				searchModelInHead.searchInit();

				self.createHeadSearchBoxViews(searchModelInHead);
			}
			else {
//				searchModelInHead.setProperty('/isNormalSearchEnable', true);
			}

			//Reset Select
			var json;
			if(searchModelInHead.getProperty('/isNormalSearchEnable')){
				json = searchModelInHead.createAllDataSource();
			}else{
				json = searchModelInHead.createAppDataSource();
			}

			searchModelInHead.setProperty("/dataSource", json);
			if(searchModelInHead.getProperty('/isNormalSearchEnable')){
				self.oHeadSearchSelect.setSelectedKey("$$ALL$$");				
			}else{
				self.oHeadSearchSelect.setSelectedKey("$$APP$$");
			}

//			searchModelInHead.setProperty("/isNormalSearchEnable", true);

			//Reset Text Empty
			searchModelInHead.setProperty("/searchBoxTerm", "");
			self.oHeadSearchInput.setValue("");
			self.oHeadSearchInput.setPlaceholder(sap.ushell.resources.i18n.getText("search"));

			//Reset Search Box
			self.oHeadSearchBox.setVisible(true);
            self.oHeadSearchBox.addEventDelegate({
				onAfterRendering: function(oEvent) {
                    if(bFirstTime){
                        jQuery('.headSearchDiv').css("maxWidth", "38rem");
			         }else{
				        jQuery('.headSearchDiv').css("maxWidth", "0rem");
				        jQuery('.headSearchDiv').animate({'maxWidth':'38rem'}, 100);	
			         }
				}
			}, self.oHeadSearchBox);
		},


		closeHeadSearchBox: function(){	
			var self = this;
			jQuery('.headSearchDiv').animate(
					{'maxWidth':'38rem'}, 
					{duration: 100, complete: function(){
						self.oHeadSearchBox.setVisible(false);
					}}); 
		},


		createHeadSearchBoxViews: function(searchModelInHead){
			var self = this;

			//Change Event
			self.oHeadSearchSelect.attachChange(function (oEvent) {

				var selectedDS = self.oHeadSearchSelect.getSelectedItem();
				var json = {};

				if(selectedDS.getKey() === "$$ALL$$"){
					json = searchModelInHead.createAllDataSource();

				}else if(selectedDS.getKey() === "$$APP$$"){
					json = searchModelInHead.createAppDataSource();

				}else{
					json = searchModelInHead.sina.createDataSource({
						objectName : {label: selectedDS.getText(), value: selectedDS.getKey()},
						packageName : {label: "", value:""},
						schemaName : {label: "", value:""},
						label: ""
					});
				}

				searchModelInHead.setProperty("/dataSource", json);

				//set input box placeholder
				if(selectedDS.getKey() !== "$$ALL$$"){
					self.oHeadSearchInput.setPlaceholder(sap.ushell.resources.i18n.getText("searchIn") + ": " + selectedDS.getText());					
				}else{
					self.oHeadSearchInput.setPlaceholder(sap.ushell.resources.i18n.getText("search"));										
				}
			}, this);


			/*
			 * Search Input View
			 */       
			//Key Press Event
			self.oHeadSearchInput.addEventDelegate({
				onAfterRendering: function(oEvent) {
					oEvent.srcControl.focus();
				},


			}, self.oHeadSearchInput);


			self.oHeadSearchInput.bindAggregation("suggestionRows", "searchModelInHead>/mixedSection", function (path, bData) {
				var label = new sap.m.Label({
					text: "{searchModelInHead>mixedLabel}"
				}).addStyleClass ('sapUshellSuggestText').addStyleClass('sapUshellSearchSuggestionNavItem');
				label.addEventDelegate({                	                	
					onAfterRendering: function(){
						self.bTagUnescaper(this.getDomRef());                		
					}
				}, label);
				label.data("labelRaw", "{searchModelInHead>labelRaw}");
				label.data("targetURL", "{searchModelInHead>targetURL}");
				label.data("dataSource", "{searchModelInHead>dataSource}");
                label.data("suggestType", "{searchModelInHead>suggestType}");
				var icon = new sap.ui.core.Icon ({
					src: "{searchModelInHead>icon}"
				}).addStyleClass('sapUshellSuggestIcon');
				var app = new sap.m.Label({
					text: {
						path: "searchModelInHead>icon",
						formatter: function(sValue) {
							if (sValue) {
								return "<i>"+sap.ushell.resources.i18n.getText("label_app")+"</i>";
							}
							return "";
						}
					}
				}).addStyleClass ('sapUshellSuggestText').addStyleClass('sapUshellSearchSuggestionNavItem');
				app.addEventDelegate({                	                	
					onAfterRendering: function(){
						self.bTagUnescaper(this.getDomRef());                			
					}
				}, app);
				var cell =  new sap.m.CustomListItem({
					type:sap.m.ListType.Active,
					content: [app,icon,label]
				});
				cell.getText = function(){
					return label.data("labelRaw");
				};
				if (!self.oHeadSearchInput.getValue())
					return null;
				return new sap.m.ColumnListItem({
					cells: [cell],
					type: "Active"
				});
			});
		},


		bTagUnescaper: function (domref) {
			var innerhtml = domref.innerHTML;
			while( innerhtml.indexOf('&lt;b&gt;')+innerhtml.indexOf('&lt;/b&gt;') >= -1  ){ // while these tags are found
				innerhtml = innerhtml.replace('&lt;b&gt;', '<b>');
				innerhtml = innerhtml.replace('&lt;/b&gt;', '</b>');
			}
			while( innerhtml.indexOf('&lt;i&gt;')+innerhtml.indexOf('&lt;/i&gt;') >= -1  ){ // while these tags are found
				innerhtml = innerhtml.replace('&lt;i&gt;', '<i>');
				innerhtml = innerhtml.replace('&lt;/i&gt;', '</i>');
			}
			domref.innerHTML = innerhtml;
		},

		handleHash: function(searchModel){
			var self = this;

			if (self.oHeadSearchInput.getValue() === "")
				return;
			var sHash = "#Action-search&/searchTerm=" + encodeURIComponent(self.oHeadSearchInput.getValue()) + "&dataSource=" + encodeURIComponent(JSON.stringify(searchModel.getDataSourceJson()));
			if (window.location.hash === sHash) {
				return;
			}
			else {
				window.location.href = sHash;
				searchModel.setProperty("/searchBoxTerm", self.oHeadSearchInput.getValue());
			}
		},

		inputLiveChange: function (oEvent) {
			//destroy suggetion box items
			var searchModel = this.getModel("searchModelInHead");
			if (!this.oHeadSearchInput.getValue()) {
				searchModel.setProperty("/appSection", []);
				searchModel.setProperty("/suggestSection", []);
				searchModel.setProperty("/mixedSection", []);
			}
		},

		handleSuggest: function (oEvent) {
			this.oHeadSearchInput.destroySuggestionItems();
			var suggestTerm = this.oHeadSearchInput.getValue();
			var searchModel = this.getModel("searchModelInHead");
			searchModel.setProperty("/searchBoxTerm", suggestTerm);
			searchModel.doSuggestion();
		},

		selectSuggest: function (oEvent) {
			var searchModel = this.getModel("searchModelInHead");
            
            var suggestType = oEvent.getParameter("selectedRow").getCells()[0].getContent()[2].data("suggestType");                
			var searchTerm = oEvent.getParameter("selectedRow").getCells()[0].getContent()[2].data("labelRaw");
			var dataSource = oEvent.getParameter("selectedRow").getCells()[0].getContent()[2].data("dataSource");
			var targetURL = oEvent.getParameter("selectedRow").getCells()[0].getContent()[2].data("targetURL");
            
            if(suggestType === "dataSourceSuggest"){
                
                //Reset Text Empty
			     searchModel.setProperty("/searchBoxTerm", "");
			     this.oHeadSearchInput.setValue("");

                
                //set select and datasource in model
                this.oHeadSearchSelect.setSelectedKey(searchTerm);

                var selectedDS = this.oHeadSearchSelect.getSelectedItem();
				var json = {};

				if(selectedDS.getKey() === "$$ALL$$"){
					json = searchModel.createAllDataSource();

				}else if(selectedDS.getKey() === "$$APP$$"){
					json = searchModel.createAppDataSource();

				}else{
					json = searchModel.sina.createDataSource({
						objectName : {label: selectedDS.getText(), value: selectedDS.getKey()},
						packageName : {label: "", value:""},
						schemaName : {label: "", value:""},
						label: ""
					});
				}

				searchModel.setProperty("/dataSource", json);

                //set input box placeholder
				if(selectedDS.getKey() !== "$$ALL$$"){
					this.oHeadSearchInput.setPlaceholder(sap.ushell.resources.i18n.getText("searchIn") + ": " + selectedDS.getText());					
				}else{
					this.oHeadSearchInput.setPlaceholder(sap.ushell.resources.i18n.getText("search"));										
				}
                
                return;
            }
            
			var sHash;
			if (targetURL) {
				sHash = targetURL;
			}
			else {
				searchModel.setSearchTerm(searchTerm, false);
				searchModel.setDataSource(dataSource, false);
				sHash = "#Action-search&/searchTerm=" + encodeURIComponent(searchModel.getProperty("/searchBoxTerm")) + "&dataSource=" + encodeURIComponent(JSON.stringify(searchModel.getDataSourceJson()));
			}
			if (window.location.hash !== sHash) {
                if (sHash.charAt(0) === '#')
                    window.location.href = sHash;
                else 
                    window.open(sHash);
				this.closeHeadSearchBox(event);	
			}
		},


		initNavContainer: function (oController) {
			var oDashboardPage = sap.ui.getCore().byId("dashboardPage"),
			oNavContainer = new sap.m.NavContainer({
				id: "navContainer",
				pages: [oDashboardPage],
				initialPage: oDashboardPage,
				afterNavigate: jQuery.proxy(oController.onAfterNavigate, oController)
			});

			oNavContainer.addCustomTransition(
					"slideBack",
					sap.m.NavContainer.transitions.slide.back,
					sap.m.NavContainer.transitions.slide.back
			);

			return oNavContainer;
		},


		updateShellAggregation: function (sName) {
			/*jslint nomen: true */
			var oBindingInfo = this.mBindingInfos[sName],
			oAggregationInfo = this.getMetadata().getJSONKeys()[sName],
			oClone;

			jQuery.each(this[oAggregationInfo._sGetter](), jQuery.proxy(function (i, v) {
				this[oAggregationInfo._sRemoveMutator](v);
			}, this));
			jQuery.each(oBindingInfo.binding.getContexts(), jQuery.proxy(function (i, v) {
				oClone = oBindingInfo.factory(this.getId() + "-" + i, v) ? oBindingInfo.factory(this.getId() + "-" + i, v).setBindingContext(v, oBindingInfo.model) : "";
				this[oAggregationInfo._sMutator](oClone);
			}, this));
		},


		// Disable bouncing outside of the boundaries
		disableBouncing: function (oPage) {
			/*jslint nomen: true */
			oPage.onBeforeRendering = function () {
				sap.m.Page.prototype.onBeforeRendering.apply(oPage);

				var oScroller = this._oScroller,
				oOriginalAfterRendering = oScroller.onAfterRendering;

				oScroller.onAfterRendering = function () {
					oOriginalAfterRendering.apply(oScroller);

					if (oScroller._scroller) {
						oScroller._scroller.options.bounce = false;
					}
				};
			};

			return oPage;
		},


		getControllerName: function () {
			return "sap.ushell.renderers.fiori2.Shell";
		},


		pageFactory: function (sId, oControl, bDisableBouncing) {
			var oPage = new sap.m.Page({
				id: sId,
				showHeader: false,
				showFooter: false,
				content: oControl,
				enableScrolling: !!sap.ui.Device.system.desktop
			}),
			aEvents = ["onAfterHide", "onAfterShow", "onBeforeFirstShow", "onBeforeHide", "onBeforeShow"],
			oDelegates = {};

			// Pass navigation container events to children.
			jQuery.each(aEvents, function (iIndex, sEvent) {
				oDelegates[sEvent] = jQuery.proxy(function (evt) {
					jQuery.each(this.getContent(), function (iIndex, oControl) {
						/*jslint nomen: true */
						oControl._handleEvent(evt);
					});
				}, oPage);
			});

			oPage.addEventDelegate(oDelegates);
			if (bDisableBouncing && sap.ui.Device.system.desktop) {
				this.disableBouncing(oPage);
			}

			return oPage;
		},

		onAfterRendering: function () {
			if (window.f2p) {//If performance is enabled we initialize the monitor UI so that CTRL + ALT +  L will open it.
				jQuery.sap.require("sap.ushell.components.perf.monitor");
				window.f2pMonitor.init(sap.ui.getCore().byId("navContainer"));
			}
		},

		createIFrameDialog: function () {
			jQuery.sap.require("sap.ushell.ui.footerbar.ContactSupportButton");
			var oDialog = null;
			var oLogonIframe = this.logonIFrameReference;

			var _getIFrame = function() {
				//In order to assure the same iframe for SAML authentication is not reused, we will first remove it from the DOM if exists.
				if(oLogonIframe){
					oLogonIframe.remove();
				}
				//The src property is empty by default. the caller will set it as required.
				return $('<iframe id="SAMLDialogFrame" src="" frameborder="0"></iframe>');
			};

			var _hideDialog = function () {
				oDialog.addStyleClass('samlDialogHidden');
				$('#sap-ui-blocklayer-popup').addClass('samlDialogHidden');
			};

			//A new dialog wrapper with a new inner iframe will be created each time.
			this.destroyIFrameDialog();

			var closeBtn = new sap.m.Button({
				text: sap.ushell.resources.i18n.getText("samlCloseBtn"),
				press: function () {
					sap.ushell.Container.cancelLogon(); // Note: calls back destroyIFrameDialog()!
				}
			});

			var contactBtn = new sap.ushell.ui.footerbar.ContactSupportButton();
			contactBtn.setWidth('150px');
			contactBtn.setIcon('');

			var oHTMLCtrl = new sap.ui.core.HTML("SAMLDialogFrame");
			//create new iframe and add it to the Dialog HTML control
			this.logonIFrameReference = _getIFrame();
			oHTMLCtrl.setContent(this.logonIFrameReference.prop('outerHTML'));

			oDialog = new sap.m.Dialog({
				id: "SAMLDialog",
				title: sap.ushell.resources.i18n.getText("samlDialogTitle"),
				contentWidth: "50%",
				contentHeight: "50%",
				leftButton: contactBtn,
				rightButton: closeBtn
			});

			oDialog.addContent(oHTMLCtrl);
			oDialog.open();
			//Make sure to manipulate css properties after the dialog is rendered.
			_hideDialog();

			this.logonIFrameReference = $('#SAMLDialogFrame');
			return this.logonIFrameReference[0];
		},

		destroyIFrameDialog : function () {
			var dialog = sap.ui.getCore().byId('SAMLDialog');
			if(dialog){
				dialog.destroy();
			}
			this.logonIFrameReference = null;
		},

		showIFrameDialog : function () {
			//remove css class of dialog
			var oDialog = sap.ui.getCore().byId('SAMLDialog');
			if (oDialog) {
				oDialog.removeStyleClass('samlDialogHidden');
				$('#sap-ui-blocklayer-popup').removeClass('samlDialogHidden');
			}
		}


	});
}());

}; // end of sap/ushell/renderers/fiori2/Shell.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.HistoryScreen.controller') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.HistoryScreen.controller');
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, console */

    
    
    
    
    

    /**
     * @name "sap.ushell.renderers.fiori2.search.HistoryScreen
     * @extends sap.ui.core.mvc.Controller
     * @public
     */
    sap.ui.controller("sap.ushell.renderers.fiori2.search.HistoryScreen", {

        /**
         * SAPUI5 lifecycle hook.
         * @public
         */
        onInit: function () {
            var self = this;
            this.oLaunchPageService = sap.ushell.Container.getService("LaunchPage");
            this.oUserRecentsService = sap.ushell.Container.getService("UserRecents");
            this.oSearchService = sap.ushell.Container.getService("Search");
            this.oCurrentSearch = null;

            var that = this,
                oEventBus = sap.ui.getCore().getEventBus(),
                oRecentModel = new sap.ui.model.json.JSONModel();

            oRecentModel.setProperty("/apps", []);
            oRecentModel.setProperty("/searches", []);
            oRecentModel.setProperty("/dataSources", []);
            this.getView().setModel(oRecentModel);

            oEventBus.subscribe("search", this.newSearchInvoked, this);
            oEventBus.subscribe("searchDataSourceChange", this.newSearchCategory, this);
            oEventBus.subscribe("closeCurtain", this.saveSearch, this);
            oEventBus.subscribe("openApp", this.appOpened, this);
            oEventBus.subscribe("openHistoryScreen", this.updateView, this);

        },

        onExit: function () {
            if (this.oCurrentSearch) {
                this.oUserRecentsService.noticeSearch(this.oCurrentSearch);
            }
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.unsubscribe("search", this.newSearchInvoked, this);
            oEventBus.unsubscribe("searchDataSourceChange", this.newSearchCategory, this);
            oEventBus.unsubscribe("closeCurtain", this.saveSearch, this);
            oEventBus.unsubscribe("openApp", this.appOpened, this);
            oEventBus.unsubscribe("openHistoryScreen", this.updateView, this);
        },

        updateView: function (sChannelId, sEventId, oData) {
            var self = this;
            var oModel = this.getView().getModel();

            // this.oUserRecentsService.getRecentApps().done(function (aRecentApps) {
            //     oModel.setProperty("/apps", aRecentApps.filter(function (elem) {
            //         return elem.title && elem.url;
            //     }));
            // });

            var removeBTags = function(string){
                return string.replace(/<b>/g, "").replace(/<\/b>/g, "");
            };

            this.oUserRecentsService.getRecentSearches().done(function (aRecentSearches) {
                
                for (var i = 0; i < aRecentSearches.length; i++) {
                    var aSearch = aRecentSearches[i];
                    if (aSearch && aSearch.oDataSource && aSearch.oDataSource.objectName) {
                        aSearch.oDataSource.objectName.label = removeBTags(aSearch.oDataSource.objectName.label);
                    }
                }


                aRecentSearches = aRecentSearches.filter(function(recentSearch) {
                    if (recentSearch && recentSearch.sTerm && recentSearch.sTerm !== "") return true;
                    else return false;
                });

                oModel.setProperty("/searches", aRecentSearches);
            });

            //Datasource suggestion query 
            // self.sina = sap.ushell.Container.getService("Search").getSina();
            // var system = self.sina.sinaSystem();
            // var systemId = "";
            // var serverInfoDeferred = system.getServerInfo();
            // serverInfoDeferred.done(function(){
            //     if (system && system.properties && system.properties.rawServerInfo && system.properties.rawServerInfo.ServerInfo)
            //         systemId = system.properties.rawServerInfo.ServerInfo.SystemId;
                
            //     var sapclient = system.properties.rawServerInfo.ServerInfo.Client;
            //     self.searchConnector = systemId+sapclient+"~ESH_CONNECTOR~";
            //     self.dsSuggestionQuery = self.sina.createSuggestionQuery();
                
            //     self.dsSuggestionQuery.dataSource({
            //         objectName: {label: "", value : self.searchConnector,},
            //         packageName: {label: "", value: ""},
            //         schemaName: {label: "", value: ""},
            //         type: {label: "", value: ""}
            //     });
            // });


            // var dsSearchResponse = function(searchResults){

            //     var dataSources = [];
            //     for (var i = 0; i < searchResults.length; i++) {
            //         var searchItem = searchResults[i];

            //         if (searchItem.DESCRIPTION && searchItem.DESCRIPTION.value && searchItem.OBJECT_NAME && searchItem.OBJECT_NAME.value) {

            //             var ds ={
            //                 objectName: {label: searchItem.DESCRIPTION.value, value : searchItem.OBJECT_NAME.value,},
            //                 packageName: {label: "", value: ""},
            //                 schemaName: {label: "", value: ""},
            //                 type: {label: "", value: ""}
            //             };
            //             dataSources.push(ds);
            //         }
            //     }

            //     oModel.setProperty("/dataSources", dataSources);
            //     self.getView().dsRequestFinished();

            // };

            // self.getView().getModel("searchModel").getDataSourceSuggestions("*", dsSearchResponse, function(){
            //     oModel.setProperty("/dataSources", []);
            //     self.getView().dsRequestFinished();
            // });


            $.when(this.oUserRecentsService.getRecentDataSources()).done(function (aRecentDataSources) {

                if (!aRecentDataSources) aRecentDataSources = [];

                for (var i = 0; i < aRecentDataSources.length; i++) {
                    var aDS = aRecentDataSources[i];
                    if (aDS && aDS.objectName) {
                        aDS.objectName.label = removeBTags(aDS.objectName.label);
                    }
                }

                var containsDataSource = function(ds){
                    for (var i = 0; i < aRecentDataSources.length; i++) {
                        var recentDs = aRecentDataSources[i];
                        if (recentDs.objectName.value === ds.objectName.value ) return true;
                    }
                    return false;
                };

                if (aRecentDataSources.length >= 6) {
                    aRecentDataSources.length = 6;
                }else{
                    aRecentDataSources.sort(function(a, b){
                        var labela = a.label || a.objectName.label;
                        var labelb = b.label || b.objectName.label;

                        if(labela < labelb) return -1;
                        if(labela  > labelb) return 1;
                        return 0;
                    });
                }

                oModel.setProperty("/dataSources", aRecentDataSources);
                self.getView().dsRequestFinished();

            });

            // If less than 6 recent datasources, call server to fill ds up
            // $.when(this.oUserRecentsService.getRecentDataSources(),serverInfoDeferred).done(function (aRecentDataSources) {

            //     if (!aRecentDataSources) aRecentDataSources = [];

            //     var containsDataSource = function(ds){
            //         for (var i = 0; i < aRecentDataSources.length; i++) {
            //             var recentDs = aRecentDataSources[i];
            //             if (recentDs.objectName.value === ds.objectName.value ) return true;
            //         }
            //         return false;
            //     };

            //     if (aRecentDataSources.length < 6) {
                    
            //         self.dsSuggestionQuery.setSuggestionTerm("*");
            //         self.dsSuggestionQuery.getResultSet(jQuery.proxy(function (resultset) {
            //             var suggestions = resultset.getElements();
                        
            //                 for (var i = 0; i < suggestions.length; i++) {
            //                     var suggestion = suggestions[i];

            //                     if (suggestion.dataSource.objectName.value !== self.searchConnector) continue;
                                
            //                     var ds ={
            //                         objectName: {label: suggestion.label, value : suggestion.labelRaw,},
            //                         packageName: {label: "", value: ""},
            //                         schemaName: {label: "", value: ""},
            //                         type: {label: "", value: ""}
            //                     };

            //                     if (aRecentDataSources.length < 6 && !containsDataSource(ds) && ds.objectName.label && ds.objectName.value) {
            //                         aRecentDataSources.push(ds);
            //                     }

            //                 }
            //                 oModel.setProperty("/dataSources", aRecentDataSources);
            //                 self.getView().dsRequestFinished();
                            
            //         }, this), 
            //         function(){
            //             oModel.setProperty("/dataSources", aRecentDataSources);
            //             self.getView().dsRequestFinished();
            //         });

            //     }else{
            //         oModel.setProperty("/dataSources", aRecentDataSources);
            //         self.getView().dsRequestFinished();

            //     }

            // });


        },

        // wanted behavior: a search is only saved when you navigate away from the search screen
        //      therefore the term is saved (newSearchInvoked()), the category is updated (newSearchCategory())
        //      when the curtain is closing or an app will be opened, it will be saved (saveSearch())
        newSearchInvoked: function (sChannelId, sEventId, oData) {
            var self = this;
            if (oData.dataSource) {
                this.oCurrentSearch = {sTerm: oData.searchTerm, oDataSource: oData.dataSource};
            } else {
                this.oCurrentSearch = {
                    sTerm: oData.searchTerm,
                    oDataSource: this.getView().getModel("search").getDataSource()
                };
            }
        },

        newSearchCategory: function (sChannelId, sEventId, oData) {
            if (this.oCurrentSearch) {
                this.oCurrentSearch.oObjectName = oData;
            }
        },

        saveSearch: function (sChannelId, sEventId, oData) {
            if (this.oCurrentSearch) {
                var searchModel = this.getView().getModel("searchModel");
                //Save search only when results
                if (searchModel && searchModel.perspective && searchModel.perspective.getSearchResultSet && searchModel.perspective.getSearchResultSet().totalcount > 0) {
                    this.oUserRecentsService.noticeSearch(this.oCurrentSearch);
                    this.oCurrentSearch = null;
                }
                
            }
        },

        searchAgain: function (oData) {

            
            
            // sap.ui.getCore().getEventBus().publish("externalSearch", {searchTerm: oData.sTerm, dataSource: oData.oDataSource});
        },

//         searchAgain: function (oEvent) {
//             var oSource = oEvent.getSource(),
//                 sSearchTerm = oSource.data("sSearchTerm"),
//                 oDataSource = oSource.data("oDataSource");
// //                sObjectNameLabel = oSource.data("sObjectNameLabel"),
// //                sObjectNameValue = oSource.data("sObjectNameValue"),
// //                oObjectName = {label: sObjectNameLabel, value: sObjectNameValue};
// //            if (sObjectNameValue) {
// //                sap.ui.getCore().getEventBus().publish("externalSearch", {searchTerm: sSearchTerm, objectName: oObjectName});
// //            } else {
// //                sap.ui.getCore().getEventBus().publish("externalSearch", {searchTerm: sSearchTerm});
// //            }
//             sap.ui.getCore().getEventBus().publish("externalSearch", {searchTerm: sSearchTerm, dataSource: oDataSource});
//         },

        appOpened: function (sChannelId, sEventId, oData) {
            var that = this,
                oNewApp = {},
                aRecentAppModels;
            this.saveSearch(sChannelId, sEventId, oData);

            if (!oData.semanticObject || !oData.action || !oData.oMetadata || !oData.oMetadata.title || oData.oMetadata.libraryName === "factSheet") {
                return;
            }

            oNewApp.semanticObject = oData.semanticObject;
            oNewApp.action = oData.action;
            oNewApp.sTargetHash = oData.sShellHash;
            oNewApp.title = oData.oMetadata.title;
            oNewApp.icon = oData.oMetadata.icon;
            oNewApp.url = oData.sShellHash + (oData.sAppPart || "");

            this.oUserRecentsService.noticeApp(oNewApp);
        }
    });
}());

}; // end of sap/ushell/renderers/fiori2/search/HistoryScreen.controller.js
