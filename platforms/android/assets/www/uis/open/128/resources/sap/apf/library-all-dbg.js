// This file has been generated by the SAPUI5 'AllInOne' Builder
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 *@class analysisPath
 *@memberOf sap.apf.ui.reuse.controller
 *@name analysisPath
 *@description controller for view.analysisPath
 */
sap.ui.controller("sap.apf.ui.reuse.controller.analysisPath", {
	/**
	 *@this {sap.apf.ui.reuse.controller.analysisPath}
	 */
	/**
	 *@memberOf sap.apf.ui.reuse.controller.analysisPath
	 *@see sap.apf.ui.controller.carousel#getInitialStep
	 */
	addInitialStep : function() {
		var carouselController = this.getView().getCarousel().getController();
		carouselController.getInitialStep();
	},
	refreshAnalysisPath : function() {
		this.getView().getCarousel().getController().refreshCarousel();
	},
	isOpenPath : false,
	isNewPath : false,
	onInit : function() {
		this.oCoreApi = this.getView().getViewData().oCoreApi;
		this.oUiApi = this.getView().getViewData().uiApi;
		this.bIsDirtyState = false;
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.analysisPath
	 *@method refresh
	 *@description Adds loading sign to steps which have changed 
	 *@param {number} nStartIndex index of step in analysis path after which filter has changed
	 */
	refresh : function(nStartIndex) {
		var oView = this.getView().oCarousel;
		var aStepViews = oView.stepViews;
		var i;
		if (nStartIndex !== -1) {
			for( i = nStartIndex; i < aStepViews.length; i++) {
				var oStepView = {};
				oStepView = aStepViews[i];
				if (oStepView !== undefined) {
					oStepView.oThumbnailChartLayout.setBusy(true);
					//oStepView.rerender();
				}
			}
		}
		var nActiveStepIndex = this.oCoreApi.getSteps().indexOf(this.oCoreApi.getActiveStep());
		if (nActiveStepIndex > nStartIndex) {
			var oChartView = this.oUiApi.getStepContainer();
			oChartView.vLayout.setBusy(true);
		}
		var pathName = this.oUiApi.getAnalysisPath().oSavedPathName.getTitle();
		if ((this.bIsDirtyState === undefined || this.bIsDirtyState === false) && this.oCoreApi.getSteps().length !== 0) {
			var pathHasChanged = "*" + pathName;
			this.bIsDirtyState = true;
			this.oUiApi.getAnalysisPath().oSavedPathName.setTitle(pathHasChanged);
		}
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.analysisPath
	 *@method callBackforUpdatePath 
	 *@param {object} oCurrentStep: Current Step instance 
	 *@param {boolean} bStepChanged  returns true if filter of step has changed
	 *@description Calls method updateCurrentStep if current step has changed 
	 */
	callBackForUpdatePath : function(oCurrentStep, bStepChanged) {
		var nIndex = this.oCoreApi.getSteps().indexOf(oCurrentStep);
		if (nIndex === 0){
			this.refreshAnalysisPath();
		}
		this.updateCurrentStep(oCurrentStep, nIndex, bStepChanged);
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.analysisPath
	 *@method callBackForUpdatePathAndSetLastStepAsActive
	 *@param {object} oCurrentStep: Current Step instance
	 *@param {boolean} bStepChanged returns true if step has changed
	 *@description Sets last step as active and calls method update Path 
	 */
	callBackForUpdatePathAndSetLastStepAsActive : function(oCurrentStep, bStepChanged) {
		var nIndex = this.oCoreApi.getSteps().indexOf(oCurrentStep);
		if (nIndex === 0) {
			var oStep = this.oCoreApi.getSteps()[this.oCoreApi.getSteps().length - 1];
			this.oCoreApi.setActiveStep(oStep);
			this.refreshAnalysisPath();
		}
		this.updateCurrentStep(oCurrentStep, nIndex, bStepChanged);
		this.oUiApi.getLayoutView().setBusy(false);
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.analysisPath
	 *@method updateCurrentStep
	 *@param {object} oCurrentStep: CurrentStep instance
	 *@param {number} nIndex: index of CurrentStep
	 *@param {boolean} bStepChanged returns true if step has changed
	 *@description updates Analysis Path if steps following current step has changed. If CurrentStep is active draws chart in main area.
	 */
	updateCurrentStep : function(oCurrentStep, nIndex, bStepChanged) {
		var isOpenPath = this.oUiApi.getAnalysisPath().getController().isOpenPath;
		var nActiveIndex = this.oCoreApi.getSteps().indexOf(this.oCoreApi.getActiveStep());
		var isActiveStep = (nIndex === nActiveIndex);
		var isLastStep = (nIndex === this.oCoreApi.getSteps().length - 1);
		var isInitialStep = oCurrentStep.isInitialStep();
		this.drawThumbnail(nIndex, (isLastStep && isInitialStep) || bStepChanged || isOpenPath);
		if (isActiveStep) {
			this.drawMainChart(bStepChanged);
		}
		if(this.oUiApi.getAnalysisPath().getController().isOpenPath && (this.oCoreApi.getSteps().indexOf(oCurrentStep)=== (this.oCoreApi.getSteps().length -1) )){
			this.oUiApi.getLayoutView().setBusy(false);
			this.oUiApi.getAnalysisPath().getController().isOpenPath = false;
		}
		this.oUiApi.getAnalysisPath().getController().isNewPath = false;
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.analysisPath
	 *@method drawMainChart
	 *@param {boolean} bStepChanged returns true if step has changed
	 *@description gets chartArea of application from API sap.apf.ui.getStepConatiner() and draws Chart 
	 */
	drawMainChart : function(bStepChanged) {
		var oChartView = this.oUiApi.getStepContainer();
		oChartView.getController().drawStepContent(bStepChanged);
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.analysisPath
	 *@method drawMainChart
	 *@param {number} nIndex index of step for which thumbnail has to be drawn
	 *@param {boolean} bStepChanged returns true if step has changed
	 *@description gets chartArea of application from API sap.apf.ui.getStepConatiner() and draws Chart 
	 */
	drawThumbnail : function(nIndex, bStepChanged) {
		var oStepView = this.getView().getCarousel().getStepView(nIndex);
		oStepView.getController().drawThumbnailContent(bStepChanged);
	}

});
/*!

 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 *@class carousel
 *@name carousel
 *@memberOf sap.apf.ui.reuse.controller
 *@description controller for view.carousel
 */
sap.ui.controller("sap.apf.ui.reuse.controller.carousel", {
	/**
	*@this {sap.apf.ui.reuse.controller.carousel}
	*/
	onAfterRendering : function() {
		if (this.oCoreApi.getSteps().length < 1) {
			jQuery(".DnD-separator").hide(); //Hide the Separator initially 
		}
		this.getInitialStep();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.carousel
	*@method getInitialStep 
	*@description Adds Initial Step to the Analysis Path if a step with category initial is present in configuration
	*@returns {initialStep}
	*/
	getInitialStep : function() {
		this.oViewData = this.getView().getViewData().oInject;
		this.oCoreApi = this.oViewData.oCoreApi;
		this.oUiApi = this.oViewData.uiApi;
		var aStepTemplates = this.oCoreApi.getStepTemplates();
		var i,j;
		for(i = 0; i < aStepTemplates.length; i++) {
			var aCategory = aStepTemplates[i].categories;
			for(j = 0; j < aCategory.length; j++) {
				if (aCategory[j].id === "initial"){
					this.Step = aStepTemplates[i];
				}
			}
		}
		if (this.Step) {
			var initialStep = this.Step;
			var oRepresentationType = initialStep.getRepresentationInfo();
			this.oCoreApi.createStep(initialStep.id,
					this.getView().getViewData().analysisPath.getController().callBackForUpdatePathAndSetLastStepAsActive.bind(this.getView().getViewData().analysisPath.getController()),
					oRepresentationType.representationId);
			return initialStep;
		} else {
			jQuery(this.oUiApi.getStepContainer().getDomRef()).hide();
			if(jQuery("#"+this.initialText.getId()).length === 0){
				jQuery('#'+this.oUiApi.getStepContainer().getId()).parent().append(sap.ui.getCore().getRenderManager().getHTML(this.initialText));
			}
			if(this.oUiApi.getAnalysisPath().getController().isOpenPath){
				jQuery(".initialText").remove();
			}
		}
	},
	onInit : function() {
		var oViewData = this.getView().getViewData().oInject;
		this.oCoreApi = oViewData.oCoreApi;
		this.oUiApi = oViewData.uiApi;
		this.stepGalleryView = sap.ui.view({
			type : sap.ui.core.mvc.ViewType.JS,
			viewName : "sap.apf.ui.reuse.view.stepGallery",
			viewData : oViewData
		});
		this.initialText = new sap.m.Label({text: oViewData.oCoreApi.getTextNotHtmlEncoded('initialText')}).addStyleClass('initialText');
	},
	showStepGallery : function() {
		this.stepGalleryView.oController.openHierarchicalSelectDialog();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.carousel
	*@method onAfterRendering 
	*@description Attaches event on Add Step Button and instantiate Step Gallery
	* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
	* This hook is the same one that SAPUI5 controls get after being rendered.
	*/
	onBeforeRendering : function() {
		this.oUiApi.getLayoutView().getController().addMasterFooterContentLeft(this.getView().up);
		this.oUiApi.getLayoutView().getController().addMasterFooterContentLeft(this.getView().down);
	},
	getStepData : function(stepObj) {
		var fStep = stepObj;
		var oStep = {};
		oStep.index = this.oCoreApi.getSteps().indexOf(stepObj);
		oStep.thumbnail = {};
		oStep.title = this.oCoreApi.getTextNotHtmlEncoded(fStep.title);
		if (fStep.thumbnail.type !== undefined) {
			if (fStep.thumbnail.leftLower !== undefined && fStep.thumbnail.leftLower.key !== ""){
				oStep.thumbnail.leftLower = this.oCoreApi.getTextNotHtmlEncoded(fStep.thumbnail.leftLower);
			}
			if (fStep.thumbnail.leftUpper !== undefined && fStep.thumbnail.leftUpper.key !== ""){
				oStep.thumbnail.leftUpper = this.oCoreApi.getTextNotHtmlEncoded(fStep.thumbnail.leftUpper);
			}
			if (fStep.thumbnail.rightLower !== undefined && fStep.thumbnail.rightLower.key !== ""){
				oStep.thumbnail.rightLower = this.oCoreApi.getTextNotHtmlEncoded(fStep.thumbnail.rightLower);
			}
			if (fStep.thumbnail.rightUpper !== undefined && fStep.thumbnail.rightUpper.key !== ""){
				oStep.thumbnail.rightUpper = this.oCoreApi.getTextNotHtmlEncoded(fStep.thumbnail.rightUpper);
			}
			oStep.thumbnail.file = fStep.thumbnail.file;
		}
		return oStep;
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.carousel
	*@method refreshCarousel
	*@description Binds to model and set the Steps as droppable 
	 */
	refreshCarousel : function() {
		if (this.oCoreApi.getSteps().length > this.getView().stepViews.length) {
			this.addStep(this.oCoreApi.getSteps());//sap.apf.getSteps()[sap.apf.getSteps().length - 1]
		}
//		var indexActive = this.oCoreApi.getSteps().indexOf(this.oCoreApi.getActiveStep());
//		var activeStep = this.getView().dndBox.eleRefs.blocks[indexActive];
//		if (activeStep !== undefined) {
//			//activeStep.scrollIntoViewIfNeeded();
//		}
	},
	addStep : function(stepObj) {
		this.oViewData = this.getView().getViewData().apfInstance;
		if (stepObj instanceof Array) {
			if (this.oUiApi.getAnalysisPath().getController().isOpenPath) {
				var i;
				for(i = 0; i < stepObj.length; i++) {
					this.addStep(stepObj[i]);
				}
				return;
			} else {
				this.addStep(stepObj[this.oCoreApi.getSteps().length - 1]);
				return;
			}
		}
		var stepView = new sap.ui.view({
			viewName : "sap.apf.ui.reuse.view.step",
			type : sap.ui.core.mvc.ViewType.JS,
			viewData : this.getView().getViewData().oInject
		});
		var jsonModel = new sap.ui.model.json.JSONModel();
		stepView.setModel(jsonModel);
		var stepData = this.getStepData(stepObj);
		jsonModel.setData(stepData);
		this.getView().stepViews.push(stepView);
		var sampleDiv = document.createElement('div');
		sampleDiv.innerHTML = sap.ui.getCore().getRenderManager().getHTML(stepView);
		var dndBox = this.getView().dndBox;
		var blockIndex = dndBox.eleRefs.blocks.length - 1;
		jQuery(".initialText").remove();
		jQuery(this.oUiApi.getStepContainer().getDomRef()).show(); // Show the step container
		jQuery(".DnD-separator").show(); //Show the Seperator once the step is added
		var isConfigInitial = this.Step ? this.Step.categories[0].id : undefined;
		// Check Whether Step is isInitialStep 
		if (stepObj.isInitialStep() || (isConfigInitial === "initial")) {
			dndBox.insertBlock({
				blockElement : sampleDiv,
				dragState : false,
				dropState : false,
				removable : false
			}, blockIndex);
		} else {
			dndBox.insertBlock({
				blockElement : sampleDiv
			}, blockIndex);
		}
		if (stepData.index === this.oCoreApi.getSteps().indexOf(this.oCoreApi.getActiveStep())) {
			stepView.toggleActiveStep();
		}
		stepView.rerender();
		this.oUiApi.getLayoutView().setBusy(true);
	},
	moveStep : function(dragIndex, dropIndex) {
		var carouselView = this.oUiApi.getAnalysisPath().getCarousel();
		if (dragIndex === dropIndex) {
			return;
		}
		carouselView.stepViews = (function(array, from, to) {
			var diff = Math.abs(to - from);
			var adder = (to - from) > 0 ? 1 : -1;
			var temp;
			while (diff--) {
				temp = array[from];
				array[from] = array[from + adder];
				array[from + adder] = temp;
				from = from + adder;
			}
			return array;
		})(carouselView.stepViews, dragIndex, dropIndex);
		this.oUiApi.getAnalysisPath().getController().refresh(Math.min(dragIndex, dropIndex));
		var draggedStep = this.oCoreApi.getSteps()[dragIndex];
		this.oCoreApi.moveStepToPosition(draggedStep, dropIndex, this.oUiApi.getAnalysisPath().getController().callBackForUpdatePath.bind(this.oUiApi.getAnalysisPath().getController()));
	},
	removeStep : function(removeIndex) {
		var carouselView = this.oUiApi.getAnalysisPath().getCarousel();
		carouselView.stepViews.splice(removeIndex, 1);
		var stepLength = carouselView.stepViews.length;
		var activeStepIndex = this.oCoreApi.getSteps().indexOf(this.oCoreApi.getActiveStep());
		if (stepLength > 0) {
			if (removeIndex === activeStepIndex) {
				var newActiveStepIndex;
				var stepView;
				if (activeStepIndex === 0) {
					newActiveStepIndex = activeStepIndex;
					stepView = carouselView.stepViews[newActiveStepIndex];
					stepView.toggleActiveStep();
					this.oCoreApi.setActiveStep(this.oCoreApi.getSteps()[newActiveStepIndex + 1]);
				} else {
					newActiveStepIndex = activeStepIndex - 1;
					stepView = carouselView.stepViews[newActiveStepIndex];
					stepView.toggleActiveStep();
					this.oCoreApi.setActiveStep(this.oCoreApi.getSteps()[newActiveStepIndex]);
				}
			}
		} else {
			jQuery(".DnD-separator").hide();// If step length is 0 then hide the seperator
			jQuery(this.oUiApi.getStepContainer().getDomRef()).hide(); //Hide the step container
			this.oUiApi.getStepContainer().getStepToolbar().chartToolbar.removeAllCharts();
			jQuery('#'+this.oUiApi.getStepContainer().getId()).parent().append(sap.ui.getCore().getRenderManager().getHTML(this.initialText));
		}
		var removeStep = this.oCoreApi.getSteps()[removeIndex];
		this.oUiApi.getAnalysisPath().getController().refresh(removeIndex);
		this.oCoreApi.removeStep(removeStep, this.oUiApi.getAnalysisPath().getController().callBackForUpdatePath.bind(this.oUiApi.getAnalysisPath().getController()));
		this.getView().oCarousel.rerender();
	},
	removeAllSteps : function() {
		var removeIndex = 0;
		var i;
		var dndBox = this.getView().dndBox;
		var carouselView = this.oUiApi.getAnalysisPath().getCarousel();
		var stepLength = carouselView.stepViews.length;
		for(i = 1; i <= stepLength; i++) {
			dndBox.removeBlock(removeIndex, function() {
			});
			carouselView.stepViews.splice(removeIndex, 1);
		}
		jQuery(".DnD-separator").hide(); //Hide the seperator 
		this.oUiApi.getStepContainer().getStepToolbar().chartToolbar.removeAllCharts();
	}
});

/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 *@class deleteAnalysisPath
 *@name deleteAnalysisPath
 *@memberOf sap.apf.ui.reuse.controller
 *@description controller of view.deleteAnalysisPath
 */
sap.ui.controller("sap.apf.ui.reuse.controller.deleteAnalysisPath", {
	/**
	 *@this {sap.apf.ui.reuse.controller.pathGallery}
	 */
	onInit : function() {
		var self = this;
		this.oCoreApi = this.getView().getViewData().oInject.oCoreApi;
		this.oUiApi = this.getView().getViewData().oInject.uiApi;
		this.oSerializationMediator = this.getView().getViewData().oInject.oSerializationMediator;
		this.contentWidth = jQuery(window).height() * 0.6 + "px"; // height and width for the dialog relative to the window
		this.contentHeight = jQuery(window).height() * 0.6 + "px";
		this.stdDialog = new sap.m.Dialog({
			title : self.oCoreApi.getTextNotHtmlEncoded("select-analysis-path"),
			contentWidth : self.contentWidth,
			contentHeight : self.contentHeight,
			content : this.getView().getContent()[0],
			leftButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("cancel"),
				press : function() {
					self.stdDialog.close();
					self.oUiApi.getLayoutView().setBusy(false);
				}
			})
		});
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.pathGallery
	*@method openPathGalleryWithDelete
	*@description opens the path gallery with delete mode
	*/
	openPathGalleryWithDelete : function() {
		this.stdDialog.open();
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.pathGallery
	 *@method getGuidForPath
	 *@description Fetches guid for a path
	 */
	getGuidForPath : function(sPathName, viewData) {
		var i;
		for(  i = 0; i < viewData.length; i++) {
			var oData = viewData[i];
			if (oData.AnalysisPathName === sPathName) {
				return oData.guid;
			}
		}
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.pathGallery
	 *@method deleteSavedPath
	 *@description deletes the section and path from path gallery.
	 *@param {object} sectionDom
	 */
	deleteSavedPath : function(sPathName, oInfo) {
		var self = this;
		var guid = oInfo.guid;
		var pathName = sPathName;
		var oMessageObject;
		var currentPath = self.oUiApi.getAnalysisPath().oSavedPathName.getTitle();
		self.oSerializationMediator.deletePath(guid, function(oResponse, metaData, msgObj) {
			if (msgObj === undefined && (typeof oResponse === "object")) {
				oInfo.list.removeItem(oInfo.item);
				self.oCoreApi.readPaths(function(oResponse, metaData, msgObj) {
					if (msgObj === undefined && (typeof oResponse === "object")) {
						var noOfPaths = oResponse.paths.length;
						//Text to be shown in galery when all paths are deleted
						if (noOfPaths === 0) {
							jQuery(".pathText").removeClass("pathTextDontShow");
							jQuery(".pathText").addClass("pathTextShow");
						}
					} else {
						oMessageObject = self.oCoreApi.createMessageObject({
							code : "6005",
							aParameters : [ pathName ]
						});
						oMessageObject.setPrevious(msgObj);
						self.oCoreApi.putMessage(oMessageObject);
					}
				});
			} else {
				oMessageObject = self.oCoreApi.createMessageObject({
					code : "6009",
					aParameters : [ "delete", pathName ]
				});
				oMessageObject.setPrevious(msgObj);
				self.oCoreApi.putMessage(oMessageObject);
			}
		});
		//If current path is deleted reset the analysis path
		if (currentPath === pathName) {
			self.oUiApi.getAnalysisPath().getToolbar().getController().resetAnalysisPath();
		}
	}
});

/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
sap.ui.controller("sap.apf.ui.reuse.controller.layout", {
	onInit : function() {
		//Application Title
		this.oCoreApi = this.getView().getViewData().oCoreApi;
		this.oUiApi = this.getView().getViewData().uiApi;
		this.oUiApi.initializeContextHandling();
		var applicationTitleKey = this.oCoreApi.getApplicationConfigProperties().appName;
		this.applicationTitle = this.oCoreApi.getTextNotHtmlEncoded(applicationTitleKey);
		this.getView().byId("application").addStyleClass("sapApfHeader");
		this.getView().byId("application").setText(this.applicationTitle);
		//Initialize Message Handler
		var oMessageHandlerView = this.oUiApi.getNotificationBar();
		this.getView().byId("applicationPage").addContent(oMessageHandlerView);
		var fnCallbackMessageHandling = oMessageHandlerView.initializeHandler;
		//this.oCoreApi.activateOnErrorHandling(true);
		this.oCoreApi.setCallbackForMessageHandling(fnCallbackMessageHandling.bind(oMessageHandlerView));
		this.loadLayout();
	},
	/**
	 *@description Layout specific content settings
	 */
	loadLayout : function() {
		var chartView = this.oUiApi.getStepContainer();
		var analysisPath = this.oUiApi.getAnalysisPath();
		this.getView().byId("application").setText(this.applicationTitle);
		this.getView().byId("masterFooter").addStyleClass("applicationFooter");
		this.getView().byId("detailFooter").addStyleClass("applicationFooter");
		this.getView().byId("stepContainer").addContent(chartView);
		this.getView().byId("analysisPath").addContent(analysisPath);
	},
	onAfterRendering : function() {
		this.oUiApi.drawFacetFilter();	//TODO EXPERIMENTAL.
		var self = this;
		var showMasterButton = new sap.m.Button({
			text : this.oCoreApi.getTextNotHtmlEncoded("showAnalyticalPath"),
			press : function() {
				self.getView().byId("applicationView").showMaster();
			},
			lite : true,
			type : "Transparent"
		});
		this.getView().byId("applicationView").attachAfterMasterClose(function() {
			self.getView().byId("detailFooter").removeContentLeft(showMasterButton);
			self.addDetailFooterContentLeft(showMasterButton);
		});
		this.getView().byId("applicationView").attachAfterMasterOpen(function() {
			if (self.getView().byId('detailFooter')) {
				self.getView().byId("detailFooter").removeAllContentLeft();
			}
		});
		if (this.getView().byId("applicationView").isMasterShown() === false) {
			this.addDetailFooterContentLeft(showMasterButton);
		}
	},
	hideMaster : function() {
		if (sap.ui.Device.system.phone || sap.ui.Device.system.tablet) {
			this.getView().byId("applicationView").hideMaster();
			if (sap.ui.Device.system.phone) {
				this.getView().byId("applicationView").toDetail(this.getView().byId("stepContainer").getId());
			}
		}
	},
	showMaster : function() {
		this.getView().byId("applicationView").showMaster();
	},
	//            setDetailTitle : function(oControl) {
	//                            this.detailTitleRemoveAllContent();
	//                            this.getView().byId("headerDetail").addContentMiddle(oControl);
	//            },
	//            detailTitleRemoveAllContent : function() {
	//                            this.getView().byId("headerDetail").removeAllContentMiddle();
	//            },
	/**
	 *@description Adds content to Master Footer alignment: Left
	 *@param oControl
	 */
	addMasterFooterContentLeft : function(oControl) {
		this.getView().byId("masterFooter").addContentLeft(oControl);
	},
	/**
	 *@description Adds content to Master Footer alignment: Right
	 *@param oControl
	 */
	addMasterFooterContentRight : function(oControl) {
		if (this.getView().byId("masterFooter").getContentRight().length === 0) {
			this.getView().byId("masterFooter").insertContentRight(oControl);
		} else {
			this.addMasterFooterContent(oControl);
		}
	},
	/**
	 *@description Adds content to Master Footer alignment: Right
	 *@param oControl
	 */
	addMasterFooterContent : function(oControl) {
		var self = this;
		if (this.oActionListPopover === undefined) {
			this.oActionListPopover = new sap.m.Popover({
				showHeader : false,
				placement : sap.m.PlacementType.Top
			});
		}
		
		if(typeof oControl.getWidth === "function"){
			oControl.setWidth("100%");
		}
		if (this.footerContentButton === undefined) {
			this.getView().byId("masterFooter").getContentRight()[0].setWidth("71%"); //Max character length 14 for first content in this case
			this.footerContentButton = new sap.m.Button({
				text : '...',
				press : function(oEvent) {
					self.oActionListPopover.openBy(oEvent.getSource());
				},
				lite : true,
				type : "Transparent"
			});
		}
		this.oActionListPopover.addContent(oControl);
		this.getView().byId("masterFooter").insertContentRight(this.footerContentButton, 1);
	},
	/**
	 *@description Adds content to Detail Footer alignment: Left
	 *@param oContol
	 */
	addDetailFooterContentLeft : function(oControl) {
		this.getView().byId("detailFooter").addContentLeft(oControl);
	},
	/**
	 *@description Adds facetfilter to the layout view
	 *@param facetFilter {object} - UI5 control
	 */
	addFacetFilter : function(facetFilter) {
		this.getView().byId("subHeader").addItem(facetFilter);
	}
});

/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 **@class messageHandler
 **@name messageHandler 
 **@memberOf sap.apf.ui.reuse.controller
 **@description controller for view.messageHandler
 * 
 */
sap.ui.controller("sap.apf.ui.reuse.controller.messageHandler", {
	/**
	 **@this {sap.apf.ui.reuse.controller.messageHandler}
	 */
	onInit : function() {
		this.oCoreApi = this.getView().getViewData().oCoreApi;
		this.oUiApi = this.getView().getViewData().uiApi;
	},
	/**
	 **@memberOf sap.apf.ui.reuse.controller.messageHandler
	 **@method showMessage
	 **@param {string} sText Message text
	 **@param {string} severity Message severity
	 **@description  error messages to be shown on notification bar
	 */
	showMessage : function(oMessageObject) {
		var sText = oMessageObject.getMessage();
		var sCode = oMessageObject.getCode();
		var severity = oMessageObject.getSeverity();
		var dateTime = oMessageObject.getTimestampAsdateObject();
		var oMessage = new sap.ui.core.Message({
			text : sText,
			timestamp : dateTime
		});
		var fatal = sap.apf.core.constants.message.severity.fatal;
		var warning = sap.apf.core.constants.message.severity.warning;
		var technError = sap.apf.core.constants.message.severity.technError;
		var error = sap.apf.core.constants.message.severity.error;
		var self = this;
		switch (severity) {
			case fatal:
				oMessage.setLevel(sap.ui.core.MessageType.Error);
				this.oUiApi.getLayoutView().setBusy(false);
				self.showDialog(sText, sCode);
				break;
			case warning:
				oMessage.setLevel(sap.ui.core.MessageType.Warning);
				break;
			case error:
				this.oUiApi.getLayoutView().setBusy(false);
				oMessage.setLevel(sap.ui.core.MessageType.Error);
				break;
			case technError:
				/**Technical Error being logged already from core messageHandler.js */
//				var techText = this.oCoreApi.getTextNotHtmlEncoded("technical-error");
//				var oURLParameters = jQuery.sap.getUriParameters().mParams;
//				var debugMode = oURLParameters["sap-ui-debug"] || [ jQuery.sap.debug().toString() ];
//				if (debugMode !== undefined && debugMode[0] === "true") {
//					jQuery.sap.log.error(techText + sText);
//					jQuery.sap.log.error(oMessageObject.getStack());
//				}
				break;
			default:
				jQuery.sap.log.error("Error type not defined");
				break;
		}
		if (severity === fatal || severity === warning || severity === error) {
			jQuery.sap.require("sap.m.MessageToast");
			sap.m.MessageToast.show(oMessage.getText(), {
				duration : 3000,
				width : "40%",
				my : "center bottom",
				at : "center bottom",
				of : window,
				offset : "0 -50",
				collision : "fit fit",
				onClose : null,
				autoClose : true,
				animationTimingFunction : "ease",
				animationDuration : 2000
			});
		}
	},
	/**
	 **@memberOf sap.apf.ui.reuse.controller.messageHandler
	 **@method showDialog
	 **@param {string} sText Message text
	 **@description  shows dialog for fatal errors
	 */
	showDialog : function(sText) {
		var self = this;
		var buttonText = this.oCoreApi.getTextNotHtmlEncoded("application-logout");
		var dialogTitle = this.oCoreApi.getTextNotHtmlEncoded("fatal-error");
		var aLogMessages = this.oCoreApi.getLogMessages();
		var sessionTimeOut = false;
		var i;
		for(i = 0; i < aLogMessages.length; i++) {
			if (aLogMessages[i].search(5021) !== -1) {
				sessionTimeOut = true;
				break;
			}
		}
		if (sessionTimeOut === true) {
			sText = this.oCoreApi.getTextNotHtmlEncoded("application-reload");
			buttonText = this.oCoreApi.getTextNotHtmlEncoded("reload-button");
			dialogTitle = this.oCoreApi.getTextNotHtmlEncoded("sessionTimeout");
		}
		var sDetailedText;
		for( i = 0; i < aLogMessages.length; i++) {
			if (sDetailedText){
				sDetailedText = sDetailedText + "\n" + aLogMessages[i];
			}
			else{
				sDetailedText = aLogMessages[i];
			}
		}
		//this uses the ushell function
		var bIsMsgBoxClosed = false;
		self.fnClose = function() {
			bIsMsgBoxClosed = true;
			if(window.location.hash){
				window.location.hash="";
			}
			
		};
		sap.ca.ui.message.showMessageBox({
			type : sap.ca.ui.message.Type.ERROR,
			message : sText,
			details : sDetailedText
			}, self.fnClose);
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 *@class pathGallery
 *@name pathGallery
 *@memberOf sap.apf.ui.reuse.controller
 *@description controller of view.pathGallery
 */
sap.ui.controller("sap.apf.ui.reuse.controller.pathGallery", {
	/**
	 *@this {sap.apf.ui.reuse.controller.pathGallery}
	 */
	onInit : function() {
		this.oCoreApi = this.getView().getViewData().oInject.oCoreApi;
		this.oUiApi = this.getView().getViewData().oInject.uiApi;
		this.oSerializationMediator = this.getView().getViewData().oInject.oSerializationMediator;
	},

	/**
	*@memberOf sap.apf.ui.reuse.controller.pathGallery
	*@method openPathGallery
	*@description opens the path gallery with list of all saved paths
	*/
	openPathGallery : function() {
		if (this.oHierchicalPathGalleryDialog) {
			this.oHierchicalPathGalleryDialog.destroy();
		}
		this.oHierchicalPathGalleryDialog = new sap.ui.jsfragment("sap.apf.ui.reuse.fragment.pathGallery", this);
		var oModel = new sap.ui.model.json.JSONModel();
		var jsonData = this.getPathGalleryData();
		oModel.setData(jsonData);
		this.oHierchicalPathGalleryDialog.setModel(oModel, "json");
		this.oHierchicalPathGalleryDialog.open();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.pathGallery
	*@method getPathGalleryData
	*@description Gets data for building the path gallery
	*/
	getPathGalleryData : function() {
		var self = this;
		var jsonData = this.getView().getViewData() ? this.getView().getViewData().jsonData : {};
		//Get the application Configuration data
		var fetchConfigData = function() {
			var configData = {
				"steps" : self.oCoreApi.getStepTemplates()
			};
			return configData;
		};
		//Inject Image and Title in json data
		if(jsonData.GalleryElements.length!==0){
			var savedPaths = jsonData.GalleryElements;
			var configData = fetchConfigData();
			var i, j, k, index;
			for( i = 0; i < savedPaths.length; i++) {
				for( j = 0; j < savedPaths[i].StructuredAnalysisPath.steps.length; j++) {
					for(  k = 0; k < configData.steps.length; k++) {
						var stepId = savedPaths[i].StructuredAnalysisPath.steps[j].stepId;
						var selectedRepresentationId = savedPaths[i].StructuredAnalysisPath.steps[j].selectedRepresentationId;
						if (stepId === configData.steps[k].id) {
							for(  index in configData.steps[k].getRepresentationInfo()) {
								if (selectedRepresentationId === configData.steps[k].getRepresentationInfo()[index].representationId) {
									jsonData.GalleryElements[i].StructuredAnalysisPath.steps[j].imgSrc = configData.steps[k].getRepresentationInfo()[index].picture;
									jsonData.GalleryElements[i].StructuredAnalysisPath.steps[j].title = self.oCoreApi.getTextNotHtmlEncoded(configData.steps[k].title.key);
								}
							}
						}
					}
				}
			}
		}
		return jsonData;
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.pathGallery
	 *@method openPath
	 *@description opens a saved analysis path
	 *@param Takes analysis path name, guid and step which has been clicked as parameters
	 */
	openPath : function(pathName, guid, activeStepindex) {
		var self = this;
		var oMessageObject;
		var carousel = self.oUiApi.getAnalysisPath().getCarousel();
		self.oSerializationMediator.openPath(guid, (function(self) {
			return function(oResponse, oEntityTypeMetadata, msgObj) {
				if (msgObj === undefined && (typeof oResponse === "object")) {
					self.oUiApi.getAnalysisPath().getController().isOpenPath = true;
					self.oUiApi.contextChanged();
//					self.oUiApi.getLayoutView().getController().setFilter(oResponse.path.SerializedAnalysisPath.context);
					self.oUiApi.getAnalysisPath().getCarousel().oController.removeAllSteps();
					self.oUiApi.getAnalysisPath().getController().refresh(-1);
					self.oCoreApi.updatePath(self.oUiApi.getAnalysisPath().getController().callBackForUpdatePath.bind(self.oUiApi.getAnalysisPath().getController()));
					self.oUiApi.getAnalysisPath().oSavedPathName.setTitle(pathName);
					self.oUiApi.getAnalysisPath().getController().bIsDirtyState = false;
					if (self.oHierchicalPathGalleryDialog !== undefined) {
						self.oHierchicalPathGalleryDialog.close();
					}
					carousel.rerender();
					self.oUiApi.getLayoutView().setBusy(false);
				} else {
					oMessageObject = self.oCoreApi.createMessageObject({
						code : "6008",
						aParameters : [ pathName ]
					});
					oMessageObject.setPrevious(msgObj);
					self.oUiApi.getLayoutView().setBusy(false);
					self.oCoreApi.putMessage(oMessageObject);
				}
			};
		}(this)), activeStepindex);
	}
});

/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 *@class step
 *@name step
 *@memberOf sap.apf.ui.reuse.controller
 *@description handle actions possible over step (example: drag and drop , delete, set Active etc)
 *             
 */
sap.ui.controller("sap.apf.ui.reuse.controller.step", {
	/**
	 *@memberOf sap.apf.ui.reuse.controller.step
	 *@method setActiveStep
	 *@param {number} index  of step to be set as active
	 *@description set step as active with given index
	 */
	setActiveStep : function(sIndex) {
		var oldActiveStep = this.oCoreApi.getActiveStep();
		var oldActiveStepIndex = this.oCoreApi.getSteps().indexOf(oldActiveStep);
		if (oldActiveStepIndex === sIndex) {
			return;
		}
		var activeStep = this.oCoreApi.getSteps()[sIndex];
		this.oCoreApi.setActiveStep(activeStep);
		this.oUiApi.getAnalysisPath().getController().drawMainChart();
		var stepView = this.oUiApi.getAnalysisPath().getCarousel().stepViews[sIndex];
		stepView.toggleActiveStep();
	},
	bindEvts : function() {
		var self = this;
		var oCarousel = this.oUiApi.getAnalysisPath().getCarousel();
		var stepLayout = this.getView().oVChartTiltleLayout;
		stepLayout.attachBrowserEvent('click', function() {
			var stepIndex = oCarousel.stepViews.indexOf(self.getView());
			self.setActiveStep(stepIndex);
		});
	},
	onAfterRendering : function() {
		this.bindEvts();
	},
	/*getActiveStepIndex : function() {
		var oCarousel = this.oUiApi.getAnalysisPath().getCarousel().getController();
		return oCarousel.getActiveStepIndex();
	},*///Deprecated
	/**
	 *@memberOf sap.apf.ui.reuse.controller.step
	 *@method showLoading
	 *@description show busy indicator
	 */
	/*showLoading : function() {
		var oView = this.getView();
		oView.oThumbnailChartLayout.removeAllContent();
		oView.oThumbnailChartLayout.setBusy(true);
		oView.bRefreshing = true;
	},*///Deprecated
	onInit : function() {
		this.oCoreApi = this.getView().getViewData().oCoreApi;
		this.oUiApi = this.getView().getViewData().uiApi;
		this.isSwitched = false;
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.step
	 *@method  showChart
	 *@param {boolean} bDrawThumbnail boolean to decide whether to redraw the thumbnail in case of any changes
	 *@description display thumbnail for the step
	 */
	drawThumbnailContent : function(bDrawThumbnail) {
		var oView = this.getView();
		var sIndex = this.oUiApi.getAnalysisPath().getCarousel().stepViews.indexOf(oView);
		if (this.representationInstance !== undefined) {
			if (this.representationInstance !== this.oCoreApi.getSteps()[sIndex].getSelectedRepresentation().type) {
				this.isSwitched = true;
			}
		}
		this.representationInstance = this.oCoreApi.getSteps()[sIndex].getSelectedRepresentation().type;
		if (this.oCoreApi.getSteps()[sIndex].getSelectedRepresentation().toggleInstance !== undefined) {
			this.bToggleInstanceExists = true;
		}
		if (this.isSwitched === true || bDrawThumbnail === undefined || bDrawThumbnail === true || this.bToggleInstanceExists === true) {
			this.isSwitched = false;
			oView.oThumbnailChartLayout.removeAllItems();
			var oStep = this.oCoreApi.getSteps()[sIndex];
			var oChart;
			if (oStep.getSelectedRepresentation().bIsAlternateView) {
				if (oStep.getSelectedRepresentation().toggleInstance !== undefined) {
					var data = oStep.getSelectedRepresentation().getData();
					var metadata = oStep.getSelectedRepresentation().getMetaData();
					oStep.getSelectedRepresentation().toggleInstance.setData(data, metadata);
					oChart = oStep.getSelectedRepresentation().toggleInstance.getThumbnailContent();
				} else {
					oStep.getSelectedRepresentation().toggleInstance = this.oUiApi.getStepContainer().getController().createAlternateRepresentation(sIndex);
					oChart = oStep.getSelectedRepresentation().toggleInstance.getThumbnailContent();
				}
			} else {
				oChart = oStep.getSelectedRepresentation().getThumbnailContent();
			}
			var overLayThumbnailWrapper = new sap.m.VBox({}).addStyleClass("overlayThumbnailWrapper");
			oView.oThumbnailChartLayout.addItem(oChart);
			oView.oThumbnailChartLayout.addItem(overLayThumbnailWrapper);
			oView.oThumbnailChartLayout.rerender();
			oView.oThumbnailChartLayout.setBusy(false);
		} else {
			oView.oThumbnailChartLayout.setBusy(false);
		}
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 *@class stepContainer
 *@name  stepContainer
 *@memberOf sap.apf.ui.reuse.controller
 *@description controller of view.stepContainer
 */
sap.ui.controller("sap.apf.ui.reuse.controller.stepContainer", {
	/**
	 *@this {sap.apf.ui.reuse.controller.stepContainer}
	 */
	onInit : function() {
		this.oCoreApi = this.getView().getViewData().oCoreApi;
		this.oUiApi = this.getView().getViewData().uiApi;
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.stepContainer
	 *@method drawSelectionContainer
	 *@description returns the selection label and count
	 */
	drawSelectionContainer : function() {
		this.getView().getStepToolbar().getController().showSelectionCount();
	},
	resizeContent : function() {
		if (this.oCoreApi.getActiveStep()) { //If Active Step Exists
			//Set Scroll Position to first Visible Row for table representation
			if (this.oCoreApi.getActiveStep().getSelectedRepresentation().type === sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) {
				//var representation = this.oCoreApi.getActiveStep().getSelectedRepresentation();
				this.drawStepContent();
				var scrollContainerHeight = ((window.innerHeight - jQuery('.tableWithoutHeaders').offset().top) - 20) + "px";
				jQuery('.tableWithoutHeaders').css({
					"height" : scrollContainerHeight
				});
			} else {
				this.drawStepContent();
			}
		}
	},
	onAfterRendering : function() {
		var self = this;
		var timeoutResize;
		jQuery(window).resize(function() {
			clearTimeout(timeoutResize);
			timeoutResize = setTimeout(function() {
				self.resizeContent();
			}, 500);
		});
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.stepContainer
	 *@method getCurrentRepresentation
	 *@description returns the representation instance
	 */
	getCurrentRepresentation : function() {
		return this.representationInstance;
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.stepContainer
	 *@method drawRepresentation
	 *@description returns the representation, sets the title and calculates the height of representation before rendering
	 */
	drawRepresentation : function() {
		var self = this;
		var oActiveStep = this.oCoreApi.getActiveStep();
		if (oActiveStep.getSelectedRepresentation().bIsAlternateView === undefined || oActiveStep.getSelectedRepresentation().bIsAlternateView === false) {
			this.representationInstance = oActiveStep.getSelectedRepresentation();
		} else {
			this.representationInstance = oActiveStep.getSelectedRepresentation().toggleInstance;
			var data = oActiveStep.getSelectedRepresentation().getData(), metadata = oActiveStep.getSelectedRepresentation().getMetaData();
			this.representationInstance.setData(data, metadata);
		}
		var oStepTitle = this.oCoreApi.getTextNotHtmlEncoded(oActiveStep.longTitle);
//		var stepTitle = new sap.m.Label({
//			text : oStepTitle,
//			design : "Bold"
//		}).addStyleClass("sapApfDetailTitle");
		var content = this.representationInstance.getMainContent(oStepTitle);
		var chartToolbarID = this.getView().getStepToolbar().chartToolbar.getId();
		this.setHeightAndWidth = function() {
			var toolbarHeight;
			var toolbarWidth;
			if (jQuery("#" + chartToolbarID).length !== 0) {
				toolbarHeight = jQuery("#" + chartToolbarID + " > div:first-child > div:nth-child(2)").offset().top;
				toolbarWidth = jQuery("#" + chartToolbarID + " > div:first-child > div:nth-child(2)").width();
			} else {
				toolbarHeight = "0";
				toolbarWidth = jQuery(window).width();
			}
			var cHeight = self.getView().getStepToolbar().chartToolbar.getFullScreen() ? (jQuery(window).height() - toolbarHeight) : (jQuery(window).height() - toolbarHeight) - jQuery(".applicationFooter").height();
			var cWidth = toolbarWidth;
			if (self.oCoreApi.getActiveStep().getSelectedRepresentation().bIsAlternateView || self.oCoreApi.getActiveStep().getSelectedRepresentation().type === sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) {
				content.getContent()[0].setHeight((cHeight - 5) + "px");
				content.getContent()[0].setWidth(cWidth + "px");
			} else if (self.oCoreApi.getActiveStep().getSelectedRepresentation().type === sap.apf.ui.utils.CONSTANTS.representationTypes.GEO_MAP) {
				var div = (jQuery(content.getContent())[0]);
				div.style.height = cHeight + "px";
				div.style.width = cWidth + "px";
				content.setContent(div.outerHTML);
			} else {
				content.setHeight(cHeight + "px");
				content.setWidth(cWidth + "px");
			}
		};
		//Undefined methods Viz Charts 		
		content.getIcon = function() {
		};
		content.getLabel = function() {
		};
		content.addEventDelegate({
			onBeforeRendering : function() {
				self.setHeightAndWidth();
			}
		});
		//this.getView().getRepresentationContainer().getController().drawRepresentation(content);
		this.getView().getStepToolbar().getController().drawRepresentation(content);
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.stepContainer
	 *@method createAlternateRepresentation
	 *@description creates the alternate representation from chart and returns the main content
	 */
	createAlternateRepresentation : function(sIndex) {
		var self = this;
		var addAdditionalFields = function(param) {
			var dimensions = param.dimensions;
			var metadata = self.oCoreApi.getSteps()[sIndex].getSelectedRepresentation().getMetaData();
			if (metadata === undefined) {
				return param;
			}
			var i;
			for(  i = 0; i < dimensions.length; i++) {
				var bSapTextExists = metadata.getPropertyMetadata(dimensions[i].fieldName).hasOwnProperty('text');
				if (bSapTextExists) {
					var newField = {};
					newField.fieldName = metadata.getPropertyMetadata(dimensions[i].fieldName).text;
					param.dimensions.push(newField);
				}
			}
			param.isAlternateRepresentation = true;
			return param;
		};

		var oActiveStep = self.oCoreApi.getSteps()[sIndex];
		var currentRepresentation = oActiveStep.getSelectedRepresentation();
		var parameter = jQuery.extend(true, {}, currentRepresentation.getParameter());
		delete parameter.alternateRepresentationTypeId;
		delete parameter.alternateRepresentationType;
		parameter = addAdditionalFields(parameter);
		
		// Using the APF Core method to create alternate representation instance
		this.newToggleInstance = this.oCoreApi.createRepresentation(currentRepresentation.getParameter().alternateRepresentationType.constructor, parameter);
		
		var data = currentRepresentation.getData();
		var metadata = currentRepresentation.getMetaData();
		if (data !== undefined && metadata !== undefined) { //Done in order to match the setData invocation through APFCore in case of switch representation
			this.newToggleInstance.setData(data, metadata);
		}
		this.newToggleInstance.adoptSelection(currentRepresentation);
		return this.newToggleInstance;
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.stepContainer
	 *@method isActiveStepChanged
	 *@description Decides whether the active Step is drawn on the main content or not.
	 */
	isActiveStepChanged : function() {
		var bActiveStepChange;
		if (this.currentActiveStepIndex === undefined) {
			this.currentActiveStepIndex = this.oCoreApi.getSteps().indexOf(this.oCoreApi.getActiveStep());
			bActiveStepChange = true;
		} else if (this.currentActiveStepIndex !== this.oCoreApi.getSteps().indexOf(this.oCoreApi.getActiveStep())) {
			this.currentActiveStepIndex = this.oCoreApi.getSteps().indexOf(this.oCoreApi.getActiveStep());
			bActiveStepChange = true;
		} else {
			bActiveStepChange = false;
		}
		return bActiveStepChange;
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.stepContainer
	 *@method isSelectedRepresentationChanged
	 *@description Decides whether the active Step's selected representation has changed or not.
	 */
	isSelectedRepresentationChanged : function() {
		var bSelectedRepresentationChange;
		if (this.currentSelectedRepresentationId === undefined) {
			this.currentSelectedRepresentationId = this.oCoreApi.getActiveStep().getSelectedRepresentationInfo().representationId;
			bSelectedRepresentationChange = true;
		} else if (this.currentSelectedRepresentationId !== this.oCoreApi.getActiveStep().getSelectedRepresentationInfo().representationId) {
			this.currentSelectedRepresentationId = this.oCoreApi.getActiveStep().getSelectedRepresentationInfo().representationId;
			bSelectedRepresentationChange = true;
		} else if (this.getCurrentRepresentation().type !== this.oCoreApi.getActiveStep().getSelectedRepresentation().type) {
			this.currentSelectedRepresentationId = this.oCoreApi.getActiveStep().getSelectedRepresentationInfo().representationId;
			bSelectedRepresentationChange = true;
		} else {
			bSelectedRepresentationChange = false;
		}
		return bSelectedRepresentationChange;
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.stepContainer
	 *@method drawStepContent
	 *@description Draws the main content of the chart
	 */
	drawStepContent : function(bDrawRepresentation) {
		var nActiveStepIndex = this.oCoreApi.getSteps().indexOf(this.oCoreApi.getActiveStep());
		var bThumbnailRefreshing = this.oUiApi.getAnalysisPath().getCarousel().getStepView(nActiveStepIndex).oThumbnailChartLayout.isBusy();
		var isOpenPath = this.oUiApi.getAnalysisPath().getController().isOpenPath;
		var isNewPath = this.oUiApi.getAnalysisPath().getController().isNewPath;
		if (bThumbnailRefreshing) {
			this.getView().vLayout.setBusy(true);
			return;
		}
		var bActiveStepChange = this.isActiveStepChanged();
		var bSelectedRepresentationChange = this.isSelectedRepresentationChanged();
		var bRedrawRepresentation = (bDrawRepresentation === undefined || bDrawRepresentation === true);
		if (bRedrawRepresentation || bActiveStepChange || bSelectedRepresentationChange || isOpenPath || isNewPath) {
			this.drawRepresentation();
		} else {
			if (this.oCoreApi.getSteps().length >= 1) {
				this.drawSelectionContainer();
			}
		}
		if (this.getView().vLayout.isBusy()) {
			this.getView().vLayout.removeAllContent();
			this.getView().vLayout.addContent(this.getView().stepLayout);
			this.getView().vLayout.setBusy(false);
		}
		this.getView().vLayout.setBusy(false);
	}
});

/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 *@class stepGallery
 *@name stepGallery
 *@memberOf sap.apf.ui.reuse.controller
 *@description controller for step Gallery 
 * 
 */
sap.ui.controller("sap.apf.ui.reuse.controller.stepGallery", {
	/**
	 *@this {sap.apf.ui.reuse.controller.stepGallery}
	 */
	/**
	*@memberOf sap.apf.ui.reuse.controller.stepGallery
	*@method getGalleryElementsData 
	*@description Returns array needed to draw step gallery content.
	*@returns   {object} jsonData
	*/
	getGalleryElementsData : function() {
		var aGalleryElements = [];
		var aCategories = this.oCoreApi.getCategories();
		var label = this.oCoreApi.getTextNotHtmlEncoded("label");
		var steps = this.oCoreApi.getTextNotHtmlEncoded("steps");
		var category = this.oCoreApi.getTextNotHtmlEncoded("category");
		var oMessageObject;
		if (aCategories.length === 0) {
			oMessageObject = this.oCoreApi.createMessageObject({
				code : "6001",
				aParameters : [ "Categories" ]
			});
			this.oCoreApi.putMessage(oMessageObject);
		}
		var i;
		for(i = 0; i < aCategories.length; i++) {
			var oGalleryElement = {};
			var oCategory = aCategories[i];
			var categoryName = this.oCoreApi.getTextNotHtmlEncoded(oCategory.label);
			var oCategoryDetails = {};
			if (!oCategory.label) {
				oMessageObject = this.oCoreApi.createMessageObject({
					code : "6002",
					aParameters : [ label, category + ": " + categoryName ]
				});
				this.oCoreApi.putMessage(oMessageObject);
			}
			oCategoryDetails.title = this.oCoreApi.getTextNotHtmlEncoded(oCategory.label).toUpperCase();
			oCategoryDetails.id = oCategory.id;
			oGalleryElement.categoryDetails = oCategoryDetails;
			oGalleryElement.stepTemplates = [];
			aGalleryElements.push(oGalleryElement);
		}
		var aStepTemplates = this.oCoreApi.getStepTemplates();
		if (aStepTemplates.length === 0) {
			oMessageObject = this.oCoreApi.createMessageObject({
				code : "6002",
				aParameters : [ steps, category ]
			});
			this.oCoreApi.putMessage(oMessageObject);
		}
		var j, k;
		for(i =0; i<aStepTemplates.length; i++) {
			var oStepTemplate = aStepTemplates[i];
			//var stepTitle = this.oCoreApi.getTextNotHtmlEncoded(oStepTemplate.title);
			aCategories = oStepTemplate.categories;
			for( j =0; j< aCategories.length; j++) {
				var Category = aCategories[j];
				for(  k = 0 ; k<aGalleryElements.length; k++) {
					var galleryElement = aGalleryElements[k];
					if (galleryElement.categoryDetails.id === Category.id) {
						var oStepDetail = {};
						if (!oStepTemplate.title) {
							oMessageObject = this.oCoreApi.createMessageObject({
								code : "6003",
								aParameters : [ "Title" ]
							});
							this.oCoreApi.putMessage(oMessageObject);
						}
						oStepDetail.maintitle = this.oCoreApi.getTextNotHtmlEncoded(oStepTemplate.title);
						oStepDetail.id = oStepTemplate.id;
						oStepDetail.representationtypes = oStepTemplate.getRepresentationInfo();
						oStepDetail.defaultRepresentationType = oStepDetail.representationtypes[0];
						galleryElement.stepTemplates.push(oStepDetail);
					}
				}
			}
		}
		var jsonData = {
			GalleryElements : aGalleryElements
		};
		return jsonData;
	},
	/*
	*@memberOf sap.apf.ui.reuse.controller.stepGallery
	*@method onInit 
	 *@description Bind gallery elements data to step gallery view.
	*/
	/*
	*@memberOf sap.apf.ui.reuse.controller.stepGallery
	*@method onInit 
	 *@description Bind gallery elements data to step gallery view.
	*/
	onInit : function() {
		this.oCoreApi = this.getView().getViewData().oCoreApi;
		this.oUiApi = this.getView().getViewData().uiApi;
		var aGalleryElements = this.getGalleryElementsData().GalleryElements;
		var oModel = new sap.ui.model.json.JSONModel({
			"GalleryElements" : aGalleryElements
		});
		this.getView().setModel(oModel, "json");
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.stepGallery
	 *@method getStepDetails
	 *@param {object} index of the category in the binding of step gallery dialog
	 *@param {string} index of the step in the binding of step gallery dialog
	 *@return details of a step i.e. id,representationTypes etc
	 */
	getStepDetails : function(categoryIndex, stepIndex) {
		var aGalleryElements = this.getGalleryElementsData().GalleryElements;
		var stepDetails = aGalleryElements[categoryIndex].stepTemplates[stepIndex];
		return stepDetails;
	},
	openHierarchicalSelectDialog : function() {
		if (this.oHierchicalSelectDialog) {
			this.oHierchicalSelectDialog.destroy();
		}
		this.oHierchicalSelectDialog = new sap.ui.jsfragment("sap.apf.ui.reuse.fragment.stepGallery", this);
		this.oHierchicalSelectDialog.setModel(this.getView().getModel("json"), "json");
		this.oHierchicalSelectDialog.open();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.stepGallery
	*@method onStepPress
	*@param {object} evt event object caught from add step button
	*@param {string} sId Id for step being added
	*@param {object} oRepresentationType Representation
	*@description creates new step.
	*/
	onStepPress : function(sId, oRepresentationType) {
		this.oHierchicalSelectDialog.close();
		this.oUiApi.getLayoutView().setBusy(true);
		this.oCoreApi.createStep(sId, this.oUiApi.getAnalysisPath().getController().callBackForUpdatePathAndSetLastStepAsActive.bind(this.oUiApi.getAnalysisPath().getController()), oRepresentationType);
		this.oUiApi.getLayoutView().setBusy(true);
		this.oUiApi.getAnalysisPath().getController().refresh(-1);
	}
});
/*!
* SAP APF Analysis Path Framework
* 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
*/
/**
*@class stepToolbar
*@name stepToolbar
*@memberOf sap.apf.ui.reuse.controller
*@description controller for view.stepToolbar
*/
sap.ui.controller("sap.apf.ui.reuse.controller.stepToolbar", {
	/**
	*@this {sap.apf.ui.reuse.controller.stepToolbar}
	*/
	chartIconInserted : false,
	alternateRepresentationIcon : false,
	alternateRepresentationBool : false,
	selectedRepresentation : null,
	alternateRepresentationBtn : {},
	selectedNumber : null,
	isSwitchRepresentation : false,
	viewSettingsIcon : null,
	onInit : function() {
		this.oCoreApi = this.getView().getViewData().oCoreApi;
		this.oUiApi = this.getView().getViewData().uiApi;
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.stepToolbar
	*@method drawAlternateRepresentation
	*@description Inserts the alternate representation icon to the chart toolbar
	*/
	drawAlternateRepresentation : function() {
		var that = this;
		this.alternateRepresentationBtn = new sap.m.Button({
			icon : this.oCoreApi.getActiveStep().getSelectedRepresentation().getAlternateRepresentation().picture,
			tooltip : this.oCoreApi.getTextNotHtmlEncoded("TableRepresentation"),
			press : function() {
				var oStep = that.oCoreApi.getActiveStep();
				var currentRepresentation = oStep.getSelectedRepresentation();
				var activeStepIndex = that.oCoreApi.getSteps().indexOf(oStep);
				that.selectedRepresentation = "table";
				currentRepresentation.bIsAlternateView = true;
				if (currentRepresentation.toggleInstance === undefined) {
					currentRepresentation.toggleInstance = that.oUiApi.getStepContainer().getController().createAlternateRepresentation(activeStepIndex);
				} else {
					var data = currentRepresentation.getData(), metadata = currentRepresentation.getMetaData();
					if (data !== undefined && metadata !== undefined) {
						currentRepresentation.toggleInstance.setData(data, metadata);
					}
					currentRepresentation.toggleInstance.adoptSelection(currentRepresentation);
				}
				that.oUiApi.getAnalysisPath().getController().refresh(-1);
				that.oUiApi.getStepContainer().getController().drawStepContent();
				that.oUiApi.getAnalysisPath().getCarousel().getStepView(activeStepIndex).getController().drawThumbnailContent(true);
			}
		}).addStyleClass("alternateButton");
		this.insertViewSettingsIcon();
		this.getView().chartToolbar.getToolBar().insertContentRight(this.alternateRepresentationBtn);
	},
	/** 
	 *@memberOf sap.apf.ui.reuse.controller.stepToolbar
	*@method drawMultipleRepresentation
	*@description Method to insert icons for multiple representations
	*/
	insertViewSettingsIcon : function() {
		var that = this;
		this.sortButton = new sap.m.Button({
			icon : "sap-icon://drop-down-list",
			tooltip : this.oCoreApi.getTextNotHtmlEncoded("view-Settings"),
			press : function() {
				if (that.oCoreApi.getActiveStep().getSelectedRepresentation().type !== sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) {
					that.oCoreApi.getActiveStep().getSelectedRepresentation().toggleInstance.viewSettingsDialog.open();
				} else {
					that.oCoreApi.getActiveStep().getSelectedRepresentation().viewSettingsDialog.open();
				}
			}
		}).addStyleClass("sortButton");
		this.getView().chartToolbar.getToolBar().insertContentRight(this.sortButton);
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.stepToolbar
	*@method showSelectionCount
	*@description Shows the selected count(label) and delete icon of the representation
	*/
	showSelectionCount : function() {
		var oActiveStep = this.oCoreApi.getActiveStep();
		var selectedRepresentation = oActiveStep.getSelectedRepresentation();
		var selectionCount = typeof (selectedRepresentation.getSelectionCount) === "function" ? selectedRepresentation.getSelectionCount() : 0;
		var bRequirefFilterPresent = selectedRepresentation.getParameter().requiredFilters !== undefined && selectedRepresentation.getParameter().requiredFilters.length !== 0;
		var bMetadataPresent =selectedRepresentation.getMetaData !== undefined && selectedRepresentation.getMetaData() !== undefined && selectedRepresentation.getMetaData().hasOwnProperty("getPropertyMetadata");
		var selectedDimension = bRequirefFilterPresent && bMetadataPresent ? selectedRepresentation.getMetaData().getPropertyMetadata(selectedRepresentation.getParameter().requiredFilters[0]).label : null;
		if (selectedDimension === null || selectionCount === 0) {
			jQuery(".showSelection").hide();
			jQuery(".resetSelection").hide();
		} else if (selectionCount > 0) {
			this.selectedNumber.setText("(" + this.oCoreApi.getTextNotHtmlEncoded("selected-objects", [ selectedDimension, selectionCount ]) + ")");
			jQuery(".showSelection").show();
			jQuery(".resetSelection").show();
		}
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.stepToolbar
	*@method insertContentLeft
	*@description Inserts the Selection label,count and delete icon to the step toolbar
	*/
	insertContentLeft : function() {
		var that = this;
		// insert left content to the toolbar
		this.currentStepText = new sap.m.Label({
			wrapping : true,
			text : this.oCoreApi.getTextNotHtmlEncoded("currentStep")
		}).addStyleClass("currentStep");
		this.selectedNumber = new sap.m.Label({
			wrapping : true
		}).addStyleClass("showSelection");
		// delete icon for selected items
		this.resetSelection = new sap.m.Link({
			text : this.oCoreApi.getTextNotHtmlEncoded("resetSelection")
		}).attachPress(function() {
			jQuery(".showSelection").hide();
			jQuery(".resetSelection").hide();
			if (that.oCoreApi.getActiveStep().getSelectedRepresentation().bIsAlternateView) {
				that.oCoreApi.getActiveStep().getSelectedRepresentation().toggleInstance.removeAllSelection();
			}
			that.oCoreApi.getActiveStep().getSelectedRepresentation().removeAllSelection();
		}).addStyleClass("resetSelection");
		this.getView().chartToolbar.getToolBar().insertContentRight(this.resetSelection);
		this.getView().chartToolbar.getToolBar().insertContentLeft(this.selectedNumber);
		this.getView().chartToolbar.getToolBar().insertContentLeft(this.currentStepText);
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.stepToolbar
	*@method drawSingleRepresentation
	*@description Method to insert icon for single representation
	*/
	drawSingleRepresentation : function() {
		var that = this;
		var selectedMultipleRepresentationBtn = new sap.m.Button({
			icon : that.oCoreApi.getActiveStep().getSelectedRepresentationInfo().picture,
			tooltip : this.oCoreApi.getTextNotHtmlEncoded(that.oCoreApi.getActiveStep().getSelectedRepresentationInfo().label),
			press : function() {
				var oStep = that.oCoreApi.getActiveStep();
				var currentRepresentation = oStep.getSelectedRepresentation();
				currentRepresentation.bIsAlternateView = false;
				that.oUiApi.getStepContainer().getController().drawStepContent();
				var activeStepIndex = that.oCoreApi.getSteps().indexOf(oStep);
				that.oUiApi.getAnalysisPath().getCarousel().getStepView(activeStepIndex).getController().drawThumbnailContent(true);
			}
		});
		this.getView().chartToolbar.getToolBar().insertContentRight(selectedMultipleRepresentationBtn, 0);
		this.insertContentLeft();
	},
	/** 
	 *@memberOf sap.apf.ui.reuse.controller.stepToolbar
	*@method drawMultipleRepresentation
	*@description Method to insert icons for multiple representations
	*/
	drawMultipleRepresentation : function() {
		var that = this;
		var activeStep = that.oCoreApi.getActiveStep();
		activeStep.representationtypes = activeStep.getRepresentationInfo();
		var reperesentationTypesLength = activeStep.representationtypes.length;
		var selectedMultipleRepresentationBtn;
		var drawSelectedRepresentation = function(data) {
			data.oCurrentActiveStep.getSelectedRepresentation().bIsAlternateView = false;
			data.oCurrentActiveStep.setSelectedRepresentation(data.oRepresentationType.representationId);
			that.oUiApi.getAnalysisPath().getController().refresh(data.nActiveStepIndex);
			that.oCoreApi.updatePath(that.oUiApi.getAnalysisPath().getController().callBackForUpdatePath.bind(that.oUiApi.getAnalysisPath().getController()));
		};
		this.openList = function(oEvent) {
			var data = oEvent.getParameter("listItem").getCustomData()[0].getValue();
			drawSelectedRepresentation(data);
			selectedMultipleRepresentationBtn.setIcon(data.icon);
			selectedMultipleRepresentationBtn.setTooltip(that.oCoreApi.getTextNotHtmlEncoded(data.oRepresentationType.label));
		};
		var oAllChartList = new sap.m.List({
			mode : sap.m.ListMode.SingleSelectMaster,
			showSeparators : sap.m.ListSeparators.None,
			includeItemInSelection : true,
			select : jQuery.proxy(function(oEvent) {
				this.openList(oEvent);
			}, this)
		});
		for( var j = 0; j < reperesentationTypesLength; j++) {
			oAllChartList.addItem(new sap.m.StandardListItem({
				icon : activeStep.representationtypes[j].picture,
				title : that.oCoreApi.getTextNotHtmlEncoded(activeStep.representationtypes[j].label),
				customData : [ new sap.ui.core.CustomData({
					key : 'data',
					value : {
						oCurrentActiveStep : that.oCoreApi.getActiveStep(),
						oRepresentationType : activeStep.representationtypes[j],
						nActiveStepIndex : that.oCoreApi.getSteps().indexOf(that.oCoreApi.getActiveStep()),
						icon : activeStep.representationtypes[j].picture
					}
				}) ]
			}));
		}
		var oShowAllChartPopover = new sap.m.Popover({
			placement : sap.m.PlacementType.Bottom,
			showHeader : false,
			content : [ oAllChartList ]
		}).addStyleClass("sapCaUiChartToolBarShowAllChartListPopover");
		//full-screen buttons
		for( var k = 0; k < reperesentationTypesLength; k++) {
			var button = new sap.m.Button({
				tooltip : that.oCoreApi.getTextNotHtmlEncoded(activeStep.representationtypes[k].label),
				icon : activeStep.representationtypes[k].picture,
				customData : [ new sap.ui.core.CustomData({
					key : 'data',
					value : {
						oCurrentActiveStep : that.oCoreApi.getActiveStep(),
						oRepresentationType : activeStep.representationtypes[k],
						nActiveStepIndex : that.oCoreApi.getSteps().indexOf(that.oCoreApi.getActiveStep()),
						icon : activeStep.representationtypes[k].picture
					}
				}) ],
				press : function(oEvent) {
					var data = oEvent.getSource().getCustomData()[0].getValue();
					drawSelectedRepresentation(data);
				}
			});
			button.addStyleClass("iconLeft");
			this.getView().chartToolbar.getToolBar().insertContentRight(button);
		}
		selectedMultipleRepresentationBtn = new sap.m.Button({
			icon : that.oCoreApi.getActiveStep().getSelectedRepresentationInfo().picture,
			tooltip : that.oCoreApi.getTextNotHtmlEncoded(that.oCoreApi.getActiveStep().getSelectedRepresentationInfo().label),
			press : function() {
				oShowAllChartPopover.openBy(this);
			}
		}).addStyleClass("iconList");
		this.getView().chartToolbar.getToolBar().insertContentRight(selectedMultipleRepresentationBtn, 0);
		this.insertContentLeft();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.stepToolbar
	*@method drawToolBar
	*@description renders the toolbar specific for single or multiple representations and shows/hide legend icon/alternate representation icon
	*/
	drawToolBar : function() {
		var that = this;
		this.showAndHideIcons = function() {
			var that = this;
			that.isSwitchRepresentation = false;
			if (that.getView().chartToolbar.getFullScreen() === true) {
				//full-screen
				jQuery(".iconList").hide();
				jQuery(".iconLeft").show();
			} else {
				//initial
				jQuery(".iconList").show();
				jQuery(".iconLeft").hide();
			}
			//show table sort icon, show only if the representation is table and if the alternate representation is table
			if ((that.oCoreApi.getActiveStep().getSelectedRepresentation().bIsAlternateView && that.oCoreApi.getActiveStep().getSelectedRepresentation().getAlternateRepresentation().id === sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION)
					|| that.oCoreApi.getActiveStep().getSelectedRepresentation().type === sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) {
				jQuery(".sortButton").show();
			} else {
				jQuery(".sortButton").hide();
			}
			// selection count and label
			if (that.oCoreApi.getSteps().length >= 1) {
				that.showSelectionCount();
			}
			// for iPhone and when screen resizes, the chartToolbar width will be equal to window width
			var toolbarId = that.getView().chartToolbar.getId();
			if (that.oCoreApi.getActiveStep().getSelectedRepresentation().getAlternateRepresentation() !== undefined) {
				if ((!that.oCoreApi.getActiveStep().getSelectedRepresentation().bIsAlternateView && that.oCoreApi.getActiveStep().getSelectedRepresentation().getAlternateRepresentation().id !== sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION)
						|| that.oCoreApi.getActiveStep().getSelectedRepresentation().type !== sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) {
					if ((window.innerWidth === jQuery("#" + toolbarId + " > div:first-child > div:nth-child(2)").width())) {
						jQuery(that.getView().chartToolbar._oShowLegendButton.getDomRef()).show();
					}
				}
			}
		};
		this.renderIcons = function() {
			var that = this;
			var oActiveStep = that.oCoreApi.getActiveStep();
			if (oActiveStep !== undefined) {
				//tooltip added for fullscreen
				that.getView().chartToolbar._oFullScreenButton.setTooltip(that.oCoreApi.getTextNotHtmlEncoded("toggle-fullscreen"));
				that.getView().chartToolbar._oFullScreenExitButton.setTooltip(that.oCoreApi.getTextNotHtmlEncoded("toggle-fullscreen"));
				var stepRepresentation = oActiveStep.getSelectedRepresentation().chartInstance || {};
				//draw table
				if (that.alternateRepresentationIcon === false && that.oCoreApi.getActiveStep().getSelectedRepresentation().type !== sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) {
					that.drawAlternateRepresentation();
					that.alternateRepresentationIcon = true;
				}
				//table sort icon
				if (that.oCoreApi.getActiveStep().getSelectedRepresentation().type === sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) {
					if (that.viewSettingsIcon === false) {
						that.insertViewSettingsIcon();
						//that.insertContentLeft();
					}
					that.viewSettingsIcon = true;
				}
				//draw representation
				if (that.oCoreApi.getActiveStep().getRepresentationInfo().length > 1) {
					if (that.chartIconInserted === false) {
						that.drawMultipleRepresentation();
					}
					that.chartIconInserted = true;
				} else if (that.oCoreApi.getActiveStep().getSelectedRepresentation().type !== sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION && that.oCoreApi.getActiveStep().getRepresentationInfo().length === 1) {
					if (that.chartIconInserted === false) {
						that.drawSingleRepresentation();
					}
					that.chartIconInserted = true;
				}
				//Disable if the representation is table or geomap
				if ((that.oCoreApi.getActiveStep().getSelectedRepresentation().bIsAlternateView && that.oCoreApi.getActiveStep().getSelectedRepresentation().getAlternateRepresentation().id === sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION)
						|| that.oCoreApi.getActiveStep().getSelectedRepresentation().type === (sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION || sap.apf.ui.utils.CONSTANTS.representationTypes.GEO_MAP)) {
					that.getView().chartToolbar._oShowLegendButton.setVisible(false);
				} else {
					that.getView().chartToolbar._oShowLegendButton.setVisible(true);
					that.getView().chartToolbar._oShowLegendButton.setTooltip(that.oCoreApi.getTextNotHtmlEncoded("legend"));
				}
				//If representation is switched then show the legend
				if (that.isSwitchRepresentation === true) {
					that.getView().chartToolbar.setShowLegend(true);
				}
				var currentRepresentation = oActiveStep.getSelectedRepresentation();
				var formatString;
				//Show/Hide Legend 
				if (currentRepresentation.bIsLegendVisible === false) {//TODO: for geomap, condition to be added
					if (stepRepresentation.setLegend !== undefined) {
						stepRepresentation.setLegend(new sap.viz.ui5.types.legend.Common({
							visible : false
						}));
					}
					if (stepRepresentation.setSizeLegend !== undefined) {
						formatString = stepRepresentation.getSizeLegend().getFormatString();
						stepRepresentation.setSizeLegend(new sap.viz.ui5.types.legend.Common({
							visible : false
						}));
						if(formatString !== null){
							stepRepresentation.getSizeLegend().setFormatString(formatString);
						}
					}
				} else {
					if (stepRepresentation.setLegend !== undefined) {
						stepRepresentation.setLegend(new sap.viz.ui5.types.legend.Common({
							visible : true
						}));
					}
					if (stepRepresentation.setSizeLegend !== undefined) {
						formatString = stepRepresentation.getSizeLegend().getFormatString();
						stepRepresentation.setSizeLegend(new sap.viz.ui5.types.legend.Common({
							visible : true
						}));
						if(formatString !== null){
							stepRepresentation.getSizeLegend().setFormatString(formatString);
						}
					}
				}
			}
		};
		this.getView().chartToolbar.addEventDelegate({
			onAfterRendering : function() {
				if (that.oCoreApi.getSteps().length > 0) {
					that.showAndHideIcons();
				}
			},
			onBeforeRendering : function() {
				if (that.oCoreApi.getSteps().length > 0) {
					that.renderIcons();
				}
			}
		});
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.stepToolbar
	*@method drawRepresentation
	*@description This method clears the toolbar content, insert chart and renders toolbar 
	*/
	drawRepresentation : function(oChart) {
		var that = this;
		this.isSwitchRepresentation = true;
		this.getView().chartToolbar.getToolBar().removeAllContentLeft();
		this.getView().chartToolbar.getToolBar().removeAllContentRight();
		this.chartIconInserted = false;
		this.alternateRepresentationIcon = false;
		this.viewSettingsIcon = false;
		this.getView().chartToolbar.removeAllCharts();
		this.getView().chartToolbar.insertChart(oChart);
		if (this.getView().chartToolbar.getFullScreen() === true) {
			this.getView().chartToolbar.rerender(); //re-render's main chart on fullscreen    
		}
		this.drawToolBar();
		//Handle Legend Show/Hide Mapped to Representations
		this.getView().chartToolbar.onAfterRendering = function() {
			var legendIcon = this._oShowLegendButton.getDomRef();
			//Bind Click Event on legend icon to switch the state of hide/show boolean
			var evtType = sap.ui.Device.browser.mobile ? "tap" : "click";
			$(legendIcon).on(evtType, function() {
					var oStep = that.oCoreApi.getActiveStep();
					var currentRepresentation = oStep.getSelectedRepresentation();
					if (currentRepresentation.bIsLegendVisible === true || currentRepresentation.bIsLegendVisible === undefined) {
						currentRepresentation.bIsLegendVisible = false;
					} else {
						currentRepresentation.bIsLegendVisible = true;
					}
				});
			};
		}
	});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
*@class toolbar
*@name toolbar
*@memberOf sap.apf.ui.reuse.controller
*@description controller for view.toolbar
*/
sap.ui.controller("sap.apf.ui.reuse.controller.toolbar", {
	/**
	*@this {sap.apf.ui.reuse.controller.toolbar}
	*/
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method resetAnalysisPath
	*@description Refresh carousel on new Analysis path 
	 */
	resetAnalysisPath : function() {
		this.oCoreApi.resetPath();
		this.oUiApi.getAnalysisPath().getController().isNewPath = true;
		this.oPathContextHandler.restoreInitialContext();
		this.oUiApi.contextChanged(true);
//		this.oUiApi.getLayoutView().getController().setFilter();
		this.oUiApi.getAnalysisPath().getCarousel().getController().removeAllSteps();
		this.oUiApi.getAnalysisPath().getController().addInitialStep();
		this.oUiApi.getAnalysisPath().getController().refreshAnalysisPath();
		this.oUiApi.getAnalysisPath().oSavedPathName.setTitle(this.oCoreApi.getTextNotHtmlEncoded("unsaved"));
		this.oUiApi.getAnalysisPath().getController().bIsDirtyState = false;
		this.oUiApi.getAnalysisPath().getCarousel().rerender();
	},
	onInit : function() {
		this.view = this.getView();
		this.oViewData = this.getView().getViewData();
		this.oCoreApi = this.oViewData.oCoreApi;
		this.oSerializationMediator = this.oViewData.oSerializationMediator;
		this.oUiApi = this.oViewData.uiApi;
		this.oPathContextHandler = this.oViewData.oPathContextHandler;
		this.oPrintHelper = new sap.apf.ui.utils.PrintHelper(this.oViewData);
		this.bIsPathGalleryWithDelete = false;
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method open dialog for showing saved paths with delete mode
	*@description Opens an overlay which holds saved analysis Paths
	*@see sap.apf.ui.view.deleteAnalysisPath
	*/
	openPathGalleryWithDelete : function() {
		var jsonData = {};
		var self = this;
		var oMessageObject;
		var i;
		self.oCoreApi.readPaths(function(data, metaData, msgObj) {
			if (msgObj === undefined && (typeof data === "object")) {
				var galleryData = data.paths;
				for(i = 0; i<galleryData.length; i++) {
					var noOfSteps = galleryData[i].StructuredAnalysisPath.steps.length;
					var utcDate = galleryData[i].LastChangeUTCDateTime;
					var numberPattern = /\d+/g;
					var timeStamp = parseInt(utcDate.match(numberPattern)[0], 10);
					var date = ((new Date(timeStamp)).toString()).split(' ');
					var dateToShow = date[1] + "-" + date[2] + "-" + date[3];
					galleryData[i].guid = galleryData[i].AnalysisPath;
					galleryData[i].StructuredAnalysisPath.noOfSteps = noOfSteps;
					galleryData[i].description = dateToShow + "  -   (" + self.oCoreApi.getTextNotHtmlEncoded("no-of-steps", [ noOfSteps ]) + ")";
					galleryData[i].summary = galleryData[i].AnalysisPathName + "- (" + dateToShow + ") - (" + self.oCoreApi.getTextNotHtmlEncoded("no-of-steps", [ noOfSteps ]) + ")";
				}
				jsonData = {
					GalleryElements : galleryData
				};
				self.deleteAnalysisPath = new sap.ui.view({
					type : sap.ui.core.mvc.ViewType.JS,
					viewName : "sap.apf.ui.reuse.view.deleteAnalysisPath",
					viewData : {
						jsonData : jsonData,
						oInject : self.oViewData
					}
				});
				self.deleteAnalysisPath.getController().openPathGalleryWithDelete();
				self.oUiApi.getLayoutView().setBusy(false);
			} else {
				oMessageObject = self.oCoreApi.createMessageObject({
					code : "6005",
					aParameters : []
				});
				oMessageObject.setPrevious(msgObj);
				self.oCoreApi.putMessage(oMessageObject);
				self.oUiApi.getLayoutView().setBusy(false);
			}
		});
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method open dialog for showing saved paths
	*@description Opens an overlay which holds saved analysis Paths
	*@see sap.apf.ui.view.pathGallery
	*/
	openPathGallery : function() {
		var jsonData = {};
		var self = this;
		var i, oMessageObject;
		self.oCoreApi.readPaths(function(data, metaData, msgObj) {
			if (msgObj === undefined && (typeof data === "object")) {
				var galleryData = data.paths;
				for(i =0 ; i<galleryData.length ; i++) {
					var noOfSteps = galleryData[i].StructuredAnalysisPath.steps.length;
					var utcDate = galleryData[i].LastChangeUTCDateTime;
					var numberPattern = /\d+/g;
					var timeStamp = parseInt(utcDate.match(numberPattern)[0], 10);
					var date = ((new Date(timeStamp)).toString()).split(' ');
					var dateToShow = date[1] + "-" + date[2] + "-" + date[3];
					galleryData[i].guid = galleryData[i].AnalysisPath;
					galleryData[i].StructuredAnalysisPath.noOfSteps = noOfSteps;
					galleryData[i].description = dateToShow + "  -   (" + self.oCoreApi.getTextNotHtmlEncoded("no-of-steps", [ noOfSteps ]) + ")";
					galleryData[i].summary = galleryData[i].AnalysisPathName + "- (" + dateToShow + ") - (" + self.oCoreApi.getTextNotHtmlEncoded("no-of-steps", [ noOfSteps ]) + ")";
				}
				jsonData = {
					GalleryElements : galleryData
				};
				self.pathGallery = new sap.ui.view({
					type : sap.ui.core.mvc.ViewType.JS,
					viewName : "sap.apf.ui.reuse.view.pathGallery",
					viewData : {
						jsonData : jsonData,
						oInject : self.oViewData
					}
				});
				self.pathGallery.getController().openPathGallery();
				self.oUiApi.getLayoutView().setBusy(false);
			} else {
				oMessageObject = self.oCoreApi.createMessageObject({
					code : "6005",
					aParameters : []
				});
				oMessageObject.setPrevious(msgObj);
				self.oCoreApi.putMessage(oMessageObject);
				self.oUiApi.getLayoutView().setBusy(false);
			}
		});
	},
	doPrint : function() {
		var oPrint = this.oPrintHelper;
		oPrint.doPrint();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method getSaveDialog
	*@description Getter for save dialog. Opens a new dialog for saving analysis Path
	*@param {object} reset callback for save 
	 */
	getSaveDialog : function(bSaveAs, reset, aPath) {
		var self = this;
		var hintText = this.oCoreApi.getTextNotHtmlEncoded("saveName");
		var savedAPNameExist = this.oUiApi.getAnalysisPath().oSavedPathName.getTitle();
		var oModelPath = new sap.ui.model.json.JSONModel();
		oModelPath.setData(aPath);
		if (savedAPNameExist) {
			var firstChar = savedAPNameExist.charAt(0);
			if (firstChar === "*"){
				savedAPNameExist = savedAPNameExist.split('*')[1];
			}
		}
		this.oInput = new sap.m.Input({
			type : sap.m.InputType.Text,
			placeholder : hintText,
			showSuggestion : true,
			suggestionItems : {
				path : "/",
				template : new sap.ui.core.Item({
					text : "{AnalysisPathName}",
					additionalText : "{AnalysisPath}"
				}),
				showValueHelp : true,
				valueHelpRequest : function(evt) {
					var handleClose = function(evt) {
						var oSelectedItem = evt.getParameter("selectedItem");
						if (oSelectedItem) {
							input.setValue(oSelectedItem.getTitle());
						}
						evt.getSource().getBinding("items").filter([]);
					};
				}
			}
		}).addStyleClass("saveStyle");
		this.oInput.setModel(oModelPath);
		//destroy the input assisted items
		if (!bSaveAs) {
			this.oInput.destroySuggestionItems();
		}
		this.oInput.attachEvent("click", function(oEvent) {
			jQuery(oEvent.currentTarget).attr('value', '');
		});
		//Save input field validation
		this.oInput.attachLiveChange(function(data) {
			var val = this.getValue();
			var dialog = self.saveDialog;
			var regEx = new RegExp("[*]", "g");
			if (val === "") {
				dialog.getBeginButton().setEnabled(false);
			}
			if ((val.match(regEx) !== null)) {
				dialog.getBeginButton().setEnabled(false);
				dialog.setSubHeader(new sap.m.Bar({
					contentMiddle : new sap.m.Text({
						text : this.oCoreApi.getTextNotHtmlEncoded('invalid-entry')
					})
				}));
				this.setValueState(sap.ui.core.ValueState.Error);
				return false;
			} else {
				dialog.getBeginButton().setEnabled(true);
				dialog.destroySubHeader();
				this.setValueState(sap.ui.core.ValueState.None);
			}
			if (val.trim() !== "") {
				dialog.getBeginButton().setEnabled(true);
				dialog.destroySubHeader();
			} else {
				dialog.getBeginButton().setEnabled(false);
				dialog.setSubHeader(new sap.m.Bar({
					contentMiddle : new sap.m.Text({
						text : self.oCoreApi.getTextNotHtmlEncoded('enter-valid-path-name')
					})
				}));
			}
		});
		//setting existing path name in input field
		if (savedAPNameExist !== (self.oCoreApi.getTextNotHtmlEncoded("unsaved"))) {
			this.oInput.setValue(savedAPNameExist);
		} else {
			//this.oInput.setValue(hintText);
		}
		this.analysisPathName = (self.oInput.getValue()).trim();
		this.saveDialog = new sap.m.Dialog({
			type : sap.m.DialogType.Standard,
			title : self.oCoreApi.getTextNotHtmlEncoded("save-analysis-path"),
			beginButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("ok"),
				enabled : false,
				press : function() {
					self.saveDialog.getBeginButton().setEnabled(false);
					self.saveDialog.getEndButton().setEnabled(false);
					var analysisPathName = (self.oInput.getValue()).trim();
					self.saveAnalysisPath(analysisPathName, reset, bSaveAs);
					this.destroy();
				}
			}),
			endButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("cancel"),
				press : function() {
					self.saveDialog.close();
					this.destroy();
				}
			}),
			afterClose : function() {
				self.oUiApi.getLayoutView().setBusy(false);
			}
		});
		this.saveDialog.addContent(this.oInput);
		// conditional opening of save dialog(save/saveAs)
		if (this.oInput.getValue() === savedAPNameExist) {
			this.saveDialog.getBeginButton().setEnabled(true);
		}
		//open only if steps are present in the path
		if (self.oCoreApi.getSteps().length >= 1) {
			if (!bSaveAs && savedAPNameExist === (self.oCoreApi.getTextNotHtmlEncoded("unsaved"))) {
				this.saveDialog.open();
			} else if (bSaveAs) {
				this.saveDialog.open();
			} else {
				self.saveAnalysisPath(savedAPNameExist, reset, bSaveAs);
			}
		}
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method doOkOnNewAnalysisPath
	*@description Executes operations on click of "Ok" button of New Analysis Path dialog
	*/
	doOkOnNewAnalysisPath : function() {
		var self = this;
		this.isOpen = false;
		self.oCoreApi.readPaths(function(respObj, metaData, msgObj) {
			var bSaveAs = true;
			var paths = respObj.paths;
			if (metaData !== undefined) {
				self.getView().maxNumberOfSteps = metaData.getEntityTypeMetadata().maximumNumberOfSteps;
				self.getView().maxNumberOfPaths = metaData.getEntityTypeMetadata().maxOccurs;
			}
			if (msgObj === undefined && (typeof respObj === "object")) {
				self.getSaveDialog(bSaveAs, function() {
					self.resetAnalysisPath();
					//					sap.apf.ui.createApplicationLayout();
				}, paths);
			} else {
				oMessageObject = self.oCoreApi.createMessageObject({
					code : "6005",
					aParameters : []
				});
				oMessageObject.setPrevious(msgObj);
				self.oCoreApi.putMessage(oMessageObject);
			}
		});
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method doOkOnOpenAnalysisPath
	*@description Executes operations on click of "Ok" btton of Open Analysis Path dialog
	*/
	doOkOnOpenAnalysisPath : function(bIsPathGalleryWithDelete) {
		var self = this;
		this.isOpen = true;
		this.bIsPathGalleryWithDelete = bIsPathGalleryWithDelete;
		self.oCoreApi.readPaths(function(respObj, metaData, msgObj) {
			var bSaveAs = true;
			var paths = respObj.paths;
			if (metaData !== undefined) {
				self.getView().maxNumberOfSteps = metaData.getEntityTypeMetadata().maximumNumberOfSteps;
				self.getView().maxNumberOfPaths = metaData.getEntityTypeMetadata().maxOccurs;
			}
			if (msgObj === undefined && (typeof respObj === "object")) {
				self.getSaveDialog(bSaveAs, function() {
				}, paths);
			} else {
				oMessageObject = self.oCoreApi.createMessageObject({
					code : "6005",
					aParameters : []
				});
				oMessageObject.setPrevious(msgObj);
				self.oCoreApi.putMessage(oMessageObject);
			}
		});
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method getNewAnalysisPathDialog
	*@description Getter for New Analysis Path dialog 
	 */
	getNewAnalysisPathDialog : function() {
		var self = this;
		if (self.oUiApi.getAnalysisPath().oSavedPathName.getTitle().slice(0, 1) === "*" && self.oCoreApi.getSteps().length !== 0) {
			var newDialog = new sap.m.Dialog({
				type : sap.m.DialogType.Standard,
				title : self.oCoreApi.getTextNotHtmlEncoded("newPath"),
				content : new sap.m.Text({
					text : self.oCoreApi.getTextNotHtmlEncoded("analysis-path-not-saved")
				}).addStyleClass("textStyle"),
				beginButton : new sap.m.Button({
					text : self.oCoreApi.getTextNotHtmlEncoded("yes"),
					press : function() {
						self.doOkOnNewAnalysisPath();
						newDialog.close();
					}
				}),
				endButton : new sap.m.Button({
					text : self.oCoreApi.getTextNotHtmlEncoded("no"),
					press : function() {
						self.resetAnalysisPath();
						newDialog.close();
					}
				}),
				afterClose : function() {
					self.oUiApi.getLayoutView().setBusy(false);
					this.destroy();
				}
			});
			newDialog.open();
		} else {
			this.resetAnalysisPath();
		}
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method getOpenDialog
	*@description Getter for New Analysis Path dialog
	*/
	getOpenDialog : function(bIsPathGalleryWithDelete) {
		var self = this;
		var dialog = new sap.m.Dialog({
			type : sap.m.DialogType.Standard,
			title : self.oCoreApi.getTextNotHtmlEncoded("newPath"),
			content : new sap.m.Text({
				text : self.oCoreApi.getTextNotHtmlEncoded("analysis-path-not-saved")
			}).addStyleClass("textStyle"),
			beginButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("yes"),
				press : function() {
					self.doOkOnOpenAnalysisPath(self.bIsPathGalleryWithDelete);
					dialog.close();
				}
			}),
			endButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("no"),
				press : function() {
					dialog.close();
					self.resetAnalysisPath();
					if (self.bIsPathGalleryWithDelete) {
						self.openPathGalleryWithDelete();
					} else {
						self.openPathGallery();
					}
				}
			}),
			afterClose : function() {
				self.oUiApi.getLayoutView().setBusy(false);
				this.destroy();
			}
		});
		dialog.open();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method getConfirmDelDialog
	*@description confirm dialog before deleting path
	*@param {object} sectionDom Returns to DOM object on which the delete is called 
	 */
	getConfirmDelDialog : function(oListInfo) {
		var self = this;
		var pathName = oListInfo.sPathName;
		var dialog = new sap.m.Dialog({
			type : sap.m.DialogType.Standard,
			title : self.oCoreApi.getTextNotHtmlEncoded("delPath"),
			content : new sap.m.Text({
				text : self.oCoreApi.getTextNotHtmlEncoded("do-you-want-to-delete-analysis-path") + " '" + pathName + "'?"
			}).addStyleClass("textStyle"),
			beginButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("yes"),
				press : function() {
					self.oUiApi.getAnalysisPath().getPathGalleryWithDeleteMode().getController().deleteSavedPath(pathName, oListInfo);
					dialog.close();
				}
			}),
			endButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("no"),
				press : function() {
					dialog.close();
				}
			}),
			afterClose : function() {
				self.oUiApi.getLayoutView().setBusy(false);
				this.destroy();
			}
		});
		dialog.open();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method getConfirmDelDialog
	*@description confirm dialog before overwriting path
	*/
	getConfirmDialog : function(oParam) {
		var self = this;
		var opt = oParam || {};
		var options = {
			success : opt.success || function() {
			},
			fail : opt.fail || function() {
			},
			msg : opt.msg || ""
		};
		var dialog = new sap.m.Dialog({
			title : self.oCoreApi.getTextNotHtmlEncoded("caution"),
			type : sap.m.DialogType.Standard,
			content : new sap.m.Text({
				text : options.msg
			}).addStyleClass("textStyle"),
			beginButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("yes"),
				press : function() {
					//fnCallback = options.success();
					self.overWriteAnalysisPath();
					dialog.close();
				}
			}),
			endButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("no"),
				press : function() {
					var bSaveAs = true;
					var aData = self.oInput.getModel().getData();
					//fnCallback = options.success()
					self.getSaveDialog(bSaveAs, function() {
					}, aData);
					dialog.close();
				}
			}),
			afterClose : function() {
				self.oUiApi.getLayoutView().setBusy(false);
				this.destroy();
			}
		});
		dialog.open();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method getConfirmLogOffDialog
	*@description confirm dialog before logging out  
	*/
	getConfirmLogOffDialog : function() {
		var self = this;
		var dialog = new sap.m.Dialog({
			title : self.oCoreApi.getTextNotHtmlEncoded("confirmation"),
			type : sap.m.DialogType.Standard,
			content : new sap.m.Text({
				text : self.oCoreApi.getTextNotHtmlEncoded("do-you-want-to-logout")
			}).addStyleClass("textStyle"),
			beginButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("yes"),
				press : function() {
					self.oCoreApi.logoutHanaXse();
					dialog.close();
				}
			}),
			endButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("no"),
				press : function() {
					dialog.close();
				}
			}),
			afterClose : function() {
				self.oUiApi.getLayoutView().setBusy(false);
				this.destroy();
			}
		});
		dialog.open();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method getErrorMessageDialog
	*@description Getter for save dialog. Opens a new dialog for saving analysis Path
	*@param {string} errorText Text to be shown in case of an error
	*/
	getErrorMessageDialog : function(msg) {
		var self = this;
		var dialog = new sap.m.Dialog({
			title : self.oCoreApi.getTextNotHtmlEncoded("error"),
			type : sap.m.DialogType.Message,
			content : new sap.m.Text({
				text : msg
			}).addStyleClass("textStyle"),
			beginButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("ok"),
				press : function() {
					var fncallback = function() {
					};
					if (fncallback) {
						setTimeout(function() {
							self.callbackforSave(fncallback);
						}, 200);
					}
					dialog.close();
				}
			}),
			afterClose : function() {
				self.oUiApi.getLayoutView().setBusy(false);
				this.destroy();
			}
		});
		dialog.open();
	},
	callbackforSave : function(fncallback) {
		fncallback();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method onOpenAnalysisPath
	*@description On click event of open button in Menu Popover
	*/
	onOpenPathGallery : function() {
		this.bIsPathGalleryWithDelete = false;
		var pathName = this.oUiApi.getAnalysisPath().oSavedPathName.getTitle();
		firstChar = pathName.charAt(0);
		if (firstChar === "*" && this.oCoreApi.getSteps().length !== 0) {
			this.getOpenDialog(this.bIsPathGalleryWithDelete);
		} else {
			this.openPathGallery();
		}
		this.isOpen = false;
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method onOpenPathGalleryWithDelete
	*@description On click event of Delete button in  Menu PopOver
	*/
	onOpenPathGalleryWithDelete : function() {
		this.bIsPathGalleryWithDelete = true;
		var pathName = this.oUiApi.getAnalysisPath().oSavedPathName.getTitle();
		firstChar = pathName.charAt(0);
		if (firstChar === "*" && this.oCoreApi.getSteps().length !== 0) {
			this.getOpenDialog(this.bIsPathGalleryWithDelete);
		} else {
			this.openPathGalleryWithDelete();
		}
		this.isOpen = false;
	},
	saveAnalysisPath : function(analysisPathName, fncallback, bSaveAs) {
		var self = this;
		this.saveCallback = fncallback;
		this.analysisPathName = analysisPathName; //Encodes the special characters
		this.aData = self.oInput.getModel().getData();
		var boolUpdatePath = false;
		this.guid = "";
		var steps = self.oCoreApi.getSteps();
		//Check if path or steps exceeds the limit
		if (this.aData.length > this.getView().maxNumberOfPaths) {
			this.getErrorMessageDialog(self.oCoreApi.getTextNotHtmlEncoded("no-of-paths-exceeded"));
			if (self.saveDialog && self.saveDialog.isOpen()) {
				self.saveDialog.close();
			}
			return false;
		} else if (steps.length > this.getView().maxNumberOfSteps) {
			this.getErrorMessageDialog(self.oCoreApi.getTextNotHtmlEncoded("no-of-steps-exceeded"));
			if (self.saveDialog && self.saveDialog.isOpen()) {
				self.saveDialog.close();
			}
			return false;
		}
		for( var i = 0; i < this.aData.length; i++) {
			var decodePathName = this.aData[i].AnalysisPathName;
			if (this.analysisPathName === decodePathName) {
				boolUpdatePath = true;
				this.guid = this.aData[i].AnalysisPath;
				break;
			}
		}
		if (!boolUpdatePath) {
			self.oSerializationMediator.savePath(self.analysisPathName, function(respObj, metaData, msgObj) {
				if (msgObj === undefined && (typeof respObj === "object")) {
					self.oUiApi.getAnalysisPath().oSavedPathName.setTitle(self.analysisPathName);
					self.oUiApi.getAnalysisPath().getController().bIsDirtyState = false;
					if (self.saveDialog && self.saveDialog.isOpen()) {
						self.saveDialog.close();
					}
					var message = self.oCoreApi.getTextNotHtmlEncoded("path-saved-successfully", [ "'" + self.analysisPathName + "'" ]);
					self.getSuccessToast(self.analysisPathName, message);
					if (typeof self.saveCallback === "function") {
						self.saveCallback();
					}
				} else {
					oMessageObject = self.oCoreApi.createMessageObject({
						code : "6006",
						aParameters : [ self.analysisPathName ]
					});
					oMessageObject.setPrevious(msgObj);
					self.oCoreApi.putMessage(oMessageObject);
				}
			});
		} else {
			if (self.saveDialog && self.saveDialog.isOpen()) {
				self.saveDialog.close();
			}
			var pathName;
			if (self.oUiApi.getAnalysisPath().oSavedPathName.getTitle().charAt(0) === "*" && this.oCoreApi.getSteps().length !== 0) {
				pathName = self.oUiApi.getAnalysisPath().oSavedPathName.getTitle().slice(1, self.oUiApi.getAnalysisPath().oSavedPathName.getTitle().length);
			} else {
				pathName = self.oUiApi.getAnalysisPath().oSavedPathName.getTitle();
			}
			if (!bSaveAs && pathName === self.analysisPathName) {
				self.overWriteAnalysisPath();
			} else {
				this.getConfirmDialog({
					msg : self.oCoreApi.getTextNotHtmlEncoded("path-exists", [ "'" + self.analysisPathName + "'" ])
				});
			}
			boolUpdatePath = false;
		}
	},
	getSuccessToast : function(pathName, message) {
		var self = this;
		var msg = message;
		sap.m.MessageToast.show(msg, {
			width : "20em"
		});
		if (self.isOpen && self.bIsPathGalleryWithDelete) {
			self.openPathGalleryWithDelete();
		} else if (self.isOpen) {
			self.openPathGallery();
		}
	},
	overWriteAnalysisPath : function() {
		var self = this;
		var pathNameVal = this.analysisPathName;
		var guidVal = this.guid;
		self.oSerializationMediator.savePath(guidVal, pathNameVal, function(oResponse, metaData, msgObj) {
			if (msgObj === undefined && (typeof oResponse === "object")) {
				self.oUiApi.getAnalysisPath().oSavedPathName.setTitle(pathNameVal);
				var message = self.oCoreApi.getTextNotHtmlEncoded("path-updated-successfully", [ "'" + pathNameVal + "'" ]);
				self.oUiApi.getAnalysisPath().getController().bIsDirtyState = false;
				if (self.saveDialog && self.saveDialog.isOpen()) {
					self.saveDialog.close();
				}
				self.getSuccessToast(pathNameVal, message);
				if (typeof self.saveCallback === "function") {
					self.saveCallback();
				}
			} else {
				oMessageObject = self.oCoreApi.createMessageObject({
					code : "6007",
					aParameters : [ pathNameVal ]
				});
				oMessageObject.setPrevious(msgObj);
				self.oCoreApi.putMessage(oMessageObject);
			}
		});
	},
	getDialogForNoPathAdded : function() {
		var self = this;
		var msg = self.oCoreApi.getTextNotHtmlEncoded("noStepInPath");
		var dialog = new sap.m.Dialog({
			title : self.oCoreApi.getTextNotHtmlEncoded("alert"),
			type : sap.m.DialogType.Message,
			contentWidth : jQuery(window).height() * 0.2 + "px", // height and width for the dialog relative to the window
			contentHeight : jQuery(window).height() * 0.2 + "px",
			content : new sap.m.Text({
				text : msg
			}).addStyleClass("textStyle"),
			beginButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("ok"),
				press : function() {
					dialog.close();
				}
			}),
			afterClose : function() {
				self.oUiApi.getLayoutView().setBusy(false);
				this.destroy();
			}
		});
		dialog.open();
	}
/*
*@memberOf sap.apf.ui.reuse.controller.toolbar
*@method onAfterRendering
*@description Keyboard shortcut keys for the toolbar buttons 
 */
/*onAfterRendering : function() {
	var self = this;
	var keys = [];
	var firstKeyPress;
	var secondKeyPress;
	jQuery(document).keydown(function(e) {
		if (e.keyCode === 18) {
			keys.alt = true;
			firstKeyPress = new Date();
			firstKeyPress = firstKeyPress.getTime();
		}
		if (e.keyCode === 78) {
			keys.n = true;
			secondKeyPress = new Date();
			secondKeyPress = secondKeyPress.getTime();
		}
		if (e.keyCode === 79) {
			keys.o = true;
			secondKeyPress = new Date();
			secondKeyPress = secondKeyPress.getTime();
		}
		if (e.keyCode === 83) {
			keys.s = true;
			secondKeyPress = new Date();
			secondKeyPress = secondKeyPress.getTime();
		}
		if (e.keyCode === 80) {
			keys.p = true;
			secondKeyPress = new Date();
			secondKeyPress = secondKeyPress.getTime();
		}
		if (keys.alt === true && keys.n === true) {
			if (((secondKeyPress - firstKeyPress < 1000) && (secondKeyPress - firstKeyPress > 0)) || ((secondKeyPress - firstKeyPress > -1000) && (secondKeyPress - firstKeyPress < 0))) {
				self.getNewAnalysisPathDialog(); //new analysis path
			}
		}
		if (keys.alt === true && keys.o === true) {
			if (((secondKeyPress - firstKeyPress < 1000) && (secondKeyPress - firstKeyPress > 0)) || ((secondKeyPress - firstKeyPress > -1000) && (secondKeyPress - firstKeyPress < 0))) {
				self.onOpenAnalysisPath(); //open analysis path
			}
		}
		if (keys.alt === true && keys.s === true) {
			if (((secondKeyPress - firstKeyPress < 1000) && (secondKeyPress - firstKeyPress > 0)) || ((secondKeyPress - firstKeyPress > -1000) && (secondKeyPress - firstKeyPress < 0))) {
				self.getSaveDialog(); // save analysis path
			}
		}
		if (keys.alt === true && keys.p === true) {
			if (((secondKeyPress - firstKeyPress < 1000) && (secondKeyPress - firstKeyPress > 0)) || ((secondKeyPress - firstKeyPress > -1000) && (secondKeyPress - firstKeyPress < 0))) {
				self.doPrint(); // print analysis path
			}
		}
	});
	jQuery(document).keyup(function(e) {
		if (e.keyCode === 18)
			keys.alt = false;
		if (e.keyCode === 78)
			keys.n = false;
		if (e.keyCode === 79)
			keys.o = false;
		if (e.keyCode === 83)
			keys.s = false;
		if (e.keyCode === 80)
			keys.p = false;
	});
} */
});

/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 *@class pathGallery
 *@name  pathGallery Fragment
 *@description Holds the saved paths and displays them in a dialog using js fragment
 *@memberOf sap.apf.ui.reuse.fragment
 * 
 */
sap.ui.jsfragment("sap.apf.ui.reuse.fragment.pathGallery", {
	createContent : function(oController) {
		this.oController = oController;
		this.contentWidth = jQuery(window).height()* 0.6+"px"; // height and width for the dialog relative to the window
		this.contentHeight = jQuery(window).height()* 0.6+"px";
		var self = this;
		this.oCoreApi = oController.oCoreApi;
		this.oUiApi = oController.oUiApi;
		this.pathGalleryHierarchicalDialog = new sap.ca.ui.HierarchicalSelectDialog({ // path gallery
			title : self.oCoreApi.getTextNotHtmlEncoded("select-analysis-path"),
			contentWidth : self.contentWidth,
			contentHeight : self.contentHeight,
			select : function(evt) {
				self.oUiApi.getLayoutView().setBusy(true);
				var eventBindingContext = evt.getParameters().selectedItem.oBindingContexts.json.sPath.split('/');
				var pathName = this.getModel("json").getData().GalleryElements[eventBindingContext[2]].AnalysisPathName;
				var analysisPath = this.getModel("json").getData().GalleryElements[eventBindingContext[2]].AnalysisPath;
				var activeStepindex = eventBindingContext[5];
				oController.openPath(pathName, analysisPath, activeStepindex);
				self.oUiApi.getLayoutView().setBusy(false);
			},
			cancel : function() {
				var oSelf = this;
				self.oUiApi.getLayoutView().setBusy(false);
				oSelf.close();
				oSelf.destroy();
			}
		});
		this.pathName = new sap.ca.ui.HierarchicalSelectDialogItem({ // Dialog Item to hold  list of paths
			title : self.oCoreApi.getTextNotHtmlEncoded("select-analysis-path"),
			entityName : "json>/GalleryElements",
			visible : true
		});
		this.pathTemplate = new sap.m.StandardListItem({
			title : '{json>AnalysisPathName}',
			description : '{json>description}',
			tooltip : '{json>AnalysisPathName}'
		});
		this.stepTitle = new sap.ca.ui.HierarchicalSelectDialogItem({ // Dialog Item to hold  list of steps
			entityName : "json>StructuredAnalysisPath/steps"
		});
		this.stepTemplate = new sap.m.StandardListItem({
			title : '{json>title}',
			icon : '{json>imgSrc}',
			tooltip : '{json>title}'
		});
		this.pathName.setListItemTemplate(this.pathTemplate); //binding list of paths,steps to the dialog item
		this.stepTitle.setListItemTemplate(this.stepTemplate);
		this.pathGalleryHierarchicalDialog.addItem(this.pathName); //Path Names list
		this.pathGalleryHierarchicalDialog.addItem(this.stepTitle);// Steps in a path*/
		return this.pathGalleryHierarchicalDialog;
	}
});

/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 *@class stepGallery
 *@name  stepGallery Fragment
 *@description Holds the available steps of configuration and displays them in a dialog using js fragment
 *@memberOf sap.apf.ui.reuse.view
 * 
 */
sap.ui.jsfragment("sap.apf.ui.reuse.fragment.stepGallery", {
	createContent : function(oController) {
		this.oController = oController;
		this.contentWidth = jQuery(window).height() * 0.6 + "px"; // height and width for the dialog relative to the window
		this.contentHeight = jQuery(window).height() * 0.6 + "px";
		var self = this;
		this.oCoreApi = oController.oCoreApi;
		this.oUiApi = oController.oUiApi;
		this.hierarchicalDialog = new sap.ca.ui.HierarchicalSelectDialog({ // step gallery
			title : self.oCoreApi.getTextNotHtmlEncoded("stepGallery"),
			contentWidth : self.contentWidth,
			contentHeight : self.contentHeight,
			select : function(evt) {
				self.oUiApi.getLayoutView().setBusy(true);
				var eventBindingContext = evt.getParameters().selectedItem.oBindingContexts.json.sPath.split('/');
				var categoryIndex = eventBindingContext[2];
				var stepIndex = eventBindingContext[4];
				var representationIndex = eventBindingContext[6];
				var stepDetails = oController.getStepDetails(categoryIndex, stepIndex); //TODO Is there any alternate way of getting step details from list binding???
				oController.onStepPress(stepDetails.id, stepDetails.representationtypes[representationIndex].representationId);
			},
			cancel : function() {
				var oSelf = this;
				oSelf.close();
				oSelf.destroy();
			}
		});
		this.categoryTitle = new sap.ca.ui.HierarchicalSelectDialogItem({ // Dialog Item to hold  list of categories
			title : self.oCoreApi.getTextNotHtmlEncoded("category"),
			entityName : "json>/GalleryElements",
			visible : true
		});
		this.categoryTemplate = new sap.m.StandardListItem({
			title : '{json>categoryDetails/title}',
			tooltip : '{json>categoryDetails/title}'
		});
		this.stepTitle = new sap.ca.ui.HierarchicalSelectDialogItem({ // Dialog Item to hold  list of steps
			//title: self.oCoreApi.getTextNotHtmlEncoded("step"),
			entityName : "json>stepTemplates"
		});
		this.stepTemplate = new sap.m.StandardListItem({
			title : '{json>maintitle}',
			tooltip : '{json>maintitle}'
		});
		this.representationTitle = new sap.ca.ui.HierarchicalSelectDialogItem({ // Dialog Item to hold  list of representations
			// title: self.oCoreApi.getTextNotHtmlEncoded("representation"),
			entityName : "json>representationtypes"
		});
		this.representationTemplate = new sap.m.StandardListItem({
			icon : '{json>picture}'
		});
		this.representationTemplate.bindProperty("title", "json>label", function(value) {
			if (value === null) {
				return null;
			}
			return self.oCoreApi.getTextNotHtmlEncoded(value);
		});
		this.representationTemplate.bindProperty("tooltip", "json>label", function(value) {
			if (value === null) {
				return null;
			}
			return self.oCoreApi.getTextNotHtmlEncoded(value);
		});
		this.categoryTitle.setListItemTemplate(this.categoryTemplate); //binding list of categories,steps and representations to the dialog item
		this.stepTitle.setListItemTemplate(this.stepTemplate);
		this.representationTitle.setListItemTemplate(this.representationTemplate);
		this.hierarchicalDialog.addItem(this.categoryTitle); //Category list
		this.hierarchicalDialog.addItem(this.stepTitle);// Steps in a category
		this.hierarchicalDialog.addItem(this.representationTitle);//Representations in a step
		return this.hierarchicalDialog;
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 *@class analysisPath 
 *@name analysisPath
 *@memberOf sap.apf.ui.reuse.view 
 *@description Layout holds title of Analysis Path, saved path name, Toolbar and Carousel
 *@returns  {AnalysisPath}  
 */
sap.ui.jsview("sap.apf.ui.reuse.view.analysisPath", {
	/**
	 *@this {sap.apf.ui.reuse.view.analysisPath}
	 *@description anlaysisPath view
	 */
	/**
	 *@method getCarousel
	 *@memberOf sap.apf.ui.reuse.view.analysisPath
	 *@see sap.apf.ui.reuse.view.carousel
	 */
	getCarousel : function() {
		return this.oCarousel;
	},
	/**
	 *@method getToolbar
	 *@see sap.apf.ui.reuse.view.analysisPath
	 *@memberOf sap.apf.ui.reuse.view.analysisPath
	 */
	getToolbar : function() {
		return this.oActionListItem;
	},
	/**
	 *@method getPathGallery
	 *@memberOf sap.apf.ui.reuse.view.analysisPath
	 */
	getPathGallery : function() {
		return this.pathGallery;
	},
	/**
	 *@method getPathGalleryWithDeleteMode
	 *@memberOf sap.apf.ui.reuse.view.analysisPath
	 */
	getPathGalleryWithDeleteMode : function() {
		return this.deleteAnalysisPath;
	},
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.analysisPath";
	},
	createContent : function(oController) {
		var self = this;
		this.oController = oController;
		this.oActionListPopover = new sap.m.Popover({
			showHeader : false,
			placement : sap.m.PlacementType.Bottom,
			contentWidth : "150px"
		});
		var oViewData = this.getViewData();
		self.oCoreApi = oViewData.oCoreApi;
		self.oUiApi = oViewData.uiApi;
		this.oActionListItem = sap.ui.view({
			viewName : "sap.apf.ui.reuse.view.toolbar",
			type : sap.ui.core.mvc.ViewType.JS,
			viewData : oViewData
		}).addStyleClass("toolbarView");
		this.oActionListPopover.addContent(this.oActionListItem);
		this.oSavedPathName = new sap.m.ObjectHeader({
					title : this.oCoreApi.getTextNotHtmlEncoded("unsaved"),
					showTitleSelector : true,
					condensed : true,
					titleSelectorPress : function(oEvent){
						self.oActionListPopover.openBy(oEvent.getParameter("domRef"));
					}
		}).addStyleClass("sapApfObjectHeader");
		this.oCarousel = new sap.ui.view({
			type : sap.ui.core.mvc.ViewType.JS,
			viewName : "sap.apf.ui.reuse.view.carousel",
			viewData : {
				analysisPath : self,
				oInject : oViewData
			}
		});
		this.pathGallery = new sap.ui.view({
			type : sap.ui.core.mvc.ViewType.JS,
			viewName : "sap.apf.ui.reuse.view.pathGallery",
			viewData : {
				oInject : oViewData
			}
		});
		this.deleteAnalysisPath = new sap.ui.view({
			type : sap.ui.core.mvc.ViewType.JS,
			viewName : "sap.apf.ui.reuse.view.deleteAnalysisPath",
			viewData : {
				oInject : oViewData
			}
		});
		this.oAnalysisPath = new sap.ui.layout.VerticalLayout({
			content : [ self.oContentTitle , self.oSavedPathName , self.oCarousel ],
			width : '100%'
		});
		return this.oAnalysisPath;
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 *@class carousel
 *@name carousel
 *@memberOf sap.apf.ui.reuse.view
 *@description Layout holds Analysis Steps
 *@returns {Carousel}  
 */
sap.ui.jsview("sap.apf.ui.reuse.view.carousel", {
	/**
	 *@memberOf sap.apf.ui.reuse.view.carousel
	 *@method getStepGallery
	 *@see sap.apf.ui.reuse.view.stepGallery
	 *@return {sap.apf.ui.reuse.view.stepGallery}
	 */
	getStepGallery : function() {
		var stepGallery = this.oController.stepGalleryView;
		return stepGallery;
	},
	getChartToolbar : function() {
		return this.oController.oStepToolbar;
	},
	carouselContent : function (oController) {
		jQuery.sap.require('sap.apf.ui.controls.draggableCarousel.DraggableCarousel');
		var self = this;
		this.oController = oController;
		this.stepViews = [];
		var oViewData = this.getViewData().oInject;
		self.oCoreApi = oViewData.oCoreApi;
		self.oUiApi = oViewData.uiApi;
		var separator = new sap.ui.core.Icon({
			src : "sap-icon://arrow-bottom"
		}).addStyleClass('downArrow');
		var separatorEle = document.createElement('div');
		separatorEle.innerHTML = sap.ui.getCore().getRenderManager().getHTML(separator);
		var removeIcon = new sap.ui.core.Icon({
			src : "sap-icon://sys-cancel-2",
			size : "20px"
		}).addStyleClass('removeIcon');
		var removeIconEle = document.createElement('div');
		removeIconEle.innerHTML = sap.ui.getCore().getRenderManager().getHTML(removeIcon);
		var height = jQuery(window).height() - sap.apf.ui.utils.CONSTANTS.carousel.SCROLLCONTAINER + "px";
		var width = "320px"; // S2 View Content Width.
		window.onresize = function() {
			var height = jQuery(window).height() - sap.apf.ui.utils.CONSTANTS.carousel.SCROLLCONTAINER + "px";
			jQuery('.DnD-container').css({"height" : jQuery(window).height() - sap.apf.ui.utils.CONSTANTS.carousel.DNDBOX + "px"});
			jQuery(".scrollContainerEle").css("height", height);
		};
		this.dndBox = new sap.apf.ui.controls.draggableCarousel.DraggableCarousel({
			containerHeight : jQuery(window).height() - sap.apf.ui.utils.CONSTANTS.carousel.DNDBOX + "px",
			containerWidth : width,
			blockHeight : sap.apf.ui.utils.CONSTANTS.thumbnailDimensions.STEP_HEIGHT,
			blockWidth : sap.apf.ui.utils.CONSTANTS.thumbnailDimensions.STEP_WIDTH,
			blockMargin : sap.apf.ui.utils.CONSTANTS.thumbnailDimensions.STEP_MARGIN,
			separatorHeight : sap.apf.ui.utils.CONSTANTS.thumbnailDimensions.SEPARATOR_HEIGHT,
			removeIconHeight : sap.apf.ui.utils.CONSTANTS.thumbnailDimensions.REMOVE_ICON_HEIGHT,
			separator : separatorEle,
			removeIcon : removeIconEle,
			onBeforeDrag : function(dragIndex) {
			},
			onAfterDrop : oController.moveStep.bind(oController),
			onAfterRemove : oController.removeStep.bind(oController),
			onAfterSelect : function (index) {
				//Based on drag-state setActiveStep or Add Analysis Step
				if (jQuery(this).attr("drag-state") === "true") {
					self.getStepView(index).oController.setActiveStep(index);
				} else {
					oController.showStepGallery();
				}
			}
		});
		window.dndBox = this.dndBox;
		this.oHtml = new sap.ui.core.HTML({
			content : "<div id = 'dnd-Holder'></div>",
			afterRendering : function() {
				self.dndBox.placeAt('dnd-Holder');
				jQuery(self.dndBox.eleRefs.blocks[0]).height("80px");
			}
		});
		var sampleDiv;
		this.addButton = new sap.m.Button({
			text : self.oCoreApi.getTextNotHtmlEncoded("addNextStep"),
			width : "100%",
			icon : "sap-icon://add",
			press : function(evt) {
				oController.showStepGallery();
			}
		});
		sampleDiv = document.createElement('div');
		sampleDiv.setAttribute('class', 'addStepBtnHolder');
		jQuery(sampleDiv).html(jQuery(sap.ui.getCore().getRenderManager().getHTML(this.addButton)).attr("tabindex", -1));
		
		dndBox.addBlock({
			blockElement : sampleDiv,
			dragState : false,
			dropState : false,
			removable : false
		});
		this.up = new sap.m.Button({
			icon : "sap-icon://arrow-top",
			press : function() {
				var activeStepIndex = self.oCoreApi.getSteps().indexOf(self.oCoreApi.getActiveStep());
				if (activeStepIndex !== 0) {
					var newPos = activeStepIndex - 1;
					var success = self.oUiApi.getAnalysisPath().getCarousel().dndBox.swapBlocks(activeStepIndex, newPos);
					if (success) {
						self.oUiApi.getAnalysisPath().getCarousel().getController().moveStep(activeStepIndex, newPos);
					}
				}
			}
		});
		this.down = new sap.m.Button({
			icon : "sap-icon://arrow-bottom",
			press : function() {
				var activeStepIndex = self.oCoreApi.getSteps().indexOf(self.oCoreApi.getActiveStep());
				if (activeStepIndex !== (self.oCoreApi.getSteps().length - 1)) {
					var newPos = activeStepIndex + 1;
					var success = self.oUiApi.getAnalysisPath().getCarousel().dndBox.swapBlocks(activeStepIndex, newPos);
					if (success) {
						self.oUiApi.getAnalysisPath().getCarousel().getController().moveStep(activeStepIndex, newPos);
					}
				}
			}
		});
		this.oCarousel = new sap.m.ScrollContainer({
			content : this.oHtml,
			height : height,
			horizontal : false,
			vertical : true
		}).addStyleClass("scrollContainerEle");
		return this.oCarousel;
	},
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.carousel";
	},
	createContent : function(oController) {
		var carouselContent = this.carouselContent(oController);
		return carouselContent;
	},
	getStepView : function(stepIndex) {
		return this.stepViews[stepIndex];
	}
});

/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
sap.ui.jsview("sap.apf.ui.reuse.view.deleteAnalysisPath", {
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.deleteAnalysisPath";
	},
	createContent : function(oController) {
		this.oController = oController;
		this.viewData = this.getViewData();
		var self = this;
		this.oCoreApi = this.getViewData().oInject.oCoreApi;
		this.oUiApi = this.getViewData().oInject.uiApi;
		this.width = jQuery(window).height()* 0.55+"px"; // height and width for the list relative to the window
        this.height = jQuery(window).height()* 0.55+"px";
		var list = new sap.m.List({
			width : self.width,
			height : self.height,
			mode: sap.m.ListMode.Delete,
			items: {
				path: "/GalleryElements",
				template: new sap.m.StandardListItem({
					title:"{AnalysisPathName}",
					description:"{description}",
					tooltip : "{AnalysisPathName}" 
				})
			},
			"delete": function (evt) {
				var item = evt.getParameter("listItem");
				var sPathName = item.getProperty('title');
				var guid = self.oController.getGuidForPath(sPathName,self.viewData.jsonData.GalleryElements);
				var oListInfo ={};
				oListInfo.item = item;
				oListInfo.list = list;
				oListInfo.guid =guid;
				oListInfo.sPathName= sPathName;
				self.oUiApi.getAnalysisPath().getToolbar().getController().getConfirmDelDialog(oListInfo);
			}

		});
		var pathGalleryModel = new sap.ui.model.json.JSONModel();
		pathGalleryModel.setData(this.viewData.jsonData);
		list.setModel(pathGalleryModel);
		return list;
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 * @class new facetFilter
 * @name  newFacetFilter
 * @description Holds the available filters
 * @memberOf sap.apf.ui.reuse.view
 * 
 */
sap.ui.jsview("sap.apf.ui.reuse.view.facetFilter", {
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.facetFilter";
	},
	createContent : function(oController) {
		var oSelf = this;
		this.aFacetFilterListControls = [];
		this.oCoreApi = this.getViewData().oCoreApi;
		this.oUiApi = this.getViewData().oUiApi;
		this.oPathContextHandler = this.getViewData().oPathContextHandler;
		this.aFacetFilterListData = this.getViewData().aFacetFilterListData;
		this.aFacetFilterListData.forEach(function (oFacetFilterListData) {
			var oFacetFilterList = new sap.m.FacetFilterList({
				title: oSelf.oCoreApi.getTextNotHtmlEncoded(oFacetFilterListData.label),
				multiSelect: oFacetFilterListData.multiSelection === "true",
				key: oFacetFilterListData.property,
				growing: false,
				listClose: oController.onListClose.bind(oController)
			});
			oSelf.aFacetFilterListControls.push(oFacetFilterList);
		});
		
		this.onContextChanged = oController.onContextChanged.bind(oController);
		
		this.oFacetFilter = new sap.m.FacetFilter({
			type : "Simple",
			showReset : true,
			lists : this.aFacetFilterListControls,
			reset: oController.onResetPress.bind(oController)
		});
		return this.oFacetFilter;
	}
});

/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 * @class messageHandler
 * @memberOf sap.apf.ui.reuse.view
 * @name messageHandler
 */
sap.ui.jsview("sap.apf.ui.reuse.view.messageHandler", {
	/**
	 * @this {sap.apf.ui.reuse.view.messageHandler}
	 * @description messageHandler view
	 */
	/**
	 * @memberOf sap.apf.ui.reuse.view.messageHandler
	 * @method initializeHandler
	 * @param oMessageObject
	 * @description UI handle for error messages to be shown on notification bar
	 */
	initializeHandler : function(oMessageObject) {
		this.getController().showMessage(oMessageObject);
	},
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.messageHandler";
	},
	createContent : function(oController) {
		jQuery.sap.require("sap.m.MessageToast");
		jQuery.sap.require("sap.ca.ui.message.message");
		
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
sap.ui.jsview("sap.apf.ui.reuse.view.pathGallery", {
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.pathGallery";
	},
	createContent : function(oController) {
			this.viewData = this.getViewData();
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 *@class step
 *@name step
 *@memberOf sap.apf.ui.reuse.view
 *@description Layout to hold stepThumbnail
 */
sap.ui.jsview("sap.apf.ui.reuse.view.step", {
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.step";
	},
	stepContent : function() {
		this.oCoreApi = this.getViewData().oCoreApi;
		this.oUiApi = this.getViewData().uiApi;
		this.oTopLayout = new sap.m.FlexBox({
			items : [ new sap.m.Text({
				text : '{/thumbnail/leftUpper}',
				tooltip : '{/thumbnail/leftUpper}',
				wrapping : true,
				maxLines : 2,
				textAlign : sap.ui.core.TextAlign.Left
			}).addStyleClass("thumbanilText"), new sap.m.Text({
				text : '{/thumbnail/rightUpper}',
				tooltip : '{/thumbnail/rightUpper}',
				wrapping : true,
				maxLines : 2,
				textAlign : sap.ui.core.TextAlign.Right
			}).addStyleClass("thumbanilText") ],
			alignItems : sap.m.FlexAlignItems.Start,
			justifyContent : sap.m.FlexJustifyContent.SpaceBetween
		}).addStyleClass("topLayout");
		this.oThumbnailChartLayout = new sap.m.VBox({
			height : "80px"
		}).addStyleClass('ChartArea');
		this.oThumbnailChartLayout.setBusy(true);
		this.oBottomLayout = new sap.m.FlexBox({
			items : [ new sap.m.Text({
				text : '{/thumbnail/leftLower}',
				tooltip : '{/thumbnail/leftLower}',
				wrapping : true,
				maxLines : 2,
				textAlign : sap.ui.core.TextAlign.Left
			}).addStyleClass("thumbanilText"), new sap.m.Text({
				text : '{/thumbnail/rightLower}',
				tooltip : '{/thumbnail/rightLower}',
				wrapping : true,
				maxLines : 2,
				textAlign : sap.ui.core.TextAlign.Right
			}).addStyleClass("thumbanilText") ],
			alignItems : sap.m.FlexAlignItems.Start,
			justifyContent : sap.m.FlexJustifyContent.SpaceBetween
		}).addStyleClass("bottomLayout");
		this.oThumbnailVLayout = new sap.m.VBox({
			items : [ this.oTopLayout, this.oThumbnailChartLayout, this.oBottomLayout ],
			height : "130px"
		}).addStyleClass('stepThumbnail');
		this.oStepTitle = new sap.m.Text({
			text : '{/title}',
			textAlign : sap.ui.core.TextAlign.Center,
			wrapping : true,
			width : "200px"
		});
		this.oVChartLayout = new sap.m.VBox({
			items : [ this.oThumbnailVLayout, this.oStepTitle ],
			width : "200px"
		}).addStyleClass("sapApfStepLayout");
		var htmlWrapper = new sap.m.VBox({
			items : []
		}).addStyleClass("block-overlay-container");
		var self = this;
		htmlWrapper.addEventDelegate({
			onAfterRendering : function() {
				//Show Master Button to be displayed on detail footer bottom for mobile device
				var showMasterButton = new sap.m.Button({
					text : self.oCoreApi.getTextNotHtmlEncoded("showAnalyticalPath"),
					press : function() {
						self.oUiApi.getLayoutView().byId("detailFooter").removeAllContentLeft();
						self.oUiApi.getLayoutView().byId("applicationView").backToTopMaster();
					},
					lite : true,
					type : "Transparent"
				});
				//Events for hover and touch on step
				jQuery(htmlWrapper.getDomRef()).on("mouseenter", function() {
					jQuery(this).addClass("sapThemeBarBG");
					jQuery(this).css({
						"opacity" : "0.3"
					});
				});
				//On touch start show overlay with opacity 0.3
				//Mobile Device Bug Fix - on touch start prevent the default zoom 
				//which appears on double tap or hold on step
				jQuery(htmlWrapper.getDomRef()).on("touchstart", function() {
					//On Double Tap disable Zoom text focus and application 
					var t2 = e.timeStamp, t1 = $(this).data('lastTouch') || t2, dt = t2 - t1, fingers = e.originalEvent.touches.length;
					$(this).data('lastTouch', t2);
					if (!dt || dt > 500 || fingers > 1)
						return; // not double-tap
					e.preventDefault(); // double tap - prevent the zoom
					// also synthesize click events we just swallowed up
					$(this).trigger('click').trigger('click');
					jQuery(this).addClass("sapThemeBarBG");
					jQuery(this).css({
						"opacity" : "0"
					});
				});
				jQuery(htmlWrapper.getDomRef()).on("mouseleave", function() {
					jQuery(this).removeClass("sapThemeBarBG");
					jQuery(this).css({
						"opacity" : "1"
					});
				});
				jQuery(htmlWrapper.getDomRef()).on("touchend touchmove", function() {
					jQuery(this).removeClass("sapThemeBarBG");
					jQuery(this).css({
						"opacity" : "0"
					});
				});
				//Device Phone: Hide/Show the Master/Detail Page 
				//On click of step go to the detail page
				//Add the text on bottom of footer and tap of text
				//go back to the master view 
				if (sap.ui.Device.system.phone) {
					jQuery(htmlWrapper.getDomRef()).on("tap", function() {
						self.oUiApi.getLayoutView().getController().hideMaster();
						self.oUiApi.getLayoutView().byId("detailFooter").removeContentLeft(showMasterButton);
						self.oUiApi.getLayoutView().getController().addDetailFooterContentLeft(showMasterButton);
						self.oUiApi.getStepContainer().getController().drawStepContent();
					});
				}
			}
		});
		this.oVChartTiltleLayout = new sap.m.VBox({
			items : [ htmlWrapper, this.oVChartLayout ],
			width : "200px",
		}).addStyleClass("sapUiTableCCnt");
		return this.oVChartTiltleLayout;
	},
	createContent : function(oController) {
		var stepContent = this.stepContent();
		return stepContent;
	},
	toggleActiveStep : function() {
		var allSteps = this.oUiApi.getAnalysisPath().getCarousel().stepViews;
		for( var i in allSteps) {
			if (allSteps[i].oThumbnailVLayout.hasStyleClass('sapThemeBaseBG-asBackgroundColor')) {
				allSteps[i].oThumbnailVLayout.removeStyleClass('sapThemeBaseBG-asBackgroundColor');
				allSteps[i].oStepTitle.removeStyleClass('activeStepTitle');
				break;
			}
		}
		this.oThumbnailVLayout.addStyleClass('sapThemeBaseBG-asBackgroundColor');
		this.oStepTitle.addStyleClass('activeStepTitle');
	},
});

/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 * @class stepContainer
 * @name stepContainer
 * @memberOf sap.apf.ui.reuse.view
 * @description Holds the step in main area. Includes the step toolbar view and step representation view
 * @returns {stepContainerLayout}
 */
sap.ui.jsview("sap.apf.ui.reuse.view.stepContainer", {
	/**
	 * @this {sap.apf.ui.reuse.view.stepContainer}
	 *
	 */
	/**
	 * @memberOf sap.apf.ui.reuse.view.stepContainer
	 * @method getStepToolbar
	 * @see sap.apf.ui.reuse.view.stepToolbar
	 * @description Getter for step toolbar container 
	 * @returns stepToolbar view 
	 */
	getStepToolbar : function() {
		return this.oStepToolbar;
	},
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.stepContainer";
	},

	createContent : function(oController) {
		var oViewData = this.getViewData();
		this.oStepToolbar = sap.ui.view({viewName:"sap.apf.ui.reuse.view.stepToolbar", type:sap.ui.core.mvc.ViewType.JS,viewData :oViewData});
		this.stepLayout = new sap.ui.layout.VerticalLayout({
			content : [ this.oStepToolbar],
			width : "100%"
		});
		this.vLayout = new sap.ui.layout.VerticalLayout({
			content : this.stepLayout,
			width : "100%"
		});
		this.vLayout.setBusy(true);
		return this.vLayout; //holds chart and toolbar
	},

});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 * @class stepGallery
 * @name  stepGallery
 * @description Holds the available steps of configuration and displays them on overlay container
 * @memberOf sap.apf.ui.reuse.view
 * 
 */
sap.ui.jsview("sap.apf.ui.reuse.view.stepGallery", {
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.stepGallery";
	},
	createContent : function(oController) {
		this.oController = oController;
}
});

/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 * @class  stepToolbar
 * @name  stepToolbar
 * @description toolbar for a step shown in main area
 * @memberOf sap.apf.ui.reuse.view
 */
sap.ui.jsview("sap.apf.ui.reuse.view.stepToolbar", {
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.stepToolbar";
	},
	createContent : function(oController) {
		/*this.selectionCountLayout =  new sap.ui.commons.layout.HorizontalLayout(); //{content: [this.selectedNumber,this.deleteButton]}
		this.toolbarIconsLayout = new sap.ui.commons.layout.HorizontalLayout().addStyleClass('toolbarIconsLayout');
		this.toolbar =  new sap.ui.commons.Toolbar().setDesign(sap.ui.commons.ToolbarDesign.Standard).setVisible(false).addStyleClass('toolbar');
		this.toolbar.addItem(this.selectionCountLayout);
		this.toolbar.addItem(this.toolbarIconsLayout);
		this.toolbarLayout = new sap.ui.commons.layout.HorizontalLayout({content: this.toolbar}).addStyleClass("toolbarLayout");*/
		this.chartToolbar = new sap.ca.ui.charts.ChartToolBar({
			showLegend: true,
			showFullScreen: true
		});
		return this.chartToolbar;
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 * @class toolbar
 * @memberOf sap.apf.ui.reuse.view
 * @name toolbar
 * @description layout holds the Toolbar buttons: new , save, open, print
 */
sap.ui.jsview("sap.apf.ui.reuse.view.toolbar", {
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.toolbar";
	},
	createContent : function(oController) {
		// when metadata is not available, default values are set
		this.maxNumberOfSteps = 32;
		this.maxNumberOfPaths = 255;
		var self = this;
		var oViewData = this.getViewData();
		self.oCoreApi = oViewData.oCoreApi;
		self.oUiApi = oViewData.uiApi;
		var oTemplateNew = new sap.m.StandardListItem({
			icon : 'sap-icon://add-product',
			type : sap.m.ListType.Active,
			title : self.oCoreApi.getTextNotHtmlEncoded("new"),
			press : function() {
				self.getParent().close();
				self.oUiApi.getLayoutView().setBusy(true);
				oController.getNewAnalysisPathDialog();
				self.oUiApi.getLayoutView().setBusy(false);
			},
		});
		var oTemplateOpen = new sap.m.StandardListItem({
			icon : "sap-icon://open-folder",
			type : sap.m.ListType.Active,
			title : self.oCoreApi.getTextNotHtmlEncoded("open"),
			press : function() {
				self.oUiApi.getLayoutView().setBusy(true);
				self.getParent().close();
				oController.onOpenPathGallery();
			},
		});
		var oTemplateSave = new sap.m.StandardListItem({
			icon : "sap-icon://save",
			type : sap.m.ListType.Active,
			title : self.oCoreApi.getTextNotHtmlEncoded("save"),
			press : function() {
				self.getParent().close();
				if (self.oCoreApi.getSteps().length !== 0) {
					self.oUiApi.getLayoutView().setBusy(true);
					self.oCoreApi.readPaths(function(respObj, metaData, msgObj) {
						var bSaveAs = false;
						var paths = respObj.paths;
						if (metaData !== undefined) {
							self.maxNumberOfSteps = metaData.getEntityTypeMetadata().maximumNumberOfSteps;
							self.maxNumberOfPaths = metaData.getEntityTypeMetadata().maxOccurs;
						}
						if (msgObj === undefined && (typeof respObj === "object")) {
							oController.getSaveDialog(bSaveAs, function() {
							}, paths);
						} else {
							oMessageObject = self.oCoreApi.createMessageObject({
								code : "6005",
								aParameters : []
							});
							oMessageObject.setPrevious(msgObj);
							self.oCoreApi.putMessage(oMessageObject);
						}
						self.oUiApi.getLayoutView().setBusy(false);
					});
				} else
					oController.getDialogForNoPathAdded();
			},
		});
		var oTemplateSaveAs = new sap.m.StandardListItem({
			icon : "sap-icon://save",
			type : sap.m.ListType.Active,
			title : self.oCoreApi.getTextNotHtmlEncoded("saveAs"),
			press : function() {
				self.getParent().close();
				if (self.oCoreApi.getSteps().length !== 0) {
					self.oUiApi.getLayoutView().setBusy(true);
					self.oCoreApi.readPaths(function(respObj, metaData, msgObj) {
						var bSaveAs = true;
						var paths = respObj.paths;
						if (metaData !== undefined) {
							self.maxNumberOfSteps = metaData.getEntityTypeMetadata().maximumNumberOfSteps;
							self.maxNumberOfPaths = metaData.getEntityTypeMetadata().maxOccurs;
						}
						if (msgObj === undefined && (typeof respObj === "object")) {
							oController.getSaveDialog(bSaveAs, function() {
							}, paths);
						} else {
							oMessageObject = self.oCoreApi.createMessageObject({
								code : "6005",
								aParameters : []
							});
							oMessageObject.setPrevious(msgObj);
							self.oCoreApi.putMessage(oMessageObject);
						}
						self.oUiApi.getLayoutView().setBusy(false);
					});
				} else
					oController.getDialogForNoPathAdded();
			},
		});
		var oTemplateDelete = new sap.m.StandardListItem({
			icon : "sap-icon://delete",
			type : sap.m.ListType.Active,
			title : self.oCoreApi.getTextNotHtmlEncoded("delete"),
			press : function() {
				self.getParent().close();
				self.oUiApi.getLayoutView().setBusy(true);
				oController.onOpenPathGalleryWithDelete();
			},
		});
		var oTemplatePrint = new sap.m.StandardListItem({
			icon : "sap-icon://print",
			type : sap.m.ListType.Active,
			title : self.oCoreApi.getTextNotHtmlEncoded("print"),
			press : function() {
				self.getParent().close();
				oController.doPrint();
			},
		});
		this.oActionListItem = new sap.m.List({
			items : [ oTemplateNew, oTemplateOpen, oTemplateSave, oTemplateSaveAs, oTemplateDelete, oTemplatePrint ]
		});
		return this.oActionListItem;
	}
});
jQuery.sap.declare('sap.apf.library-all');
jQuery.sap.declare('sap.apf.ui.reuse.controller.analysisPath.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.carousel.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.deleteAnalysisPath.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.layout.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.messageHandler.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.pathGallery.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.step.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.stepContainer.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.stepGallery.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.stepToolbar.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.toolbar.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.fragment.pathGallery.fragment'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.fragment.stepGallery.fragment'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.analysisPath.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.carousel.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.deleteAnalysisPath.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.facetFilter.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.messageHandler.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.pathGallery.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.step.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.stepContainer.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.stepGallery.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.stepToolbar.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.toolbar.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.apf.core.annotation') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 * @fileOverview This file contains an annotation parser.
 */

jQuery.sap.declare("sap.apf.core.annotation");
(function () {
    "use strict";
    /*global sap, jQuery, window, XMLHttpRequest, ActiveXObject, XPathResult */

    sap.apf.core.annotation = {};
    sap.apf.core.annotation.initialized = [];

    sap.apf.core.annotation.parse = function (oMetadata, sAnnotationUri) {
        var xPath = {}, getHttpResponseXML, getAllPropertiesMetadata, setEdmTypes, getEdmType, getPropertyValueAttributes,
        replaceWithAlias, getSimpleNodeValue, getPropertyValue, getPropertyValues, getApplyFunctions, isNavProperty,
        sAlias, mappingList = {}, xmlDoc, schemaNodes, oSchema = {}, i, schemaNode, oAlias = {},
        oAnnotations = {}, sAnnoNameSpace = "", refNodes, refNode, aliasNodes, aliasNode, annoNodes, annoNode,
        termNodes, oTerms, nodeIndex, termNode, sTermType, oMetadataProperties, annotationNodes, j, annotationNode,
        annotationTarget, annotationNamespace, annotation, propertyAnnotation, propertyAnnotationNodes,
        propertyAnnotationNode, nodeIndexValue, sTermValue, nodeIndexAnnotation, targetAnnotation, annotationQualifier,
        annotationTerm, valueAnnotation, expandNodes, expandNode, path, pathValues, expandNodesApplFunc;
    if (sap.ui.Device.browser.internet_explorer) {
        xPath = {
            setNameSpace: function (outNode) {
                outNode.setProperty("SelectionNamespaces", 'xmlns:edmx="http://docs.oasis-open.org/odata/ns/edmx" xmlns:d="http://docs.oasis-open.org/odata/ns/edm"');
                outNode.setProperty("SelectionLanguage", "XPath");
                return outNode;
            },
            selectNodes: function (outNode, xPath, inNode) {
                return inNode.selectNodes(xPath);
            },
            nextNode: function (node) {
                return node.nextNode();
            },
            getNodeText: function (node) {
                return node.text;
            }
        };
    } else {//Chrome, Firefox, Opera, etc.
        xPath = {
            setNameSpace: function (outNode) { return outNode; },
            nsResolver: function (prefix) {
                var ns = {"edmx": "http://docs.oasis-open.org/odata/ns/edmx", "d": "http://docs.oasis-open.org/odata/ns/edm"};
                return ns[prefix] || null;
            },
            selectNodes: function (outNode, sPath, inNode) {
                var xmlNodes = outNode.evaluate(sPath, inNode, this.nsResolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
                xmlNodes.length = xmlNodes.snapshotLength;
                return xmlNodes;
            },
            nextNode: function (node, item) { return node.snapshotItem(item); },
            getNodeText: function (node) { return node.textContent; }
        };
    }
    getHttpResponseXML = function (uri) {
        var oXHRResponse;
        var oError;
        
        if (sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version >= 10) {
            try {
            	
                //oXHRResponse = jQuery.sap.sjax({url: uri, xhrFields: {responseType: 'msxml-document'}});
              
            	var oAjaxOptions = {
            			url : uri,
            			async : false
            	};
        		var fnHandleFail = function (oJQXHR, sStatusText) {
        			oXHRResponse = { success : false, data : {}};

        			throw new Error( sStatusText);
        		};

        		var fnHandleSuccess = function(sData, sTextStatus, oJQXHR) {
        			oXHRResponse = { success : true, data : {}};
        			var sXMLContent = oJQXHR.responseText;
        			oXHRResponse.data = new ActiveXObject("Microsoft.XMLDOM"); // ??? "Msxml2.DOMDocument.6.0"
        			oXHRResponse.data.loadXML(sXMLContent);
        		};

        		jQuery.ajax(oAjaxOptions).done(fnHandleSuccess).fail(fnHandleFail);
        		
            } catch (e) { }
        } else {
            oXHRResponse = jQuery.sap.sjax({url: uri});
        }
        if (oXHRResponse.success) {
            return oXHRResponse.data;
        }
    };
    getAllPropertiesMetadata = function (oMetadata) {
        var oMetadataSchema = {}, oPropertyTypes = {}, oPropertyExtensions = {}, bPropertyExtensions = false,
            i, sNamespace, aEntityTypes, aComplexTypes, oEntityType = {}, j, oProperties = {}, oExtensions = {},
            bExtensions = false, oProperty, l, k, oComplexTypeProp, sPropertyName, sType, oPropExtension, p,
            oReturn;
        for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
            oMetadataSchema = oMetadata.dataServices.schema[i];
            if (oMetadataSchema.entityType) {
                sNamespace = oMetadataSchema.namespace;
                aEntityTypes = oMetadataSchema.entityType;
                aComplexTypes = oMetadataSchema.complexType;
                for (j in aEntityTypes) {
                    if (aEntityTypes.hasOwnProperty(j)) {
                        oEntityType = aEntityTypes[j];
                        oExtensions = {};
                        if (oEntityType.hasStream && oEntityType.hasStream === "true") {
                            continue;
                        }
                        for (k in oEntityType.property) {
                            oProperty = oEntityType.property[k];
                            if (oProperty.type.substring(0, sNamespace.length) === sNamespace) {
                                for (l in aComplexTypes) {
                                    if (aComplexTypes[l].name === oProperty.type.substring(sNamespace.length + 1)) {
                                        for (k in aComplexTypes[l].property) {
                                            oComplexTypeProp = aComplexTypes[l].property[k];
                                            oProperties[aComplexTypes[l].name + "/" + oComplexTypeProp.name] = oComplexTypeProp.type;
                                        }
                                    }
                                }
                            } else {
                                sPropertyName = oProperty.name;
                                sType = oProperty.type;
                                for (p in oProperty.extensions) {
                                    oPropExtension = oProperty.extensions[p];
                                    if ((oPropExtension.name === "display-format") && (oPropExtension.value === "Date")) {
                                        sType = "Edm.Date";
                                    } else {
                                        bExtensions = true;
                                        if (!oExtensions[sPropertyName]) {
                                            oExtensions[sPropertyName] = {};
                                        }
                                        if (oPropExtension.namespace && !oExtensions[sPropertyName][oPropExtension.namespace]) {
                                            oExtensions[sPropertyName][oPropExtension.namespace] = {};
                                        }
                                        oExtensions[sPropertyName][oPropExtension.namespace][oPropExtension.name] = oPropExtension.value;
                                    }
                                }
                                oProperties[sPropertyName] = sType;
                            }
                        }
                        if (!oPropertyTypes[sNamespace + "." + oEntityType.name]) {
                            oPropertyTypes[sNamespace + "." + oEntityType.name] = {};
                        }
                        oPropertyTypes[sNamespace + "." + oEntityType.name] = oProperties;
                        if (bExtensions) {
                            if (!oPropertyExtensions[sNamespace + "." + oEntityType.name]) {
                                bPropertyExtensions = true;
                            }
                            oPropertyExtensions[sNamespace + "." + oEntityType.name] = {};
                            oPropertyExtensions[sNamespace + "." + oEntityType.name] = oExtensions;
                        }
                    }
                }
            }
        }
        if (bPropertyExtensions) {
            oReturn = { types: oPropertyTypes, extensions: oPropertyExtensions };
        } else {
            oReturn = { types: oPropertyTypes };
        }
        return oReturn;
    };
    setEdmTypes = function (aPropertyValues, oProperties, sTarget, oSchema) {
        var pValueIndex, oPropertyValue, sEdmType = '';
        for (pValueIndex in aPropertyValues) {
            if (aPropertyValues.hasOwnProperty(pValueIndex)) {
                if (aPropertyValues[pValueIndex]) {
                    oPropertyValue = aPropertyValues[pValueIndex];
                    if (oPropertyValue.Value && oPropertyValue.Value.Path) {
                        sEdmType = getEdmType(oPropertyValue.Value.Path, oProperties, sTarget, oSchema);
                        if (sEdmType) {
                            aPropertyValues[pValueIndex].EdmType = sEdmType;
                        }
                        continue;
                    }
                    if (oPropertyValue.Path) {
                        sEdmType = getEdmType(oPropertyValue.Path, oProperties, sTarget, oSchema);
                        if (sEdmType) {
                            aPropertyValues[pValueIndex].EdmType = sEdmType;
                        }
                        continue;
                    }
                    if (oPropertyValue.Facets) {
                        aPropertyValues[pValueIndex].Facets = setEdmTypes(oPropertyValue.Facets, oProperties, sTarget, oSchema);
                        continue;
                    }
                    if (oPropertyValue.Data) {
                        aPropertyValues[pValueIndex].Data = setEdmTypes(oPropertyValue.Data, oProperties, sTarget, oSchema);
                        continue;
                    }
                    if (pValueIndex === "Data") {
                        aPropertyValues.Data = setEdmTypes(oPropertyValue, oProperties, sTarget, oSchema);
                        continue;
                    }
                    if (oPropertyValue.Value && oPropertyValue.Value.Apply) {
                        aPropertyValues[pValueIndex].Value.Apply.Parameters = setEdmTypes(oPropertyValue.Value.Apply.Parameters, oProperties, sTarget, oSchema);
                        continue;
                    }
                    if (oPropertyValue.Value && oPropertyValue.Type && (oPropertyValue.Type === "Path")) {
                        sEdmType = getEdmType(oPropertyValue.Value, oProperties, sTarget, oSchema);
                        if (sEdmType) {
                            aPropertyValues[pValueIndex].EdmType = sEdmType;
                        }
                    }
                }
            }
        }
        return aPropertyValues;
    };
    getEdmType = function (sPath, oProperties, sTarget, oSchema) {
        var pIndex;
        if ((sPath.charAt(0) === "@") && (sPath.indexOf(oSchema.Alias) === 1)) {
            sPath = sPath.slice(oSchema.Alias.length + 2);
        }
        if (sPath.indexOf("/") >= 0) {
            if (oProperties[sPath.slice(0, sPath.indexOf("/"))]) {
                sTarget = sPath.slice(0, sPath.indexOf("/"));
                sPath = sPath.slice(sPath.indexOf("/") + 1);
            }
        }
        for (pIndex in oProperties[sTarget]) {
            if (oProperties[sTarget].hasOwnProperty(pIndex)) {
                if (sPath === pIndex) {
                    return oProperties[sTarget][pIndex];
                }
            }
        }
    };
    getPropertyValueAttributes = function (documentNode) {
        var attrName = "", attrValue = "", i, propertyValueAttributes = {};
        for (i = 0; i < documentNode.attributes.length; i += 1) {
            if ((documentNode.attributes[i].name !== "Property") && (documentNode.attributes[i].name !== "Term")) {
                attrName = documentNode.attributes[i].name;
                attrValue = documentNode.attributes[i].value;
            }
        }
        if (attrName.length > 0) {
            propertyValueAttributes[attrName] = replaceWithAlias(attrValue);
        }
        return propertyValueAttributes;
    };
    getSimpleNodeValue = function (xmlDoc, documentNode) {
        var oValue = {}, stringValueNodes, stringValueNode, pathValueNodes, pathValueNode, applyValueNodes, applyValueNode;
        if (documentNode.hasChildNodes()) {
            stringValueNodes = xPath.selectNodes(xmlDoc, "./d:String", documentNode);
            if (stringValueNodes.length > 0) {
                stringValueNode = xPath.nextNode(stringValueNodes, 0);
                oValue["String"] = xPath.getNodeText(stringValueNode);
            } else {
                pathValueNodes = xPath.selectNodes(xmlDoc, "./d:Path", documentNode);
                if (pathValueNodes.length > 0) {
                    pathValueNode = xPath.nextNode(pathValueNodes, 0);
                    oValue["Path"] = xPath.getNodeText(pathValueNode);
                } else {
                    applyValueNodes = xPath.selectNodes(xmlDoc, "./d:Apply", documentNode);
                    if (applyValueNodes.length > 0) {
                        applyValueNode = xPath.nextNode(applyValueNodes, 0);
                        oValue["Apply"] = getApplyFunctions(xmlDoc, applyValueNode);
                    }
                }
            }
        }
        return oValue;
    };
    getPropertyValue = function (xmlDoc, documentNode, target) {
        var propertyValue = {}, recordNodes, recordNodeCnt, nodeIndex, recordNode, propertyValues, urlValueNodes, urlValueNode,
            pathNode, oPath = {}, annotationNodes, annotationNode, nodeIndexValue, termValue, collectionNodes;
        if (documentNode.hasChildNodes()) {
            recordNodes = xPath.selectNodes(xmlDoc, "./d:Record | ./d:Collection/d:Record | ./d:Collection/d:If/d:Record", documentNode);
            if (recordNodes.length) {
                recordNodeCnt = 0;
                for (nodeIndex = 0; nodeIndex < recordNodes.length; nodeIndex += 1) {
                    recordNode = xPath.nextNode(recordNodes, nodeIndex);
                    propertyValues = getPropertyValues(xmlDoc, recordNode, target);
                    if (recordNode.getAttribute("Type")) {
                        propertyValues["RecordType"] = replaceWithAlias(recordNode.getAttribute("Type"));
                    }
                    if (recordNodeCnt === 0) {
                        if (recordNode.nextElementSibling || (recordNode.parentNode.nodeName === "Collection") || (recordNode.parentNode.nodeName === "If")) {
                            propertyValue = [];
                            propertyValue.push(propertyValues);
                        } else {
                            propertyValue = propertyValues;
                        }
                    } else {
                        propertyValue.push(propertyValues);
                    }
                    recordNodeCnt += 1;
                }
            } else {
                urlValueNodes = xPath.selectNodes(xmlDoc, "./d:UrlRef", documentNode);
                if (urlValueNodes.length > 0) {
                    for (nodeIndex = 0; nodeIndex < urlValueNodes.length; nodeIndex += 1) {
                        urlValueNode = xPath.nextNode(urlValueNodes, nodeIndex);
                        propertyValue["UrlRef"] = getSimpleNodeValue(xmlDoc, urlValueNode);              		
                    }
                } else {
                    urlValueNodes = xPath.selectNodes(xmlDoc, "./d:Url", documentNode);
                    if (urlValueNodes.length > 0) {
                        for (nodeIndex = 0; nodeIndex < urlValueNodes.length; nodeIndex += 1) {
                            urlValueNode = xPath.nextNode(urlValueNodes, nodeIndex);
                            propertyValue["Url"] = getSimpleNodeValue(xmlDoc, urlValueNode);
                        }
                    } else {
                        collectionNodes = xPath.selectNodes(xmlDoc, "./d:Collection/d:AnnotationPath | ./d:Collection/d:PropertyPath", documentNode);
                        if (collectionNodes.length > 0) {
                            propertyValue = [];
                            for (nodeIndex = 0; nodeIndex < collectionNodes.length; nodeIndex += 1) {
                                pathNode = xPath.nextNode(collectionNodes, nodeIndex);
                                oPath = {};
                                oPath[pathNode.nodeName] = xPath.getNodeText(pathNode);
                                propertyValue.push(oPath);
                            }
                        } else {
                            propertyValue = getPropertyValueAttributes(documentNode);
                            annotationNodes = xPath.selectNodes(xmlDoc, "./d:Annotation", documentNode);
                            annotationNode = {};
                            for (nodeIndexValue = 0; nodeIndexValue < annotationNodes.length; nodeIndexValue += 1) {
                                annotationNode = xPath.nextNode(annotationNodes, nodeIndexValue);
                                if (annotationNode.hasChildNodes() === false) {
                                    termValue = replaceWithAlias(annotationNode.getAttribute("Term"));
                                    propertyValue[termValue] = getPropertyValueAttributes(annotationNode);
                                }
                            }
                        }
                    }
                }
            }
        } else {
            propertyValue = getPropertyValueAttributes(documentNode);
        }
        return propertyValue;
    };
    getPropertyValues = function (xmlDoc, documentNode, target) {
        var properties = {}, annotationNode = {}, annotationNodes, nodeIndexValue, termValue, propertyValueNodes, nodeIndex,
            propertyValueNode, propertyName, applyNodes, applyNode, applyNodeIndex;
        annotationNodes = xPath.selectNodes(xmlDoc, "./d:Annotation", documentNode);
        for (nodeIndexValue = 0; nodeIndexValue < annotationNodes.length; nodeIndexValue += 1) {
            annotationNode = xPath.nextNode(annotationNodes, nodeIndexValue);
            if (annotationNode.hasChildNodes() === false) {
                termValue = replaceWithAlias(annotationNode.getAttribute("Term"));
                properties[termValue] = getPropertyValueAttributes(annotationNode);
            }
        }
        propertyValueNodes = xPath.selectNodes(xmlDoc, "./d:PropertyValue", documentNode);
        if (propertyValueNodes.length > 0) {
            for (nodeIndex = 0; nodeIndex < propertyValueNodes.length; nodeIndex += 1) {
                propertyValueNode = xPath.nextNode(propertyValueNodes, nodeIndex);
                propertyName = propertyValueNode.getAttribute("Property");
                properties[propertyName] = getPropertyValue(xmlDoc, propertyValueNode, target);
                applyNodes = xPath.selectNodes(xmlDoc, "./d:Apply", propertyValueNode);
                applyNode = null;
                for (applyNodeIndex = 0; applyNodeIndex < applyNodes.length; applyNodeIndex += 1) {
                    applyNode = xPath.nextNode(applyNodes, applyNodeIndex);
                    if (applyNode) {
                        properties[propertyName] = {};
                        properties[propertyName]['Apply'] = getApplyFunctions(xmlDoc, applyNode);
                    }
                }
            }
        } else {
            properties = getPropertyValue(xmlDoc, documentNode, target);

        }
        return properties;
    };
    getApplyFunctions = function (xmlDoc, applyNode) {
        var apply = {}, parameterNodes, paraNode = null, parameters = [], i;
        parameterNodes = xPath.selectNodes(xmlDoc, "./d:*", applyNode);
        for (i = 0; i < parameterNodes.length; i += 1) {
            paraNode = xPath.nextNode(parameterNodes, i);
            switch (paraNode.nodeName) {
            case "Apply":
                parameters.push({"Type": "Apply", "Value": getApplyFunctions(xmlDoc, paraNode)});
                break;
            case "LabeledElement":
                parameters.push({"Name": paraNode.getAttribute("Name"), "Value": getSimpleNodeValue(xmlDoc, paraNode)});
                break;
            default:
                parameters.push({"Type": paraNode.nodeName, "Value": xPath.getNodeText(paraNode)});
                break;
            }
        }
        apply['Name'] = applyNode.getAttribute('Function');
        apply['Parameters'] = parameters;
        return apply;
    };
    isNavProperty = function (sEntityType, sPathValue, metadata) {
        var oMetadataSchema, i, namespace, aEntityTypes, j, k;
        for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
            oMetadataSchema = oMetadata.dataServices.schema[i];
            if (oMetadataSchema.entityType) {
                namespace = oMetadataSchema.namespace + ".";
                aEntityTypes = oMetadataSchema.entityType;
                for (k = aEntityTypes.length - 1; k >= 0; k -= 1) {
                    if (namespace + aEntityTypes[k].name === sEntityType && aEntityTypes[k].navigationProperty) {
                        for (j = 0; j < aEntityTypes[k].navigationProperty.length; j += 1) {
                            if (aEntityTypes[k].navigationProperty[j].name === sPathValue) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    };

    replaceWithAlias = function (sValue) {
        for (sAlias in oAlias) {
            if (oAlias.hasOwnProperty(sAlias)) {
                if (sValue.indexOf(sAlias + ".") >= 0) {
                    sValue = sValue.replace(sAlias + ".", oAlias[sAlias] + ".");
                    return sValue;
                }
            }
        }
        return sValue;
    };
    if (this.initialized[sAnnotationUri]) {
        return this.initialized[sAnnotationUri];
    }
    // Read Annotation File
    xmlDoc = getHttpResponseXML(sAnnotationUri);
    //Set XPath namespace
    xmlDoc = xPath.setNameSpace(xmlDoc);
    //Schema Alias
    schemaNodes = xPath.selectNodes(xmlDoc, "//d:Schema", xmlDoc);
    for (i = 0; i < schemaNodes.length; i += 1) {
        schemaNode = xPath.nextNode(schemaNodes, i);
        oSchema.Alias = schemaNode.getAttribute("Alias");
        oSchema.Namespace = schemaNode.getAttribute("Namespace");
    }
    //Alias nodes
    refNodes = xPath.selectNodes(xmlDoc, "//edmx:Reference", xmlDoc);
    for (i = 0; i < refNodes.length; i += 1) {
        refNode = xPath.nextNode(refNodes, i);
        aliasNodes = xPath.selectNodes(xmlDoc, "./edmx:Include", refNode);
        if (aliasNodes && aliasNodes.length > 0) {
            aliasNode = xPath.nextNode(aliasNodes, 0);
            if (aliasNode.getAttribute("Alias")) {
                oAlias[aliasNode.getAttribute("Alias")] = aliasNode.getAttribute("Namespace");
            } else {
                oAlias[aliasNode.getAttribute("Namespace")] = aliasNode.getAttribute("Namespace");
            }
        }
        annoNodes = xPath.selectNodes(xmlDoc, "./edmx:IncludeAnnotations", refNode);
        if (annoNodes.length > 0) {
            for (j = 0; j < annoNodes.length; j += 1) {
                annoNode = xPath.nextNode(annoNodes, j);
                if (annoNode.getAttribute("TargetNamespace")) {
                    sAnnoNameSpace = annoNode.getAttribute("TargetNamespace");
                    if (!oAnnotations[sAnnoNameSpace]) {
                        oAnnotations[sAnnoNameSpace] = {};
                    }
                    oAnnotations[sAnnoNameSpace][annoNode.getAttribute("TermNamespace")] = refNode.getAttribute("Uri");
                } else {
                    oAnnotations[annoNode.getAttribute("TermNamespace")] = refNode.getAttribute("Uri");
                }
            }
        }
    }
    if (oAnnotations) {
        mappingList.annotationReferences = oAnnotations;
    }
    mappingList.aliasDefinitions = oAlias;
    //Term nodes
    termNodes = xPath.selectNodes(xmlDoc, "//d:Term", xmlDoc);
    if (termNodes.length > 0) {
        oTerms = {};
        for (nodeIndex = 0; nodeIndex < termNodes.length; nodeIndex += 1) {
            termNode = xPath.nextNode(termNodes, nodeIndex);
            sTermType = replaceWithAlias(termNode.getAttribute("Type"));
            oTerms["@" + oSchema.Alias + "." + termNode.getAttribute("Name")] = sTermType;
        }
        mappingList.termDefinitions = oTerms;
    }
    //Metadata information of all properties
    oMetadataProperties = getAllPropertiesMetadata(oMetadata);
    if (oMetadataProperties.extensions) {
        mappingList.propertyExtensions = oMetadataProperties.extensions;
    }
    //Annotations
    annotationNodes = xPath.selectNodes(xmlDoc, "//d:Annotations ", xmlDoc);
    for (nodeIndex = 0; nodeIndex < annotationNodes.length; nodeIndex += 1) {
        annotationNode = xPath.nextNode(annotationNodes, nodeIndex);
        if (annotationNode.hasChildNodes() === false) {
            continue;
        }
        annotationTarget = annotationNode.getAttribute("Target");
        annotationNamespace = annotationTarget.split(".")[0];
        if (annotationNamespace && oAlias[annotationNamespace]) {
            annotationTarget = annotationTarget.replace(new RegExp(annotationNamespace, ""), oAlias[annotationNamespace]);
        }
        annotation = annotationTarget;
        propertyAnnotation = null;
        if (annotationTarget.indexOf("/") > 0) {
            annotation = annotationTarget.split("/")[0];
            propertyAnnotation = annotationTarget.replace(annotation + "/", "");
        }
        if (!mappingList[annotation]) {
            mappingList[annotation] = {};
        }
        // --- Value annotation of complex types. ---
        if (propertyAnnotation) {
            if (!mappingList.propertyAnnotations) {
                mappingList.propertyAnnotations = {};
            }
            if (!mappingList.propertyAnnotations[annotation]) {
                mappingList.propertyAnnotations[annotation] = {};
            }
            mappingList.propertyAnnotations[annotation][propertyAnnotation] = {};
            propertyAnnotationNodes = xPath.selectNodes(xmlDoc, "./d:Annotation", annotationNode);
            for (nodeIndexValue = 0; nodeIndexValue < propertyAnnotationNodes.length; nodeIndexValue += 1) {
                propertyAnnotationNode = xPath.nextNode(propertyAnnotationNodes, nodeIndexValue);
                if (propertyAnnotationNode.hasChildNodes() === false) {
                    sTermValue = replaceWithAlias(propertyAnnotationNode.getAttribute("Term"));
                    mappingList.propertyAnnotations[annotation][propertyAnnotation][sTermValue] = getPropertyValueAttributes(propertyAnnotationNode);
                }
            }
            // --- Annotations ---
        } else {
            targetAnnotation = annotation.replace(oAlias[annotationNamespace], annotationNamespace);
            propertyAnnotationNodes = xPath.selectNodes(xmlDoc, "./d:Annotation", annotationNode);
            for (nodeIndexAnnotation = 0; nodeIndexAnnotation < propertyAnnotationNodes.length; nodeIndexAnnotation += 1) {
                propertyAnnotationNode = xPath.nextNode(propertyAnnotationNodes, nodeIndexAnnotation);
                annotationQualifier = propertyAnnotationNode.getAttribute("Qualifier");
                annotationTerm = replaceWithAlias(propertyAnnotationNode.getAttribute("Term"));
                if (annotationQualifier) {
                    annotationTerm += "#" + annotationQualifier;
                }
                valueAnnotation = getPropertyValue(xmlDoc, propertyAnnotationNode, targetAnnotation);
                valueAnnotation = setEdmTypes(valueAnnotation, oMetadataProperties.types, annotation, oSchema);
                mappingList[annotation][annotationTerm] = valueAnnotation;
            }
            // --- Setup of Expand nodes. ---                         
            expandNodes = xPath.selectNodes(xmlDoc, "//d:Annotations[contains(@Target, '" + targetAnnotation + "')]//d:PropertyValue[contains(@Path, '/')]//@Path", xmlDoc);
            for (i = 0; i < expandNodes.length; i += 1) {
                expandNode = xPath.nextNode(expandNodes, i);
                path = expandNode.value;
                if (mappingList.propertyAnnotations) {
                    if (mappingList.propertyAnnotations[annotation]) {
                        if (mappingList.propertyAnnotations[annotation][path]) {
                            continue;
                        }
                    }
                }
                pathValues = path.split('/');
                if (isNavProperty(annotation, pathValues[0], oMetadata)) {
                    if (!mappingList.expand) {
                        mappingList.expand = {};
                    }
                    if (!mappingList.expand[annotation]) {
                        mappingList.expand[annotation] = {};
                    }
                    mappingList.expand[annotation][pathValues[0]] = pathValues[0];
                }
            }
            expandNodesApplFunc = xPath.selectNodes(xmlDoc, "//d:Annotations[contains(@Target, '" + targetAnnotation + "')]//d:Path[contains(., '/')]", xmlDoc);
            for (i = 0; i < expandNodesApplFunc.length; i += 1) {
                expandNode = xPath.nextNode(expandNodesApplFunc, i);
                path = xPath.getNodeText(expandNode);
                if (mappingList.propertyAnnotations[annotation]) {
                    if (mappingList.propertyAnnotations[annotation][path]) {
                        continue;
                    }
                }
                if (!mappingList.expand) {
                    mappingList.expand = {};
                }
                if (!mappingList.expand[annotation]) {
                    mappingList.expand[annotation] = {};
                }
                pathValues = path.split('/');
                if (isNavProperty(annotation, pathValues[0], oMetadata)) {
                    if (!mappingList.expand) {
                        mappingList.expand = {};
                    }
                    if (!mappingList.expand[annotation]) {
                        mappingList.expand[annotation] = {};
                    }
                    mappingList.expand[annotation][pathValues[0]] = pathValues[0];
                }
            }
        }
        this.initialized[sAnnotationUri] = mappingList;
    }
    return mappingList;
};
}());

}; // end of sap/apf/core/annotation.js
if ( !jQuery.sap.isDeclared('sap.apf.core.constants') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare('sap.apf.core.constants');
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained

/**
 * Constants of the core
 * @class sap.apf.core.constants
 */
sap.apf.core.constants = sap.apf.core.constants || {};
/**
 * The constants shall be returned from a representation with method getFilterMethodTypes.
 * @class filterMethodTypes
 * @memberOf sap.apf.core.constants
 */
sap.apf.core.constants.filterMethodTypes = {
    /**
     * @public
     * @description selectionAsArray
     */
    selectionAsArray: 'saa',
    /**
     * @public
     * @description filter
     */
    filter: 'f',
    /**
     * @public
     * @description startFilter
     */
    startFilter: 'sf'
};
/**
 * @class Enumeration for filter operators, that are supported in odata $filter part
 */
sap.apf.core.constants.FilterOperators = sap.ui.model.FilterOperator;

sap.apf.core.constants.BooleFilterOperators = {

    AND: "and",
    OR: "or",
    NOT: "not"
};
/**
 * @constant sap.apf.core.constants.aSelectOpt operators for filter terms.
 * @description All allowed constants, that can be used in filter terms.
 *              These constants correspond to the terms, that can be handled by
 *              the OData protocol.
 */
sap.apf.core.constants.aSelectOpt = [ sap.apf.core.constants.FilterOperators.EQ, sap.apf.core.constants.FilterOperators.NE, sap.apf.core.constants.FilterOperators.GT, sap.apf.core.constants.FilterOperators.LT,
    sap.apf.core.constants.FilterOperators.GE, sap.apf.core.constants.FilterOperators.LE, sap.apf.core.constants.FilterOperators.BT, sap.apf.core.constants.FilterOperators.StartsWith, sap.apf.core.constants.FilterOperators.Contains, sap.apf.core.constants.FilterOperators.EndsWith ];
/**
 * @class Constants for the resource location
 * @descriptions Properties in the configuration file for the resource locations
 */
sap.apf.core.constants.resourceLocation = {

    /**
     * @public
     * @description webAppMessageConfiguration
     */
    applicationMessageDefinitionLocation: "applicationMessageDefinitionLocation",
    /**
     * @public
     * @description webAppMessageTextBundle
     */
    applicationMessageTextBundle: "applicationMessageTextBundle",
    /**
     * @public
     * @description apfUiTextBundle
     */
    apfUiTextBundle: "apfUiTextBundle",
    /**
     * @public
     * @description webAppTextBundle
     */
    applicationUiTextBundle: "applicationUiTextBundle",
    /**
     * @public
     * @description analyticalConfigurationLocation
     */
    analyticalConfigurationLocation: "analyticalConfigurationLocation"
};
/**
 * @namespace Constants for the message handling.
 */
sap.apf.core.constants.message = {};
/**
 * @class Message severity constants
 * @description Constants for the severity of a message object.
 * @memberOf sap.apf.core.constants.message.code
 */
sap.apf.core.constants.message.severity = {
    /**
     * @public
     * @description fatal
     */
    fatal: "fatal",
    /**
     * @public
     * @description warning
     */
    warning: "warning",
    /**
     * @public
     * @description error
     */
    error: "error",
    /**
     * @public
     * @description technical error
     */
    technError: "technError"
};
/**
 * @description Unique text to identify an exception, that should be ignored by the message handler during
 * processing the window.onerror. This allows to stop the execution by throwing an error.
 */
sap.apf.core.constants.message.code = {
    suppressFurtherException: "APFapf1972",
    errorCheck: "5100",
    errorCheckWarning: "5101",
    errorCheckConfiguration: "5102",
    errorCheckConfigurationWarning: "5103",
    errorExitTriggered: "5300",
    // messages, that exist without configuration, because they are used, before message configuration is loaded
    errorUnknown: "9000",
    //fatal messages, that occur during loading
    errorLoadConfig: "9001",
    errorStopProcessing: "9002",
    errorStartUp: "9003",
    errorLoadingRessource: "9007",
    wrongRessourcePath: "9008",
    missingAnalyticalConfig: "9009",
    errorLoadingAnalyticalConfig: "9010",
    errorInAnalyticalConfig: "9011"
};
/**
 * @class Event callback constants
 * @description Constants for the events triggered from apf
 * @memberOf sap.apf.core.constants
 */
sap.apf.core.constants.eventTypes = {
    /**
     * @public
     * @description fired when the sap.apf.setContext is invoked.
     *            Callback function on this event will be executed under the context of API instance.
     *                The arguments can be an {object} or empty based on opening a path scenario and triggering a new path respectively.
     *                The {object} passed on opening a path is described below :
     *              {
	 *              	id - filterId,
	 *              	type - filterType,
	 *              	expressions - filterTopAnd expressions,
	 *              	terms - filterOr expressions
	 *              }
     */
    contextChanged: "contextChanged",
    printTriggered: "printTriggered",
    format: "format"
};
/**
 * @class Configuration object types
 * @description Object types supported by configuration factory
 * @memberOf sap.apf.core.constants
 */
sap.apf.core.constants.configurationObjectTypes = {
    facetFilter: "facetFilter"
};
}; // end of sap/apf/core/constants.js
if ( !jQuery.sap.isDeclared('sap.apf.core.entityTypeMetadata') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.entityTypeMetadata");
/** 
 * @class Provides convenience functions for metadata handling.
 * @param {sap.apf.core.MessageHandler} oMessageHandler
 * @param {string} sEntityType 
 * @param {sap.apf.core.Metadata} oMetadata
 * @returns {sap.apf.core.EntityTypeMetadata}
 */
sap.apf.core.EntityTypeMetadata = function (oMessageHandler, sEntityType, oMetadata) {
	/**
	 * @description Contains 'entityTypeMetadata'.
	 * @returns {String}
	 */
	this.type = 'entityTypeMetadata';
	/**
	 * @description Returns all metadata for a property as object. 
	 * Property names of the returned object match the metadata attribute names (e.g. 'Name' or 'Nullable') except for the type information, i.e there is no property 'Type'. 
	 * All type information is enclosed in property 'dataType', which is another object.
	 * This object contains property 'EdmType' and optional additional properties belonging to the respective type.
	 * If no metadata could be determined for the property, the method will return an almost empty object that only contains the 'dataType' property for convenience: 
	 * { dataType : { } }. 
	 * @param {string} sProperty
	 * @returns {object}
	 */
	this.getPropertyMetadata = function (sProperty) {
		var result;
		result = oMetadata.getPropertyMetadata(sEntityType, sProperty);
		if (!result) {
			result = {
				dataType : {}
			};
		}
		return result;
	};
	
	/**
	 * @description Returns metadata which includes extensions for OData 4.0 like "RequiresFilter"
	 * @returns {array}
	 */
	this.getEntityTypeMetadata = function() {
		return oMetadata.getEntityTypeMetadata(sEntityType);
	};
	
	function checkArguments() {
		oMessageHandler.check(sEntityType && typeof sEntityType === 'string', 'sap.apf.core.entityTypeMetadata: incorrect value for parameter sEntityType');
		oMessageHandler.check(oMetadata && oMetadata.type && oMetadata.type === "metadata", 'sap.apf.core.entityTypeMetadata: incorrect value for parameter oMetadata');
	}
	
	checkArguments();
};

}; // end of sap/apf/core/entityTypeMetadata.js
if ( !jQuery.sap.isDeclared('sap.apf.core.messageDefinition') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.apf.core.messageDefinition");

sap.apf.core.messageDefinition = [
    {
        code: "3001",
        severity: "technError",
        text: "Text is not available for the following key: {0}"
    },
    {
        code: "5001",
        severity: "technError",
        text: "Request {3} to server failed with http status code {0}, http error message {1}, and server response {2}."
    },
    {
        code: "5002",
        severity: "error",
        description: "Error in OData request; update of analysis step {0} failed.",
        key: "5002"
    },
    {
        code: "5003",
        severity: "technError",
        text: "Only a single representation is allowed for the initial step; change the configuration of step {0}."
    },
    {
        code: "5004",
        severity: "fatal",
        description: "Request with ID {0} does not exist in the analytical content configuration.",
        key: "5004"
    },
    {
        code: "5005",
        severity: "technError",
        text: "Required property {1} is missing in the filter of the OData request for entity type {0}."
    },
    {
        code: "5006",
        severity: "technError",
        text: "Inconsistency in data model; non-filterable property {1} is set as required filter for entity type {0}."
    },
    {
        code: "5007",
        severity: "technError",
        text: "Initial step cannot be deleted."
    },
    {
        code: "5008",
        severity: "technError",
        text: "Initial step cannot be moved."
    },
    {
        code: "5015",
        severity: "fatal",
        description: "Service for request {0} is not defined in the analytical content configuration.",
        key: "5015"
    },
    {
        code: "5016",
        severity: "technError",
        text: "Mandatory HANA view parameter {0} is missing in filter."
    },
    {
        code: "5017",
        severity: "technError",
        text: "Error occurred during annotation parsing: {0}"
    },
    {
        code: "5018",
        severity: "fatal",
        description: "Metadata request {3} to server failed with http status code {0}, http error message {1}, and server response {2}.",
        key: "5018"
    },
    {
        code: "5019",
        severity: "technError",
        text: "System query option $orderby for property {1} removed from OData request for entity type {0}."
    },
    {
        code: "5020",
        severity: "fatal",
        description: "Analytical content configuration is not available.",
        key: "5020"
    },
    {
        code: "5021",
        severity: "error",
        description: "Error during server request; session timeout occurred.",
        key: "5021"
    },
    {
        code: "5025",
        severity: "fatal",
        description: "Value for SAP client has not been provided at startup of the application.",
        key: "5025"
    },
    {
        code: "5026",
        severity: "fatal",
        description: "Logical system cannot be determined for SAP client {0}. ",
        key: "5026"
    },
    {
        code: "5027",
        severity: "technError",
        text: "Inconsistent parameters; analysis path cannot be saved. Path ID: {0}, path name: {1}, callback function {2}"
    },
    {
        code: "5028",
        severity: "technError",
        text: "Binding with ID {0} contains a representation without ID."
    },
    {
        code: "5029",
        severity: "technError",
        text: "Binding with ID {0} contains a duplicated representation ID."
    },
    {
        code: "5030",
        severity: "technError",
        text: "Constructor property of representation type ID {0} does not contain a module path to a valid function."
    },
    {
        code: "5031",
        severity: "technError",
        text: "Argument for method 'setApplicationMessageCallback' is not a function."
    },
    {
        code: "5032",
        severity: "technError",
        text: "System query option {1} unknown in request for entity type {0}."
    },
    {
        code: "5033",
        severity: "technError",
        text: "Unsupported type {0} in configuration object provided."
    },
    {
        code: "5034",
        severity: "technError",
        text: "Facet filter configuration attribute 'property' missing."
    },
    {
        code: "5035",
        severity: "technError",
        text: "Function module path contained in property preselectionFuntion of facet filter ID {0} does not contain a valid function."
    },
    {
        code: "5100",
        severity: "fatal",
        description: "Unexpected internal error: {0}. Contact SAP.",
        key: "5100"
    },
    {
        code: "5101",
        severity: "technError",
        text: "Unexpected internal error: {0}. Contact SAP."
    },
    {
        code: "5102",
        severity: "fatal",
        description: "Wrong definition in analytical content configuration: {0}",
        key: "5102"
    },
    {
        code: "5103",
        severity: "technError",
        text: "Wrong definition in analytical content configuration."
    },
    {
        code: "5104",
        severity: "technError",
        text: "Wrong filter mapping definition in analytical content configuration"
    },
    {
        code: "5200",
        severity: "technError",
        text: "Server error during processing of path: {0} {1}"
    },
    {
        code: "5201",
        severity: "error",
        description: "Unknown server error.",
        key: "5201"
    },
    {
        code: "5202",
        severity: "technError",
        text: "Persistence service call returned '405 - Method not allowed'."
    },
    {
        code: "5203",
        severity: "technError",
        text: "Bad request; data is structured incorrectly."
    },
    {
        code: "5204",
        severity: "error",
        description: "Error during server request; maximum number of analysis steps exceeded.",
        key: "5204"
    },
    {
        code: "5205",
        severity: "error",
        description: "Error during server request; maximum number of analysis paths exceeded.",
        key: "5205"
    },
    {
        code: "5206",
        severity: "error",
        description: "Access forbidden; insufficient privileges",
        key: "5206"
    },
    {
        code: "5207",
        severity: "error",
        description: "Inserted value too large; probably maximum length of analysis path name exceeded",
        key: "5207"
    },
    {
        code: "5208",
        severity: "error",
        description: "Error during path persistence; request to server can not be proceed due to invalid ID.",
        key: "5208"
    },
    {
        code: "5210",
        severity: "error",
        description: "Error during opening of analysis path; see log.",
        key: "5210"
    },
    {
        code: "5211",
        severity: "error",
        description: "Server response contains undefined path objects.",
        key: "5211"
    },
    {
        code: "5300",
        severity: "fatal",
        description: "You must log out of the application due to a critical error.",
        key: "5300"
    },
    {
        code: "6001",
        severity: "fatal",
        description: "Missing {0} in the configuration; contact your administrator.",
        key: "6001"
    },
    {
        code: "6000",
        severity: "error",
        description: "Data is not available for the {0} step.",
        key: "6000"
    },
    {
        code: "6002",
        severity: "error",
        description: "Missing {0} for {1} in the configuration; contact your administrator.",
        key: "6002"
    },
    {
        code: "6003",
        severity: "error",
        description: "Missing {0} in the configuration; contact your administrator.",
        key: "6001"
    },
    {
        code: "6004",
        severity: "technError",
        text: "Metadata not available for step {0}."
    },
    {
        code: "6005",
        severity: "error",
        description: "Server request failed. Unable to read paths.",
        key: "6005"
    },
    {
        code: "6006",
        severity: "error",
        description: "Server request failed. Unable to save path {0}.",
        key: "6006"
    },
    {
        code: "6007",
        severity: "error",
        description: "Server request failed. Unable to update path {0}.",
        key: "6007"
    },
    {
        code: "6008",
        severity: "error",
        description: "Server request failed. Unable to open path {0}.",
        key: "6008"
    },
    {
        code: "6009",
        severity: "error",
        description: "Server request failed. Unable to delete path {0}.",
        key: "6009"
    },
    {
        code: "6010",
        severity: "error",
        description: "Data is not available for filter {0}",
        key: "6010"
    },
    {
        code: "6011",
        severity: "fatal",
        description: "Smart Business service failed.Please try later",
        key: "6011"
    },
    {
        code: "7000",
        severity: "error",
        description: "Missing {0} in the configuration; contact your administrator.",
        key: "6001"
    }
];
}; // end of sap/apf/core/messageDefinition.js
if ( !jQuery.sap.isDeclared('sap.apf.core.messageObject') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.messageObject");

/**
 * @public
 * @class The message object represents the APF specific message object for detailed evaluation. The message object shall be created by method {@link sap.apf.Api#createMessageObject}.
 * @name sap.apf.core.MessageObject
 * @param {object} oConfig 
 */
sap.apf.core.MessageObject = function (oConfig) {
	// private vars
	var sCode = oConfig.code;
	var aParameters = oConfig.aParameters || [];
	var oCallingObject = oConfig.oCallingObject;
	var sMessage = "";
	var sSeverity = "";
	var oPrevious;
	var dtTimestamp = new Date();
    var rawText = oConfig.rawText;
    /**
	 * @description Contains 'messageObject'
	 * @returns {string}
	 */
	this.type = "messageObject";
	// public function
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getCode
	 * @description Returns the message code.
	 * @returns {string}
	 */
	this.getCode = function () {
		return sCode;
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#setCode
	 * @description Sets the code, that classifies the message.
	 * @param {string} code 
	 * @returns undefined
	 */
	this.setCode = function (code) {
		sCode = code;
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#hasRawText
	 * @description Returns true, if a raw text is set. 
	 * @returns {boolean}
	 */
	this.hasRawText = function() {
		return (rawText !== undefined);
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getRawText
	 * @description Returns raw text. 
	 * @returns {string}
	 */
	this.getRawText = function() {
		return rawText;
	};

	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getMessage
	 * @description Returns the message text.
	 * @returns {string}
	 */
	this.getMessage = function () {
		return sMessage;
	};

	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#setMessage
	 * @description Sets the message text.
	 * @param {string} sTextMessage 
	 * @returns undefined
	 */
	this.setMessage = function (sTextMessage) {
		sMessage = sTextMessage;
	};

	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#setSeverity
	 * @description Sets the severity , which classifies the message.
     * @param {string} severity Only for to build in error messages. Allowed values are defined in {@link sap.apf.constants.severity}.
	 * @returns undefined
	 */
	this.setSeverity = function (severity) {
		sSeverity = severity;
	};

	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getSeverity
	 * @description Returns the severity.
	 * @returns {string}
	 */
	this.getSeverity = function () {
		return sSeverity;
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#setPrevious
	 * @description Sets the previous message object. One can add a message object to this message object, that describes a previous message. 
	 * The message in the previous message object will also be displayed in the log (as previous entry). 
	 * @param {sap.apf.core.MessageObject} oPreviousMessageObject 
	 * @returns undefined
	 */
	this.setPrevious = function (oPreviousMessageObject) {
		oPrevious = oPreviousMessageObject;
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getPrevious
	 * @description Gets the previous message object. 
	 * @returns {sap.apf.core.MessageObject} || undefined
	 */
	this.getPrevious = function () {
		return oPrevious;
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getCallingObject
	 * @description Returns the calling object
	 * @returns {object}
	 */
	this.getCallingObject = function () {
		return oCallingObject;
	};

	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getParameters
	 * @description Returns the parameter which were passed over
	 * @returns {array}
	 */
	this.getParameters = function () {
		return aParameters;
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getStack
	 * @description Returns the stack of the error object to get the line number and source file
	 * @returns {string}
	 */
	this.getStack = function () {
		if (this.stack) {
			return this.stack;
		} else {
			return "";
		}
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getTimestamp
	 * @description Returns the time stamp of the message object in seconds after 1970
	 * @returns {number}
	 */
	this.getTimestamp = function () {
		return dtTimestamp.getTime();
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getTimestampAsdateObject
	 * @description Returns the time stamp of the message object as a date
	 * @returns {date}
	 */
	this.getTimestampAsdateObject = function () {
		return dtTimestamp;
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getJQueryVersion
	 * @description Returns the version of jQuery
	 * @returns {string}
	 */
	this.getJQueryVersion = function () {
		return jQuery().jquery;
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getSapUi5Version
	 * @description Returns the version of SAP UI5
	 * @returns {string}
	 */
	this.getSapUi5Version = function () {
		return sap.ui.version;
	};
	// private function
};
// set Prototype to get a JavaScript API Message Object
sap.apf.core.MessageObject.prototype = new Error();
sap.apf.core.MessageObject.prototype.constructor = sap.apf.core.MessageObject;

}; // end of sap/apf/core/messageObject.js
if ( !jQuery.sap.isDeclared('sap.apf.core.metadataFactory') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.metadataFactory");

/**
 * @class This class creates and manages metadata and entity type metadata instances. 
 * The class assures that there is a single metadata instance per service root and
 * that there is a single entity type metadata instance per service root and and entity type.
 */
sap.apf.core.MetadataFactory = function (oInject) {
	/**
	 * @description Returns type of metadataFactory.
	 * @returns {String}
	 */
	this.type = "metadataFactory";

    var that = this;
    var oMessageHandler = oInject.messageHandler;
    var oConfigurationFactory = oInject.configurationFactory;
    var fnHashtable = oInject.hashtable;
	var fnMetadata = oInject.metadata;
	var fnEntityTypeMetadata = oInject.entityTypeMetadata;
    var fnMetadataFacade = oInject.metadataFacade;
    var fnMetadataProperty = oInject.metadataProperty;

	//delete properties from oInject, which are not necessary to be transferred to metadata instances 
	delete oInject.metadata;
	delete oInject.entityTypeMetadata;
    delete oInject.metadataFacade;
    delete oInject.metadataProperty;
    delete oInject.configurationFactory;
	
	var oMetadataInstances = new fnHashtable(oMessageHandler);

	// Public functions
	/**
	 * @description Returns metadata object that represents metadata corresponding to the service document.
	 * @param {string} sAbsolutePathToServiceDocument Path to the service document
	 * @returns {sap.apf.core.Metadata}
	 */
	this.getMetadata = function (sAbsolutePathToServiceDocument) {
		if (oMetadataInstances.hasItem(sAbsolutePathToServiceDocument) === false) {
			oMetadataInstances.setItem(sAbsolutePathToServiceDocument, {
				metadata : new fnMetadata(oInject, sAbsolutePathToServiceDocument)
			});
		}
		return oMetadataInstances.getItem(sAbsolutePathToServiceDocument).metadata;
	};
	/**
	 * @description Returns metadata object that represents metadata corresponding to the service document and an entity type that belongs to the service.
	 * @param {string} sAbsolutePathToServiceDocument Absolute path to the service document
	 * @param {string} sEntityType Entity type
	 * @returns {sap.apf.core.EntityTypeMetadata}
	 */
	this.getEntityTypeMetadata = function (sAbsolutePathToServiceDocument, sEntityType) {
		var oEntityTypes;
		var oMetadata = this.getMetadata(sAbsolutePathToServiceDocument);

		oEntityTypes = oMetadataInstances.getItem(sAbsolutePathToServiceDocument).entityTypes;
		if (!oEntityTypes) {
			oEntityTypes = new fnHashtable(oMessageHandler);
			oMetadataInstances.getItem(sAbsolutePathToServiceDocument).entityTypes = oEntityTypes;
		}
		if (!oEntityTypes.getItem(sEntityType)) {
			oEntityTypes.setItem(sEntityType, new fnEntityTypeMetadata(oMessageHandler, sEntityType, oMetadata));
		}
		return oEntityTypes.getItem(sEntityType);
	};
	/**
	 * @description Returns instance of {sap.apf.core.MetadataFacade}
	 * @returns {sap.apf.core.MetadataFacade}
	 */
    this.getMetadataFacade = function (sAbsolutePathToServiceDocument) {
            return new fnMetadataFacade({
                messageHandler : oMessageHandler,
                metadataProperty : sap.apf.core.MetadataProperty,
                metadataFactory : that
            }, sAbsolutePathToServiceDocument);
            return oMetadataFacade;
    };
    /**
	 * @description Returns service documents
	 * @returns {Array}
	 */
    this.getServiceDocuments = function () {
        return oConfigurationFactory.getServiceDocuments();
    };
};

}; // end of sap/apf/core/metadataFactory.js
if ( !jQuery.sap.isDeclared('sap.apf.core.metadataProperty') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.metadataProperty");

/** 
 * @class Provides convenience functions for accessing attributes of a metadata property
 * @param {Object} oAttributes - Attributes (key value pairs) of a metadata property
 * @returns {sap.apf.core.MetadataProperty}
 */
sap.apf.core.MetadataProperty = function (oAttributes) {
	// Private vars
	var that = this;
	var bKey = false;
	var bHanaViewParameter = false;
	// Public functions
	/**
	 * @description If this property is a key, then a boolean true is returned. Otherwise, boolean false is returned. 
	 * @returns {Boolean}
	 */
	this.isKey = function (){
		return bKey;
	};
	/**
	 * @description If this property is a HANA view parameter, then a boolean true is returned. Otherwise, boolean false is returned. 
	 * @returns {boolean}
	 */
	this.isHanaViewParameter = function (){
		return bHanaViewParameter;
	};
	/**
	 * @description Returns the value for a given attribute. 
	 * @param {String} sName - Attribute name
	 * @returns {boolean} or {string} or {number} 
	 */
	this.getAttribute = function(sName){
		if(typeof this[sName] !== "function"){
			return this[sName];
		}
	};
	
	// Private functions
	/**
	 * @private
	 * @description Adds an attribute (key value pair) directly to itself. 
	 * If name already exists, the new value will be ignored. It is not possible to add an attribute with a method name of sap.apf.core.MetadataProperty. 
	 * @param {String} sName - Attribute name
	 * @param {String} value - Attribute value, which can be of type string, number or boolean
	 * @returns {sap.apf.core.MetadataProperty}
	 */
	function addAttribute(sName, value) {
		switch(sName){
		case "isKey":
			if(value === true){
				bKey = true;
			}
			break;
		case "isHanaViewParameter":
			if(value === true){
				bHanaViewParameter= true;
			}
			break;
		default: 
			if(typeof that[sName] !== "function"){
				that[sName] = value; 
			}
		}
		return that;
	};
	
	function initialize(){
		for(var name in oAttributes){
			switch (name) {
				case "dataType":
					for(var dataTypeName in oAttributes.dataType){
						addAttribute(dataTypeName, oAttributes.dataType[dataTypeName]);
					}
					break;
				default:
					addAttribute(name, oAttributes[name]);
				}
		}
	}
	initialize();
};
}; // end of sap/apf/core/metadataProperty.js
if ( !jQuery.sap.isDeclared('sap.apf.core.path') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.path");

/**
 * @private
 * @class Holds the order and state of the Step instances within the analysis path. The methods, that change the path or get state of the path
 * shall be called through the APF api (@see sap.apf.Api). The path is automatically created at startup of the APF.
 * @param oInject.messageHandler {sap.apf.core.MessageHandler} MessageHandler
 * @param oInject.coreApi {sap.apf.core.Instance} core API
 * @name sap.apf.core.Path
 */
sap.apf.core.Path = function(oInject) {

	// Public vars
	this.type = "path";

	// Private vars
    var oMessageHandler = oInject.messageHandler;
    var oCoreApi = oInject.coreApi;
	var that = this;
	var aStepInstances = [];
	var aActiveSteps = [];
	var nUpdateCounter = 0;

	// Public functions
	/**
	 * @function
	 * @name sap.apf.core.Path.getSteps
	 * @description Gets the ordered sequence of all steps in an analysis path.
	 * The array is cloned such that the internal state of the path cannot be manipulated directly.
	 * Each step return a referenced to the object in the path. 
	 * Each step shall always be identified by the reference to its step object, 
	 * e.g. in methods like removeStep, moveStepToPosition, setActiveSteps, etc.
	 * @return copied array of steps
	 */
	this.getSteps = function() {
		return jQuery.extend(true, [], aStepInstances);
	};
	/**
	 * @function
	 * @name sap.apf.core.Path.addStep
	 * @description Adds a step to the analysis path. Has to be called by APF api.
	 * @param oStep
	 *            reference of the step which shall be added to the analysis
	 *            path
	 */
	this.addStep = function(oStep, fnStepProcessedCallback) {
		aStepInstances.push(oStep);
		var oStartFilter;
		if (oStep.isInitialStep() === true) {
			oStartFilter = oCoreApi.getContext();
			oStep.setFilter(oStartFilter);
		}
		that.update(fnStepProcessedCallback);
	};

	/**
	 * @description Sets a step as an active step in the path.
	 * @param oStep The step to be set active. The step has to be a member of the path, if not, an error will be thrown. A step may already be active. 
	 */
	this.makeStepActive = function(oStep) {
		var bStepIsInPath = this.stepIsInPath(oStep);
		oMessageHandler.check(bStepIsInPath, "An unknown step can't be an active step.", sap.apf.core.constants.message.code.errorCheckWarning);
		if (bStepIsInPath) {
			if (this.stepIsActive(oStep) === false) {
				aActiveSteps.push(oStep);
			}
		}
	};

	/**
	 * @description removes an active step
	 * @param oStep
	 *            step reference of step which shall become inactive
	 */
	this.makeStepInactive = function(oStep) {
		var bStepIsActive = this.stepIsActive(oStep);
		oMessageHandler.check(bStepIsActive, "Only an active step can be removed from the active steps.", sap.apf.core.constants.message.code.errorCheckWarning);

		if (bStepIsActive) {
			var indexOfStep = jQuery.inArray(oStep, aActiveSteps);
			aActiveSteps.splice(indexOfStep, 1);
		}
	};

	/**
	 * @description Checks whether a step is active
	 * @param oStep Step reference
	 * @returns boolean
	 */
	this.stepIsActive = function(oStep) {
		var indexOfStep = jQuery.inArray(oStep, aActiveSteps);
		if (indexOfStep >= 0) {
			return true;
		} else {
			return false;
		}
	};

	/**
	 * @description checks whether a step is in the path
	 * @param oStep
	 *            step reference
	 * @returns boolean
	 */
	this.stepIsInPath = function(oStep) {
		var indexOfStep = jQuery.inArray(oStep, aStepInstances);
		if (indexOfStep >= 0) {
			return true;
		} else {
			return false;
		}
	};
	/**
	 * @description Gets all active steps in an analysis path. 
	 * @return array of steps
	 */
	this.getActiveSteps = function() {
		return jQuery.extend(true, [], aActiveSteps);
	};
	/**
	 * @description returns the initial step if there's one on the first
	 *              position. Otherwise undefined is returned
	 * @returns reference of the initial step
	 */
	this.getInitialStep = function() {
		var oStep;
		if (aStepInstances.length > 0) {
			var firstStep = aStepInstances[0]; // assumption that the initial step is on the first position in the path only
			if (firstStep.isInitialStep() === true) {
				oStep = firstStep;
			}
		}
		return oStep;
	};

	/**
	 * @description Moves a step in the analysis path to the specified target position. 
	 * The step cannot be moved before the initial step. 
	 * In case of conflict it will be moved to the position directly following the initial steps. 
	 * Note that a path may not contain an initial step, but if so, it is on position zero. 
	 * @param oStep The step object to be moved
	 * @param nPosition The target position. Must be a valid position in the path, between zero and length-1.
	 * @param fnStepProcessedCallback Callback for update of steps.
	 */
	this.moveStepToPosition = function(oStep, nPosition, fnStepProcessedCallback) {
		var nIndexOfStep = jQuery.inArray(oStep, aStepInstances);
		var targetPosition = nPosition;
		var oMessageObject;
		// the step to be moved must be a step of the path
		oMessageHandler.check(typeof nPosition === "number" && nPosition >= 0 && nPosition < aStepInstances.length, "Path: moveStepToPosition invalid argument for nPosition");
		oMessageHandler.check(nIndexOfStep >= 0 && nIndexOfStep < aStepInstances.length, "Path: moveStepToPosition invalid step");
		if (nIndexOfStep === nPosition) {
			return;
		}
		// initial step shall not be moved
		if (oStep.isInitialStep()) {
			oMessageObject = oMessageHandler.createMessageObject({
				code : "5008",
				aParameters : [],
				callingObject : oStep
			});
			oMessageHandler.putMessage(oMessageObject);
		}

		aStepInstances.splice(nIndexOfStep, 1);
		if (targetPosition === 0 && this.getInitialStep() !== undefined) {
			targetPosition = 1;
		}
		aStepInstances.splice(targetPosition, 0, oStep);
		this.update(fnStepProcessedCallback);
	};

	/**
	 * @description Removes a step from the analysis path. Trying to delete an initial step which is on the first position is not allowed.  
	 * @param oStep The step object to be removed. The reference must be an object contained in the path. Otherwise, an error will be thrown.  
	 * @param fnStepProcessedCallback Callback for update of steps.
	 */
	this.removeStep = function(oStep, fnStepProcessedCallback) {
		var bStepIsInPath = this.stepIsInPath(oStep);
		var bStepIsActive = this.stepIsActive(oStep);
		var nIndexOfStep = jQuery.inArray(oStep, aStepInstances);
		var oMessageObject;
		// initial step shall not be removed
		if (oStep.isInitialStep()) {
			oMessageObject = oMessageHandler.createMessageObject({
				code : "5007",
				aParameters : [],
				callingObject : oStep
			});
			oMessageHandler.putMessage(oMessageObject);
			return;
		}

		// the step to be removed must be a step of the path
		oMessageHandler.check(bStepIsInPath, "Path: remove step - invalid step");
		aStepInstances.splice(nIndexOfStep, 1);
		if (bStepIsActive) {
			this.makeStepInactive(oStep);
		}
		this.update(fnStepProcessedCallback);
	};

	/**
	 * @description The steps in the path will be updated. First it is detected,  whether a representation (chart) of a step 
	 * has changed its selection. If yes, then all subsequent steps will get  a new (cumulated) selection for retrieving data. 
	 * If a step has a new cumulated selection for retrieving data, then
	 * an OData request is executed for the particular step and the representation receives new data.
	 * @param {function} fnStepProcessedCallback is a callback function. This callback function is executed for every step in the path.
	 * The first argument of the callback function is the step instance. The second argument is a flag, that indicates, whether there was 
	 * an update or not.
	 * @param {boole} bContextChanged indicates, that the context has been changed
	 */
	this.update = function(fnStepProcessedCallback, bContextChanged) {
		if (!aStepInstances[0]) {
			return;
		}
		var nCurrentUpdateCount;
		var oCurrentStep = aStepInstances[0];
		var oContextFilter = oCoreApi.getContext();
		var oCumulatedFilter = oContextFilter.getInternalFilter().copy();

		if (bContextChanged === true) {
			if (aStepInstances[0].isInitialStep !== undefined && aStepInstances[0].isInitialStep() === true) {
				aStepInstances[0].setFilter(oContextFilter);
			}
			return;
		}

		nUpdateCounter++;
		nCurrentUpdateCount = nUpdateCounter;
		oCurrentStep.update(oCumulatedFilter, callbackAfterRequest);

		function callbackAfterRequest(oResponse, bStepNotUpdated) {
			var nIndexOfCurrentStep = jQuery.inArray(oCurrentStep, aStepInstances);
			var oMessageObject;

			if (nCurrentUpdateCount === nUpdateCounter) {
				// handle the error
				if (oResponse instanceof Error) {

					var nStepNumberForDisplay = nIndexOfCurrentStep + 1;
					oMessageObject = oMessageHandler.createMessageObject({
						code : "5002",
						aParameters : [ nStepNumberForDisplay ],
						callingObject : oCurrentStep
					});
					oMessageObject.setPrevious(oResponse);

					oMessageHandler.putMessage(oMessageObject);
					oCurrentStep.setData({ data : [], metadata : undefined}, oCumulatedFilter);
					fnStepProcessedCallback(oCurrentStep, true);
					nIndexOfCurrentStep++;
					oCurrentStep = aStepInstances[nIndexOfCurrentStep];
					while (oCurrentStep) {
						oCurrentStep.setData({ data : [], metadata : undefined}, oCumulatedFilter);
						fnStepProcessedCallback(oCurrentStep, true);
						nIndexOfCurrentStep++;
						oCurrentStep = aStepInstances[nIndexOfCurrentStep];
					}
					return;
				}

				if (!bStepNotUpdated) {
					oCurrentStep.setData(oResponse, oCumulatedFilter);
				}
				fnStepProcessedCallback(oCurrentStep, !bStepNotUpdated);
				oCurrentStep.determineFilter(oCumulatedFilter.copy(), callbackFromStepFilterProcessing);
			}
		}
			
		function callbackFromStepFilterProcessing(oFilter)	 {
			var nIndexOfCurrentStep = jQuery.inArray(oCurrentStep, aStepInstances);
			
			// merge filter of initial representation with start filter
			if (oCurrentStep.isInitialStep() === true) {
				oCumulatedFilter = oCumulatedFilter.overwriteWith(oFilter);
			} else {
				oCumulatedFilter.addAnd(oFilter);
			}

			oCurrentStep = aStepInstances[nIndexOfCurrentStep + 1];
			if (oCurrentStep) {
				oCurrentStep.update(oCumulatedFilter, callbackAfterRequest);
			}
		}
	};
	/**
	 * @description Returns the path as serializable object containing the steps,  and the indices of the active steps. 
	 * @returns {object} Serializable path in the following format: { path : { steps: [serializableSteps],  indicesOfActiveStep:[num] }, context:serializableFilter}.
	 */
	this.serialize = function() {
		var oFilter = oCoreApi.getContext();
		return {
			path : {
				steps : getSerializedSteps(),
				indicesOfActiveSteps : getIndicesOfActiveSteps()
			},
			context : oFilter.serialize()
		};
	};
	/**
	 * @description Restores a path with the information given in a serializable path object. 
	 * @param {object} oSerializablePath Serializable path in the following format: { path : { steps: [serializableSteps],  indicesOfActiveStep:[num] }, context:serializableFilter}.
	 * @returns undefined
	 */
	this.deserialize = function(oSerializablePath) {
		
		var oContextFilter = new sap.apf.utils.Filter(oMessageHandler);
		oContextFilter.deserialize(oSerializablePath.context);
		oCoreApi.setContext(oContextFilter);
		addStepsToPathAndDeserialize(oSerializablePath.path.steps, this);
		makeStepsActive(oSerializablePath.path.indicesOfActiveSteps, this);
	};

	// private functions
	function getIndicesOfActiveSteps() {
		var aIndicesOfActiveSteps = [];
		for( var i = 0; i < aStepInstances.length; i++) {
			for( var j = 0; j < aActiveSteps.length; j++) {
				if (aStepInstances[i] === aActiveSteps[j]) {
					aIndicesOfActiveSteps.push(i);
				}
			}
		}
		return aIndicesOfActiveSteps;
	}

	function getSerializedSteps() {
		var aSerializedSteps = [];
		for( var i = 0; i < aStepInstances.length; i++) {
			aSerializedSteps.push(aStepInstances[i].serialize());
		}
		return aSerializedSteps;
	}

	function addStepsToPathAndDeserialize(aSerializedSteps, oContext) {
		//deactivate update during deserialization
		var fnSave = oContext.update;
		oContext.update = function() {
		};
		var i = 0;
		for(i = 0; i < aSerializedSteps.length; i++) {
			oCoreApi.createStep(aSerializedSteps[i].stepId);
		}
		for(i = 0; i < aStepInstances.length; i++) {
			aStepInstances[i].deserialize(aSerializedSteps[i]);
		}

		//activate update after deserialization
		oContext.update = fnSave; 
	}
	function makeStepsActive(aIndicesOfActiveSteps, oContext) {
		for( var i = 0; i < aIndicesOfActiveSteps.length; i++) {
			var nIndex = aIndicesOfActiveSteps[i];
			oContext.makeStepActive(aStepInstances[nIndex]);
		}
	}
};

}; // end of sap/apf/core/path.js
if ( !jQuery.sap.isDeclared('sap.apf.core.persistence') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.persistence");
/**
 * @class Persistence storing paths on server side
 * @returns {sap.apf.core.Persistence}
 */
sap.apf.core.Persistence = function(oInject) {

	/**
	 * @description Creates a data object based on the state of the current path and stores it on the server.
	 * @param {string} sName Name of the path.
	 * @param {function} fnCallback(oResponse, oEntityMetadata, oMessageObject)
     * @param {object} [oExternalObject] Object containing non-core objects to be serialized
     * @param {object} [oExternalObject.pathContextHandler] Serializable PathContextHandler
	 */
	this.createPath = function(sName, fnCallback, oExternalObject) {
		var oSerializablePath = oInject.coreApi.serializePath();
        if(oExternalObject){
            oSerializablePath.pathContextHandler = oExternalObject.pathContextHandler;
        }
		var oStructuredPath = getStructuredAnalysisPath(oSerializablePath);
		
		var oRequest = {
				data : {
					AnalysisPath : "",
					AnalysisPathName : sName,
					LogicalSystem : oInject.coreApi.getLogicalSystem(),
					ApplicationConfigurationURL : oInject.coreApi.getApplicationConfigurationURL(),
					SerializedAnalysisPath : JSON.stringify(oSerializablePath),
					StructuredAnalysisPath : JSON.stringify(oStructuredPath)
				},
				method : "POST"
		};
		sendRequest(oRequest, fnRequestCallback.bind(this));
		
		function fnRequestCallback(oResponse, oEntityTypeMetadata, oMessageObject) {
			if(oMessageObject) {
				fnCallback({ oResponse : oResponse, status: "failed"}, oEntityTypeMetadata, oMessageObject);
			} else {
				oInject.messageHandler.check(oResponse && oResponse.data && oResponse.statusCode === 201 && oResponse.statusText === "Created", "Persistence create Path - proper response");
				fnCallback({ AnalysisPath : oResponse.data.AnalysisPath, status: "successful"}, oEntityTypeMetadata, oMessageObject);				
			}
		}
	};
	
	/**
	 * @description Reads all stored paths from server.
	 * @param {function} fnCallback This callback function is called after function readPaths has been executed.
	 * @param {function} fnCallback(oResponse, oEntitiyMetadata, oMessageObject) 
	 */
	this.readPaths = function(fnCallback) {		
		var oRequest = {
				method : "GET"
		};
		sendRequest(oRequest, fnRequestCallback.bind(this));
		
		function fnRequestCallback(oResponse, oEntityTypeMetadata, oMessageObject) {
			if(!oMessageObject && oResponse && oResponse.data && oResponse.data.results) {
				for( var i in oResponse.data.results) {
					oResponse.data.results[i].StructuredAnalysisPath = JSON.parse(oResponse.data.results[i].StructuredAnalysisPath);
				}
			} else if(!oMessageObject || oResponse.statusCode !== 200 || oResponse.statusText !== "OK" ) {
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : '5211'
				});	
			}
			if(oMessageObject) {
				fnCallback({ oResponse : oResponse, status: "failed"}, oEntityTypeMetadata, oMessageObject);
			} else {
				fnCallback({ paths : oResponse.data.results, status: "successful" }, oEntityTypeMetadata, oMessageObject);			
			}
		}
	};
	
	/**
	 * @description Deletes a path. 
	 * @param {String} sAnalysisPathId GUID to identify the path
	 * @param {function} fnCallback(oResponse, oEntitiyMetadata, oMessageObject) 
	 */
	this.deletePath = function(sAnalysisPathId, fnCallback) {
		var oRequest = {
				method : "DELETE"
		};
		sendRequest(oRequest, fnRequestCallback.bind(this), sAnalysisPathId);
		
		function fnRequestCallback(oResponse, oEntityTypeMetadata, oMessageObject) {
			if ((oResponse.statusCode !== 204 || oResponse.statusText !== "No Content" ) && (!oMessageObject)) {
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : 5201
				});
				oMessageObject.setPrevious(oInject.messageHandler.createMessageObject({
					code : 5200,
					aParameters : [oResponse.statusCode, oResponse.statusText]
				}));
			}
			if(oMessageObject) {
				fnCallback({ oResponse : oResponse, status: "failed"}, oEntityTypeMetadata, oMessageObject);
			} else {
				fnCallback({ status: "successful" }, oEntityTypeMetadata, oMessageObject);
			}
		}
	};
	
	/**
	 * @description Modifies a data object based on the state of the current path and overwrites the old path on the server. 
	 * @param {String} sAnalysisPathId GUID to identify the path
	 * @param {String} sName name of the path
	 * @param {function} fnCallback(oResponse, oEntitiyMetadata, oMessageObject)
     * @param {object} [oExternalObject] Object containing non-core objects to be serialized
     * @param {object} [oExternalObject.pathContextHandler] Serializable PathContextHandler
	 */
	this.modifyPath = function(sAnalysisPathId, sName, fnCallback, oExternalObject) {
		var oSerializablePath = oInject.coreApi.serializePath();
        if(oExternalObject){
            oSerializablePath.pathContextHandler = oExternalObject.pathContextHandler;
        }
		var oStructuredPath = getStructuredAnalysisPath(oSerializablePath);
		var oRequest = {
				data : {
					AnalysisPathName : sName,
					LogicalSystem : oInject.coreApi.getLogicalSystem(),
					ApplicationConfigurationURL : oInject.coreApi.getApplicationConfigurationURL(),
					SerializedAnalysisPath : JSON.stringify(oSerializablePath),
					StructuredAnalysisPath : JSON.stringify(oStructuredPath)
				},
				method : "PUT"
		};
		sendRequest(oRequest, fnRequestCallback.bind(this), sAnalysisPathId);
		
		function fnRequestCallback(oResponse, oEntityTypeMetadata, oMessageObject) {
			 if ((oResponse.statusCode !== 204 || oResponse.statusText !== "No Content") && (!oMessageObject)) {
					oMessageObject = oInject.messageHandler.createMessageObject({
						code : 5201
					});
					oMessageObject.setPrevious(oInject.messageHandler.createMessageObject({
						code : 5200,
						aParameters : [oResponse.statusCode, oResponse.statusText]
					}));
			 }
			 if(oMessageObject) {
				fnCallback({ oResponse : oResponse, status: "failed"}, oEntityTypeMetadata, oMessageObject);
			 } else {
				fnCallback({ AnalysisPath : sAnalysisPathId,  status: "successful" }, oEntityTypeMetadata, oMessageObject);
			 }
		}
	};
	
	/**
	 * @description Gets the stored path and deserializes it in the runtime environment. As a result, the current path is replaced
	 * by the path, that has been loaded from the server.
	 * @param {String} sAnalysisPathId GUID to identify the path
	 * @param {function} fnCallback(oResponse, oEntitiyMetadata, oMessageObject) 
	 * @param {Number} nActiveStep active step of current path
	 */
	this.openPath = function(sAnalysisPathId, fnCallback, nActiveStep) {
		var oRequest = {
				method : "GET"
		};		
		sendRequest(oRequest, fnRequestCallback.bind(this), sAnalysisPathId);
		
		function fnRequestCallback(oResponse, oEntityTypeMetadata, oMessageObject) {
			var oMessageObjectForUI;
			if(!oMessageObject && oResponse && oResponse.statusCode === 200 && oResponse.data && oResponse.data.SerializedAnalysisPath) {
				oResponse.data.SerializedAnalysisPath = JSON.parse(oResponse.data.SerializedAnalysisPath);
				oMessageObject = createPathFromReceivedData(oResponse.data, nActiveStep);	
			}
			if (oMessageObject) {
				oMessageObjectForUI = oInject.messageHandler.createMessageObject({
					code : '5210'
				});
				oMessageObjectForUI.setPrevious(oMessageObject);
				oInject.messageHandler.putMessage(oMessageObjectForUI);
			}
			if(oMessageObjectForUI) {
				fnCallback({ oResponse : oResponse, status: "failed"}, oEntityTypeMetadata, oMessageObjectForUI);
			} else {
				fnCallback( { path : oResponse.data,  status: "successful" }, oEntityTypeMetadata, oMessageObjectForUI);
			}
		}
	};

	function sendRequest(oRequest, fnLocalCallback, sAnalysisPathId) {
		var sUrl = getPersistenceServiceUrl();
		switch(oRequest.method) {
		case "GET":
			if(!oRequest.data && sAnalysisPathId) {
				oRequest.requestUri = sUrl + "('" + sAnalysisPathId + "')";	
			} else if(!oRequest.data && !sAnalysisPathId) {
				oRequest.requestUri = sUrl + "?$select=AnalysisPath,AnalysisPathName,StructuredAnalysisPath,CreationUTCDateTime,LastChangeUTCDateTime&$filter=(LogicalSystem%20eq%20'"+oInject.coreApi.getLogicalSystem()+"'%20and%20ApplicationConfigurationURL%20eq%20'"+oInject.coreApi.getApplicationConfigurationURL()+"')&$orderby=LastChangeUTCDateTime%20desc";
			}
			break;
		case "POST":
			if(oRequest.data && !sAnalysisPathId) {
				oRequest.requestUri = sUrl;
			}
			break;
		case "DELETE":
			if(!oRequest.data && sAnalysisPathId) {
				oRequest.requestUri = sUrl + "('" + sAnalysisPathId + "')";				
			}
			break;
		case "PUT":
			if(oRequest.data && sAnalysisPathId) {
				oRequest.requestUri = sUrl + "('" + sAnalysisPathId + "')";
			}
			break;
		default:
			break;
		}
		oRequest.headers = {
			"x-csrf-token" : oInject.coreApi.getXsrfToken(getPersistenceServiceUrl())
		};
		var fnSuccess = function(oData, oResponse) {
			fnLocalCallback(oResponse, getMetadata(), undefined);
		};
		var fnError = function(oError) {
			var oMessageObject;
			if(oError.messageObject && oError.messageObject.getCode && oError.messageObject.getCode() == 5021) { // timeout
				fnLocalCallback(oError, getMetadata(), oError.messageObject);
				return;
			}
			var sServerSideCode = checkForErrorCode(oError.response.body); // server side error code check				
			if (sServerSideCode !== undefined){
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : sServerSideCode
				});
			}
			if(oError.response.body.match("274")) { // Inserted value too large; probably maximum length of analysis path name exceeded
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : '5207'
				});
			}
			if(oError.response.statusCode === 400) { // Bad request; data is structured incorrectly
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : '5203'
				});
			}
			if(oError.response.statusCode === 403) { // Access forbidden; insufficient privileges
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : '5206'
				});
			}
			if(oError.response.statusCode === 405) { // Method not allowed; probably incorrect URL parameter.
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : '5202'
				});
			}
			if (oError.response.statusCode === 404) { // Error during path persistence; request to server can not be proceed due to invalid ID
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : '5208'
				});
			}
			if(!oMessageObject && oError.response.statusCode === 500) { // Server error during processing a path: {0} {1}
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : '5200',
					aParameters : [ oError.response.statusCode, oError.response.statusText ]
				});
			}
			if(!oMessageObject) { // Unknown server error
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : '5201'
				});
			}
			oInject.messageHandler.putMessage(oMessageObject);
			// signature: oResponse, oEntityTypeMetadata, oMessageObject
			fnLocalCallback(oError, getMetadata(), oMessageObject);
		};
		oInject.coreApi.odataRequest(oRequest, fnSuccess, fnError);
	}

	function checkForErrorCode(oError) {
		var errorCode = oError.match("52[0-9]{2}");
		if(errorCode) {
			return errorCode[0]; 
		} else {
			return undefined;
		}
	}
	function createPathFromReceivedData(oReceivedData, nActiveStep) {
		var fnPutMessageOrig;
		var oMessageObject;
		var oOriginalContext = oInject.coreApi.getContext();

		function restorePutMessage() {
			oInject.messageHandler.putMessage = fnPutMessageOrig;
		}
		function redefinePutMessage() {
			fnPutMessageOrig = oInject.messageHandler.putMessage;
			oInject.messageHandler.putMessage = function(oMessageObject) {
				throw oMessageObject;
			};
		}
		if (nActiveStep !== undefined) {
			oReceivedData.SerializedAnalysisPath.path.indicesOfActiveSteps[0] = nActiveStep;
		}
		oInject.coreApi.resetPath(true);
		redefinePutMessage();
		try {
			oInject.coreApi.deserializePath(oReceivedData.SerializedAnalysisPath);
		} catch (oError) {
			oInject.coreApi.restoreOriginalPath();
			oInject.coreApi.setContext(oOriginalContext);
			oMessageObject = convertErrorToMessageObject(oError);
		} finally {
			restorePutMessage();
		}
		return oMessageObject;
	}
	function convertErrorToMessageObject(oError) {
		var oMessageObject;
		if (oError.type && oError.type === "messageObject") {
			oMessageObject = oError;
		} else {
			oMessageObject = new oInject.coreApi.MessageObject({
				code : sap.apf.core.constants.message.code.errorUnknown
			//configure in message definition
			});
			oMessageObject.setSeverity(sap.apf.core.constants.message.severity.error);
			oMessageObject.setMessage("Unknown exception caught " + oError.message);
		}
		return oMessageObject;
	}
	function getPersistenceServiceUrl() {
		var oPersistencePathConfig = oInject.coreApi.getPersistenceConfiguration().path;
		var sService = oPersistencePathConfig.service + "/" + oPersistencePathConfig.entityType;
		return sService;
	}
	function getStructuredAnalysisPath(oSerializablePath) {
		var aStructuredSteps = [];
		var aSteps = oSerializablePath.path.steps;
		var StructuredAnalysisPath;
		for( var i in aSteps) {
			aStructuredSteps.push({
				stepId : aSteps[i].stepId,
				selectedRepresentationId : aSteps[i].binding.selectedRepresentationId
			});
		}
		StructuredAnalysisPath = {
			steps : aStructuredSteps,
			indexOfActiveStep : oSerializablePath.path.indicesOfActiveSteps[0]
		};
		return StructuredAnalysisPath;
	}
	function getMetadata() {
		var oConfig = oInject.coreApi.getPersistenceConfiguration();
		var oEntityTypeMetadata = oInject.coreApi.getEntityTypeMetadata(oConfig.path.service, oConfig.path.entityType);
		return oEntityTypeMetadata;
	}
};

}; // end of sap/apf/core/persistence.js
if ( !jQuery.sap.isDeclared('sap.apf.core.representationTypes') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.representationTypes");


/**
 * @memberOf sap.apf.core
 * @description Default configuration of representation types. Can be overwritten in the analytical configuration file.
 * @returns {object[]} representation types array with configuration objects for representation types
 */
sap.apf.core.representationTypes = function() {

	return [
			{
				"type" : "representationType",
				"id" : "LineChart",
				"constructor" : "sap.apf.ui.representations.lineChart",
				"picture" : "sap-icon://line-chart",
				"label" : {
					"type" : "label",
					"kind" : "text",
					"key" : "LineChart"
				}
			},
			{
				"type" : "representationType",
				"id" : "ColumnChartSorted",
				"constructor" : "sap.apf.ui.representations.columnChart",
				"picture" : "sap-icon://vertical-bar-chart",
				"label" : {
					"type" : "label",
					"kind" : "text",
					"key" : "ColumnChartSorted"
				}

			},

			{
				"type" : "representationType",
				"id" : "ColumnChartClustered",
				"constructor" : "sap.apf.ui.representations.columnChart",
				"picture" : "sap-icon://bar-chart",
				"label" : {
					"type" : "label",
					"kind" : "text",
					"key" : "ColumnChartClustered"
				}

			},
			{
				"type" : "representationType",
				"id" : "ColumnChartClusteredSorted",
				"constructor" : "sap.apf.ui.representations.columnChart",
				"picture" : "sap-icon://vertical-bar-chart-2",
				"label" : {
					"type" : "label",
					"kind" : "text",
					"key" : "ColumnChartClusteredSorted"
				}

			},
			{
				"type" : "representationType",
				"id" : "ColumnChart",
				"constructor" : "sap.apf.ui.representations.columnChart",
				"picture" : "sap-icon://bar-chart",
				"label" : {
					"type" : "label",
					"kind" : "text",
					"key" : "ColumnChart"
				}
			},
			{
				"type" : "representationType",
				"id" : "ScatterPlotChart",
				"constructor" : "sap.apf.ui.representations.scatterPlotChart",
				"picture" : "sap-icon://scatter-chart",
				"label" : {
					"type" : "label",
					"kind" : "text",
					"key" : "ScatterPlotChart"
				}
			},
			{
				"type" : "representationType",
				"id" : "TableRepresentation",
				"constructor" : "sap.apf.ui.representations.table",
				"picture" : "sap-icon://table-chart",
				"label" : {
					"type" : "label",
					"kind" : "text",
					"key" : "TableRepresentation"
				}
			},
			{
				"type" : "representationType",
				"id" : "StackedColumnChart",
				"constructor" : "sap.apf.ui.representations.stackedColumnChart",
				"picture" : "sap-icon://vertical-stacked-chart",
				"label" : {
					"type" : "label",
					"kind" : "text",
					"key" : "StackedColumnChart"
				}
			},
			{
				"type" : "representationType",
				"id" : "StackedColumnSorted",
				"constructor" : "sap.apf.ui.representations.stackedColumnChart",
				"picture" : "sap-icon://upstacked-chart",
				"label" : {
					"type" : "label",
					"kind" : "text",
					"key" : "StackedColumnSorted"
				}

			},

			{
				"type" : "representationType",
				"id" : "PieChart",
				"constructor" : "sap.apf.ui.representations.pieChart",
				"picture" : "sap-icon://pie-chart",
				"label" : {
					"type" : "label",
					"kind" : "text",
					"key" : "PieChart"
				}
			},
			{
				"type" : "representationType",
				"id" : "PercentageStackedColumnChart",
				"constructor" : "sap.apf.ui.representations.percentageStackedColumnChart",
				"picture" : "sap-icon://full-stacked-column-chart",
				"label" : {
					"type" : "label",
					"kind" : "text",
					"key" : "PercentageStackedColumnChart"
				}
			},
			{
				"type" : "representationType",
				"id" : "BubbleChart",
				"constructor" : "sap.apf.ui.representations.bubbleChart",
				"picture" : "sap-icon://bubble-chart",
				"label" : {
					"type" : "label",
					"kind" : "text",
					"key" : "BubbleChart"
				}
			}];

};

}; // end of sap/apf/core/representationTypes.js
if ( !jQuery.sap.isDeclared('sap.apf.core.utils.checkForTimeout') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */


jQuery.sap.declare('sap.apf.core.utils.checkForTimeout');


/**
 * @description tests, whether the server response is time out. Returns a message object in case of time out.
 * @param {object} oServerResponse
 * @returns {sap.apf.core.MessageObject|undefined}
 */
sap.apf.core.utils.checkForTimeout = function(oServerResponse) {
	var status;
	var oMessage;
	var redirect = false;
	//OData timeout redirect xse
	if(oServerResponse && oServerResponse.headers && oServerResponse.headers['x-sap-login-page']){
		redirect = true;
	}
	//ajax timeout redirect xse
	if(oServerResponse && oServerResponse.getResponseHeader && oServerResponse.getResponseHeader('x-sap-login-page') !== null) {
		redirect = true;
	}
	//set status code from OData Response
	if (oServerResponse && oServerResponse.status) {
		status = oServerResponse.status;
	}
	//set status code from Ajax Response
	if (oServerResponse && oServerResponse.response && oServerResponse.response.statusCode) {
		status = oServerResponse.response.statusCode;
	}
	if (status === 303 || status === 401 || status === 403 || redirect) {
		oMessage = new sap.apf.core.MessageObject({
			code : "5021"
		});
	}
	return oMessage;
};


}; // end of sap/apf/core/utils/checkForTimeout.js
if ( !jQuery.sap.isDeclared('sap.apf.core.utils.uriGenerator') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.utils.uriGenerator");

/**
 * @descriptions Module for uri generation and location helper functions for the resource location
 */
sap.apf.core.utils.uriGenerator = {};

/**
 * @memberOf sap.apf.core.utils.uriGenerator
 * @description Returns the absolute URL path of the service root. The slash as last character is fixed, if not existing.
 * @param {String} sPathToRoot Absolute Path to the service root like /sap/hba/apps/wca/s/odata/wca.xsodata/ .
 * @returns {String}
 */
sap.apf.core.utils.uriGenerator.getAbsolutePath = function(sPathToRoot) {
	if (sPathToRoot.slice(-1) === '/') {
		return sPathToRoot;
	} else {
		return sPathToRoot + "/";
	}
};

/**
 * @memberOf sap.apf.core.utils.uriGenerator
 * @param {string} sPathToServiceDocument 
 * @description Returns the relative url path of the oadata service.
 * @returns {String}
 */
sap.apf.core.utils.uriGenerator.getODataPath = function(sPathToServiceDocument) {
	var aSplitt = sPathToServiceDocument.split('/');
	var i;
	var aSplittContent = [];
	for(i = 0; i < aSplitt.length; i++) {
		if (aSplitt[i] !== "") {
			aSplittContent.push(aSplitt[i]);
		}
	}
	var sReturn = '';
	var len = aSplittContent.length - 1;
	for(i = 0; i < len; i++) {
		sReturn = sReturn + '/' + aSplittContent[i];
	}
	return sReturn + '/';
};
/**
 * @memberOf sap.apf.core.utils.uriGenerator
 * @description gets the location of the apf libary. sap.apf.core.utils.uriGenerator is required for loading texts, images and so on.
 * @returns {String}
 */
sap.apf.core.utils.uriGenerator.getApfLocation = function() {
	return jQuery.sap.getModulePath("sap.apf") + '/';
};
/**
 * @memberOf sap.apf.core.utils.uriGenerator
 * @description builds a URI based on parameters
 * @param {sap.apf.core.MessageHandler} oMsgHandler
 * @param {string} sEntityType
 * @param [aSelectProperties]
 * @param {object} oFilter
 * @param {object} oParameter - HANA XSE parameter entity set parameters
 * @param {object} [sortingFields]
 * @param {object} oPaging - values of properties 'top','skip' and 'inlineCount' are evaluated and added to '$top','$skip' and '$inlinecount' URI string parameters if available 
 * @param {string} sFormat of HTTP response,e.g. 'json' or 'xml'. If omitted 'json' is taken as default.
 * @param {function} [fnFormatValue] callback method to format the values 
 * @param {sParameterSuffix} Suffix after the parameter - old default is "Results"
 * @returns {string} complete URI
 */
sap.apf.core.utils.uriGenerator.buildUri = function(oMsgHandler, sEntityType, aSelectProperties, oFilter, oParameter, sortingFields, oPaging, sFormat, fnFormatValue, sUriSuffix) {
	var sReturn = "";
	sReturn += sEntityType;
	sReturn += addParamsToUri(oParameter,sUriSuffix);
	sReturn = sReturn + "?";
	sReturn += addSelectPropertiesToUri(aSelectProperties);
	sReturn += addFilterToUri(oFilter, fnFormatValue);
	sReturn += addSorting(sortingFields, aSelectProperties);
	sReturn += addPaging(oPaging);
	sReturn += addFormatToUri(sFormat);
	return sReturn;
	function addParamsToUri(oParameter,sUriSuffix) {
		var sReturn = '';
		var bParametersExist = false;
		var sParameter;
		for(sParameter in oParameter) {
			if (!bParametersExist) {
				sReturn += '(';
				bParametersExist = true;
			}
			else {
				sReturn += ',';
			}
			sReturn += sParameter.toString() + '=' + oParameter[sParameter];
		}
		if (bParametersExist) {
			sReturn += ')/';
		}
		sReturn += sUriSuffix || '';	
		return sReturn;
	}
	function addSelectPropertiesToUri(aSelectProperties) {
		if (!aSelectProperties[0]) {
			return '';
		}
		var sResult = "$select=";
		for( var field in aSelectProperties) {
			sResult += jQuery.sap.encodeURL(sap.apf.utils.escapeOdata(aSelectProperties[field]));
			if (field < aSelectProperties.length - 1) {
				sResult += ",";
			}
		}
		return sResult;
	}
	function addFilterToUri(oFilter, fnFormatValue) {
		if (!(oFilter && oFilter instanceof sap.apf.core.utils.Filter)) {
			return '';
		}
		var sFilterValues = oFilter.toUrlParam( { formatValue : fnFormatValue });
		if (sFilterValues === "" || sFilterValues === '()' ) {
			return '';
		}	
		return '&$filter=' + sFilterValues;	
	}
	function addSorting(sortingFields, aSelectProperties) {
		var sOrderByValues = '';
		var sSingleValue = '';
		if (!sortingFields) {
			return '';
		}
		switch (true) {
			case jQuery.isArray(sortingFields):
				for( var i = 0; i < sortingFields.length; i++) {
					sSingleValue = makeOrderByValue(sortingFields[i], aSelectProperties);
					if (sOrderByValues.length > 0 && sSingleValue.length > 0) {
						sOrderByValues += ',';
					}
					sOrderByValues += sSingleValue;
				}
				break;
			case jQuery.isPlainObject(sortingFields):
				sOrderByValues += makeOrderByValue(sortingFields, aSelectProperties);
				break;
			case typeof sortingFields === 'string':
				sOrderByValues += makeOrderByValue({
					property : sortingFields
				}, aSelectProperties);
				break;
		}
		if (sOrderByValues.length > 0) {
			return "&$orderby=" + sOrderByValues;
		} else {
			return '';
		}
		function makeOrderByValue(oOrderBy, aSelectProperties) {
			var sValue = '';
			if (jQuery.inArray(oOrderBy.property, aSelectProperties) > -1) {
				sValue += oOrderBy.property;
				if (oOrderBy.descending === true) {
					sValue += ' desc';
				} else {
					sValue += ' asc';
				}
			} else {
				oMsgHandler.putMessage(oMsgHandler.createMessageObject({
					code : '5019',
					aParameters : [ sEntityType, oOrderBy.property ]
				}));
			}
			return jQuery.sap.encodeURL(sValue);
		}
	}
	function addPaging(oPaging) {
		
		function checkPropertyOptionsConsistency(oPaging) {
			var aPropertyNames, i;
			aPropertyNames = Object.getOwnPropertyNames(oPaging);
			for (i = 0; i < aPropertyNames.length;i++) {
				if (aPropertyNames[i] !== 'top' && aPropertyNames[i] !== 'skip' && aPropertyNames[i] !== 'inlineCount') {
					oMsgHandler.putMessage(oMsgHandler.createMessageObject({
						code : '5032',
						aParameters : [ sEntityType, aPropertyNames[i] ]
					}));
				}
			}
		}
		
		var sReturn = '';
		
		if (!oPaging) {
			return sReturn;
		} else {
			
			checkPropertyOptionsConsistency(oPaging);
					
			if (oPaging.top) {
				sReturn += '&$top=' + oPaging.top;
			}
			if (oPaging.skip) {
				sReturn += '&$skip=' + oPaging.skip;
			}
			if (oPaging.inlineCount === true) {
				sReturn += '&$inlinecount=allpages';
			}
			return sReturn;
		}
	}
	function addFormatToUri(sFormat) {
		if (!sFormat) {
			sFormat = 'json';
		}
		return '&$format=' + sFormat;
	}
};

}; // end of sap/apf/core/utils/uriGenerator.js
if ( !jQuery.sap.isDeclared('sap.apf.library') ) {
/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.apf (1.24.2)
 */
jQuery.sap.declare("sap.apf.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * Analysis Path Framework (by SAP)
 *
 * @namespace
 * @name sap.apf
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.apf",
  dependencies : ["sap.ui.core"],
  types: [],
  interfaces: [],
  controls: [],
  elements: [],
  noLibraryCSS: true,
  version: "1.24.2"});


}; // end of sap/apf/library.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.controls.draggableCarousel.DraggableCarousel') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.apf.ui.controls.draggableCarousel.DraggableCarousel");
(function(un) {
	"use strict";
	var isTouchDevice;
	var deviceDetect = (function() {
		isTouchDevice = window.hasOwnProperty('ontouchstart') || window.hasOwnProperty('onmsgesturechange'); //first one works on most browsers, second one works on ie10 
	}());
	sap.apf.ui.controls.draggableCarousel.DraggableCarousel = function(opts) {
		var options = opts || {};
		this.eleRefs = {
			blocks : [],
			containerEle : opts.containerEle
		};
		this._editState = options.editable === un ? true : options.editable;
		this._dragState = this._editState;
		this._removeState = this._editState;
		this.styles = {
			containerHeight : options.containerHeight,
			containerWidth : options.containerWidth,
			blockHeight : options.blockHeight,
			blockWidth : options.blockWidth,
			blockMargin : options.blockMargin,
			separatorHeight : options.separatorHeight,
			removeIconHeight : options.removeIconHeight
		};
		this.elems = {
			separator : options.separator,
			removeIcon : options.removeIcon
		};
		this.callbacks = {
			onBeforeDrag : options.onBeforeDrag,
			onAfterDrop : options.onAfterDrop,
			onAfterRemove : options.onAfterRemove,
			onAfterSelect : options.onAfterSelect
		};
		this.eleRefs.containerEle = this._drawSkeleton();
		this._initDimensions();
		this._isMouseDown = false;
	};
	sap.apf.ui.controls.draggableCarousel.DraggableCarousel.prototype = {
		_initDimensions : function() {
			var sMargin = this.styles.blockMargin;
			this._blockMargin = parseInt(sMargin.replace("px"), 10);
			var sBlockHeight = this.styles.blockHeight;
			this._blockHeight = parseInt(sBlockHeight.replace("px"), 10);
			this._blockTotalHeight = this._blockHeight + (2 * this._blockMargin);
			this._separatorHeight = 0;
			if (this.elems.separator !== un) {
				var sSeparatorHeight = this.styles.separatorHeight;
				this._separatorHeight = parseInt(sSeparatorHeight.replace("px"), 10);
			}
			this._mFactor = this._blockTotalHeight + this._separatorHeight;
		},
		_drawSkeleton : function() {
			var containerEle;
			if (this.eleRefs.containerEle === un) {
				containerEle = document.createElement('div');
			} else {
				containerEle = this.eleRefs.containerEle;
			}
			containerEle.style.cssText += this._getContainerStyles();
			containerEle.classList.add('DnD-container');
			var self = this;
			var tapEndEvent = isTouchDevice ? "touchend" : "mouseup";
			document.addEventListener(tapEndEvent, function(e) {
				self._onMouseUp(e, self);
			});
			return containerEle;
		},
		_getBlockWrapper : function(blockObj) {
			var block = blockObj.blockElement;
			var blocks = this.eleRefs.blocks;
			var dragState = blockObj.dragState === un ? true : blockObj.dragState;
			var dropState = blockObj.dropState === un ? true : blockObj.dropState;
			var removable = blockObj.removable === un ? true : blockObj.removable;
			var blockWrapper = document.createElement('div');
			blockWrapper.style.cssText += this._getBlockStyles();
			blockWrapper.setAttribute('class', 'DnD-block');
			blockWrapper.setAttribute('drag-state', dragState);
			blockWrapper.setAttribute('drop-state', dropState);
			if (removable) {
				var removeIconEle = this._getRemoveIconEle();
				blockWrapper.appendChild(removeIconEle);
			}
			var self = this;
			var tapEvent = isTouchDevice ? "touchstart" : "mousedown";
			blockWrapper.addEventListener(tapEvent, function(e) {
				self._onMouseDown(e, self, this);
			});
			var tapMoveEvent = isTouchDevice ? "touchmove" : "mousemove";
			blockWrapper.addEventListener(tapMoveEvent, function(e) {
				window.clearTimeout(self._TIMEOUTID);
			});
			
			//Select the block using space + enter key
			this._keypress(blockWrapper, 13, function (ele, e) {
				var selectIndex = blocks.indexOf(ele);
				self.callbacks.onAfterSelect.apply(ele, [selectIndex]);
			});
			
			this._keypress(blockWrapper, 32, function (ele, e) {
				var selectIndex = blocks.indexOf(ele);
				self.callbacks.onAfterSelect.apply(ele, [selectIndex]);
			});
			
			//Home + End Key - focus first and last block
			this._keypress(blockWrapper, 36, function (ele, e) {
				jQuery(blocks).removeAttr("tabindex");
				jQuery(blocks).attr("tabindex", -1);
				jQuery(blocks[0]).attr("tabindex", 0);
				jQuery(blocks[0]).focus();
			});
			
			this._keypress(blockWrapper, 35, function (ele, e) {
				jQuery(blocks).removeAttr("tabindex");
				jQuery(blocks).attr("tabindex", -1);
				jQuery(blocks[blocks.length - 1]).attr("tabindex", 0);
				jQuery(blocks[blocks.length - 1]).focus();
			});
			
			//Check the removable state 
			if(removable === true){
				//Delete Event on press of the block
				this._keypress(blockWrapper, 46, function (ele, e) {
					var removeIndex = blocks.indexOf(ele);
					self.removeBlock(removeIndex, self.callbacks.onAfterRemove);
					
					//Tab Index Grouping
					self._grouping(blocks);
					
					//Set focus to tab-index active
					jQuery(blocks).parent().wrap("<div>").find("[tabindex='0']").focus();
				});
			}
			
			blockWrapper.appendChild(block);
			return blockWrapper;
		},
		_getSeparatorEle : function() {
			var separator = document.createElement('div');
			separator.style.cssText += this._getSeparatorStyles();
			separator.setAttribute('class', 'DnD-separator');
			separator.innerHTML = this.elems.separator.outerHTML;
			return separator;
		},
		_getRemoveIconEle : function() {
			var removeIcon = this.elems.removeIcon;
			var removeIconWrapper = document.createElement('div');
			removeIconWrapper.style.cssText += this._getRemoveIconStyles();
			removeIconWrapper.setAttribute('class', 'DnD-removeIconWrapper');
			removeIconWrapper.innerHTML = removeIcon.outerHTML;
			var self = this;
			var tapEvent = isTouchDevice ? "touchstart" : "mousedown";
			removeIconWrapper.addEventListener(tapEvent, function(e) {
				self._onRemoveBlock(e, self, this);
			});
			return removeIconWrapper;
		},
		addBlock : function(blockObj) {
			if (blockObj instanceof Array) {
				var i;
				for(i = 0; i < blockObj.length; i++) {
					this.addBlock(blockObj[i]);
				}
				return;
			}
			var blockWrapper = this._getBlockWrapper(blockObj);
			var blockIndex = this.eleRefs.blocks.length;
			var blocks = this.eleRefs.blocks;
			var self = this;
			var y = blockIndex * this._mFactor;
			blockWrapper.style.cssText = blockWrapper.style.cssText + this._getTransformCss(y);
			this.eleRefs.blocks.push(blockWrapper);
			var container = this.eleRefs.containerEle;
			container.appendChild(blockWrapper);
			this._setHorizontalBlockMargin();
			if (this.elems.separator !== un) {
				var separator = this._getSeparatorEle();
				var separatorYValue = y + this._blockHeight + 2 * this._blockMargin;
				separator.style.cssText = separator.style.cssText + this._getTransformCss(separatorYValue);
				container.appendChild(separator);
			}
	
			//Tab Index Grouping
			this._grouping(blocks);
		},
		swapBlocks : function(fromIndex, toIndex) {
			var fromBlock = this.eleRefs.blocks[fromIndex];
			var toBlock = this.eleRefs.blocks[toIndex];
			if ((fromBlock.getAttribute('drag-state') !== "true" && fromBlock.getAttribute('drop-state') !== "true") || (toBlock.getAttribute('drag-state') !== "true" && toBlock.getAttribute('drop-state') !== "true")) {
				return false;
			}
			var fromBlockYValue = fromIndex * this._mFactor;
			var fromBlockTopValue = fromBlockYValue;
			var fromBlockBottomValue = fromBlockTopValue + this._blockHeight + (2 * this._blockMargin);
			var toBlockYValue = toIndex * this._mFactor;
			var toBlockTopValue = toBlockYValue;
			var toBlockBottomValue = toBlockTopValue + this._blockHeight + (2 * this._blockMargin);
			var containerEle = document.getElementsByClassName('scrollContainerEle')[0] ? document.getElementsByClassName('scrollContainerEle')[0] : this.eleRefs.containerEle; // Scroll Container Hack
			var scrollValue = containerEle.scrollTop;
			if ((fromIndex > toIndex) && toBlockTopValue < containerEle.scrollTop) {
				scrollValue = toBlockTopValue;
			}
			if ((fromIndex < toIndex) && toBlockBottomValue - containerEle.offsetHeight > containerEle.scrollTop) {
				scrollValue = toBlockBottomValue - containerEle.offsetHeight;
			}
			var prevScrollTop;
			var damping = 40;
			var easeOutLoop = window.setInterval(function() {
				containerEle.scrollTop += (scrollValue - containerEle.scrollTop) / damping;
				if (containerEle.scrollTop === prevScrollTop) {
					window.clearInterval(easeOutLoop);
				}
				prevScrollTop = containerEle.scrollTop;
			}, 1000 / 60);
			this._setTransformYValue(fromBlock, toBlockYValue);
			this._setTransformYValue(toBlock, fromBlockYValue);
			this._swapArray(this.eleRefs.blocks, fromIndex, toIndex);
			return true;
		},
		insertBlock : function(blockObj, index) {
			var blocks = this.eleRefs.blocks;
			blocks.push({});
			var i;
			for(i = blocks.length - 1; i > index; i--) {
				blocks[i] = blocks[i - 1];
				var yValue = i * this._mFactor;
				this._setTransformYValue(blocks[i], yValue);
			}
			var blockWrapper = this._getBlockWrapper(blockObj);
			blocks[i] = blockWrapper;
			var y = index * this._mFactor;
			blockWrapper.style.cssText = blockWrapper.style.cssText + this._getTransformCss(y);
			var container = this.eleRefs.containerEle;
			container.appendChild(blockWrapper);
			this._setHorizontalBlockMargin();
			if (this.elems.separator !== un) {
				var separator = this._getSeparatorEle();
				var separatorYValue = y + this._blockHeight + 2 * this._blockMargin;
				separator.style.cssText = separator.style.cssText + this._getTransformCss(separatorYValue);
				container.appendChild(separator);
			}
			
			//Tab Index Grouping
			this._grouping(blocks);
		},
		removeBlock : function(index, callback) {
			var blocks = this.eleRefs.blocks;
			var containerEle = this.eleRefs.containerEle;
			var i;
			var removeBlock = blocks[index];
			containerEle.removeChild(removeBlock);
			for(i = index; i < blocks.length - 1; i++) {
				blocks[i] = blocks[i + 1];
				var yValue = i * this._mFactor;
				this._setTransformYValue(blocks[i], yValue);
			}
			blocks.pop();
			if (this.elems.separator !== un) {
				var separators = containerEle.querySelectorAll('.DnD-separator');
				var lastSeparator = separators[separators.length - 1];
				containerEle.removeChild(lastSeparator);
			}
			callback.apply(containerEle, [ index ]);
			
			//Tab Index Grouping
			this._grouping(blocks);
		},
		placeAt : function(id) {
			var ele = document.getElementById(id);
			ele.appendChild(this.eleRefs.containerEle);
			this._setHorizontalBlockMargin();
		},
		getEditable : function() {
			return this._editState;
		},
		setEditable : function(editState) {
			this._editState = editState;
			this._setDragState(editState);
			this._setRemoveState(editState);
		},
		_setDragState : function(dragState) {
			this._dragState = dragState;
		},
		_setRemoveState : function(removeState) {
			this._removeState = removeState;
			var removeIcons = this.eleRefs.containerEle.querySelectorAll('.DnD-removeIconWrapper');
			var displayCss;
			if (removeState) {
				displayCss = "display : block";
			} else {
				displayCss = "display : none";
			}
			var i;
			for(i = 0; i < removeIcons.length; i++) {
				removeIcons[i].style.cssText += displayCss;
			}
		},
		_getContainerStyles : function() {
			var sStyle = [ "height : ", this.styles.containerHeight, ";width : ", this.styles.containerWidth, "overflow : auto; position : relative" ].join("");
			return sStyle;
		},
		_getBlockStyles : function() {
			if (this.styles.horizontalBlockMargin === un) {
				var containerWidth = this.eleRefs.containerEle.clientWidth;
				var blockWidth = this.eleRefs.blocks[0] === un ? 0 : this.eleRefs.blocks[0].clientWidth;
				this.styles.horizontalBlockMargin = ((containerWidth - blockWidth) / 2) + "px";
			}
			var sStyle = [ "height : ", this.styles.blockHeight, ";width : ", this.styles.blockWidth, ";margin : ", this.styles.blockMargin, " ", this.styles.horizontalBlockMargin, ";position : absolute" ].join("");
			return sStyle;
		},
		_getSeparatorStyles : function() {
			var sStyle = [ "height : ", this.styles.separatorHeight, ";width : 100%", ";position : absolute" ].join("");
			return sStyle;
		},
		_getRemoveIconStyles : function() {
			var sStyle = [ "height : ", this.styles.removeIconHeight, ";width : ", this.styles.removeIconHeight, ";float : right", ";margin : -10px -13px -10px 0", ";z-index : 2", ";position : relative", ";cursor : pointer" ].join("");
			if (this._removeState) {
				sStyle += ";display : block";
			} else {
				sStyle += ";display : none";
			}
			return sStyle;
		},
		_getTransformCss : function(yValue) {
			var sYValue = yValue + "px";
			var transformPropertyStrings = [ "transform", "-webkit-transform", "-moz-transform", "-ms-transform", "-o-transform" ];
			var cssString = "";
			var i;
			for(i = 0; i < transformPropertyStrings.length; i++) {
				cssString += transformPropertyStrings[i] + ": translate3d(0px," + sYValue + ", 0px); ";
			}
			return cssString;
		},
		_setTransformYValue : function(ele, yValue) {
			var vendorProperty = [ {
				"WebkitTransform" : "-webkit-transform"
			}, {
				"MozTransform" : "-moz-transform"
			}, {
				"MsTransform" : "-ms-transform"
			}, {
				"OTransform" : "-o-transform"
			} ];
			var transformPropertyString = "transform";
			var i;
			for(i = 0; i < vendorProperty.length; i++) {
				if (ele.style.hasOwnProperty(Object.keys(vendorProperty[i])[0])) {
					transformPropertyString = vendorProperty[i][Object.keys(vendorProperty[i])[0]];
				}
			}
			var sYValue = yValue + 'px';
			ele.style.cssText = ele.style.cssText + " " + transformPropertyString + ": translate3d(0px," + sYValue + ", 0px);";
		},
		_setHorizontalBlockMargin : function() {
			var blocks = this.eleRefs.blocks;
			var container = this.eleRefs.containerEle;
			var blockWidth = blocks[0] === un ? 0 : blocks[0].clientWidth;
			var containerWidth = container.clientWidth;
			this.styles.horizontalBlockMargin = ((containerWidth - blockWidth) / 2) + "px";
			var marginHorizontal = this.styles.horizontalBlockMargin;
			[].forEach.call(blocks, function(block) {
				block.style.cssText += "margin-right : " + marginHorizontal + ";margin-left : " + marginHorizontal;
			});
		},
		_onMouseDown : function(e, ctx, blockWrapper) {
			ctx._isMouseDown = true;
			ctx._TIMEOUTID = window.setTimeout(function() {
				if (ctx._isMouseDown) {
					ctx._onDragStart(e, ctx, blockWrapper);
				}
			}, 500);
		},
		_onMouseUp : function(e, ctx) {
			ctx._isMouseDown = false;
			if (ctx._dragEle !== un && ctx._dragEle.ele !== un) {
				ctx._onDrop(e, ctx);
			}
		},
		_onDragStart : function(e, ctx, blockWrapper) {
			if (!ctx._dragState || blockWrapper.getAttribute('drag-state') !== 'true') {
				return;
			}
			ctx._dragIndex = ctx.eleRefs.blocks.indexOf(blockWrapper);
			var yValue = ctx._dragIndex * ctx._mFactor;
			var containerEle = document.getElementsByClassName('scrollContainerEle')[0] ? document.getElementsByClassName('scrollContainerEle')[0] : ctx.eleRefs.containerEle; // Scroll Container Hack			
			ctx._containerEleOffsetHeight = containerEle.offsetHeight;
			ctx._containerEleScrollHeight = containerEle.scrollHeight;
			ctx._blockEleOffsetHeight = blockWrapper.offsetHeight;
			ctx._containerEleScrollTop = containerEle.scrollTop;
			var eleTopValue = yValue + ctx._blockMargin;
			var eleBottomValue = eleTopValue + ctx._blockHeight;
			if (eleTopValue < ctx._containerEleScrollTop) {
				containerEle.scrollTop = eleTopValue;
				ctx._containerEleScrollTop = Math.max(0, eleTopValue);
			}
			if (eleBottomValue - ctx._containerEleOffsetHeight > containerEle.scrollTop) {
				containerEle.scrollTop = eleBottomValue - ctx._containerEleOffsetHeight;
				ctx._containerEleScrollTop = Math.min(ctx._containerEleScrollHeight - ctx._containerEleOffsetHeight, eleBottomValue - ctx._containerEleOffsetHeight);
			}
			ctx._diffTop = e.pageY - yValue + ctx._containerEleScrollTop;
			ctx._dragEle = {
				ele : blockWrapper,
				pos : {
					y : yValue
				}
			};
			ctx.callbacks.onBeforeDrag.apply(blockWrapper, [ ctx._dragIndex ]);
			ctx._dragEle.ele.className = ctx._dragEle.ele.className + " " + "DnD-drag";
			var tapMoveEvent = isTouchDevice ? "touchmove" : "mousemove";
			document.addEventListener(tapMoveEvent, function(e) {
				if (ctx._dragEle.ele !== un) {
					e.preventDefault();
					ctx._onDrag(e, ctx);
					e.stopPropagation();
				}
			});
		},
		_onDrag : function(e, ctx) {
			var containerEle = document.getElementsByClassName('scrollContainerEle')[0] ? document.getElementsByClassName('scrollContainerEle')[0] : ctx.eleRefs.containerEle; // Scroll Container Hack
			var yValue = e.pageY - ctx._diffTop + ctx._containerEleScrollTop;
			var eleTopValue = yValue + ctx._blockMargin;
			var eleBottomValue = eleTopValue + ctx._blockHeight;
			var isDraggingDown = ((e.pageY - ctx._diffTop) > ctx._prevPageY);
			var isDraggingUp = ((e.pageY - ctx._diffTop) < ctx._prevPageY);
			ctx._prevPageY = (e.pageY - ctx._diffTop);
			if (isDraggingUp && (eleTopValue < ctx._containerEleScrollTop)) {
				containerEle.scrollTop = eleTopValue;
				ctx._containerEleScrollTop = Math.max(0, eleTopValue);
				yValue = e.pageY - ctx._diffTop + ctx._containerEleScrollTop;
			}
			if (isDraggingDown && ((eleBottomValue - ctx._containerEleOffsetHeight) > ctx._containerEleScrollTop)) {
				containerEle.scrollTop = eleBottomValue - ctx._containerEleOffsetHeight;
				ctx._containerEleScrollTop = Math.min(ctx._containerEleScrollHeight - ctx._containerEleOffsetHeight, eleBottomValue - ctx._containerEleOffsetHeight);
				yValue = e.pageY - ctx._diffTop + ctx._containerEleScrollTop;
			}
			ctx._setTransformYValue(ctx._dragEle.ele, yValue);
			var sMargin = ctx.styles.blockMargin; // margin-top and bottom.
			var margin = parseInt(sMargin.replace("px"), 10);
			var currentTopValue = yValue;
			var currentBottomValue = yValue + ctx._blockEleOffsetHeight;
			var minTopValue = ctx._dragEle.pos.y - (ctx._mFactor - (ctx._blockHeight / 2));
			var maxBottomValue = (ctx._dragEle.pos.y + ctx._blockEleOffsetHeight) + (ctx._mFactor - (ctx._blockHeight / 2));
			var eleYValue = ctx._dragEle.pos.y;
			var currentIndex = eleYValue / (ctx._mFactor);
			var blocks = ctx.eleRefs.blocks;
			var aboveSwappableIndex = -1, belowSwappableIndex = blocks.length;
			var i, blockEle;
			for(i = currentIndex - 1; i >= 0; i--) {
				blockEle = blocks[i];
				if (blockEle.getAttribute('drop-state') === 'true') {
					aboveSwappableIndex = i;
					break;
				}
			}
			for(i = currentIndex + 1; i < blocks.length; i++) {
				blockEle = blocks[i];
				if (blockEle.getAttribute('drop-state') === 'true') {
					belowSwappableIndex = i;
					break;
				}
			}
			minTopValue = ctx._dragEle.pos.y - ((currentIndex - aboveSwappableIndex) * ctx._mFactor - (ctx._blockHeight / 2));
			maxBottomValue = (ctx._dragEle.pos.y + ctx._blockEleOffsetHeight) + ((belowSwappableIndex - currentIndex) * ctx._mFactor - (ctx._blockHeight / 2));
			var swapIndex;
			var bSwapNeeded = false;
			if (currentTopValue < minTopValue) {
				bSwapNeeded = true;
				swapIndex = aboveSwappableIndex;
			} else if (currentBottomValue > maxBottomValue) {
				bSwapNeeded = true;
				swapIndex = belowSwappableIndex;
			}
			if (bSwapNeeded && (swapIndex >= 0) && (swapIndex <= blocks.length - 1)) {
				ctx._dragEle.pos.y = swapIndex * (ctx._mFactor);
				var moveEle = blocks[swapIndex];
				if (moveEle !== un) {
					ctx._setTransformYValue(moveEle, eleYValue);
					ctx._swapArray(blocks, currentIndex, swapIndex);
				}
			}
		},
		_onDrop : function(e, ctx) {
			ctx._dragEle.ele.className = ctx._dragEle.ele.className.replace(" DnD-drag", "");
			var blocks = ctx.eleRefs.containerEle.querySelectorAll('.DnD-drag');
			var i;
			for(i = 0; i < blocks.length; i++) {
				blocks[i].className = blocks[i].className.replace(" DnD-drag", "");
			}
			var eleYValue = ctx._dragEle.pos.y;
			ctx._dropIndex = eleYValue / (ctx._mFactor);
			ctx._setTransformYValue(ctx._dragEle.ele, eleYValue);
			ctx.callbacks.onAfterDrop.apply(ctx._dragEle.ele, [ ctx._dragIndex, ctx._dropIndex ]);
			ctx._dragEle = {};
		},
		_onRemoveBlock : function(e, ctx, removeIconWrapper) {
			e.stopPropagation();
			var removeBlock = removeIconWrapper.parentElement;
			var removeIndex = ctx.eleRefs.blocks.indexOf(removeBlock);
			ctx.removeBlock(removeIndex, ctx.callbacks.onAfterRemove);
		},
		_swapArray : function(array, from, to) {
			var temp = array[from];
			array[from] = array[to];
			array[to] = temp;
			return array;
		},
		_grouping : function (arrEle) {
			
			var childNode = arrEle;
			var activeIndex = (arrEle.length > 2) ? arrEle.length - 2 : 0;
			
			//Set first child or last child as tabindex active and other inactive
			jQuery(childNode).removeAttr("tabindex");
			jQuery(childNode).attr("tabindex", -1);
			jQuery(childNode[activeIndex]).attr("tabindex", 0);

			//Up arrow key hit
			this._keypress(childNode, 38, function (ele, e) {
				var index = childNode.indexOf(ele);
				if (index === 0) {
					return;
				}
				jQuery(childNode).removeAttr("tabindex");
				jQuery(childNode).attr("tabindex", -1);
				jQuery(childNode[index - 1]).attr("tabindex", 0);
				jQuery(childNode[index - 1]).focus();
				
			});
			
			//Down arrow key hit
			this._keypress(childNode, 40, function (ele, e) {
				var index = childNode.indexOf(ele);
				if (index === childNode.length - 1) {
					return;
				}
				jQuery(childNode).removeAttr("tabindex");
				jQuery(childNode).attr("tabindex", -1);
				jQuery(childNode[index + 1]).attr("tabindex", 0);
				jQuery(childNode[index + 1]).focus();
			});
			
		},
		_keypress : function (ele, keyCode, callback) {
			
			jQuery(ele).keydown(function (e) {
				//e.which is set by jQuery for those browsers that do not normally support e.keyCode.
				var keyCodePress = e.keyCode || e.which;
				
				if (keyCodePress === keyCode) {
					callback(this, e);
					return false;
				}
			});

		}
	};
}(undefined));

}; // end of sap/apf/ui/controls/draggableCarousel/DraggableCarousel.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.representationInterface') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare('sap.apf.ui.representations.representationInterface');

(function () {
    'use strict';

    /**
     * @public
     * @experimental The complete interface is subject to ongoing work and not yet stable (as of Version 1.24.0).
     * @class The interface proxy passed to a representation which provides access to required APF methods. This constructor is used by apf.api.
     * It can be also used to build unit tests that need an interface proxy between APF and representations.
     * @name sap.apf.ui.representations.RepresentationInterfaceProxy
     * @param {sap.apf.core.Instance} oCoreApi
     * @param {sap.apf.ui.Instance} oUiApi
     */
    sap.apf.ui.representations.RepresentationInterfaceProxy = function (oCoreApi, oUiApi) {
        this.type = 'RepresentationInterfaceProxy';

        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.RepresentationInterfaceProxy#putMessage
         * @description see {@link sap.apf.Api#putMessage}
         */
        this.putMessage = function (oMessage) {
            return oCoreApi.putMessage(oMessage);
        };

        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.RepresentationInterfaceProxy#createMessageObject
         * @description see {@link sap.apf.Api#createMessageObject}
         */
        this.createMessageObject = function (oConfig) {
            return oCoreApi.createMessageObject(oConfig);
        };

        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.ui.representations.RepresentationInterfaceProxy#getActiveStep
         * @description see {@link sap.apf.Api#getActiveStep}
         */
        this.getActiveStep = function () {
            return oCoreApi.getActiveStep();
        };

        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.ui.representations.RepresentationInterfaceProxy#setActiveStep
         * @description see {@link sap.apf.Api#setActiveStep}
         */
        this.setActiveStep = function (oStep) {
            return oCoreApi.setActiveStep(oStep);
        };

        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.RepresentationInterfaceProxy#getTextNotHtmlEncoded
         * @description see {@link sap.apf.Api#getTextNotHtmlEncoded}
         */
        this.getTextNotHtmlEncoded = function (oLabel, aParameters) {
            return oCoreApi.getTextNotHtmlEncoded(oLabel, aParameters);
        };

        /**
         * @private
         * @deprecated since Version 1.23.1. Instead use the method {@link sap.apf.ui.representations.RepresentationInterfaceProxy#selectionChanged}.
         * @function
         * @name sap.apf.ui.representations.RepresentationInterfaceProxy#updatePath
         * @description see {@link sap.apf.Api#updatePath}
         */
        this.updatePath = function (fnStepProcessedCallback) {
            return oCoreApi.updatePath(fnStepProcessedCallback); // fixme planned change in Wave 7 to call update on uiApi so that UI gets notified on changes.
        };

        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.RepresentationInterfaceProxy#createFilter
         * @description see {@link sap.apf.Api#createFilter}
         */
        this.createFilter = function () {
            return oCoreApi.createFilter();
        };

        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.ui.representations.RepresentationInterfaceProxy#selectionChanged
         * @description see {@link sap.apf.Api#selectionChanged}
         */
        this.selectionChanged = function (bRefreshAllSteps) {
            return oUiApi.selectionChanged(bRefreshAllSteps);
        };

        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.ui.representations.RepresentationInterfaceProxy#getEventCallback
         * @description see {@link sap.apf.Api#getEventCallback}
         */
        this.getEventCallback = function (sEventType) { // fixme to be removed in Wave 7, part of formatter, not representation!
            return oUiApi.getEventCallback(sEventType);
        };
    }; // InterfaceProxy


    /**
     * @public
     * @experimental The complete interface is subject to ongoing work and not yet stable (as of Version 1.24.0).
     * @class This is not a runtime class, but it describes the interface that a representation (chart) has to implement for to interact with the APF.
     * @name sap.apf.ui.representations.representationInterface
     * @param {sap.apf.ui.representations.RepresentationInterfaceProxy} dependencies - specific interface proxy for communication between the representation and APF.<br>
     * @param {object} configuration - Configuration object that allows to define representation specific configuration values.<br>
     * Fixed interface property names:
     * <ul><li><b>alternateRepresentationTypeId</b>: A reference to a representation type in analytical configuration
     * <li><b>alternateRepresentationType</b>: A property dynamically added to the parameter object by APF core based on reference in alternateRepresentationTypeId and containing
     * configuration values of the representation type ID referenced by alternateRepresentationTypeId.
     * </ul>
     */
    sap.apf.ui.representations.representationInterface = function (dependencies, configuration) {
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#setData
         * @description The binding sets the data (received from the request) that has to be visualized. The array aDataResponse is shared between all representations
         * of a step and the binding. When lines are moved, deleted or changed, you modify the visualization of the original data! When displaying the data, one can determine which record
         * is selected by aSelectedIndices.
         * @param {sap.apf.core.Metadata} oMetadata oMetadata holds meta information about the received data.
         * @param {array} aDataResponse Data response from the request.
         */
        this.setData = function (oMetadata, aDataResponse) {
            // remember aDataResponse and transform it, so that the chart can display the data
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getSelectionAsArray
         * @description This is the basic method with which the step can detect data selected in the chart.
         * @returns {number[]} An array with indices is returned.<br>E.g. if the first and the third line of the array aDataResponse have been selected,
         * then aIndices = [0, 2]. Counting of indices start from 0.
         * If all data has been selected, and aDataResponse.length == 4, then the array [0,1,2,3] is returned. In general [ 0 .. aDataResponse.length - 1]
         * If no data has been selected at all, then [] is returned.
         * In case of an empty selection, the value undefined has to be returned. An empty selection may occur, when selections in the previous step has been changed,
         * so that the visual selection on the chart is now empty (empty rectangle).
         */
        this.getSelectionAsArray = function () {
            return [ 0, 2 ]; // just an example. Here data points/series, that correspond to  aDataResponse[0] and aDataResponse[2] have been selected
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#adoptSelection
         * @description Called on representation by binding when a representation type is set.
         * Intention is to trigger transfer of selections that might exist on a representation (source) that is replaced by the "new" representation (target) to be set.
         * Therefore the target representation receives a reference pointing to the source representation.
         * In order to check whether selection transfer is possible the target representation initiates a negotiation process with the source representations (3-way-handshake).
         * If a common method can be determined between target and source representation the selection will be exchanged.
         * @param {object} oSourceRepresentation Source representation implementing the representationInterface.
         */
        this.adoptSelection = function (oSourceRepresentation) {
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getFilter
         * @description This method has to be implemented if the representation is the representation of the initial step
         * (instead of the method getSelectionAsArray). For all other representations, this function must return <b>undefined</b>.<br>
         * Restrictions on SAPClient, Company Code, Time, etc. can be filled into the filter object and returned. The selections from the start filter of
         * the path (set with sap.apf.setStartFilter) have been already transferred to the initial representation with method setFilter before.
         * You only need to return the selections which have been changed (for example, the Company Code has been changed in the initial representation) or which have been added.
         * Selections from the setFilter, that have not been changed, need not to be returned.
         * @param {string[]} aRequiredFilters Properties, on which the filter has to be created.
         * @returns {sap.apf.utils.Filter} Filter Object
         */
        this.getFilter = function (aRequiredFilters) {
            return sap.apf.createFilter(); // create a filter out of the selections. Here just the creation of the filter object is shown.
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getFilterMethodType
         * @description This method has to be implemented so that binding can determine which method has to be used for the filter retrieval from a representations.
         * @returns {sap.apf.constants.filterMethodTypes} The filter method type the representation supports
         */
        this.getFilterMethodType = function () {
            return sap.apf.constants.filterMethodTypes.selectionAsArray; // returns the filter method type the representation supports
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#setFilter
         * @description This method has to be implemented, if the representation is a representation for the initial step.
         * The filter holds the values of the start filter of the path. An example are restrictions on SAPClient, that have been transferred via url and
         * have been set as start filter for path (method sap.apf.setStartFilter). The getFilter method only has to return those expressions from
         * the filter, which have been set here, if the expressions have been changed. Unchanged expressions are automatically merged by the binding into
         * the filter of the path! <br>Hint: If you need to get expressions from filter, then use method oFilter.getExpressions().
         * @param {sap.apf.utils.Filter} oFilter
         */
        this.setFilter = function (oFilter) {
            if (oFilter !== undefined && oFilter.getExpressions !== undefined) {
                var aExpressions = oFilter.getExpressions(); // get filter content
            }
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getRequestOptions
         * @description Additionally to parameters being set in the request configuration and filter values that are derived from the path logic,
         * a request can be enriched with additional options such as <b>$top</b>, <b>$skip</b> and <b>$orderby</b>.<p>
         * Dependent on the actual options a representation may require for a request, an object containing the correspondent properties may be returned by this method.
         * <br>In case no additional options are required an empty object should be returned.<p>
         *
         * The supported optional properties of the return object are:
         * <ul><li><b>paging</b>: An object containing optional properties<ul><li><b>top</b> for OData system query option $top <br>A numeric value is expected<li><b>skip</b> for query string option $skip<br> A numeric value is expected
         * <li><b>inlineCount</b> for OData system query option $inlineCount<br>A boolean value 'true' is expected if inline count is requested</ul>
         * <li><b>orderby</b> for OData system query option $orderby: Values could be of type<ul>
         *    <li><b>string</b> that holds a property name (in this case the default sort order 'ascending' is applied)
         *  <li><b>object</b> with properties:<ul>
         *    <li>'property' A string containing the property name is expected.
         *    <li>'descending' A boolean value 'true' is expected, if descending sort order is required for the property. If omitted default sort order 'ascending' is applied.
         *  </ul>
         *  <li><b>array</b> holding objects with properties 'property' and 'descending' as described above.</ul>
         * @returns {object}
         *Example:
         *<pre class="javascript">
         *{ paging : {
	 *		top : 10,
	 *		skip : 30,
	 *		inlineCount : true
	 *  },
	 *  orderby : [ 
	 *		{ property : "nameProperty1",
	 *		}, {
	 *		property : "nameProperty2",
	 *		descending : true
	 *		}
	 *  ]
	 *}
         *</pre>
         * See also <a href="http://www.odata.org/documentation/odata-version-2-0/uri-conventions/">http://www.odata.org/documentation/odata-version-2-0/uri-conventions/</a>
         */
        this.getRequestOptions = function () {
            return {}; // Default
            // return { paging : { top : 10, skip : 30, inlineCount : true }, orderby : [ { property : "propertyName", descending : true }] };
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getParameter
         * @description The method returns the constructor arguments which will be used to create toggle representation.
         * @returns {object} oParameters
         */
        this.getParameter = function () {
            var oParameters = {dimensions: [], measures: []};
            return oParameters;
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getMainContent
         * @description This method holds the logic to draw the content to be shown on main representation area.
         * @returns {object} oUiObject The UI object that has to be shown in main representation area. Example: Line chart instance for a line chart representation.
         */
        this.getMainContent = function () {
            var oUiObject = {};
            return oUiObject;
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getThumbnailContent
         * @description This method holds the logic to draw the content to be shown on thumbnail area.
         * @returns {object} oUiObject The UI object that has to be shown in thumbnail area. Example: Line chart instance for a line chart representation.
         */
        this.getThumbnailContent = function () {
            var oUiObject = {};
            return oUiObject;
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getPrintContent
         * @description This method holds the logic to draw the content to be printed.
         * @returns {object} oUiObject The UI object that has to be printed. Example: Line chart instance for a line chart representation.
         */
        this.getPrintContent = function () {
            var oUiObject = {};
            return oUiObject;
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getTooltipContent
         * @description This method holds the logic to draw the content to be shown as tooltip for a thumbnail.
         * It will be shown inside a tooltip Popup when the thumbnail content overflows the thumbnail container area with a gradient effect to indicate that it is overflowing.
         * @returns {object} oUiObject The UI object that has to be shown as tooltip for a thumbnail. Example: Detailed content of a form representation.
         */
        this.getTooltipContent = function () {
            var oUiObject = {};
            return oUiObject;
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#removeAllSelection
         * @description This method holds the logic to remove all selection from the chart. It also updates the step.
         */
        this.removeAllSelection = function () {
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#serialize
         * @description This method returns the selection for serialization. This is required for the Persisting selection of current representation.
         * It includes selection mode and selections.
         * @returns {object} oSerializationInformation
         */
        this.serialize = function () {
            var oSerializationInformation = {};
            return oSerializationInformation;
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#deserialize
         * @description This method uses the serialization information from serialized data and sets the selection to representation based on mode and selection string returned.
         * @param {object} oSerializationInformation
         */
        this.deserialize = function (oSerializationInformation) {
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getAlternateRepresentation
         * @description Returns the alternate representation of current step (i.e. list representation for the charts)
         * @returns {object} oAlternateRepresentation
         */
        this.getAlternateRepresentation = function () {
            return this.oAlternateRepresentation;  //fixme: undefined
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getMetaData
         * @description Returns meta data for representation type
         * @returns {sap.apf.core.EntityTypeMetadata} metadata
         */
        this.getMetaData = function () {
            return this.metadata;  //fixme: undefined
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getData
         * @description Returns data for representation type
         * @returns {array} aDataResponse
         */
        this.getData = function () {
            return this.aDataResponse; //fixme: undefined
        };
    };
}());

}; // end of sap/apf/ui/representations/representationInterface.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.utils.formatter') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 * @class utils
 * @name utils
 * @memberOf sap.apf.ui.representations
 * @description holds utility functions used by vizHelper and representations 
 */
jQuery.sap.declare("sap.apf.ui.representations.utils.formatter");
/**
 * @class formatter
 * @name formatter
 * @memberOf sap.apf.ui.representations.utils
 * @param {sap.apf.ui.representations.RepresentationInterfaceProxy} oApi - apfInstance, metadata and dataResponse
 * @param {sap.apf.core.Metadata} metadata
 * @param {array} dataResponse
 * @description holds utility functions used by vizHelper and  representations 
 */
sap.apf.ui.representations.utils.formatter = function(oApi, metadata, dataResponse) {
	var self = this;
	this.metadata = metadata;
	this.dataResponse = dataResponse;
	/**
	 * @memberOf sap.apf.ui.representations.utils.formatter
	 * @method getFormattedValue
	 * @description formats the given value
	 * @returns formatted value according to the type
	 */
	this.getFormattedValue = function(fieldName, originalFieldValue) {
		var formattedFieldValue, yearMetadata, quarterMetadata, dateFromMetadata, yearInfoFromDate, weekMetadata, dateFormat;
		var oMetadata = this.metadata.getPropertyMetadata(fieldName);
		if (oMetadata.isCalendarYearMonth) { //calenderYearMonth
			if (originalFieldValue === null) {
				return "";
			}
			formattedFieldValue = this.doYearMonthFormat(originalFieldValue);
		} else if (oMetadata.dataType.type === "Edm.DateTime") { //dateTime
			if (originalFieldValue === null) {
				return "-";
			}
			dateFormat = new Date(parseInt(originalFieldValue.slice(6, originalFieldValue.length - 2), 10));
			dateFormat = dateFormat.toLocaleDateString();
			if (dateFormat === "Invalid Date") {
				return "-";
			}
			formattedFieldValue = dateFormat;
		} else if (oMetadata.unit) { //unit for currency
			if (originalFieldValue === null) {
				return "";
			}
			var currencyMetadata = self.metadata.getPropertyMetadata(oMetadata.unit);
			if (currencyMetadata.semantics === "currency-code") {
				var precision = this.dataResponse[0][oMetadata.scale];
				originalFieldValue = parseFloat(originalFieldValue).toFixed(precision).toString();
				var store = originalFieldValue.split(".");
				var amountValue = parseFloat(store[0]).toLocaleString();
				var sample = 0.1;
				sample = sample.toLocaleString();
				if (amountValue.split(sample.substring(1, 2)).length > 1) {
					amountValue = amountValue.split(sample.substring(1, 2))[0];
				}
				amountValue = amountValue.concat(sample.substring(1, 2), store[1]);
				formattedFieldValue = amountValue;
			} else {
				formattedFieldValue = originalFieldValue;
			}
		} else if (oMetadata.isCalendarDate) {
			if (originalFieldValue === null) {
				return "-";
			}
			yearMetadata = originalFieldValue.substr(0, 4);
			var monthMetadata =parseInt(originalFieldValue.substr(4, 2), 10) - 1;
			var dateMetadata = originalFieldValue.substr(6, 2);
			dateFormat = new Date(yearMetadata, monthMetadata, dateMetadata);
			dateFormat = dateFormat.toLocaleDateString();
			if (dateFormat === "Invalid Date") {
				return "-";
			}
			formattedFieldValue = dateFormat;
		} else if (oMetadata.isCalendarYearQuarter) {
			if (originalFieldValue === null) {
				return "";
			}
			yearMetadata = originalFieldValue.substr(0, 4);
			quarterMetadata = originalFieldValue.substr(4, 1);
			dateFromMetadata = new Date(yearMetadata);
			yearInfoFromDate = dateFromMetadata.getFullYear();
			var quarterInfo;
			quarterInfo = "Q" + quarterMetadata;
			var formattedYearQuarter = quarterInfo + " " + yearInfoFromDate;
			formattedFieldValue = formattedYearQuarter;
		} else if (oMetadata.isCalendarYearWeek) {
			if (originalFieldValue === null) {
				return "";
			}
			yearMetadata = originalFieldValue.substr(0, 4);
			weekMetadata = originalFieldValue.substr(4, 2);
			dateFromMetadata = new Date(yearMetadata);
			yearInfoFromDate = dateFromMetadata.getFullYear();
			var weekInfo;
			weekInfo = "CW" + weekMetadata;
			var formattedYearWeek = weekInfo + " " + yearInfoFromDate;
			formattedFieldValue = formattedYearWeek;
		} else { //default value
			if (originalFieldValue === null) {
				return "null";
			}
			formattedFieldValue = originalFieldValue;
		}
		// application formatter callback
		var callback = oApi.getEventCallback(sap.apf.core.constants.eventTypes.format);
		var metadataObject = jQuery.extend({}, this.metadata.getPropertyMetadata(fieldName));
		if (typeof callback === "function") {
			var appFormattedFieldValue = callback.apply(oApi, [ metadataObject, fieldName, originalFieldValue, formattedFieldValue ]);
			if (appFormattedFieldValue !== undefined) {
				formattedFieldValue = appFormattedFieldValue;
			}
			if (appFormattedFieldValue === null) {
				formattedFieldValue = "";
			}
		}
		return formattedFieldValue;
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.formatter
	 * @method doYearMonthFormat
	 * @param fieldValue
	 * @description yearMonth formatting 
	 */
	this.doYearMonthFormat = function(fieldValue) {
		var jan = oApi.getTextNotHtmlEncoded("month-1-shortName");
		var feb = oApi.getTextNotHtmlEncoded("month-2-shortName");
		var mar = oApi.getTextNotHtmlEncoded("month-3-shortName");
		var apr = oApi.getTextNotHtmlEncoded("month-4-shortName");
		var may = oApi.getTextNotHtmlEncoded("month-5-shortName");
		var jun = oApi.getTextNotHtmlEncoded("month-6-shortName");
		var jul = oApi.getTextNotHtmlEncoded("month-7-shortName");
		var aug = oApi.getTextNotHtmlEncoded("month-8-shortName");
		var sep = oApi.getTextNotHtmlEncoded("month-9-shortName");
		var oct = oApi.getTextNotHtmlEncoded("month-10-shortName");
		var nov = oApi.getTextNotHtmlEncoded("month-11-shortName");
		var dec = oApi.getTextNotHtmlEncoded("month-12-shortName");
		var monthsArray = [ jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec ];
		var year = fieldValue.substr(0, 4);
		var month = monthsArray[fieldValue.substr(4, 6) - 1];
		return month + " " + year;
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.formatter
	 * @method isAmountField
	 * @param fieldName
	 * @description checks if the field is amount field 
	 */
	this.isAmountField = function(fieldName) {
		var isAmntField = false;
		if (this.metadata && this.dataResponse) {
			var oMetadata = this.metadata.getPropertyMetadata(fieldName);
			if (oMetadata !== undefined && oMetadata.unit) {
				var currencyMetadata = this.metadata.getPropertyMetadata(oMetadata.unit);
				if (currencyMetadata !== undefined && currencyMetadata.semantics === "currency-code") {
					isAmntField = true;
				}
			}
		}
		return isAmntField;
	};
	/**
	 * @method getPrecision
	 * @param fieldName
	 * @description gets the precision for a given fieldName 
	 */
	this.getPrecision = function(fieldName) {
		var oMetadata = this.metadata.getPropertyMetadata(fieldName);
		if (oMetadata !== undefined && this.dataResponse !== undefined && this.dataResponse[0] !== undefined) {
			return this.dataResponse[0][oMetadata.scale];
		}
	};
	/**
	 * @method getFormatString
	 * @param measures- measures of chart and chart type
	 * @param chartType - chart type(constant)
	 * @description returns the stringFormat for label and tooltip of the charts
	 */
	this.getFormatString = function(measure) {
		var zeroStr = "";
		var formatString = {};
		var fieldName = measure.fieldName;
		var isAmountField = this.isAmountField(fieldName);
		if (isAmountField === true) {
			//check for precision point
			var precision = this.getPrecision(fieldName);
			if (precision !== undefined) {
				for( var i = 0; i < precision; i++) {
					zeroStr = zeroStr + "0";
				}
				formatString.label = "#,#0" + "." + zeroStr;
				formatString.tooltip = "#,#" + "." + zeroStr;
			} else {
				formatString = {};
			}
		} else {
			formatString = {};
		}
		return formatString;
	};
};
}; // end of sap/apf/ui/representations/utils/formatter.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.utils.vizHelper') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 * @class utils
 * @name utils
 * @memberOf sap.apf.ui.representations
 * @description holds utility functions used by viz representations 
 */
jQuery.sap.declare("sap.apf.ui.representations.utils.vizHelper");
/**
 * @class vizHelper
 * @name vizHelper
 * @memberOf sap.apf.ui.representations.utils
 * @description holds utility functions used by viz representations 
 */
sap.apf.ui.representations.utils.vizHelper = function(oApi, oParameters) {
	var self = this;
	this.parameter = oParameters;
	this.classifiedData = [];
	this.extendedDataSet = [];
	this.fieldKeysLookup = {};
	this.displayNameLookup = {};
	this.fieldNameLookup = {};
	this.filterLookup = {};
	this.datasetObj = {};
	this.cachedSelection = [];
	this.filterValues = [];
	this.dataAlreadySorted = false;
	/**
	 * @memberOf sap.apf.ui.representations.utils.vizHelper
	 * @method init
	 * @description Initialize hash maps, extended data response and dataset.
	 */
	this.init = function(aDataResponse, metadata, axisType) {
		this.metadata = metadata;
		this.formatter = new sap.apf.ui.representations.utils.formatter(oApi, metadata, aDataResponse);
		initFieldsKeyLookup.bind(this)(metadata, aDataResponse);
		initExtendedDataResponse.bind(this)(aDataResponse);
		initDataset.bind(this)(axisType);
		if (this.parameter.requiredFilters !== undefined && this.parameter.requiredFilters.length !== 0) {
			validateSelections();
		}
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.vizHelper
	 * @method formatMeasureValue
	 * @returns precision of amount fields
	 */
	this.validateSelectionModes = function(chartInstance) {
		var oChart = chartInstance;
		var sel = new sap.viz.ui5.types.controller.Interaction_selectability();
		var inter = new sap.viz.ui5.types.controller.Interaction();
		inter.setSelectability(sel);
		oChart.setInteraction(inter);
		if (this.parameter.requiredFilters === undefined || this.parameter.requiredFilters.length === 0) {
			sel.setMode("none");
		} else {
			sel.setMode("multiple");
			if (this.parameter.dimensions.length > 1) {
				if (this.parameter.requiredFilters[0] === this.parameter.dimensions[1].fieldName) {
					sel.setAxisLabelSelection(false);
				} else if (this.parameter.requiredFilters[0] === this.parameter.dimensions[0].fieldName) {
					sel.setLegendSelection(false);
				}
			}
		}
	};
	var validateSelections = function() {
		self.filterValues = self.filterValues.filter(function(filterTerm) {
			for( var i = 0; i < self.extendedDataResponse.length; i++) {
				var counter = 0;
				for( var j = 0; j < self.parameter.requiredFilters.length; j++) {
					if (filterTerm[j] === self.extendedDataResponse[i][self.parameter.requiredFilters[j]]) {
						counter = counter + 1;
					}
				}
				if (counter === self.parameter.requiredFilters.length) {
					return true;
				} else if (i === self.extendedDataResponse.length - 1) {
					return false;
				}
			}
		});
		self.cachedSelection = getHighlightPoints();
	};
	var initFieldsKeyLookup = function(metadata, aDataResponse) {
		var fieldObjects = this.parameter.dimensions.concat(this.parameter.measures);
		for( var i = 0; i < fieldObjects.length; i++) {
			var fieldObject = fieldObjects[i];
			var fieldName = fieldObject.fieldName;
			this.displayNameLookup[fieldName] = {};
			if (metadata !== undefined) {
				if (metadata.getPropertyMetadata(fieldName).hasOwnProperty('text')) {
					var textField = metadata.getPropertyMetadata(fieldName).text;
					var textFieldName = metadata.getPropertyMetadata(textField).label;
					this.displayNameLookup[fieldName].DISPLAY_NAME = textFieldName;
					this.displayNameLookup[fieldName].VALUE = "formatted_" + fieldName;
				} else if (metadata.getPropertyMetadata(fieldName)["aggregation-role"] === "dimension") {
					this.displayNameLookup[fieldName].DISPLAY_NAME = metadata.getPropertyMetadata(fieldName).label;
					this.displayNameLookup[fieldName].VALUE = "formatted_" + fieldName;
				} else {
					this.displayNameLookup[fieldName].DISPLAY_NAME = metadata.getPropertyMetadata(fieldName).label;
					this.displayNameLookup[fieldName].VALUE = fieldName;
				}
				if (fieldObject.fieldDesc !== undefined) {
					this.displayNameLookup[fieldName].DISPLAY_NAME = oApi.getTextNotHtmlEncoded(fieldObject.fieldDesc);
				}
				if (metadata.getPropertyMetadata(fieldName).unit !== undefined) {
					var sUnitReference = metadata.getPropertyMetadata(fieldName).unit;
					var sUnitValue;
					if (aDataResponse !== undefined && aDataResponse.length !== 0) {
						sUnitValue = aDataResponse[0][sUnitReference];
						this.displayNameLookup[fieldName].DISPLAY_NAME = this.displayNameLookup[fieldName].DISPLAY_NAME + ' (' + sUnitValue + ')';
					}
				}
			}
			this.fieldNameLookup[this.displayNameLookup[fieldName].DISPLAY_NAME] = {};
			this.fieldNameLookup[this.displayNameLookup[fieldName].DISPLAY_NAME].FIELD_NAME = fieldName;
			this.fieldNameLookup[this.displayNameLookup[fieldName].DISPLAY_NAME].VALUE = this.displayNameLookup[fieldName].VALUE;
		}
	};
	var initExtendedDataResponse = function(aDataResponse) {
		this.extendedDataResponse = jQuery.extend([], true, aDataResponse);
		var i, j, k;
		//Extend the aDataResponse
		if (this.extendedDataResponse.length !== 0) {
			for(i = 0; i < this.extendedDataResponse.length; i++) {
				for(k = 0; k < this.parameter.measures.length; k++) {
					this.extendedDataResponse[i][this.parameter.measures[k].fieldName] = parseFloat(this.extendedDataResponse[i][this.parameter.measures[k].fieldName]);
				}
				for(j = 0; j < Object.keys(this.displayNameLookup).length; j++) {
					var fieldName = Object.keys(this.displayNameLookup)[j];
					var formattedFieldExists = (this.displayNameLookup[fieldName].VALUE.search('formatted_') !== -1); // To check whether property exists or not
					if (formattedFieldExists) {
						var textExists = this.metadata.getPropertyMetadata(fieldName).hasOwnProperty('text'); // To check whether property exists or not
						if (!textExists) {
							this.extendedDataResponse[i][this.displayNameLookup[fieldName].VALUE] = this.formatter.getFormattedValue(fieldName, this.extendedDataResponse[i][fieldName]);
						} else {
							var textField = this.metadata.getPropertyMetadata(fieldName).text;
							this.extendedDataResponse[i][this.displayNameLookup[fieldName].VALUE] = this.extendedDataResponse[i][textField] + "(" + this.extendedDataResponse[i][fieldName] + ")";
						}
					}
				}
				var filterKeyText = "";
				for(j = 0; j < this.parameter.dimensions.length; j++) {
					var dimensionValueField = this.displayNameLookup[this.parameter.dimensions[j].fieldName].VALUE;
					this.extendedDataResponse[i][dimensionValueField] = this.extendedDataResponse[i][dimensionValueField].toString();
					filterKeyText = filterKeyText + this.extendedDataResponse[i][dimensionValueField];
					this.filterLookup[filterKeyText] = [];
					for(k = 0; k < this.parameter.requiredFilters.length; k++) {
						var filterValue = this.extendedDataResponse[i][this.parameter.requiredFilters[k]];
						this.filterLookup[filterKeyText].push(filterValue);
					}
				}
			}
		} else {
			var obj = {};
			for(k = 0; k < this.parameter.measures.length; k++) {
				obj[self.displayNameLookup[this.parameter.measures[k].fieldName].VALUE] = undefined;
			}
			for(j = 0; j < this.parameter.dimensions.length; j++) {
				obj[self.displayNameLookup[this.parameter.dimensions[j].fieldName].VALUE] = undefined;
			}
			this.extendedDataResponse.push(obj);
		}
	};
	var initDataset = function(axisType) {
		var obj = this.extendedDataResponse;
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData({
			data : obj
		});
		var dimensions = [];
		var measures = [];
		var i = 0;
		for(i = 0; i < this.parameter.dimensions.length; i++) {
			dimensions[i] = {
				name : this.displayNameLookup[this.parameter.dimensions[i].fieldName].DISPLAY_NAME,
				axis : i + 1,
				value : '{' + this.displayNameLookup[this.parameter.dimensions[i].fieldName].VALUE + '}'
			};
		}
		self.measureAxisType = axisType;
		for(i = 0; i < this.parameter.measures.length; i++) {
			measures[i] = {
				name : this.displayNameLookup[this.parameter.measures[i].fieldName].DISPLAY_NAME,
				value : '{' + this.displayNameLookup[this.parameter.measures[i].fieldName].VALUE + '}'
			};
			measures[i][axisType] = i + 1;
		}
		var flattendeDataSetObj = {
			dimensions : dimensions,
			measures : measures,
			data : {
				path : "/data"
			}
		};
		if (this.metadata !== undefined) {
			for(i = 0; i < this.parameter.dimensions.length; i++) {
				var oMetaData = this.metadata.getPropertyMetadata(this.parameter.dimensions[i].fieldName);
				if (oMetaData.isCalendarYearMonth === "true") {
					if (this.parameter.dimensions.length > 1) {
						flattendeDataSetObj.data.sorter = new sap.ui.model.Sorter(this.parameter.dimensions[0].fieldName, false);
					}
				}
			}
		}
		this.datasetObj = flattendeDataSetObj;
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.vizHelper
	 * @method getDataset
	 * @description returns new flattended data set.
	 */
	this.getDataset = function() {
		return new sap.viz.ui5.data.FlattenedDataset(this.datasetObj);
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.vizHelper
	 * @method getModel
	 * @description returns json model with data set.
	 */
	this.getModel = function() {
		var obj = this.extendedDataResponse;
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData({
			data : obj
		});
		return oModel;
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.vizHelper
	 * @method getFilterCount
	 * @description returns the number of filters.
	 */
	this.getFilterCount = function() {
		return this.filterValues.length;
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.vizHelper
	 * @method getSelectionFromFilter
	 * @description returns highlight points from currently selected filters.
	 */
	this.getSelectionFromFilter = function() {
		if (this.parameter.requiredFilters === undefined || this.parameter.requiredFilters.length === 0) {
			return [];
		}
		var highlightPoints = getHighlightPoints();
		return highlightPoints;
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.vizHelper
	 * @method getHighlightPointsFromSelectionEvent
	 * @description manage filters and returns highlight points from currently selected filters.
	 */
	this.getHighlightPointsFromSelectionEvent = function(allSelections) {
		var selections = [];
		var newSelections = [];
		selections = getExclusiveSelections(allSelections, this.cachedSelection);
		for( var i = 0; i < selections.length; i++) {
			var selObj = selections[i];
			if (this.parameter.measures.length === 1) {
				var measureDisplayName = this.displayNameLookup[this.parameter.measures[0].fieldName].DISPLAY_NAME;
				if (selObj.data[measureDisplayName] === undefined || selObj.data[measureDisplayName] === null) {
					continue; // null selection scenario encountered when a series has missing data. (StackedColumn, % StackedColumn etc.)
				}
			}
			var filterKeyText = "";
			for(var j = 0; j < this.parameter.dimensions.length; j++) {
				var dimensionDisplayName = this.displayNameLookup[this.parameter.dimensions[j].fieldName].DISPLAY_NAME;
				filterKeyText = filterKeyText + selObj.data[dimensionDisplayName];
			}
			var filterTermArray = this.filterLookup[filterKeyText];
			var resultArray = this.filterValues.filter(function(existingTerm) {
				var counter = 0;
				for( var i = 0; i < self.parameter.requiredFilters.length; i++) {
					if (existingTerm[i] === filterTermArray[i]) {
						counter = counter + 1;
					} else {
						break;
					}
				}
				if (counter === self.parameter.requiredFilters.length) {
					return true;
				} else if (i === self.parameter.requiredFilters.length) {
					return false;
				}
			});
			if (resultArray.length === 0) {
				this.filterValues.push(filterTermArray);
			}
		}
		newSelections = getHighlightPoints();
		this.cachedSelection = newSelections;
		return newSelections;
	};
	var getExclusiveSelections = function(allSelections, newSelection) {
		var exclusiveSelections = allSelections.filter(function(selObj) {
			for( var i = 0; i < newSelection.length; i++) {
				var counter = 0;
				for( var j = 0; j < Object.keys(selObj.data).length; j++) {
					if (newSelection[i].data[Object.keys(selObj.data)[j]] === selObj.data[Object.keys(selObj.data)[j]]) {
						counter = counter + 1;
					} else {
						break;
					}
				}
				if (counter === Object.keys(selObj.data).length) {
					return false;
				} else if (j === Object.keys(selObj.data).length) {
					return true;
				}
			}
			return true;
		});
		return exclusiveSelections;
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.vizHelper
	 * @method getFilterFromSelection
	 * @description returns filter objects from current selections.
	 */
	this.getFilterFromSelection = function() {
		var reqFilterValues = [];
		var i;
		for(i = 0; i < self.filterValues.length; i++) {
			reqFilterValues.push(self.filterValues[i][0]);
		}
		var oFilter = oApi.createFilter();
		var EQ = oFilter.getOperators().EQ;
		var oFilterExpression;
		var oAddedOrCondition = oFilter.getTopAnd().addOr('exprssionOr');
		for(i = 0; i < reqFilterValues.length; i++) {
			var dataType = this.metadata.getPropertyMetadata(self.parameter.requiredFilters[0]).dataType.type;
			if (dataType === "Edm.Int32") {
				reqFilterValues[i] = parseFloat(reqFilterValues[i]);
			}
			oFilterExpression = {
				id : reqFilterValues[i],
				name : self.parameter.requiredFilters[0],
				operator : EQ,
				value : reqFilterValues[i]
			};
			oAddedOrCondition.addExpression(oFilterExpression);
		}
		return oFilter;
	};
	var getHighlightPoints = function() {
		var reqFilterValues = [];
		reqFilterValues[0] = [];
		var i, j, k, l;
		for(i = 0; i < self.filterValues.length; i++) {
			reqFilterValues[0].push(self.filterValues[i][0]);
		}
		var newSelections = [];
		for(i = 0; i < self.extendedDataResponse.length; i++) {
			var dataRow = self.extendedDataResponse[i];
			for(j = 0; j < reqFilterValues[0].length; j++) {
				var counter = 0;
				for(k = 0; k < reqFilterValues.length; k++) {
					if (dataRow[self.parameter.requiredFilters[k]] === reqFilterValues[k][j]) {
						counter = counter + 1;
					}
				}
				if (counter === reqFilterValues.length) {
					var newSelObject = {
						data : {}
					};
					var displayFieldName;
					var valueFieldName;
					for(k = 0; k < self.getDataset().getDimensions().length; k++) {
						var dimensionDisplayFieldName = self.getDataset().getDimensions()[k].getName();
						var dimensionValueFieldName = self.fieldNameLookup[dimensionDisplayFieldName].VALUE;
						newSelObject.data[dimensionDisplayFieldName] = dataRow[dimensionValueFieldName];
					}
					if (self.measureAxisType !== "group") {
						var measureDisplayFieldName;
						var measureValueFieldName;
						for(l = 0; l < self.getDataset().getMeasures().length; l++) {
							var newSelObjClone = jQuery.extend(true, {}, newSelObject);
							measureDisplayFieldName = self.getDataset().getMeasures()[l].getName();
							measureValueFieldName = self.fieldNameLookup[measureDisplayFieldName].VALUE;
							newSelObjClone.data[measureDisplayFieldName] = parseFloat(dataRow[measureValueFieldName]);
							newSelections.push(newSelObjClone);
						}
					} else {
						for(k = 0; k < self.getDataset().getMeasures().length; k++) {
							displayFieldName = self.getDataset().getMeasures()[k].getName();
							valueFieldName = self.fieldNameLookup[displayFieldName].VALUE;
							newSelObject.data[displayFieldName] = parseFloat(dataRow[valueFieldName]);
						}
						newSelections.push(newSelObject);
					}
				}
			}
		}
		return newSelections;
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.vizHelper
	 * @method getHighlightPointsFromDeselectionEvent
	 * @description manage filters and returns highlight points from current selection.
	 */
	this.getHighlightPointsFromDeselectionEvent = function(currentSelection) {
		var i, j;
		var deselectedObjs = getExclusiveSelections(this.cachedSelection, currentSelection);
		for(i = 0; i < deselectedObjs.length; i++) {
			var deselObj = deselectedObjs[i];
			var filterKeyText = "";
			for(j = 0; j < this.parameter.dimensions.length; j++) {
				var dimensionDisplayName = this.displayNameLookup[this.parameter.dimensions[j].fieldName].DISPLAY_NAME;
				filterKeyText = filterKeyText + deselObj.data[dimensionDisplayName];
			}
			var filterTermArray = this.filterLookup[filterKeyText];
			this.filterValues = this.filterValues.filter(function(currentFilter, index) {
				var counter = 0;
				for( var i = 0; i < filterTermArray.length; i++) {
					if (filterTermArray[i] === currentFilter[i]) {
						counter = counter + 1;
					}
				}
				if (counter === filterTermArray.length) {
					return false;
				} else {
					return true;
				}
			});
		}
		var newSelections = getHighlightPoints();
		this.cachedSelection = newSelections;
		return newSelections;
	};
};
}; // end of sap/apf/ui/representations/utils/vizHelper.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.utils.constants') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.apf.ui.utils.constants");
/**
 * @class CONSTANTS
 * @name CONSTANTS
 * @memberOf sap.apf.ui.utils
 * @description defines application constants for UI classes
 */
sap.apf.ui.utils.CONSTANTS = {
		step : {
			OPEN_OVERLAY_IMAGE_HEIGHT:15,
			DROP_MARKER_HEIGHT:1
		},
		
		representationTypes : {
			FORM_REPRESENTATION : "FormRepresentation",
			TABLE_REPRESENTATION : "TableRepresentation",
			COLUMN_CHART : "ColumnChart",
			LINE_CHART : "LineChart",
			PIE_CHART : "PieChart",
			GEO_MAP: "GeoMap",
			STACKED_COLUMN_CHART : "StackedColumn",
			SCATTERPLOT_CHART : "ScatterPlotChart",
			PERCENTAGE_STACKED_COLUMN_CHART: "PercentageStackedColumn",
			BUBBLE_CHART: "BubbleChart"
		},
		
		vizChartTypes : {
			COLUMN : "Column",
			LINE : "Line",
			PIE : "Pie",
			STACKED_COLUMN : "StackedColumn",
			PERCENTAGE_STACKED_COLUMN : "StackedColumn100",
			SCATTERPLOT : "Scatter",
			BUBBLE : "Bubble"
		},
		thumbnailDimensions : {
			HEIGHT : "75px",
			WIDTH : "180px",
			STEP_WIDTH : "202px",
			STEP_HEIGHT : "170px",
			STEP_MARGIN : "20px",
			SEPARATOR_HEIGHT : "25px",
			REMOVE_ICON_HEIGHT : "20px",
			TOTAL_STEP_HEIGHT : 215  // Step height + margin + separator.
		},
		printChartDimensions : {
			WIDTH : "0.89",
			POTRAITWIDTH : "793.700787402",
			LANDSCAPEWIDTH : "1122.519685039"
		},
		analysisPathArea : {
			HEADERHEIGHT : 140
		},
		chartArea : {
			CHARTHEADERHEIGHT : 120
		},
		carousel: {
			SCROLLCONTAINER: 230,
			DNDBOX : 234,
		},
		landingPage : "landingPage",
};

}; // end of sap/apf/ui/utils/constants.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.utils.facetFilterHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare('sap.apf.ui.utils.facetFilterHandler');
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained

/**
 * @private
 * @experimental The complete class interface is subject to ongoing work and not yet stable (as of Version 1.24.0).
 * @class Facet filter handler
 * @description 
 * @param 
 * @name sap.apf.ui.utils.FacetFilterHandler
 * @returns {sap.apf.ui.utils.FacetFilterHandler}
 */
sap.apf.ui.utils.FacetFilterHandler = function(oInject) {
	"use strict";
	var oCoreApi = oInject.oCoreApi;
	var oSBHandler = oInject.oSBHandler;
	var oPathContextHandler = oInject.oPathContextHandler;
	var oUiApi = oInject.oUiApi;
	var aFacetFiltersFromConfiguration = [];
	var aSbFilters = [];
	var aFacetFilters = [];
	var aConsolidatedFilters = [];
	var oContextFilterMap = {};
	var oFacetFilterView;
	var oSBFilterPromise;
	/**
	 * @private
	 * @function
	 * @name sap.apf.ui.utils.FacetFilterHandler#initialize
	 * @description Initializes the oSBHandler, fetches the facetfilter configuration and trigger context creation.
	 * */
	this.initialize = function() {
		oSBHandler.initialize();
		aFacetFiltersFromConfiguration = oCoreApi.getFacetFilterConfigurations();
		oSBFilterPromise = oSBHandler.getAllFilters();
		oSBFilterPromise.then(this._prepareContext.bind(this));
	};
	this._prepareContext = function(sbFilters) {
		this._setSBFilters(sbFilters);
		this._setFacetFiltersFromConfiguration();
		this._setConsolidatedFilters();
		this._setContextFilterMap();
		this._updatePathContextHandler();
		//this._drawFacetFilter();
	};
	this._setSBFilters = function(sbFilters) {
		aSbFilters = sbFilters;
	};
	this._setFacetFiltersFromConfiguration = function() {
		var self = this;
		aFacetFiltersFromConfiguration.forEach(function(oFacetFilter) {
			if (self._isPresentInSbFilters(oFacetFilter.property)) {
				return;
			}
			if (oFacetFilter.preselectionDefaults || oFacetFilter.preselectionFunction) {
				var aValues = oFacetFilter.preselectionDefaults || oFacetFilter.preselectionFunction.call();
				aValues.forEach(function(value) {
					var filterObj = {
						NAME : oFacetFilter.property,
						OPERATOR : "EQ",
						VALUE_1 : value,
						VALUE_2 : null
					};
					aFacetFilters.push(filterObj);
				});
			}
		});
	};
	this._setConsolidatedFilters = function() {
		aConsolidatedFilters = [].concat(aSbFilters, aFacetFilters);
	};
	this._setContextFilterMap = function() {
		aConsolidatedFilters.forEach(function(oFilter) {
			if (!oContextFilterMap[oFilter.NAME]) {
				oContextFilterMap[oFilter.NAME] = [];
			}
			oContextFilterMap[oFilter.NAME].push({
				OPERATOR : oFilter.OPERATOR,
				VALUE_1 : oFilter.VALUE_1,
				VALUE_2 : oFilter.VALUE_2
			});
		});
		oContextFilterMap = d3.map(oContextFilterMap);
	};
	this._updatePathContextHandler = function() {
		oContextFilterMap.forEach(function(sFilterName, aExpressions) {
			var oFilter = oCoreApi.createFilter();
			var oFilterOr = oFilter.getTopAnd().addOr(sFilterName);
			aExpressions.forEach(function(oExpression) {
				var oFilterExpression = {
					name : sFilterName,
					operator : oExpression.OPERATOR,
					value : oExpression.VALUE_1
				};
				if (oExpression.OPERATOR === "BT") {
					oFilterExpression.high = oExpression.VALUE_2;
				}
				oFilterOr.addExpression(oFilterExpression);
			});
			oPathContextHandler.update(sFilterName, oFilter);
		});
		oPathContextHandler.saveInitialContext();
		oUiApi.contextChanged();
	};
	this._isPresentInSbFilters = function(sFilterName) {
		var aSbFilterNames = aSbFilters.map(function(oFilter) {
			return oFilter.NAME;
		});
		var index = aSbFilterNames.indexOf(sFilterName);
		return index !== -1;
	};
	this._drawFacetFilter = function () {
		if (aFacetFiltersFromConfiguration && aFacetFiltersFromConfiguration.length) {
			oFacetFilterView = sap.ui.view({
				viewName : "sap.apf.ui.reuse.view.facetFilter",
				type : sap.ui.core.mvc.ViewType.JS,
				viewData : {
					oCoreApi : oCoreApi,
					oUiApi: oUiApi,
					oPathContextHandler: oPathContextHandler,
					aFacetFilterListData : aFacetFiltersFromConfiguration
				}
			});
			oUiApi.getLayoutView().getController().addFacetFilter(oFacetFilterView);
			sap.ui.getCore().applyChanges(); // For the facet filter to appear on the screen without any delay.
		}
	};
	/**
	 * @private
	 * @experimental Refactoring trigerred by the Mozilla bug
	 * @name sap.apf.ui.utils.FacetFilterHandler#drawFacetFilter
	 * @description draws facet filter on layout subHeader when smart business filters are resolved.
	 */
	this.drawFacetFilter = function() {
		oSBFilterPromise.then(this._drawFacetFilter);
	};
	/**
	 * @private
	 * @function
	 * @name sap.apf.ui.utils.FacetFilterHandler#contextChanged
	 * @description Invokes contextChanged on facet filter view.
	 * */
	this.contextChanged = function () {
		if (oFacetFilterView) {
			oFacetFilterView.onContextChanged.call();
		}
	};
};
}; // end of sap/apf/ui/utils/facetFilterHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.utils.facetFilterListHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare('sap.apf.ui.utils.facetFilterListHandler');

/**
 * @private
 * @experimental The complete class interface is subject to ongoing work and not yet stable (as of Version 1.24.0).
 * @class Facet filter list handler
 * @description Handler for facet filter list controls
 * @param {sap.apf.core.instance} oCore Api
 * @param (sap.apf.utils.PathContextHandler} Path context handler instance.
 * @param {Array} facet filter configuration of the filter.
 * @name sap.apf.ui.utils.FacetFilterHandler
 * @returns {sap.apf.ui.utils.FacetFilterHandler}
 */
sap.apf.ui.utils.FacetFilterListHandler = function (oCoreApi, oUiApi, oPathContextHandler, oFacetFilterData) {
    "use strict";
    var oFilterTitle = oFacetFilterData.label;
    var sFilterProperty = oFacetFilterData.property;
    var sAlias = oFacetFilterData.alias;
    var sSelectProperty = sAlias || sFilterProperty;
    var sFrr = oFacetFilterData.filterResolutionRequest;
    var sVhr = oFacetFilterData.valueHelpRequest;
    var oMasterDataDeffered;
    var oSelectDataDeffered;
    var bTriedTextResolutionBefore = false; // To make sure that text resolution does not happen again on "open path scenario".
    var bHasServedBefore = false;	// To make sure that the filter value is not saved as initial context during "open path scenario".
    /**
     * @public
     * @function
     * @name sap.apf.ui.utils.FacetFilterListHandler#fetchValueHelpData
     * @description Returns a promise which will be resolved with value help data when the request is successful
     * It will be rejected with error object if the request does not succeed.
     * The promise will get resolved with an empty array if value help request is not available.
     * The promise will get resolved with an {Array} with elements of type {key: skey, text: sText}.
     * @returns {jQuery Promise}
     * */
    this.fetchValueHelpData = function () {
        oMasterDataDeffered = new jQuery.Deferred();
        if (sVhr) {
            var oVhrPromise = new sap.apf.ui.utils.PromiseBasedCreateReadRequest(oCoreApi, sVhr);
            oVhrPromise.then(this._getFormattedData).then(this._resolveMasterDataPromiseWith, this._handleError);
        } else {
            this._resolveMasterDataPromiseWith([]);
        }
        return oMasterDataDeffered.promise();
    };
    /**
     * @public
     * @function
     * @name sap.apf.ui.utils.FacetFilterListHandler#fetchSelectedFilterData
     * @description Returns a promise which will be resolved with selected filter data.
     * The promise will get resolved with an empty array if filter is not available in path context.
     * The promise will get resolved with an {Array} with elements of type {key: skey, text: sText}.
     * It will be rejected with error object if the request does not succeed.
     * @returns {jQuery Promise}
     * */
    this.fetchSelectedFilterData = function () {
        oSelectDataDeffered = new jQuery.Deferred();
        var bPropertyPresentInContext = oPathContextHandler.getAllIds().indexOf(sFilterProperty) !== -1;
        if (bPropertyPresentInContext) {
            var oFilter = oPathContextHandler.get(sFilterProperty);
            var aOperators = oFilter.getInternalFilter().getFilterTerms().map(function (term) {
                return term.getOp();
            });
            var bHasRelationalOperators = aOperators.some(function (op) {
                return op !== "EQ";
            });
            if (bHasRelationalOperators || (!sVhr && !bTriedTextResolutionBefore)) {
                bTriedTextResolutionBefore = true;
                if (sFrr) {
                    var oFrrPromise = new sap.apf.ui.utils.PromiseBasedCreateReadRequest(oCoreApi, sFrr, oFilter);
                    oFrrPromise.then(this._resolveRelationalOperatorFromPCH, this._handleError).then(this._getFormattedData).then(this._resolveSelectDataPromiseWith);
                    return oSelectDataDeffered.promise();
                }
                if (bHasRelationalOperators) {
                    this._handleFrrError();
                    return oSelectDataDeffered.promise();
                }
            }
            var aData = oFilter.getInternalFilter().getFilterTerms().map(function (term) {
                return {
                    key: term.getValue(),
                    text: term.getValue()
                };
            });
            this._resolveSelectDataPromiseWith(aData);
        } else {
            this._resolveSelectDataPromiseWith([]);
        }
        return oSelectDataDeffered.promise();
    };
    this._resolveMasterDataPromiseWith = function (aValues) {
        oMasterDataDeffered.resolveWith(this, [ aValues ]);
    };
    this._resolveSelectDataPromiseWith = function (aValues) {
        bHasServedBefore = true;
        oSelectDataDeffered.resolveWith(this, [ aValues ]);
    };
    this._getFormattedData = function (oArg) {
        var aData = oArg.aData;
        var oMetadata = oArg.oMetadata;
        var oFormatter = new sap.apf.ui.representations.utils.formatter({
            getEventCallback: oUiApi.getEventCallback.bind(oUiApi),
            getTextNotHtmlEncoded: oCoreApi.getTextNotHtmlEncoded
        }, oMetadata, aData);
        var sTextProperty = oMetadata.getPropertyMetadata(sSelectProperty).text;
        var aFormattedData = aData.map(function (oData) {
            var sFormattedKeyPropertyValue = oFormatter.getFormattedValue(sSelectProperty, oData[sSelectProperty]);
            var sTextValue;
            if (sTextProperty) {
                var sFormattedTextPropertyValue = oFormatter.getFormattedValue(sTextProperty, oData[sTextProperty]);
                sTextValue = sFormattedKeyPropertyValue + " - " + sFormattedTextPropertyValue;
            } else {
                sTextValue = sFormattedKeyPropertyValue;
            }
            return {
                key: oData[sSelectProperty],
                text: sTextValue
            };
        });
        return aFormattedData;
    };
    this._resolveRelationalOperatorFromPCH = function (oArg) {
        var aData = oArg.aData;
        var oMetadata = oArg.oMetadata;
        var oFilter = oCoreApi.createFilter();
        var oOrTerm = oFilter.getTopAnd().addOr();
        aData.forEach(function (oData) {
            var sValue = oData[sFilterProperty];
            oOrTerm.addExpression({
                name: sFilterProperty,
                operator: "EQ",
                value: sValue
            });
        });
        oPathContextHandler.update(sFilterProperty, oFilter);
        if (!bHasServedBefore) {
            oPathContextHandler.saveInitialContext([sFilterProperty]);
        }
        return {
            aData: aData,
            oMetadata: oMetadata
        }; // TO ALLOW METHOD CHAINING.
    };
    this._handleError = function () {
        var oMessageObject = oCoreApi.createMessageObject({
            code: "6010",
            aParameters: [ oCoreApi.getTextNotHtmlEncoded(oFilterTitle) ]
        });
        oCoreApi.putMessage(oMessageObject);
    };
};
/**
 * @private
 * @experimental The complete class interface is subject to ongoing work and not yet stable (as of Version 1.24.0).
 * @class Promise Based CreateReadRequest
 * @description Wraps sap.apf.core.CreateReadRequest inside a jquery promise and provides the interface.
 * @param {sap.apf.core.instance} oCore Api
 * @param {string} Request Id
 * @param {sap.apf.core.Filter} Filter Object
 * @name sap.apf.ui.utils.PromiseBasedCreateReadRequest
 * @returns {jQuery Promise}
 */
sap.apf.ui.utils.PromiseBasedCreateReadRequest = function (oCoreApi, sRequestId, oFilter) {
    var oDeferred = new jQuery.Deferred();
    var oReadRequest = oCoreApi.createReadRequestByRequiredFilter(sRequestId);
    var fnCallback = function (aData, oMetadata, oMessageObject) {
        var oArg = {
            aData: aData,
            oMetadata: oMetadata
        };
        if (aData && oMetadata) {
            oDeferred.resolveWith(this, [oArg]);
        } else {
            oDeferred.rejectWith(this, [oArg]);
        }
    };
    if (!oFilter) {
        oFilter = oCoreApi.createFilter();
    }
    oReadRequest.send(oFilter, fnCallback);
    return oDeferred.promise();
};

}; // end of sap/apf/ui/utils/facetFilterListHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.utils.print') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.apf.ui.utils.print");
/** 
 *@class PrintHelper
 *@memberOf sap.apf.ui.utils
 *@description has functions to perform printing of Analysis Path
 *  
 */
sap.apf.ui.utils.PrintHelper = function(oInject) {
	"use strict";
	this.oCoreApi = oInject.oCoreApi;
	this.oUiApi = oInject.uiApi;

	this.oPathContextHandler = oInject.oPathContextHandler;
	
	/**
	 *@method printLayout defines layout used by each step when being printed
	 *@usage printLayout has to be used to get the layout for individual steps in analysis path.
	 *@param step = Used to get the step information
	 *@param index = index of the step being printed
	 *@param stepsLength = total number of steps in an Analysis Path
	 *@returns the oPrintLayout for a Step in an Analysis Path.
	 */
	this.printLayout = function(oStep, index, stepsLength) {
		var oMessageObject;
		var date = new Date();
		var appName = this.oCoreApi.getApplicationConfigProperties().appName;
		if (!appName) {
			oMessageObject = this.oCoreApi.createMessageObject({
				code : "6003",
				aParameters : [ "appName" ]
			});
			this.oCoreApi.putMessage(oMessageObject);
		}
		var analysisPathTitle = this.oUiApi.getAnalysisPath().oSavedPathName.getTitle();
		var header = new sap.ui.core.HTML({
			content : [ '<div class="subHeaderPrintWrapper"><p class="printHeaderTitle"> ' + this.oCoreApi.getTextHtmlEncoded(appName) + ' : ' + jQuery.sap.encodeHTML(analysisPathTitle) + '</p>',
					'<p class="printHeaderDate"> ' + date.toTimeString() + ' </p></div><div class="clear"></div>', '<div class="printChipName"><p>' + this.oCoreApi.getTextHtmlEncoded("print-step-number", [ index, stepsLength ]) + '</p></div>' ]
					.join("")
		});
		var chartLayout = new sap.ui.layout.VerticalLayout();
		var oStepTitle = this.oCoreApi.getTextNotHtmlEncoded(oStep.title);
		var selectedRepresentation = oStep.getSelectedRepresentation();
		var stepRepresentation = selectedRepresentation.bIsAlternateView ? selectedRepresentation.toggleInstance : selectedRepresentation;
		if (selectedRepresentation.bIsAlternateView) {
			var data = oStep.getSelectedRepresentation().getData();
			var metadata = oStep.getSelectedRepresentation().getMetaData();
			stepRepresentation.setData(data, metadata);
		}
		var representation = {};
		if (stepRepresentation.type === "TableRepresentation") {
			representation = stepRepresentation.getPrintContent(oStepTitle);
			representation.setWidth("1000px");
		} else {
			representation = stepRepresentation.getPrintContent(oStepTitle);
		}
		//Show/Hide Legend for print content
		if (stepRepresentation.bIsLegendVisible === false) {
			if (representation.setLegend !== undefined) {
				representation.setLegend(new sap.viz.ui5.types.legend.Common({
					visible : false
				}));
			}
			if (representation.setSizeLegend !== undefined) {
				representation.setSizeLegend(new sap.viz.ui5.types.legend.Common({
					visible : false
				}));
			}
		} else {
			if (representation.setLegend !== undefined) {
				representation.setLegend(new sap.viz.ui5.types.legend.Common({
					visible : true
				}));
			}
			if (representation.setSizeLegend !== undefined) {
				representation.setSizeLegend(new sap.viz.ui5.types.legend.Common({
					visible : true
				}));
			}
		}
		chartLayout.addContent(representation);
		var oPrintLayout = new sap.ui.layout.VerticalLayout({
			content : [ header, chartLayout ]
		}).addStyleClass("representationContent"); // @comment : apfPrintLayout class not provided in css
		return oPrintLayout;
	};
	
	/**
	 *@method Format the values with respect to data type
	 *@usage format the values 
	 */
	this.formatter = function (metadata, value) {
		
		/**
		 * @memberOf sap.apf.ui.utils.PrintHelper
		 * @method doYearMonthFormat
		 * @param fieldValue
		 * @description yearMonth formatting 
		 */
		var doYearMonthFormat = function(fieldValue) {
			var jan = this.oCoreApi.getTextNotHtmlEncoded("month-1-shortName");
			var feb = this.oCoreApi.getTextNotHtmlEncoded("month-2-shortName");
			var mar = this.oCoreApi.getTextNotHtmlEncoded("month-3-shortName");
			var apr = this.oCoreApi.getTextNotHtmlEncoded("month-4-shortName");
			var may = this.oCoreApi.getTextNotHtmlEncoded("month-5-shortName");
			var jun = this.oCoreApi.getTextNotHtmlEncoded("month-6-shortName");
			var jul = this.oCoreApi.getTextNotHtmlEncoded("month-7-shortName");
			var aug = this.oCoreApi.getTextNotHtmlEncoded("month-8-shortName");
			var sep = this.oCoreApi.getTextNotHtmlEncoded("month-9-shortName");
			var oct = this.oCoreApi.getTextNotHtmlEncoded("month-10-shortName");
			var nov = this.oCoreApi.getTextNotHtmlEncoded("month-11-shortName");
			var dec = this.oCoreApi.getTextNotHtmlEncoded("month-12-shortName");
			var monthsArray = [ jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec ];
			var year = fieldValue.substr(0, 4);
			var month = monthsArray[fieldValue.substr(4, 6) - 1];
			return month + " " + year;
		};
		
		var formattedFieldValue, yearMetadata, quarterMetadata, dateFromMetadata, yearInfoFromDate, weekMetadata, dateFormat;
		
		if (metadata.getAttribute("isCalendarYearMonth")) { //calenderYearMonth
			if (originalFieldValue === null) {
				return "";
			}
			formattedFieldValue = doYearMonthFormat(value);
		} else if (metadata.type === "Edm.DateTime") { //dateTime
			if (value === null) {
				return "-";
			}
			dateFormat = new Date(parseInt(value.slice(6, value.length - 2), 10));
			dateFormat = dateFormat.toLocaleDateString();
			if (dateFormat === "Invalid Date") {
				return "-";
			}
			formattedFieldValue = dateFormat;
		} else if (metadata.getAttribute("isCalendarDate")) {
			if (value === null) {
				return "-";
			}
			yearMetadata = value.substr(0, 4);
			var monthMetadata = value.substr(4, 2);
			var dateMetadata = value.substr(6, 2);
			dateFormat = new Date(yearMetadata, monthMetadata, dateMetadata);
			dateFormat = dateFormat.toLocaleDateString();
			if (dateFormat === "Invalid Date") {
				return "-";
			}
			formattedFieldValue = dateFormat;
		} else if (metadata.getAttribute("isCalendarYearQuarter")) {
			if (value === null) {
				return "";
			}
			yearMetadata = value.substr(0, 4);
			quarterMetadata = value.substr(4, 1);
			dateFromMetadata = new Date(yearMetadata);
			yearInfoFromDate = dateFromMetadata.getFullYear();
			var quarterInfo;
			quarterInfo = "Q" + quarterMetadata;
			var formattedYearQuarter = quarterInfo + " " + yearInfoFromDate;
			formattedFieldValue = formattedYearQuarter;
		} else if (metadata.getAttribute("isCalendarYearWeek")) {
			if (value === null) {
				return "";
			}
			yearMetadata = value.substr(0, 4);
			weekMetadata = value.substr(4, 2);
			dateFromMetadata = new Date(yearMetadata);
			yearInfoFromDate = dateFromMetadata.getFullYear();
			var weekInfo;
			weekInfo = "CW" + weekMetadata;
			var formattedYearWeek = weekInfo + " " + yearInfoFromDate;
			formattedFieldValue = formattedYearWeek;
		} else { //default value
			if (value === null) {
				return "null";
			}
			formattedFieldValue = value;
		}
		
		// application formatter callback
		var callback = this.oUiApi.getEventCallback(sap.apf.core.constants.eventTypes.format);
		if (typeof callback === "function") {
			var appFormattedFieldValue = callback.apply(this.oUiApi, [ metadata, metadata.name, value, formattedFieldValue ]);
			if (appFormattedFieldValue !== undefined) {
				formattedFieldValue = appFormattedFieldValue;
			}
			if (appFormattedFieldValue === null) {
				formattedFieldValue = "";
			}
		}
		return formattedFieldValue;
	};
	
	/**
	 *@method Print used to print all the steps in Analysis Path.
	 *@usage PrintHelper().doPrint has to be used for printing Analysis Path
	 */
	this.doPrint = function() {
		this.oUiApi.createApplicationLayout(false).setBusy(true);//sets the Local Busy Indicator for the print
		var allSteps = this.oCoreApi.getSteps();
		var stepLayout = new sap.ui.layout.VerticalLayout();
		var domContent = "";
		var pTimer = 2000;
		var that = this;
		var date = new Date();
		var appName = this.oCoreApi.getApplicationConfigProperties().appName;
		var analysisPathTitle = this.oUiApi.getAnalysisPath().oSavedPathName.getTitle();
		jQuery('#apfPrintArea').remove(); // removing the div which holds the printable content
		jQuery("body").append('<div id="apfPrintArea"></div>'); //div which holds the printable content
		
		//Facet Filter Printing as the initial page 
		//Print the filter expression provided by getContext() API 
		var facetFilterExpr;
		var callback = this.oUiApi.getEventCallback(sap.apf.core.constants.eventTypes.printTriggered);
		var getAllIds = this.oPathContextHandler ? this.oPathContextHandler.getAllIds() : [];
		var filterExpr = [];
		
		//Check if pathContextHandler returns values else fallback to getContext API
		if(getAllIds.length > 0) {
			for (var i = 0; i < getAllIds.length; i++) {
				var aFilter = this.oPathContextHandler.get(getAllIds[i]).getExpressions();
				filterExpr.push(aFilter[0]);
			}
		} else {
			filterExpr = this.oCoreApi.getContext().getExpressions();
		}
		
		//Formatted Filter Values from APF
		var formattedFilters = function (context) {
			var filterValues = [];
			var filterArr = [];
			for (var i = 0; i < filterExpr.length; i++) {
				for (var j = 0; j < filterExpr[i].length; j++) {
					var filterObj = filterExpr[i][j];
					var filterName = "";
					var filterVal = "";
					context.oCoreApi.getMetadataFacade().getProperty(filterExpr[i][j].name, function (o) {
						filterName = o.label;
						filterVal = context.formatter(o, filterExpr[i][j].value);
					});
					filterObj["name"] = filterName;
					filterObj["value"] = filterVal;
					filterValues.push(filterObj);
				}
				filterArr.push(filterValues);
				filterValues = [];
			}
			
			return filterArr;
		};
		
		
		var callbackContext = {
			getTextNotHtmlEncoded : that.oCoreApi.getTextNotHtmlEncoded
		};
		
		if (callback !== undefined) {
			var facetFilterArr = callback.apply(callbackContext, [filterExpr]) || [];
			facetFilterExpr = (facetFilterArr.length > 0) ? facetFilterArr : formattedFilters(this);
		} else {
			facetFilterExpr = formattedFilters(this);
		}
		
		var header = new sap.ui.core.HTML({
			content : [ '<div class="subHeaderPrintWrapper"><p class="printHeaderTitle"> ' + this.oCoreApi.getTextHtmlEncoded(appName) + ' : ' + jQuery.sap.encodeHTML(analysisPathTitle) + '</p>',
					'<p class="printHeaderDate"> ' + date.toTimeString() + ' </p></div><div class="clear"></div>' ].join("")
		});
		var facetLayout = new sap.ui.layout.VerticalLayout();
		var filterValue = "";
		var filterName = "";
		var i,  j; 
		//Formatting the facet filter array
		for(  i = 0; i < facetFilterExpr.length; i++) {
			for(  j = 0; j < facetFilterExpr[i].length; j++) {
				filterName = facetFilterExpr[i][j].name;
				if (j !== facetFilterExpr[i].length - 1) {
					filterValue += facetFilterExpr[i][j].value + ", ";
				} else {
					filterValue += facetFilterExpr[i][j].value;
				}
			}
			var mFilterName = new sap.m.Text({
				text : filterName
			}).addStyleClass("printFilterName");
			var mFilterValue = new sap.m.Text({
				text : filterValue
			}).addStyleClass("printFilterValue");
			facetLayout.addContent(mFilterName);
			facetLayout.addContent(mFilterValue);
			//Reset the filter value
			filterValue = "";
		}
		//Facet UI Layout
		var oPrintFacetLayout = new sap.ui.layout.VerticalLayout({
			content : [ header, facetLayout ]
		}).addStyleClass("representationContent");
		stepLayout.addContent(oPrintFacetLayout);
		var k;
		for(  k = 0 ; k < allSteps.length; k++) {
			var index = parseInt(k, 10) + 1;
			stepLayout.addContent(this.printLayout(allSteps[k], index, allSteps.length));
		}
		stepLayout.placeAt("apfPrintArea");
		if (jQuery(".v-geo-container").length) {//set the timer if geomap exists
			pTimer = 4000;
		}
		window.setTimeout(function() {
			that.oUiApi.createApplicationLayout(false).setBusy(false); //Removes the Local Busy Indicator after the print
		}, pTimer - 150);
		window.setTimeout(function() { //Set Timeout to load the content on to dom
			jQuery("#" + stepLayout.sId + " > div").after("<div class='page-break'> </div>");
			domContent = stepLayout.getDomRef(); // Get the DOM Reference
			var table = jQuery('#apfPrintArea .sapUiTable');
			if (table.length) {
				var colCount = jQuery('#apfPrintArea .printTable .sapMListTblHeader .sapMListTblCell').length;
				if (colCount > 11) {
					jQuery("#setPrintMode").remove();
					jQuery("<style id='setPrintMode' > @media print and (min-resolution: 300dpi) { @page {size : landscape;}}</style>").appendTo("head");
				} else {
					jQuery("#setPrintMode").remove();
					jQuery("<style id='setPrintMode'>@media print and (min-resolution: 300dpi) { @page {size : portrait;}}</style>").appendTo("head");
				}
			}
			jQuery("#apfPrintArea").empty(); //Clear the apfPrintArea
			jQuery("#sap-ui-static > div").hide(); // Hide popup
			jQuery("#apfPrintArea").append(jQuery(domContent).html()); //Push it to apfPrintArea
			var i;
			for(  i = 0; i < jQuery("#apfPrintArea").siblings().length; i++){
				//TODO alternate way of hiding the content and printing only the representations?????     
				jQuery("#apfPrintArea").siblings()[i].hidden = true; // hiding the content apart from apfPrintArea div
			}

			window.print(); //print the content
			//Workaround to get the width of the column cell
			window.setTimeout(function() {
				for(  i = 0; i < jQuery("#apfPrintArea").siblings().length; i++){
					jQuery("#apfPrintArea").siblings()[i].hidden = false;
				}
				stepLayout.destroy(); //Destroy the reference & remove from dom

			}, 10);
		}, pTimer);
	};
};
}; // end of sap/apf/ui/utils/print.js
if ( !jQuery.sap.isDeclared('sap.apf.utils.hashtable') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
 
/**
  * Hashtable
  */
jQuery.sap.declare('sap.apf.utils.hashtable');
/**
 * @class This function return an object of DataAccess with all properties as Constructor Function - this Class build URIs for ChipRequest-Instance
 */
sap.apf.utils.Hashtable = function (oMessageHandler, obj) {
	var nNumberOfItems = 0;
	var oItemHolder = {};

	/**
	 * @description type information
	 */
	this.type = "hashTable";

	/**
	 * @description add an object to the hash table with key and value
	 * @param key unique key
	 * @param value value of object
	 * @returns previous object 
	 */
	this.setItem = function (key, value) {
		var oPreviousValue;
		oMessageHandler.check((key !== undefined && key !== null), "sap.apf.utils.HashTable.setItem key undefined");
		oMessageHandler.check((value !== undefined && value !== null), "sap.apf.utils.HashTable.setItem value undefined");
		if (this.hasItem(key)) {
			oPreviousValue = oItemHolder[key];
		} else {
			nNumberOfItems++;
		}
		oItemHolder[key] = value;
		return oPreviousValue;
	};

	/**
	 * @descriptions returns the number of items in the hash table
	 * @returns {nNumber} number of items in hash table
	 */
	this.getNumberOfItems = function () {
		return nNumberOfItems;
	};
	/**
	 * @description get the value by the key
	 * @param key
	 * @returns hashed item or undefined
	 */
	this.getItem = function (key) {
		oMessageHandler.check((key !== undefined && key !== null), "sap.apf.utils.HashTable.getItem key undefined");
		return this.hasItem(key) ? oItemHolder[key] : undefined;
	};

	/**
	 * @description tests, whether the key exists in the hash table
	 * @param key
	 * @returns boolean
	 */
	this.hasItem = function (key) {
		oMessageHandler.check((key !== undefined && key !== null), "sap.apf.utils.HashTable.hasItem key undefined");
		return oItemHolder.hasOwnProperty(key);
	};

	/**
	 * @description removes an item from the hash table with given key
	 * @param key
	 * @returns removed item or otherwise undefined
	 */
	this.removeItem = function (key) {
		oMessageHandler.check((key !== undefined && key !== null), "sap.apf.utils.HashTable.removeItem key undefined");
		var oItemRemoved;
		if (this.hasItem(key)) {
			oItemRemoved = oItemHolder[key];
			nNumberOfItems--;
			delete oItemHolder[key];
			return oItemRemoved;
		} else {
			return undefined;
		}
	};

	/**
	 * @description returns all keys of the hash table
	 * @return array with keys
	 */
	this.getKeys = function () {
		var aKeys = [];
		for (var k in oItemHolder) {
			if (this.hasItem(k)) {
				aKeys.push(k);
			}
		}
		return aKeys;
	};

	/**
	 * @description applies a function on each item in the hash table
	 * @param fn is function to be applied with k and item as argument
	 */
	this.each = function (fn) {
		for (var k in oItemHolder) {
			if (this.hasItem(k)) {
				fn(k, oItemHolder[k]);
			}
		}
	};

	/**
	 * @descriptions deletes all key/value pairs of the hash table
	 */
	this.reset = function () {
		oItemHolder = {};
		nNumberOfItems = 0;
	};
};

}; // end of sap/apf/utils/hashtable.js
if ( !jQuery.sap.isDeclared('sap.apf.utils.pathContextHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare('sap.apf.utils.pathContextHandler');


/**
 * @private
 * @class Path context handler
 * @description Provides methods that allow to manage the context that is used
 *              for each path update. The context consists of logical filter
 *              expressions that need to be applied for all OData server
 *              requests during update of an analysis path. Methods of this
 *              class allow partial updates of the overall context by components
 *              being responsible for partial concerns of the overall context.
 * @param {Object} functions Object containing functions to be used by path context
 *            handler.
 * @param {sap.apf.core.MessageHandler} msgHandler Message handler instance.
 * @name sap.apf.utils.PathContextHandler
 * @returns {sap.apf.utils.PathContextHandler}
 */
sap.apf.utils.PathContextHandler = function(functions, msgHandler) {
	var uniqueConsumerId = 1;
	var contextFragments = {};
    var initialContext;
	/**
	 * @private
	 * @function
	 * @name sap.apf.utils.PathContextHandler#add
	 * @description Adds a context fragment for a path context. Creates a unique
	 *              fragment and a corresponding identifier. Subsequent changes
	 *              need to be done by the update method providing the
	 *              identifier.
	 * @param {sap.apf.utils.Filter} filter
	 *            filter Requires a filter instance
	 * @returns {number} Unique numeric ID to be provided for later updates of the same
	 *          fragment. Consecutive numbers for the different unique IDs are not guaranteed.
	 */
	this.add = function(filter) {
		contextFragments[uniqueConsumerId] = filter;
		functions.setContext(combineFragments());
		return uniqueConsumerId++;
	};

	/**
	 * @private
	 * @function
	 * @name sap.apf.utils.PathContextHandler#update
	 * @description Updates a context fragment for the given identifier by fully
	 *              replacing the existing one.
	 * @param {id}
	 *            id Either requires numeric identifier of the context fragment that was returned by
	 *            add method or requires an external identifier of type string that has to be determined by the consumer.
	 *            When using identifiers of type string the add method must not be used. Update is sufficient.
	 *            It either overwrites an existing context fragment for the identifier or creates a new one. 
	 * @param {sap.apf.utils.Filter}
	 *            filter Requires a filter instance
	 */
	this.update = function(id, filter) {
		if(id && typeof id == 'number') {
		    msgHandler.check((id > 0 && id < uniqueConsumerId),'Passed unknown numeric identifier during update of path context handler');
            if(!(id > 0 && id < uniqueConsumerId)) {
                return;
            }
		} else if(!id || typeof id != 'string') {
		    msgHandler.check(id,'Passed falsy dentifier during update of path context handler');
		    return;
		}
		contextFragments[id] = filter;
		functions.setContext(combineFragments());
	};

	/**
	 * @private
	 * @function
	 * @name sap.apf.utils.PathContextHandler#get
	 * @description Returns a context fragment for the given identifier
	 * @param {number|string} id Requires identifier of the context fragment. The id was returned by
	 *            the add method. 
	 * @returns {sap.apf.utils.Filter} Context assigned to identifier
	 */
	this.get = function(id) {
	    switch (typeof id) {
	    case 'number':
	        msgHandler.check((id > 0 && id < uniqueConsumerId),'Passed unknown numeric identifier during get from path context handler');
	        break;
	    case 'string':
	        msgHandler.check(contextFragments[id],'Passed unknown string identifier during get from path context handler');
	    }
		return contextFragments[id];
	};
	/**
	 * @private
	 * @function
	 * @name sap.apf.utils.PathContextHandler#getAllIds
	 * @description Returns the ids for all context fragments
	 * @returns [number|string] Ids for all context fragments
	 */
	this.getAllIds = function() {
		var aResultIds = [];
		for(property in contextFragments) {
		    if(contextFragments.hasOwnProperty(property)) {
                aResultIds.push(ifPossibleConvertToNumber(property));
            }
		}
		return aResultIds;
	};
	/**
	 * @private
	 * @function
	 * @name sap.apf.utils.PathContextHandler#serialize
	 * @description Serializes the content of the pathContextHandler.
	 * @returns {object} Serialized data as deep JS object
	 */
	this.serialize = function() {
		var serializableData = {};
		for(property in contextFragments) {
		    if(contextFragments.hasOwnProperty(property)) {
		        serializableData[property] = contextFragments[property].serialize();
		    }
		}
		return serializableData;
	};

	/**
	 * @private
	 * @function
	 * @name sap.apf.utils.PathContextHandler#deserialize
	 * @description Re-initializes path context context handler from serialized data.
	 * @param deserializableData
	 *            Serialized data used to re-initialize path context handler
	 * @returns {object} Re-initialize instance of sap.apf.utils.pathContextHandler
	 */
	this.deserialize = function(deserializableData) {
	    uniqueConsumerId = 1;
		contextFragments = {};
	      for(property in deserializableData) {
	            if(deserializableData.hasOwnProperty(property)) {
	                contextFragments[property] = new sap.apf.utils.Filter(msgHandler).deserialize(deserializableData[property]);
	                uniqueConsumerId++;
	            }
	      }
		return this;
	};
    /**
     * @private
     * @function
     * @name sap.apf.utils.PathContextHandler#saveInitialContext
     * @description Internally saves the current state of the filter fragments
     * @param {array} [ids]
     * If provided initial state will be selectively saved.
     * Only the filter fragments for the provided IDs are saved or updated as initial state.
     * If omitted, all filter current fragments are saved or updated as initial state.
     */
    this.saveInitialContext = function(ids) {
        var property,
            i,
            len;
        var initialContextBeforeSaveOrUpdate = {};
        var initialContextAfterSaveOrUpdate = {};
        if(ids) {
            for(property in initialContext) {
                if(initialContext.hasOwnProperty(property)) {
                    initialContextBeforeSaveOrUpdate[property] = new sap.apf.utils.Filter(msgHandler).deserialize(initialContext[property]);
                }
            }
            for(i = 0, len = ids.length; i < len; i++) {
                initialContextBeforeSaveOrUpdate[ids[i]] = contextFragments[ids[i]];
            }
            for(property in initialContextBeforeSaveOrUpdate){
                initialContextAfterSaveOrUpdate[property] = initialContextBeforeSaveOrUpdate[property].serialize();
            }
            initialContext = initialContextAfterSaveOrUpdate;
        } else {
            initialContext = this.serialize();
        }
    };
    /**
     * @private
     * @function
     * @name sap.apf.utils.PathContextHandler#restoreInitialContext
     * @description Internally restores a previously saved state of filter fragments.
     * If no initial state has been saved before the current filter fragments remain unchanged.
     * @param {array} [ids]
     * If provided initial state will be selectively restored.
     * Only the filter fragments for the provided IDs are restored.
     * If omitted, all filter fragments are restored to the state that has been saved as initial state.
     */
    this.restoreInitialContext = function(ids) {
        var fragmentsToBeKept = {};
        var property;
        if(initialContext) {
            if(ids) {
                for(property in contextFragments) {
                    if(ids.indexOf(ifPossibleConvertToNumber(property)) == -1) {
                        fragmentsToBeKept[property] = contextFragments[property];
                    }
                }
            }
            this.deserialize(initialContext);
            for(property in fragmentsToBeKept) {
                contextFragments[property] = fragmentsToBeKept[property];
            }
            functions.setContext(combineFragments());
        }
    };
	function combineFragments() {
	    var filterArray = [];
	    for(var filter in contextFragments) {
	        if(contextFragments.hasOwnProperty(filter)) {
	            filterArray.push(contextFragments[filter]);
	        }
	    }
	 return  new sap.apf.utils.Filter(msgHandler).intersectWith(filterArray);
	}
    function ifPossibleConvertToNumber(property) {
        if(isNaN(Number(property))) {
            return property;
        } else {
            return Number(property);
        }
    }
};
}; // end of sap/apf/utils/pathContextHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.utils.serializationMediator') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.utils.serializationMediator");
/**
 * @private
 * @class Serialization Mediator gets, collects and distributes non-core objects for persistence operations (save, open and delete).
 * @param {object} oInject Object containing an instance of {@link sap.apf.utils.PathContextHandler} and {@link sap.apf.core.Instance}
 * @param {object} oInject.pathContextHandler Instance of {@link sap.apf.utils.PathContextHandler} 
 * @param {object} oInject.coreApi Instance of {@link sap.apf.core.Instance}
 * @returns {sap.apf.utils.SerializationMediator}
 */
sap.apf.utils.SerializationMediator = function(oInject){

    /**
     * @private
     * @function
     * @name sap.apf.utils.SerializationMediator#savePath
     * @description Saves or modifies the current path on server side under the provided name.
     * @param {string} [sPathId] If provided the path identified by the ID is modified with the current path.
     * If omitted the current path will be created as new saved path with a new ID.
     * @param {string} sName Name of the path to be saved
     * @param {function} fnCallback The first argument of the callback function is an object with property AnalysisPath and status.
     * The second argument is {sap.apf.core.EntityTypeMetadata}.
     * The third argument is undefined or {sap.apf.core.MessageObject} if a message occurred.
     * @returns undefined
     */
	this.savePath = function(arg1, arg2, arg3){
		var oExternalObjects = {
                pathContextHandler: oInject.pathContextHandler.serialize()
		};
		
		if (typeof arg1 === 'string' && typeof arg2 === 'function') {
			//case for create path
			oInject.coreApi.savePath(arg1, arg2, oExternalObjects);
		}else if (typeof arg1 === 'string' && typeof arg2 === 'string' && typeof arg3 === 'function'){
			//case for update path
			oInject.coreApi.savePath(arg1, arg2, arg3, oExternalObjects);
		}
	};

    /**
     * @private
     * @function
     * @name sap.apf.utils.SerializationMediator#openPath
     * @description Opens a path, that has been stored on server side and replaces the current path.
     * @param {string} sPathId Identifies the analysis path to be opened
     * @param {function} fnCallback The first argument of the callback function is a JS object with property path, that holds the stored path and status. The second argument is {sap.apf.core.EntityTypeMetadata}. The third argument is undefined or {sap.apf.core.MessageObject} if a message occurred.
     * @param {number} [nActiveStep] Sets the active step.
     * @returns undefined
     */
	this.openPath = function(sPathId, fnCallback, nActiveStep){
		var fnCallbackFromCoreApi = function(oResponse, oEntityTypeMetadata, oMessageObjectForUI){
            if(oResponse && oResponse.path && oResponse.path.SerializedAnalysisPath && oResponse.path.SerializedAnalysisPath.pathContextHandler){
                oInject.pathContextHandler.deserialize(oResponse.path.SerializedAnalysisPath.pathContextHandler);
                delete oResponse.path.SerializedAnalysisPath.pathContextHandler;
            }
            fnCallback(oResponse, oEntityTypeMetadata, oMessageObjectForUI);
        };

        oInject.coreApi.openPath(sPathId, fnCallbackFromCoreApi, nActiveStep);
	};
    /**
     * @private
     * @function
     * @name sap.apf.utils.SerializationMediator#deletePath
     * @description Deletes the path with the given ID on server
     * @param {string} sPathId Identifies the analysis path to be deleted
     * @param {function} fnCallback The first argument of the callback function is a JS object, that holds the property status. The second argument is {sap.apf.core.EntityTypeMetadata}. The third argument is undefined or {sap.apf.core.MessageObject} if a message occurred.
     * @returns undefined
     */
	this.deletePath = function(sPathId, fnCallback){
		oInject.coreApi.deletePath(sPathId, fnCallback);
	};
};
}; // end of sap/apf/utils/serializationMediator.js
if ( !jQuery.sap.isDeclared('sap.apf.utils.smartBusinessHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare('sap.apf.utils.smartBusinessHandler');
/**
 * @private
 * @experimental The complete class interface is subject to ongoing work and not yet stable (as of Version 1.24.0).
 * @class Smart business handler
 * @description Manages smart business context.
 * @param {object} oInject - Dependency Injection
 * @name sap.apf.utils.SmartBusinessHandler
 */
sap.apf.utils.SmartBusinessHandler = function(oInject) {
	"use strict";
	var self = this;
	var oCoreApi = {
		getApplicationConfigProperties : oInject.getApplicationConfigProperties,
		createReadRequestByRequiredFilter : oInject.createReadRequestByRequiredFilter,
		getTextNotHtmlEncoded : oInject.getTextNotHtmlEncoded
	};
	var oMessageHandler = oInject.oMessageHandler;
	var oComponent = oInject.oComponent;
	var deferredObj = new jQuery.Deferred();
	var oPromise = deferredObj.promise();
	var aFilters = [];
	var aHanaViewParameters = [];
	var aConsolidatedFilters = [];
	var constants = {
		FILTER_TYPE : "FI",
		PARAMETER_TYPE : "PA"
	};
	var getKPIEvaluationId = function() {
		var params, evalId, oComponentData;
		if (oComponent) {
			oComponentData = oComponent.getComponentData();
			if (oComponentData) {
				params = oComponentData.startupParameters;
				if (params && params.evaluationId) {
					evalId = params.evaluationId[0];
				}
			}
		}
		return evalId;
	};
	var sEvaluationId = getKPIEvaluationId();
	/**
	 * @public
	 * @function
	 * @name sap.apf.utils.SmartBusinessHandler#initialize
	 * @description Triggers fetching the smart business filters.
	 * */
	this.initialize = function() {
		oPromise = this._fetchSBData().then(this._pushAllSBFilters);
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.utils.SmartBusinessHandler#getEvaluationId
	 * @description Getter for KPI Evaluation Id.
	 * @returns {string}
	 * */
	this.getEvaluationId = function() {
		return sEvaluationId;
	};
	this._fetchSBData = function() {
		var sbConfiguration = oCoreApi.getApplicationConfigProperties().smartBusinessService;
		var sbEvaluation = sbConfiguration.evaluation;
		var sbUrl = sbEvaluation.service + "/" + sbEvaluation.entityType + "('{evaluationId}')/FILTERS?$format=json";
		if (deferredObj.state() === "pending") {
			jQuery.ajax({ // TODO Use createReadRequestByRequiredFilter.
				url : sbUrl.replace("{evaluationId}", sEvaluationId),
				success : function(data) {
					deferredObj.resolveWith(self, [ data ]);
				},
				error : function(jqXHR, textStatus, errorThrown) {
					var oMessageObject = oMessageHandler.createMessageObject({
						code : "6011"
					});
					oMessageHandler.putMessage(oMessageObject);
				}
			});
		}
		return deferredObj.promise();
	};
	this._pushAllSBFilters = function(sbData) {
		var aProperties = sbData.d.results;
		aProperties.forEach(function(property) {
			if (property.TYPE === constants.FILTER_TYPE) {
				aFilters.push(property);
			} else if (property.TYPE === constants.PARAMETER_TYPE) {
				aHanaViewParameters.push(property);
			}
			aConsolidatedFilters.push(property);
		});
		return aConsolidatedFilters;
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.utils.SmartBusinessHandler#getAllFilters
	 * @description Getter for all smart business filters.
	 * Returns a jQuery Promise which will be resolved with Array of filters.
	 * @returns {jQuery.Promise}
	 * */
	this.getAllFilters = function() {
		return oPromise;
	};
};
}; // end of sap/apf/utils/smartBusinessHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.utils.utils') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
 
 /**
   * Static helper functions
   */
jQuery.sap.declare('sap.apf.utils.utils');
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained


/**
 * @description Returns the URL parameters. Is a wrapper function for the jQuery.sap.getUriParameters function. For more details, please see SAPUI5 documentation 
 * @returns {object}
 */
sap.apf.utils.getUriParameters = function() {
	return jQuery.sap.getUriParameters().mParams;
};
/**
 * @description Eliminates duplicate values in an array
 * @param {array} aWithDuplicates
 * @returns {array}
 */
sap.apf.utils.eliminateDuplicatesInArray = function(oMsgHandler, aWithDuplicates) {
	oMsgHandler.check((aWithDuplicates !== undefined && typeof aWithDuplicates === 'object' && aWithDuplicates.hasOwnProperty('length') === true), 'Error - aArray is undefined');
	var aReturn = [];
	for( var i = 0; i < aWithDuplicates.length; i++) {
		for( var j = i + 1; j < aWithDuplicates.length; j++) {
			// If this[i] is found later in the array
			if (aWithDuplicates[i] === aWithDuplicates[j]) {
				j = ++i;
			}
		}
		aReturn.push(aWithDuplicates[i]);
	}
	return aReturn;
};
/**
 * @description Returns a hash code of a string
 * @param {string} sValue
 * @returns {number}
 */
sap.apf.utils.hashCode = function(sValue) {
	var nHash = 0;
	var i = 0;
	var nCharCode = 0;
	sValue = sValue + ''; // convert to string
	var len = sValue.length;
	for(i = 0; i < len; i++) {
		nCharCode = sValue.charCodeAt(i);
		nHash = (17 * nHash + nCharCode) << 0;
	}
	return nHash;
};
/**
 * @description Escapes data according to the SAP XSE OData specification, that is doubling the single quote
 * @param {string} sValue
 * @returns {string} || {object}
 */
sap.apf.utils.escapeOdata = function(sValue) {
	if (typeof sValue === "string") {
		return sValue.replace("'", "''");
	} else {
		return sValue;
	}
};
/**
 * @description Formats a value in json format in the javascript object.  
 * @param {object} value some value
 * @param {string} sType edm type name
 * @returns {object} javascriptValue
 */
sap.apf.utils.json2javascriptFormat = function(value, sType) {
	var intermediateValue;
	
	switch(sType) {
		case "Edm.Boolean":
			if (typeof value === "boolean") {
				return value;
			}
			if (typeof value === "string") {
				return value.toLowerCase() === "true";
			}
			return false;		 
		case "Edm.Decimal":
		case "Edm.Guid" :
		case "Edm.Int64" :
		case "Edm.String" :
			return value;
		case "Edm.Int16":
		case "Edm.Int32":
			return parseInt(value, 10);
		case "Edm.Single":
		case "Edm.Float" :
			return parseFloat(value);
		case "Edm.Time":
			return value;
		case "Edm.DateTime":
			intermediateValue = value.replace('/Date(', '').replace(')/', '')
			intermediateValue = parseFloat(intermediateValue);
			return new Date(intermediateValue);
		case "Edm.DateTimeOffset":
			intermediateValue = value.replace('/Date(', '');
			intermediateValue = intermediateValue.replace(')/', '');
			intermediateValue = parseFloat(intermediateValue);
			return new Date(intermediateValue);
			
	}
	return value; //default
};

/**
  * @description Formats a value for usage in odata conformant url as filter or parameter with given Edm type
  * @param {object} value some value
  * @param {string} sType edm type name
  * @returns {string} sFormatedValue
  */
sap.apf.utils.formatValue = function(value, sType) {
	
	function convertValueToDate (v) {
		var val;
		
		if (v instanceof Date) {
			return v;
		} else if (typeof v === 'string') {
			if (v.substring(0, 6) === '/Date(') {
				val = v.replace('/Date(', '');
				val = val.replace(')/', '');
				val = parseInt(val, 10);
				return new Date(val);
			} else {
				return new Date(v);
			}	
		}	
	}
	
	var oDate;
	var sFormatedValue = "";
	// null values should return the null literal
	if (value === null || value === undefined) {
		return "null";
	}
	
	
	switch(sType) {
		case "Edm.String":
			// quote
			sFormatedValue = "'" + String(value).replace(/'/g, "''") + "'";
			break;
		case "Edm.Time":
			if (typeof value === 'number') {
				oDate = new Date();
				oDate.setTime(value);
				var hours = oDate.getUTCHours();
				if (hours < 10) {
					hours = '0' + hours;
				}
				var minutes = oDate.getUTCMinutes();
				if (minutes < 	10) {
					minutes = '0' + minutes;
				}
				var seconds = oDate.getUTCSeconds();
				if (seconds < 10) {
					seconds = '0' + seconds;
				}
				sFormatedValue =  "time'" + hours + ':' + minutes + ':' + seconds + "'";
			} else {
				sFormatedValue = "time'" + value + "'";
				
			}
			
			break;
		case "Edm.DateTime":
			if (!sap.apf.utils.formatValue.oDateTimeFormat) {
				sap.apf.utils.formatValue.oDateTimeFormat = sap.ui.core.format.DateFormat.getDateInstance({
					pattern: "'datetime'''yyyy-MM-dd'T'HH:mm:ss''"
				});
			}

			oDate = convertValueToDate(value);
			sFormatedValue = sap.apf.utils.formatValue.oDateTimeFormat.format(oDate, true);
			break;
		case "Edm.DateTimeOffset":
			
			if (!sap.apf.utils.formatValue.oDateTimeOffsetFormat) {
				sap.apf.utils.formatValue.oDateTimeOffsetFormat = sap.ui.core.format.DateFormat.getDateInstance({
					pattern: "'datetimeoffset'''yyyy-MM-dd'T'HH:mm:ss'Z'''"
				});
			}
			oDate = convertValueToDate(value); //
			sFormatedValue = sap.apf.utils.formatValue.oDateTimeOffsetFormat.format(oDate, true);
			break;
		case "Edm.Guid":
			sFormatedValue = "guid'" + value + "'";
			break;
		case "Edm.Decimal":
			sFormatedValue = value + "M";
			break;
		case "Edm.Int64":
			sFormatedValue = String(value)+ "L";
			break;
		case "Edm.Single":
			sFormatedValue = value + "f";
			break;
		case "Edm.Binary":
			sFormatedValue = "binary'" + value + "'";
			break;
		default:
			sFormatedValue = value;
			break;
	}
	return sFormatedValue;	
			
};

/**
 * @description Transforms a string into a callable function. Method should only be called internally by APF.
 * @param {string} sFunctionPath
 * @returns {function}
 */	
sap.apf.utils.extractFunctionFromModulePathString = function(sFunctionPath) {

	if (jQuery.isFunction(sFunctionPath)) {
		return sFunctionPath;
	}
	var oDeepestNameSpaceLevel, aNameSpaceParts, sFunction;
	aNameSpaceParts = sFunctionPath.split('.');
	oDeepestNameSpaceLevel = window;
	for( var i = 0; i < aNameSpaceParts.length - 1; i++) {
		oDeepestNameSpaceLevel = oDeepestNameSpaceLevel[aNameSpaceParts[i]];
	}
	sFunction = aNameSpaceParts[aNameSpaceParts.length - 1];
	return oDeepestNameSpaceLevel[sFunction];
};
}; // end of sap/apf/utils/utils.js
if ( !jQuery.sap.isDeclared('sap.apf.core.ajax') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.ajax");



/**
 * @memberOf sap.apf.core
 * @description Wraps a jQuery (jQuery.ajax) request in order to handle a server time-out.
 * @param {object} oSettings Configuration of the jQuery.ajax request.
 * @returns {object} jqXHR
 */
sap.apf.core.ajax = function(oSettings) {
	var oAjaxSettings = jQuery.extend(true, {}, oSettings);
	var fnBeforeSend = oAjaxSettings.beforeSend;
	var fnSuccess = oAjaxSettings.success;
	var fnError = oAjaxSettings.error;

	oAjaxSettings.beforeSend = function(jqXHR, settings) {
		if (fnBeforeSend) {
			fnBeforeSend(jqXHR, settings);
		}
	};
	oAjaxSettings.success = function(data, textStatus, jqXHR) {
		var oMessage = sap.apf.core.utils.checkForTimeout(jqXHR);
		
		if(oMessage) {
			fnError(data, "error", undefined, oMessage);
		} else {
			fnSuccess(data, textStatus, jqXHR);
		}
		
	};
	oAjaxSettings.error = function(jqXHR, textStatus, errorThrown) {
		var oMessage = sap.apf.core.utils.checkForTimeout(jqXHR);
		if (oMessage) {
			fnError(jqXHR, textStatus, errorThrown, oMessage);
		} else {
			fnError(jqXHR, textStatus, errorThrown);
		}
		
	};
	return jQuery.ajax(oAjaxSettings);
};
}; // end of sap/apf/core/ajax.js
if ( !jQuery.sap.isDeclared('sap.apf.core.messageHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.apf.core.messageHandler");




/** 
 * @class MessageHandler of APF
 */
sap.apf.core.MessageHandler = function() {	
	// Private Vars
	var that = this;
	var oTextResourceHandler;
	var aLogMessages = [];
	var nCurrentLogMessageNumber = 0;
	var idRegistry;
	var fnMessageCallback;
	var fnApplicationMessageCallback = function() {};
	var bOnErrorHandling = false;
	var bDoNotFurtherProcessException = false;
	var bDuringLogWriting = false;
	var bHintForFirefoxErrorIsThrown = false;
	var sUniqueErrorId = "";

	var oDefaultMessageConfiguration = {
		code : sap.apf.core.constants.message.code.errorUnknown,
		severity : sap.apf.core.constants.message.severity.error,
		rawText : "Unknown Error occurred"
	};

	// Public Func
	/**
	 * @description Creates a message object. The message processing is started with sap.api.putMessage, which expects as argument a message object 
	 * of type sap.apf.core.MessageObject. So first create the message object and afterwards call sap.apf.api.putMessage with the message object as argument.
	 * @param {object} oConfig Configuration of the message.
	 * @param {string} oConfig.code The message is classified by its code. The code identifies an entry in the message configuration.
	 * @param {string[]} oConfig.aParameters Additional parameters for the message. The parameters are filled into the message text, when the message
	 * will be processed by the message handler. 
	 * @param {object} oConfig.oCallingObject Reference of the calling object. This can be used later to visualize on the user interface, 
	 * where the error happened, e.g. path or step.
	 * @returns {sap.apf.core.MessageObject}
	 */
	this.createMessageObject = function(oConfig) {
		return new sap.apf.core.MessageObject(oConfig);
	};

	/**
	 * @description The handling of the window.onerror by the message handler is either switched on or off.
	 * @param {boolean} bOnOff
	 * @returns {undefined}
	 */
	this.activateOnErrorHandling = function(bOnOff) {
		bOnErrorHandling = bOnOff;
		if (bOnErrorHandling === true) {
			jQuery(window).on("error", handleOwnErrors);
			
		} else {
			jQuery(window).off("error");
		}
	};

	/**
	 * @description Injection setter. Injection is optional. If not injected, putMessage doesn't retrieve the text but instead reacts with some generic message. 
	 * @param {object} textResourceHandler
	 */
	this.setTextResourceHandler = function(textResourceHandler) {
		oTextResourceHandler = textResourceHandler;
	};

	/**
	 * @description Loads all message from the  configuration. This method is called from the resource path handler.
	 * @param {object[]} aMessages Array with message configuration objects.
	 * @param {boolean} bResetRegistry  Flag to reset registry.
	 * @returns {undefined}
	 */
	this.loadConfig = function(aMessages, bResetRegistry) {
		if (idRegistry === undefined || bResetRegistry) {
			idRegistry = new sap.apf.utils.Hashtable(that);
		}
		for(var i = 0; i < aMessages.length; i++) {
			loadMessage(aMessages[i]);
		}
	};

	/**
	 * @description Sets a callback function, so that a message can be further processed. This includes the display of the message on the user interface 
	 * and throwing an error to stop processing in case of errors.
	 * @param {function} fnCallback Either a function or undefined. The callback function will be called  with the messageObject of type 
	 * sap.apf.core.MessageObject as only parameter.
	 * @returns {undefined}
	 */
	this.setMessageCallback = function(fnCallback) {
		if (fnCallback !== undefined && typeof fnCallback === "function") {
			fnMessageCallback = fnCallback;
		} else {
			fnMessageCallback = undefined;
			// log technical error - putMessage with technical error
		}
	};

	/**
	 * @description Sets an application callback function, which allows applications to register a message callback.
	 * @param {function} fnCallback Either a function or undefined. The callback function will be called  with the messageObject of type 
	 * sap.apf.core.MessageObject as only parameter.
	 * @returns {undefined}
	 */
	this.setApplicationMessageCallback = function(fnCallback) {
		if (fnCallback !== undefined && typeof fnCallback === "function") {
			fnApplicationMessageCallback = fnCallback;
		} else {
			fnApplicationMessageCallback = function() {};
			this.putMessage(this.createMessageObject({
				code : "5031"
			}));
		}
	};

	/**
	 * @description A message is passed to the message handler for further processing. This can be an information, warning or error. 
	 * @param {sap.apf.core.MessageObject} oMessageObject The message object shall be created by method sap.apf.api.createMessageObject.
	 * @returns {undefined}
	 */
	this.putMessage = function(oMessageObject) {
		var oPreviousMessageObject;
		var nMaxPreviousObjects = 0;
		var oMessageObjectFatal;
		
		if (oMessageObject.getCode() === undefined) {
			oMessageObject.setCode(sap.apf.core.constants.message.code.errorUnknown);
		}
		
		enrichInfoInMessageObject.bind(this)(oMessageObject);
		
		if (oMessageObject.getSeverity() === sap.apf.core.constants.message.severity.fatal) {
			
			oMessageObjectFatal = that.createMessageObject({ code : sap.apf.core.constants.message.code.errorExitTriggered });
			enrichInfoInMessageObject.bind(this)(oMessageObjectFatal);
			oMessageObjectFatal.setSeverity(sap.apf.core.constants.message.severity.fatal);
			if (oMessageObjectFatal.getMessage() === "") {
				oMessageObjectFatal.setMessage("You must log out of the application due to a critical error");
			}
		}
		

		oPreviousMessageObject = oMessageObject.getPrevious();
		while (oPreviousMessageObject !== undefined && oPreviousMessageObject.type && oPreviousMessageObject.type === "messageObject" && nMaxPreviousObjects < 10) {
			if (oPreviousMessageObject.getCode() === undefined) {
				oPreviousMessageObject.setCode(sap.apf.core.constants.message.code.errorUnknown);
			}
			enrichInfoInMessageObject.bind(this)(oPreviousMessageObject);
			oPreviousMessageObject = oPreviousMessageObject.getPrevious();
			nMaxPreviousObjects++;
		}
		
		if (oMessageObjectFatal !== undefined) {
			oMessageObjectFatal.setPrevious(oMessageObject);
			oMessageObject = oMessageObjectFatal;
		}
		logMessage(oMessageObject, 10);

		if (bDoNotFurtherProcessException) { // no cycles from ui
			return;
		}
		
		if (fnMessageCallback !== undefined) {
			//noinspection JSUnusedAssignment
            bDoNotFurtherProcessException = true; // exception could be raised
			fnMessageCallback(oMessageObject, fnApplicationMessageCallback);
			bDoNotFurtherProcessException = false;
		} 
		//leave current execution control flow
		if (oMessageObject.getSeverity() === sap.apf.core.constants.message.severity.fatal) {
			if (sap.ui.Device.browser.firefox) {
				bHintForFirefoxErrorIsThrown = true;
			}
			
			throw new Error(sUniqueErrorId);
		}
	};

	/**
	 * @description Test whether condition is violated and puts a corresponding message.
	 * @param {boolean} booleExpression Boolean expression, that is evaluated.
	 * @param {string} sMessage A text, that is included in the message text
	 * @param {string} [sCode] Error code 5100 is default, 5101 for warning. Other codes can be used, if the default message text is not specific enough.
	 * @returns {undefined}
	 */
	this.check = function(booleExpression, sMessage, sCode) {
		var sErrorCode = sCode || sap.apf.core.constants.message.code.errorCheck;

		if (!booleExpression) {
			var oMessageObject = this.createMessageObject({
				code : sErrorCode,
				aParameters : [ sMessage ]
			});
			that.putMessage(oMessageObject);
		}
	};

	/**
	 * @description Returns a reference of a message configuration object. Not a copy.
	 * @param {string} sErrorCode
	 * @returns {object} oConfiguration
	 */
	this.getConfigurationByCode = function(sErrorCode) {
		if (idRegistry === undefined) { //before loading the configuration
			return undefined;
		}
		return idRegistry.getItem(sErrorCode);
	};

	/**
	 * @description Returns a copy of APF log messages. The last message put is on first position in array.
	 * @returns {string[]}
	 */
	this.getLogMessages = function() {
		return jQuery.extend(true, [], aLogMessages);
	};

	/**
	 * @description Resets the message handler: Unset the message callback function, loads default message configuration and cleans message log. 
	 * @returns {undefined}
	 */
	this.reset = function() {
		idRegistry = undefined;
		fnMessageCallback = undefined;
		fnApplicationMessageCallback = undefined;
		aLogMessages = [];
	};

	// Private Functions
	function isOwnErrorEvent(oEvent) {

		if (sap.ui.Device.browser.firefox) {
			return bHintForFirefoxErrorIsThrown;
		} else {
			return (oEvent.originalEvent && oEvent.originalEvent.message && oEvent.originalEvent.message.search(sUniqueErrorId) > -1);
		}

	}
    function isErrorEventFromOtherApfInstance(oEvent) {
    	return (oEvent.originalEvent && oEvent.originalEvent.message && oEvent.originalEvent.message.search(sUniqueErrorId) === -1 
    			&& oEvent.originalEvent.message.search(sap.apf.core.constants.message.code.suppressFurtherException) > -1);
    }
    function getUniqueErrorId() {
    	var date = new Date();
	    var uniqueInteger = Math.random( ) * date.getTime();
		return sap.apf.core.constants.message.code.suppressFurtherException + uniqueInteger;
    }
	function isKnownCodeWithoutConfiguration(sCode) {
		var sNumber = parseInt(sCode, 10);
		
		if (sNumber == sap.apf.core.constants.message.code.errorExitTriggered ) {
			return true;
		} else if (sNumber >= sap.apf.core.constants.message.code.errorUnknown && sNumber <= sap.apf.core.constants.message.code.errorInAnalyticalConfig) {
			return true;
		} else {
			return false;
		}
	}

	function isFatalMessageWithoutConfiguration(sCode) {
		var sNumber = parseInt(sCode, 10);
		if (sNumber > sap.apf.core.constants.message.code.errorUnknown && sNumber <= sap.apf.core.constants.message.code.errorInAnalyticalConfig) {
			return true;
		}
		return false;
	}

	// Determine and set message text according to configuration
	function enrichInfoInMessageObject(oMessageObject) {
		var sCode = oMessageObject.getCode();

		var oMessageConfiguration = that.getConfigurationByCode(sCode);
		if (oMessageConfiguration === undefined) {
			oMessageConfiguration = jQuery.extend(true, {}, oDefaultMessageConfiguration);
			if (isKnownCodeWithoutConfiguration(sCode)) {
				if (oMessageObject.hasRawText()) {
					oMessageConfiguration.rawText = oMessageObject.getRawText();
				}
				oMessageConfiguration.rawText += ' ' + oMessageObject.getParameters();
				if (isFatalMessageWithoutConfiguration(sCode)) {
					oMessageConfiguration.severity = sap.apf.core.constants.message.severity.fatal;
				}
			} else {
				oMessageConfiguration.rawText = "Message " + sCode + "  " + oMessageObject.getParameters() + " (Message Code has no Configuration)";
			}
			if (!isKnownCodeWithoutConfiguration(sCode)) {
				oMessageObject.setCode(oMessageConfiguration.code);
			}
		}
		if (oMessageConfiguration.severity !== undefined) {
			oMessageObject.setSeverity(oMessageConfiguration.severity);
		} else {
			oMessageObject.setSeverity(sap.apf.core.constants.message.severity.technError);
		}
		if (oMessageConfiguration.rawText) {
			oMessageObject.setMessage(oMessageConfiguration.rawText);
		} else {
			var aParameters = oMessageObject.getParameters();

			if (oMessageObject.getSeverity() === sap.apf.core.constants.message.severity.technError) {
				var sTechnText = that.getConfigurationByCode(oMessageConfiguration.code).text;
				var nParamIndex = 0;
				while (sTechnText.indexOf("{" + nParamIndex + "}") > -1) {
					if (typeof aParameters[nParamIndex] === "string") {
						sTechnText = sTechnText.replace("{" + nParamIndex + "}", aParameters[nParamIndex]);
					} else {
						sTechnText = sTechnText.replace("{" + nParamIndex + "}", "undefined");
					}
					nParamIndex++;
				}

				oMessageObject.setMessage(sTechnText);
			} else {
				try {
					if (oTextResourceHandler) {
						oMessageObject.setMessage(oTextResourceHandler.getMessageText(oMessageConfiguration.key, oMessageObject.getParameters()));
					} else {
						oMessageObject.setMessage("Message Code: " + sCode + " " + aParameters.toString());
					}
				} catch (oError) {
					oMessageObject.setMessage("Message Code: " + sCode + " " + aParameters.toString());
				}
			}
		}
	}
	function logMessage(oMessage, nMaxPreviousObjects) {
		var sLogPrefix = "APF message ";
		var sPreviousTxt = "";
		var nMaxPreviousObjectsInNextLog = nMaxPreviousObjects - 1;

		if (nMaxPreviousObjects === 0) {
			return;
		}
		// logging of previous message(s) first!
		var oPrevious = oMessage.getPrevious();
		if (oPrevious !== undefined) {
			logMessage(oPrevious, nMaxPreviousObjectsInNextLog);
			sPreviousTxt = " - (see previous message for more information)";
		}
		nCurrentLogMessageNumber++;
		var sLog = sLogPrefix + '(' + nCurrentLogMessageNumber + '): ' + oMessage.getCode() + " - " + oMessage.getMessage() + sPreviousTxt;
		if (bDuringLogWriting) {
			alert("Fatal Error during Log Writing " + sLog);
			return;
		}
		bDuringLogWriting = true;

		//adds fatal log message on first position in array
		if (oMessage.getSeverity() === sap.apf.core.constants.message.severity.fatal) {
			if (aLogMessages.length < 2) { // do not show to many fatal messages!
				aLogMessages.unshift(sLog); 
			}
		}

		switch (oMessage.getSeverity()) {
			case sap.apf.core.constants.message.severity.warning:
				jQuery.sap.log.warning(sLog);
				break;
			case sap.apf.core.constants.message.severity.error:
				jQuery.sap.log.error(sLog);
				break;
			case sap.apf.core.constants.message.severity.fatal:
				jQuery.sap.log.error(sLog);
				break;
			case sap.apf.core.constants.message.severity.technError:
				jQuery.sap.log.error(sLog);
				break;
			default:
				jQuery.sap.log.info(sLog);
		}
		bDuringLogWriting = false;
	}
	function setItem(oItem) {
		that.check(oItem !== undefined && oItem.hasOwnProperty("code") !== false, "MessageHandler setItem: oItem is undefined or property 'code' is missing", sap.apf.core.constants.message.code.errorStartUp);
		var result = idRegistry.setItem(oItem.code, oItem);
		that.check((result === undefined), "MessageHandler setItem: Configuration includes duplicated codes", sap.apf.core.constants.message.code.errorStartUp);
	}
	function loadMessage(oMessage) {
		if (oMessage.type === undefined) {
			oMessage.type = "message";
		}
		setItem(oMessage);
	}
	// handle on error will be activated after initialization of the message
	// handler.
	function handleOwnErrors(oEvent) {
	
		var oMessage;
		var sMessage = "";
		var lineNumber = "";
		var sUrl = "";
		var sText = "";
		var bBrowserSupportErrorEvent = true;
		
		if (sap.ui.Device.browser.firefox) {
			bBrowserSupportErrorEvent = false;
		}
		
		if (bBrowserSupportErrorEvent && oEvent && oEvent.originalEvent) {
			sMessage = oEvent.originalEvent.message;
			sUrl = oEvent.originalEvent.filename;
			lineNumber = oEvent.originalEvent.lineno;
		}
		
		if (isOwnErrorEvent(oEvent)) {
			
			oEvent.stopImmediatePropagation();
			oEvent.preventDefault();
		} else if (isErrorEventFromOtherApfInstance(oEvent)) {
			return;
		} else if (bDoNotFurtherProcessException) {
			oMessage = new sap.apf.core.MessageObject({
				code : sap.apf.core.constants.message.code.errorStopProcessing
			});
			oMessage.setSeverity(sap.apf.core.constants.message.severity.error);
			sText = "Unknown exception happened during processing of error by callback function ";
			if (bBrowserSupportErrorEvent) {
				sText = sText + sMessage + " (source: " + sUrl + ":" + lineNumber + ")";
			}
			
			oMessage.setMessage(sText);
			logMessage(oMessage, 1);
		} else {
			oMessage = new sap.apf.core.MessageObject({
				code : sap.apf.core.constants.message.code.errorUnknown
			});
			oMessage.setSeverity(sap.apf.core.constants.message.severity.error);
			sText = "Unknown exception ";
			if (bBrowserSupportErrorEvent) {
				sText = sText + sMessage + " (source: " + sUrl + ":" + lineNumber + ")";
			}
			oMessage.setMessage(sText);
			logMessage(oMessage, 1);
		}
	}
	
	function initialize() {
		sUniqueErrorId = getUniqueErrorId(); 
	}
	
	initialize();
};
}; // end of sap/apf/core/messageHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.core.metadata') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.metadata");


/**
 * @class This class initializes the metadata and the annotations and merges them together. The class provides methods to access metadata information like parameters of an entity type and their
 *        data types.
 * @param {string} sAbsolutePathToServiceDocument Absolute Path to service document like "/sap/hba/apps/wca/s/odata/wca.xsodata"
 */
sap.apf.core.Metadata = function(oInject, sAbsolutePathToServiceDocument) {
	// Public vars
	/**
	 * @description Contains 'metadata'
	 * @returns {String}
	 */
	this.type = "metadata";
	// Private vars
    var oCoreApi = oInject.coreApi;
	var oMetadata;
	var oAnnotation;
	var aEntityTypes;
	var oHtPropertyMetadata = new oInject.hashtable(oInject.messageHandler);
	var oHtFilterableProperties = new oInject.hashtable(oInject.messageHandler);
	var oHtAllProperties = new oInject.hashtable(oInject.messageHandler);
	var oHtHanaViewParameters = new oInject.hashtable(oInject.messageHandler);
	var oHtEntityTypeMetadata = new oInject.hashtable(oInject.messageHandler);
	// Public functions
	/**
	 * @description Returns all metadata for the property of the provided entity type
	 * @param {String} sEntityType - identifier of the used OData entity type
	 * @param {String} sPropertyName - identifier of the used OData property
	 * @returns {Object} - metadata of the property
	 */
	this.getPropertyMetadata = function(sEntityType, sPropertyName) {
		oInject.messageHandler.check(sEntityType !== undefined && typeof sEntityType === "string", "sap.apf.core.Metadata:getPropertyMetadata incorrect EntityType name or type");
		oInject.messageHandler.check(sPropertyName !== undefined && typeof sPropertyName === "string", "sap.apf.core.Metadata:getPropertyMetadata incorrect sPropertyName name or type");
		if (oHtPropertyMetadata.hasItem(sEntityType + sPropertyName) === true) {
			return oHtPropertyMetadata.getItem(sEntityType + sPropertyName);
		} else {
			checkInternalObjectStructure();
			var oEntityTypeFromMetadata = getEntityTypeFromMetadata(sEntityType, true);
			var oEntityTypeFromAnnotation = getEntityTypeFromPropertyAnnotations(sEntityType, true);
			//if property is a HANA view parameter, then getEntityTypeFromMetadata with param 'false' has to be used
			if(oEntityTypeFromMetadata.property.length === 0){
				oEntityTypeFromMetadata = getEntityTypeFromMetadata(sEntityType, false);
				//TODO Applied workaround: 'type' needs to be removed from entitytype name to get annotations. Find better solution!
				oEntityTypeFromAnnotation = getEntityTypeFromPropertyAnnotations(sEntityType.substring(0, sEntityType.lastIndexOf("type")), false);
			}
			//TODO Applied workaround: 'resultstype' needs to be removed from entitytype name to get annotations. Find better solution!
			if(!oEntityTypeFromAnnotation[sPropertyName]){
				oEntityTypeFromAnnotation = getEntityTypeFromPropertyAnnotations(sEntityType.substring(0, sEntityType.lastIndexOf("resultstype")), true);
			}
			var oPropertyFromMetadata = getPropertyFromEntityTypeFromMetadata(oEntityTypeFromMetadata, sPropertyName);
			var oPropertyFromAnnotation = getPropertyFromEntityTypeFromAnnotation(oEntityTypeFromAnnotation, sPropertyName);
			var oMerged = mergeAnnotationWithMetadata(oPropertyFromAnnotation, oPropertyFromMetadata);
			oHtPropertyMetadata.setItem(sEntityType + sPropertyName, defineApiResult(oMerged));
			return oHtPropertyMetadata.getItem(sEntityType + sPropertyName);
		}
	};
	/**
	 * @description Returns names of all filterable properties of the provided entity type.
	 * @param {String} sEntityType - identifier of the used OData entity type
	 * @returns {Array} aResult - names of the filterable properties
	 */
	this.getFilterableProperties = function(sEntityType) {
		oInject.messageHandler.check(sEntityType !== undefined && typeof sEntityType === "string", "sap.apf.core.Metadata:getFilterableProperties incorrect EntityType name or type");
		if (oHtFilterableProperties.hasItem(sEntityType) === true) {
			return oHtFilterableProperties.getItem(sEntityType);
		} else {
			checkInternalObjectStructure();
			var aResult = [];
			var oEntityTypeFromMetadata = getEntityTypeFromMetadata(sEntityType, true);
			var oEntityTypeFromAnnotation = getEntityTypeFromPropertyAnnotations(sEntityType, true);
			for( var i = 0; i < oEntityTypeFromMetadata.property.length; i++) {
				var oPropertyFromMetadata = oEntityTypeFromMetadata.property[i];
				if (oPropertyFromMetadata.extensions && oPropertyFromMetadata.extensions) {
					var bFilterable = true;
					for( var j = 0; j < oPropertyFromMetadata.extensions.length; j++) {
						var oExtension = oPropertyFromMetadata.extensions[j];
						if (oExtension.name === "filterable" && oExtension.value === "false") {
							bFilterable = false;
							break;
						}
					}
					if (bFilterable) {
						aResult.push(oPropertyFromMetadata.name);
					}
				}
			}
			for( var oProperty in oEntityTypeFromAnnotation) {
				if (oEntityTypeFromAnnotation[oProperty] && oEntityTypeFromAnnotation[oProperty].filterable && oEntityTypeFromAnnotation[oProperty].filterable === "true") {
					aResult.push(oProperty);
				}
			}
			oHtFilterableProperties.setItem(sEntityType, aResult);
			return oHtFilterableProperties.getItem(sEntityType);
		}
	};
	/**
	 * @description Returns names of all properties (incl. parameters) for a given entity type.
	 * @param {String} sEntityType - identifier of the used OData entity type
	 * @returns {Array} aResult - property names
	 */
	this.getAllPropertiesFromEntityType = function(sEntityType){
		oInject.messageHandler.check(sEntityType !== undefined && typeof sEntityType === "string", "sap.apf.core.Metadata:getAllProperties incorrect EntityType name or type");
		if (oHtAllProperties.hasItem(sEntityType) === true) {
			return oHtAllProperties.getItem(sEntityType);
		} else {
			var aAllProperties = [];
			var aPropertyNames = [];
			var aParameterNames = [];
			
			var oEntityTypeFromMetadata = getEntityTypeFromMetadata(sEntityType, true);
			for(var i = 0; i < oEntityTypeFromMetadata.property.length; i++){
				aPropertyNames.push(oEntityTypeFromMetadata.property[i].name);
			}
			
			var aParameters = this.getHanaViewParameters(sEntityType);
			for(var i = 0; i < aParameters.length; i++){
				aParameterNames.push(aParameters[i].name);
			}
			
			aAllProperties = aPropertyNames.concat(aParameterNames);
			
			oHtAllProperties.setItem(sEntityType, aAllProperties);
			return oHtAllProperties.getItem(sEntityType);
		}
	};
	/**
	 * @description Returns names of all properties (incl. parameters) of all entity types. 
	 * @returns {Array} aResult - property names
	 */
	this.getAllProperties = function(){
		var aAllProperties = [];
		var aEntityTypes = getEntityTypes();
		
		for(var i = 0; i < aEntityTypes.length; i++){
			aAllProperties = aAllProperties.concat(this.getAllPropertiesFromEntityType(aEntityTypes[i]));
		}
		aAllProperties = sap.apf.utils.eliminateDuplicatesInArray(oInject.messageHandler, aAllProperties);

		return aAllProperties;
	};
	/**
	 * @description Returns names of all HANA view parameters of all entity types. 
	 * @returns {Array} aResult - parameter names
	 */
	this.getAllHanaViewParameters = function(){
		var aAllParameters = [];
		var aHanaViewParameters = [];
		var aEntityTypes = getEntityTypes();
		
		for(var i = 0; i < aEntityTypes.length; i++){
			aHanaViewParameters = this.getHanaViewParameters(aEntityTypes[i]);
			for(var j = 0; j < aHanaViewParameters.length; j++){
				aAllParameters.push(aHanaViewParameters[j].name);
			}
		}
		aAllParameters = sap.apf.utils.eliminateDuplicatesInArray(oInject.messageHandler, aAllParameters);

		return aAllParameters;
	};
	
	/**
	 * @description Returns names of all key properties of all entity types. 
	 * @returns {Array} aResult - key names
	 */
	this.getAllKeys = function(){
		var aAllKeys = [];
		var aKeys = [];
		var aEntityTypes = getEntityTypes();
		
		for(var i = 0; i < aEntityTypes.length; i++){
			var oEntityType = getEntityTypeFromMetadata(aEntityTypes[i], true);
			if(!oEntityType.name){
				oEntityType = getEntityTypeFromMetadata(aEntityTypes[i], false);
			}
			for(var j = 0; j < oEntityType.key.propertyRef.length; j++){
				aKeys.push(oEntityType.key.propertyRef[j].name);
			}
			aAllKeys =  aAllKeys.concat(aKeys);
		}
		aAllKeys = sap.apf.utils.eliminateDuplicatesInArray(oInject.messageHandler, aAllKeys);
		return aAllKeys;
	};
	

	/**
	 * @description Returns all metadata attributes for a given property. It
	 *              will be searched over all entity types for this property
	 *              and the first match will be returned.
	 * @param {String}
	 *            sPropertyName - identifier of the used OData property
	 * @returns {Object} - Object with attributes of the property
	 */
	this.getAttributes = function(sPropertyName){
		var aEntityTypes = getEntityTypes();
		var oPropertyAttributes;
		for(var i = 0; i < aEntityTypes.length; i++){
			oPropertyAttributes = this.getPropertyMetadata(aEntityTypes[i], sPropertyName);
			if(oPropertyAttributes.name){
				break;
			}
		}
		return oPropertyAttributes;
	};
	/**
	 * @description Returns metadata which includes HANA view parameters and their attributes (data type, default value, ...) for the provided entity type.
	 * @param {String} sEntityType - identifier of the used OData entity type
	 * @returns {Array} or {undefined} - parameters of the entity type
	 */
	this.getHanaViewParameters = function(sEntityType) {
		oInject.messageHandler.check(sEntityType !== undefined && typeof sEntityType === "string", "sap.apf.core.Metadata:getHanaViewParameters incorrect EntityType name or type");
		if (oHtHanaViewParameters.hasItem(sEntityType) === true) {
			return oHtHanaViewParameters.getItem(sEntityType);
		} else {
			checkInternalObjectStructure();
			var oEntityTypeFromMetadata = getEntityTypeFromMetadata(sEntityType, false);
			var oEntityTypeFromAnnotation = getEntityTypeFromPropertyAnnotations(sEntityType, false);
			var oMerged = {};
			var aResult = [];
			for( var i = 0; i < oEntityTypeFromMetadata.property.length; i++) {
				var oProperty = oEntityTypeFromMetadata.property[i];
				var oPropertyAnnotation = oEntityTypeFromAnnotation[oProperty.name];
				if (oPropertyAnnotation !== undefined) {
					oProperty = jQuery.extend(oProperty, oPropertyAnnotation);
				}
				oMerged[oProperty.name] = oProperty;
			}
			for( var oProp in oMerged) {
				aResult.push(defineApiResult(oMerged[oProp]));
			}
			oHtHanaViewParameters.setItem(sEntityType, aResult);
			return oHtHanaViewParameters.getItem(sEntityType);
		}
	};
	/**
	 * @description Returns metadata which includes extensions for OData 4.0 like "RequiresFilter"
	 * @param {String} sEntityType - identifier of the used OData entity type
	 * @returns {Array} - metadata (including annotations) of the entity type
	 */
	this.getEntityTypeMetadata = function(sEntityType) {
		oInject.messageHandler.check(sEntityType !== undefined && typeof sEntityType === "string", "sap.apf.core.Metadata:getEntityTypeMetadata incorrect EntityType name or type");
		if (oHtEntityTypeMetadata.hasItem(sEntityType) === true) {
			return oHtEntityTypeMetadata.getItem(sEntityType);
		} else {
			checkInternalObjectStructure();
			var oEntityType = getEntityTypeFromAnnotation(sEntityType);
			var object = {};
			for( var oAnnotation in oEntityType) {
				var sAnnotationName = oAnnotation.split(".").pop();
				sAnnotationName = sAnnotationName.replace(/^./, sAnnotationName[0].toLowerCase());
				for (var shape in oEntityType[oAnnotation]) {
					object[sAnnotationName] = oEntityType[oAnnotation][shape];
				}
			}
			oHtEntityTypeMetadata.setItem(sEntityType, object);
			return oHtEntityTypeMetadata.getItem(sEntityType);
		}
	};
	/**
	 * @description Returns the suffix after the parameter position in the URI generation
	 * @param {String} sEntityType - entity type from configuration
	 * @returns {String} - parameter suffix for URI
	 */
	this.getUriSuffix = function(sEntityType) {
		var oMetaData = getEntityTypeFromMetadata(sEntityType+"Results",true); 
		if(oMetaData && oMetaData.property && oMetaData.property.length > 0){ 
			return "Results"; 
		}  
		else { 
			return "";
		}
	}
	// Private functions
	function getEntityTypes() {
		if(!aEntityTypes){
			aEntityTypes = [];
			for(var i = 0; i < oMetadata.dataServices.schema.length; i++){
				for(var j = 0;  j < oMetadata.dataServices.schema[i].entityType.length; j++){
					aEntityTypes.push(oMetadata.dataServices.schema[i].entityType[j].name.toLowerCase());
				}
			}
		}
		return aEntityTypes;
	}
	function getEntityTypeFromAnnotation(sEntityType) {
		for( var oEntityTypeAnnotations in oAnnotation) {
			if (oEntityTypeAnnotations.split(".").pop().toString().toLowerCase().indexOf(sEntityType.toLowerCase()) > -1) {
				return oAnnotation[oEntityTypeAnnotations];
			}
		}
		return {};
	}
	function getEntityTypeFromPropertyAnnotations(sEntityType, bAggregate) {
		for( var oEntityTypeAnnotations in oAnnotation.propertyAnnotations) {
			if (bAggregate) {
				if (oEntityTypeAnnotations.split(".").pop().toString().toLowerCase().indexOf((sEntityType + "ResultsType").toLowerCase()) > -1) {
					return oAnnotation.propertyAnnotations[oEntityTypeAnnotations];
				}
			} else {
				if (oEntityTypeAnnotations.split(".").pop().toString().toLowerCase().indexOf((sEntityType + "Type").toLowerCase()) > -1) {
					return oAnnotation.propertyAnnotations[oEntityTypeAnnotations];
				}
			}
		}
		return {};
	}
	function getEntityTypeFromMetadata(sEntityType, bAggregate) {
		for( var i = 0; i < oMetadata.dataServices.schema.length; i++) {
			for( var j = 0; j < oMetadata.dataServices.schema[i].entityType.length; j++) {
				var aAttribute = oMetadata.dataServices.schema[i].entityType[j].extensions;
				if (oMetadata.dataServices.schema[i].entityType[j].name.toLowerCase().indexOf(sEntityType.toLowerCase()) > -1) {
					if (bAggregate) {
						for( var k = 0; k < aAttribute.length; k++) {
							if (aAttribute[k].name.toLowerCase() === "semantics" && aAttribute[k].value.toLowerCase() === "aggregate") {
								return oMetadata.dataServices.schema[i].entityType[j];
							}
						}
					} else {
						for( var l = 0; l < aAttribute.length; l++) {
							if (aAttribute[l].name.toLowerCase() === "semantics" && aAttribute[l].value.toLowerCase() === "parameters") {
								return oMetadata.dataServices.schema[i].entityType[j];
							}
						}
					}
				}
			}
		}
		return {
			property : []
		};
	}
	function getPropertyFromEntityTypeFromMetadata(oEntityTypeFromMetadata, sPropertyName) {
		for( var i = 0; i < oEntityTypeFromMetadata.property.length; i++) {
			if (oEntityTypeFromMetadata.property[i].name.toLowerCase() === sPropertyName.toLowerCase()) {
				return oEntityTypeFromMetadata.property[i];
			}
		}
		return {};
	}
	function getPropertyFromEntityTypeFromAnnotation(oEntityTypeFromAnnotation, sPropertyName) {
		for( var oProperty in oEntityTypeFromAnnotation) {
			if (oProperty.toLowerCase() === sPropertyName.toLowerCase()) {
				return oEntityTypeFromAnnotation[oProperty];
			}
		}
		return {};
	}
	function mergeAnnotationWithMetadata(oFirst, oSecond) {
		for( var i in oSecond) {
			oFirst[i] = oSecond[i];
		}
		return oFirst;
	}
	function defineApiResult(object) {
		function moveToDataType(sAlternativeName) {
			if (!object.dataType) {
				object.dataType = {};
			}
			if (sAlternativeName) {
				object.dataType[sAlternativeName] = object[i];
			} else {
				object.dataType[i] = object[i];
			}
			delete object[i];
		}
		function map(sAlternativeName) {
			if (jQuery.isArray(object[i]) === true) {
				for( var j = 0; j < object[i].length; j++) {
					object[object[i][j].name] = object[i][j].value;
				}
				delete object[i];
			} else if (i !== "dataType" && typeof (object[i]) === "object") { // dataType is explicit set by the APF has not to be modified
				if (Object.keys(object[i]).length === 0) {
					object[sAlternativeName] = "true";
				}
				for( var k in object[i]) {
					object[sAlternativeName] = object[i][k];
				}
				delete object[i];
			} else {
				object[sAlternativeName] = object[i];
			}
		}
		for( var i in object) {
			switch (i) {
				case 'type':
					moveToDataType();
					break;
				case 'maxLength':
					moveToDataType();
					break;
				case 'precision':
					moveToDataType();
					break;
				default:
					var sPropertyName = i.split(".").pop();
					if (sPropertyName.search("ISO") === 0) {
						map(sPropertyName);
					} else {
						map(sPropertyName.replace(/^./, sPropertyName[0].toLowerCase()));
					}
					break;
			}
		}
		return object;
	}
	function checkInternalObjectStructure() {
		oInject.messageHandler.check(oMetadata !== undefined, 'sap.apf.metadata - oMetadata is undefined');
		oInject.messageHandler.check(oMetadata.dataServices, 'sap.apf.metadata - oMetadata.dataServices is undefined');
		oInject.messageHandler.check(oMetadata.dataServices.schema !== undefined, 'sap.apf.metadata - oMetadata.dataServices.schema is undefined');
		oInject.messageHandler.check(oAnnotation !== undefined, 'sap.apf.metadata - oAnnotation is undefined');
	}
	function initMetadata() {
		function onResponse(oData, oResponse) {
			try {
				oMetadata = oData;
                var sAnnotationUri = oCoreApi.getUriGenerator().getODataPath(sAbsolutePathToServiceDocument) + "annotation.xml";
                oAnnotation = oInject.annotation.parse(oMetadata, sAnnotationUri);
			} catch (oError) {
				oInject.messageHandler.putMessage(oInject.messageHandler.createMessageObject({
					code : "5017",
					aParameters : [ oError.message ],
					oCallingObject : this
				}));
				oAnnotation = {}; //robustness!!
			}
		}
		function onError(oError) {
			
			if (oError.messageObject && oError.messageObject.type === "messageObject") {
				oInject.messageHandler.putMessage(oError.messageObject);
			} else {
				oInject.messageHandler.putMessage(oInject.messageHandler.createMessageObject({
					code : "5018",
					aParameters : [ oError.response.statusCode, oError.sMessage, oError.response.statusText, oError.response.requestUri ]
				}));
			}
			oAnnotation = {};  //robustness!!
		}
		var oRequest = {
			method : 'GET',
			headers : {
				"x-csrf-token" : oCoreApi.getXsrfToken(sAbsolutePathToServiceDocument)
			},
			requestUri : oCoreApi.getUriGenerator().getAbsolutePath(sAbsolutePathToServiceDocument) + "$metadata",
			async : false
		};
		oCoreApi.odataRequest(oRequest, onResponse, onError, oInject.datajs.metadataHandler);
	}
	initMetadata();
};
}; // end of sap/apf/core/metadata.js
if ( !jQuery.sap.isDeclared('sap.apf.core.metadataFacade') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.metadataFacade");


/** 
 * @class Provides convenience functions for accessing metadata 
 * @param {Object} oInject - tbd
 * @param {String} sAbsolutePathToServiceDocument Absolute Path to service document
 * @returns {sap.apf.core.MetadataProperty}
 */
sap.apf.core.MetadataFacade = function(oInject, sAbsolutePathToServiceDocument) {
	/**
	 * @description Contains 'metadataFacade'
	 * @returns {String}
	 */
	this.type = "metadataFacade";
	// Private vars
	var fnMetadataProperty = oInject.metadataProperty;
	var oMessageHandler = oInject.messageHandler;
	var oMetadataFactory = oInject.metadataFactory;
	var aPropertyNames;
	var aParameterNames;
	var oProperties = {};
	
	// Public functions
	/**
	 * @description Returns all property names
	 * @param {Function} callback - callback function providing array of properties as strings
	 */
	this.getAllProperties = function(callback){
		if(aPropertyNames){
            callback(aPropertyNames);
        }else{
            var aMetadataServiceDocuments = getServiceDocuments();
            var oMetadata;
            aPropertyNames = [];
            for(var i = 0; i < aMetadataServiceDocuments.length; i++){
                oMetadata = oMetadataFactory.getMetadata(aMetadataServiceDocuments[i]);
                aPropertyNames = aPropertyNames.concat(oMetadata.getAllProperties());
            }
            aPropertyNames = sap.apf.utils.eliminateDuplicatesInArray(oMessageHandler, aPropertyNames);
            callback(aPropertyNames);
		}
	};
	/**
	 * @description Returns all properties which are HANA view paramenters
	 * @param {Function} callback - callback function providing array of properties which are HANA view parameters as strings
	 */
	this.getAllHanaViewParameters = function(callback){
		if(aParameterNames){
            callback(aParameterNames);
        }else{
            var aMetadataServiceDocuments = getServiceDocuments();
            var oMetadata;
            aParameterNames = [];
            for(var i = 0; i < aMetadataServiceDocuments.length; i++){
                oMetadata = oMetadataFactory.getMetadata(aMetadataServiceDocuments[i]);
                aParameterNames = aParameterNames.concat(oMetadata.getAllHanaViewParameters());
            }
            aParameterNames = sap.apf.utils.eliminateDuplicatesInArray(oMessageHandler, aParameterNames);
            callback(aParameterNames);
		}
	};
	/**
	 * @description Returns a object of type {sap.apf.core.MetadataProperty} for
	 *              accessing attributes of a metadata property
	 * @param {String} sName - property name
	 * @param {Function} callback - callback function providing {sap.apf.core.MetadataProperty} object
	 */
	this.getProperty = function(sName, callback){
		if(oProperties[sName]){
            callback(oProperties[sName]);
        }else{
            var aMetadataServiceDocuments = getServiceDocuments();
            var oPropertyAttributes;
            var oMetadata;
            for(var i = 0; i < aMetadataServiceDocuments.length; i++){
                oMetadata = oMetadataFactory.getMetadata(aMetadataServiceDocuments[i]);
                oPropertyAttributes = oMetadata.getAttributes(sName);
                if(oPropertyAttributes.name){
                    //add attribute isHanaViewParameter
                    if(oMetadata.getAllHanaViewParameters().indexOf(sName) > -1){
                        //add attribute isKey
                        oPropertyAttributes.isHanaViewParameter = true;
                    }
                    if(oMetadata.getAllKeys().indexOf(sName) > -1){
                        //resolution of dataType
                        oPropertyAttributes.isKey = true;
                    }
                    break;
                }
            }

            for(var name in oPropertyAttributes){
                if(name === "dataType") {
                    for(var dataTypeName in oPropertyAttributes.dataType){
                        oPropertyAttributes[dataTypeName] = oPropertyAttributes.dataType[dataTypeName];
                    }
                }
            }

			var oMetadataProperty = new fnMetadataProperty(oPropertyAttributes);
            oProperties[sName] = oMetadataProperty;
            callback(oProperties[sName]);
		}
	};

    // Private functions
    function getServiceDocuments(){
        if(typeof sAbsolutePathToServiceDocument === "string"){
            return [sAbsolutePathToServiceDocument];
        }else{
            return oMetadataFactory.getServiceDocuments();
        }
    };
};
}; // end of sap/apf/core/metadataFacade.js
if ( !jQuery.sap.isDeclared('sap.apf.core.odataRequest') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

/*global OData */

jQuery.sap.declare("sap.apf.core.odataRequest");
jQuery.sap.require('sap.ui.thirdparty.datajs'); // unlisted dependency retained



/**
 * @memberOf sap.apf.core
 * @description Wraps a OData request in order to handle a server time-out. It uses a POST $batch operation wrapping the GET.
 * @param {sap.apf.core.MessageHandler} oMessageHandler for error handling
 * @param {object} oRequest An Object that represents the HTTP request to be sent.
 * @param {function} fnSuccess A callback function called after the response was successfully received and parsed.
 * @param {function} fnError A callback function that is executed if the request fails. In case of time out the error object has property messageObject, that holds sap.apf.core.MessageObject.
 * @param {object} oBatchHandler A handler object for the request data.
 */
sap.apf.core.odataRequestWrapper = function(oMessageHandler, oRequest, fnSuccess, fnError, oBatchHandler) {
	function success(data, response) {
		var oMessage = sap.apf.core.utils.checkForTimeout(response);
		var oError = {};
		
		if(oMessage) {
			oError.messageObject = oMessage;
			fnError(oError);
		} else {
			fnSuccess(data, response);
		}
	}
	function error(oError) {
		var oMessage = sap.apf.core.utils.checkForTimeout(oError);

		if (oMessage) {
			oError.messageObject = oMessage;
		}
		fnError(oError);
	}
	OData.request(oRequest, success, error, oBatchHandler);
};

}; // end of sap/apf/core/odataRequest.js
if ( !jQuery.sap.isDeclared('sap.apf.core.resourcePathHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global jQuery, sap */
jQuery.sap.declare("sap.apf.core.resourcePathHandler");

 // ctor called
 // constants used


/**
 * @class Holds all paths for the message configuration, the message text bundles, other ui texts for apf, and for extensions. 
 * Furthermore it  holds the information about persistence configuration.
 */
sap.apf.core.ResourcePathHandler = function(oInject) {
    'use strict';
    var thisModule = this;

    var coreApi = oInject.coreApi;
    var messageHandler = oInject.messageHandler;

    var oHT = new sap.apf.utils.Hashtable(messageHandler);

    var oConfigurationProperties;
    var oPersistenceConfiguration;
    var oSmartBusinessConfiguration = null;
	var sApplicationConfigurationURL = "";
	var bConfigurationLoaded = false;

    //noinspection JSLint
    setDefaultLocations();

    // Declaration only ------
    function fileExists(sUrl) {
		var bFileExists = false;
		jQuery.ajax({
			url : sUrl,
			type : "HEAD",
			success : function(oData, sStatus, oJqXHR) {
				var oMessage = sap.apf.core.utils.checkForTimeout(oJqXHR);
				bFileExists = !oMessage;
			},
			error : function() {
				bFileExists = false;
			},
			async : false
		});
		return bFileExists;
	}
	/**
	 * @description returns the url of the application configuration
	 * @returns {string} url
	 */
	this.getApplicationConfigurationURL = function() {
		return sApplicationConfigurationURL;
	};
	/**
	 * @description Loads a new  application configuration in JSON format.
     * Loads only once. When called twice or more then skips processing and returns immediately.
	 * @param {string} sFilePath The absolute path of application configuration file. Host and port will be added in front of this path. 
	 */
	this.loadConfigFromFilePath = function(sFilePath) {
        if (bConfigurationLoaded) {
            return;
        };

        var sUrl = sFilePath;
        //noinspection ReuseOfLocalVariableJS
        sApplicationConfigurationURL = sFilePath;
        jQuery.ajax({
            url : sUrl,
            dataType : "json",
            success : parseConfigurationFile,
            error : function(oJqXHR, sStatus, sError) {
                var oMessageObject = messageHandler.createMessageObject({
                    code : sap.apf.core.constants.message.code.errorLoadingRessource,
                    rawText : "Error " + sError + " when loading the configuration of the resource location: " + sUrl
                });
                messageHandler.putMessage(oMessageObject);
            },
            async : false
        });
        configureMessageHandling();
        configureAnalyticalApplication();
        bConfigurationLoaded = true;

        // --- function declarations only ----------------------------
        //noinspection JSUnusedLocalSymbols,FunctionWithMoreThanThreeNegationsJS
        function parseConfigurationFile(oData, sStatus, oJqXHR) //noinspection JSLint
        {
			var oMessage = sap.apf.core.utils.checkForTimeout(oJqXHR);
			if(oMessage) {
				messageHandler.putMessage(messageHandler.createMessageObject({
					code : sap.apf.core.constants.message.code.errorStartUp,
					rawText : "Timeout when loading application configuration from " + sFilePath + "."
				}));
			}

			if (!oData || !oData.applicationConfiguration) {
				messageHandler.putMessage(messageHandler.createMessageObject({
					code : sap.apf.core.constants.message.code.errorStartUp,
					rawText : "The application configuration from " + sFilePath + " has no valid format."
				}));
				return;

			}
			if (oData.applicationConfiguration.textResourceLocations === undefined) {
				messageHandler.putMessage(messageHandler.createMessageObject({
					code : sap.apf.core.constants.message.code.errorStartUp,
					rawText : "The textResourceLocations is missing in the application configuration from " + sFilePath + "."
				}));
				return;
			}
			
			var oApplicationConfiguration = oData.applicationConfiguration;
			saveRestrictedCopyOfApplicationConfiguration(oApplicationConfiguration);
			
			var oTextResourceLocations = oData.applicationConfiguration.textResourceLocations;
			oPersistenceConfiguration = oData.applicationConfiguration.persistence;
	        checkPersistenceConfiguration(oPersistenceConfiguration);

			if(oData.applicationConfiguration.smartBusiness){
			    oSmartBusinessConfiguration = oData.applicationConfiguration.smartBusiness;
			    checkSmartBusinessConfiguration(oSmartBusinessConfiguration);
			}
			
			var oMessageObject;
			var sUrl;
			for( var oProperty in sap.apf.core.constants.resourceLocation) {
				if(!sap.apf.core.constants.resourceLocation.hasOwnProperty( oProperty )) {
					continue;
				}
				//noinspection JSUnfilteredForInLoop
                if (oApplicationConfiguration[oProperty] !== undefined) {
					//noinspection JSUnfilteredForInLoop
                    sUrl = oApplicationConfiguration[oProperty];
				} else { //noinspection JSUnfilteredForInLoop
                    if (oTextResourceLocations[oProperty] !== undefined) {
                                        //noinspection JSUnfilteredForInLoop
                        sUrl = oTextResourceLocations[oProperty];
                                    }
                    else { continue; }
                }
                if (fileExists(sUrl)) {
                    //noinspection JSUnfilteredForInLoop
                    oHT.setItem(oProperty, sUrl);
                } else {
                    oMessageObject = messageHandler.createMessageObject({
                        code : sap.apf.core.constants.message.code.wrongRessourcePath,
                        rawText : "The path " + sUrl + " for resource location " + oProperty + "is not valid."
                    });
                    messageHandler.putMessage(oMessageObject);
                }
			}
		}
        function saveRestrictedCopyOfApplicationConfiguration(oApplicationConfiguration) {
        	oConfigurationProperties = jQuery.extend(true, {}, oApplicationConfiguration)
			delete oConfigurationProperties.type;
			delete oConfigurationProperties.analyticalConfigurationLocation;
			delete oConfigurationProperties.applicationMessageDefinitionLocation;
			delete oConfigurationProperties.textResourceLocations;
			delete oConfigurationProperties.persistence;
		}
	};
	function configureAnalyticalApplication() {
		var sUrl = thisModule.getResourceLocation(sap.apf.core.constants.resourceLocation.analyticalConfigurationLocation);
		var oMessageObject;
        //noinspection JSUnusedLocalSymbols
		if (sUrl !== "") {
			jQuery.ajax({
				url : sUrl,
				dataType : "json",
				success : parseAnalyticalConfigurationFile,
				error : function(oJqXHR, sStatus, sError) {
					oMessageObject = messageHandler.createMessageObject({
						code : sap.apf.core.constants.message.code.errorLoadingAnalyticalConfig,
						rawText : "Error " + sError + " when loading analytical configuration file" + sUrl
					});
					messageHandler.putMessage(oMessageObject);
				},
				async : false
			});
		} else {  // the case of the default value which is set by this module when the file path was undefined in the config file
			oMessageObject = messageHandler.createMessageObject({
				code : sap.apf.core.constants.message.code.missingAnalyticalConfig,
				rawText : "No analytical configuration defined in the application configuration"
			});
			messageHandler.putMessage(oMessageObject);
		}
        function parseAnalyticalConfigurationFile(oData, sStatus, oJqXHR) {
            var oMessage = sap.apf.core.utils.checkForTimeout(oJqXHR);
            if(!oMessage) {
                if (oData) {
                    coreApi.loadAnalyticalConfiguration(oData);
                } else {
                    messageHandler.putMessage( messageHandler.createMessageObject({
                        code : sap.apf.core.constants.message.code.errorLoadingAnalyticalConfig,
                        rawText : "Undefined analytical configuration file" + sUrl
                    }));
                }
            } else {
                messageHandler.putMessage(messageHandler.createMessageObject({
                    code : sap.apf.core.constants.message.code.errorLoadingAnalyticalConfig,
                    rawText : "Timeout error when loading analytical configuration file" + sUrl
                }));
            }
        }
	}
	function configureMessageHandling() {
		coreApi.loadMessageConfiguration(sap.apf.core.messageDefinition, true);
		loadMessagesFromConfigurationFile(sap.apf.core.constants.resourceLocation.applicationMessageDefinitionLocation, false);
	}
	function loadMessagesFromConfigurationFile(sResourceLocation, bResetRegistry) {
		var sUrl = thisModule.getResourceLocation(sResourceLocation);
		if (sUrl !== "") {
			jQuery.ajax({
				url : sUrl,
				dataType : "json",
				success : parseMessageConfigurationFile,
				error : function(oJqXHR, sStatus, sError) {
					var oMessageObject = messageHandler.createMessageObject({
						code : sap.apf.core.constants.message.code.errorLoadingAnalyticalConfig,
						rawText : "Error " + sError + " when loading message configuration file" + sUrl
					});
					messageHandler.putMessage(oMessageObject);
				},
				async : false
			});
		}
        //noinspection JSUnusedLocalSymbols
        function parseMessageConfigurationFile(oData, sStatus, oJqXHR) {
            var oMessageObject;
            var oMessage = sap.apf.core.utils.checkForTimeout(oJqXHR);
            if(!oMessage) {
                if (oData.messageConfiguration) {
                    coreApi.loadMessageConfiguration(oData.messageConfiguration.definitions, bResetRegistry);
                }
            } else {
                oMessageObject = messageHandler.createMessageObject({
                    code : sap.apf.core.constants.message.code.errorLoadingAnalyticalConfig,
                    rawText : "Timeout error when loading message configuration file" + sUrl
                });
                messageHandler.putMessage(oMessageObject);
            }
        }
	}
	//noinspection FunctionWithMoreThanThreeNegationsJS
    function checkPersistenceConfiguration(oConfig) {
		var oMessageObject;

		if (!oConfig || !oConfig.path) {
			 oMessageObject = messageHandler.createMessageObject({
				code : sap.apf.core.constants.message.code.errorInAnalyticalConfig,
				rawText : "persistence path configuration is missing in the application configuration"
			});
			messageHandler.putMessage(oMessageObject);
		}
		if (!oConfig.path.service) {
			oMessageObject = messageHandler.createMessageObject({
				code : sap.apf.core.constants.message.code.errorInAnalyticalConfig,
				rawText : "service in persistence path configuration is missing"
			});
			messageHandler.putMessage(oMessageObject);
		}
		if (!oConfig.path.entityType) {
			oMessageObject = messageHandler.createMessageObject({
				code : sap.apf.core.constants.message.code.errorInAnalyticalConfig,
				rawText : "entity type in persistence path configuration is missing"
			});
			messageHandler.putMessage(oMessageObject);
		}
		if (!oConfig.path.type || oConfig.path.type !== "persistenceRequest") {
			oMessageObject = messageHandler.createMessageObject({
				code : sap.apf.core.constants.message.code.errorInAnalyticalConfig,
				rawText : "type in persistence path configuration is not persistenceRequest"
			});
			messageHandler.putMessage(oMessageObject);
		}
		if (!oConfig.logicalSystem) {
			oMessageObject = messageHandler.createMessageObject({
				code : sap.apf.core.constants.message.code.errorInAnalyticalConfig,
				rawText : "logical system configuration is missing in the application configuration"
			});
			messageHandler.putMessage(oMessageObject);
		}
		if (!oConfig.logicalSystem.service || !oConfig.logicalSystem.entityType) {
			oMessageObject = messageHandler.createMessageObject({
				code : sap.apf.core.constants.message.code.errorInAnalyticalConfig,
				rawText : "service or entityType are missing in logical system configuration  in the application configuration"
			});
			messageHandler.putMessage(oMessageObject);
		}
	}
    function checkSmartBusinessConfiguration(oConfig){
        var oMessageObject;
        
        if (oConfig.evaluations && !oConfig.evaluations.service) {
            oMessageObject = messageHandler.createMessageObject({
                code : sap.apf.core.constants.message.code.errorInAnalyticalConfig,
                rawText : "service in Smart Business service root configuration is missing"
            });
            messageHandler.putMessage(oMessageObject);
        }
        if (oConfig.evaluations && (!oConfig.evaluations.type || oConfig.evaluations.type !== "smartBusinessRequest")) {
            oMessageObject = messageHandler.createMessageObject({
                code : sap.apf.core.constants.message.code.errorInAnalyticalConfig,
                rawText : "type in Smart Business configuration is not smartBusinessRequest"
            });
            messageHandler.putMessage(oMessageObject);
        }
        if (oConfig.evaluations && !oConfig.evaluations.entityType) {
            oMessageObject = messageHandler.createMessageObject({
                code : sap.apf.core.constants.message.code.errorInAnalyticalConfig,
                rawText : "entityType in Smart Business service root configuration is missing"
            });
            messageHandler.putMessage(oMessageObject);
        }
    }
	/**
	 * @description This function returns the path of a specified resource. 
	 * @param {string} sResourceIdentifier type sap.apf.core.constants.resourceLocation.*
	 * @returns {string} Resource path
	 */
	this.getResourceLocation = function(sResourceIdentifier) {
		return oHT.getItem(sResourceIdentifier);
	};
	/**
	 * @description This function returns the configuration for the persistence (of the path).
	 * @returns {object} persistence configuration object
	 */
	this.getPersistenceConfiguration = function() {
		messageHandler.check(bConfigurationLoaded, "RessourcePathHandler: configuration must be loaded before access to ressources");
		return oPersistenceConfiguration;
	};
	/**
	 * @description This function returns the properties of the configuration file, which are not used internally.
	 * @returns {object} Copy of properties in configuration
	 */
	this.getConfigurationProperties = function() {
		return oConfigurationProperties;
	};
    function setDefaultLocations() {
		var sApfLocation = coreApi.getUriGenerator().getApfLocation();

		oHT.setItem(sap.apf.core.constants.resourceLocation.apfUiTextBundle, sApfLocation + "resources/i18n/apfUi.properties");
		oHT.setItem(sap.apf.core.constants.resourceLocation.applicationMessageDefinitionLocation, "");
		oHT.setItem(sap.apf.core.constants.resourceLocation.applicationMessageTextBundle, "");
		oHT.setItem(sap.apf.core.constants.resourceLocation.applicationUiTextBundle, "");
		oHT.setItem(sap.apf.core.constants.resourceLocation.analyticalConfigurationLocation, "");
	}
};

}; // end of sap/apf/core/resourcePathHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.core.textResourceHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global jQuery, sap, OData */
jQuery.sap.declare("sap.apf.core.textResourceHandler");

jQuery.sap.require('jquery.sap.resources'); // unlisted dependency retained

(function() {
    'use strict';
/**
 * @class The text resource handler retrieves the texts from text bundles or
 *        property files. Text bundles which are not default loaded via apf, will
 *        be loaded on demand by the resource path handler.
 */
sap.apf.core.TextResourceHandler = function(oInject) {
	var oMessageHandler = oInject.messageHandler;
	var oCoreApi = oInject.coreApi;
	var oHTBundles = new sap.apf.utils.Hashtable(oMessageHandler);
	/**
	 * @description retrieves the not encoded text by label object
	 * @param {object} oLabel - label object from configuration
	 * @param {string[]} [aParameters] - array with parameters to replace place holders in text bundle
	 * @returns {string}
	 */
	this.getTextNotHtmlEncoded = function(oLabel, aParameters) {
		if (typeof oLabel === "string") {
			return handleKeyOnlyKind(oLabel, aParameters);
		}
		oMessageHandler.check((oLabel !== undefined && oLabel.kind !== undefined), "Error - oLabel is not compatible");
		if (oLabel.kind === "text") {
			oMessageHandler.check((oLabel.key !== undefined), "Error - oLabel is not compatible");
			return handleTextKind(oLabel, aParameters);
		} else {
			// unknown type
			return "";
		}
	};
	/**
	 * @description retrieves the encoded text by label object
	 * @param {object} oLabel - label object from configuration
     * @param {string[]} [aParameters] - Parameter for placeholder replacement in the message bundle
	 * @returns {string}
	 */
	this.getTextHtmlEncoded = function(oLabel, aParameters) {
		return jQuery.sap.encodeHTML(this.getTextNotHtmlEncoded(oLabel, aParameters));
	};
	/**
	 * @description returns a message text for message handling
	 * @param {string} sRessourceKey - Key of the message in the Ressourcefile
	 * @param {string[]} [aParameters] - Parameter for placeholder replacement in the message bundle
	 * @returns {string}
	 */
	this.getMessageText = function(sRessourceKey, aParameters) {
		var sText;
		loadTextBundles(sap.apf.core.constants.resourceLocation.apfUiTextBundle, sap.apf.core.constants.resourceLocation.applicationMessageTextBundle);
		if (oHTBundles.hasItem(sap.apf.core.constants.resourceLocation.applicationMessageTextBundle)) {
			sText = oHTBundles.getItem(sap.apf.core.constants.resourceLocation.applicationMessageTextBundle).getText(sRessourceKey, aParameters);
			if (sText !== sRessourceKey) {
				return sText;
			}
		}
		return oHTBundles.getItem(sap.apf.core.constants.resourceLocation.apfUiTextBundle).getText(sRessourceKey, aParameters);
	};
	// Private Functions 
	function loadTextBundles(oApfBundle, oApplicationBundle) {
		var sUrl;
		if (oHTBundles.hasItem(oApfBundle) === false) {
			sUrl = oCoreApi.getResourceLocation(oApfBundle);
			addCustomTextResource(oApfBundle, sUrl);
		}
		sUrl = oCoreApi.getResourceLocation(oApplicationBundle);
		if (sUrl !== "" && oHTBundles.hasItem(oApplicationBundle) === false) {
			addCustomTextResource(oApplicationBundle, sUrl);
		}
	
	}
	function handleTextKind(oLabel, aParameters) {
		loadTextBundles(sap.apf.core.constants.resourceLocation.apfUiTextBundle, sap.apf.core.constants.resourceLocation.applicationUiTextBundle);
		// first look in textbundle from application (applicationUiTextBundle), otherwise fallback is used (apfUiTextBundle)
		if (bKeyInTextBundle(oLabel.key, sap.apf.core.constants.resourceLocation.applicationUiTextBundle)) {
			return oHTBundles.getItem(sap.apf.core.constants.resourceLocation.applicationUiTextBundle).getText(oLabel.key, aParameters);
		} else if (bKeyInTextBundle(oLabel.key, sap.apf.core.constants.resourceLocation.apfUiTextBundle)) {
			return oHTBundles.getItem(sap.apf.core.constants.resourceLocation.apfUiTextBundle).getText(oLabel.key, aParameters);
		} else {
			oMessageHandler.putMessage(oMessageHandler.createMessageObject({
				code : "3001",
				aParameters : [ oLabel.key ],
				oCallingObject : this
			}));
			return "# text not available: " + oLabel.key;
		}
	}
	function handleKeyOnlyKind(key, aParameters) {
		loadTextBundles(sap.apf.core.constants.resourceLocation.apfUiTextBundle, sap.apf.core.constants.resourceLocation.applicationUiTextBundle);
		// first look in textbundle from application (applicationUiTextBundle), otherwise fallback is used (apfUiTextBundle)
		if (bKeyInTextBundle(key, sap.apf.core.constants.resourceLocation.applicationUiTextBundle)) {
			return oHTBundles.getItem(sap.apf.core.constants.resourceLocation.applicationUiTextBundle).getText(key, aParameters);
		} else if (bKeyInTextBundle(key, sap.apf.core.constants.resourceLocation.apfUiTextBundle)) {
			return oHTBundles.getItem(sap.apf.core.constants.resourceLocation.apfUiTextBundle).getText(key, aParameters);
		} else {
			oMessageHandler.putMessage(oMessageHandler.createMessageObject({
				code : "3001",
				aParameters : [ key ],
				oCallingObject : this
			}));
			return "# text not available: " + key;
		}
	}
    function bKeyInTextBundle(key, sTextBundle) {
		var oTextBundle = oHTBundles.getItem(sTextBundle);
		if (oTextBundle && oTextBundle.aPropertyFiles && oTextBundle.aPropertyFiles.length >= 0 && oTextBundle.aPropertyFiles[0].aKeys instanceof Array) {
			//noinspection RedundantIfStatementJS
            if (jQuery.inArray(key, oTextBundle.aPropertyFiles[0].aKeys) >= 0) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	function addCustomTextResource(sKey, sUrl) {
		var oBundle = jQuery.sap.resources({
			url : sUrl,
			includeInfo : sap.ui.getCore().getConfiguration().getOriginInfo()
		});
		// remember the bundle under the given Key
		oHTBundles.setItem(sKey, oBundle);
	}
};
}());

}; // end of sap/apf/core/textResourceHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.core.utils.filterTerm') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare('sap.apf.core.utils.filterTerm');


/**
 * @private
 * @class This class implements a simple term in a filter in the form (property,
 *        operator, value). It is used by sap.apf.core.utils.Filter.
 * @param {sap.apf.core.MessageHandler} oMsgHandler
 * @param {string} sProperty This is the property of the term. Property is property
 *            in wording of oData and corresponds to a field name of an xs odata
 *            view, if apf runs against hana or gateway
 * @param {string} sOperator is the operator. Operator must be a value of
 *            {sap.apf.core.constants.FilterOperators}.
 * @param {string|number|boolean|Date} value Some constant value like 1000 or 'Jan'.
 * @param {string|number|boolean|Date} highvalue required, if operator is BT.
 * @returns {sap.apf.core.utils.FilterTerm}
 */
sap.apf.core.utils.FilterTerm = function (oMsgHandler, sProperty, sOperator, value, highvalue) {
    this.type = "filterTerm";
    var op = sOperator;
    var val = value; // value can be string or number

    if (op.length == 2) {
        op = op.toUpperCase();
    }
    // do some checks
    oMsgHandler.check((op !== undefined),
        "sap.apf.utils.FilterTerm.constructor op undefined");

    oMsgHandler.check(
        (jQuery.inArray(op, sap.apf.core.constants.aSelectOpt) > -1),
            "sap.apf.core.utils.FilterTerm op " + op + " not supported");
    oMsgHandler.check((sProperty !== undefined),
        "sap.apf.utils.core.FilterTerm sProperty undefined");
    oMsgHandler.check((val !== undefined),
        "sap.apf.utils.FilterTerm value undefined");

    /**
     * @description Boolean test, whether parameter val is contained in the
     *              filter term for property. This is a helper function of the
     *              contains method.
     * @param {string} property The property of the value.
     * @param {string|number|boolean|Date} val Value, that shall be contained.
     * @returns {boolean} bContained Returns true, if the value is contained,
     *          otherwise false. If the property differs, then true is returned,
     *          because the filter term holds no restriction on the property.
     */
    var containsSingleValue = function (property, val) {
        var v, len;

        if (property !== sProperty) {
            return true;
        }
        if (op === sap.apf.core.constants.FilterOperators.EQ) {
            if (value instanceof Date && val instanceof Date) {
                if (value.valueOf() === val.valueOf()) {
                    return true;
                } else {
                    return false;
                }
            }
            if (value === val) {
                return true;
            } else {
                return false;
            }
        } else if (op === sap.apf.core.constants.FilterOperators.LT) {
            if (value instanceof Date && val instanceof Date) {
                if (value.valueOf() > val.valueOf()) {
                    return true;
                } else {
                    return false;
                }
            }
            if (value > val) {
                return true;
            } else {
                return false;
            }
        } else if (op === sap.apf.core.constants.FilterOperators.LE) {
            if (value instanceof Date && val instanceof Date) {
                if (value.valueOf() >= val.valueOf()) {
                    return true;
                } else {
                    return false;
                }
            }

            if (value >= val) {
                return true;
            } else {
                return false;
            }
        } else if (op === sap.apf.core.constants.FilterOperators.GT) {
            if (value instanceof Date && val instanceof Date) {
                if (value.valueOf() < val.valueOf()) {
                    return true;
                } else {
                    return false;
                }
            }
            if (value < val) {
                return true;
            } else {
                return false;
            }
        } else if (op === sap.apf.core.constants.FilterOperators.BT) {
            if (value instanceof Date && val instanceof Date) {
                if (value.valueOf() <= val.valueOf() && val.valueOf() <= highvalue.valueOf()) {
                    return true;
                } else {
                    return false;
                }
            }

            if (value <= val && val <= highvalue) {
                return true;
            } else {
                return false;
            }
        } else if (op === sap.apf.core.constants.FilterOperators.GE) {
            if (value instanceof Date && val instanceof Date) {
                if (value.valueOf() <= val.valueOf()) {
                    return true;
                } else {
                    return false;
                }
            }
            if (value <= val) {
                return true;
            } else {
                return false;
            }
        } else if (op === sap.apf.core.constants.FilterOperators.NE) {
            if (value instanceof Date && val instanceof Date) {
                if (value.valueOf() === val.valueOf()) {
                    return false;
                } else {
                    return true;
                }
            }
            if (value === val) {
                return false;
            } else {
                return true;
            }
        } else if (op === sap.apf.core.constants.FilterOperators.StartsWith) {
            len = value.length;
            if (len > val.length) {
                return false;
            }
            v = val.slice(0, len);
            if (v === value) {
                return true;
            } else {
                return false;
            }
        } else if (op === sap.apf.core.constants.FilterOperators.EndsWith) {
            len = value.length;
            if (len > val.length) {
                return false;
            }
            v = val.slice(-len);
            if (v === value) {
                return true;
            } else {
                return false;
            }

        } else if (op === sap.apf.core.constants.FilterOperators.Contains) {
            var index = val.indexOf(value);
            if (index > -1) {
                return true;
            } else {
                return false;
            }
        }
    };
    /**
     * @description The method checks, whether value is contained in the logical
     *              expression for given property.
     * @param {string|string[]} property The property is either a single property or an array
     *            of properties.
     * @param {string|number|boolean|Date} val The value is either a single value or an array in json
     *            format with property : value pairs.
     */
    this.contains = function (property, val) {
        var i = 0;
        if (property instanceof Array) {
            for (i = 0; i < property.length; i++) {
                if (property[i] === sProperty) {
                    return containsSingleValue(property[i], val[property[i]]);
                }
            }
            return true; // not restricted to property
        } else {
            return containsSingleValue(property, val);
        }
    };

    /**
     * @description Transforms the object into a string, that can be used in the
     *              filter part of an odata request.
     * @param {object} conf Configuration for returning the result.
     * @param {boolean} [conf.asFilterArray] If an array with single lines for each
     *            property has to be returned.
     * @param conf.formatValue callback function for correct rendering of the value. The callback function is called with
     * property and value.
     */
    this.toUrlParam = function (conf) {
        var strDelimiter = "'";
        var spaceCharacter = " ";
        var param = "";
        var aParam = [];
        var value, hvalue;


        if (conf && conf.formatValue) {
            value = conf.formatValue(sProperty, val);
            if (highvalue) {
                hvalue = conf.formatValue(sProperty, highvalue);
            }
        } else {

            if (typeof val === 'number') {
                value = val;
            } else {
                value = strDelimiter + sap.apf.utils.escapeOdata(val) + strDelimiter;
            }
            if (highvalue) {
                if (typeof val === 'number') {
                    hvalue = highvalue;
                } else {
                    hvalue = strDelimiter + sap.apf.utils.escapeOdata(highvalue) + strDelimiter;
                }
            }
        }
        if (op === sap.apf.core.constants.FilterOperators.StartsWith) {
            param = 'startswith(' + sap.apf.utils.escapeOdata(sProperty) + ',' + value + ')';
            param = jQuery.sap.encodeURL(param);
        } else if (op === sap.apf.core.constants.FilterOperators.EndsWith) {
            param = 'endswith(' + sap.apf.utils.escapeOdata(sProperty) + ',' + value + ')';
            param = jQuery.sap.encodeURL(param);
        } else if (op === sap.apf.core.constants.FilterOperators.Contains) {
            // substringof is odata 2.0, and contains will be odata 4.0
            param = 'substringof(' + value + ','
                + sap.apf.utils.escapeOdata(sProperty) + ')';
            param = jQuery.sap.encodeURL(param);
        } else if (op === sap.apf.core.constants.FilterOperators.BT) {
            param = '(('
                + jQuery.sap.encodeURL(sap.apf.utils.escapeOdata(sProperty)
                    + spaceCharacter + "ge" + spaceCharacter + value)
                + ')'
                + jQuery.sap.encodeURL(spaceCharacter + 'and'
                    + spaceCharacter)
                + '('
                + jQuery.sap.encodeURL(sap.apf.utils.escapeOdata(sProperty)
                    + spaceCharacter + "le" + spaceCharacter + hvalue)
                + '))';
        } else {
            param = '('
                + jQuery.sap.encodeURL(sap.apf.utils.escapeOdata(sProperty)
                    + spaceCharacter + op.toLowerCase()
                    + spaceCharacter + value) + ')';
        }
        if (conf && conf.asFilterArray === true) {
            aParam.push(param);
            return aParam;
        } else {
            return param;
        }
    };
    /**
     * @description Returns the property.
     * @returns {string} property
     */
    this.getProperty = function () {
        return sProperty;
    };
    /**
     * @description Returns the operator.
     * @returns {string} op
     */
    this.getOp = function () {
        return op;
    };

    /**
     * @description Returns the value.
     * @returns {string|number|boolean} value
     */
    this.getValue = function () {
        return val;
    };

    /**
     * @description Returns the high value (.
     * @returns {string|number|boolean} value
     */
    this.getHighValue = function () {
        return highvalue;
    };
    /**
     * @description Returns the hash value of the filter term. The hash value is
     *              needed for simple comparison. The hash uniquely identifies a
     *              filter term.
     * @returns {number} hash value - Hash as int32
     */
    this.getHash = function () {
        var sString = sProperty + op + val;
        return sap.apf.utils.hashCode(sString);
    };

    /**
     * @description Copy constructor.
     * @returns {sap.apf.core.utils.FilterTerm} Fiterterm
     */
    this.copy = function () {
        return new sap.apf.core.utils.FilterTerm(oMsgHandler, sProperty, op,
            val, highvalue);
    };

    /**
     * @description This function either returns undefined, if the filter term
     *              is defined for the property or a copy of itself, if not.
     * @param {string|string[]} property This is either a property or an array of properties.
     *            If it is an array, then the test is done against each of the
     *            properties.
     * @returns {undefined|sap.apf.core.utils.FilterTerm} oFilterTerm Returns
     *          filter term or undefined, if the property equals the property of
     *          the filter term.
     */
    this.removeTermsByProperty = function (property) {
        var i = 0;
        var len = 0;
        if (property instanceof Array) {
            len = property.length;
            for (i = 0; i < len; i++) {
                if (sProperty === property[i]) {
                    return undefined;
                }
            }
            // not found - return copy
            return this.copy();
        } else {
            if (sProperty === property) {
                return undefined;
            } else {
                return this.copy();
            }
        }
    };

    /**
     * @description This function either returns undefined, if the filter term
     *              is defined for the property or a copy of itself, if not.
     * @param {string|string[]} property This is either a property or an array of properties.
     *            If it is an array, then the test is done against each of the
     *            properties.
     * @param {string} option option
     * @param {boolean|number|string} value Value of the expression.
     * @returns {sap.apf.core.utils.FilterTerm|undefined} oFilterTerm The filter
     *          term or undefined is returned, if the property equals the
     *          property of the filter term.
     */
    this.removeTerms = function (property, option, value) {
        var i = 0;
        var len = 0;
        if (property instanceof Array) {
            len = property.length;
            for (i = 0; i < len; i++) {
                if (sProperty === property[i] && op === option && val === value) {
                    return undefined;
                }
            }
            // not found - return copy
            return this.copy();
        } else {

            if (sProperty === property && op === option && val === value) {
                return undefined;
            } else {
                return this.copy();
            }
        }
    };

    /**
     * @description changes the property name to target property name, if
     *              property name = source property,
     * @param {object} aMapping the mapping directive has the form { source :
	 *            'sourceProp', target : 'targetProp' }
     * @returns undefined
     */
    this.mapProperties = function (aMapping) {

        var i;
        for (i = 0; i < aMapping.length; i++) {
            if (sProperty === aMapping[i].source) {
                sProperty = aMapping[i].target;
                return undefined;
            }
        }
        return undefined;
    };
};

}; // end of sap/apf/core/utils/filterTerm.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.BaseVizChartRepresentation') ) {
/*!
* SAP APF Analysis Path Framework
* 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
*/


jQuery.sap.declare("sap.apf.ui.representations.BaseVizChartRepresentation");
/** 
 * @class representation base class constructor. 
 * @param oParameters defines parameters required for chart such as Dimension/Measures, tooltip, axis information.
* @returns chart object 
 */
sap.apf.ui.representations.BaseVizChartRepresentation = function(oApi, oParameters) {
	this.oMessageObject = "";
	this.legendBoolean = true;
	this.aDataResponse = undefined;
	this.dataset = {};
	this.oModel = new sap.ui.model.json.JSONModel();
	this.bDataHasBeenSelected = false;
	this.parameter = oParameters;
	this.sort = oParameters.sort;
	this.dimension = oParameters.dimensions;
	this.measure = oParameters.measures;
	this.alternateRepresentation = oParameters.alternateRepresentationType;
	this.requiredFilters = oParameters.requiredFilters;
	this.vizHelper = new sap.apf.ui.representations.utils.vizHelper(oApi, oParameters);
	this.chartInstance = {};
	this.chartParam = "";
	this.thumbnailChartParam = "";
	this.disableSelectEvent = false;
	this.oApi = oApi;
	var self = this;
	this.showXaxisLabel = true;
	this.axisType = "axis";
};
sap.apf.ui.representations.BaseVizChartRepresentation.prototype = {
	/**
	* @method getParameter
	* @description returns the constructor arguments which will be used to create toggle representation.
	*/
	getParameter : function() {
		return this.parameter;
	},
	/**
	* @method setData
	* @param aDataResponse  Response from oData service
	* @param metadata Metadata of the oData service
	* @description Fetches the data from oData service and updates the selection if present 
	 * Handles data with multiple dimensions .
	*/
	setData : function(aDataResponse, metadata) {
		this.vizHelper.init(aDataResponse, metadata, this.axisType);
		this.formatter = new sap.apf.ui.representations.utils.formatter(this.oApi, metadata, aDataResponse);
		this.aDataResponse = aDataResponse || [];
		this.metadata = metadata;
		if (!this.metadata) {
			this.oMessageObject = this.oApi.createMessageObject({
				code : "6004",
				aParameters : [ this.oApi.getTextNotHtmlEncoded("step") ]
			});
			this.oApi.putMessage(this.oMessageObject);
		}
	},
	/**
	* @method getAlternateRepresentation
	* @description returns the alternate representation of current step (i.e. list representation for the charts)  
	 */
	getAlternateRepresentation : function() {
		return this.alternateRepresentation;
	},
	/**
	* @description returns meta data for representation type
	*/
	getMetaData : function() {
		return this.metadata;
	},
	/**
	* @description returns data for representation type
	*/
	getData : function() {
		return this.aDataResponse;
	},
	/**
	* @method getRequestOptions
	* @description provide optional filter properties for odata request URL such as pagging, sorting etc             
	 */
	getRequestOptions : function() {
		if (this.sort) {
			return {
				orderby : [ {
					property : this.sort.sortField,
					descending : this.sort.descending
				} ]
			};
		} else
			return {};
	},
	/**
	* @method createDataset
	* @description Intantiates the dataset to be consumed by the chart 
	 */
	createDataset : function() {
		this.dataset = this.vizHelper.getDataset();
		this.oModel = this.vizHelper.getModel();
	},
	/**
	* @method getMainContent
	* @param oStepTitle title of the main chart
	* @param width width of the main chart
	* @param height height of the main chart
	* @description draws Main chart into the Chart area
	*/
	getMainContent : function(oStepTitle, width, height) {
		var self = this;
		if (!oStepTitle) {
			this.oMessageObject = this.oApi.createMessageObject({
				code : "6002",
				aParameters : [ "title", this.oApi.getTextNotHtmlEncoded("step") ]
			});
			this.oApi.putMessage(this.oMessageObject);
		}
		if (this.dimension.length === 0) {
			this.oMessageObject = this.oApi.createMessageObject({
				code : "6002",
				aParameters : [ "dimensions", oStepTitle ]
			});
			this.oApi.putMessage(this.oMessageObject);
		}
		if (this.measure.length === 0) {
			this.oMessageObject = this.oApi.createMessageObject({
				code : "6002",
				aParameters : [ "measures", oStepTitle ]
			});
			this.oApi.putMessage(this.oMessageObject);
		}
		if (!this.aDataResponse || this.aDataResponse.length === 0) {
			this.oMessageObject = this.oApi.createMessageObject({
				code : "6000",
				aParameters : [ oStepTitle ]
			});
			this.oApi.putMessage(this.oMessageObject);
		}
		var chartHeight = height || 600;
		chartHeight = chartHeight + "px";
		var chartWidth = width || 1000;
		chartWidth = chartWidth + "px";
		self.title = oStepTitle;
		self.createDataset();
		self.chartParam = {
			width : chartWidth,
			title : {
				visible : true,
				text : self.title
			},
			xAxis : {
				title : {
					visible : true
				},
				label : {
					visible : self.showXaxisLabel
				}
			},
			yAxis : {
				title : {
					visible : true
				}
			},
			legend : {
				visible : self.legendBoolean,
				title : {
					visible : self.legendBoolean
				}
			},
			plotArea : {
				animation : {
					dataLoading : false,
					dataUpdating : false
				}
			},
			dataset : self.dataset
		};
		self.chart = new sap.viz.ui5[self.chartType](self.chartParam);
		self.setFormatString(self.measure);
		/**
		* @method attachInitialized
		* @param event which is triggered on when the chart is initialized
		* @description Draws the selection
		*/
		self.chart.attachInitialized(function() {
			self.drawSelection();
		});
		/**
		* @method attachSelectData
		* @param event which is triggered on selection of data on chart 
		 * @description Adding selection to the chart based on the selected indices provided
		*/
		self.chart.attachSelectData(function(e) {
			self.handleSelection(e);
		});
		/**
		* @method attachDeselectData
		* @param event handler on deselect of data
		* @description For deselect of data from the chart on user event
		*/
		self.chart.attachDeselectData(function(e) {
			self.handleDeselection(e);
		});
		self.chart.setModel(self.oModel);
		self.vizHelper.validateSelectionModes(self.chart);
		self.chartInstance = self.chart;
		return self.chart;
	},
	/**
	* @method setFormatString
	* @param measure
	* @description sets the format string for axis label and tooltip
	*/
	setFormatString : function(measures) {
		var formatString = [];
		var tooltipFormatString = [];
		var labelFormatString = [];
		var bAllMeasuresSameUnit = true;
		var i = 0;
		var self = this;
		if (measures.length === 1) { // for single measure formatting (if any) will be applied to Y-axis.
			formatString = this.formatter.getFormatString(measures[0]);
			if (formatString !== undefined) {
				if (this.chart.getYAxis !== undefined && formatString.label !== undefined) {
					this.chart.getYAxis().getLabel().setFormatString(formatString.label);
				}
				if (this.chart.getToolTip !== undefined && formatString.tooltip !== undefined) {
					this.chart.getToolTip().setFormatString([ [ formatString.tooltip ] ]);
				}
			}
		} else { // for multiple measures formatting will be applied to Y-axis only whne all the mesauers have same semantic for their units .
			var firstMeasureUnitSemantic = self.metadata.getPropertyMetadata(measures[0].fieldName).unit ? self.metadata.getPropertyMetadata(self.metadata.getPropertyMetadata(measures[0].fieldName).unit).semantics : undefined;
			var measureUnitSemantic;
			measures.forEach(function(measure, index) {
				measureUnitSemantic = self.metadata.getPropertyMetadata(measures[0].fieldName).unit ? self.metadata.getPropertyMetadata(self.metadata.getPropertyMetadata(measure.fieldName).unit).semantics : undefined;
				if (bAllMeasuresSameUnit && firstMeasureUnitSemantic !== undefined && measureUnitSemantic && (firstMeasureUnitSemantic !== measureUnitSemantic)) {
					bAllMeasuresSameUnit = false;  // bAllMeasuresSameUnit boolean is used to find out if there are measures with different unit semantics
				}
				formatString[index] = self.formatter.getFormatString(measure); // get the format object which has label and tooltip format strings
				if (formatString[index].label !== undefined && formatString[index].tooltip !== undefined) {
					tooltipFormatString.push([ formatString[index].tooltip ]);  
					labelFormatString.push(formatString[index].label);
				}
			});
			if (bAllMeasuresSameUnit) {  // all measures has the unit with same semantics 
				if (formatString.length !== 0 && this.chart.getYAxis !== undefined && labelFormatString.length !== 0) {
					this.chart.getYAxis().getLabel().setFormatString(labelFormatString[0]);
				}
			}
			if (formatString.length !== 0 && this.chart.getToolTip !== undefined && tooltipFormatString.length !== 0) {
				this.chart.getToolTip().setFormatString(tooltipFormatString); // tooltip always shows the formatted values for all the measures
			}
		}
	},
	/**
	* @method drawSelection
	* @param 
	 * @description Draws the selection on main chart when chart is loaded
	*/
	drawSelection : function() {
		var aSelections = this.vizHelper.getSelectionFromFilter(this.filter);
		if (aSelections.length > 0) {
			this.disableSelectEvent = true;
			this.chart.selection(aSelections);
		}
	},
	/**
	* @method drawThumbnailSelection
	* @param 
	 * @description Draws the selection on the thumbnail chart  when chart is loaded
	*/
	drawThumbnailSelection : function() {
		var self = this;
		var aSelections = this.vizHelper.getSelectionFromFilter(this.filter);
		if (aSelections.length > 0) {
			self.thumbnailChart.selection([], {
				clearSelection : true
			});
			self.thumbnailChart.selection(aSelections);
		}
	},
	/**
	* @method handleSelection
	* @param event
	* @description  plots the selections made on the chart
	*/
	handleSelection : function(evt) {
		var self = this;
		if (!self.disableSelectEvent) {
			var ctxArray = self.vizHelper.getHighlightPointsFromSelectionEvent(self.chart.selection());
			self.chart.selection(ctxArray);
			self.thumbnailChart.selection(ctxArray);
			self.bDataHasBeenSelected = true;
			self.oApi.selectionChanged();
		} else {
			self.disableSelectEvent = false;
		}
	},
	/**
	* @method handleDeselection
	* @param event
	* @description  de-selects the selected datapoints on the chart
	*/
	handleDeselection : function(evt) {
		var self = this;
		if (!self.disableSelectEvent) {
			self.disableSelectEvent = true;
			var newSelection = self.vizHelper.getHighlightPointsFromDeselectionEvent(self.chart.selection());
			self.chart.selection([], {
				clearSelection : true
			});
			self.thumbnailChart.selection([], {
				clearSelection : true
			});
			self.chart.selection(newSelection);
			self.thumbnailChart.selection(newSelection);
			if (!newSelection.length) {
				self.disableSelectEvent = false;
			}
			self.bDataHasBeenSelected = true;
			self.oApi.selectionChanged();
		} else {
			self.disableSelectEvent = false;
		}
	},
	/**
	* @method getSelectionCount
	* @description This method helps in determining the selection count of a representation
	* @returns the selection count of the current representation.
	*/
	getSelectionCount : function() {
		return this.vizHelper.getFilterCount();
	},
	/**
	* @method hasSelection
	* @description This method helps in determining the selections of a representation
	* @returns true if the representation holds any selections.
	*/
	hasSelection : function() {
		return this.bDataHasBeenSelected;
	},
	/**
	* @method removeAllSelection
	* @description removes all Selection from Chart
	*/
	removeAllSelection : function() {
		this.chart.selection([], {
			clearSelection : true
		});
		this.thumbnailChart.selection([], {
			clearSelection : true
		});
	},
	/**
	* @method getFilterMethodType
	* @description This method helps in determining which method has to be used for the filter retrieval from a representation.
	* @returns {sap.apf.constants.filterMethodTypes} The filter method type the representation supports
	*/
	getFilterMethodType : function() {
		return sap.apf.core.constants.filterMethodTypes.filter; // returns the filter method type the representation supports
	},
	getFilter : function() {
		this.filter = this.vizHelper.getFilterFromSelection();
		return this.filter;
	},
	/**
	* @method setFilter
	* @param {sap.apf.utils.Filter} oFilter
	* @description sets the initial filter to the representation. The filter holds the values of the start filter of the path.
	*/
	setFilter : function(oFilter) {
		this.filter = oFilter;
		this.bDataHasBeenSelected = false;
	},
	/**
	* @method adoptSelection
	* @param {object} oSourceRepresentation Source representation implementing the representationInterface.
	* @description Called on representation by binding when a representation type is set.
	*/
	adoptSelection : function(oSourceRepresentation) {
		if (oSourceRepresentation && oSourceRepresentation.getFilter) {
			this.vizHelper.filterValues = oSourceRepresentation.getFilter().getInternalFilter().getFilterTerms().map(function(term) {
				return [ term.getValue() ];
			});
		}
	},
	/**
	*@method getThumbnailContent 
	 *@description draws Thumbnail for the current chart type and returns to the calling object
	*@returns thumbnail object for the chart type
	*/
	getThumbnailContent : function() {
		var self = this;
		var height = sap.apf.ui.utils.CONSTANTS.thumbnailDimensions.HEIGHT;
		var width = sap.apf.ui.utils.CONSTANTS.thumbnailDimensions.WIDTH;
		self.createDataset();
		self.thumbnailChartParam = {
			width : width,
			height : height,
			title : {
				visible : false
			},
			xAxis : {
				visible : false,
				title : {
					visible : false
				}
			},
			yAxis : {
				visible : false,
				title : {
					visible : false
				}
			},
			legend : {
				visible : false,
				title : {
					visible : false
				}
			},
			sizeLegend : {
				visible : false,
				title : {
					visible : false
				}
			},
			toolTip : {
				visible : false
			},
			interaction : {
				selectability : {
					axisLabelSelection : false,
					legendSelection : false,
					plotLassoSelection : false,
					plotStdSelection : false
				},
				enableHover : false
			},
			background : {
				visible : false
			},
			general : {
				layout : {
					padding : 0
				}
			},
			plotArea : {
				animation : {
					dataLoading : false,
					dataUpdating : false
				}
			},
			dataset : self.dataset
		};
		self.thumbnailChart = new sap.viz.ui5[self.chartType](self.thumbnailChartParam);
		self.thumbnailChart.attachInitialized(function() {
			self.drawThumbnailSelection();
		});
		self.thumbnailLayout = new sap.ui.layout.HorizontalLayout().addStyleClass('thumbnailLayout');
		if (this.aDataResponse !== undefined && this.aDataResponse.length !== 0) {
			self.thumbnailChart.setModel(self.oModel);
			self.thumbnailLayout.removeAllContent();
			self.thumbnailLayout.addContent(self.thumbnailChart);
		} else {
			var noDataText = new sap.m.Text({
				text : self.oApi.getTextNotHtmlEncoded("noDataText")
			}).addStyleClass('noDataText');
			self.thumbnailLayout.removeAllContent();
			self.thumbnailLayout.addContent(noDataText);
		}
		return self.thumbnailLayout;
	},
	/**
	* @method serialize
	* @description Getter for Serialized data for a representation
	* @returns selectionObject
	*/
	serialize : function() {
		return {
			oFilter : this.vizHelper.filterValues,
			bIsAlternateView : this.bIsAlternateView
		};
	},
	/**
	* @method deserialize
	* @description This method uses selection object from serialized data and sets the selection to representation
	*/
	deserialize : function(oSerializable) {
		this.vizHelper.filterValues = oSerializable.oFilter;
		this.bIsAlternateView = oSerializable.bIsAlternateView;
	},
	/**
	* @method getPrintContent
	* @param oStepTitle title of the step
	* @description gets the printable content of the representation
	*/
	getPrintContent : function(oStepTitle) {
		var oChart;
		oChart = this.getMainContent(oStepTitle, 1000, 600);
		oChart.getPlotArea().getAnimation().setDataLoading(false);
		oChart.getPlotArea().getAnimation().setDataUpdating(false);
		return oChart;
	}
};
}; // end of sap/apf/ui/representations/BaseVizChartRepresentation.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.bubbleChart') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.apf.ui.representations.bubbleChart");

/**
 * @class columnChart constructor.
 * @param oParametersdefines parameters required for chart such as Dimension/Measures,tooltip, axis information.
 * @returns chart object
 */
sap.apf.ui.representations.bubbleChart = function(oApi, oParameters) {
	sap.apf.ui.representations.BaseVizChartRepresentation.apply(this, [ oApi, oParameters ]);
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.BUBBLE_CHART;
	this.chartType = sap.apf.ui.utils.CONSTANTS.vizChartTypes.BUBBLE;
	this.axisType = "group";
};
sap.apf.ui.representations.bubbleChart.prototype = Object.create(sap.apf.ui.representations.BaseVizChartRepresentation.prototype);
//Set the "constructor" property to refer to bubbleChart
sap.apf.ui.representations.bubbleChart.prototype.constructor = sap.apf.ui.representations.bubbleChart;
/**
 * @method setFormatString
 * @param measure
 * @description sets the format string for axis label and tooltip
 */
sap.apf.ui.representations.bubbleChart.prototype.setFormatString = function(measures) {
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.setFormatString.call(this, measures);
	var axisFormatString = this.formatter.getFormatString(measures[1]);
	var legendFormatString = this.formatter.getFormatString(measures[2]);
	if (axisFormatString !== undefined && axisFormatString.label !== undefined) {
		this.chart.getXAxis().getLabel().setFormatString(axisFormatString.label);
	}
	if (legendFormatString !== undefined && legendFormatString.tooltip !== undefined) {
		this.chart.getSizeLegend().setFormatString(legendFormatString.tooltip);
	}
};
}; // end of sap/apf/ui/representations/bubbleChart.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.columnChart') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.apf.ui.representations.columnChart");



/**
 * @class columnChart constructor.
 * @param oParametersdefines parameters required for chart such as Dimension/Measures,tooltip, axis information.
 * @returns chart object
 */
sap.apf.ui.representations.columnChart = function(oApi, oParameters) {
	sap.apf.ui.representations.BaseVizChartRepresentation.apply(this, [ oApi, oParameters ]);
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.COLUMN_CHART;
	this.chartType = sap.apf.ui.utils.CONSTANTS.vizChartTypes.COLUMN;
};

sap.apf.ui.representations.columnChart.prototype = Object.create(sap.apf.ui.representations.BaseVizChartRepresentation.prototype);

//Set the "constructor" property to refer to columnChart
sap.apf.ui.representations.columnChart.prototype.constructor = sap.apf.ui.representations.columnChart;

/**
 * @method getMainContent
 * @param oStepTitle title of the main chart
 * @param width width of the main chart
 * @param height height of the main chart
 * @description draws Main chart into the Chart area
 */
sap.apf.ui.representations.columnChart.prototype.getMainContent = function(oStepTitle, width, height) {
	this.chart = sap.apf.ui.representations.BaseVizChartRepresentation.prototype.getMainContent.call(this, oStepTitle, width, height);
	if (this.aDataResponse !== undefined && this.aDataResponse.length > 1200) {
		this.chartParam.css = '.v-datapoint {shape-rendering: auto}';
	}
	return this.chart;
};
}; // end of sap/apf/ui/representations/columnChart.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.lineChart') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.apf.ui.representations.lineChart");


/** 
 * @class lineChart constructor.
 * @param oParameters defines parameters required for chart such as Dimension/Measures, tooltip, axis information.
 * @returns chart object 
 */
sap.apf.ui.representations.lineChart = function(oApi, oParameters) {
	sap.apf.ui.representations.BaseVizChartRepresentation.apply(this, [ oApi, oParameters ]);
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.LINE_CHART;
	this.chartType = sap.apf.ui.utils.CONSTANTS.vizChartTypes.LINE;
};

sap.apf.ui.representations.lineChart.prototype = Object.create(sap.apf.ui.representations.BaseVizChartRepresentation.prototype);

//Set the "constructor" property to refer to lineChart
sap.apf.ui.representations.lineChart.prototype.constructor = sap.apf.ui.representations.lineChart;

}; // end of sap/apf/ui/representations/lineChart.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.percentageStackedColumnChart') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.ui.representations.percentageStackedColumnChart");
/**
 * @class stackColumn constructor.
 * @param oParameters defines parameters required for chart such as Dimension/Measures, tooltip, axis information.
 * @returns chart object 
 */
sap.apf.ui.representations.percentageStackedColumnChart = function(oApi, oParameters) {
	sap.apf.ui.representations.BaseVizChartRepresentation.apply(this, [ oApi, oParameters ]);
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.PERCENTAGE_STACKED_COLUMN_CHART;
	this.chartType = sap.apf.ui.utils.CONSTANTS.vizChartTypes.PERCENTAGE_STACKED_COLUMN;
};

sap.apf.ui.representations.percentageStackedColumnChart.prototype = Object.create(sap.apf.ui.representations.BaseVizChartRepresentation.prototype);

//Set the "constructor" property to refer to percentageStackedColumnChart
sap.apf.ui.representations.percentageStackedColumnChart.prototype.constructor = sap.apf.ui.representations.percentageStackedColumnChart;

/**
 * @method setFormatString
 * @param  measure
 * @description sets the format string for axis label and tooltip
 */
sap.apf.ui.representations.percentageStackedColumnChart.prototype.setFormatString = function(measure) {
	this.chart.getXAxis().getLabel().setFormatString("");
	this.chart.getYAxis().getLabel().setFormatString("");
	this.chart.getToolTip().setFormatString([ [ "" ] ]);
};

}; // end of sap/apf/ui/representations/percentageStackedColumnChart.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.pieChart') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.ui.representations.pieChart");
/** 
 * @class pieChart constructor.
 * @param oParameters defines parameters required for chart such as Dimension/Measures, tooltip, axis information.
 * @returns chart object 
 */
sap.apf.ui.representations.pieChart = function(oApi, oParameters) {
	sap.apf.ui.representations.BaseVizChartRepresentation.apply(this, [ oApi, oParameters ]);
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.PIE_CHART;
	this.chartType = sap.apf.ui.utils.CONSTANTS.vizChartTypes.PIE;
};
sap.apf.ui.representations.pieChart.prototype = Object.create(sap.apf.ui.representations.BaseVizChartRepresentation.prototype);

//Set the "constructor" property to refer to pieChart
sap.apf.ui.representations.pieChart.prototype.constructor = sap.apf.ui.representations.pieChart;
}; // end of sap/apf/ui/representations/pieChart.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.scatterPlotChart') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.ui.representations.scatterPlotChart");
/** 
 * @class scatterPlotChart constructor.
 * @param oParameters defines parameters required for chart such as Dimension/Measures, tooltip, axis information.
 * @returns chart object 
 */
sap.apf.ui.representations.scatterPlotChart = function(oApi, oParameters) {
	sap.apf.ui.representations.BaseVizChartRepresentation.apply(this, [ oApi, oParameters ]);
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.SCATTERPLOT_CHART;
	this.chartType = sap.apf.ui.utils.CONSTANTS.vizChartTypes.SCATTERPLOT;
	this.axisType = "group";
};
sap.apf.ui.representations.scatterPlotChart.prototype = Object.create(sap.apf.ui.representations.BaseVizChartRepresentation.prototype);
//Set the "constructor" property to refer to scatterPlotChart
sap.apf.ui.representations.scatterPlotChart.prototype.constructor = sap.apf.ui.representations.scatterPlotChart;
/**
 *@method getThumbnailContent 
 *@description draws Thumbnail for the current chart type and returns to the calling object
 *@returns thumbnail object for the chart type
 */
sap.apf.ui.representations.scatterPlotChart.prototype.getThumbnailContent = function() {
	var self = this;
	self.thumbnailChartLayout = sap.apf.ui.representations.BaseVizChartRepresentation.prototype.getThumbnailContent.call(self);
	self.thumbnailChartParam.plotArea.markerSize = 4;
	return self.thumbnailChartLayout;
};
//Set the "constructor" property to refer to scatterPlotChart
sap.apf.ui.representations.scatterPlotChart.prototype.constructor = sap.apf.ui.representations.scatterPlotChart;
/**
 * @method setFormatString
 * @param measure
 * @description sets the format string for axis label and tooltip
 */
sap.apf.ui.representations.scatterPlotChart.prototype.setFormatString = function(measures) {
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.setFormatString.call(this, measures);
	var axisFormatString = this.formatter.getFormatString(measures[1]);
	if (axisFormatString !== undefined && axisFormatString.label !== undefined) {
		this.chart.getXAxis().getLabel().setFormatString(axisFormatString.label);
	}
};
}; // end of sap/apf/ui/representations/scatterPlotChart.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.stackedColumnChart') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.ui.representations.stackedColumnChart");
/**
 * @class stackColumn constructor.
 * @param oParameters defines parameters required for chart such as Dimension/Measures, tooltip, axis information.
 * @returns chart object 
 */
sap.apf.ui.representations.stackedColumnChart = function(oApi, oParameters) {
	sap.apf.ui.representations.BaseVizChartRepresentation.apply(this, [ oApi, oParameters ]);
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.STACKED_COLUMN_CHART;
	this.chartType = sap.apf.ui.utils.CONSTANTS.vizChartTypes.STACKED_COLUMN;
};



sap.apf.ui.representations.stackedColumnChart.prototype = Object.create(sap.apf.ui.representations.BaseVizChartRepresentation.prototype);

//Set the "constructor" property to refer to stackedColumnChart
sap.apf.ui.representations.stackedColumnChart.prototype.constructor = sap.apf.ui.representations.stackedColumnChart;

}; // end of sap/apf/ui/representations/stackedColumnChart.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.table') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.ui.representations.table");
/** 
 * @class tableRepresentation constructor.
 * @param oParameters defines parameters required for chart such as Dimension/Measures, tooltip, axis information.
 * @returns table object 
 */
sap.apf.ui.representations.table = function(oApi, oParameters) {
	var self = this;
	this.parameter = oParameters;
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION;
	this.fields = oParameters.dimensions.concat(oParameters.measures);
	this.columns = {
		name : [],
		value : [],
		width : []
	};
	jQuery.sap.require({
		modName : "sap.ui.thirdparty.d3"
	});
	this.aDataResponse = [];
	this.alternateRepresentation = oParameters.defaultListConfigurationTypeID;
	this.filter = oApi.createFilter();
	var skip = 0;
	var top = 100;
	var sortedColumn;
	var sortProperty;
	var sortOrderIsDescending;
	var triggerBool = false;
	var eventsFired = 0;
	var skipAction = 0;
	var respData = [];
	this.printMode = false;
	this.oModel = new sap.ui.model.json.JSONModel();
	this.oModel.setSizeLimit(10000);
	this.isAlternateRepresentation = oParameters.isAlternateRepresentation;
	/**
	 * @method getParameter
	 * @description returns the constructor arguments which will be used to create toggle representation.
	 */
	this.getParameter = function() {
		return this.parameter;
	};
	/**
	 * @method setData
	 * @param aDataResponse  Response from oData service
	 * @param metadata Metadata of the oData service
	 * @description Public API which Fetches the data from oData service and updates the selection if present 
	 */
	this.setData = function(aDataResponse, metadata) {
		if (skipAction === 0) {
			if (triggerBool) {
				aDataResponse.map(function(obj) {
					self.aDataResponse.push(obj);
				});
				skipAction++;
			} else {
				skip = 0;
				//top = 100;
				self.aDataResponse = [];
				aDataResponse.map(function(obj) {
					self.aDataResponse.push(obj);
				});
			}
		}
		respData = aDataResponse; // To check whether record exists or not		
		this.metadata = metadata;
		triggerBool = false;
		this.formatter = new sap.apf.ui.representations.utils.formatter(oApi, metadata, aDataResponse);
	};
	/**
	 * @method getAlternateRepresentation
	 * @description returns the alternate representation of current step (i.e. list representation for the charts)  
	 */
	this.getAlternateRepresentation = function() {
		return this.alternateRepresentation;
	};
	/**
	 * @description returns meta data for representation type
	 */
	this.getMetaData = function() {
		return this.metadata;
	};
	/**
	 * @description returns data for representation type
	 */
	this.getData = function() {
		return this.aDataResponse;
	};
	/**
	 * @method  getRequestOptions
	 * @desc 
	 **/
	this.getRequestOptions = function() {
		if (!triggerBool) {
			top = 100;
			skip = 0;
			skipAction = 0;
		}
		var requestObj = {
			paging : {
				top : top,
				skip : skip,
				inlineCount : true
			}
		};
		var orderByArray;
		if (sortProperty !== undefined) {
			orderByArray = [ {
				property : sortProperty,
				descending : sortOrderIsDescending
			} ];
			requestObj.orderby = orderByArray;
		} else {
			if (this.getParameter().sort !== undefined) {
				orderByArray = [ {
					property : this.getParameter().sort.sortField,
					descending : this.getParameter().sort.descending
				} ];
				requestObj.orderby = orderByArray;
			}
		}
		return requestObj;
	};
	this.createDataset = function() {
		if (self.getData().length !== 0) {
			for( var i = 0; i < self.fields.length; i++) {
				self.columns.value[i] = self.fields[i].fieldName;
				var name = "";
				var sUnitValue = "";
				if (self.getMetaData() !== undefined && self.getMetaData().getPropertyMetadata(self.fields[i].fieldName).unit !== undefined) {
					var sUnitReference = self.getMetaData().getPropertyMetadata(self.fields[i].fieldName).unit;
					sUnitValue = self.getData()[0][sUnitReference];// take value of unit from first data set.
					name = self.fields[i].fieldDesc === undefined ? self.getMetaData().getPropertyMetadata(self.fields[i].fieldName).label + " (" + sUnitValue + ")" : oApi.getTextNotHtmlEncoded(self.fields[i].fieldDesc) + " (" + sUnitValue + ")";
					self.columns.name[i] = name;
				} else
					self.columns.name[i] = this.fields[i].fieldDesc === undefined ? self.getMetaData().getPropertyMetadata(self.fields[i].fieldName).label : oApi.getTextNotHtmlEncoded(self.fields[i].fieldDesc);
				if (self.parameter.width !== undefined) {
					self.columns.width[i] = self.parameter.width[self.columns.value[i]];
				}
			}
		}
	};
	this.drawSelection = function(e) {
		var sRequiredFilterProperty = self.getFilter().getInternalFilter().getProperties()[0], aFilterTerms = self.getFilter().getInternalFilter().getFilterTermsForProperty(sRequiredFilterProperty), aFilterValues = aFilterTerms.map(function(term) {
			return term.getValue();
		}), aListItems = this.getItems(), aSelectedListItems = aListItems.filter(function(item) {
			var reqFilterValue = item.getBindingContext().getProperty(sRequiredFilterProperty);
			return aFilterValues.indexOf(reqFilterValue) !== -1;
		});
		aSelectedListItems.forEach(function(item) {
			item.addStyleClass('sapMLIBSelected');
		});
	};
	/**
	 * @method getMainContent
	 * @param oStepTitle title of the main chart
	 * @param width width of the main chart
	 * @param height height of the main chart
	 * @description draws Main chart into the Chart area
	 */
	this.getMainContent = function(oStepTitle, height, width) {
		self.createDataset();
		var oMessageObject;
		if (!oStepTitle) {
			oMessageObject = oApi.createMessageObject({
				code : "6002",
				aParameters : [ "title", oApi.getTextNotHtmlEncoded("step") ]
			});
			oApi.putMessage(oMessageObject);
		}
		if (this.fields.length === 0) {
			oMessageObject = oApi.createMessageObject({
				code : "6002",
				aParameters : [ "dimensions", oStepTitle ]
			});
			oApi.putMessage(oMessageObject);
		}
		if (!this.aDataResponse || this.aDataResponse.length === 0) {
			oMessageObject = oApi.createMessageObject({
				code : "6000",
				aParameters : [ oStepTitle ]
			});
			oApi.putMessage(oMessageObject);
		}
		//var id = sap.apf.ui.getStepContainer().vLayout.sId;
		var chartHeight = height || 600;// jQuery('#' + id + '').height();
		chartHeight = chartHeight + "px";
		var chartWidth = width || 1000;// jQuery('#' + id + '').width();
		chartWidth = chartWidth + "px";
		self.title = oStepTitle;
		var obj = self.aDataResponse;
		self.oModel.setData({
			tableData : obj
		});
		var columnCells = [];
		var i;
		for(i = 0; i < self.columns.name.length; i++) {
			self.cellValues = new sap.m.Text().bindText(self.columns.value[i], function(index) {
				return function(columnValue) {
					if (self.metadata === undefined) {
						return columnValue;
					} else {
						var formatedColumnValue = self.formatter.getFormattedValue(self.columns.value[index], columnValue);
						if (formatedColumnValue !== undefined) {
							return formatedColumnValue;
						} else {
							return columnValue;
						}
					}
				};
			}(i), sap.ui.model.BindingMode.OneWay);
			columnCells.push(self.cellValues);
		}
		//Setting column widths for table with headers and without headers
		var columnsWithHeaders = [];
		var columnsWithoutHeaders = [];
		var bWidthExists;
		var pixelScale;
		var columnWidth;
		var columnNameWidth;
		for(i = 0; i < self.columns.name.length; i++) {
			bWidthExists = false;
			if (self.columns.width !== undefined && self.columns.width instanceof Array && self.columns.width.length !== 0)
				bWidthExists = true;
			pixelScale = d3.scale.linear().domain([ 0, 8 ]).range([ 0, 72 ]);
			columnWidth = bWidthExists ? self.columns.width[i] : (pixelScale(self.columns.name[i].length)) + "px";
			self.columnName = new sap.m.Column({
				width : columnWidth,
				header : new sap.m.Text({
					text : self.columns.name[i]
				})
			});
			columnsWithHeaders.push(self.columnName);
			self.columnName1 = new sap.m.Column({
				width : columnWidth
			});
			columnsWithoutHeaders.push(self.columnName1);
		}
		//Table with Headers
		var oTableWithHeaders = new sap.m.Table({
			headerText : self.title,
			showNoData : false,
			columns : columnsWithHeaders
		}).addStyleClass("tableWithHeaders");
		//Table without Headers (built to get scroll only on the data part)
		this.oTableWithoutHeaders = new sap.m.Table({
			columns : columnsWithoutHeaders,
			items : {
				path : "/tableData",
				template : new sap.m.ColumnListItem({
					cells : columnCells
				})
			}
		});
		oTableWithHeaders.setModel(self.oModel);
		this.oTableWithoutHeaders.setModel(self.oModel);
		this.oTableWithoutHeaders.attachUpdateFinished(this.drawSelection.bind(this.oTableWithoutHeaders));
		var handleConfirm = function(oEvent) {
			var param = oEvent.getParameters();
			self.oTableWithoutHeaders.setBusy(true);
			skipAction = 0;
			sortProperty = param.sortItem.getKey();
			sortOrderIsDescending = param.sortDescending;
			top = 100;
			skip = 0;
			var sorter = [];
			if (param.sortItem) {
				if (self.isAlternateRepresentation) {
					var oTableBinding = self.oTableWithoutHeaders.getBinding("items");
					sorter.push(new sap.ui.model.Sorter(sortProperty, sortOrderIsDescending));
					oTableBinding.sort(sorter);
					self.oTableWithoutHeaders.setBusy(false);
					return;
				}
				oApi.updatePath(function(oStep, bStepChanged) {
					if (oStep === oApi.getActiveStep()) {
						self.oModel.setData({
							tableData : self.aDataResponse
						});
						self.oTableWithoutHeaders.rerender();
						self.oTableWithoutHeaders.setBusy(false);
					}
				}.bind(this));
			}
		};
		//sort of table using ViewSettingsDialog
		this.viewSettingsDialog = new sap.m.ViewSettingsDialog({
			confirm : handleConfirm
		});
		for(i = 0; i < oTableWithHeaders.getColumns().length; i++) {
			var oItem = new sap.m.ViewSettingsItem({
				text : self.columns.name[i],
				key : self.columns.value[i]
			});
			this.viewSettingsDialog.addSortItem(oItem);
		}
		//Set default values of radio buttons in view settings dialog.If sortfield and sort order is coming from the configuration set those else
		//by default set the first value in sort field and sort order respectively
		if (sortProperty === undefined && sortOrderIsDescending === undefined) {
			if (this.getParameter().sort !== undefined) {
				for(i = 0; i < this.viewSettingsDialog.getSortItems().length; i++) {
					if (this.getParameter().sort.sortField === this.viewSettingsDialog.getSortItems()[i].getKey()) {
						this.viewSettingsDialog.setSelectedSortItem(this.viewSettingsDialog.getSortItems()[i]);
						this.viewSettingsDialog.setSortDescending(this.getParameter().sort.descending);
					}
				}
			} else {
				this.viewSettingsDialog.setSelectedSortItem(this.viewSettingsDialog.getSortItems()[0]);
				this.viewSettingsDialog.setSortDescending(false);
			}
		} else {
			for(i = 0; i < this.viewSettingsDialog.getSortItems().length; i++) {
				if (sortProperty === this.viewSettingsDialog.getSortItems()[i].getKey()) {
					this.viewSettingsDialog.setSelectedSortItem(this.viewSettingsDialog.getSortItems()[i]);
				}
			}
			this.viewSettingsDialog.setSortDescending(sortOrderIsDescending);
			var sorter = [];
			if (this.isAlternateRepresentation) {
				var oTableBinding = self.oTableWithoutHeaders.getBinding("items");
				sorter.push(new sap.ui.model.Sorter(sortProperty, sortOrderIsDescending));
				oTableBinding.sort(sorter);
			}
		}
		//aligning amount fields
		if (self.metadata !== undefined) {
			for(i = 0; i < self.columns.name.length; i++) {
				var oMetadata = self.metadata.getPropertyMetadata(self.columns.value[i]);
				if (oMetadata.unit) {
					var amountCol = self.oTableWithoutHeaders.getColumns()[i];
					amountCol.setHAlign(sap.ui.core.TextAlign.Right);
				}
			}
		}
		//Scroll container for table without headers(to get vertical scroll on data part used for pagination)
		var scrollContainer = new sap.m.ScrollContainer({
			content : self.oTableWithoutHeaders,
			height : "480px",
			horizontal : false,
			vertical : true
		}).addStyleClass("tableWithoutHeaders");
		var loadMoreLink = new sap.m.Link({
			text : "More"
		}).addStyleClass("loadMoreLink");
		//Scroll container to hold table with headers and scroll container containing table without headers)
		var scrollContainer1 = new sap.m.ScrollContainer({
			content : [ oTableWithHeaders, scrollContainer ],
			width : chartWidth,
			horizontal : true,
			vertical : false
		}).addStyleClass("scrollContainer");
		self.oModel.setSizeLimit(10000); // Set the size of data response to 10000 records
		//Event delegate to bind pagination action
		oTableWithHeaders.addEventDelegate({
			onAfterRendering : function() {
				//For IE-Full width for alternate representation 
				jQuery(".scrollContainer > div:first-child").css({
					"display" : "table",
					"width" : "inherit"
				});
				var scrollContainerHeight;
				if (self.offsetTop === undefined) {
					self.offsetTop = jQuery(".tableWithoutHeaders").offset().top;
				}
				if (jQuery(".tableWithoutHeaders").offset().top !== self.offsetTop) {
					//fullscreen
					scrollContainerHeight = ((window.innerHeight - jQuery('.tableWithoutHeaders').offset().top)) + "px";
				} else {
					scrollContainerHeight = ((window.innerHeight - jQuery('.tableWithoutHeaders').offset().top) - (jQuery(".applicationFooter").height()) - 20) + "px";
				}
				document.querySelector('.tableWithoutHeaders').style.cssText += "height : " + scrollContainerHeight;
				var dLoadMoreLink = sap.ui.getCore().getRenderManager().getHTML(loadMoreLink);
				var intervalPaginate;
				//TODO for height issue on orientation change
				sap.ui.Device.orientation.attachHandler(function() {
					scrollContainer1.rerender();
				});
				var oActiveStep = oApi.getActiveStep();
				//Check if alternate representation else don't paginate
				if (oActiveStep.getSelectedRepresentation().bIsAlternateView === undefined || oActiveStep.getSelectedRepresentation().bIsAlternateView === false) {
					if (sap.ui.Device.browser.mobile) {
						//Add More Button for Mobile Device for Pagination
						jQuery(jQuery(".tableWithoutHeaders > div:first-child")).append(dLoadMoreLink);
						loadMoreLink.attachPress(function() {
							if (!jQuery(".openToggleImage").length && (respData.length > 0)) {
								if (eventsFired === 0) {
									triggerPagination();
									skipAction = 0;
									eventsFired++;
									jQuery(".loadMoreLink").remove();
									jQuery(jQuery(".tableWithoutHeaders > div:first-child")).append(dLoadMoreLink);
								}
							} else {
								jQuery(".loadMoreLink").remove();
							}
						});
					} else {
						//Mouse scroll, Mouse Down and Mouse Up Events for Desktop				
						jQuery('.tableWithoutHeaders').on("scroll", function() {
							var self = jQuery(this);
							var scrollTop = self.prop("scrollTop");
							var scrollHeight = self.prop("scrollHeight");
							var offsetHeight = self.prop("offsetHeight");
							var contentHeight = scrollHeight - offsetHeight - 5;
							if ((contentHeight <= scrollTop) && !jQuery(".openToggleImage").length && (respData.length > 0)) {
								if (eventsFired === 0) {
									triggerPagination();
									skipAction = 0;
									eventsFired++;
								}
							}
						});
					}
				}
				var triggerPagination = function() {
					self.oTableWithoutHeaders.setBusy(true);
					sap.ui.getCore().applyChanges();
					var oData = self.oModel.getData();
					skip += obj.length;
					top = 10;
					triggerBool = true;
					oApi.updatePath(function(oStep, bStepChanged) {
						if (oStep === oApi.getActiveStep()) {
							self.oModel.setData(oData);
							self.oTableWithoutHeaders.rerender();
							self.oTableWithoutHeaders.setBusy(false);
							eventsFired = 0;
						}
					}.bind(this));
				};
			}
		});
		return new sap.ui.layout.VerticalLayout({
			content : [ scrollContainer1 ]
		});
	};
	/**
	 *@method getThumbnailContent 
	 *@description draws Thumbnail for the current chart and returns to the calling object
	 *@returns thumbnail object for column
	 */
	this.getThumbnailContent = function() {
		if (this.aDataResponse !== undefined && this.aDataResponse.length !== 0) {
			var image = new sap.ui.core.Icon({
				src : "sap-icon://table-chart",
				size : "70px"
			}).addStyleClass('thumbnailTableImage');
			return image;
		} else {
			var noDataText = new sap.m.Text({
				text : oApi.getTextNotHtmlEncoded("noDataText")
			}).addStyleClass('noDataText');
			return new sap.ui.layout.VerticalLayout({
				content : noDataText
			});
		}
	};
	/**
	 * @method serialize 
	 * @description Getter for Serialized data for a representation
	 * @returns selectionObject
	 */
	this.serialize = function() {
		return {
			oFilter : this.getFilter().serialize()
		};
	};
	/**
	 * @method deserialize
	 * @param selectionObject from the serialized data
	 * @description deserialize data and sets the selection on representation
	 */
	this.deserialize = function(oSerializable) {
		var filter = oApi.createFilter();
		this.setFilter(filter.deserialize(oSerializable.oFilter));
	};
	/**
	 * @method getFilterMethodType
	 * @description This method helps in determining which method has to be used for the filter retrieval from a representation.
	 * @returns {sap.apf.constants.filterMethodTypes} The filter method type the representation supports
	 */
	this.getFilterMethodType = function() {
		return sap.apf.core.constants.filterMethodTypes.filter; // returns the filter method type the representation supports
	};
	/**
	 * @method getSelectionCount
	 * @description This method helps in determining the selection count of a representation
	 * @returns the selection count of the current representation.
	 */
	this.getSelectionCount = function() {
		var sRequiredFilterProperty = self.getFilter().getInternalFilter().getProperties()[0], aFilterTerms = self.getFilter().getInternalFilter().getFilterTermsForProperty(sRequiredFilterProperty);
		return aFilterTerms.length;
	};
	/**
	 * @method getFilter
	 * @description gets the current filter from the representation.
	 */
	this.getFilter = function() {
		return this.filter;
	};
	/**
	 * @method setFilter
	 * @param {sap.apf.utils.Filter} oFilter
	 * @description sets the initial filter to the representation. The filter holds the values of the start filter of the path.
	 */
	this.setFilter = function(oFilter) {
		this.filter = oFilter;
	};
	/**
	 * @method adoptSelection
	 * @param {object} oSourceRepresentation Source representation implementing the representationInterface.
	 * @description Called on representation by binding when a representation type is set.
	 */
	this.adoptSelection = function(oSourceRepresentation) {
		if (oSourceRepresentation && oSourceRepresentation.getFilter) {
			this.setFilter(oSourceRepresentation.getFilter());
		}
	};
	/**
	 * @method removeAllSelection
	 * @description removes all Selection from Chart
	 */
	this.removeAllSelection = function() {
		this.setFilter(oApi.createFilter());
		oApi.selectionChanged();
		self.oTableWithoutHeaders.getItems().forEach(function(item) {
			item.removeStyleClass('sapMLIBSelected');
		});
	};
	/**
	 * @method getPrintContent
	 * @param oStepTitle title of the step
	 * @description gets the printable content of the representation
	 */
	this.getPrintContent = function(oStepTitle) {
		this.createDataset();
		var obj = this.aDataResponse;
		this.oModel.setData({
			tableData : obj
		});
		var i;
		var columns = [];
		for(i = 0; i < self.columns.name.length; i++) {
			self.columnName = new sap.m.Column({
				width : "75px",
				header : new sap.m.Label({
					text : self.columns.name[i]
				})
			});
			columns.push(self.columnName);
		}
		var columnCells = [];
		for(i = 0; i < self.columns.name.length; i++) {
			self.cellValues = new sap.m.Text().bindText(self.columns.value[i], function(index) {
				return function(columnValue) {
					if (self.metadata === undefined) {
						return columnValue;
					} else {
						var oMetadata = self.metadata.getPropertyMetadata(self.columns.value[index]);
						if (oMetadata.dataType.type === "Edm.DateTime") {
							if (columnValue === null) {
								return "-";
							}
							var dateFormat = new Date(parseInt(columnValue.slice(6, columnValue.length - 2), 10));
							dateFormat = dateFormat.toLocaleDateString();
							if (dateFormat === "Invalid Date") {
								return "-";
							}
							return dateFormat;
						}
						if (oMetadata.unit) {
							if (columnValue === null) {
								return "-";
							}
							var currencyMetadata = self.metadata.getPropertyMetadata(oMetadata.unit);
							if (currencyMetadata.semantics === "currency-code") {
								var precision = self.aDataResponse[0][oMetadata.scale];
								columnValue = parseFloat(columnValue, 10).toFixed(precision).toString();
								var store = columnValue.split(".");
								var amountValue = parseFloat(store[0]).toLocaleString();
								var sample = 0.1;
								sample = sample.toLocaleString();
								if (amountValue.split(sample.substring(1, 2)).length > 1) {
									amountValue = amountValue.split(sample.substring(1, 2))[0];
								}
								amountValue = amountValue.concat(sample.substring(1, 2), store[1]);
								return amountValue;
							}
						} else {
							return columnValue;
						}
					}
				};
			}(i), sap.ui.model.BindingMode.OneWay);
			columnCells.push(self.cellValues);
		}
		var oTable = new sap.m.Table({
			headerText : oStepTitle,
			headerDesign : sap.m.ListHeaderDesign.Standard,
			columns : columns,
			items : {
				path : "/tableData",
				template : new sap.m.ColumnListItem({
					cells : columnCells
				})
			}
		}).addStyleClass("printTable");
		//aligning amount fields
		if (self.metadata !== undefined) {
			for(i = 0; i < self.columns.name.length; i++) {
				var oMetadata = self.metadata.getPropertyMetadata(self.columns.value[i]);
				if (oMetadata.unit) {
					var amountCol = oTable.getColumns()[i];
					amountCol.setHAlign(sap.ui.core.TextAlign.Right);
				}
			}
		}
		oTable.setModel(self.oModel);
		oTable.attachUpdateFinished(this.drawSelection.bind(oTable));
		return new sap.ui.layout.VerticalLayout({
			content : [ oTable ]
		});
	};
};

}; // end of sap/apf/ui/representations/table.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.reuse.controller.facetFilter.controller') ) {
  jQuery.sap.declare('sap.apf.ui.reuse.controller.facetFilter.controller');
/*!
* SAP APF Analysis Path Framework
* 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
*/

/**
* @class facetFilter
* @memberOf sap.apf.ui.reuse.controller
* @name facetFilter
* @description controller for view.facetFilter
*/
sap.ui.controller("sap.apf.ui.reuse.controller.facetFilter", {
	/**
	 * @public
	 * @function
	 * @name sap.apf.ui.reuse.controller.facetFilter#onInit
	 * @description Called on initialization of the view.
	 * Instantiates all facet filter list related resources.
	 * Sets the initial binding.
	 * Populates value help and selected filters.
	 * */
	onInit : function() {
		var oSelf = this;
		this.oView = this.getView();
		this.oCoreApi = this.oView.oCoreApi;
		this.oUiApi = this.oView.oUiApi;
		this.oPathContextHandler = this.oView.oPathContextHandler;
		this.aFacetFilterListData = this.oView.aFacetFilterListData;
		this.aFacetFilterListControls = this.oView.aFacetFilterListControls;
		this.aFacetFilterListHandlers = this.aFacetFilterListData.map(function(oFacetFilterData) {
			return new sap.apf.ui.utils.FacetFilterListHandler(oSelf.oCoreApi, oSelf.oUiApi, oSelf.oPathContextHandler, oFacetFilterData);
		});
		this.aFacetFilterListDatasets = this.aFacetFilterListData.map(function() {
			return [];
		});
		this._setInitialBinding();
		this._populateValueHelpData();
		this._updateSelectedFilters();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.ui.reuse.controller.facetFilter#_setInitialBinding
	 * @description Binds the appropriate JSONModel to facet filter list controls.
	 * */
	_setInitialBinding : function() {
		var oSelf = this;
		this.aFacetFilterListControls.forEach(function(oFacetFilterListControl, index) {
			oFacetFilterListControl.bindItems("/", new sap.m.FacetFilterItem({
				key : '{key}',
				text : '{text}',
				selected : '{selected}'
			}));
			var oModel = new sap.ui.model.json.JSONModel(oSelf.aFacetFilterListDatasets[index]);
			oModel.setSizeLimit(1000);
			oFacetFilterListControl.setModel(oModel);
		});
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.ui.reuse.controller.facetFilter#_populateValueHelpData
	 * @description Fetches value help data for all facet filter list controls.
	 * */
	_populateValueHelpData : function() {
		var oSelf = this;
		this.aFacetFilterListHandlers.forEach(function(oFflHandler, index) {
			oFflHandler.fetchValueHelpData().then(oSelf._populateValueHelpDataFor(index));
		});
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.ui.reuse.controller.facetFilter#_updateSelectedFilters
	 * @description Updates selected filter data for all facet filter list controls.
	 * */
	_updateSelectedFilters : function() {
		var oSelf = this;
		this.aFacetFilterListHandlers.forEach(function(oFflHandler, index) {
			oFflHandler.fetchSelectedFilterData().then(oSelf._updateSelectedFilterFor(index));
		});
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.ui.reuse.controller.facetFilter#_populateValueHelpDataFor
	 * @param {integer} index of facet filter control.
	 * @description Returns a closure which will be invoked when value help promise is resolved.
	 * @returns {function}
	 * */
	_populateValueHelpDataFor : function(index) {
		var oFacetFilterListControl = this.aFacetFilterListControls[index];
		var oFacetFilterData = this.aFacetFilterListData[index];
		var aFacetFilterListDataSet = this.aFacetFilterListDatasets[index];
		var oFacetFilterListModel = oFacetFilterListControl.getModel();
		return function(aData) {
			aData.forEach(function(oData) {
				var bSelected = false;
				var nIndex = -1;
				aFacetFilterListDataSet.forEach(function(oDataRow, index) {
					if (oDataRow.key === oData.key) {
						nIndex = index;
						return;
					}
				});
				if (nIndex !== -1) {
					bSelected = aFacetFilterListDataSet[nIndex].selected;
					aFacetFilterListDataSet.splice(nIndex, 1);
				}
				aFacetFilterListDataSet.push({
					key : oData.key,
					text : oData.text,
					selected : bSelected
				});
			});
			oFacetFilterListModel.updateBindings();
		};
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.ui.reuse.controller.facetFilter#_updateSelectedFilterFor
	 * @param {integer} index of facet filter control.
	 * @description Returns a closure which will be invoked when selected filter promise is resolved.
	 * @returns {function}
	 * */
	_updateSelectedFilterFor : function(index) {
		var oFacetFilterListControl = this.aFacetFilterListControls[index];
		var oFacetFilterData = this.aFacetFilterListData[index];
		var aFacetFilterListDataSet = this.aFacetFilterListDatasets[index];
		var oFacetFilterListModel = oFacetFilterListControl.getModel();
		return function(aData) {
			aFacetFilterListDataSet.forEach(function(oDataRow) {
				oDataRow.selected = false;
			});
			aData.forEach(function(oData) {
				var aMatchingDataRows = aFacetFilterListDataSet.filter(function(oDataRow) {
					return oDataRow.key === oData.key;
				});
				aMatchingDataRows.forEach(function(oDataRow) {
					oDataRow.selected = true;
				});
				if (!aMatchingDataRows.length) {
					aFacetFilterListDataSet.push({
						key : oData.key,
						text : oData.text,
						selected : true
					});
				}
			});
			oFacetFilterListModel.updateBindings();
		};
	},
	/**
	 * @public
	 * @function
	 * @name sap.apf.ui.reuse.controller.facetFilter#onListClose
	 * @param {oEvent} List Close Event.
	 * @description Creates a sap.apf.core.Filter with selected values and update the context path handler.
	 * */
	onListClose : function(oEvent) {
		var oClosedListControl = oEvent.getSource();
		var nIndex = this.aFacetFilterListControls.indexOf(oClosedListControl);
		var sProperty = this.aFacetFilterListData[nIndex].property;
		var bIsAllSelected = oEvent.getParameter('allSelected');
		var aSelectedItems = bIsAllSelected ? oClosedListControl.getItems() : oEvent.getParameter('selectedItems');
		var aSelectedKeys = aSelectedItems.map(function(oItem) {
			return oItem.getKey();
		});
		var oFilter = this.oCoreApi.createFilter();
		var oOrTerm = oFilter.getTopAnd().addOr();
		aSelectedKeys.forEach(function(sValue) {
			oOrTerm.addExpression({
				name : sProperty,
				operator : "EQ",
				value : sValue
			});
		});
		this.oPathContextHandler.update(sProperty, oFilter);
		this.oUiApi.selectionChanged(true);
	},
	/**
	 * @public
	 * @function
	 * @name sap.apf.ui.reuse.controller.facetFilter#onResetPress
	 * @description Reset the initial filter for all the facet filter list controls and triggers contextChanged.
	 * */
	onResetPress : function() {
		var aFilterProperties = this.aFacetFilterListData.map(function (oFacetFilterData) {
			return oFacetFilterData.property;
		});
		this.oPathContextHandler.restoreInitialContext(aFilterProperties);
		this.onContextChanged();
		this.oUiApi.selectionChanged(true);
	},
	/**
	 * @public
	 * @function
	 * @name sap.apf.ui.reuse.controller.facetFilter#onContextChanged
	 * @description Invoked by facet filter handler when context is changed.
	 * Updates the facet filter list controls with new path context handler content.
	 * */
	onContextChanged : function() {
		/*this._populateValueHelpData(); UNCOMMENT TO TRIGGER VALUE HELP REQUESTS.*/
		this._updateSelectedFilters();
	}
});

}; // end of sap/apf/ui/reuse/controller/facetFilter.controller.js
if ( !jQuery.sap.isDeclared('sap.apf.core.utils.filter') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

/**
 * internally used filter object
 */
jQuery.sap.declare('sap.apf.core.utils.filter');


/**
 * @private
 * @class Expression on properties for the filter of an odata request. Filters
 *        represent an expression on properties for the filter of an odata
 *        request. Allowed constructor calls are:
 *        sap.apf.core.utils.Filter(oMsgHandler, property, op, value) or
 *        sap.apf.core.utils.Filter(oMsgHandler, new sap.apf.core.utils.FilterTerm(...)) or
 *        sap.apf.core.utils.Filter(oMsgHandler,new sap.apf.core.utils.Filter(...)).
 * @param {sap.apf.core.MessageHandler} oMsgHandler
 * @param {string|sap.apf.core.utils.Filter|sap.apf.core.utils.FilterTerm} arg1 - First argument is either a Filter or a FilterTerm or a property of a filter term
 * @param {string} arg2 - if param arg2 is supplied, then an operator is expected , a property for arg1 and a value for arg3. Example: 'Country' 'EQ' 'BRA'
 * @param {string} arg3 - value
 * @param {string} arg4 - high-value
 */
sap.apf.core.utils.Filter = function (oMsgHandler, arg1, arg2, arg3, arg4) {
    var cLogicalAndText = "%20and%20";
    var cLogicalOrText = "%20or%20";
    var that = this;
    this.type = "internalFilter"; //sap.utils.filter has type filter
    /**
     * @description either a Filter Term or Filter. This is the first
     *              part (term) of the filter.
     */
    var oLeftExpr;
    if (arg1 && arg1.type && (arg1.type === "filterTerm" || arg1.type === "internalFilter")) {
        oLeftExpr = arg1;
    } else if (arg1 !== undefined && arg2 !== undefined && arg3 !== undefined) {
        oLeftExpr = new sap.apf.core.utils.FilterTerm(oMsgHandler, arg1, arg2, arg3, arg4);
    } else if (arg1 === undefined && arg2 === undefined && arg3 === undefined) {
    } else {
        oMsgHandler.check(false, "wrong arguments in construction of  sap.apf.core.utils.Filter");
    }
    /**
     * @description this array holds the further parts of the filter
     *              expression
     */
    var aRestExpr = [];
    /**
     * @description is either AND or OR and defines, how the sub expressions are
     *              connected.
     */
    var levelOp;
    /**
     * @description Returns the properties of the sub filters
     * @returns {string[]} aProperties Array with property (names), that are used in the filter.
     */
    this.getProperties = function () {
        var i;
        var aProperty = [];
        var aProperty2 = [];
        var property = "";
        if (oLeftExpr === undefined) {
            return aProperty;
        } else if (oLeftExpr instanceof sap.apf.core.utils.FilterTerm) {
            property = oLeftExpr.getProperty();
            aProperty.push(property);
        } else if (oLeftExpr instanceof sap.apf.core.utils.Filter) {
            aProperty = oLeftExpr.getProperties();
        }
        for (i = 0; i < aRestExpr.length; i++) {
            if (aRestExpr[i] instanceof sap.apf.core.utils.FilterTerm) {
                aProperty.push(aRestExpr[i].getProperty());
            } else {
                aProperty2 = aRestExpr[i].getProperties();
                aProperty = aProperty.concat(aProperty2);
            }
        }
        return sap.apf.utils.eliminateDuplicatesInArray(oMsgHandler, aProperty);
    };
    /**
     * @description Copy constructor
     * @returns {sap.apf.core.utils.Filter} Filter New object as deep copy
     */
    this.copy = function () {
        var oFilter;
        var i = 0;
        if (oLeftExpr === undefined) {
            return new sap.apf.core.utils.Filter(oMsgHandler);
        } else {
            oFilter = new sap.apf.core.utils.Filter(oMsgHandler, oLeftExpr);
            if (levelOp === undefined) {
                return oFilter;
            }
            for (i = 0; i < aRestExpr.length; i++) {
                if (levelOp === sap.apf.core.constants.BooleFilterOperators.AND) {
                    oFilter.addAnd(aRestExpr[i].copy());
                } else {
                    oFilter.addOr(aRestExpr[i].copy());
                }
            }
            return oFilter;
        }
    };
    /**
     * @description Determines, whether the filter is restricted to a single value.
     * @returns {boolean}
     */
    this.isRestrictedToSingleValue = function () {
        if (oLeftExpr === undefined || aRestExpr.length > 0) {
            return false;
        }
        if (oLeftExpr instanceof sap.apf.core.utils.FilterTerm && oLeftExpr.getOp() === sap.apf.core.constants.FilterOperators.EQ) {
            return true;
        }
        return false;
    };
    /**
     * @description Returns the number of terms.
     * @returns {number} number of terms
     */
    this.getNumberOfTerms = function () {
        if (oLeftExpr === undefined) {
            return 0;
        } else {
            return 1 + aRestExpr.length;
        }
    };
    /**
     * @description Test on equality of two filters. Two filters are identical, if they have the same filter terms connected with the same operators.
     * Commutative and associative law are considered.
     * @param {sap.apf.core.utils.Filter} oFilter to compare with
     * @returns {boolean} true  if filters are identical.
     */
    this.isEqual = function (oFilter) {
        if (this === oFilter) {
            return true;
        }
        if (oFilter === undefined) {
            return false; // never equal to a undefined
        }
        return (this.getHash() === oFilter.getHash());
    };
    /**
     * @description Compute hash for the filter object. Needed for compare with
     *              other filter
     * @param {number} iLevelOfExpression level in the expression structure.
     * @returns {number} hashvalue Hash as number.
     */
    this.getHash = function (iLevelOfExpression) {
        var nCurrentLevel = iLevelOfExpression || 1;
        var nNextLevel = 0;
        if (aRestExpr.length === 0) {
            nNextLevel = nCurrentLevel;
        } else {
            nNextLevel = nCurrentLevel + 1;
        }
        if (oLeftExpr === undefined) {
            return 0;
        }
        var iHash = oLeftExpr.getHash(nNextLevel);
        var i;
        if (levelOp === undefined) {
            return iHash;
        } else if (levelOp === sap.apf.core.constants.BooleFilterOperators.AND) {
            iHash = iHash + Math.pow(2, nCurrentLevel); // hash for and on this level = 2,4,8
        } else if (levelOp === sap.apf.core.constants.BooleFilterOperators.OR) {
            iHash = iHash + Math.pow(3, nCurrentLevel); // = hash + 3,9,27,,...
        }
        for (i = 0; i < aRestExpr.length; i++) {
            iHash = iHash + aRestExpr[i].getHash(nNextLevel);
        }
        return iHash;
    };
    /**
     * @description Filters the array aData according to the filter condition. It is expected, that aData is array in
     * json format.
     * @param {object[]} aData Array in json format (value : prop).
     * @returns {object[]} aFilteredData Array in json format with filtered values.
     */
    this.filterArray = function (aData) {
        var aFilteredData = [];
        var i;
        var j = 0;
        var len = aData.length;
        if (len === 0) {
            return aFilteredData;
        }
        var bContained = false;
        // determine which properties have to be filtered
        var aFilterProperties = this.getProperties();
        var aDataPropertiesToTest = [];
        for (var oProp in aData[0]) {
            if (jQuery.inArray(oProp, aFilterProperties) > -1) {
                aDataPropertiesToTest.push(oProp);
            }
        }
        // nothing to be filtered
        if (aDataPropertiesToTest.length === 0) {
            return aData;
        }
        // filter against the relevant properties
        for (i = 0; i < len; i++) {
            bContained = true;
            for (j in aDataPropertiesToTest) {
                oProp = aDataPropertiesToTest[j];
                if (this.contains(oProp, aData[i][oProp]) === false) {
                    bContained = false;
                    break;
                }
            }
            if (bContained) {
                aFilteredData.push(aData[i]);
            }
        }
        return aFilteredData;
    };
    /**
     * @description Get all terms for a filter per property.
     * @param {string} property
     *            This is the property, for which the terms are requested
     * @returns {sap.apf.core.utils.FilterTerm[]} filterTerms An array with filter terms.
     */
    this.getFilterTermsForProperty = function (property) {
        var aTerm = [];
        var i;
        if (oLeftExpr === undefined) {
            return aTerm;
        }
        if (oLeftExpr instanceof sap.apf.core.utils.Filter) {
            aTerm = oLeftExpr.getFilterTermsForProperty(property);
        } else if (property === oLeftExpr.getProperty()) {
            aTerm.push(oLeftExpr);
        }
        for (i = 0; i < aRestExpr.length; i++) {
            if (aRestExpr[i] instanceof sap.apf.core.utils.FilterTerm) {
                if (property === aRestExpr[i].getProperty()) {
                    aTerm.push(aRestExpr[i]);
                }
            } else {
                aTerm = aTerm.concat(aRestExpr[i].getFilterTermsForProperty(property));
            }
        }
        return aTerm;
    };
    this.getFilterTerms = function () {
        var aTerm = [];
        var i;
        if (oLeftExpr === undefined) {
            return aTerm;
        }
        if (oLeftExpr instanceof sap.apf.core.utils.Filter) {
            aTerm = oLeftExpr.getFilterTerms();
        } else {
            aTerm.push(oLeftExpr);
        }
        for (i = 0; i < aRestExpr.length; i++) {
            if (aRestExpr[i] instanceof sap.apf.core.utils.FilterTerm) {
                aTerm.push(aRestExpr[i]);
            } else {
                aTerm = aTerm.concat(aRestExpr[i].getFilterTerms());
            }
        }
        return aTerm;
    };
    /**
     * @description This is a test, whether value is contained in the filter
     * @param {string} property
     *            This is either a single property or an array of properties.
     * @param {boolean|string|number} value
     *            This is either a value, if property is a single property or a
     *            json object with pairs property : value, if property is an
     *            array with properties.
     * @returns {boolean}
     */
    this.contains = function (property, value) {
        var bResult = false;
        var i = 0;
        if (oLeftExpr === undefined) {
            return true;
        }
        if (levelOp === undefined) {
            return oLeftExpr.contains(property, value);
        } else if (levelOp === sap.apf.core.constants.BooleFilterOperators.AND) {
            bResult = oLeftExpr.contains(property, value);
            if (bResult === false) {
                return false;
            }
            for (i = 0; i < aRestExpr.length; i++) {
                bResult = aRestExpr[i].contains(property, value);
                if (bResult === false) {
                    return false;
                }
            }
            return true;
        } else if (levelOp === sap.apf.core.constants.BooleFilterOperators.OR) {
            bResult = oLeftExpr.contains(property, value);
            if (bResult === true) {
                return true;
            }
            for (i = 0; i < aRestExpr.length; i++) {
                bResult = aRestExpr[i].contains(property, value);
                if (bResult === true) {
                    return true;
                }
            }
            return false;
        }
    };
    /**
     * @description Eliminates terms of the expression, that are defined for the
     *              property
     * @param {string} property
     *           This  is the property, for which the terms are. If property is an
     *            array, then the terms are removed for all properties.
     * @returns {sap.apf.core.utils.Filter} oFilterExpression This is the filter without
     *          filter terms on property
     */
    this.removeTermsByProperty = function (property) {
        var i, oResultFilter, oReducedRestFilter;
        if (oLeftExpr === undefined) {
            return this.copy();
        }
        oResultFilter = oLeftExpr.removeTermsByProperty(property);
        if (oResultFilter instanceof sap.apf.core.utils.FilterTerm) {
            oResultFilter = new sap.apf.core.utils.Filter(oMsgHandler, oResultFilter.getProperty(), oResultFilter.getOp(), oResultFilter.getValue(), oResultFilter.getHighValue());
        }
        if (levelOp === undefined) {
            return oResultFilter;
        }
        for (i = 0; i < aRestExpr.length; i++) {
            oReducedRestFilter = aRestExpr[i].removeTermsByProperty(property);
            if (oResultFilter === undefined) {
                if (oReducedRestFilter instanceof sap.apf.core.utils.FilterTerm) {
                    oResultFilter = new sap.apf.core.utils.Filter(oMsgHandler, oReducedRestFilter);
                } else {
                    oResultFilter = oReducedRestFilter;
                }
            } else if (oReducedRestFilter !== undefined) {
                if (levelOp === sap.apf.core.constants.BooleFilterOperators.AND) {
                    oResultFilter.addAnd(oReducedRestFilter);
                } else {
                    oResultFilter.addOr(oReducedRestFilter);
                }
            }
        }
        if (oResultFilter) {
            return new sap.apf.core.utils.Filter(oMsgHandler, oResultFilter);
        }
    };
    /**
     * @description Eliminates terms of the expression, that are defined for the
     *              property
     * @param {string} property
     *            This is the property, for which the terms are. If property is an
     *            array, then the terms are removed for all properties.
     * @param {string} option
     * @param {string|boolean|value} value
     * @returns {sap.apf.core.utils.Filter} oFilterExpression This is the filter expression without
     *          filter terms on property.
     */
    this.removeTerms = function (property, option, value) {
        var i;
        if (oLeftExpr === undefined) {
            return this.copy();
        }
        var oFilter = oLeftExpr.removeTerms(property, option, value);
        var oFilter2;
        if (oFilter instanceof sap.apf.core.utils.FilterTerm) {
            oFilter = new sap.apf.core.utils.Filter(oMsgHandler, oFilter.getProperty(), oFilter.getOp(), oFilter.getValue(), oFilter.getHighValue());
        }
        if (levelOp === undefined) {
            return oFilter;
        }
        for (i = 0; i < aRestExpr.length; i++) {
            oFilter2 = aRestExpr[i].removeTerms(property, option, value);
            if (oFilter === undefined) {
                if (oFilter2 instanceof sap.apf.core.utils.FilterTerm) {
                    oFilter = new sap.apf.core.utils.Filter(oMsgHandler, oFilter2);
                } else {
                    oFilter = oFilter2;
                }
            } else if (oFilter2 !== undefined) {
                if (levelOp === sap.apf.core.constants.BooleFilterOperators.AND) {
                    oFilter.addAnd(oFilter2);
                } else {
                    oFilter.addOr(oFilter2);
                }
            }
        }
        return oFilter;
    };
    /**
     * @description add a new filter connected with OR
     * @param {string|sap.apf.core.utils.Filter|sap.apf.core.utils.FilterTerm} arg1 -
     *            Filter or filter term or property.
     * @param {string} [arg2] operator, This makes only sense, if first argument is a property
     * @param {boolean|string|number} [arg3] Value, if first argument is property and second argument is operator
     * @returns {sap.apf.core.utils.Filter} this For method chaining.
     */
    this.addOr = function (arg1, arg2, arg3) {
        var oFilter;
        if (arg1 instanceof sap.apf.core.utils.Filter || arg1 instanceof sap.apf.core.utils.FilterTerm) {
            oFilter = arg1;
        } else if (arg1 !== undefined && arg2 !== undefined && arg3 !== undefined) {
            oFilter = new sap.apf.core.utils.FilterTerm(oMsgHandler, arg1, arg2, arg3);
        } else {
            oMsgHandler.check(false, "sap.apf.core.utils.Filter.addOr: wrong arguments in construction of  Filter");

        }
        if (oLeftExpr === undefined) {
            oLeftExpr = oFilter;
            return that;
        }
        if (levelOp === undefined) {
            levelOp = sap.apf.core.constants.BooleFilterOperators.OR;
        }
        aRestExpr.push(oFilter);
        oMsgHandler.check(levelOp === sap.apf.core.constants.BooleFilterOperators.OR, "sap.apf.core.utils.Filter - addOr wrong operation");
        return that;
    };
    /**
     * @description Add a new filter expression connected with AND
     * @param {string|sap.apf.core.utils.Filter|sap.apf.core.utils.FilterTerm} arg1 - Filter or filter term or property.
     * @param {string} [arg2] operator, This makes only sense, if first argument is a property
     * @param {boolean|string|number} [arg3] Value, if first argument is property and second argument is operator
     * @returns {sap.apf.core.utils.Filter} this For method chaining.
     */
    this.addAnd = function (arg1, arg2, arg3) {
        var oFilter;
        if (arg1 instanceof sap.apf.core.utils.Filter || arg1 instanceof sap.apf.core.utils.FilterTerm) {
            oFilter = arg1;
        } else if (arg1 !== undefined && arg2 !== undefined && arg3 !== undefined) {
            oFilter = new sap.apf.core.utils.FilterTerm(oMsgHandler, arg1, arg2, arg3);
        } else {
            oMsgHandler.check(false, "sap.apf.core.utils.Filter.addAnd: wrong arguments in construction of  Filter");
        }
        if (oLeftExpr === undefined) {
            oLeftExpr = oFilter;
            return that;
        }
        if (levelOp === undefined) {
            levelOp = sap.apf.core.constants.BooleFilterOperators.AND;
        }
        oMsgHandler.check(levelOp === sap.apf.core.constants.BooleFilterOperators.AND, "sap.apf.core.utils.Filter - addAnd wrong operation");
        aRestExpr.push(oFilter);
        return that;
    };
    /**
     * @description Transforms the filter into parameters for the URL in
     *              odata format suitable for xs engine
     * @param conf configuration object.
     * @param conf.asFilterArray then all properties are returned in a single line per property
     * @param conf.formatValue callback function for correct rendering of the value. The callback function is called with
     * property and value.
     * @returns {string|string[]} string or array - dependence on conf
     *
     */
    this.toUrlParam = function (conf) {
        var bAsArray = false;
        var aParam = [];
        var sExpr = "";
        if (conf !== undefined && conf.asFilterArray === true) {
            bAsArray = true;
        }
        if (oLeftExpr === undefined) {
            if (bAsArray === true) {
                return [];
            } else {
                return "";
            }
        }
        if (bAsArray === true) {
            aParam = oLeftExpr.toUrlParam(conf);
        } else {
            sExpr = oLeftExpr.toUrlParam(conf);
        }
        var i = 0;
        var len = aRestExpr.length;
        var sConnector = "";
        if (len === 0) {
            if (bAsArray === true) {
                return aParam;
            } else {
                return sExpr;
            }
        }
        if (levelOp === sap.apf.core.constants.BooleFilterOperators.AND) {
            sConnector = cLogicalAndText;
        } else {
            sConnector = cLogicalOrText;
        }
        var sRest = "";
        if (bAsArray === true) {
            for (i = 0; i < len; i++) {
                aParam = aParam.concat(aRestExpr[i].toUrlParam(conf));
            }
            return aParam;
        } else {
            for (i = 0; i < len; i++) {
                sRest = aRestExpr[i].toUrlParam(conf);
                if (sExpr === "") {
                    sExpr = sRest;
                } else if (sRest !== "") {
                    sExpr = sExpr + sConnector + sRest;
                }
            }
            return '(' + sExpr + ')';
        }
    };
    /**
     * @description Overwrites properties and adds new properties if they are not already existing
     *  with new properties or/and properties, which overwrite the current ones.
     * @param {sap.apf.core.utils.Filter} oFilter Filter, that holds the properties for the overwriting.
     * @returns {sap.apf.core.utils.Filter} merged filter object
     */
    this.overwriteWith = function (oFilter) {
        var aPropertyNames = oFilter.getProperties();
        var oResultFilter;
        if (aPropertyNames.length !== 0) {
            oResultFilter = this.removeTermsByProperty(aPropertyNames);
            if (oResultFilter === undefined) {
                return oFilter.copy();
            }
            oResultFilter.addAnd(oFilter);
            return oResultFilter;
        } else {
            return this.copy();
        }
    };

    /**
     * @description renames properties in a filter
     * @param {[mapping]} aMapping the mapping directive has the form
     * { source : 'sourceProp', target : 'targetProp' }
     * @returns undefined
     */
    this.mapProperties = function (aMapping) {

        var i = 0;
        if (oLeftExpr === undefined) {
            return undefined;
        } else {
            oLeftExpr.mapProperties(aMapping);
            if (levelOp === undefined) {
                return;
            }
            for (i = 0; i < aRestExpr.length; i++) {
                aRestExpr[i].mapProperties(aMapping);
            }
        }

    };

    /**
     * @description removes all properties from the filter, that have not been requested
     * @param {} requested properties: Can be a single string for a single property, a list of parameters for single properties or an array of property strings
     * @returns new filter object which has only the requested properties
     */
    this.reduceToProperty = function (/* sProperty | sProperty1, sProperty2, ... | aProperty */) {

        var aProperty = [];
        var oProperty;

        //Handle different call types
        switch (arguments.length) {
            case 1:
                oProperty = arguments[0];
                if (oProperty instanceof Array) {
                    aProperty = oProperty;
                }                              //Call type III
                else {
                    aProperty.push(oProperty);
                }                          //Call type I
                break;
            default:
                aProperty = Array.prototype.slice.call(arguments, 0);  //Call type II
        }

        var aFilterPropertiesToBeRemoved = SetAminusSetB(this.getProperties(), aProperty);
        //in case all terms are removed method 'removeTermsByProperty()' returns 'undefined', so we will need the OR part:
        return this.copy().removeTermsByProperty(aFilterPropertiesToBeRemoved) || new sap.apf.core.utils.Filter(oMsgHandler);

        function SetAminusSetB(aSetA, aSetB) {
            var i;
            var result = [];
            var hashB = {};
            var lengthA = aSetA ? aSetA.length : 0;
            var lengthB = aSetB ? aSetB.length : 0;
            for (i = 0; i < lengthB; i++) {
                hashB[aSetB[i]] = undefined;
            }
            for (i = 0; i < lengthA; i++) {
                if (!(aSetA[i] in hashB)) {
                    result.push(aSetA[i]);
                }
            }
            return result;
        }
    }
};
/**
 * @private
 * @description Static function to create a filter object from array with
 *              objects (in json notation) with given properties. Example:
 *              aProperties = [country, city], data = [ { country: 'a', city:
 *              'a1' }, { country: 'b', city: 'b1' }]. This gives: (country =
 *              'a' and city = 'a1') or (country = 'b' and city = 'b1')
 * @param {sap.apf.core.MessageHandler} oMsgHandler
 * @param {string[]} aProperties
 *            Array with properties
 * @param {object[]} aData
 *            Array with data in json format fieldname : value.
 * @param {number[]} aIndices indices that indicate, which data line is selected
 * @static
 */
sap.apf.core.utils.Filter.createFromArray = function (oMsgHandler, aProperties, aData, aIndices) {
    oMsgHandler.check(aProperties instanceof Array && aProperties.length > 0, "sap.apf.core.utils.Filter.createFromArray incorrect argument aProperties");
    oMsgHandler.check(aData instanceof Array, "sap.apf.core.utils.Filter.createFromArray incorrect argument aData");
    if (aIndices.length > 0) {
        var fLen = aProperties.length;
        var i;
        var nLine;
        var j;
        var oFilterData;
        var oFilterLine;
        var oFilter;
        for (i in aIndices) {
            oFilterLine = undefined;
            nLine = aIndices[i];
            if (!aData[nLine]) {
                continue;
            }
            for (j = 0; j < fLen; j++) {
                oFilter = new sap.apf.core.utils.Filter(oMsgHandler, aProperties[j], sap.apf.core.constants.FilterOperators.EQ, aData[nLine][aProperties[j]]);
                if (oFilterLine === undefined) {
                    oFilterLine = new sap.apf.core.utils.Filter(oMsgHandler, oFilter);
                } else {
                    oFilterLine.addAnd(oFilter);
                }
            }
            if (oFilterData === undefined) {
                oFilterData = new sap.apf.core.utils.Filter(oMsgHandler, oFilterLine);
            } else {
                oFilterData.addOr(oFilterLine);
            }
        }
        return oFilterData;
    } else {
        // return an empty filter in case of empty selection
        return new sap.apf.core.utils.Filter(oMsgHandler);
    }
};
/**
 * @private
 * @description Static function to create a filter object that shall express a contradiction
 *   and lead to an empty data response.
 * @param {sap.apf.core.MessageHandler} oMsgHandler
 * @param {string[]} aProperties  property names for the filter.
 * @returns {sap.apf.core.utils.Filter}
 * @static
 */
sap.apf.core.utils.Filter.createEmptyFilter = function (oMsgHandler, aProperties) {
    oMsgHandler.check(jQuery.isArray(aProperties) && aProperties.length > 0, "sap.apf.core.utils.Filter.createEmptyFilter - array with property names expected");
    return new sap.apf.core.utils.Filter(oMsgHandler, aProperties[0], sap.apf.core.constants.FilterOperators.EQ, '').addAnd(aProperties[0], sap.apf.core.constants.FilterOperators.NE, '');
};

}; // end of sap/apf/core/utils/filter.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.instance') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.apf.ui.instance");
//FIXME: Lazy load print only when required



//FIXME: Load vizhelper within each representation, where it is used.
//jQuery.sap.require('sap.apf.ui.representations.utils.vizHelper');
//FIXME: Lazy load representations when required








/**
 *@class Ui Component Instance
 *@name sap.apf.ui.Instance
 *@description Creation of new Ui Component Instance
 *@param {object} oInject - Core Instance
 */
sap.apf.ui.Instance = function(oInject) {
	oInject.uiApi = this;
	var oCoreApi = oInject.oCoreApi;
	var oComponent = oInject.oComponent;
	var oSBHandler = oInject.oSBHandler;
	var stepContainer;
	var analysisPath;
	var messageHandler;
	var oSBEvaluation;
	var apfLocation = oCoreApi.getUriGenerator().getApfLocation();
	this.oEventCallbacks = {};
	//sap.ui.getCore().loadLibrary('sap.viz');
	jQuery.sap.includeStyleSheet(apfLocation + "resources/css/apfUi.css", "apfCss");
	jQuery.sap.includeStyleSheet(apfLocation + "resources/css/apfPrint.css", "printCss");
	jQuery("#printCss").attr("media", "print"); // @comment : Doesn't Support adding attribute
	/**
	 *@description Getter for Analysis Path layout
	 *@see sap.apf.ui.reuse.view.analysisPath
	 *@returns {analysisPath}
	 */
	this.getAnalysisPath = function() {
		if (analysisPath === undefined) {
			analysisPath = sap.ui.view({
				viewName : "sap.apf.ui.reuse.view.analysisPath",
				type : sap.ui.core.mvc.ViewType.JS,
				viewData : oInject
			});
		}
		return analysisPath;
	};
	/**
	 *@description Getter for Notification Bar
	 *@see sap.apf.ui.reuse.view.messageHandler
	 *@returns {oNotificationView }
	 */
	this.getNotificationBar = function() {
		if (messageHandler === undefined) {
			messageHandler = sap.ui.view({
				viewName : "sap.apf.ui.reuse.view.messageHandler",
				type : sap.ui.core.mvc.ViewType.JS,
				viewData : oInject
			});
		}
		return messageHandler;
	};
	/**
	 *@description Creates a step container to hold representation
	 *@see sap.apf.ui.reuse.view.stepContainer
	 *@returns {stepContainer}
	 */
	this.getStepContainer = function() {
		if (stepContainer === undefined) {
			stepContainer = sap.ui.view({
				viewName : "sap.apf.ui.reuse.view.stepContainer",
				type : sap.ui.core.mvc.ViewType.JS,
				viewData : oInject
			});
		}
		return stepContainer;
	};
	/**
	 *@memberOf sap.apf.Api#addMasterFooterContent
	 *@description Calls the updatePath with proper callback for UI. 
	 * 				It also refreshes the steps either from the active step or 
	 * 				all the steps depending on the boolean value passed.
	 *@param {boolean} 
	 */
	this.selectionChanged = function(bRefreshAllSteps) {
		if (bRefreshAllSteps) {
			this.getAnalysisPath().getController().refresh(0);
		} else {
			var nActiveStepIndex = oCoreApi.getSteps().indexOf(oCoreApi.getActiveStep());
			this.getAnalysisPath().getController().refresh(nActiveStepIndex + 1);
		}
		oCoreApi.updatePath(this.getAnalysisPath().getController().callBackForUpdatePath.bind(this.getAnalysisPath().getController()));
	};
	var applicationLayout;
	var oSBHelper;
	/**
	 *@class view
	 *@name view
	 *@memberOf sap.apf.ui
	 *@description holds views for ui
	 */
	/**
	 *@memberOf sap.apf.ui
	 *@description returns app
	 *@return Application
	 */
	var application = new sap.m.App().addStyleClass("sapApf");
	this.createApplicationLayout = function() {
		application.addPage(this.getLayoutView());
		return application;
	};
	/**
	 *@memberOf sap.apf.ui
	 *@description Creates a main application layout with the header and main
	 *              view
	 *@return layout view
	 */
	this.getLayoutView = function() {
		if (applicationLayout === undefined) {
			applicationLayout = sap.ui.view({
				viewName : "sap.apf.ui.reuse.view.layout",
				type : sap.ui.core.mvc.ViewType.XML,
				viewData : oInject
			});
		}
		return applicationLayout;
	};
	/**
	 *@memberOf sap.apf.ui
	 *@description adds content to detail footer
	 *@param oControl
	 *            {object} Any valid UI5 control
	 */
	this.addDetailFooterContent = function(oControl) {
		this.getLayoutView().getController().addDetailFooterContentLeft(oControl);
	};
	/**
	 *@memberOf sap.apf.ui
	 *@description adds content to master footer
	 *@param oControl
	 *            {object} Any valid UI5 control
	 */
	this.addMasterFooterContentRight = function(oControl) {
		this.getLayoutView().getController().addMasterFooterContentRight(oControl);
	};
	/**
	 *@memberOf sap.apf.ui
	 *@description registers callback for event callback.
	 *@param fn callback
	 */
	this.setEventCallback = function(sEventType, fnCallback) {
		this.oEventCallbacks[sEventType] = fnCallback;
	};
	/**
	 *@memberOf sap.apf.ui
	 *@returns the registered callback for event callback.
	 */
	this.getEventCallback = function(sEventType) {
		return this.oEventCallbacks[sEventType];
	};
	
	var oFacetFilterHandler;
	/**
	 * @public
	 * @function
	 * @name sap.apf.ui#initializeContextHandling
	 * @memberOf sap.apf.ui
	 * @description initializes the context handling by instantiating an initializing the facet filter handler.
	 */
	this.initializeContextHandling = function () {
		if (oSBHandler.getEvaluationId()) {
			var dependency = {
					oCoreApi: oCoreApi,
					oPathContextHandler: oInject.oPathContextHandler,
					oSBHandler: oSBHandler,
					oUiApi: this
			};
			oFacetFilterHandler = new sap.apf.ui.utils.FacetFilterHandler(dependency);
			oFacetFilterHandler.initialize();
		}
	};
	/**
	 * @private
	 * @experimental Refactoring trigerred by the Mozilla bug
	 * @name sap.apf.ui#drawFacetFilter
	 * @member of sap.apf.ui
	 * @description draws facet filter on layout subHeader.
	 */	
	this.drawFacetFilter = function () {
		if (oFacetFilterHandler) {
			oFacetFilterHandler.drawFacetFilter();
		}
	};
	
	/**
	 * @public
	 * @function
	 * @name sap.apf.ui#initializeContextHandling
	 * @param {boolean} bResetPath - True when new path is triggered.
	 * @memberOf sap.apf.ui
	 * @description Event to be called when the path context is changed/updated.
	 * Notifies facetfilterhandler and application of context change.
	 */
	this.contextChanged = function (bResetPath) {
		if (oFacetFilterHandler) {
			oFacetFilterHandler.contextChanged();
		}
		var fnCallback = this.getEventCallback(sap.apf.core.constants.eventTypes.contextChanged);
		if (typeof fnCallback === "function") {
			var oSerializedFilter;
			if (!bResetPath) {
				oSerializedFilter = oCoreApi.getContext().serialize();
			}
			fnCallback(oSerializedFilter);
		}
	};
};
}; // end of sap/apf/ui/instance.js
if ( !jQuery.sap.isDeclared('sap.apf.utils.filter') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare('sap.apf.utils.filter');




/**
 * @public
 * @class Filter object
 * @description It is designed to be used for supplying context information for
 *              the application. In addition, it can be used for exchanging
 *              filter values between the path and the representation of the
 *              initial step. This function object supports the top down
 *              construction of filter expressions.
 * @name sap.apf.utils.Filter
 * @returns {sap.apf.utils.Filter}
 */
sap.apf.utils.Filter = function (oMessageHandler) {
    // Private vars
    var oTopAnd;
    var that = this;
    var initialize = function () {
        oTopAnd = new sap.apf.utils.FilterAnd(oMessageHandler, sap.apf.utils.Filter.topAndId);
    };
    // Public functions
    /**
     * @public
     * @function
     * @name sap.apf.utils.Filter#getById
     * @description Returns filter object or expression for a given ID, if exists.
     * @param {string} sId - ID of the object to be returned.
     * @returns {(sap.apf.utils.FilterAnd | sap.apf.utils.FilterOr | sap.apf.utils.FilterExpression | undefined)}
     */
    this.getById = function (sId) {
        if (oTopAnd) {
            if (sId === sap.apf.utils.Filter.topAndId) {
                return oTopAnd;
            } else {
                return oTopAnd.getById(sId);
            }
        } else {
            return undefined;
        }
    };
    /**
     * @public
     * @description Contains 'filter'
     * @returns {string}
     */
    this.type = "filter";
    /**
     * @public
     * @function
     * @name sap.apf.utils.Filter#getExpressions
     * @description Returns the logical operations and the boolean expressions of a Filter
     *              object as nested arrays for the logical operations and single level objects
     *              for the boolean expressions.
     *              Depending on the nesting level of the arrays the logical operators
     *              for the terms in the arrays alternates between AND and OR.
     *              The array on the highest level has the logical operator AND.
     *              It corresponds to the TopAnd filter term.
     *              Terms in general can be composed of the logical operation AND (see the FilterAnd object)
     *              or OR (see the FilterOr object) or be a boolean expression (see the FilterExpression object).
     *              AND and OR terms are returned as arrays; boolean expressions are returned as objects.
     * @returns {object[]} Array of AND terms, OR terms and expressions.
     */
    this.getExpressions = function () {
        if (oTopAnd) {
            return oTopAnd.getExpressions();
        } else {
            return [];
        }
    };
    /**
     * @private
     * @function
     * @name sap.apf.utils.Filter#getInternalFilter
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @returns {sap.apf.core.utils.Filter}
     */
    this.getInternalFilter = function () {
        return oTopAnd.getInternalFilter();
    };
    /**
     * @public
     * @function
     * @name sap.apf.utils.Filter#getTopAnd
     * @description Returns the top 'AND' object of the filter.
     * @returns {sap.apf.utils.FilterAnd}
     */
    this.getTopAnd = function () {
        return oTopAnd;
    };

    /**
     * @public
     * @function
     * @name sap.apf.utils.Filter#updateExpression
     * @description Updates an expression.
     * @param {string}
     *            sId ID of expression to be updated
     * @param {object}
     *            oExpression Expression object containing the updated
     *            properties
     * @param oExpression.id
     *            Updated expression ID
     * @param oExpression.name
     *            Updated expression name
     * @param oExpression.operator
     *            Updated expression operator of type
     *            {@link sap.apf.utils.Filter#getOperators}
     * @param oExpression.value
     *            Updated expression low value
     * @param oExpression.high
     *            Updated expression high value
     * @returns undefined
     */
    this.updateExpression = function (sId, oExpression) {
        oMessageHandler.check(sId === oExpression.id,
            "sId differs from oExpression.id");
        var oExpressionObject = this.getById(sId);
        oExpressionObject.update(oExpression);
    };
    /**
     * @public
     * @function
     * @name sap.apf.utils.Filter#updateValue
     * @description Updates a value of an expression object.
     * @param {string}
     *            sId ID of the expression object to be updated
     * @param {string}
     *            value The new low value for the expression (optional)
     * @param {string}
     *            high The new high value for the expression (optional)
     * @returns undefined
     */
    this.updateValue = function (sId, value, high) {
        oMessageHandler.check(sId !== undefined,
            "Filter updateValue: parameter id required");
        oMessageHandler.check(value !== undefined, "Filter updateValue: parameter value is required");
        var oExpressionObject = this.getById(sId);
        oMessageHandler.check(oExpressionObject !== undefined,
            "Filter updateValue: id for expression not valid");
        oExpressionObject.updateValue(value, high);
    };
    /**
     * @private
     * @function
     * @name sap.apf.utils.Filter#serialize
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @returns {object}
     */
    this.serialize = function () {
        function getSerializableFilterObject(aCompoundExpressions, oTerm) {
            var oSerializableObject = {
                id: oTerm.getId(),
                type: oTerm.type,
                expressions: [],
                terms: []
            };
            for (var i in aCompoundExpressions) {
                if (aCompoundExpressions[i] instanceof Array) {
                    if (oTerm.type === "filterAnd") {
                        oSerializableObject.terms
                            .push(getSerializableFilterObject(
                                aCompoundExpressions[i], oTerm
                                    .getAndTerms()[i]));
                    } else if (oTerm.type === "filterOr") {
                        oSerializableObject.terms
                            .push(getSerializableFilterObject(
                                aCompoundExpressions[i], oTerm
                                    .getOrTerms()[i]));
                    }
                } else {
                    oSerializableObject.expressions
                        .push(aCompoundExpressions[i]);
                }
            }
            return oSerializableObject;
        }

        return getSerializableFilterObject(this.getTopAnd()
            .getExpression(), this.getTopAnd());
    };
    /**
     * @private
     * @function
     * @name sap.apf.utils.Filter#deserialize
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @returns {object}
     */
    this.deserialize = function (oSerializableFilter) {
        oTopAnd = undefined;
        initialize();
        function getDeserializedFilter(oSerializableFilter, oTerm) {
            if (oSerializableFilter.type === "filterAnd"
                && oSerializableFilter.id !== sap.apf.utils.Filter.topAndId) {
                oTerm = oTerm.addAnd(oSerializableFilter.id);
            } else if (oSerializableFilter.type === "filterOr"
                && oSerializableFilter.id !== sap.apf.utils.Filter.topAndId) {
                oTerm = oTerm.addOr(oSerializableFilter.id);
            }
            for (var i in oSerializableFilter.expressions) {
                oTerm.addExpression(oSerializableFilter.expressions[i]);
            }
            for (var j in oSerializableFilter.terms) {
                getDeserializedFilter(oSerializableFilter.terms[j], oTerm);
            }
        }

        getDeserializedFilter(oSerializableFilter, this.getTopAnd());
        return this;
    };

    /**
     * @private
     * @function
     * @deprecated
     * @name sap.apf.utils.Filter#addAnd
     * @description Deprecated since 1.23.0. Will be discarded with 1.26.0
     */
    this.addAnd = function (sId) {
        jQuery.sap.log.error("Method 'addAnd' is deprecated since 1.23.0", "Will be discarded with 1.26.0.");
    };

    /**
     * @public
     * @function
     * @name sap.apf.utils.Filter#intersectWith
     * @description Build the intersection of the this filter object with the supplied filter(s). The method does not change the "this"-instance.
     * @param {(sap.apf.utils.Filter|...sap.apf.utils.Filter|sap.apf.utils.Filter[])} Single filter object {@link sap.apf.utils.Filter}, a comma separated parameter list of filter objects, or an array of filter objects
     * @returns {sap.apf.utils.Filter} new filter object {@link sap.apf.utils.Filter} for the intersected filters
     */
    this.intersectWith = function (/* oFilter | oFilter1,oFilter2,... | [oFilter1,oFilter2,...] */) {

        var i = 0;
        var aFilter = [];
        var oFilter;
        var oResultFilter = new sap.apf.utils.Filter(oMessageHandler);
        var oResultSerialization = that.serialize(); // Start-result is from "that"-instance
        setNewIds(oResultSerialization);

        //Handle different call types
        switch (arguments.length) {
            case 1:
                oFilter = arguments[0];
                if (oFilter instanceof Array) {
                    aFilter = oFilter;
                }                              //Call type III
                else {
                    aFilter.push(oFilter);
                }                          //Call type I
                break;
            default:
                aFilter = Array.prototype.slice.call(arguments, 0);  //Call type II
        }

        aFilter.forEach(
            function (oFilterItem) {
                oMessageHandler.check((oFilterItem instanceof sap.apf.utils.Filter), "Parameter value is not of type sap.apf.utils.Filter");
                var oItemSerialization = oFilterItem.serialize();
                setNewIds(oItemSerialization);
                //append the items of the second array to the first array:
                Array.prototype.push.apply(oResultSerialization.expressions, oItemSerialization.expressions);
                Array.prototype.push.apply(oResultSerialization.terms, oItemSerialization.terms);
            }
        );

        oResultFilter.deserialize(oResultSerialization);
        return oResultFilter;

        function setNewIds(oSerializedFilter) {
            if (oSerializedFilter.id !== sap.apf.utils.Filter.topAndId) {
                oSerializedFilter.id = '#' + i++ + '#';
            }
            oSerializedFilter.terms.forEach(setNewIds);
        }
    };

    initialize();
    return this;
};
/**
 * @public
 * @function
 * @name sap.apf.utils.Filter#getOperators
 * @description Convenience function to get the OData operators which are
 *              defined in {sap.apf.core.constants.FilterOperators}.
 * @returns {sap.apf.core.constants.FilterOperators}
 */
sap.apf.utils.Filter.getOperators = function () {
    return sap.apf.core.constants.FilterOperators;
};
sap.apf.utils.Filter.prototype.getOperators = sap.apf.utils.Filter.getOperators;
// Static public vars
sap.apf.utils.Filter.topAndId = 'filterTopAnd';
/**
 * @public
 * @class FilterAnd
 * @name sap.apf.utils.FilterAnd
 * @param {string}
 *            sId Identifier for the object
 * @returns {sap.apf.utils.FilterAnd}
 */
sap.apf.utils.FilterAnd = function (oMessageHandler, sId) {
    // Private vars
    var id = sId;
    var aAndTerms = [];
    var that = this;

    // Private functions
    var isCompoundFilter = function (oTerm) {
        if (oTerm[0] instanceof Array) {
            return true;
        } else {
            return false;
        }
    };
    // Public functions
    /**
     * @public
     * @description Contains 'filter'
     * @returns {string}
     */
    this.type = "filterAnd";
    /**
     * @private
     * @function
     * @name sap.apf.utils.FilterAnd#getById
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @param {string}
     *            sId ID of the object to be returned
     * @returns {sap.apf.utils.FilterAnd} || {sap.apf.utils.FilterOr} ||
     *          {sap.apf.utils.FilterExpression} || undefined
     */
    this.getById = function (sId) {
        if (sId === id) {
            return this;
        }
        var oTerm;
        for (var i = 0; i < aAndTerms.length; i++) {
            oTerm = aAndTerms[i].getById(sId);
            if (oTerm !== undefined) {
                return oTerm;
            }
        }
        return undefined;
    };
    /**
     * @private
     * @function
     * @name sap.apf.utils.FilterAnd#getCompoundExpressions
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @returns {object[]}
     */
    this.getExpressions = function () {
        // This method is only used for the topAnd filter expression due to compatibility requirements
        // It could be replaced by filterAnd.getExpression without these requirements.
        var aExpression = [];
        var oTerm;
        for (var i = 0; i < aAndTerms.length; i++) {
            oTerm = aAndTerms[i].getExpression();
            if (oTerm instanceof Array && oTerm.length === 0) {
                continue;
            }
            if (oTerm instanceof Array)    aExpression.push(oTerm);
            else aExpression.push([oTerm]);  //Compatibility mode with respect to older UI5 shipments
        }
        return aExpression;
    };
    /**
     * @private
     * @function
     * @name sap.apf.utils.FilterAnd#getExpressions
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @returns {object[]} Array of expressions
     */
    this.getExpression = function () {
        var aExpression = [];
        var oTerm;
        for (var i = 0; i < aAndTerms.length; i++) {
            oTerm = aAndTerms[i].getExpression();
            if (oTerm instanceof Array && oTerm.length === 0) {
                continue;
            }
            aExpression.push(oTerm);
        }
        return aExpression;
    };
    /**
     * @private
     * @function
     * @deprecated
     * @name sap.apf.utils.FilterAnd#getCompoundExpressions
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @returns {object[]} Array of expressions
     */
    this.getCompoundExpressions = function () {
        jQuery.sap.log.error("Method 'getExpressions' is deprecated since 1.23.0", "Will be discarded with 1.26.0.");
    };
    /**
     * @public
     * @function
     * @name sap.apf.utils.FilterAnd#getId
     * @description Returns ID of this filter object.
     * @returns {string}
     */
    this.getId = function () {
        return sId;
    };
    /**
     * @private
     * @function
     * @name sap.apf.utils.FilterAnd#getInternalFilter
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @returns {sap.apf.core.utils.Filter}
     */
    this.getInternalFilter = function () {
        var oFilter = new sap.apf.core.utils.Filter(oMessageHandler);
        var len = aAndTerms.length;
        for (var i = 0; i < len; i++) {
            oFilter.addAnd(aAndTerms[i].getInternalFilter());
        }
        return oFilter;
    };
    /**
     * @private
     * @function
     * @deprecated
     * @name sap.apf.utils.FilterAnd#addAndTerm
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @returns undefined
     */
    this.addAndTerm = function (oTerm) {
        jQuery.sap.log.error("Method 'addAndTerm' is deprecated since 1.23.0", "Will be discarded with 1.26.0.");
    };
    /**
     * @private
     * @function
     * @name sap.apf.utils.FilterAnd#getAndTerms
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @returns {array}
     */
    this.getAndTerms = function () {
        return aAndTerms;
    };
    /**
     * @public
     * @function
     * @name sap.apf.utils.FilterAnd#addOr
     * @description Adds an object of type {@link sap.apf.utils.FilterOr}.
     * @param {string}
     *            sId Identifier for the object to be added.
     * @returns {sap.apf.utils.FilterOr}
     */
    this.addOr = function (sId) {
        oMessageHandler.check(
            (sId === undefined || this.getById(sId) === undefined),
            "Filter includes duplicated identifiers (IDs)");
        var or = new sap.apf.utils.FilterOr(oMessageHandler, sId, that);
        aAndTerms.push(or);
        return or;
    };

    /**
     * @public
     * @function
     * @name sap.apf.utils.FilterAnd#addExpression
     * @description Adds an expression object to this filter.
     * @param {object}
     *            oExpression Expression object
     * @param oExpression.id
     *            Expression ID
     * @param oExpression.name
     *            Expression name
     * @param oExpression.operator
     *            Expression operator of type
     *            {@link sap.apf.utils.Filter#getOperators}
     * @param oExpression.value
     *            Expression value
     * @returns {sap.apf.utils.FilterAnd} this to allow method chaining
     */
    this.addExpression = function (oExpression) {
        if (oExpression.operator.length == 2) {
            oExpression.operator = oExpression.operator.toUpperCase();
        }

        oMessageHandler.check((oExpression.id === undefined || this
                .getById(oExpression.id) === undefined),
            "Filter includes duplicated identifiers (IDs)");
        oMessageHandler.check((oExpression.operator !== undefined),
            "sap.apf.utils.Filter oExpression.operator undefined");
        oMessageHandler.check((jQuery.inArray(oExpression.operator,
                sap.apf.core.constants.aSelectOpt) > -1),
                "sap.apf.core.utils.Filter oExpression.operator "
                + oExpression.operator + " not supported");
        aAndTerms.push(new sap.apf.utils.FilterExpression(oMessageHandler,
            oExpression));
        return this;
    };
};
/**
 * @public
 * @class FilterOr
 * @name sap.apf.utils.FilterOr
 * @param {string}
 *            sId Identifier for the object
 * @param {sap.apf.utils.FilterAnd}
 *            oAnd Parent object
 * @returns {sap.apf.utils.FilterOr}
 */
sap.apf.utils.FilterOr = function (oMessageHandler, sId, oAnd) {
    // Private vars
    var id = sId;
    var aOrTerms = [];
    var oAndObject = oAnd;
    // Public functions
    /**
     * @description Contains 'filter'
     * @returns {string}
     */
    this.type = "filterOr";
    /**
     * @private
     * @function
     * @name sap.apf.utils.FilterOr#getById
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @param {string}
     *            sId ID of the object to be returned
     * @returns {sap.apf.utils.FilterAnd} || {sap.apf.utils.FilterOr} ||
     *          {sap.apf.utils.FilterExpression} || undefined
     */
    this.getById = function (sId) {
        if (sId === id) {
            return this;
        }
        var oTerm;
        for (var i = 0; i < aOrTerms.length; i++) {
            oTerm = aOrTerms[i].getById(sId);
            if (oTerm !== undefined) {
                return oTerm;
            }
        }
        return undefined;
    };
    /**
     * @private
     * @function
     * @name sap.apf.utils.FilterOr#getExpression
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @returns {object[]} array of expressions
     */
    this.getExpression = function () {
        var aExpression = [];
        var oTerm;
        for (var i = 0; i < aOrTerms.length; i++) {
            oTerm = aOrTerms[i].getExpression();
            if (oTerm instanceof Array && oTerm.length === 0) {
                continue;
            }
            aExpression.push(oTerm);
        }
        return aExpression;
    };
    /**
     * @public
     * @function
     * @name sap.apf.utils.FilterOr#getId
     * @description Retrieves an ID of the term.
     * @returns {string} ID of the term.
     */
    this.getId = function () {
        return sId;
    };
    /**
     * @private
     * @function
     * @name sap.apf.utils.FilterOr#getInternalFilter
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @returns {sap.apf.core.utils.Filter}
     */
    this.getInternalFilter = function () {
        var oFilter = new sap.apf.core.utils.Filter(oMessageHandler);
        for (var i = 0; i < aOrTerms.length; i++) {
            oFilter.addOr(aOrTerms[i].getInternalFilter());
        }
        return oFilter;
    };
    /**
     * @private
     * @function
     * @name sap.apf.utils.FilterOr#getAndObject
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @returns {sap.apf.utils.FilterAnd}
     */
    this.getAndObject = function () {
        return oAndObject;
    };
    /**
     * @private
     * @function
     * @deprecated
     * @name sap.apf.utils.FilterOr#addOrTerm
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @returns undefined
     */
    this.addOrTerm = function (oTerm) {
        jQuery.sap.log.error("Method 'addOr' is deprecated since 1.23.0", "Will be discarded with 1.26.0.");
    };
    /**
     * @private
     * @function
     * @name sap.apf.utils.FilterOr#getOrTerms
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @returns {array}
     */
    this.getOrTerms = function () {
        return aOrTerms;
    };
    /**
     * @public
     * @function
     * @name sap.apf.utils.FilterOr#addExpression
     * @description Adds an expression object to this filter.
     * @param {object}
     *            oExpression Expression object
     * @param oExpression.id
     *            Expression ID
     * @param oExpression.name
     *            Expression name
     * @param oExpression.operator
     *            Expression operator of type
     *            {@link sap.apf.utils.Filter#getOperators}
     * @param oExpression.value
     *            Expression value
     * @returns {sap.apf.utils.FilterOr} this to allow method chaining
     */
    this.addExpression = function (oExpression) {
        if (oExpression.operator.length == 2) {
            oExpression.operator = oExpression.operator.toUpperCase();
        }
        oMessageHandler.check((oExpression.id === undefined || this
                .getAndObject().getById(oExpression.id) === undefined),
            "Filter includes duplicated identifiers (IDs)");
        oMessageHandler.check((oExpression.operator !== undefined),
            "sap.apf.utils.Filter oExpression.operator undefined");
        oMessageHandler.check((jQuery.inArray(oExpression.operator,
                sap.apf.core.constants.aSelectOpt) > -1),
                "sap.apf.core.utils.Filter oExpression.operator "
                + oExpression.operator + " not supported");
        aOrTerms.push(new sap.apf.utils.FilterExpression(oMessageHandler,
            oExpression));
        return this;
    };
    /**
     * @public
     * @function
     * @name sap.apf.utils.FilterOr#addAnd
     * @description Adds an object of type {@link sap.apf.utils.FilterAnd}.
     * @param {string}
     *            sId Identifier for the object to be added.
     * @returns {sap.apf.utils.FilterAnd}
     */
    this.addAnd = function (sId) {
        oMessageHandler.check(
            (sId === undefined || this.getById(sId) === undefined),
            "Filter includes duplicated identifiers (IDs)");
        var and = new sap.apf.utils.FilterAnd(oMessageHandler, sId);
        aOrTerms.push(and);
        ;
        return and;
    };
};
/**
 * @public
 * @class Filter expression
 * @name sap.apf.utils.FilterExpression
 * @param {object}
 *            oExpression Expression object
 * @param oExpression.id
 *            Expression ID
 * @param oExpression.name
 *            Expression name
 * @param oExpression.operator
 *            Expression operator of type
 *            {@link sap.apf.utils.Filter#getOperators}
 * @param oExpression.value
 *            Expression value
 * @param oExpression.high
 *            Expression high value
 * @returns {sap.apf.utils.FilterExpression}
 */
sap.apf.utils.FilterExpression = function (oMessageHandler, oExpression) {
    // Checks
    checkHighValue(oExpression.high, oExpression.operator);
    // Private vars
    var sId = oExpression.id;
    var sName = oExpression.name;
    var sOperator = oExpression.operator;
    var sValue = oExpression.value;
    var sHighValue = oExpression.high;
    // Public functions
    /**
     * @private
     * @function
     * @name sap.apf.utils.FilterExpression#getById
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @returns {sap.apf.utils.FilterExpression}
     */
    this.getById = function (id) {
        if (sId === id) {
            return this;
        } else {
            return undefined;
        }
    };
    /**
     * @private
     * @function
     * @name sap.apf.utils.FilterExpression#getExpression
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @returns {object}
     */
    this.getExpression = function () {
        if (!sOperator || sOperator !== sap.apf.core.constants.FilterOperators.BT) {
            return {
                name: sName,
                operator: sOperator,
                value: sValue,
            };
        } else {
            return {
                name: sName,
                operator: sOperator,
                value: sValue,
                high: sHighValue,
            };
        }
    };
    /**
     * @private
     * @function
     * @name sap.apf.utils.FilterExpression#getInternalFilter
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @returns {sap.apf.core.utils.Filter}
     */
    this.getInternalFilter = function () {
        return new sap.apf.core.utils.Filter(oMessageHandler, sName, sOperator,
            sValue, sHighValue);
    };
    /**
     * @private
     * @function
     * @name sap.apf.utils.FilterExpression#update
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @param {object} oExpression Expression object
     * @param oExpression.id
     *            Expression ID
     * @param oExpression.name
     *            Expression name
     * @param oExpression.operator
     *            Expression operator of type
     *            {@link sap.apf.utils.Filter#getOperators}
     * @param oExpression.value
     *            Expression low value
     * @param oExpression.high
     *            Expression high value
     * @returns undefined
     */
    this.update = function (oExpression) {
        checkHighValue(oExpression.high, oExpression.operator);
        sName = oExpression.name;
        sOperator = oExpression.operator;
        sValue = oExpression.value;
        sHighValue = oExpression.high;
    };
    /**
     * @private
     * @function
     * @name sap.apf.utils.FilterExpression#updateValue
     * @description Do not use. Not part of the APF API. Method should only be
     *              called internally by APF.
     * @param {string}
     *            value The new value for the expression
     * @param {string}
     *            high The new high value for the expression
     * @returns undefined
     */
    this.updateValue = function (value, high) {
        sValue = value;
        if (high !== undefined) sHighValue = high;
        checkHighValue(sHighValue, sOperator);
    };

    function checkHighValue(high, operator) {
        if (!operator) return;
        if (operator === sap.apf.core.constants.FilterOperators.BT && (high === null || high === undefined)) {
            oMessageHandler
                .check(false, "sap.apf.utils.FilterExpression: High value needed for 'between' selection");
        }
        else if (operator !== sap.apf.core.constants.FilterOperators.BT && (high !== null && high !== undefined)) {
            oMessageHandler
                .check(false, "sap.apf.utils.FilterExpression: High value only needed for 'between' selection");
        }

    }
};

}; // end of sap/apf/utils/filter.js
if ( !jQuery.sap.isDeclared('sap.apf.core.binding') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.binding");






/** 
 * @class The binding manages the different representations, that are assigned to a step.
 * @param {sap.apf.core.Instance} oInject.coreApi provides the core api.
 * @param {sap.apf.core.MessageHandler} oInject.messageHandler provides the message handler.
 * @param {object} oBindingConfig The configuration object of the binding from the analytical configuration.
 * @param oBindingConfig.oTitle Title of binding
 * @param oBindingConfig.oLongTitle Longtitle of binding
 * @param oBindingConfig.representations Configuration of the representations
 * @param oBindingConfig.requiredFilters {string[]} required filters - Array with properties, that define the filter properties, that shall be returned.
 * @param {sap.apf.core.ConfigurationFactory} oFactory reference 
 */
sap.apf.core.Binding = function(oInject, oBindingConfig, oFactory) {
    var that = this;
	this.type = "binding";
	var nSelectedRepresentation = 0;
	var aRepresentationInstances = [];
	var aRepresentationInfo = [];
	var aCachedData = [];
	var oCachedMetadata;
	var oStartFilter;

	this.oTitle = oBindingConfig.oTitle;
	this.oLongTitle = oBindingConfig.oLongTitle;
	var aRequiredFilters = oBindingConfig.requiredFilters;

	/**
	 * @see sap.apf.core.Step#getFilter
	 */
	this.getFilter = function() {
		var oSelectedRepresentation = this.getSelectedRepresentation();
		var methodTypes = sap.apf.core.constants.filterMethodTypes;
		var aIndices = [];

		if (oSelectedRepresentation.getFilterMethodType() === methodTypes.startFilter || oSelectedRepresentation.getFilterMethodType() === methodTypes.filter) {
			var oFilterFromRepresentation = oSelectedRepresentation.getFilter().getInternalFilter();
			if (oStartFilter) {
				return oStartFilter.getInternalFilter().overwriteWith(oFilterFromRepresentation);
			} else {
				return oFilterFromRepresentation;
			}
		}
		if (oSelectedRepresentation.getSelectionAsArray) {
			aIndices = oSelectedRepresentation.getSelectionAsArray();
		} else {
			return new sap.apf.core.utils.Filter(oInject.messageHandler);
		}
		// CONTRACT: undefined = empty selection corresponds to empty rectangle in a scatter
		// following steps should get no data
		if (aIndices === undefined) {
			return sap.apf.core.utils.Filter.createEmptyFilter(oInject.messageHandler, aRequiredFilters);
		}
		// CONTRACT: nothing selected also means, that nothing is excluded -> all shall be taken over to next selection
		if (aIndices.length === aCachedData.length || aIndices.length === 0) {
			return new sap.apf.core.utils.Filter(oInject.messageHandler);
		}
		// DEFAULT: 
		return sap.apf.core.utils.Filter.createFromArray(oInject.messageHandler, aRequiredFilters, aCachedData, aIndices);
	};

	/**
	 * @description Request option like $top, $skip and $orderby are returned by the actual representation. This
	 * is required to create the OData request.
	 */
	this.getRequestOptions = function() {
		if (jQuery.isFunction(this.getSelectedRepresentation().getRequestOptions)) {
			return this.getSelectedRepresentation().getRequestOptions();
		}
		return {};
	};

	function isRepresentationForInitialStep(oRepresentation) {
		return oRepresentation.getFilterMethodType() === sap.apf.core.constants.filterMethodTypes.startFilter;
	}
	/**
	 * @see sap.apf.core.Step#setFilter
	 */
	this.setFilter = function(oFilter) {
		var oRepresentation = this.getSelectedRepresentation();
		oStartFilter = oFilter;
		if (isRepresentationForInitialStep(oRepresentation)) {
			oRepresentation.setFilter(oStartFilter);
		}
	};
	/**
	 * @see sap.apf.core.Step#setData
	 */
	this.setData = function(oDataResponse) {
		oInject.messageHandler.check(oDataResponse !== undefined, "aDataResponse is undefined (binding function setData)");
		aCachedData = oDataResponse.data;
		oCachedMetadata = oDataResponse.metadata;
		this.getSelectedRepresentation().setData(oDataResponse.data, oDataResponse.metadata);
	};

	/**
	 * @see sap.apf.core.Step#getRepresentationInfo
	 */
	this.getRepresentationInfo = function() {
		var aReprInfo = jQuery.extend(true, [], aRepresentationInfo); // clone deep
		for( var i = 0; i < aReprInfo.length; i++) {
			delete aReprInfo[i].id;
			delete aReprInfo[i].type;
			delete aReprInfo[i].constructor;
		}
		return aReprInfo;
	};

	/**
	 * @see sap.apf.core.Step#getSelectedRepresentationInfo
	 */
	this.getSelectedRepresentationInfo = function() {
		oInject.messageHandler.check(0 <= nSelectedRepresentation && nSelectedRepresentation < aRepresentationInfo.length, "index in array boundaries");
		
		var oRepType = jQuery.extend(true, {}, aRepresentationInfo[nSelectedRepresentation]);
		delete oRepType.id;
		delete oRepType.type;
		delete oRepType.constructor;
		return oRepType;
	};

	/**
	 * @see sap.apf.core.Step#getSelectedRepresentation
	 */
	this.getSelectedRepresentation = function() {
		oInject.messageHandler.check(0 <= nSelectedRepresentation && nSelectedRepresentation < aRepresentationInstances.length, "selectedRepresentation in array boundaries");
		return aRepresentationInstances[nSelectedRepresentation];
	};

	/**
	 * @see sap.apf.core.Step#setSelectedRepresentation
	 */
	this.setSelectedRepresentation = function(sRepresentationId) {
		oInject.messageHandler.check(typeof sRepresentationId === "string", "setSelectedRepresentation() - sRepresentationId missing");
		var oCurrentInstance = this.getSelectedRepresentation();
		var oSwitchParameters = determineSwitchParameters(sRepresentationId, oBindingConfig.representations);
		var oNewInstance = setNewInstance(oSwitchParameters);

		nSelectedRepresentation = oSwitchParameters.index;
		if (aCachedData !== undefined && oCachedMetadata !== undefined) {
			oNewInstance.setData(aCachedData, oCachedMetadata);
		}
		if (oNewInstance.adoptSelection) {
			oNewInstance.adoptSelection(oCurrentInstance);
		}

		function determineSwitchParameters(sRepresentationId, aRepresentationConfig) {
			for( var i = 0; i < aRepresentationConfig.length; i++) {
				if (sRepresentationId === aRepresentationConfig[i].id) {
					return {
						config : aRepresentationConfig[i],
						constructor : oFactory.getConfigurationById(aRepresentationConfig[i].representationTypeId).constructor,
						index : i
					};
				}
			}
			oInject.messageHandler.check(false, "Representation config not found");
		}
		function setNewInstance(oSwitchParam) {
			if (aRepresentationInstances[oSwitchParam.index] === undefined) {
				if (oSwitchParam.config.parameter && oSwitchParam.config.parameter.alternateRepresentationTypeId) {
					oSwitchParam.config.parameter.alternateRepresentationType = oFactory.getConfigurationById(oSwitchParam.config.parameter.alternateRepresentationTypeId);
				}
				oSwitchParam.config.parameter.requiredFilters = oBindingConfig.requiredFilters;
				aRepresentationInstances[oSwitchParam.index] = oInject.coreApi.createRepresentation(oSwitchParam.constructor, oSwitchParam.config.parameter);
				return aRepresentationInstances[oSwitchParam.index];
			} else {
				return aRepresentationInstances[oSwitchParam.index];
			}
		}
	};
	/**
	 * @description Serializes a binding object.
	 * @returns {object} serialized binding object with a serializable selectedRepresentation and the selectedRepresentationId
	 */
	this.serialize = function() {
		return {
			selectedRepresentation : that.getSelectedRepresentation().serialize(),
			selectedRepresentationId : that.getSelectedRepresentationInfo().representationId
		};
	};
	/**
	 * @description Deserialize a serializable binding object.
	 * @param {object} oSerializableBinding serializable binding object to be deserialized
	 * @returns {object} deserialized binding runtime object
	 */
	this.deserialize = function(oSerializableBinding) {
		that.setSelectedRepresentation(oSerializableBinding.selectedRepresentationId);
		that.getSelectedRepresentation().deserialize(oSerializableBinding.selectedRepresentation);
		return that;
	};

	aRepresentationInstances[0] = undefined;
	for( var index in oBindingConfig.representations) {
		var sRepTypeId = oBindingConfig.representations[index].representationTypeId;
        aRepresentationInfo[index] = jQuery.extend(true, {}, oFactory.getConfigurationById(sRepTypeId)); // return clone
		aRepresentationInfo[index].representationId = oBindingConfig.representations[index].id;
		aRepresentationInfo[index].representationLabel = oBindingConfig.representations[index].label;
	}
	if (aRepresentationInfo.length > 0) {
		this.setSelectedRepresentation(aRepresentationInfo[0].representationId);
	}
};

}; // end of sap/apf/core/binding.js
if ( !jQuery.sap.isDeclared('sap.apf.core.request') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

/*global OData */
jQuery.sap.declare("sap.apf.core.request");



jQuery.sap.require('sap.ui.thirdparty.datajs'); // unlisted dependency retained


/**
 * @class The Request object represents an OData GET request. It receives a
 *        filter which is then mapped to a URI query and appended to the request
 *        URI. Its role is to send an asynchronous OData request to the server,
 *        receive the response, parse it and provision it as an array of
 *        objects. The request will use a callback mechanism handling the
 *        asynchronous request behavior. The callback routes control back to the
 *        Path object.
 * @param {Object} - Configuration Object for a Request.
 */
sap.apf.core.Request = function(oInject, oConfig) {
	var oMessageHandler = oInject.messageHandler;
	var oCoreApi = oInject.coreApi;
	var sServiceRootPath = oConfig.service;
	var entityType = oConfig.entityType;
	var selectProperties = oConfig.selectProperties;
	var oUriGenerator = oCoreApi.getUriGenerator();
	var oMessageObject;
	if (sServiceRootPath === undefined) {
		oMessageObject = oMessageHandler.createMessageObject({
			code : "5015",
			aParameters : [oConfig.id]
		});
		oMessageHandler.putMessage(oMessageObject);
	}
	var oMetadata = oCoreApi.getMetadata(sServiceRootPath);
	this.type = oConfig.type;
	/**
	 * @description A request object that can send (many) asynchronous OData GET requests to the server. It uses a POST $batch operation wrapping the GET.
	 * @param {Object} oFilter - An sap.apf.core.utils filter object.
	 * @param {Function} fnCallback - A function called after the response was successfully received and parsed.
	 * @param {Object} oRequestOptions - An optional object containing additional query string options
	 * Format: { orderby : [{ property : <property_name>, order : <asc|desc>}], top : <integer>, skip : <integer> }  
	 */
	this.sendGetInBatch = function(oFilter, fnCallback, oRequestOptions) {
		var oParameters = retrieveParameters(oFilter);
		var oReducedFilter;
		checkFilterForRequiredProperties(oFilter);
		if (oFilter && oFilter.getProperties) {
  			oReducedFilter = oFilter.reduceToProperty(oMetadata.getFilterableProperties(entityType));
		}
		
		checkRequestOptionsConsistency(oRequestOptions);
		var oPaging = oRequestOptions && oRequestOptions.paging;
		var oSortingFields = oRequestOptions && oRequestOptions.orderby;
		var sUriSuffix = oMetadata.getUriSuffix(entityType);
		var sUrlEntityType = oUriGenerator.buildUri(oMessageHandler, entityType, selectProperties, oReducedFilter, oParameters, oSortingFields, oPaging, undefined, formatValue, sUriSuffix);
		var oRequest = {
			method : 'POST',
			headers : {
				"x-csrf-token" : oCoreApi.getXsrfToken(sServiceRootPath)
			},
			requestUri : oUriGenerator.getAbsolutePath(sServiceRootPath) + '$batch',
			data : {
				__batchRequests : [ {
					requestUri : sUrlEntityType,
					method : 'GET',
					headers : {
						"Accept-Language" : sap.ui.getCore().getConfiguration().getLanguage(),
						"x-csrf-token" : oCoreApi.getXsrfToken(sServiceRootPath)
					}
				} ]
			}
		};
		var fnSuccess = function(data, response) {
			var oResponse = {};
			var sUrl = "";
			if (data && data.__batchResponses && data.__batchResponses[0].data) {
				oResponse.data = data.__batchResponses[0].data.results;
				oResponse.metadata = oCoreApi.getEntityTypeMetadata(oConfig.service, oConfig.entityType);
				if (data.__batchResponses[0].data.__count) {
					oResponse.count = parseInt(data.__batchResponses[0].data.__count, 10);
				}
			} else if (data && data.__batchResponses[0] && data.__batchResponses[0].response && data.__batchResponses[0].message) {
				sUrl = response.requestUri;
				var sMessage = data.__batchResponses[0].message;
				var sErrorDetails = data.__batchResponses[0].response.body;
				var sHttpStatusCode = data.__batchResponses[0].response.statusCode;
				oResponse = oMessageHandler.createMessageObject({
					code : "5001",
					aParameters : [ sHttpStatusCode, sMessage, sErrorDetails, sUrl ]
				});
			} else {
				sUrl = response.requestUri || sUrlEntityType;
				oResponse = oMessageHandler.createMessageObject({
					code : "5001",
					aParameters : [ "unknown", "unknown error", "unknown error", sUrl ]
				});
			}
			fnCallback(oResponse, false);
		};
		var fnError = function(error) {
			var sMessage = "unknown error";
			var sErrorDetails = "unknown error";
			var sUrl = sUrlEntityType;
			if (error.message !== undefined) {
				sMessage = error.message;
			}
			var sHttpStatusCode = "unknown";
			if (error.response && error.response.statusCode) {
				sHttpStatusCode = error.response.statusCode;
				sErrorDetails = error.response.statusText || "";
				sUrl = error.response.requestUri || sUrlEntityType ;
			}
			
			if (error.messageObject && error.messageObject.type === "messageObject") {
				fnCallback(error.messageObject);
			} else {
				fnCallback(oMessageHandler.createMessageObject({
					code : "5001",
					aParameters : [ sHttpStatusCode, sMessage, sErrorDetails, sUrl ]
				}));
			}
			
		};
		oCoreApi.odataRequest(oRequest, fnSuccess, fnError, OData.batchHandler);
	};
	
	function formatValue(sProperty, value) {
		var strDelimiter = "'";
		var oEntityMetadata = oMetadata.getPropertyMetadata(entityType, sProperty);
		if (oEntityMetadata && oEntityMetadata.dataType) {
			return sap.apf.utils.formatValue(value, oEntityMetadata.dataType.type)
		} else {
			if (typeof value === 'number') {
				return value ;
			} else {
				return strDelimiter + sap.apf.utils.escapeOdata(value) + strDelimiter;
			}
		}
		
	};
	function checkRequestOptionsConsistency(oRequestOptions) {
		
			var aPropertyNames, i;
			
			if (!oRequestOptions) {
				return;
			}
			aPropertyNames = Object.getOwnPropertyNames(oRequestOptions);
			for (i = 0; i < aPropertyNames.length;i++) {
				if (aPropertyNames[i] !== 'orderby' && aPropertyNames[i] !== 'paging') {
					oMessageHandler.putMessage(oMessageHandler.createMessageObject({
						code : '5032',
						aParameters : [ entityType, aPropertyNames[i] ]
					}));
				}
			}
		}
	
	
	function checkFilterForRequiredProperties(oFilter) {
		var aFilterableProperties = oMetadata.getFilterableProperties(entityType);
		var sRequiredFilterProperty = "";
		var oEntityTypeMetadata = oMetadata.getEntityTypeMetadata(entityType);
		var oMessageObject;
		if (oEntityTypeMetadata.requiresFilter !== undefined && oEntityTypeMetadata.requiresFilter === "true") {
			if (oEntityTypeMetadata.requiredProperties !== undefined) {
				sRequiredFilterProperty = oEntityTypeMetadata.requiredProperties;
			}
		}
		if (sRequiredFilterProperty === "") {
			return;
		}
		if (jQuery.inArray(sRequiredFilterProperty, aFilterableProperties) === -1) {
			oMessageObject = oMessageHandler.createMessageObject({
				code : "5006",
				aParameters : [ entityType, sRequiredFilterProperty ]
			});
			oMessageHandler.putMessage(oMessageObject);
		}
		var aPropertiesInFilter = oFilter.getProperties();
		// test, whether all required properties are in filter
		if (jQuery.inArray(sRequiredFilterProperty, aPropertiesInFilter) === -1) {
			oMessageObject = oMessageHandler.createMessageObject({
				code : "5005",
				aParameters : [ entityType, sRequiredFilterProperty ]
			});
			oMessageHandler.putMessage(oMessageObject);
		}
	}
	function retrieveParameters(oFilter) {
		var oParameters = {};
		var aParameters;
		var numberOfParameters;
		var aTermsContainingParameter;
		aParameters = oMetadata.getHanaViewParameters(entityType);
		if (aParameters !== undefined) {
			numberOfParameters = aParameters.length;
		} else {
			numberOfParameters = 0;
		}
		if (numberOfParameters > 0) {
			for( var i = 0; i < numberOfParameters; i++) {
				var oParameterTerm;
				if (oFilter && oFilter instanceof sap.apf.core.utils.Filter) {
					aTermsContainingParameter = oFilter.getFilterTermsForProperty(aParameters[i].name);
					oParameterTerm = aTermsContainingParameter[aTermsContainingParameter.length - 1];
				}
				if (oParameterTerm instanceof sap.apf.core.utils.FilterTerm) {
					addParameter(i, oParameterTerm.getValue());
				} else if (aParameters[i].defaultValue) {
					addParameter(i, aParameters[i].defaultValue);
				} else {
					var oMessageObject = oMessageHandler.createMessageObject({
						code : "5016",
						aParameters : [ aParameters[i].name ]
					});
					oMessageHandler.putMessage(oMessageObject);
				}
			}
		}
		return oParameters;
		function addParameter(index, value) {
			if (aParameters[index].dataType.type === 'Edm.String') {
				oParameters[aParameters[index].name] = (jQuery.sap.encodeURL("'" + sap.apf.utils.escapeOdata(value) + "'"));
			} else if (aParameters[index].dataType.type) {
				oParameters[aParameters[index].name] = sap.apf.utils.formatValue(value,aParameters[index].dataType.type);
			} else {
				if (typeof value === "string") {
					oParameters[aParameters[index].name] = jQuery.sap.encodeURL(sap.apf.utils.escapeOdata(value));
				} else {
					oParameters[aParameters[index].name] = value;
				}
			}
		}
	}
};

}; // end of sap/apf/core/request.js
if ( !jQuery.sap.isDeclared('sap.apf.core.sessionHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.sessionHandler");


/**
 * @class Handles the session of an APF based application. e.g. the XSRF token handling
 */
sap.apf.core.SessionHandler = function(oInject) {
	// private vars
	var that = this;
	var sXsrfToken = "";
	var sServiceRootPath = "";
	var oHashTableXsrfToken = new sap.apf.utils.Hashtable(oInject.messageHandler);
	var nFetchTryCounter = 0;
	var sLogicalSystem = "";
	var oCoreApi = oInject.coreApi;
	var oMessageHandler = oInject.messageHandler;
	var oContextFilter = new sap.apf.utils.Filter(oMessageHandler);
	var sSapClient = "";
	// public vars
	/**
	 * @description Returns the type
	 * @returns {String}
	 */
	this.type = "sessionHandler";
	// public function
	/**
	 * @see sap.apf.core.ajax
	 */
	this.ajax = function(oSettings){
		sap.apf.core.ajax(oSettings);
	};
	/**
	 * @see sap.apf.core.odataRequestWrapper
	 */
	this.odata = function(oRequest, fnOnSuccess, fnError){
		oCoreApi.odataRequest(oRequest, fnOnSuccess, fnError);
	};
	
	/**
	 * @description Returns the XSRF token as string for a given OData service root path
	 * @param {String} serviceRootPath OData service root path
	 * @returns {String}
	 */
	this.getXsrfToken = function(serviceRootPath) {
		sServiceRootPath = serviceRootPath;
		if(oHashTableXsrfToken.hasItem(sServiceRootPath)){
			return oHashTableXsrfToken.getItem(sServiceRootPath);
		} else {
			that.fetchXcsrfToken();
			oHashTableXsrfToken.setItem(sServiceRootPath, sXsrfToken);
			return sXsrfToken;
		}
	};

	/**
	 * returns the rfc destination of the r3 system, that is exposed by the odata services.
	 * This corresponds to t000-logsys. The logical system is the identifier for the system/server, on which the application runs.
	 * @returns {string} logical system destination
	 */
	this.getLogicalSystem = function() {
		return sLogicalSystem;
	};

	/**
	 * @description sets the Context
	 * @param {sap.apf.utils.Filter} oFilter filter, that stores all context information
	 */
	this.setContext = function(oFilter) {
		oContextFilter = oFilter;
        var aTerms = oContextFilter.getInternalFilter().getFilterTermsForProperty('SAPClient');
        if (aTerms && aTerms.length === 1) {
            initLogicalSystem();
        }
		oCoreApi.updatePath(function() {
		}, true);
	};
	/**
	 * @description gets the Context
	 */
	this.getContext = function() {
		return oContextFilter;
	};
	/**
	 * @description fetches XSRF token from XSE
	 */
	this.fetchXcsrfToken = function() {
		that.ajax({
			url : oCoreApi.getUriGenerator().getAbsolutePath(sServiceRootPath),
			type : "GET",
			beforeSend : function(xhr) {
				xhr.setRequestHeader("x-csrf-token", "Fetch");
			},
			success : onFetchXsrfTokenResponse,
			error : onError,
			async : false
		});
		nFetchTryCounter = nFetchTryCounter + 1;
	};
	// private functions
	var onError = function(oJqXHR, sStatus, sErrorThrown) {
		if ((sXsrfToken.length === 0 || sXsrfToken === "unsafe") && nFetchTryCounter < 2) {
			setTimeout(that.fetchXcsrfToken, 500 + Math.random() * 1500);
		} else {
			oMessageHandler.check(false, "No XSRF Token available!");
		}
	};
	var onFetchXsrfTokenResponse = function(oData, sStatus, oXMLHttpRequest) {
		sXsrfToken = oXMLHttpRequest.getResponseHeader("x-csrf-token");
		if ((sXsrfToken.length === 0 || sXsrfToken === "unsafe") && nFetchTryCounter < 2) {
			setTimeout(that.fetchXcsrfToken, 500 + Math.random() * 1500);
		}
	};

	var getSAPClientFromContextFilter = function() {
		var aTerms = oContextFilter.getInternalFilter().getFilterTermsForProperty('SAPClient');
		if (aTerms === undefined || aTerms.length !== 1) {
			oMessageHandler.putMessage(oMessageHandler.createMessageObject({
				code : "5025"
			}));
		}
		return aTerms[0].getValue();
	};

	var initLogicalSystem = function() {
		var sServiceRoot = oCoreApi.getPersistenceConfiguration().logicalSystem.service;
		var sEntityType = oCoreApi.getPersistenceConfiguration().logicalSystem.entityType;
		var sSapClientFromFilter = getSAPClientFromContextFilter();
		if (sSapClient === sSapClientFromFilter) {
			return;
			
		}
		sSapClient = sSapClientFromFilter;
		var oFilter = new sap.apf.core.utils.Filter(oMessageHandler, "SAPClient", 'eq', sSapClient);
		var sUrl = oCoreApi.getUriGenerator().getAbsolutePath(sServiceRoot);
		sUrl = sUrl + oCoreApi.getUriGenerator().buildUri(oMessageHandler, sEntityType, [ 'LogicalSystem' ], oFilter, undefined, undefined, undefined, undefined, undefined, 'Results');
		var oRequest = {
			requestUri : sUrl,
			method : "GET",
			headers : {
				"x-csrf-token" : sXsrfToken
			},
			async : false
		};
		var fnOnSuccess = function(oData) {
			if (oData && oData.results && oData.results instanceof Array && oData.results.length === 1 && oData.results[0].LogicalSystem) {
				sLogicalSystem = oData.results[0].LogicalSystem;
			} else {
				oMessageHandler.putMessage(oMessageHandler.createMessageObject({
					code : "5026",
					aParameters : [ sSapClient ]
				}));
			}
		};
		var fnError = function(oError) {
			var oMessageObject = oMessageHandler.createMessageObject({
				code : "5026",
				aParameters : [ sSapClient ]
			});
			if (oError.messageObject !== undefined && oError.messageObject.type === "messageObject" ) {
				oMessageObject.setPrevious(oError.messageObject);
			}
			
			oMessageHandler.putMessage(oMessageObject);
		};
		that.odata(oRequest, fnOnSuccess, fnError);
	};
};
}; // end of sap/apf/core/sessionHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.core.step') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global sap, jQuery */
jQuery.sap.declare("sap.apf.core.step");


(function() {
    'use strict';
/**
 * @private
 * @class A step is a runtime container for binding and request. 
 * @name sap.apf.core.Step
 * @param {object} oMessageHandler Message handler instance
 * @param {object} oStepConfig Step configuration object from analytical content configuration
 * @param {sap.apf.core.ConfigurationFactory} oFactory
 * @returns {sap.apf.core.Step} 
 */
sap.apf.core.Step = function(oMessageHandler, oStepConfig, oFactory) {
	oMessageHandler.check(oStepConfig !== undefined, "Step: step configuration is missing");
	oMessageHandler.check(oStepConfig.categories !== undefined && oStepConfig.categories instanceof Array && oStepConfig.categories[0].id !== undefined, "No category assigned to step " + oStepConfig.id + " in analytical configuration", sap.apf.core.constants.message.code.errorCheckConfiguration);
	oMessageHandler.check(oStepConfig.binding !== undefined, "No binding assigned to step " + oStepConfig.id + " in analytical configuration", sap.apf.core.constants.message.code.errorCheckConfiguration);

	assertValidCategories(oStepConfig.categories);
	var oBinding, oRequest, oCachedFilter, oCachedRequestOptions;
	var oAdditionalConfigurationProperties = jQuery.extend(true, {}, oStepConfig);
	var bIsInitialStep = (oStepConfig.categories[0].id === "initial");
	// delete properties from step template which are not needed in step instance
	delete oAdditionalConfigurationProperties.id;
	delete oAdditionalConfigurationProperties.picture;
	delete oAdditionalConfigurationProperties.hoverPicture;
	delete oAdditionalConfigurationProperties.title;
	delete oAdditionalConfigurationProperties.longTitle;
	delete oAdditionalConfigurationProperties.type;
	delete oAdditionalConfigurationProperties.thumbnail;
	delete oAdditionalConfigurationProperties.categories;
	
	/**
	 * @private
     * @description Contains 'step'
	 * @returns {string}
	 */
	this.type = oStepConfig.type;

	/**
     * @private
	 * @description Contains 'title'
	 * @returns {string}
	 */
	this.title = jQuery.extend(true, {}, oStepConfig.title);
	
	/**
     * @private
     * @description Contains 'longTitle'
	 * @returns {string}
	 */
	this.longTitle = undefined;
	if (oStepConfig.longTitle) {
		this.longTitle = jQuery.extend(true, {}, oStepConfig.longTitle);
	}
	
	/**
     * @private
	 * @description Contains 'thumbnail'
	 * @returns {string}
	 */
	this.thumbnail = jQuery.extend(true, {}, oStepConfig.thumbnail);

	/**
     * @private
	 * @description Contains 'categories'
	 * @returns {object[]}
	 */
	this.categories = oStepConfig.categories;

	/**
	 * @private
	 * @function
	 * @name sap.apf.core.Step#isInitialStep
	 * @description Returns true if this step instance is an initial one
	 * @returns {boolean}
	 */
	this.isInitialStep = function() {
		return bIsInitialStep;
	};
	
	/**
	 * @private
	 * @function
	 * @name sap.apf.core.Step#getAdditionalConfigurationProperties
	 * @description Returns additional properties from step template
	 * @returns {object}
	 */
	this.getAdditionalConfigurationProperties = function() {
		return oAdditionalConfigurationProperties;
	};

	/** 
	 * @private
	 * @function
	 * @name sap.apf.core.Step#update
	 * @description Do not use. Not part of the APF API. 
	 * Method should only be called internally by APF. 
	 * APF consumers must call sap.apf.updatePath() instead.
	 * @returns undefined
	 */
	this.update = function(oFilterForRequest, callbackAfterRequest) {
		var oCurrentRequestOptions = oBinding.getRequestOptions();

		var bFilterChanged = !oFilterForRequest.isEqual(oCachedFilter);
		var bRequestOptionsChanged = !areRequestOptionsEqual(oCachedRequestOptions, oCurrentRequestOptions);

		if (oRequest && (bFilterChanged || bRequestOptionsChanged)) {
			oRequest.sendGetInBatch(oFilterForRequest, callbackAfterRequest, oCurrentRequestOptions);
		} else {
			callbackAfterRequest({}, true);
		}
 	};
 	/**
 	 * @private
 	 * @function
 	 * @name sap.apf.core.Step#determineFilters
 	 * @description Do not used. Not part of the APF API.
 	 * Called APF internally from path update to invoke filter calculation on step.
 	 * @param {sap.apf.utils.Filter} oFilter
 	 * @returns undefined
 	 */
 	this.determineFilter = function(oCumulatedFilter, callbackFromStepFilterProcessing) {
 		if(mappingRequired() && this.getFilter().toUrlParam()) {
	 		var callbackAfterMappingRequest = function(oResponse){
	 	 		var aData = [];
	 	 		var aTarget;
	 	 		var oFilter;
	 	 		if (oResponse && oResponse.type && oResponse.type === "messageObject") {
	 	 			oMessageHandler.putMessage(oResponse); // technically logging
	 	 		}else{
	 	 			aData =  oResponse.data;
	 	 			aTarget = oStepConfig.filterMapping.target;
	 	 			oFilter = new sap.apf.core.utils.Filter(oMessageHandler);
	 	 			for(var i=0; i < aData.length; i++){
	 	 				var oFilterAnd = new sap.apf.core.utils.Filter(oMessageHandler);
	 	 				for(var j=0; j < aTarget.length; j++){
	 	 					oFilterAnd.addAnd(new sap.apf.core.utils.Filter(oMessageHandler, aTarget[j], sap.apf.core.constants.FilterOperators.EQ, aData[i][aTarget[j]]));
	 	 				}
	 	 				oFilter.addOr(oFilterAnd);
	 	 			}
	 	 			if(oStepConfig.filterMapping.keepSource === 'true') {
	 	 				oFilter = this.getFilter().addAnd(oFilter);
	 	 			}
	 	 			callbackFromStepFilterProcessing(oFilter);
	 	 		}
	 		};
 			var oRequestConfig = oFactory.getConfigurationById(oStepConfig.filterMapping.requestForMappedFilter);
 			oRequestConfig.selectProperties = oStepConfig.filterMapping.target;
 			var oMergedFilter = oCumulatedFilter.addAnd(this.getFilter()); 	
 			oFactory.createRequest(oRequestConfig).sendGetInBatch(oMergedFilter, callbackAfterMappingRequest.bind(this));
 		} else {
 			callbackFromStepFilterProcessing(this.getFilter());
 		}
 	}; 	
	/**
	 * @private
	 * @function
	 * @name sap.apf.core.Step#setFilter
	 * @description Sets the cumulative filter.
	 * @param {sap.apf.utils.Filter} oFilter
	 * @returns undefined
	 */
	this.setFilter = function(oFilter) {
		return oBinding.setFilter(oFilter);
	};
	/**
	 * @private
	 * @function
	 * @name sap.apf.core.Step#getFilter
	 * @description Fetches the selection from the representation. 
	 * @returns {sap.apf.core.utils.Filter} 
	 */
	this.getFilter = function() {
		return oBinding.getFilter();
	};

	/** 
	 * @private
	 * @function
	 * @name sap.apf.core.Step#setData
	 * @description Do not use. Not part of the APF API. 
	 * Method should only be called internally by APF.
	 * @returns undefined
	 */
	this.setData = function(oDataResponse, oFilterThatHasBeenUsedToRetrieveData) {
		oCachedFilter = oFilterThatHasBeenUsedToRetrieveData.copy();
		oCachedRequestOptions = jQuery.extend({}, oBinding.getRequestOptions());
		oBinding.setData(oDataResponse);
	};

	/**
	 * @private
	 * @function
	 * @name sap.apf.core.Step#getRepresentationInfo
	 * @description Returns an array of representation information objects.
	 * @returns {object[]}
	 */
	this.getRepresentationInfo = function() {
		return oBinding.getRepresentationInfo();
	};

	/**
	 * @private
	 * @function
	 * @name sap.apf.core.Step#getSelectedRepresentationInfo
	 * @description Returns the representation information object of the selected representation. 
	 * @returns {object}
	 */
	this.getSelectedRepresentationInfo = function() {
		return oBinding.getSelectedRepresentationInfo();
	};

	/**
	 * @private
	 * @function
	 * @name sap.apf.core.Step#getSelectedRepresentation
	 * @description Returns the selected representation object. 
	 * @returns {sap.apf.ui.representations.representationInterface}
	 */
	this.getSelectedRepresentation = function() {
		return oBinding.getSelectedRepresentation();
	};

	/**
	 * @private
	 * @function
	 * @name sap.apf.core.Step#setSelectedRepresentation
	 * @description Sets the selected representation via representation id. 
	 * The selected representation receives the response data through setData().  
	 * @param {string} sRepresentationId The representation id used to identify the representation. 
	 * @returns {undefined}
	 */
	this.setSelectedRepresentation = function(sRepresentationId) {
		oBinding.setSelectedRepresentation(sRepresentationId);
	};
	/** 
	 * @private
	 * @function
	 * @name sap.apf.core.Step#serialize
	 * @description Do not use. Not part of the APF API. 
	 * Method should only be called internally by APF.
	 * @returns {object}
	 */
	this.serialize = function() {
		return {
            stepId : oStepConfig.id,
            binding : oBinding.serialize()
        };
	};
	/** 
	 * @private
	 * @function
	 * @name sap.apf.core.Step#deserialize
	 * @description Do not use. Not part of the APF API. 
	 * Method should only be called internally by APF.
	 * @returns {object}
	 */
	this.deserialize = function(oSerializableStep) {
		oBinding.deserialize(oSerializableStep.binding);
		oMessageHandler.check(oStepConfig.id, oSerializableStep.stepId, "sap.apf.core.step.deserialize inconsistent serialization data - id " + oSerializableStep.stepId);
		return this;
	};
	initialize();

	// private functions
	
	function assertValidCategories(aCategories) {
		var i;
		var len = aCategories.length;
		
		for (i = 0; i < len; i++) {
			if (aCategories[i].id !== "initial") {
				oMessageHandler.check(oFactory.existsConfiguration(aCategories[i].id), "Step " + oStepConfig.id + " references undefined category " + aCategories[i].id, sap.apf.core.constants.message.code.errorCheckConfiguration);
			}	
		}
	}
	function initialize() {
		oBinding = oFactory.createBinding(oStepConfig.binding);
		delete oAdditionalConfigurationProperties.binding;
		if (oStepConfig.request !== undefined && oStepConfig.request !== "") {
			oRequest = oFactory.createRequest(oStepConfig.request);
			delete oAdditionalConfigurationProperties.request;
		}
	}
	function areRequestOptionsEqual(oOptions1, oOptions2) {
		var nLength1 = 0;
		var nLength2 = 0;
		var property;
		for(property in oOptions1) {
			nLength1++;
		}
		for(property in oOptions2) {
			nLength2++;
		}
		if (nLength1 !== nLength2) {
			return false;
		}
		for(property in oOptions1) {
            if(!oOptions1.hasOwnProperty(property)) {
                continue;
            }
			if (typeof oOptions1[property] === 'object') {
				if(!areRequestOptionsEqual(oOptions1[property], oOptions2[property])) {
					return false;
				}
			} else {
				if (oOptions1[property] !== oOptions2[property]) {
					return false;
				}
			}
		}
		return true;
	}
	function mappingRequired() {
		if(oStepConfig.filterMapping) {
			if(oStepConfig.filterMapping.requestForMappedFilter &&
			   oStepConfig.filterMapping.target instanceof Array &&
			   oStepConfig.filterMapping.keepSource) {
				return true;
			} else {
 				oMessageHandler.putMessage(oMessageHandler.createMessageObject({
					code : "5104"
				}));
 				return false;
			}
		} else {
			return false;
		}
	}
};

}());
}; // end of sap/apf/core/step.js
if ( !jQuery.sap.isDeclared('sap.apf.core.configurationFactory') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.configurationFactory");







/**
 * @private
 * @class This class loads the configuration object, registers its properties and provides getters to receive references or copies of them.
 */
sap.apf.core.ConfigurationFactory = function(oInject) {
	// Private Vars
	var idRegistry = new sap.apf.utils.Hashtable(oInject.messageHandler);
	var setItem = function(oItem) {
		oInject.messageHandler.check(oItem !== undefined && oItem.hasOwnProperty("id") !== false, "oItem is undefined or property 'id' is missing", sap.apf.core.constants.message.code.errorCheckConfiguration);
		if(!idRegistry){ 
			idRegistry = new sap.apf.utils.Hashtable(oInject.messageHandler);}
		var result = idRegistry.setItem(oItem.id, oItem);
		oInject.messageHandler.check((result === undefined), "Configuration includes duplicated identifiers (IDs)", sap.apf.core.constants.message.code.errorCheckConfigurationWarning);
	};
	var getItemsByType = function(type) {
		var aResults = [];
		if (idRegistry.getNumberOfItems() != 0) {
			idRegistry.each(function(index, element) {
				if (element.type === type) {
					aResults.push(element);
				}
			});
			return aResults;
		} else {
			oInject.messageHandler.putMessage(oInject.messageHandler.createMessageObject({
				code : "5020"
			}));
			return aResults;
		}
	};
	var loadSteps = function(aSteps) {
		oInject.messageHandler.check(aSteps !== undefined && aSteps instanceof Array !== false, "aSteps is missing or not an Array", sap.apf.core.constants.message.code.errorCheckConfiguration);
		for( var i = 0; i < aSteps.length; i++) {
			loadStep(aSteps[i]);
		}
	};
	var loadStep = function(oStep) {
		if (oStep.type === undefined) {
			oStep.type = "step";
		}
		setItem(oStep);
	};
	var loadRequests = function(aRequests) {
		oInject.messageHandler.check(aRequests !== undefined && aRequests instanceof Array !== false, "aRequests is missing or not an Array", sap.apf.core.constants.message.code.errorCheckConfiguration);
		for( var i = 0; i < aRequests.length; i++) {
			loadRequest(aRequests[i]);
		}
	};
	var loadRequest = function(oRequest) {
		if (oRequest.type === undefined) {
			oRequest.type = "request";
		}
		setItem(oRequest);
	};
	var loadBindings = function(aBindings) {
		oInject.messageHandler.check(aBindings !== undefined && aBindings instanceof Array !== false, "aBindings is missing or not an Array", sap.apf.core.constants.message.code.errorCheckConfiguration);
		for( var i = 0; i < aBindings.length; i++) {
			loadBinding(aBindings[i]);
		}
	};
	var loadBinding = function(oBinding) {
		var representationRegistry = new sap.apf.utils.Hashtable(oInject.messageHandler);
		if (oBinding.type === undefined) {
			oBinding.type = "binding";
		}
		oInject.messageHandler.check(oBinding.id !== undefined, "binding has no id");
		oInject.messageHandler.check(oBinding.representations !== undefined && oBinding.representations instanceof Array !== false, "representations for binding " + oBinding.id + " not defined", sap.apf.core.constants.message.code.errorCheckConfiguration);

		checkRepresentationForID();
		checkInitialStepForSingleRepresentation();
		setItem(oBinding);

		function checkRepresentationForID() {
			for( var i = 0; i < oBinding.representations.length; i++) {
				//check for existing id
				if (!(oBinding.representations[i].id && typeof oBinding.representations[i].id === "string")) {
					oInject.messageHandler.putMessage(oInject.messageHandler.createMessageObject({
						code : "5028",
						aParameters : [ oBinding.id ]
					}));
				}
				//check for duplicated id
				if (representationRegistry.setItem(oBinding.representations[i].id, oBinding.representations[i].id)) {
					oInject.messageHandler.putMessage(oInject.messageHandler.createMessageObject({
						code : "5029",
						aParameters : [ oBinding.id ]
					}));
				}
			}
		}

		function checkInitialStepForSingleRepresentation() {
			if (oBinding.representations.length > 1) {
				var aSteps = getItemsByType('step');
				for( var i = 0; i < aSteps.length; i++) {
					if (aSteps[i].categories[0].id === 'initial' && aSteps[i].binding === oBinding.id) {
						var oMessageObject = oInject.messageHandler.createMessageObject({
							code : "5003",
							aParameters : [ aSteps[i].id ]
						});
						oInject.messageHandler.putMessage(oMessageObject);
					}
				}
			}
		}
	};
	var loadCategories = function(aCategories) {
		oInject.messageHandler.check(aCategories !== undefined && aCategories instanceof Array !== false, "aCategories is missing or not an Array", sap.apf.core.constants.message.code.errorCheckConfiguration);
		for( var i = 0; i < aCategories.length; i++) {
			loadCategory(aCategories[i]);
		}
	};
	var loadRepresentationTypes = function(aRepresentationTypes) {
		oInject.messageHandler.check(aRepresentationTypes !== undefined && aRepresentationTypes instanceof Array !== false, "aRepresentationInfo is missing or not an Array", sap.apf.core.constants.message.code.errorCheckConfiguration);
		for( var i in aRepresentationTypes) {
			loadRepresentationType(aRepresentationTypes[i]);
		}
	};
	var loadRepresentationType = function(oRepresentationTypeConfig) {
        var representationConstructorCandidate;
		if (oRepresentationTypeConfig.type === undefined) {
			oRepresentationTypeConfig.type = "representationType";
		}
        representationConstructorCandidate = sap.apf.utils.extractFunctionFromModulePathString(oRepresentationTypeConfig.constructor);
        if(!jQuery.isFunction(representationConstructorCandidate)) {
            oInject.messageHandler.putMessage(oInject.messageHandler.createMessageObject({code : '5030', parameters : [oRepresentationTypeConfig.id]}));
        }
		setItem(oRepresentationTypeConfig);
	};
	var loadFacetFilters = function(aFacetFilters) {
		oInject.messageHandler.check(aFacetFilters !== undefined && aFacetFilters instanceof Array !== false, "Facet filter configuration is missing or not an Array", sap.apf.core.constants.message.code.errorCheckConfiguration);
		for( var i in aFacetFilters) {
			loadFacetFilter.call(this, aFacetFilters[i]);
		}
	};
	var loadFacetFilter = function(oFacetFilter) {
		if (oFacetFilter.type === undefined) {
			oFacetFilter.type = "facetFilter";
		}
		this.addObject(oFacetFilter);
	};
	var loadCategory = function(oCategoryConfig) {
		if (oCategoryConfig.type === undefined) {
			oCategoryConfig.type = "category";
		}
		setItem(oCategoryConfig);
	};
	var loadPredefinedRepresentationTypes = function(aRepresentationTypes){
		loadRepresentationTypes(aRepresentationTypes);
	};
	/**
	 * @private
	 * @class Step templates are runtime objects, which contain analysis step information based on the analytical content configuration.
     * @name sap.apf.core.configurationFactory~StepTemplate
	 */
	var StepTemplate = function(oStepConfig, oFactory) {
		var oStepTemplate = jQuery.extend(true, {}, oStepConfig);
		var aRepresentationInfo = getRepresentationInfo(oStepConfig, oFactory);
		delete oStepTemplate.request;
		delete oStepTemplate.binding;
		delete oStepTemplate.thumbnail;
		delete oStepTemplate.longTitle;
		/**
		 * @memberOf StepTemplate
		 * @description Contains 'stepTemplate'
		 * @returns {string}
		 */
		oStepTemplate.type = "stepTemplate";
		
		/**
         * @private
         * @function
		 * @memberOf sap.apf.core.configurationFactory~StepTemplate
         * @name sap.apf.core.configurationFactory~StepTemplate#isForInitialStep
		 * @description Returns true if category of step configuration equals 'initial'
		 * @returns {boolean}
		 */
		oStepTemplate.isForInitialStep = function() {
			return (oStepTemplate.categories[0].id === 'initial');
        };
        /**
         * @private
         * @function
         * @memberOf sap.apf.core.configurationFactory~StepTemplate
         * @name sap.apf.core.configurationFactory~StepTemplate#getRepresentationInfo
         * @description Returns all representation information that is configured for the step.
         * @returns {object[]}
         */
        oStepTemplate.getRepresentationInfo = function() {
			var aReprInfo = jQuery.extend(true, [], aRepresentationInfo); // clone deep
			for( var i = 0; i < aReprInfo.length; i++) {
				delete aReprInfo[i].id;
				delete aReprInfo[i].type;
				delete aReprInfo[i].constructor;
			}
			return aReprInfo;
		};
		function getRepresentationInfo(oStepConfig, oConfigurationFactory) {
			var aRepresentations;
			var aRepresentationInfo = [];
			if (oStepConfig.binding) {
				aRepresentations = getRepresentations(oStepConfig, oConfigurationFactory);
				for( var i = 0; i < aRepresentations.length; i++) {
					var oRepresentationType = jQuery.extend(true, {}, oConfigurationFactory.getConfigurationById(aRepresentations[i].representationTypeId));
					oRepresentationType.representationId = aRepresentations[i].id;
					oRepresentationType.representationLabel = aRepresentations[i].label;
					aRepresentationInfo.push(oRepresentationType);
				}
				return aRepresentationInfo;
			} else {
				oInject.messageHandler.check(false, 'Step with ID "' + oStepConfig.id + '" does not contain any binding references.', sap.apf.core.constants.message.code.errorCheckConfigurationWarning);
			}
		}
		function getRepresentations(oStepConfig, oConfigurationFactory) {
			var aRepresentations = oConfigurationFactory.getConfigurationById(oStepConfig.binding).representations;
			if (aRepresentations) {
				return aRepresentations;
			} else {
				oInject.messageHandler.check(false, 'Binding of step with ID "' + oStepConfig.id + '" does not contain any representations.', sap.apf.core.constants.message.code.errorCheckConfigurationWarning);
			}
		}
		return oStepTemplate;
	};
	// Private Func
	// Constructor functions
	var Category = function(oCategoryConfig) {
		this.type = oCategoryConfig.type;
		this.id = oCategoryConfig.id;
		this.label = oCategoryConfig.label;
		return this;
	};
	var Thumbnail = function(oThumbnailConfig, oFactory) { // oFactory needed when accessing object of configurationFactory!
		this.type = "thumbnail";
		if (oThumbnailConfig === undefined) {
			return this;
		}
		this.leftUpper = oFactory.createLabel(oThumbnailConfig.leftUpper);
		this.rightUpper = oFactory.createLabel(oThumbnailConfig.rightUpper);
		this.leftLower = oFactory.createLabel(oThumbnailConfig.leftLower);
		this.rightLower = oFactory.createLabel(oThumbnailConfig.rightLower);
		this.altTitle = oFactory.createLabel(oThumbnailConfig.altTitle);
		return this;
	};
	/**
     * @private
	 * @description Creates and returns a new thumbnail object.
	 * @param oThumbnailConfig
	 * @return Object
	 */
	this.createThumbnail = function(oThumbnailConfig) {
		return new Thumbnail(oThumbnailConfig, this);
	};
	var Label = function(oLabelConfig, oFactory) { // oFactory need when accessing object of configurationFactory !!!
		if (oLabelConfig === undefined) {
			return undefined;
		}
		this.type = "label";
		this.kind = oLabelConfig.kind;
		if (this.kind === "text") {
			this.file = oLabelConfig.file;
			this.key = oLabelConfig.key;
		} else if (this.kind === "property") {
			this.property = oLabelConfig.property;
		} else if (this.kind === "sapLabel") {
			this.labelOf = oLabelConfig.labelOf;
		} else {
			return undefined;
		}
		return this;
	};
	/**
     * @private
	 * @param oLabelConfig
	 * @return New Object of type Label
	 */
	this.createLabel = function(oLabelConfig) {
		return new Label(oLabelConfig, this);
	};
	// Public Func
    /**
     * @private
     * @description Loads all properties of the input configuration object, which can also include custom error texts.
     * @param oConfiguration configuration object
     * @returns undefined
     */
	this.loadConfig = function(oConfiguration) {
        idRegistry = new sap.apf.utils.Hashtable(oInject.messageHandler);
        var aRepresentationTypes = sap.apf.core.representationTypes();
        loadPredefinedRepresentationTypes(aRepresentationTypes);
        loadSteps(oConfiguration.steps);
		loadRequests(oConfiguration.requests);
		loadBindings(oConfiguration.bindings);
		loadCategories(oConfiguration.categories);
		if (oConfiguration.representationTypes) {
			loadRepresentationTypes(oConfiguration.representationTypes);	
		}	
		if (oConfiguration.facetFilters) {
			loadFacetFilters.call(this, oConfiguration.facetFilters);
		}
	};
	/**
     * @private
	 * @description Adds an object to the configuration factory
	 * @param {object} configurationObject - Must contain valid values for 'type'-property and 'id'.
     * Further properties are type specific.
     * @returns undefined
	 */
	this.addObject = function(configurationObject) {
        if(!(configurationObject.type in sap.apf.core.constants.configurationObjectTypes)){
            oInject.messageHandler.putMessage(oInject.messageHandler.createMessageObject({
                code: "5033",
                aParams: [configurationObject.type]
            }));
        }
        if(!(configurationObject.property)){
            oInject.messageHandler.putMessage(oInject.messageHandler.createMessageObject({
                code: "5034"
            }));
        }
		idRegistry.setItem(configurationObject.id, configurationObject);
	};
	/**
     * @private
	 * @description Returns a reference of a configuration object. Not a copy.
	 * @param sId
	 * @returns Object
	 */
	this.getConfigurationById = function(sId) {
		return idRegistry.getItem(sId);
	};

	/**
     * @private
	 * @description Returns true, if configuration object exists.
	 * @param sId
	 * @returns {boolean}
	 */
	this.existsConfiguration = function(sId) {
		return idRegistry.hasItem(sId);
	};
	
	/**
     * @private
	 * @description Returns service documents
	 * @returns {Array}
	 */
	this.getServiceDocuments = function() {
		var aRequestItems = getItemsByType("request");
		var aServiceDocuments = [];
		for(var oRequest in aRequestItems) {
			aServiceDocuments.push(aRequestItems[oRequest].service);
		}
		aServiceDocuments = sap.apf.utils.eliminateDuplicatesInArray(oInject.messageHandler, aServiceDocuments);
		return aServiceDocuments;
	};	
	
	/**
     * @private
	 * @description Returns new step templates created from all step configuration objects, containing static information only. Note that a step config object is used to create an object of type stepTempate as well as a runtime object of type step.
	 * @returns Array of objects
	 */
	this.getStepTemplates = function() {
		var aItems = getItemsByType("step");
		var aStepTemplates = [];
		for( var stepConfig in aItems) {
			aStepTemplates[stepConfig] = new StepTemplate(aItems[stepConfig], this);
		}
		return aStepTemplates;
	};
    /**
     * @private
     * @description Returns array of cloned facet filter configurations
     * @returns Array of objects
     */
    this.getFacetFilterConfigurations = function () {
        var facetFilters = getItemsByType("facetFilter");
        var resolvedFunction;
        facetFilters = jQuery.extend(true, [], facetFilters);
        for (var i = 0, len = facetFilters.length; i < len; i++) {
            if (facetFilters[i].preselectionFunction) {
                resolvedFunction = sap.apf.utils.extractFunctionFromModulePathString(facetFilters[i].preselectionFunction);
                if (!jQuery.isFunction(resolvedFunction)) {
                      oInject.messageHandler.putMessage(oInject.messageHandler.createMessageObject({code: '5035', parameters: [facetFilters[i].id]}));
                      facetFilters[i].preselectionFunction = undefined;
                } else {
                    facetFilters[i].preselectionFunction = resolvedFunction;
                }
            }
        }
        return facetFilters;
    };
	/**
     * @private
	 * @description Returns new category objects of all loaded category configuration objects.
	 * @returns Array
	 */
	this.getCategories = function() {
		var aItems = getItemsByType("category");
		var aCategories = [];
		for( var oCategoryConfig in aItems) {
			aCategories[oCategoryConfig] = new Category(aItems[oCategoryConfig]);
		}
		return aCategories;
	};
	/**
     * @private
	 * @description Creates and returns a new step object from its specified configuration object. Creates an initial step if the configuration object specifies so.
	 * @param sStepId Identifies the configuration object. If the step id is not known an error will be thrown.
	 * @returns Object
	 */
	this.createStep = function(sStepId) {
		var oStepConfig = this.getConfigurationById(sStepId);
		oInject.messageHandler.check((oStepConfig !== undefined && oStepConfig.type === "step"), "Error - referenced object is undefined or has not type step", sap.apf.core.constants.message.code.errorCheckConfiguration);
		oInject.messageHandler.check(sap.apf.core.Step !== undefined, "Step must be defined ", sap.apf.core.constants.message.code.errorCheckConfiguration);
		oInject.messageHandler.check(typeof sap.apf.core.Step === "function", "Step must be Ctor function");
		return new sap.apf.core.Step(oInject.messageHandler, oStepConfig, this);
	};
	/**
     * @private
	 * @description Creates and returns a new binding object, by the identified configuration object.
	 * @param sBindingId Identifies the configuration object. If the id is not known an error will be thrown.
	 * @param oTitle Short title, type label.
	 * @param oLongTitle Long title, type label.
	 * @returns {Object}
	 */
	this.createBinding = function(sBindingId, oTitle, oLongTitle) {
		var oBindingConfig = this.getConfigurationById(sBindingId);
		oInject.messageHandler.check((oBindingConfig !== undefined && oBindingConfig.type === "binding"), "Error - oBindingConfig is undefined or has not type binding", sap.apf.core.constants.message.code.errorCheckConfiguration);
		oBindingConfig.oTitle = oTitle;
		oBindingConfig.oLongTitle = oLongTitle;
		return new sap.apf.core.Binding(oInject, oBindingConfig, this);
	};
	/**
     * @private
	 * @description Creates and returns a new request object.
	 * @param {String|Object} - request Request id or request object. If the step id is not known an error will be thrown.
	 * @returns {Object}
	 */
	this.createRequest = function(request) {
		var oMessageObject;
		var oRequestConfig;
		if(typeof request === "string") {
			oRequestConfig = this.getConfigurationById(request);
			if (!(oRequestConfig !== undefined && oRequestConfig.type === "request")) {
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : "5004",
					aParameters : [ request ]
				});
				oInject.messageHandler.putMessage(oMessageObject);
				return undefined;
			}
		} else {
			oRequestConfig = request;
			oInject.messageHandler.check(oRequestConfig.type && oRequestConfig.type === "request" 
				                      && oRequestConfig.service && oRequestConfig.entityType,
					                     'Wrong request configuration when creating a new request');
			if (!oRequestConfig.id) {
				oRequestConfig.id = getUniqueId();
				setItem(oRequestConfig);	
			}
			
		}
		
		return new sap.apf.core.Request(oInject, oRequestConfig);
	
		function getUniqueId() {
		    	var date = new Date();
			    var uniqueInteger = Math.random( ) * date.getTime();
				return uniqueInteger;
		    }
	};
};

}; // end of sap/apf/core/configurationFactory.js
if ( !jQuery.sap.isDeclared('sap.apf.core.readRequest') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.readRequest");



/**
 * @public
 * @class Facade for sap.apf.core.Request for getting data via the OData protocol. This corresponds to a normal HTTP GET method. Creation is done via APF API.
 * @name sap.apf.core.ReadRequest
 * @param {object} oInject Injection object.
 * @param {object} oInject.coreApi Instance of core API.
 * @param {object} oInject.oMessageHandler The APF Message handler.
 * @param {object} oRequest The object represents an OData GET request.
 * @param {string} sService Service defined by the analytical content configuration.
 * @param {string} sEntityType Entity type defined by the analytical content configuration.
 * @returns {sap.apf.core.ReadRequest}
 */
sap.apf.core.ReadRequest = function (oInject, oRequest, sService, sEntityType) {
	var oCoreApi = oInject.coreApi;
	var oMessageHandler = oInject.messageHandler;
	/**
	 * @description Contains 'readRequest'
	 * @returns {string}
	 */
	this.type = "readRequest";
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.ReadRequest#send
	 * @description Executes an OData request.
	 * @param {sap.apf.utils.Filter} oFilter
	 * @param {function} fnCallback  The first argument of the callback function is the received data (as Array). The second argument is {sap.apf.core.EntityTypeMetadata}. The third argument is {sap.apf.core.MessageObject}. 
	 * @param {Object} oRequestOptions - An optional object containing additional query string options
	 * Format: { orderby : [{ property : <property_name>, order : <asc|desc>}], top : <integer>, skip : <integer> }  
	 * @returns undefined
	 */
	this.send = function (oFilter, fnCallback, oRequestOptions) {
		var callbackForRequest = function (oResponse, bNotUpdated) {
			var oMessageObject;
			var oEntityTypeMetadata;
			var aData = [];
			if (oResponse && oResponse.type && oResponse.type === "messageObject") {
				oMessageHandler.putMessage(oResponse); // technically logging
				oMessageObject = oResponse;
			} else {
				aData = oResponse.data;
				oEntityTypeMetadata = oResponse.metadata;
			}
			fnCallback(aData, oEntityTypeMetadata, oMessageObject);
		};
		oRequest.sendGetInBatch(oFilter.getInternalFilter(), callbackForRequest, oRequestOptions);
	};
	/**
	 * @private
     * @deprecated since Version 1.23.1.
	 * @function
	 * @name sap.apf.core.ReadRequest#getMetadata
	 * @description Returns the corresponding meta data object for the read request.
	 * @returns {sap.apf.core.EntityTypeMetadata}
	 */
	this.getMetadata = function () {
		return oCoreApi.getEntityTypeMetadata(sService, sEntityType);
	};
    /**
     * @public
     * @function
     * @name sap.apf.core.ReadRequest#getMetadataFacade
     * @description Returns {sap.apf.core.MetadataFacade} which provides convenience methods for accessing metadata
     * (only for the service document, which is assigned to this read request instance).
     * @param {string} sService Service defined by the request configuration.
     * @returns {sap.apf.core.MetadataFacade}
     */
    this.getMetadataFacade = function () {
        return oCoreApi.getMetadataFacade(sService);
    };
};

}; // end of sap/apf/core/readRequest.js
if ( !jQuery.sap.isDeclared('sap.apf.core.readRequestByRequiredFilter') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.readRequestByRequiredFilter");



/**
 * @public
 * @class Facade for sap.apf.core.Request for getting data via the OData protocol. This corresponds to a normal HTTP GET method. Creation is done via APF API.
 * In addition to the handed over filter argument in method send(), the required filters and HANA view parameters of the configured entity type are applied, which are determined from path filter. 
 * @name sap.apf.core.ReadRequestByRequiredFilter
 * @param {object} oInject Injection object.
 * @param {object} oInject.coreApi Instance of core API.
 * @param {object} oInject.oMessageHandler The APF Message handler.
 * @param {object} oRequest The object represents an OData GET request.
 * @param {string} sService Service defined by the analytical content configuration.
 * @param {string} sEntityType Entity type defined by the analytical content configuration.
 * @returns {sap.apf.core.ReadRequestByRequiredFilter}
 */
sap.apf.core.ReadRequestByRequiredFilter = function (oInject, oRequest, sService, sEntityType) {
	var oCoreApi = oInject.coreApi;
	var oMessageHandler = oInject.messageHandler;
	var oMetadata;
	
	/**
	 * @description Contains 'readRequestByRequiredFilter'
	 * @returns {string}
	 */
	this.type = "readRequestByRequiredFilter";
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.ReadRequestByRequiredFilter#send
	 * @description Executes an OData request.
	 * @param {sap.apf.utils.Filter} oFilter
	 * @param {function} fnCallback The first argument of the callback function is the received data (as Array). The second argument is {sap.apf.core.EntityTypeMetadata}. The third argument is {sap.apf.core.MessageObject}. 
	 * @param {Object} oRequestOptions An optional object containing additional query string options
	 * Format: { orderby : [{ property : <property_name>, order : <asc|desc>}], top : <integer>, skip : <integer> }  
	 * @returns undefined
	 */
	this.send = function (oFilter, fnCallback, oRequestOptions) {
		
		var callbackForRequest = function (oResponse, bNotUpdated) {
			var oMessageObject;
			var oEntityTypeMetadata;
			var aData = [];
			if (oResponse && oResponse.type && oResponse.type === "messageObject") {
				oMessageHandler.putMessage(oResponse); // technically logging
				oMessageObject = oResponse;
			} else {
				aData = oResponse.data;
				oEntityTypeMetadata = oResponse.metadata;
			}
			fnCallback(aData, oEntityTypeMetadata, oMessageObject);
		};
		
		if (!oMetadata) {
			oMetadata = oCoreApi.getMetadata(sService);
		}
		
//		Get HANA view parameters
		var aHanaViewParameters = oMetadata.getHanaViewParameters(sEntityType);
		
//		Get required filters
		var sRequiredFilterProperty = "";
		var oEntityTypeMetadata = oMetadata.getEntityTypeMetadata(sEntityType);
		if (oEntityTypeMetadata.requiresFilter !== undefined && oEntityTypeMetadata.requiresFilter === "true") {
			if (oEntityTypeMetadata.requiredProperties !== undefined) {
				sRequiredFilterProperty = oEntityTypeMetadata.requiredProperties;
			}
		}
		
//		Join HANA view parameters & Required filters
		var aRequiredProperties = sRequiredFilterProperty.split(',');
		for(var i = 0; i<aHanaViewParameters.length; i++){
			aRequiredProperties.push(aHanaViewParameters[i].name); 
		}
		
//		Reduce the context filter to {HANA view parameters + Required filters}
		var oProjectedContextFilter = oCoreApi.getContext().getInternalFilter().reduceToProperty(aRequiredProperties);
		
//		Intersect both filters.
		var oRequestFilter = oFilter.getInternalFilter();
		oRequestFilter.addAnd(oProjectedContextFilter);
		
		oRequest.sendGetInBatch(oRequestFilter, callbackForRequest, oRequestOptions);

	};
	/**
     * @public
     * @function
     * @name sap.apf.core.ReadRequestByRequiredFilter#getMetadataFacade
     * @description Returns {sap.apf.core.MetadataFacade} which provides convenience methods for accessing metadata
     * (only for the service document, which is assigned to this read request instance).
     * @param {string} sService Service defined by the request configuration.
     * @returns {sap.apf.core.MetadataFacade}
     */
    this.getMetadataFacade = function () {
        return oCoreApi.getMetadataFacade(sService);
    };
};

}; // end of sap/apf/core/readRequestByRequiredFilter.js
if ( !jQuery.sap.isDeclared('sap.apf.core.instance') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global jQuery, sap, OData */

jQuery.sap.declare("sap.apf.core.instance");





















/**
 * @class Core Component Instance
 * @name sap.apf.core.Instance
 * @description Creation of new Core Component Instance
 */
sap.apf.core.Instance = function(oMessageHandler) {
    'use strict';
	var that = this;
    var oRememberedPath;
	var oInject = {
		messageHandler : oMessageHandler,
		coreApi : that
	};
	var oResourcePathHandler;
	var oMetadataFactory;
	var oTextResourceHandler;
	var oConfigurationFactory;
	var oPath;
	var oSessionHandler;
	var oPersistence;
	/**
	 * @see sap.apf.core.ajax
	 */
	this.ajax = function(oSettings) {
		return sap.apf.core.ajax(oSettings);
	};

	/**
	 * @see sap.apf.core.odataRequestWrapper
	 */
	this.odataRequest = function(oRequest, fnSuccess, fnError, oBatchHandler) {
		sap.apf.core.odataRequestWrapper(oMessageHandler, oRequest, fnSuccess, fnError, oBatchHandler);
	};

	this.getMessageHandler = function() {
		return oMessageHandler;
	};
	/**
	 * @see sap.apf#putMessage for api definition.
	 * @see sap.apf.core.MessageHandler#putMessage for implementation.
	 */
	this.putMessage = function(oMessage) {
		return oMessageHandler.putMessage(oMessage);
	};
	/**
	 * @see sap.apf.core.MessageHandler#check
	 */
	this.check = function(bExpression, sMessage, sCode) {
		return oMessageHandler.check(bExpression, sMessage, sCode);
	};

	/**
	 * @see sap.apf#createMessageObject for api definition.
	 * @see sap.apf.core.MessageHandler#createMessageObject
	 */
	this.createMessageObject = function(oConfig) {
		return oMessageHandler.createMessageObject(oConfig);
	};

	/**
	 * @see sap.apf.core.MessageHandler#activateOnErrorHandling
	 */
	this.activateOnErrorHandling = function(bOnOff) {
		oMessageHandler.activateOnErrorHandling(bOnOff);
	};

	/**
	 * @see sap.apf.core.MessageHandler#setMessageCallback
	 */
	this.setCallbackForMessageHandling = function(fnCallback) {
		oMessageHandler.setMessageCallback(fnCallback);
	};
	
	/**
	 * @see sap.apf.core.MessageHandler#setApplicationMessageCallback
	 */
	this.setApplicationCallbackForMessageHandling = function(fnCallback) {
		oMessageHandler.setApplicationMessageCallback(fnCallback);
	};

	/**
	 * @see sap.apf.core.MessageHandler#getLogMessages
	 */
	this.getLogMessages = function() {
		return oMessageHandler.getLogMessages();
	};

	/**
	 * @see sap.apf.core.checkForTimeout
	 */
	this.checkForTimeout = function(oServerResponse) {
		var oMessageObject = sap.apf.core.utils.checkForTimeout(oServerResponse);
		// up to now, the error handling was hard coded in checkForTimeout
		if (oMessageObject) {
			oMessageHandler.putMessage(oMessageObject);
		}
		return oMessageObject;
	};
	/**
	 * @description Returns the instance of the UriGenerator. For internal core using only.
	 */
	this.getUriGenerator = function() {
		return sap.apf.core.utils.uriGenerator;
	};

	/**
	 * @see sap.apf.core.MetadataFactory#getMetadata
	 */
	this.getMetadata = function(sAbsolutePathToServiceDocument) {
		return oMetadataFactory.getMetadata(sAbsolutePathToServiceDocument);
	};

	/**
	 * @see sap.apf.core.MetadataFactory#getMetadataFacade
	 */
	this.getMetadataFacade = function() {
		return oMetadataFactory.getMetadataFacade();
	};

	/**
	 * @see sap.apf.core.MetadataFactory#getEntityTypeMetadata
	 */
	this.getEntityTypeMetadata = function(sAbsolutePathToServiceDocument, sEntityType) {
		return oMetadataFactory.getEntityTypeMetadata(sAbsolutePathToServiceDocument, sEntityType);
	};

	/**
	 * @see sap.apf.core.ResourcePathHandler#loadConfigFromFilePath
	 */
	this.loadApplicationConfig = function(sFilePath) {
		oResourcePathHandler.loadConfigFromFilePath(sFilePath);
	};

	/**
	 * @see sap.apf.core.ResourcePathHandler#getConfigurationProperties
	 */
	this.getApplicationConfigProperties = function() {
		return oResourcePathHandler.getConfigurationProperties();
	};

	/**
	 * @see sap.apf.core.ResourcePathHandler#getResourceLocation
	 */
	this.getResourceLocation = function(sResourceIdentifier) {
		return oResourcePathHandler.getResourceLocation(sResourceIdentifier);
	};

	/**
	 * @see sap.apf.core.ResourcePathHandler#getPersistenceConfiguration
	 */
	this.getPersistenceConfiguration = function() {
		return oResourcePathHandler.getPersistenceConfiguration();
	};
	/**
	 * @see sap.apf.core.ResourcePathHandler#getApplicationConfigurationURL
	 */
	this.getApplicationConfigurationURL = function() {
		return oResourcePathHandler.getApplicationConfigurationURL();
	};

	// ConfigurationFactory API

	/**
	 * @see sap.apf.core.ConfigurationFactory#getCategories
	 */
	this.getCategories = function() {
		return oConfigurationFactory.getCategories();
	};
	/**
	 * @see sap.apf.core.ConfigurationFactory#existsConfiguration
	 */
	this.existsConfiguration = function(sId) {
		return oConfigurationFactory.existsConfiguration(sId);
	};
	/**
	 * @see sap.apf.core.ConfigurationFactory#getStepTemplates
	 */
	this.getStepTemplates = function() {
		return oConfigurationFactory.getStepTemplates();
	};
	/**
	 * @see sap.apf.core.ConfigurationFactory#getFacetFilterConfigurations
	 */
	this.getFacetFilterConfigurations = function() {
		return oConfigurationFactory.getFacetFilterConfigurations();
	};

	/**
	 * @description Creates a step object from the configuration object and adds it to the path.
	 * @param {string} sStepId Step id as defined in the analytical configuration.
	 * @param {function} fnStepProcessedCallback Callback function for path update.
	 * @param {string} [sRepresentationId] Parameter, that allows definition of the representation id that shall initially be selected. If omitted the first configured representation will be selected.
	 * @returns {sap.apf.core.Step} oStep Created step.
	 */
	this.createStep = function(sStepId, fnStepProcessedCallback, sRepresentationId) {
		var oStepInstance;

		oMessageHandler.check(sStepId !== undefined && typeof sStepId === "string" && sStepId.length !== 0, "sStepID is  unknown or undefined");
		oStepInstance = oConfigurationFactory.createStep(sStepId);

		setRepresentationById();

		oPath.addStep(oStepInstance, fnStepProcessedCallback);
		return oStepInstance;

		function setRepresentationById() {
			var aRepresentationInfo, i;
			if (oStepInstance && sRepresentationId && typeof sRepresentationId === 'string') {
				aRepresentationInfo = oStepInstance.getRepresentationInfo();
				for(i = 0; i < aRepresentationInfo.length; i++) {
					if (aRepresentationInfo[i].representationId === sRepresentationId) {
						oStepInstance.setSelectedRepresentation(aRepresentationInfo[i].representationId);
						break;
					}
				}
			}
		}
	};

	// Path API
	/**
	 * @see sap.apf.core.Path#getSteps
	 */
	this.getSteps = function() {
		return oPath.getSteps();
	};

	/**
	 * @see sap.apf.core.Path#getInitialStep
	 */
	this.getInitialStep = function() {
		return oPath.getInitialStep();
	};

	/**
	 * @see sap.apf.core.Path#moveStepToPosition
	 */
	this.moveStepToPosition = function(oStep, nPosition, fnStepProcessedCallback) {
		oPath.moveStepToPosition(oStep, nPosition, fnStepProcessedCallback);
	};

	/**
     * @function
     * @name sap.apf.core.Instance#updatePath
	 * @see sap.apf.core.Path#update
	 */
	this.updatePath = function(fnStepProcessedCallback, bContextChanged) {
		oPath.update(fnStepProcessedCallback, bContextChanged);
	};

	/**
	 * @see sap.apf.core.Path#removeStep
	 */
	this.removeStep = function(oStep, fnStepProcessedCallback) {
		oPath.removeStep(oStep, fnStepProcessedCallback);
	};

	/**
	 * @description Creates a new Path instance
	 * @param {boolean} [bRememberActualPath] if true, then the path can be restored
	 *  
	 */
	this.resetPath = function(bRememberActualPath) {
		if (bRememberActualPath) {
			oRememberedPath = jQuery.extend(true, {}, oPath);
		}
		oPath = new sap.apf.core.Path(oInject);
	};
	/**
	 * if resetPath has been called with bRememberActualPath, then the old path
	 * can be restored
	 */
	this.restoreOriginalPath = function() {
		if (oRememberedPath) {
			oPath = oRememberedPath;
		}
	};
	/**
	 * @see sap.apf.core.Path#stepIsActive
	 */
	this.stepIsActive = function(oStep) {
		return oPath.stepIsActive(oStep);
	};

	/**
	 * @see sap.apf.core.Path#serializePath
	 */
	this.serializePath = function() {
		return oPath.serialize();
	};

	/**
	 * @see sap.apf.core.Path#deserializePath
	 */
	this.deserializePath = function(oSerializedAnalysisPath) {
		oPath.deserialize(oSerializedAnalysisPath);
	};
	// Text Resource Handler API
	/**
	 * @see sap.apf#getTextNotHtmlEncoded
	 * @see sap.apf.core.TextResourceHandler#getTextNotHtmlEncoded
	 */
	this.getTextNotHtmlEncoded = function(oLabel, aParameters) {
		return oTextResourceHandler.getTextNotHtmlEncoded(oLabel, aParameters);
	};

	/**
	 * @see sap.apf#getTextHtmlEncoded
	 * @see sap.apf.core.TextResourceHandler#getTextHtmlEncoded
	 */
	this.getTextHtmlEncoded = function(oLabel, aParameters) {
		return oTextResourceHandler.getTextHtmlEncoded(oLabel, aParameters);
	};

	/**
	 * @see sap.apf.core.TextResourceHandler#getMessageText
	 */
	this.getMessageText = function(sCode, aParameters) {
		return oTextResourceHandler.getMessageText(sCode, aParameters);
	};

	/**
	 * @see sap.apf.core.SessionHandler#getXsrfToken
	 */
	this.getXsrfToken = function(sServiceRootPath) {
		return oSessionHandler.getXsrfToken(sServiceRootPath);
	};
	/**
	 * @see sap.apf.core.SessionHandler#setContext
	 */
	this.setContext = function(oContextFilter) {
		oSessionHandler.setContext(oContextFilter);
	};

	/**
	 * @see sap.apf.core.SessionHandler#getContext
	 */
	this.getContext = function() {
		return oSessionHandler.getContext();
	};
	/**
	 * @see sap.apf.core.SessionHandler#getLogicalSystem
	 */
	this.getLogicalSystem = function() {
		return oSessionHandler.getLogicalSystem();
	};

	/**
	 * @see sap.apf#createReadRequest
	 * @description Creates an object for performing an Odata Request get operation.
	 * @param {String|Object} sRequestConfigurationId - identifies a request configuration, which is contained in the analytical configuration.
	 *                        or the request configuration is directly passed as an object oRequestConfiguration.
	 * @returns {sap.apf.core.ReadRequest}
	 */
	this.createReadRequest = function(/* sRequestConfigurationId | oRequestConfiguration */) {
		var oRequest = oConfigurationFactory.createRequest(arguments[0]);
		if (typeof arguments[0] === 'string'){
		 var oRequestConfiguration = oConfigurationFactory.getConfigurationById(arguments[0]);
		}
		else{ 
		 oRequestConfiguration = arguments[0];	
		}
		return new sap.apf.core.ReadRequest(oInject, oRequest, oRequestConfiguration.service, oRequestConfiguration.entityType);
	};
	/**
	 * @see sap.apf#createReadRequestByRequiredFilter
	 * @description Creates an object for performing an Odata Request get operation with required filter for HANA view parameter & required filters.
	 * @param {String|Object} sRequestConfigurationId - identifies a request configuration, which is contained in the analytical configuration.
	 *                        or the request configuration is directly passed as an object oRequestConfiguration.
	 * @returns {sap.apf.core.ReadRequestByRequiredFilter}
	 */
	this.createReadRequestByRequiredFilter = function(/* sRequestConfigurationId | oRequestConfiguration */) {
		var oRequest = oConfigurationFactory.createRequest(arguments[0]);
		if (typeof arguments[0] === 'string'){
		 var oRequestConfiguration = oConfigurationFactory.getConfigurationById(arguments[0]);
		}
		else{ 
		 oRequestConfiguration = arguments[0];	
		}
		return new sap.apf.core.ReadRequestByRequiredFilter(oInject, oRequest, oRequestConfiguration.service, oRequestConfiguration.entityType);
	};
	/**
	 * @description Message configurations are loaded.
	 * @see sap.apf.core.MessageHandler#loadConfig
	 */
	this.loadMessageConfiguration = function(aMessages, bResetRegistry) {
		oMessageHandler.loadConfig(aMessages, bResetRegistry);
	};
	/**
	 * @see sap.apf.core.ConfigurationFactory#loadConfig
	 */
	this.loadAnalyticalConfiguration = function(oConfig) {	
		oConfigurationFactory.loadConfig(oConfig);
	};
	/**
	 * @see sap.apf.core#savePath for api definition.
	 * @see sap.apf.core.Persistence#createPath
	 */
	this.savePath = function(arg1, arg2, arg3, arg4) {
		var sPathId;
		var sName;
		var fnCallback;
        var oExternalObject;
		if (typeof arg1 === 'string' && typeof arg2 === 'string' && typeof arg3 === 'function') {
			sPathId = arg1;
			sName = arg2;
			fnCallback = arg3;
            oExternalObject = arg4;
			oPersistence.modifyPath(sPathId, sName, fnCallback, oExternalObject);
		} else if (typeof arg1 === 'string' && typeof arg2 === 'function') {
			sName = arg1;
			fnCallback = arg2;
            oExternalObject = arg3;
			oPersistence.createPath(sName, fnCallback, oExternalObject);
		} else {
			oMessageHandler.putMessage(sap.apf.core.createMessageObject({
				code : "5027",
				aParameters : [ arg1, arg2, arg3 ]
			}));
		}
	};
	/**
	 * @see sap.apf.core.Persistence#readPaths
	 */
	this.readPaths = function(fnCallback) {
		oPersistence.readPaths(fnCallback);
	};
	/**
	 * @see sap.apf.core.Persistence#openPath
	 */
	this.openPath = function(sPathId, fnCallback, nActiveStep) {
		return oPersistence.openPath(sPathId, fnCallback, nActiveStep);
	};
	/**
	 * @see sap.apf.core.Persistence#deletePath
	 */
	this.deletePath = function(sPathId, fnCallback) {
		oPersistence.deletePath(sPathId, fnCallback);
	};
	
	/**
	 * @see sap.apf#createFilter for api definition 
	 * @see sap.apf.utils.Filter  
	 */
	this.createFilter = function() {
		return new sap.apf.utils.Filter(oMessageHandler);
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core#getActiveStep
	 * @description Returns active step, currently selected step, of analysis path.
	 * @returns {sap.apf.core.Step}
	 */
	this.getActiveStep = function() {
		return oPath.getActiveSteps()[0];
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core#setActiveStep
	 * @description Sets handed over step as the active one.
	 * @param {sap.apf.core.Step} oStep The step to be set as active
	 * @returns undefined 
	 */
	this.setActiveStep = function(oStep) {
		oPath.makeStepActive(oStep);
		var aActiveSteps = oPath.getActiveSteps();
		var i;
		for(i = 0; i < aActiveSteps.length; ++i) {
			oPath.makeStepInactive(aActiveSteps[i]);
		}
		return oPath.makeStepActive(oStep);
	};

	// create local singleton instances...
	oResourcePathHandler = new sap.apf.core.ResourcePathHandler(oInject);
	oTextResourceHandler = new sap.apf.core.TextResourceHandler(oInject);
	oMessageHandler.setTextResourceHandler(oTextResourceHandler);

    oConfigurationFactory = new sap.apf.core.ConfigurationFactory(oInject);

    var oInjectMetadataFactory = {
        entityTypeMetadata : sap.apf.core.EntityTypeMetadata,
        hashtable : sap.apf.utils.Hashtable,
        metadata : sap.apf.core.Metadata,
        metadataFacade : sap.apf.core.MetadataFacade,
        metadataProperty : sap.apf.core.MetadataProperty,
        messageHandler : oInject.messageHandler,
        coreApi : that,
        datajs : OData,
        annotation : sap.apf.core.annotation,
        configurationFactory : oConfigurationFactory
    };
    oMetadataFactory = new sap.apf.core.MetadataFactory(oInjectMetadataFactory);

	oPath = new sap.apf.core.Path(oInject);
	oSessionHandler = new sap.apf.core.SessionHandler(oInject);
	oPersistence = new sap.apf.core.Persistence(oInject);
};

}; // end of sap/apf/core/instance.js
if ( !jQuery.sap.isDeclared('sap.apf.api') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global jQuery, sap */

(function () {
    'use strict';

    jQuery.sap.declare('sap.apf.api');

    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    

    /**
     * @public
     * @class Official API for Analysis Path Framework (APF)<br>
     * <p>
     * The APF API provides a consuming application access to the functionality of the APF. It is assumed that the consuming application extends type {@link sap.apf.Component}.
     * The API reference is returned by method {@link sap.apf.Component#getApi}.
     * <br>
     * Objects and types returned by methods of APF API or passed in parameters of APF API method also belong to the API.
     * These objects and types are documented in their respective sections of this documentation.
     * All methods, objects or types that are not explicitly documented as public are strictly internal and may be changed without prior notice.
     * This also includes all artefacts being classified as experimental.<br>
     * Furthermore there is no need to instantiate required entities directly by applying the JavaScript 'new'-operator on their respective constructors.
     * Instead they should be created by consumers using a create method available on API-level, such as e.g. {@link sap.apf.Api#createMessageObject} for {@link sap.apf.core.MessageObject} or {@link sap.apf.Api#createFilter} for {@link sap.apf.utils.Filter}.
     * </p>
     * @name sap.apf.Api
     * @param {sap.apf.Component} oComponent - A reference to the calling Component.js. The reference provides access to parameters and context.
     * @param {Object} [injectedConstructors] - injected constructors for testing.
     */
    sap.apf.Api = function (oComponent, injectedConstructors) {
        'use strict';

        var probe = null;
        var oMessageHandler;
        var oCoreApi;

        /**
         * @public
         * @description Contains 'api'
         * @returns {string}
         */
        this.type = 'api';

        /**
         * @public
         * @deprecated since Version 1.23.1. Use sap.apf.core.constants instead.
         * @name sap.apf.constants
         * @description Constants to be used by APF consumers.
         * @type {Object}
         */
        this.constants = {};
        /**
         * @public
         * @deprecated since Version 1.23.1. Use sap.apf.core.constants instead.
         * @name sap.apf.constants.eventTypes
         * @description Constants for events used by APF consumers.
         */
        this.constants.eventTypes = sap.apf.core.constants.eventTypes;

        oMessageHandler = new sap.apf.core.MessageHandler();
        oCoreApi = new sap.apf.core.Instance(oMessageHandler);

        /**
         * @public
         * @experimental Revision planned by moving the method into apf.Component.js.
         * @function
         * @name sap.apf.Api#activateOnErrorHandling
         * @description The handling of the window.onerror by the message handler is
         *              either switched on or off. Per default the handling is deactivated.
         * @param {boolean} bHandling Boolean true switches the winow.onerror handling on
         * @returns undefined
         */
        this.activateOnErrorHandling = function (bHandling) {
            return oCoreApi.activateOnErrorHandling(bHandling);
        };

        // --------------- Begin of DEPRECATED -------------------------------- */
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#setCallbackForMessageHandling
         * @description Sets a callback function, so that a message can be further
         *              processed.
         * @param {function} fnCallback
         *            The callback function will be called with the messageObject of type {sap.apf.core.MessageObject}.
         * @returns undefined
         */
        this.setCallbackForMessageHandling = function (fnCallback) {
            return oCoreApi.setCallbackForMessageHandling(fnCallback);
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#setApplicationCallbackForMessageHandling
         * @description Sets an application callback function, which allows applications to register a message callback.
         * @param {function} fnCallback
         *            The callback function will be called with the messageObject of type {sap.apf.core.MessageObject}.
         * @returns undefined
         */
        this.setApplicationCallbackForMessageHandling = function (fnCallback) {
            return oCoreApi.setApplicationCallbackForMessageHandling(fnCallback);
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getLogMessages
         * @description Returns a copy of APF log messages with severity 'fatal'.
         * @returns {string[]} Array containing the message log. The message put last is at first array position.
         */
        this.getLogMessages = function () {
            return oCoreApi.getLogMessages();
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#createStep
         * @description Creates a step object from the configuration object and adds it to the path.
         * @param {string} sStepId Step ID as defined in the analytical content configuration.
         * @param {function} fnStepProcessedCallback Callback for update of steps. Same semantics as in {@link sap.apf.Api#updatePath}
         * @param {string} [sRepresentationId] Parameter that allows definition of the representation id that shall
         * initially be selected. If omitted, the first configured representation will be selected.
         * @return {sap.apf.core.Step}
         */
        this.createStep = function (sStepId, fnStepProcessedCallback, sRepresentationId) {
            return oCoreApi.createStep(sStepId, fnStepProcessedCallback, sRepresentationId);
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getActiveStep
         * @description Returns active step, currently selected step, of analysis path.
         * @returns {sap.apf.core.Step}
         */
        this.getActiveStep = function () {
            return oCoreApi.getActiveStep();
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getCategories
         * @description Returns category objects of all loaded category configuration objects.
         * @returns {object[]} Object with configuration information about a category.
         */
        this.getCategories = function () {
            return oCoreApi.getCategories();
        };
        /**
         * @private
         * @deprecated since Version 1.23.1. NOT REFERENCED
         * @function
         * @name sap.apf.Api#getContext
         * @description Returns a copy of the APF internal context.
         * The content corresponds to the values that have been passed to the APF instance by the latest call of method setContext().
         * @returns {sap.apf.utils.Filter}
         */
        this.getContext = function () {
            return jQuery.extend({}, oCoreApi.getContext());
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getInitialStep
         * @description Returns the initial step if there is one on the first position.
         * Otherwise undefined is returned.
         * @returns {sap.apf.core.Step} || undefined
         */
        this.getInitialStep = function () {
            return oCoreApi.getInitialStep();
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getSteps
         * @description Gets the ordered sequence of all steps contained in the analysis path.
         * Each step is a reference to the object in the path.
         * Each step shall always be identified by the reference to its step object,
         * e.g. in methods like removeStep, moveStepToPosition, setActiveStep, etc.
         * @returns {sap.apf.core.Step[]}
         */
        this.getSteps = function () {
            return oCoreApi.getSteps();
        };
        //noinspection JSValidateJSDoc
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getStepTemplates
         * @description Returns step templates based on all steps configured in the analytical content configuration.
         * A step template contains static information and convenience functions.
         * @returns {sap.apf.core.configurationFactory.StepTemplate[]}
         */
        this.getStepTemplates = function () {
            return oCoreApi.getStepTemplates();
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getFacetFilterConfigurations
         * @description Returns all facet filters configured in the analytical content configuration.
         * @returns {Array} Contains facet filter configuration objects
         */
        this.getFacetFilterConfigurations = function () {
            return oCoreApi.getFacetFilterConfigurations();
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getApplicationConfigProperties
         * @description This function returns those properties of the application configuration file that are not internally used.
         * @returns {object}
         */
        this.getApplicationConfigProperties = function () {
            return oCoreApi.getApplicationConfigProperties();
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#moveStepToPosition
         * @description Moves a step in the analysis path to the specified target position.
         * The step cannot be moved before the initial step.
         * In case of conflict it will be moved to the position directly following the initial step.
         * Note that a path may not contain an initial step, but if so, it is on position zero.
         * @param {sap.apf.core.Step} oStep The step object to be moved
         * @param {number} nPosition The target position. Must be a valid position in the path, between zero and length-1.
         * @param {function} fnStepProcessedCallback Callback for update of steps. Same semantics as in {@link sap.apf.Api#updatePath}
         * @returns undefined
         */
        this.moveStepToPosition = function (oStep, nPosition, fnStepProcessedCallback) {
            return oCoreApi.moveStepToPosition(oStep, nPosition, fnStepProcessedCallback);
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#removeStep
         * @description Removes a step from the analysis path.
         * @param {sap.apf.core.Step} oStep The step object to be removed. The reference must be an object contained in the path. Otherwise, a message will be put.
         * @param {function} fnStepProcessedCallback Callback for update of steps. Same semantics as in {@link sap.apf.Api#updatePath}
         * @returns undefined
         */
        this.removeStep = function (oStep, fnStepProcessedCallback) {
            return oCoreApi.removeStep(oStep, fnStepProcessedCallback);
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#resetPath
         * @description Removes all steps from the path and removes active step.
         * @returns undefined
         */
        this.resetPath = function () {
            return oCoreApi.resetPath();
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#setActiveStep
         * @description Sets handed over step as the active one.
         * @param {sap.apf.core.Step} oStep The step to be set as active
         * @returns undefined
         */
        this.setActiveStep = function (oStep) {
            return oCoreApi.setActiveStep(oStep);
        };

        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#stepIsActive
         * @description Checks whether a step is active or not.
         * @param {sap.apf.core.Step} oStep Step reference
         * @returns {boolean}
         */
        this.stepIsActive = function (oStep) {
            return oCoreApi.stepIsActive(oStep);
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#updatePath
         * @description The steps in the path will be updated sequentially - starting with the analysis step at position 0.
         * Update of a step means sending an OData request and providing the step representation with the request response data.
         * Actual filter values that need to be sent with the request for a specific step in the update sequence are determined by transforming selections on step
         * representations of all precedent steps into a cumulative filter expression.
         * Furthermore the representation of the current step is queried for request options.
         * <br>
         * Following aspects of analysis path update are noteworthy:
         * <ul>
         * <li>An OData request for update of a specific step will only be sent if at least one of both determined values, cumulative Filter or request options,
         * has changed between the last update for this step where a request was sent and the current update cycle.</li>
         * <li>Because transformation of selections on a UI representation into a filter expression is based on current
         * data, OData requests need to be sent sequentially following the order of steps in the analysis path.
         * In other words: request for step n can earliest be sent once data for step n-1 has been received and evaluated</li>
         * </ul>
         * @param {function} fnStepProcessedCallback Callback function that is called for each step during the update of an analysis path.
         * First argument of the callback function is the step instance.
         * The second argument is a boolean indicator, telling whether data for the step has been updated with current request response data or not.
         * Data of a step will not be updated if there is no difference in OData request attributes between previous and current (potential) update.
         * @returns undefined
         */
        this.updatePath = function (fnStepProcessedCallback) {
            return oCoreApi.updatePath(fnStepProcessedCallback);
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getApfLocation
         * @description Returns the location of the APF library on the server.
         * @returns {string}
         */
        this.getApfLocation = function () {
            return oCoreApi.getUriGenerator().getApfLocation();
        };

        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#readPaths
         * @description Reads all stored paths of the currently logged on user from server.
         * Result is returned as a list sorted by last changed date and time of a saved path in descending order.
         * @param {function} fnCallback The first argument of the callback function is an object with property paths and status.
         * The second argument is {sap.apf.core.EntityTypeMetadata}.
         * The third argument is undefined or {sap.apf.core.MessageObject} if a message occurred.
         * @returns undefined
         */
        this.readPaths = function (fnCallback) {
            return oCoreApi.readPaths(fnCallback);
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#savePath
         * @description Saves or modifies the current path on server side under the provided name.
         * @param {string} [sPathId] If provided the path identified by the ID is modified with the current path.
         * If omitted the current path will be created as new saved path with a new ID.
         * @param {string} sName Name of the path to be saved
         * @param {function} fnCallback The first argument of the callback function is an object with property AnalysisPath and status.
         * The second argument is {sap.apf.core.EntityTypeMetadata}.
         * The third argument is undefined or {sap.apf.core.MessageObject} if a message occurred.
         * @returns undefined
         */
        this.savePath = function (sPathId, sName, fnCallback) {
            oCoreApi.savePath(sPathId, sName, fnCallback);
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#openPath
         * @description Opens a path, that has been stored on server side and replaces the current path.
         * @param {string} sPathId Identifies the analysis path to be opened
         * @param {function} fnCallback The first argument of the callback function is a JS object with property path, that holds the stored path and status. The second argument is {sap.apf.core.EntityTypeMetadata}. The third argument is undefined or {sap.apf.core.MessageObject} if a message occurred.
         * @param {number} [nActiveStep] Sets the active step.
         * @returns undefined
         */
        this.openPath = function (sPathId, fnCallback, nActiveStep) {
            return oCoreApi.openPath(sPathId, fnCallback, nActiveStep);
        };

        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#deletePath
         * @description Deletes the path with the given ID on server
         * @param {string} sPathId Identifies the analysis path to be deleted
         * @param {function} fnCallback The first argument of the callback function is a JS object, that holds the property status. The second argument is {sap.apf.core.EntityTypeMetadata}. The third argument is undefined or {sap.apf.core.MessageObject} if a message occurred.
         * @returns undefined
         * @deprecated since Version 1.23.1.
         */
        this.deletePath = function (sPathId, fnCallback) {
            return oCoreApi.deletePath(sPathId, fnCallback);
        };

        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#setContext
         * @description Sets an initial path filter for an APF instance.
         * @param {sap.apf.utils.Filter} oFilter  Filter containing initial values that are used for each OData request during update of analysis path.
         * Contained values are automatically applied to HANA view parameters and filter properties of an OData request.
         * Furthermore the values are used for determination of the logical system.
         * The filter object shall be created by method {@link sap.apf.Api#createFilter}
         * @returns undefined
         */
        this.setContext = function (oFilter) {
            return oCoreApi.setContext(oFilter);
        };

        /**
         * @private
         * @deprecated since Version 1.23.1. Remains in api in order to maintain downward compatibility to 3 Wave 5 apps.
         * @function
         * @name sap.apf.Api#addFacetFilter
         * @description Injects the application facet filter component into APF layout placeholder
         * @returns undefined
         */
        this.addFacetFilter = function (facetFilter) {
            oUiApi.getLayoutView().getController().addFacetFilter(facetFilter);
        };        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getEventCallback
         * @param {sap.apf.core.constants.eventTypes} sEventType is the type of event for registering the fnCallback for that particular event type
         * @returns the callback registered for the particular event type.
         */
        this.getEventCallback = function (sEventType) {
            return oUiApi.getEventCallback(sEventType);
        };

// --------------- end of DEPRECATED ------------------------------------------ */

        /**
         * @public
         * @function
         * @name sap.apf.Api#putMessage
         * @description A message is passed to the APF message handler for further processing.
         *              All message specific settings (e.g. message code or severity) need to be passed within an APF message object instance.
         * @param {sap.apf.core.MessageObject} oMessage The message object shall be created by method {@link sap.apf.Api#createMessageObject}.
         * @returns undefined
         */
        this.putMessage = function (oMessage) {
            return oCoreApi.putMessage(oMessage);
        };
        /**
         * @public
         * @function
         * @name sap.apf.Api#createMessageObject
         * @description Creates a message object, which is the mandatory parameter for API method putMessage.
         *              So first create the message object and afterwards call putMessage with the message object as argument.
         * @param {object} oConfig Configuration object for the message object.
         * @param {string} oConfig.code The message is classified by its code. The code identifies an entry in the message configuration.
         * @param {array} [oConfig.aParameters] Additional parameters for the message. The parameters are filled into the message text,
         *                                      when the message will be processed by the text resource handler.
         * @param {object} [oConfig.oCallingObject] Reference of the calling object. This can be used later to visualize on the user interface, where the message occurred.
         * @param {string} [oConfig.rawText] Raw text for non translated messages.
         * @returns {sap.apf.core.MessageObject}
         */
        this.createMessageObject = function (oConfig) {
            return oCoreApi.createMessageObject(oConfig);
        };

        /**
         * @public
         * @function
         * @name sap.apf.Api#getTextHtmlEncoded
         * @description Retrieves a text and applies HTML encoding
         * @param {object} oLabel || {string} Label object or text key
         * @param {string[]} aParameters Array with parameters to replace place holders in text.
         * @returns {string}
         */
        this.getTextHtmlEncoded = function (oLabel, aParameters) {
            return oCoreApi.getTextHtmlEncoded(oLabel, aParameters);
        };
        /**
         * @public
         * @function
         * @name sap.apf.Api#getTextNotHtmlEncoded
         * @description Retrieves a text without application of HTML encoding
         * @param {object} oLabel || {string} Label object or text key
         * @param {string[]} aParameters Array with parameters to replace place holders in text.
         * @returns {string}
         */
        this.getTextNotHtmlEncoded = function (oLabel, aParameters) {
            return oCoreApi.getTextNotHtmlEncoded(oLabel, aParameters);
        };
        /**
         * @public
         * @experimental Revision planned by moving the method into apf.Component.js.
         * @deprecated since Version 1.23.1.
//         * FIXME The apf.api instance loads the configuration file provided the filePath is configured in the component parameters.
         * @function
         * @name sap.apf.Api#loadApplicationConfig
         * @description Loads a new  application configuration in JSON format. When called many times, the file is loaded only the first time.
         * @param {string} sFilePath The absolute path of an application configuration file. Host and port will be added in front of this path.
         */
        this.loadApplicationConfig = function (sFilePath) {
            oCoreApi.loadApplicationConfig(sFilePath);
        };

        /**
         * @public
         * @function
         * @name sap.apf.Api#createFilter
         * @description Creates an empty filter object.
         * Its methods can be used to create a logical filter expression.
         * @returns {sap.apf.utils.Filter}
         */
        this.createFilter = function () {
            return oCoreApi.createFilter();
        };

        /**
         * @public
         * @function
         * @name sap.apf.Api#addPathFilter
         * @param {sap.apf.utils.Filter} filter
         * @description  Adds a path filter fragment for a path context.
         * Creates a unique fragment and a corresponding identifier.
         * Subsequent changes need to be done by the update method providing the identifier.
         * @returns  {number} ID to be provided for later updates of the same fragment.
         */
        this.addPathFilter = function (filter) {
            return oPathContextHandler.add(filter);
        };
        /**
         * @public
         * @function
         * @name sap.apf.Api#updatePathFilter
         * @param {number|string} id Identifier of the path filter fragment as it was returned by addPathFilter method.
         * When using an ID of type string the caller must ensure that it is unique.
         * @param {sap.apf.utils.Filter} filter
         * @description Updates or creates a path filter fragment for the given identifier by fully replacing the existing one.
         * @returns {string} id for update
         */
        this.updatePathFilter = function (id, filter) {
            oPathContextHandler.update(id, filter);
        };
        /**
         * @public
         * @function
         * @name sap.apf.Api#getPathFilter
         * @param {number|string} id - Identifier of the path filter fragment as it was returned by addPathFilter method.
         * @description Gets a path filter fragment for the given identifier by fully replacing the existing one.
         * @returns {sap.apf.utils.Filter} filter for id
         */
        this.getPathFilter = function (id) {
            return oPathContextHandler.get(id);
        };
        /**
         * @public
         * @see sap.apf#createReadRequest
         * @description Creates an object for performing an Odata Request get operation.
         * @param {String|Object} requestConfiguration - identifies a request configuration, which is contained in the analytical configuration.
         *                        or the request configuration is directly passed as an object oRequestConfiguration.
         * @returns {sap.apf.core.ReadRequest}
         */
        this.createReadRequest = function (requestConfiguration) {
            return oCoreApi.createReadRequest(requestConfiguration);
        };
        /**
         * @public
         * @see sap.apf#createReadRequestByRequiredFilter
         * @description Creates an object for performing an Odata Request get operation with required filter for HANA view parameter & required filters.
         * @param {String|Object} requestConfiguration - identifies a request configuration, which is contained in the analytical configuration.
         *                        or the request configuration is directly passed as an object oRequestConfiguration.
         * @returns {sap.apf.core.ReadRequestByRequiredFilter}
         */
        this.createReadRequestByRequiredFilter = function (requestConfiguration) {
            return oCoreApi.createReadRequestByRequiredFilter(requestConfiguration);
        };

        var oPathContextHandler = new sap.apf.utils.PathContextHandler({ setContext: oCoreApi.setContext }, oCoreApi.getMessageHandler());
        var oSerializationMediator = new sap.apf.utils.SerializationMediator({coreApi : oCoreApi, pathContextHandler : oPathContextHandler}); 

        var oSBHandlerDependencies = {
            getApplicationConfigProperties: oCoreApi.getApplicationConfigProperties,
            createReadRequestByRequiredFilter: oCoreApi.createReadRequestByRequiredFilter,
            getTextNotHtmlEncoded: oCoreApi.getTextNotHtmlEncoded,
            oComponent: oComponent,
            oMessageHandler: oCoreApi.getMessageHandler()
        };

        var oSBHandler = new sap.apf.utils.SmartBusinessHandler(oSBHandlerDependencies);

        var dependencies = {
            oCoreApi: oCoreApi,
            oPathContextHandler: oPathContextHandler,
            oSerializationMediator: oSerializationMediator,
            oSBHandler: oSBHandler,
            oComponent: oComponent
        };
        var oUiApi = new sap.apf.ui.Instance(dependencies);

        /**
         * @private
         * @experimental Not yet final
         * @function
         * @name sap.apf.core.Instance#createRepresentation
         * @description Method to be used APF internally by the binding class to create instances from representation constructors.
         * Reason for declaring the method here, in the scope of APF API, and assigning it to the sap.apf.core-instance, is that the method requires
         * the core and the UI instance to be passed to the representation constructors.
         * @param {string} sRepresentationConstructorPath - A string maintained in the analytical configuration that contains the module path of the respective representation.
         * @param {object} oConfig - The representation specific configuration object as maintained in the analytical configuration.
         * @returns {sap.apf.ui.representations.representationInterface}
         */
        oCoreApi.createRepresentation = function (sRepresentationConstructorPath, oConfig) {
            var interfaceProxy = new sap.apf.ui.representations.RepresentationInterfaceProxy(oCoreApi, oUiApi);
            var Representation = sap.apf.utils.extractFunctionFromModulePathString(sRepresentationConstructorPath);
            return new Representation(interfaceProxy, oConfig);
        };

        /**
         * @public
         * @experimental Method name tentative.
         * @function
         * @name sap.apf.Api#selectionChanged
         * @description Calls the sap.apf.core.instance#updatePath (also see {@link sap.apf.core.Path#update}) with proper callback for UI.
         *                It also refreshes the steps either from the active step or
         *                all the steps depending on the boolean value passed.
         * @param {boolean} bRefreshAllSteps
         */
        this.selectionChanged = function (bRefreshAllSteps) {
            oUiApi.selectionChanged(bRefreshAllSteps);
        };

        /**
         * @public
         * @experimental Revision planned by moving the method into apf.Component.js.
         * @function
         * @name sap.apf.Api#createApplicationLayout
         * @description Creates the APF application layout.
         * @returns {sap.m.App} - the root element of a UI5 mobile application
         */
        this.createApplicationLayout = function () {
            return oUiApi.createApplicationLayout();
        };

        /**
         * @public
         * @experimental Revision planned for method name.
         * @deprecated since Version 1.23.1. Remains in api in order to maintain downward compatibility to 3 Wave 5 apps.
         * @function
         * @name sap.apf.Api#addMasterFooterContent
         * @description Adds an element to the footer area.
         * @param {object} oControl any valid UI5 control.
         */
        this.addMasterFooterContent = function (oControl) {
            return oUiApi.addMasterFooterContentRight(oControl);
        };

        /**
         * @public
         * @experimental Revision planned for all parameter objects of callback function.
         * @function
         * @name sap.apf.Api#setEventCallback
         * @description Register the function callback to be executed on the given event type.
         *                fnCallback will be executed under a context and will be passed with arguments depending on the event type.
         * @param {sap.apf.core.constants.eventTypes} sEventType is the type of event for registering the fnCallback for that particular event type
         *                    printTriggered - Registers a callback for initial page print, this callback returns
         *                                     2d array
         *                    contextChanged : Registers a callback for context change, which will set the context of the application
         * @param {function} fnCallback that will be executed depending on the event type.
         * @returns {boolean} true or false based on success or failure of registering the listener.
         */
        this.setEventCallback = function (sEventType, fnCallback) {
            switch (sEventType) {
                case sap.apf.core.constants.eventTypes.contextChanged:
                    oUiApi.setEventCallback(sEventType, fnCallback);
                    return true;
                case sap.apf.core.constants.eventTypes.printTriggered:
                    oUiApi.setEventCallback(sEventType, fnCallback);
                    return true;
                case sap.apf.core.constants.eventTypes.format:
                    oUiApi.setEventCallback(sEventType, fnCallback);
                    return true;
                default:
                    return false;
            }
        };

        /**
         * Injects all internal references to a probe object whose constructor is injected.
         */
        if ( injectedConstructors ) {
            if ( injectedConstructors.probe ) {
                //noinspection JSUnusedAssignment
                probe = new injectedConstructors.probe({
                    coreApi: oCoreApi,
                    component: oComponent,
                    uiApi: oUiApi,
                    pathContextHandler: oPathContextHandler,
                    serializationMediator: oSerializationMediator,
                    sbHandler: oSBHandler
                });
            }
        }
    };
}());

}; // end of sap/apf/api.js
if ( !jQuery.sap.isDeclared('sap.apf.Component') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global jQuery, sap */

(function () {
    'use strict';

    jQuery.sap.declare("sap.apf.Component");

    jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

    

    /**
     * @public
     * @class Base Component for all APF based applications.
     * @name sap.apf.Component
     * @extends sap.ui.core.UIComponent
     */
    sap.ui.core.UIComponent.extend("sap.apf.Component", {
        oApi: null,

        metadata: {
            "name": "CoreComponent",
            "version": "0.0.1",
            "publicMethods": [ "getApi" ],
            "dependencies": {
                "libs": [ "sap.m", "sap.ui.ux3", "sap.ca.ui"]
            }
        },

        /**
         * @public
         * @description Initialize the Component instance after creation. The component, that extends this component should call this method.
         * @function
         * @name sap.apf.Component.prototype.init
         */
        init: function () {
            this.oApi = new sap.apf.Api(this);
            this.oApi.activateOnErrorHandling(true);

            //BLR team hook into!
            sap.ui.core.UIComponent.prototype.init.apply(this, arguments);
        },

        /**
         * @public
         * @description Creates the content of the component. A component, that extends this component should call this method.
         * @function
         * @name sap.apf.Component.prototype.createContent
         * @returns {sap.ui.core.Control} the content
         */
        createContent: function () {
            //BLR team hook into! Delete the next statement, if component creation is defined here.
            return sap.ui.core.UIComponent.prototype.createContent.apply(this, arguments);
        },

        /**
         * @public
         * @function
         * @name sap.apf.Component#getApi
         * @description Returns the instance of the APF API.
         * @returns {sap.apf.Api}
         */
        getApi: function () {
            return this.oApi;
        }
    });
}());
}; // end of sap/apf/Component.js
