// This file has been generated by the SAPUI5 'AllInOne' Builder
function TestObject() {
	this.name = "TestObject";
};

TestObject.prototype.getName = function() {
	return this.name;
};

TestObject.prototype.setName = function(iName) {
	this.name = iName;
};

jQuery.sap.declare('sap.zen.crosstab.library-all');
jQuery.sap.declare('sap.zen.crosstab.nonphx.logic'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.CrosstabCellApi') ) {
jQuery.sap.declare("sap.zen.crosstab.CrosstabCellApi");

// for external API to the outside: iRow/iCol is zero-based in the grid
sap.zen.crosstab.CrosstabCellApi = function (oCrosstab, iFixedRowHeaders, iFixedColHeaders, iTotalDataColumns,
		iTotalDataRows) {
	"use strict";

	var oDataArea = oCrosstab.getDataArea();
	var oColHeaderArea = oCrosstab.getColumnHeaderArea();
	var oRowHeaderArea = oCrosstab.getRowHeaderArea();
	var oDimensionHeaderArea = oCrosstab.getDimensionHeaderArea();

	this.getTableCell = function (iRow, iCol) {
		var oCell = null;
		if (iCol >= iFixedRowHeaders && iRow >= iFixedColHeaders) {
			// data cell
			oCell = oDataArea.getCell(iRow - iFixedColHeaders, iCol - iFixedRowHeaders);
		} else if (iCol < iFixedRowHeaders && iRow < iFixedColHeaders) {
			// dim header cell
			oCell = oDimensionHeaderArea.getCell(iRow, iCol);
		} else if (iCol >= iFixedRowHeaders && iRow < iFixedColHeaders) {
			// col header cell
			oCell = oColHeaderArea.getCell(iRow, iCol - iFixedRowHeaders);
		} else if (iCol < iFixedRowHeaders && iRow >= iFixedColHeaders) {
			// row header cell
			oCell = oRowHeaderArea.getCell(iRow - iFixedColHeaders, iCol);
		}
		return oCell;
	};

	// gets a table cell when arbitrary row/col is given.
	// iRow/iCol may point to a NULL cell in case a cell
	// has row or col span > 1. In that case, return
	// the "actual" non-null cell that belongs to the coordinates
	this.getTableCellWithSpans = function (iRow, iCol) {
		var oCell = this.getTableCell(iRow, iCol);
		// search backward horizontally first
		// on each horizontal position, search for a vertical cell
		var iColIdx = iCol--;
		while (!oCell && iColIdx >= 0) {
			var iRowIdx = iRow;
			oCell = this.getTableCell(iRowIdx, iColIdx);
			if (oCell && oCell.isLoading()) {
				// stop processing when finding loading cell
				// caller must react and cancel all calculations
				return oCell;
			}
			if (!oCell) {
				iRowIdx--;
				while (!oCell && iRowIdx >= 0) {
					oCell = this.getTableCell(iRowIdx, iColIdx);
					iRowIdx--;
				}
				if (oCell) {
					if (oCell.isLoading()) {
						return oCell;
					}
					var iLastRow = oCell.getTableRow() + oCell.getRowSpan() - 1;
					if (iLastRow < iRow) {
						// plausibility check: the found cell must have the
						// initial row in its rowspan, otherwise it is
						// a different cell already which we don't want
						oCell = null;
					}
				}
			}
			iColIdx--;
		}
		return oCell;
	};

	this.getTableRowCnt = function () {
		return iTotalDataRows + iFixedColHeaders;
	};

	this.getTableColCnt = function () {
		return iTotalDataColumns + iFixedRowHeaders;
	};

	this.getTableMaxScrollRowCnt = function () {
		return iTotalDataRows;
	};

	this.getTableMaxScrollColCnt = function () {
		return iTotalDataColumns;
	};

	this.getTableFixedRowHeaderColCnt = function () {
		return iFixedRowHeaders;
	};

	this.getTableFixedColHeaderRowCnt = function () {
		return iFixedColHeaders;
	};

};
}; // end of sap/zen/crosstab/CrosstabCellApi.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.CrosstabTestProxy') ) {
jQuery.sap.declare("sap.zen.crosstab.CrosstabTestProxy");

sap.zen.crosstab.CrosstabTestProxy = function(oCrosstab, oEventHandler, oRenderEngine) {
	
	var bTestAction = false;
	
	function fireHoverOrSelect(oArea, iRow, iCol, fAction) {
		var oCell = oArea.getDataModel().getCellWithSpan(iRow, iCol);
		if (oCell) {
			var e = {};
			var oDomCell = $('#' + oCell.getId());
			if (oDomCell && oDomCell.length > 0) {
				e.target = oDomCell[0];
				fAction(e);
			}
		}
	}

	this.hoverCell = function (oArea, iRow, iCol) {
		fireHoverOrSelect(oArea, iRow, iCol, oEventHandler.executeOnMouseEnter);
	};

	this.selectCell = function (oArea, iRow, iCol) {
		fireHoverOrSelect(oArea, iRow, iCol, oEventHandler.executeOnClickAction);
	};
	
	this.setTestAction = function(bIsTestAction) {
		bTestAction = bIsTestAction;
	};

	this.getTestAction = function() {
		return bTestAction;
	};

	this.testClickSortOrHierarchy = function(oArea, iRow, iCol) {
		var oCell = oArea.getDataModel().getCellWithSpan(iRow, iCol);
		if (oCell) {
			var oTarget = $('#sort_' + oCell.getId());
			if (oTarget && oTarget.length > 0) {
				var e = {};
				e.target = oTarget[0];
				oEventHandler.executeOnClickAction(e);
			}
		}
	};
	
	this.doubleClickColResize = function (iRow, iCol) {
		var oCell = oCrosstab.getColumnHeaderArea().getCell(iRow, iCol);
		if (oCell) {
			var sId = "resi_" + oCell.getId();
			var e = {};
			e.target = {};
			e.target.id = sId;
			oEventHandler.executeOnDblClickAction(e);
		}
	};
};
}; // end of sap/zen/crosstab/CrosstabTestProxy.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.IDataCell') ) {
jQuery.sap.declare("sap.zen.crosstab.IDataCell");

// Data Cell interface for callback
sap.zen.crosstab.IDataCell = function(oDataCell) {
	"use strict";
	this.getText = function() {
		return oDataCell.getText();
	};

	this.getId = function() {
		return oDataCell.getId();
	};

	this.getRow = function() {
		return oDataCell.getRow();
	};

	this.getCol = function() {
		return oDataCell.getCol();
	};
};
}; // end of sap/zen/crosstab/IDataCell.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.IHeaderCell') ) {
jQuery.sap.declare("sap.zen.crosstab.IHeaderCell");

// Header Cell interface for callback
sap.zen.crosstab.IHeaderCell = function(oHeaderCell) {
	"use strict";
	this.getText = function() {
		return oHeaderCell.getText();
	};

	this.getId = function() {
		return oHeaderCell.getId();
	};

	this.getRow = function() {
		return oHeaderCell.getRow();
	};

	this.getCol = function() {
		return oHeaderCell.getCol();
	};
};
}; // end of sap/zen/crosstab/IHeaderCell.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.PropertyBag') ) {
jQuery.sap.declare("sap.zen.crosstab.PropertyBag");

sap.zen.crosstab.PropertyBag = function (oCrosstab) {

	var bDebugMode = false;
	var bMobileMode = false;
	var bPixelScrolling = false;
	var bSelectionEnabled = false;
	var bHasToolbar = false;
	var iToolbarHeight = 0;
	var bDisplayExceptions = false;
	var bEnableColResize = true;
	var bTestMobileMode = false;
	var sContextMenuCommand = null;
	var iMaxHeaderWidth = 0;

	this.setMaxHeaderWidth = function(piHeaderWidth) {
		iMaxHeaderWidth = piHeaderWidth;
	};
	
	this.getMaxHeaderWidth = function() {
		return iMaxHeaderWidth;
	};
	
	this.isDebugMode = function () {
		return bDebugMode;
	};

	this.setDebugMode = function (pbDebugMode) {
		bDebugMode = pbDebugMode;
	};

	this.isMobileMode = function () {
		return bMobileMode;
	};

	this.isTestMobileMode = function () {
		return bTestMobileMode;
	};

	this.setMobileMode = function (pbMobileMode) {
		bMobileMode = pbMobileMode;
	};

	this.isPixelScrolling = function () {
		return bPixelScrolling;
	};

	this.setPixelScrolling = function (pbPixelScrolling) {
		bPixelScrolling = pbPixelScrolling;
	};

	this.isSelectionEnabled = function () {
		return bSelectionEnabled;
	};

	this.setSelectionEnabled = function (pbSelectionEnabled) {
		bSelectionEnabled = pbSelectionEnabled;
	};

	this.isDisplayExceptions = function () {
		return bDisplayExceptions;
	};

	this.setDisplayExceptions = function (pbDisplayExceptions) {
		bDisplayExceptions = pbDisplayExceptions;
	};

	this.addText = function (sKey, sText) {
		sap.zen.CrosstabTextCache.oTexts[sKey] = sText;
	};

	this.getText = function (sKey) {
		return sap.zen.CrosstabTextCache.oTexts[sKey];
	};

	this.setContextMenuCommand = function (psContextMenuCommand) {
		sContextMenuCommand = psContextMenuCommand;
	};

	this.getContextMenuCommand = function () {
		return sContextMenuCommand;
	};

	this.setHasToolbar = function (pbHasToolbar) {
		bHasToolbar = pbHasToolbar;
	};

	this.hasToolbar = function () {
		return bHasToolbar;
	};

	this.setToolbarHeight = function (piToolbarHeight) {
		iToolbarHeight = piToolbarHeight;
	};

	this.getToolbarHeight = function () {
		var iHeight = 0;
		if (bHasToolbar) {
			iHeight = iToolbarHeight;
		}
		return iHeight;
	};

	this.setEnableColResize = function (pbEnableColResize) {
		bEnableColResize = pbEnableColResize;
	};

	this.isEnableColResize = function () {
		return bEnableColResize;
	};

	this.addSortingTextLookup = function (sKey, oSortingTextLookup) {
		sap.zen.CrosstabTextCache.oSortingTextLookupTable[sKey] = oSortingTextLookup;
	};

	this.getSortingAltText = function (sKey) {
		var sAltText = "";
		if (sap.zen.CrosstabTextCache.oSortingTextLookupTable[sKey]) {
			sAltText = sap.zen.CrosstabTextCache.oSortingTextLookupTable[sKey].alttext;
		}
		return sAltText;
	};

	this.getSortingToolTip = function (sKey) {
		var sTipKey = null;
		var sToolTip = "";
		if (sap.zen.CrosstabTextCache.oSortingTextLookupTable[sKey]) {
			sTipKey = sap.zen.CrosstabTextCache.oSortingTextLookupTable[sKey].tooltipidx;
		}
		if (sTipKey !== undefined) {
			if (sap.zen.CrosstabTextCache.oSortingTextLookupTable[sTipKey]) {
				sToolTip = sap.zen.CrosstabTextCache.oSortingTextLookupTable[sTipKey].alttext;
			}
		}
		return sToolTip;
	};
};
}; // end of sap/zen/crosstab/PropertyBag.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.TextConstants') ) {
jQuery.sap.declare("sap.zen.crosstab.TextConstants");

sap.zen.crosstab.TextConstants = sap.zen.crosstab.TextConstants || {};

sap.zen.crosstab.TextConstants.ROW_TEXT_KEY = "ROW_TEXT";
sap.zen.crosstab.TextConstants.COL_TEXT_KEY = "COL_TEXT";
sap.zen.crosstab.TextConstants.COLWIDTH_ADJUST_TEXT_KEY = "COLWIDTH_ADJUST_TEXT";
sap.zen.crosstab.TextConstants.MOBILE_MENUITEM_COLWIDTH_ADJUST_TEXT_KEY = "MOBILE_MENUITEM_COLWIDTH_ADJUST";
}; // end of sap/zen/crosstab/TextConstants.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.library') ) {
/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.zen.crosstab (14.1.0)
 */
jQuery.sap.declare("sap.zen.crosstab.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAP UI library: sap.zen.crosstab (by SAP, Author)
 *
 * @namespace
 * @name sap.zen.crosstab
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.zen.crosstab",
  dependencies : ["sap.ui.core"],
  types: [],
  interfaces: [],
  controls: [
    "sap.zen.crosstab.Crosstab",
    "sap.zen.crosstab.DataCell",
    "sap.zen.crosstab.HeaderCell"
  ],
  elements: [],
  version: "14.1.0"});


}; // end of sap/zen/crosstab/library.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.paging.PagingConstants') ) {
jQuery.sap.declare("sap.zen.crosstab.paging.PagingConstants");

sap.zen.crosstab.paging.PagingConstants = sap.zen.crosstab.paging.PagingConstants || {};

sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_UNKNOWN = 0;
sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADING = 1;
sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADED = 2;

}; // end of sap/zen/crosstab/paging/PagingConstants.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.paging.RequestStack') ) {
jQuery.sap.declare("sap.zen.crosstab.paging.RequestStack");

sap.zen.crosstab.paging.RequestStack = function(iMaxSize) {
	"use strict";

	var aElements = [];
	var aElementRemovedHandlers = [];
	var iMaxElementCnt = iMaxSize;

	this.push = function(oElement) {
		var oRemovedElement = null;
		var bElementRemoved = false;

		var iAlreadyContainedIndex = $.inArray(oElement, aElements);
		if (iAlreadyContainedIndex != -1) {
			aElements.splice(iAlreadyContainedIndex, 1);
		}

		if (iMaxElementCnt) {
			// This is intentional. Stack size shall not be limited
			// unless the length falls below the set max element count.
			// If it did, we might lose requests during a resize which enlarges the crosstab
			if (aElements.length === iMaxElementCnt) {
				oRemovedElement = aElements[0];
				bElementRemoved = true;
				aElements = aElements.splice(1, aElements.length - 1);
			}
			aElements.push(oElement);
			if (bElementRemoved) {
				sendNotification(oRemovedElement);
			}
		} else {
			aElements.push(oElement);
		}
	};

	this.pop = function() {
		return aElements.pop();
	};

	this.peek = function() {
		var oPeekElement = null;
		if (aElements.length > 0) {
			oPeekElement = aElements[aElements.length - 1];
		}
		return oPeekElement;
	};

	this.containsElement = function(oElement) {
		return ($.inArray(oElement, aElements) != -1);
	};

	this.clear = function() {
		aElements = [];
	};

	this.getActualSize = function() {
		return aElements.length;
	};

	this.getMaxSize = function() {
		return iMaxElementCnt;
	};

	this.getElementAt = function(iIndex) {
		var oElement = null;
		if (iIndex >= 0 && iIndex < aElements.length) {
			oElement = aElements[iIndex];
		}
		return oElement;
	};

	this.resetStack = function(iMaxSize) {
		aElements = [];
		iMaxElementCnt = iMaxSize;
	};

	this.unlimitStack = function() {
		iMaxElementCnt = 0;
	};

	this.addElementRemovedHandler = function(fHandler) {
		aElementRemovedHandlers.push(fHandler);
	};

	this.removeElementRemovedHandler = function(fHandler) {
		var iIndex = $.inArray(fHandler, aElementRemovedHandlers);
		if (iIndex !== -1) {
			aElementRemovedHandlers.splice(iIndex, 1);
		}
	};

	this.removeAllElementRemovedHandlers = function() {
		aElementRemovedHandlers = [];
	};

	function sendNotification(oElement) {
		var i = 0;
		var fHandler = null;
		for (i = 0; i < aElementRemovedHandlers.length; i++) {
			fHandler = aElementRemovedHandlers[i];
			if (fHandler) {
				fHandler(oElement);
			}
		}
	}

};
}; // end of sap/zen/crosstab/paging/RequestStack.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.rendering.DataModel') ) {
jQuery.sap.declare("sap.zen.crosstab.rendering.DataModel");

sap.zen.crosstab.rendering.DataModel = function (oArea) {
	"use strict";
	var aModelRows = [];
	var iRowCnt = 0;
	var iColCnt = 0;
	var oPageManager = null;

	this.insertCell = function (oCell, iRow, iCol) {
		if (iRow > iRowCnt - 1 || iCol > iColCnt - 1) {
			throw {
				name: "DataModelIndexOutOfBounds",
				message: "A cell cannot be inserted out of the bounds defined by iRowCnt and iColCnt"
			};
		}

		var aModelRow = getModelRow(iRow);
		aModelRow[iCol] = oCell;

		if (oCell) {
			var i = 0;
			var j = 0;
			for (i = 1; i < oCell.getColSpan(); i++) {
				aModelRow[iCol + i] = null;
			}
			for (i = 0; i < oCell.getColSpan(); i++) {
				for (j = 1; j < oCell.getRowSpan(); j++) {
					aModelRow = getModelRow(iRow + j);
					aModelRow[iCol + i] = null;
				}
			}
		}
	};

	this.getCellDirect = function (iRow, iCol) {
		var oCell = null;
		var aModelRow = aModelRows[iRow];
		if (aModelRow) {
			oCell = aModelRow[iCol];
		}
		if (oCell && oCell.setEffectiveRowSpan && oCell.setEffectiveColSpan) {
			oCell.setEffectiveRowSpan(oCell.getRowSpan());
			oCell.setEffectiveColSpan(oCell.getColSpan());
		}
		return oCell;
	};

	function getModelRow (iRow) {
		var aModelRow = aModelRows[iRow];
		if (!aModelRow) {
			aModelRow = [];
			aModelRows[iRow] = aModelRow;
		}
		return aModelRow;
	}

	this.getCell = function (iRow, iCol, bDoNotLoadPage) {
		var oCell = getCellInternal(iRow, iCol, bDoNotLoadPage);
		if (oCell && oCell.setEffectiveRowSpan && oCell.setEffectiveColSpan) {
			oCell.setEffectiveRowSpan(oCell.getRowSpan());
			oCell.setEffectiveColSpan(oCell.getColSpan());
		}
		return oCell;
	};

	function getCellInternal (iRow, iCol, bDoNotLoadPage) {
		if (!oPageManager && oArea) {
			oPageManager = oArea.getPageManager();
		}
		if (oPageManager && !bDoNotLoadPage) {
			oPageManager.ensureCellAvailable(oArea, iRow, iCol);
		}
		var oCell = null;
		var aModelRow = aModelRows[iRow];
		if (aModelRow) {
			oCell = aModelRow[iCol];
		}
		return oCell;
	}

	this.setRowCnt = function (iRowCount) {
		iRowCnt = iRowCount;
	};

	this.getRowCnt = function () {
		return iRowCnt;
	};

	this.setColCnt = function (iColCount) {
		iColCnt = iColCount;
	};

	this.getColCnt = function () {
		return iColCnt;
	};

	this.clear = function () {
		aModelRows = [];
		iRowCnt = 0;
		iColCnt = 0;
	};

	this.hasData = function () {
		return aModelRows.length > 0;
	};

	this.getCellWithSpan = function (iRow, iCol) {
		var oCell = this.getCellWithColSpan(iRow, iCol);
		if (!oCell) {
			oCell = this.getCellWithRowSpan(iRow, iCol);
		}
		return oCell;
	};

	this.getCellWithRowSpan = function (iRow, iCol, bDoNotLoadPage) {
		var oCell = this.getCell(iRow, iCol, bDoNotLoadPage);
		if (!oCell) {
			var iRowSpanCounter = 1;
			while (!oCell && iRow > 0) {
				iRow--;
				iRowSpanCounter++;
				oCell = this.getCell(iRow, iCol, bDoNotLoadPage);
			}
			if (oCell && oCell.getRowSpan() < iRowSpanCounter) {
				oCell = null;
			}
			if (oCell && oCell.setEffectiveRowSpan) {
				oCell.setEffectiveRowSpan(oCell.getRowSpan() - iRowSpanCounter + 1);
			}
		} else {
			if (oCell.setEffectiveRowSpan) {
				oCell.setEffectiveRowSpan(oCell.getRowSpan());
			}
		}
		return oCell;
	};

	this.getCellWithColSpan = function (iRow, iCol, bDoNotLoadPage) {
		var oCell = this.getCell(iRow, iCol, bDoNotLoadPage);
		if (!oCell) {
			var iColSpanCounter = 1;
			while (!oCell && iCol > 0) {
				iCol--;
				iColSpanCounter++;
				oCell = this.getCell(iRow, iCol, bDoNotLoadPage);
			}
			if (oCell && oCell.getColSpan() < iColSpanCounter) {
				oCell = null;
			}
			if (oCell && oCell.setEffectiveColSpan) {
				oCell.setEffectiveColSpan(oCell.getColSpan() - iColSpanCounter + 1);
			}

		} else {
			if (oCell.setEffectiveColSpan) {
				oCell.setEffectiveColSpan(oCell.getColSpan());
			}
		}
		return oCell;
	};

	this.getCellsByCol = function (iCol, iStartRow, iRowCnt) {
		var aCells = [];
		var oCell = null;
		var iRow = iStartRow;
		var iMaxRow = iStartRow + iRowCnt;

		for (iRow; iRow < iMaxRow; iRow++) {
			oCell = this.getCellWithColSpan(iRow, iCol);
			if (oCell) {
				aCells.push(oCell);
			}
		}

		return aCells;
	};

	this.getCellsByRow = function (iRow, iStartCol, iColCnt) {
		var aCells = [];
		var iCol = iStartCol;
		var iMaxCol = iStartCol + iColCnt;
		var oCell = null;

		for (iCol; iCol < iMaxCol; iCol++) {
			oCell = this.getCellWithRowSpan(iRow, iCol);
			if (oCell) {
				aCells.push(oCell);
			}
		}

		return aCells;
	};

	this.getModelRows = function () {
		return aModelRows;
	};
};

}; // end of sap/zen/crosstab/rendering/DataModel.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.rendering.DomElementProvider') ) {
jQuery.sap.declare("sap.zen.crosstab.rendering.DomElementProvider");

sap.zen.crosstab.rendering.DomElementProvider = function () {
	var oDomElements = {};

	this.addElement = function (sId, oDomElement) {
		oDomElements[sId] = oDomElement;
	};

	this.getElement = function (sId) {
		return oDomElements[sId];
	};
};
}; // end of sap/zen/crosstab/rendering/DomElementProvider.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.rendering.HeaderScrollManager') ) {
jQuery.sap.declare("sap.zen.crosstab.rendering.HeaderScrollManager");

sap.zen.crosstab.rendering.HeaderScrollManager = function (oCrosstab, oRenderEngine) {
	"use strict";

	var oScrollDivs = {};
	var iCurrentHScrollPos = 0;
	var that = this;
	var oCrossRequestManager = oRenderEngine.getCrossRequestManager();
	var oUpdateTimer = null;

	this.destroy = function () {
		// do nothing
	};

	this.onNewScrollbars = function () {
		oScrollDivs = {};
	};

	oRenderEngine.registerNewScrollbarsNotification(this.onNewScrollbars);

	function getDomScrollDiv (sScrollDivSuffix) {
		var oJqScrollDiv = oScrollDivs[sScrollDivSuffix];
		if (!oJqScrollDiv) {
			oJqScrollDiv = $('#' + oCrosstab.getId() + sScrollDivSuffix);
			if (oJqScrollDiv && oJqScrollDiv.length > 0) {
				oScrollDivs[sScrollDivSuffix] = oJqScrollDiv;
			}
		}
		return oJqScrollDiv;
	}

	function moveHorizontal () {
		getDomScrollDiv("_lowerLeft_scrollDiv").scrollLeft(iCurrentHScrollPos);
		getDomScrollDiv("_upperLeft_scrollDiv").scrollLeft(iCurrentHScrollPos);
	}
		
	this.hScrollHandler = function (oEvent) {
		var iOldHScrollPos = iCurrentHScrollPos;
		iCurrentHScrollPos = oEvent.getParameters().newScrollPos;
		moveHorizontal();
		if (iOldHScrollPos !== iCurrentHScrollPos) {
			that.sendClientScrollPosUpdate();
		}
	};
	
	this.sendClientScrollPosUpdate = function() {
		if (oUpdateTimer) {
			clearTimeout(oUpdateTimer);
			oUpdateTimer = null;
		}
		oUpdateTimer = setTimeout(that.doSendPosUpdate, 200, null);
	};
	
	this.doSendPosUpdate = function() {
		oCrosstab.getUtils().sendClientScrollPosUpdate(iCurrentHScrollPos, undefined, undefined, undefined, true);
	};

	this.setHScrollData = function(oHScrollData) {
		if (oHScrollData) {
			iCurrentHScrollPos = oHScrollData.iHPos;
		} else {
			iCurrentHScrollPos = 0;
		}
	};
	
	this.moveScrollbars = function() {
		var oHScrollbar = oCrosstab.getHorizontalHeaderScrollbar();
		if (oHScrollbar) {
			moveHorizontal();
			oHScrollbar.setScrollPosition(iCurrentHScrollPos);
		}
	};
};
}; // end of sap/zen/crosstab/rendering/HeaderScrollManager.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.rendering.PixelScrollManager') ) {
jQuery.sap.declare("sap.zen.crosstab.rendering.PixelScrollManager");

sap.zen.crosstab.rendering.PixelScrollManager = function (oCrosstab, oRenderEngine) {
	"use strict";

	var oScrollDivs = {};
	var iCurrentVScrollPos = 0;
	var iCurrentHScrollPos = 0;
	var oCrossRequestManager = oRenderEngine.getCrossRequestManager();
	var that = this;
	var oUpdateTimer = null;

	this.destroy = function () {
		// do nothing
	};

	this.onNewScrollbars = function () {
		oScrollDivs = {};
	};
	oRenderEngine.registerNewScrollbarsNotification(this.onNewScrollbars);

	function getDomScrollDiv (sScrollDivSuffix) {
		var oDomScrollDiv = oScrollDivs[sScrollDivSuffix];
		if (!oDomScrollDiv) {
			oDomScrollDiv = $('#' + oCrosstab.getId() + sScrollDivSuffix);
			if (oDomScrollDiv && oDomScrollDiv.length > 0) {
				oScrollDivs[sScrollDivSuffix] = oDomScrollDiv;
			}
		}
		return oDomScrollDiv;
	}

	function moveVertical (iPos) {
		getDomScrollDiv("_lowerLeft_scrollDiv").scrollTop(iPos);
		getDomScrollDiv("_lowerRight_scrollDiv").scrollTop(iPos);
	}

	function moveHorizontal (iPos) {
		getDomScrollDiv("_lowerRight_scrollDiv").scrollLeft(iPos);
		getDomScrollDiv("_upperRight_scrollDiv").scrollLeft(iPos);
	}

	this.hScrollHandler = function (oEvent) {
		var iPos = oEvent.getParameters().newScrollPos;
		moveHorizontal(iPos);
		iCurrentHScrollPos = iPos;
		that.sendClientScrollPosUpdate();
	};

	this.vScrollHandler = function (oEvent) {
		var iPos = oEvent.getParameters().newScrollPos;
		moveVertical(iPos);
		iCurrentVScrollPos = iPos;
		that.sendClientScrollPosUpdate();
	};
	
	this.sendClientScrollPosUpdate = function() {
		if (oUpdateTimer) {
			clearTimeout(oUpdateTimer);
			oUpdateTimer = null;
		}
		oUpdateTimer = setTimeout(that.doSendPosUpdate, 200, null);
	};
	
	this.doSendPosUpdate = function() {
		oCrosstab.getUtils().sendClientScrollPosUpdate(iCurrentHScrollPos, undefined, iCurrentVScrollPos, undefined);
	};

	function moveHScrollbar (iPos) {
		var oHScrollbar = oCrosstab.getHScrollbar();
		if (oHScrollbar) {
			oHScrollbar.setScrollPosition(iPos);
		}
		var oDomLowerRightScrollDiv = $('#' + oCrosstab.getId() + "_lowerRight_scrollDiv");
		if (oDomLowerRightScrollDiv && oDomLowerRightScrollDiv.length) {
			oDomLowerRightScrollDiv.scrollLeft(iPos);
		}
		var oDomUpperRightScrollDiv = $('#' + oCrosstab.getId() + "_upperRight_scrollDiv");
		if (oDomUpperRightScrollDiv && oDomUpperRightScrollDiv.length) {
			oDomUpperRightScrollDiv.scrollLeft(iPos);
		}
	}

	function moveVScrollbar (iPos) {
		var oVScrollbar = oCrosstab.getVScrollbar();
		if (oVScrollbar) {
			oVScrollbar.setScrollPosition(iPos);
		}
		var oDomLowerRightScrollDiv = $('#' + oCrosstab.getId() + "_lowerRight_scrollDiv");
		if (oDomLowerRightScrollDiv && oDomLowerRightScrollDiv.length) {
			oDomLowerRightScrollDiv.scrollTop(iPos);
		}
		var oDomLowerLeftScrollDiv = $('#' + oCrosstab.getId() + "_lowerLeft_scrollDiv");
		if (oDomLowerLeftScrollDiv && oDomLowerLeftScrollDiv.length) {
			oDomLowerLeftScrollDiv.scrollTop(iPos);
		}
	}

	this.moveScrollbars = function (oScrollbarVisibility, bRenderScrollbars, pbHScrolledToEnd, pbVScrolledToEnd) {
		moveHScrollbar(iCurrentHScrollPos);
		moveVScrollbar(iCurrentVScrollPos);
	};

	this.positionHScrollDiv = function (oLRS) {
		var iPos = iCurrentHScrollPos;
		var iNewPos = oCrossRequestManager.getHPixelScrollPosAfterRendering();
		if (iNewPos > -1) {
			iPos = iNewPos;
			moveHScrollbar(iPos);
		}
		moveHorizontal(iPos);
	};

	this.positionVScrollDiv = function (oLRS) {
		var iPos = iCurrentVScrollPos;
		var iNewPos = oCrossRequestManager.getVPixelScrollPosAfterRendering();
		if (iNewPos > -1) {
			iPos = iNewPos;
			moveVScrollbar(iPos);
		}
		moveVertical(iPos);
	};

	this.setHScrollPos = function (iHScrollPos) {
		iCurrentHScrollPos = iHScrollPos;
	};

	this.setVScrollPos = function (iVScrollPos) {
		iCurrentVScrollPos = iVScrollPos;
	};

	this.adjustPixelScrollbarAfterRendering = function () {
		var oNewPositions = oCrossRequestManager.getNewPixelScrollPosAfterRendering();
		if (oNewPositions) {
			var iVPos = oNewPositions.iVPos;
			if (iVPos >= 0) {
				oVScrollbar = oCrosstab.getVScrollbar();
				if (oVScrollbar) {
					oVScrollbar.setScrollPosition(iVPos);
					moveVertical(iVPos);
				}
			}
			var iHPos = oNewPositions.iHPos;
			if (iHPos >= 0) {
				oHScrollbar = oCrosstab.getHScrollbar();
				if (oHScrollbar) {
					oHScrollbar.setScrollPosition(iHPos);
					moveHorizontal(iHPos);
				}
			}
		}
	};
};
}; // end of sap/zen/crosstab/rendering/PixelScrollManager.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.rendering.RenderingConstants') ) {
jQuery.sap.declare("sap.zen.crosstab.rendering.RenderingConstants");

sap.zen.crosstab.rendering.RenderingConstants = sap.zen.crosstab.rendering.RenderingConstants || {};

sap.zen.crosstab.rendering.RenderingConstants.TYPE_DATA_AREA = "DataArea";
sap.zen.crosstab.rendering.RenderingConstants.TYPE_DIMENSION_HEADER_AREA = "DimensionHeaderArea";
sap.zen.crosstab.rendering.RenderingConstants.TYPE_COLUMN_HEADER_AREA = "ColumnHeaderArea";
sap.zen.crosstab.rendering.RenderingConstants.TYPE_ROW_HEADER_AREA = "RowHeaderArea";

sap.zen.crosstab.rendering.RenderingConstants.TYPE_HEADER_CELL = "HEADER_CELL";
sap.zen.crosstab.rendering.RenderingConstants.TYPE_DATA_CELL = "DATA_CELL";

sap.zen.crosstab.rendering.RenderingConstants.STYLE_PREFIX_DATA_CELL = "sapzencrosstab-DataCell";
sap.zen.crosstab.rendering.RenderingConstants.STYLE_PREFIX_HEADER_CELL = "sapzencrosstab-HeaderCell";

sap.zen.crosstab.rendering.RenderingConstants.STYLE_TOTAL = "Total";
sap.zen.crosstab.rendering.RenderingConstants.STYLE_ALTERNATING = "Alternating";
sap.zen.crosstab.rendering.RenderingConstants.STYLE_FIRST_IN_ROW = "FirstInRow";
sap.zen.crosstab.rendering.RenderingConstants.STYLE_LAST_IN_ROW = "LastInRow";
sap.zen.crosstab.rendering.RenderingConstants.STYLE_FIRST_IN_COL = "FirstInCol";
sap.zen.crosstab.rendering.RenderingConstants.STYLE_LAST_IN_COL = "LastInCol";
sap.zen.crosstab.rendering.RenderingConstants.STYLE_HEADER_CELL = "Default";
sap.zen.crosstab.rendering.RenderingConstants.STYLE_DATA_CELL = "Default";
sap.zen.crosstab.rendering.RenderingConstants.STYLE_LOADING = "Loading";
sap.zen.crosstab.rendering.RenderingConstants.STYLE_HIGHLIGHTED = "Highlighted";
sap.zen.crosstab.rendering.RenderingConstants.STYLE_EMPHASIZED = "Emphasized";
sap.zen.crosstab.rendering.RenderingConstants.STYLE_DATA_ENTRY_ENABLED = "EntryEnabled";
sap.zen.crosstab.rendering.RenderingConstants.STYLE_INVALID_VALUE = "InvalidValue";
sap.zen.crosstab.rendering.RenderingConstants.STYLE_NEW_VALUE = "NewValue";
sap.zen.crosstab.rendering.RenderingConstants.STYLE_LOCKED = "Locked";

sap.zen.crosstab.rendering.RenderingConstants.ALERT_TYPE_BACKGROUND = 2;
sap.zen.crosstab.rendering.RenderingConstants.ALERT_TYPE_FONT_COLOR = 4;
sap.zen.crosstab.rendering.RenderingConstants.ALERT_TYPE_STATUS_SYMBOL = 8;
sap.zen.crosstab.rendering.RenderingConstants.ALERT_TYPE_TREND_ASCENDING_SYMBOL = 16;
sap.zen.crosstab.rendering.RenderingConstants.ALERT_TYPE_TREND_DESCENDING_SYMBOL = 32;
sap.zen.crosstab.rendering.RenderingConstants.ALERT_TYPE_TREND_GREY_SYMBOL = 64;

sap.zen.crosstab.rendering.RenderingConstants.RENDERMODE_FILL = 0;
sap.zen.crosstab.rendering.RenderingConstants.RENDERMODE_COMPACT = 1;

sap.zen.crosstab.rendering.RenderingConstants.PASSIVE_CELL_TYPE_NORMAL = "NORMAL";
sap.zen.crosstab.rendering.RenderingConstants.PASSIVE_CELL_TYPE_NEWLINE_HEADER = "NHC";
sap.zen.crosstab.rendering.RenderingConstants.PASSIVE_CELL_TYPE_NEWLINE_DATA = "NDC";

sap.zen.crosstab.rendering.RenderingConstants.TABINDEX = "-1";

}; // end of sap/zen/crosstab/rendering/RenderingConstants.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.utils.Measuring') ) {
jQuery.sap.declare("sap.zen.crosstab.utils.Measuring");


sap.zen.crosstab.utils.Measuring = function (oCrosstab, oDomElementProvider) {
	"use strict";
	var oDimensionHeaderArea = oCrosstab.getDimensionHeaderArea();
	var oColHeaderArea = oCrosstab.getColumnHeaderArea();
	var oRowHeaderArea = oCrosstab.getRowHeaderArea();
	var oDataArea = oCrosstab.getDataArea();

	var iCrosstabWidth = oCrosstab.getIntWidth();
	var iCrosstabHeight = oCrosstab.getIntHeight();

	var oRenderSizeDivBorders = null;
	var oTableDivValues = null;

	// Buffers
	var oRenderSizeDivSize = null;
	var iScrollbarWidth = 0;
	
	this.getUpperLeftScrollDivWidth = function() {
		var oJqDiv = $('#' + oCrosstab.getId() + "_upperLeft_scrollDiv");
		return oJqDiv.outerWidth();
	};
	
	this.getLowerLeftScrollDivWidth = function() {
		var oJqDiv = $('#' + oCrosstab.getId() + "_lowerLeft_scrollDiv");
		return oJqDiv.outerWidth();
	}

	this.getAreaWidth = function (oArea) {
		var oJqArea = $('#' + oArea.getId() + "_container");
		var iWidth = oJqArea.outerWidth();
		var iScrollDivWidth = 0;
		if (oArea.isDimHeaderArea()) {
			// might be limited for header scrolling. Take the smaller value
			iScrollDivWidth = this.getUpperLeftScrollDivWidth();
		} else if (oArea.isRowHeaderArea()) {
			iScrollDivWidth = this.getLowerLeftScrollDivWidth();
		}
		
		if (iScrollDivWidth > 0) {
			iWidth = Math.min(iWidth, iScrollDivWidth);
		}
		return iWidth;
	};

	this.getAreaHeight = function (oArea) {
		var oDomArea = $('#' + oArea.getId() + "_container");
		return oDomArea.outerHeight();
	};

	this.getAreaSize = function (oArea) {
		var oSize = {};
		var oDomArea = $('#' + oArea.getId() + "_container");
		oSize.iHeight = oDomArea.outerHeight();
		oSize.iWidth = this.getAreaWidth(oArea);

		return oSize;
	};

	this.getRenderSizeDivSize = function () {
		// This measures the size of the RenderSizeDiv.
		// This size represents the visible size of the crosstab --> clipped parts do not add to this size
		var oSize = {};

		var oDomRenderSizeDiv = $('#' + oCrosstab.getId() + "_renderSizeDiv");
		oSize.iWidth = oDomRenderSizeDiv.outerWidth();
		oSize.iHeight = oDomRenderSizeDiv.outerHeight();

		return oSize;
	};

	this.calculateRenderSize = function (bForceRecalculate) {
		// This calculates the rendered size of the crosstab.
		// The size might be bigger than the available size, if the areas are clipped (e.g. if scrollbars are visible).
		// The size might be smaller than the available size, if not all the available space is required.
		bForceRecalculate = bForceRecalculate || false;
		if (!oRenderSizeDivSize || this.hasCrosstabSizeChanged() || bForceRecalculate) {
			oRenderSizeDivSize = {};
			var oDimHeaderAreaSize = this.getAreaSize(oDimensionHeaderArea);
			var oDataAreaSize = this.getAreaSize(oDataArea);
			var oRowHeaderAreaSize = this.getAreaSize(oRowHeaderArea);
			var oColHeaderAreaSize = this.getAreaSize(oColHeaderArea);

			var iLowerHeight = oRowHeaderArea.hasContent() ? oRowHeaderAreaSize.iHeight : oDataAreaSize.iHeight;
			var iUpperHeight = oDimensionHeaderArea.hasContent() ? oDimHeaderAreaSize.iHeight : oColHeaderAreaSize.iHeight;
			oRenderSizeDivSize.iHeight = iLowerHeight + iUpperHeight;

			var iLeftWidth = oDimensionHeaderArea.hasContent() ? oDimHeaderAreaSize.iWidth : oRowHeaderAreaSize.iWidth;
			var iRightWidth = oColHeaderArea.hasContent() ? oColHeaderAreaSize.iWidth : oDataAreaSize.iWidth;
			oRenderSizeDivSize.iWidth = iLeftWidth + iRightWidth;
		}

		return oRenderSizeDivSize;
	};

	this.getBrowserScrollbarWidth = function () {
		if (!iScrollbarWidth) {
			var inner = document.createElement('p');
			inner.style.width = "100%";
			inner.style.height = "200px";

			var outer = document.createElement('div');
			outer.style.position = "absolute";
			outer.style.top = "0px";
			outer.style.left = "0px";
			outer.style.visibility = "hidden";
			outer.style.width = "200px";
			outer.style.height = "150px";
			outer.style.overflow = "hidden";
			outer.appendChild(inner);

			document.body.appendChild(outer);
			var w1 = inner.offsetWidth;
			outer.style.overflow = 'scroll';
			var w2 = inner.offsetWidth;
			if (w1 == w2)
				w2 = outer.clientWidth;

			document.body.removeChild(outer);

			iScrollbarWidth = (w1 - w2);
				
			if(iScrollbarWidth === 0){
				//Fallback because the measuring doesn't seem to work in all browsers / themes
				//e.g. Chrome in combination with the gold reflection theme
				var parent, child;
				parent = $('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo('body');
				child = parent.children();
				iScrollbarWidth = child.innerWidth() - child.height(99).innerWidth();
				parent.remove();
			}
		}
		return iScrollbarWidth;
	};

	this.reset = function () {
		oRenderSizeDivSize = null;
	};

	this.hasCrosstabSizeChanged = function (bQueryOnly) {
		var newWidth = oCrosstab.getIntWidth();
		var newHeight = oCrosstab.getIntHeight();
		if (iCrosstabWidth !== newWidth || iCrosstabHeight !== newHeight) {
			if (!bQueryOnly) {
				iCrosstabWidth = newWidth;
				iCrosstabHeight = newHeight;
			}
			return true;
		}
		return false;
	};

	this.getLowerScrollDivHeight = function () {
		var oDomScrollDiv = null;
		if (oRowHeaderArea.hasContent()) {
			oDomScrollDiv = $('#' + oCrosstab.getId() + "_lowerLeft_scrollDiv");
		} else {
			oDomScrollDiv = $('#' + oCrosstab.getId() + "_lowerRight_scrollDiv");
		}
		return oDomScrollDiv.outerHeight();
	};

	this.getUpperScrollDivHeight = function () {
		var oDomScrollDiv = null;
		if (oDimensionHeaderArea.hasContent()) {
			oDomScrollDiv = $('#' + oCrosstab.getId() + "_upperLeft_scrollDiv");
		} else {
			oDomScrollDiv = $('#' + oCrosstab.getId() + "_upperRight_scrollDiv");
		}
		return oDomScrollDiv.outerHeight();
	};

	this.getUpperRightScrollDivWidth = function () {
		var oDomScrollDiv = $('#' + oCrosstab.getId() + "_upperRight_scrollDiv");
		return oDomScrollDiv.outerWidth();
	};

	this.getRenderSizeDivBorders = function (oDomRenderSizeDiv) {
		if (!oRenderSizeDivBorders) {
			oRenderSizeDivBorders = {};
			oRenderSizeDivBorders.borders = {};
			if (!oDomRenderSizeDiv) {
				oDomRenderSizeDiv = $('#' + oCrosstab.getId() + "_renderSizeDiv");
			}
			oRenderSizeDivBorders.borders.iBottomBorderWidth = parseInt(oDomRenderSizeDiv.css("border-bottom-width"),
					10) || 0;
			oRenderSizeDivBorders.borders.iRightBorderWidth = parseInt(oDomRenderSizeDiv.css("border-right-width"), 10) || 0;
			oRenderSizeDivBorders.borders.iTopBorderWidth = parseInt(oDomRenderSizeDiv.css("border-top-width"), 10) || 0;
			oRenderSizeDivBorders.borders.iLeftBorderWidth = parseInt(oDomRenderSizeDiv.css("border-left-width"), 10) || 0;
		}
		return oRenderSizeDivBorders;
	};

	this.getTableDivBordersAndPadding = function () {
		if (!oTableDivValues) {
			oTableDivValues = {};
			oTableDivValues.borders = {};
			oTableDivValues.paddings = {};

			// var oDomTableDiv = oCrosstab.getTableDiv();
			var oDomTableDiv = oDomElementProvider.getElement(oCrosstab.getId());

			oTableDivValues.borders.iBottomBorderWidth = parseInt(oDomTableDiv.css("border-bottom-width"), 10);
			oTableDivValues.borders.iRightBorderWidth = parseInt(oDomTableDiv.css("border-right-width"), 10);
			oTableDivValues.borders.iTopBorderWidth = parseInt(oDomTableDiv.css("border-top-width"), 10);
			oTableDivValues.borders.iLeftBorderWidth = parseInt(oDomTableDiv.css("border-left-width"), 10);

			oTableDivValues.paddings.iBottomPadding = parseInt(oDomTableDiv.css("padding-bottom"), 10);
			oTableDivValues.paddings.iRightPadding = parseInt(oDomTableDiv.css("padding-right"), 10);
			oTableDivValues.paddings.iTopPadding = parseInt(oDomTableDiv.css("padding-top"), 10);
			oTableDivValues.paddings.iLeftPadding = parseInt(oDomTableDiv.css("padding-left"), 10);

		}
		return oTableDivValues;
	};

	this.reset = function () {
		oRenderSizeDivBorders = null;
	};
};
}; // end of sap/zen/crosstab/utils/Measuring.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.utils.Utils') ) {
jQuery.sap.declare("sap.zen.crosstab.utils.Utils");


sap.zen.crosstab.utils.Utils = function (oCrosstab) {
	
	var that = this;

	this.getModelCoordinates = function (iAreaRow, iAreaCol, sAreaType) {
		var oModelCoordinates = {};
		oModelCoordinates.iRow = iAreaRow;
		oModelCoordinates.iCol = iAreaCol;

		var iColHeaderAreaRows = oCrosstab.getColumnHeaderArea().getRowCnt();
		var iRowHeaderAreaCols = oCrosstab.getRowHeaderArea().getColCnt();

		if (sAreaType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_DATA_AREA) {
			oModelCoordinates.iRow += iColHeaderAreaRows;
			oModelCoordinates.iCol += iRowHeaderAreaCols;
		} else if (sAreaType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_COLUMN_HEADER_AREA) {
			oModelCoordinates.iCol += iRowHeaderAreaCols;
		} else if (sAreaType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_ROW_HEADER_AREA) {
			oModelCoordinates.iRow += iColHeaderAreaRows;
		}
		return oModelCoordinates;
	};
	

		this.selectTextInInputField = function (oInputField, iSelectionStartPos, iSelectionEndPos) {
		if (iSelectionStartPos === -1 && iSelectionEndPos === -1) {
			oInputField.select();
		} else {
			oDomInputField = oInputField[0];
			if (oCrosstab.isIE8Mode()) {
				if (oDomInputField.createTextRange !== "undefined") {
					var oRange = oDomInputField.createTextRange();
					oRange.collapse(true);
					// This must be done in exactly this order!
					oRange.moveEnd("character", iSelectionEndPos + 1);
					oRange.moveStart("character", iSelectionStartPos);
					oRange.select();
				}
			} else if (oDomInputField.selectionStart !== "undefined") {
				oDomInputField.selectionStart = iSelectionStartPos;
				oDomInputField.selectionEnd = iSelectionEndPos;
			}
		}
	};

	this.getSelectionParams = function (oDomContainerDiv) {
		var iStartPos = -1;
		var iEndPos = -1;
		if (oCrosstab.isIE8Mode()) {
			if (document.selection !== "undefined" && document.selection.type === "Text") {
				oRange = document.selection.createRange();
				if (oRange && oRange.text.length > 0) {
					var oBodyRange = document.body.createTextRange();
					oBodyRange.moveToElementText(oDomContainerDiv);
					oBodyRange.setEndPoint("EndToStart", oRange);
					iStartPos = oBodyRange.text.length;
					iEndPos = iStartPos + oRange.text.length - 1;
				}
			}
		} else if (window.getSelection) {
			var sSelectedText = window.getSelection().toString();
			if (sSelectedText && sSelectedText.length > 0) {
				iStartPos = window.getSelection().anchorOffset;
				iEndPos = window.getSelection().focusOffset;
			}
		}
		return {
			iSelectionStartPos: iStartPos,
			iSelectionEndPos: iEndPos
		};
	};
	
	this.sendClientScrollPosUpdate = function(iCurrentHScrollStep, bHScrolledToEnd, iCurrentVScrollStep, bVScrolledToEnd, bIsHeaderData) {
		var oCrossRequestManager = oCrosstab.getRenderEngine().getCrossRequestManager();
		if (oCrossRequestManager) {
			if (bIsHeaderData === true) {
				oCrossRequestManager.setHeaderScrollData({"iHPos" : iCurrentHScrollStep});
			} else {
				oCrossRequestManager.setScrollData(iCurrentHScrollStep, bHScrolledToEnd, iCurrentVScrollStep, bVScrolledToEnd);
			}
		}
		that.sendScrollPosUpdate(iCurrentHScrollStep, bHScrolledToEnd, iCurrentVScrollStep, bVScrolledToEnd, bIsHeaderData);
	};
	
	this.sendScrollPosUpdate = function(piHScrollPos, pbHScrolledToEnd, piVScrollPos, pbVScrolledToEnd, bIsHeaderData) {
		var sCommand = oCrosstab.getScrollNotifyCommand();
		if (sCommand) {
			sCommand = sCommand.replace("__CLIENT_VPOS__", piVScrollPos);
			sCommand = sCommand.replace("__CLIENT_VPOS_END__", pbVScrolledToEnd ? "X" : " ");
			// header data currently only for horizontal scrolling possible
			sCommand = sCommand.replace("__CLIENT_HPOS__", (bIsHeaderData ? "H" + piHScrollPos : piHScrollPos));
			sCommand = sCommand.replace("__CLIENT_HPOS_END__", pbHScrolledToEnd ? "X" : " ");
			var fAction = new Function(sCommand);
			fAction();
		}
	};
};

sap.zen.crosstab.utils.Utils.unEscapeDisplayString = function (sHtmlString) {
	var sUnEscapedString = sHtmlString.replace(/<br\/>/g, "\r\n");
	sUnEscapedString = sUnEscapedString.replace(/&nbsp;/g, "&#x20;");
	sUnEscapedString = $("<div/>").html(sUnEscapedString).text();
	return sUnEscapedString;
};

sap.zen.crosstab.utils.Utils.prepareStringForRendering = function (sText) {
	var bHasLineBreaks = false;
	var sPrePreparedString = sText.replace(/(\r\n)|(\n\r)|\r|\n/g, "<br/>");
	bHasLineBreaks = (sPrePreparedString !== sText);	
	var sPreparedString = sPrePreparedString.replace(/(&#xd;&#xa;)|(&#xa;&#xd;)|&#xd;|&#xa;/g, "<br/>");
	bHasLineBreaks = (sPreparedString !== sPrePreparedString) || bHasLineBreaks;
	
	sPreparedString = sPreparedString.replace(/&#x20;/g, "&nbsp;");
	return {"text" : sPreparedString, "bHasLineBreaks" : bHasLineBreaks}; 
};

sap.zen.crosstab.utils.Utils.cancelEvent = function (e) {
	if (e) {
		if (e.preventDefault) {
			e.preventDefault();
		}
		sap.zen.crosstab.utils.Utils.stopEventPropagation(e);
	}
};

sap.zen.crosstab.utils.Utils.stopEventPropagation = function (e) {
	if (e) {
		if (e.stopPropagation) {
			e.stopPropagation();
		}
		if (e.cancelBubble) {
			e.cancelBubble = true;
		}
	}
};

sap.zen.crosstab.utils.Utils.hasEntries = function (oAssocArray) {
	var bHasEntries = false;
	if (oAssocArray) {
		for ( var key in oAssocArray) {
			if (oAssocArray.hasOwnProperty(key)) {
				bHasEntries = true;
				break;
			}
		}
	}
	return bHasEntries;
};

sap.zen.crosstab.utils.Utils.padWithZeroes = function (iNumber, iLength) {
	var s = iNumber.toString();
	if (s.length < iLength) {
		s = ('0000000000' + s).slice(-iLength);
	}
	return s;
};

sap.zen.crosstab.utils.Utils.selectTextInElement = function (oDomTextContainer) {
	var oRange;
	var oSelection;
	if (oDomTextContainer.innerHTML) {
		if (document.createRange && window.getSelection) {
			oRange = document.createRange();
			oSelection = window.getSelection();
			try {
				oSelection.removeAllRanges();
			} catch (e) {
				// this might happen in IE -> browser bug. When it happens,
				// text will not be selected
			}
			try {
				oRange.selectNodeContents(oDomTextContainer);
				oSelection.addRange(oRange);
			} catch (e) {
				oRange.selectNode(oDomTextContainer);
				oSelection.addRange(oRange);
			}
		} else if (document.body.createTextRange) {
			// IE8
			oRange = document.body.createTextRange();
			oRange.moveToElementText(oDomTextContainer);
			oRange.select();
		}
	}
};

sap.zen.crosstab.utils.Utils.getWidthFromStyle = function (oJqElement) {
	var i = 0;
	var sStyle = "";
	var aStyleDef = null;
	var sWidth = null;
	var sStyles = oJqElement.attr('style');
	if (sStyles) {
		var aStyles = sStyles.split(";");
		if (aStyles) {
			for (i = 0; i < aStyles.length; i++) {
				sStyle = aStyles[i];
				if (sStyle) {
					aStyleDef = sStyle.split(":");
					if (aStyleDef[0] === "width") {
						sWidth = aStyleDef[1];
						break;
					}
				}
			}
		}
	}
	if (sWidth) {
		sWidth = $.trim(sWidth);
	}
	return sWidth;
};

sap.zen.crosstab.utils.Utils.sign = function(x) {
	return x > 0 ? 1 : x < 0 ? -1 : 0;
};

}; // end of sap/zen/crosstab/utils/Utils.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.CellStyleHandler') ) {
jQuery.sap.declare("sap.zen.crosstab.CellStyleHandler");


sap.zen.crosstab.CellStyleHandler = {};

sap.zen.crosstab.CellStyleHandler.aStyles = [];
sap.zen.crosstab.CellStyleHandler.iDataCellAlternatingIndex = -1;
sap.zen.crosstab.CellStyleHandler.iHeaderCellAlternatingIndex = -1;

sap.zen.crosstab.CellStyleHandler.oExceptionVisualizationMapping = {};
sap.zen.crosstab.CellStyleHandler.oExceptionVisualizationMapping[sap.zen.crosstab.rendering.RenderingConstants.ALERT_TYPE_BACKGROUND] = "Background";
sap.zen.crosstab.CellStyleHandler.oExceptionVisualizationMapping[sap.zen.crosstab.rendering.RenderingConstants.ALERT_TYPE_FONT_COLOR] = "FontColor";
sap.zen.crosstab.CellStyleHandler.oExceptionVisualizationMapping[sap.zen.crosstab.rendering.RenderingConstants.ALERT_TYPE_STATUS_SYMBOL] = "StatusSymbol";
sap.zen.crosstab.CellStyleHandler.oExceptionVisualizationMapping[sap.zen.crosstab.rendering.RenderingConstants.ALERT_TYPE_TREND_ASCENDING_SYMBOL] = "TrendAscendingSymbol";
sap.zen.crosstab.CellStyleHandler.oExceptionVisualizationMapping[sap.zen.crosstab.rendering.RenderingConstants.ALERT_TYPE_TREND_DESCENDING_SYMBOL] = "TrendDescendingSymbol";
sap.zen.crosstab.CellStyleHandler.oExceptionVisualizationMapping[sap.zen.crosstab.rendering.RenderingConstants.ALERT_TYPE_TREND_GREY_SYMBOL] = "TrendGreySymbol";

sap.zen.crosstab.CellStyleHandler.getCompleteStyleName = function(sStyle, sCellType) {
	var sCompleteStyle = "";
	if (sCellType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_DATA_CELL) {
		sCompleteStyle = sap.zen.crosstab.rendering.RenderingConstants.STYLE_PREFIX_DATA_CELL + sStyle;
	} else {
		sCompleteStyle = sap.zen.crosstab.rendering.RenderingConstants.STYLE_PREFIX_HEADER_CELL + sStyle;
	}
	return sCompleteStyle;
};

sap.zen.crosstab.CellStyleHandler.pushStyle = function(sCompleteStyle) {
	var iIndex = sap.zen.crosstab.CellStyleHandler.aStyles.push(sCompleteStyle);
	// array.push returns the new length of the array, not the index of the new element
	iIndex--;
	return iIndex;
};

sap.zen.crosstab.CellStyleHandler.getStyleId = function (sStyle, sCellType) {
	var sCompleteStyle = sap.zen.crosstab.CellStyleHandler.getCompleteStyleName(sStyle, sCellType);
	var iIndex = sap.zen.crosstab.CellStyleHandler.aStyles.indexOf(sCompleteStyle);
	if (iIndex === -1) {
		iIndex = sap.zen.crosstab.CellStyleHandler.pushStyle(sCompleteStyle);
	}
	return iIndex;
};


sap.zen.crosstab.CellStyleHandler.pushPresetStyle = function(sStyle, sCellType) {
	var sCompleteStyle = sap.zen.crosstab.CellStyleHandler.getCompleteStyleName(sStyle, sCellType);
	var iIndex = sap.zen.crosstab.CellStyleHandler.pushStyle(sCompleteStyle);
	return iIndex;
};

//These styles are added in advance because they need special handling later on: IE8 doesn't support alternating styles
sap.zen.crosstab.CellStyleHandler.iDataCellAlternatingIndex = sap.zen.crosstab.CellStyleHandler.pushPresetStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_ALTERNATING, sap.zen.crosstab.rendering.RenderingConstants.TYPE_DATA_CELL);
sap.zen.crosstab.CellStyleHandler.iHeaderCellAlternatingIndex = sap.zen.crosstab.CellStyleHandler.pushPresetStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_ALTERNATING, sap.zen.crosstab.rendering.RenderingConstants.TYPE_HEADER_CELL);

sap.zen.crosstab.CellStyleHandler.getCssClasses = function (aCellStyles, bIsIE8) {
	var sCss = "";
	var iStylesLength = aCellStyles.length;
	for ( var i = 0; i < iStylesLength; i++) {
		var iStyleId = aCellStyles[i];
		if (iStyleId !== -1) {
			if (!(bIsIE8 && (iStyleId === sap.zen.crosstab.CellStyleHandler.iDataCellAlternatingIndex || iStyleId === sap.zen.crosstab.CellStyleHandler.iHeaderCellAlternatingIndex))) {
				var sStyle = sap.zen.crosstab.CellStyleHandler.aStyles[iStyleId];
				if (sStyle) {
					sCss += sStyle;
					sCss += " ";
				}
			}
		}
	}
	return sCss;
};

sap.zen.crosstab.CellStyleHandler.getStyleForExceptionViz = function (iFormatType, iAlertLevel) {
	var style = "Alert" + iAlertLevel + sap.zen.crosstab.CellStyleHandler.oExceptionVisualizationMapping[iFormatType];
	return style;
};

sap.zen.crosstab.CellStyleHandler.setExceptionStylesOnCell = function (oCell, iFormatType, iAlertLevel) {
	if (iFormatType > 4) {
		oCell.getArea().columnHasSymbolException(oCell.getCol());
		oCell.addStyle("SymbolAlertBackground");
	}
	var sStyle = sap.zen.crosstab.CellStyleHandler.getStyleForExceptionViz(iFormatType, iAlertLevel);
	if (sStyle) {
		oCell.addStyle(sStyle);
	}
};

}; // end of sap/zen/crosstab/CellStyleHandler.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.CrosstabContextMenu') ) {
jQuery.sap.declare("sap.zen.crosstab.CrosstabContextMenu");


sap.zen.crosstab.CrosstabContextMenu = function (oCrosstab) {

	this.getContextMenuAction = function (sContextMenuComponentId, oDomClickedElement) {
		var oCore = sap.ui.getCore();
		var oElement = oDomClickedElement;
		while (!oCore.byId(oElement.attr("id"))) {
			oElement = oElement.parent();
		}

		if (oElement.attr("id") === oCrosstab.getId()) {
			return null;
		}

		var oCell = oCore.byId(oElement.attr("id"));
		var sCellType = oCell.getCellType();

		var sAreaType = oCell.getArea().getAreaType();
		var sAxis = "";
		if (sAreaType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_COLUMN_HEADER_AREA) {
			sAxis = "COLS";
		} else if (sAreaType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_ROW_HEADER_AREA) {
			sAxis = "ROWS";
		} else if (sAreaType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_DIMENSION_HEADER_AREA) {
			var sText = oCell.getText();
			if (sText !== undefined && sText !== null && sText !== "") {
				sAxis = "DIM";
			} else {
				var sSort = oCell.getSort();
				if (sSort !== undefined && sSort !== null && sSort !== "") {
					sAxis = "DIM";
				} else {
					return null;
				}
			} 
		} else if (sCellType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_DATA_CELL) {
			sAxis = "DATA";
		} else {
			return null;
		}

		var iRow = oCell.getRow();
		var iCol = oCell.getCol();

		var sContextMenuCommand = oCrosstab.getPropertyBag().getContextMenuCommand();

		sContextMenuCommand = sContextMenuCommand.replace("__AXIS__", sAxis);
		sContextMenuCommand = sContextMenuCommand.replace("__ROW__", iRow);
		sContextMenuCommand = sContextMenuCommand.replace("__COL__", iCol);
		sContextMenuCommand = sContextMenuCommand.replace("__ID__", sContextMenuComponentId);
		sContextMenuCommand = sContextMenuCommand.replace("__DOM_REF_ID__", oDomClickedElement.attr("id"));

		return new Function(sContextMenuCommand);
	};

};

}; // end of sap/zen/crosstab/CrosstabContextMenu.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.CrosstabRenderer') ) {
jQuery.sap.declare("sap.zen.crosstab.CrosstabRenderer");


/**
 * @class Crosstab renderer.
 * @static
 */
sap.zen.crosstab.CrosstabRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be rendered
 */
sap.zen.crosstab.CrosstabRenderer.render = function (oRenderManager, oControl) {
	"use strict";
	// convenience variable
	var rm = oRenderManager;
	var sClasses = "";

	var sCrosstabWidth = oControl.getWidth();
	if (sCrosstabWidth === "auto") {
		sCrosstabWidth = "100%";
	}
	var sCrosstabHeight = oControl.getHeight();
	if (sCrosstabHeight === "auto") {
		sCrosstabHeight = "100%";
	}

	// write the HTML into the render manager
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addStyle("overflow", "hidden");
	if (sCrosstabWidth) {
		rm.addStyle("width", sCrosstabWidth);
	}
	if (sCrosstabHeight) {
		rm.addStyle("height", sCrosstabHeight);
	}

	if (oControl.aCustomStyleClasses && oControl.aCustomStyleClasses.length > 0) {
		var i = 0;
		for (i = 0; i < oControl.aCustomStyleClasses.length; i++) {
			sClasses = sClasses + oControl.aCustomStyleClasses[i] + " ";
		}
	}

	if (oControl.getRenderMode() === sap.zen.crosstab.rendering.RenderingConstants.RENDERMODE_FILL) {
		rm.addStyle("visibility", "hidden");
		sClasses += "sapzencrosstab-TableDiv sapzencrosstab-TableDivBackground";
	}

	rm.writeAttribute("class", sClasses);

	rm.writeStyles();
	rm.write(">");

	if (oControl.getRenderMode() === sap.zen.crosstab.rendering.RenderingConstants.RENDERMODE_COMPACT) {
		rm.write("<div");
		rm.writeAttribute("id", oControl.getId() + "_altRenderModeTableDiv");
		rm.addStyle("visibility", "hidden");
		rm.addStyle("width", "100%");
		rm.addStyle("height", "100%");
		rm.writeAttribute("class", "sapzencrosstab-TableDiv sapzencrosstab-TableDivBackground");
		rm.writeStyles();
		rm.write(">");
	}

	rm.write("<div");
	rm.writeAttribute("id", oControl.getId() + "_renderSizeDiv");
	rm.writeAttribute("class", "sapzencrosstab-RenderSizeDiv");
	rm.write(">");

	rm.write("<table");
	rm.writeAttribute("id", oControl.getId() + "_table");
	rm.writeAttribute("class", "sapzencrosstab-Crosstab");
	rm.write(">"); // table element

	// first row
	rm.write("<tr");
	rm.writeAttribute("id", oControl.getId() + "_upperSection");
	rm.write(">");

	sap.zen.crosstab.CrosstabRenderer.writeCell(rm, oControl.getId() + "_upperLeft", oControl.getDimensionHeaderArea(),
			oControl);
	sap.zen.crosstab.CrosstabRenderer.writeCell(rm, oControl.getId() + "_upperRight", oControl.getColumnHeaderArea(),
			oControl);

	rm.write("</tr>");

	// second row
	rm.write("<tr");
	rm.writeAttribute("id", oControl.getId() + "_lowerSection");
	rm.write(">");

	sap.zen.crosstab.CrosstabRenderer.writeCell(rm, oControl.getId() + "_lowerLeft", oControl.getRowHeaderArea(),
			oControl);
	sap.zen.crosstab.CrosstabRenderer.writeCell(rm, oControl.getId() + "_lowerRight", oControl.getDataArea(), oControl);

	rm.write("</tr>");

	rm.write("</table>");
	rm.write("</div>");

	// Toolbar
	if (oControl.getPropertyBag().hasToolbar()) {
		rm.write("<div");
		rm.writeAttribute("id", oControl.getId() + "_toolbar");
		rm.writeAttribute("class", "sapzencrosstab-ToolbarDiv");
		rm.addStyle("position", "absolute");
		rm.addStyle("bottom", "0px");
		rm.writeStyles();
		rm.write(">");
		rm.write("</div>");
	}
	
	rm.write("<div");
	rm.writeAttribute("id", oControl.getId() + "_resizeFrame");
	rm.writeAttribute("class", "sapzencrosstab-TableDiv");
	rm.addStyle("visibility", "hidden");
	rm.addStyle("width", sCrosstabWidth);
	rm.addStyle("height", sCrosstabHeight);
	rm.writeStyles();
	rm.write(">");
	rm.write("</div>");

	rm.write("<div");
	rm.writeAttribute("id", oControl.getId() + "_resizeDiv");
	rm.writeAttribute("class", "sapzencrosstab-ResizeDiv");
	rm.addStyle("width", "100%");
	rm.addStyle("height", "100%");
	rm.addStyle("visibility", "hidden");
	rm.writeStyles();
	rm.write(">");
	rm.write("</div>");

	rm.write("<div");
	rm.writeAttribute("id", oControl.getId() + "_loadingAnimationDiv");
	rm.writeAttribute("class", "sapzencrosstab-loadingAnimationDiv");
	rm.addStyle("visibility", "hidden");
	rm.writeStyles();
	rm.write(">");

	rm.write("<div");
	rm.writeAttribute("class", "sapzencrosstab-loadingAnimation");
	rm.write(">");
	rm.write("</div>");

	rm.write("</div>");

	// measure div to determine hierarchy width/height
	rm.write("<div");
	rm.writeAttribute("id", oControl.getId() + "_measureDiv");
	rm.writeAttribute("class", "sapzencrosstab-HierarchyIndent");
	rm.addStyle("visibility", "none");
	rm.writeStyles();
	rm.write(">");
	rm.write("</div>");
	
	// exception measure div to determine symbol width
	rm.write("<div");
	rm.writeAttribute("id", oControl.getId() + "_exceptionMeasureDiv");
	rm.writeAttribute("class", "sapzencrosstab-SymbolAlertDimensions");
	rm.addStyle("visibility", "none");
	rm.writeStyles();
	rm.write(">");
	rm.write("</div>");

	if (oControl.getRenderMode() === sap.zen.crosstab.rendering.RenderingConstants.RENDERMODE_COMPACT) {
		rm.write("</div>");
	}

	rm.write("</div>");
};

sap.zen.crosstab.CrosstabRenderer.writeCell = function (rm, sId, oArea, oControl) {
	rm.write("<td");
	rm.writeAttribute("id", sId);
	rm.addStyle("padding", "0px");
	rm.writeStyles();
	rm.write(">");
	rm.write("<div");
	rm.writeAttribute("id", sId + "_scrollDiv");
	rm.addStyle("overflow", "hidden");
	rm.writeStyles();
	rm.write(">");
	oArea.renderArea(rm, oControl);
	rm.write("</div>");
	rm.write("</td>");
};

}; // end of sap/zen/crosstab/CrosstabRenderer.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.DataCell') ) {
/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.zen.crosstab.DataCell.
jQuery.sap.declare("sap.zen.crosstab.DataCell");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new DataCell.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getArea area} : object</li>
 * <li>{@link #getRow row} : int</li>
 * <li>{@link #getCol col} : int</li>
 * <li>{@link #getTableRow tableRow} : int</li>
 * <li>{@link #getTableCol tableCol} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the new DataCell
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 14.1.0
 *
 * @constructor   
 * @public
 * @name sap.zen.crosstab.DataCell
 */
sap.ui.core.Control.extend("sap.zen.crosstab.DataCell", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"addStyle"
	],

	// ---- control specific ----
	library : "sap.zen.crosstab",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"area" : {type : "object", group : "Misc", defaultValue : null},
		"row" : {type : "int", group : "Misc", defaultValue : null},
		"col" : {type : "int", group : "Misc", defaultValue : null},
		"tableRow" : {type : "int", group : "Misc", defaultValue : null},
		"tableCol" : {type : "int", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.zen.crosstab.DataCell with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.zen.crosstab.DataCell.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.zen.crosstab.DataCell#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.zen.crosstab.DataCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.DataCell#setText
 * @function
 */


/**
 * Getter for property <code>area</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>area</code>
 * @public
 * @name sap.zen.crosstab.DataCell#getArea
 * @function
 */

/**
 * Setter for property <code>area</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oArea  new value for property <code>area</code>
 * @return {sap.zen.crosstab.DataCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.DataCell#setArea
 * @function
 */


/**
 * Getter for property <code>row</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>row</code>
 * @public
 * @name sap.zen.crosstab.DataCell#getRow
 * @function
 */

/**
 * Setter for property <code>row</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iRow  new value for property <code>row</code>
 * @return {sap.zen.crosstab.DataCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.DataCell#setRow
 * @function
 */


/**
 * Getter for property <code>col</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>col</code>
 * @public
 * @name sap.zen.crosstab.DataCell#getCol
 * @function
 */

/**
 * Setter for property <code>col</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iCol  new value for property <code>col</code>
 * @return {sap.zen.crosstab.DataCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.DataCell#setCol
 * @function
 */


/**
 * Getter for property <code>tableRow</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>tableRow</code>
 * @public
 * @name sap.zen.crosstab.DataCell#getTableRow
 * @function
 */

/**
 * Setter for property <code>tableRow</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iTableRow  new value for property <code>tableRow</code>
 * @return {sap.zen.crosstab.DataCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.DataCell#setTableRow
 * @function
 */


/**
 * Getter for property <code>tableCol</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>tableCol</code>
 * @public
 * @name sap.zen.crosstab.DataCell#getTableCol
 * @function
 */

/**
 * Setter for property <code>tableCol</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iTableCol  new value for property <code>tableCol</code>
 * @return {sap.zen.crosstab.DataCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.DataCell#setTableCol
 * @function
 */


/**
 * 
 *
 * @name sap.zen.crosstab.DataCell.prototype.addStyle
 * @function
 * @param {string} 
 *         sSStyle
 * 

 * @type void
 * @public
 */


// Start of sap\zen\crosstab\DataCell.js
///**
// * This file defines behavior for the control, 
// */




sap.zen.crosstab.DataCell.prototype.init = function () {
	"use strict";
	this.aStyles = [];
	this.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_DATA_CELL);
	this.bLoading = false;
	this.bIsEntryEnabled = false;
	this.sUnit = "";
	this.sPassiveCellType = sap.zen.crosstab.rendering.RenderingConstants.PASSIVE_CELL_TYPE_NORMAL;
	this.bTextHasLineBreaks = false;
};

sap.zen.crosstab.DataCell.prototype.getCellType = function() {
	return sap.zen.crosstab.rendering.RenderingConstants.TYPE_DATA_CELL;
};

sap.zen.crosstab.DataCell.prototype.getCssClassNames = function (bIsIE8) {
	return sap.zen.crosstab.CellStyleHandler.getCssClasses(this.aStyles, bIsIE8);
};

sap.zen.crosstab.DataCell.prototype.getStyleIdList = function () {
	return this.aStyles;
};

sap.zen.crosstab.DataCell.prototype.setStyleIdList = function (aNewStyles) {
	this.aStyles = aNewStyles;
};

sap.zen.crosstab.DataCell.prototype.addStyle = function (sStyle) {
	var iStyleId = sap.zen.crosstab.CellStyleHandler.getStyleId(sStyle,
			sap.zen.crosstab.rendering.RenderingConstants.TYPE_DATA_CELL);
	if (this.aStyles.indexOf(iStyleId) === -1) {
		this.aStyles.push(iStyleId);
	}
};

sap.zen.crosstab.DataCell.prototype.removeStyle = function (sStyle) {
	var iStyleId = sap.zen.crosstab.CellStyleHandler.getStyleId(sStyle,
			sap.zen.crosstab.rendering.RenderingConstants.TYPE_DATA_CELL);
	var iIndex = this.aStyles.indexOf(iStyleId);
	if (iIndex !== -1) {
		this.aStyles.splice(iIndex, 1);
	}
};

sap.zen.crosstab.DataCell.prototype.hasStyle = function (sStyle) {
	var iStyleId = sap.zen.crosstab.CellStyleHandler.getStyleId(sStyle,
			sap.zen.crosstab.rendering.RenderingConstants.TYPE_DATA_CELL);
	var iIndex = this.aStyles.indexOf(iStyleId);
	if (iIndex === -1) {
		return false;
	} else {
		return true;
	}
};

sap.zen.crosstab.DataCell.prototype.getColSpan = function () {
	return 1;
};

sap.zen.crosstab.DataCell.prototype.getRowSpan = function () {
	return 1;
};

sap.zen.crosstab.DataCell.prototype.getEffectiveColSpan = function () {
	return 1;
};

sap.zen.crosstab.DataCell.prototype.getEffectiveRowSpan = function () {
	return 1;
};

sap.zen.crosstab.DataCell.prototype.isLoading = function () {
	return this.bLoading;
};

sap.zen.crosstab.DataCell.prototype.setLoading = function (bLoading) {
	this.bLoading = bLoading;
};

sap.zen.crosstab.DataCell.prototype.isSelectable = function () {
	return false;
};

sap.zen.crosstab.DataCell.prototype.getUnescapedText = function () {
	return sap.zen.crosstab.utils.Utils.unEscapeDisplayString(this.getText());
};

sap.zen.crosstab.DataCell.prototype.setEntryEnabled = function (bIsEntryEnabled) {
	this.bIsEntryEnabled = bIsEntryEnabled;
};

sap.zen.crosstab.DataCell.prototype.isEntryEnabled = function () {
	return this.bIsEntryEnabled;
};

sap.zen.crosstab.DataCell.prototype.setUnit = function (sUnit) {
	this.sUnit = sUnit;
};

sap.zen.crosstab.DataCell.prototype.getUnit = function () {
	return this.sUnit;
};

sap.zen.crosstab.DataCell.prototype.getPassiveCellType = function () {
	return this.sPassiveCellType;
};

sap.zen.crosstab.DataCell.prototype.setPassiveCellType = function (sPCellType) {
	this.sPassiveCellType = sPCellType;
};

sap.zen.crosstab.DataCell.prototype.setTextHasLineBreaks = function (bTextHasLineBreaks) {
	this.bTextHasLineBreaks = bTextHasLineBreaks;
};

sap.zen.crosstab.DataCell.prototype.textHasLineBreaks = function () {
	return this.bTextHasLineBreaks;
};
}; // end of sap/zen/crosstab/DataCell.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.DataCellRenderer') ) {
jQuery.sap.declare("sap.zen.crosstab.DataCellRenderer");



/**
 * @class DataCell renderer.
 * @static
 */
sap.zen.crosstab.DataCellRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be rendered
 */
sap.zen.crosstab.DataCellRenderer.render = function (oRenderManager, oControl) {
	"use strict";
	var oArea = oControl.getArea();
	var fRenderCallback = oArea.getRenderCellCallback();
	var sRenderText = oControl.getText();
	var oAdditionalStyles = null;

	if (fRenderCallback) {
		var oCallbackResult = fRenderCallback(new sap.zen.crosstab.IDataCell(oControl));
		oAdditionalStyles = oCallbackResult.additionalStyles;
		sRenderText = oCallbackResult.renderText;
	}

	// convenience variable
	var rm = oRenderManager;

	// write the HTML into the render manager
	rm.write("<td");
	rm.writeControlData(oControl);

	var sCssClasses = oControl.getCssClassNames(oArea.getCrosstab().isIE8Mode());

	rm.writeAttribute("class", sCssClasses);

	rm.writeAttribute("tabindex", sap.zen.crosstab.rendering.RenderingConstants.TABINDEX);

	rm.write(">"); // SPAN element

	rm.write("<div");
	rm.writeAttribute("id", oControl.getId() + "_contentDiv");
	rm.writeAttribute("tabindex", sap.zen.crosstab.rendering.RenderingConstants.TABINDEX);

	var sClasses = "sapzencrosstab-DataCellContentDiv";
	if (oControl.isLoading()) {
		sClasses += " sapzencrosstab-LoadingCellContentDiv";
	}
	rm.writeAttribute("class", sClasses);

	if (oAdditionalStyles) {
		for ( var sStyleKey in oAdditionalStyles) {
			rm.addStyle(sStyleKey, oAdditionalStyles[sStyleKey]);
		}
	}
	rm.writeStyles();
	rm.write(">");

	rm.write(sRenderText);

	rm.write("</div>");

	rm.write("</td>");
};

}; // end of sap/zen/crosstab/DataCellRenderer.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.HeaderCell') ) {
/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.zen.crosstab.HeaderCell.
jQuery.sap.declare("sap.zen.crosstab.HeaderCell");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new HeaderCell.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRowSpan rowSpan} : int</li>
 * <li>{@link #getColSpan colSpan} : int</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getMergeKey mergeKey} : string</li>
 * <li>{@link #getSort sort} : string</li>
 * <li>{@link #getSortAction sortAction} : string</li>
 * <li>{@link #getArea area} : object</li>
 * <li>{@link #getEffectiveColSpan effectiveColSpan} : int</li>
 * <li>{@link #getEffectiveRowSpan effectiveRowSpan} : int</li>
 * <li>{@link #getRow row} : int</li>
 * <li>{@link #getCol col} : int</li>
 * <li>{@link #getLevel level} : int</li>
 * <li>{@link #getDrillState drillState} : string</li>
 * <li>{@link #getHierarchyAction hierarchyAction} : string</li>
 * <li>{@link #getHierarchyTooltip hierarchyTooltip} : string</li>
 * <li>{@link #getHtmlIE8RowSpan htmlIE8RowSpan} : int (default: 1)</li>
 * <li>{@link #getSortTextIndex sortTextIndex} : int</li>
 * <li>{@link #getTableRow tableRow} : int</li>
 * <li>{@link #getTableCol tableCol} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the new HeaderCell
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 14.1.0
 *
 * @constructor   
 * @public
 * @name sap.zen.crosstab.HeaderCell
 */
sap.ui.core.Control.extend("sap.zen.crosstab.HeaderCell", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"addStyle"
	],

	// ---- control specific ----
	library : "sap.zen.crosstab",
	properties : {
		"rowSpan" : {type : "int", group : "Misc", defaultValue : null},
		"colSpan" : {type : "int", group : "Misc", defaultValue : null},
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"mergeKey" : {type : "string", group : "Misc", defaultValue : null},
		"sort" : {type : "string", group : "Misc", defaultValue : null},
		"sortAction" : {type : "string", group : "Misc", defaultValue : null},
		"area" : {type : "object", group : "Misc", defaultValue : null},
		"effectiveColSpan" : {type : "int", group : "Misc", defaultValue : null},
		"effectiveRowSpan" : {type : "int", group : "Misc", defaultValue : null},
		"row" : {type : "int", group : "Misc", defaultValue : null},
		"col" : {type : "int", group : "Misc", defaultValue : null},
		"level" : {type : "int", group : "Misc", defaultValue : null},
		"drillState" : {type : "string", group : "Misc", defaultValue : null},
		"hierarchyAction" : {type : "string", group : "Misc", defaultValue : null},
		"hierarchyTooltip" : {type : "string", group : "Misc", defaultValue : null},
		"htmlIE8RowSpan" : {type : "int", group : "Misc", defaultValue : 1},
		"sortTextIndex" : {type : "int", group : "Misc", defaultValue : null},
		"tableRow" : {type : "int", group : "Misc", defaultValue : null},
		"tableCol" : {type : "int", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.zen.crosstab.HeaderCell with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.zen.crosstab.HeaderCell.extend
 * @function
 */


/**
 * Getter for property <code>rowSpan</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>rowSpan</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getRowSpan
 * @function
 */

/**
 * Setter for property <code>rowSpan</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iRowSpan  new value for property <code>rowSpan</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setRowSpan
 * @function
 */


/**
 * Getter for property <code>colSpan</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>colSpan</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getColSpan
 * @function
 */

/**
 * Setter for property <code>colSpan</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iColSpan  new value for property <code>colSpan</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setColSpan
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setText
 * @function
 */


/**
 * Getter for property <code>mergeKey</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>mergeKey</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getMergeKey
 * @function
 */

/**
 * Setter for property <code>mergeKey</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sMergeKey  new value for property <code>mergeKey</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setMergeKey
 * @function
 */


/**
 * Getter for property <code>sort</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>sort</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getSort
 * @function
 */

/**
 * Setter for property <code>sort</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSort  new value for property <code>sort</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setSort
 * @function
 */


/**
 * Getter for property <code>sortAction</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>sortAction</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getSortAction
 * @function
 */

/**
 * Setter for property <code>sortAction</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSortAction  new value for property <code>sortAction</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setSortAction
 * @function
 */


/**
 * Getter for property <code>area</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>area</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getArea
 * @function
 */

/**
 * Setter for property <code>area</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oArea  new value for property <code>area</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setArea
 * @function
 */


/**
 * Getter for property <code>effectiveColSpan</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>effectiveColSpan</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getEffectiveColSpan
 * @function
 */

/**
 * Setter for property <code>effectiveColSpan</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iEffectiveColSpan  new value for property <code>effectiveColSpan</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setEffectiveColSpan
 * @function
 */


/**
 * Getter for property <code>effectiveRowSpan</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>effectiveRowSpan</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getEffectiveRowSpan
 * @function
 */

/**
 * Setter for property <code>effectiveRowSpan</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iEffectiveRowSpan  new value for property <code>effectiveRowSpan</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setEffectiveRowSpan
 * @function
 */


/**
 * Getter for property <code>row</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>row</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getRow
 * @function
 */

/**
 * Setter for property <code>row</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iRow  new value for property <code>row</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setRow
 * @function
 */


/**
 * Getter for property <code>col</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>col</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getCol
 * @function
 */

/**
 * Setter for property <code>col</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iCol  new value for property <code>col</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setCol
 * @function
 */


/**
 * Getter for property <code>level</code>.
 * 
 *
 * Default value is <code></code>
 *
 * @return {int} the value of property <code>level</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getLevel
 * @function
 */

/**
 * Setter for property <code>level</code>.
 *
 * Default value is <code></code> 
 *
 * @param {int} iLevel  new value for property <code>level</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setLevel
 * @function
 */


/**
 * Getter for property <code>drillState</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>drillState</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getDrillState
 * @function
 */

/**
 * Setter for property <code>drillState</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDrillState  new value for property <code>drillState</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setDrillState
 * @function
 */


/**
 * Getter for property <code>hierarchyAction</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>hierarchyAction</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getHierarchyAction
 * @function
 */

/**
 * Setter for property <code>hierarchyAction</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHierarchyAction  new value for property <code>hierarchyAction</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setHierarchyAction
 * @function
 */


/**
 * Getter for property <code>hierarchyTooltip</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>hierarchyTooltip</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getHierarchyTooltip
 * @function
 */

/**
 * Setter for property <code>hierarchyTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHierarchyTooltip  new value for property <code>hierarchyTooltip</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setHierarchyTooltip
 * @function
 */


/**
 * Getter for property <code>htmlIE8RowSpan</code>.
 * 
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>htmlIE8RowSpan</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getHtmlIE8RowSpan
 * @function
 */

/**
 * Setter for property <code>htmlIE8RowSpan</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iHtmlIE8RowSpan  new value for property <code>htmlIE8RowSpan</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setHtmlIE8RowSpan
 * @function
 */


/**
 * Getter for property <code>sortTextIndex</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>sortTextIndex</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getSortTextIndex
 * @function
 */

/**
 * Setter for property <code>sortTextIndex</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iSortTextIndex  new value for property <code>sortTextIndex</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setSortTextIndex
 * @function
 */


/**
 * Getter for property <code>tableRow</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>tableRow</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getTableRow
 * @function
 */

/**
 * Setter for property <code>tableRow</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iTableRow  new value for property <code>tableRow</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setTableRow
 * @function
 */


/**
 * Getter for property <code>tableCol</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>tableCol</code>
 * @public
 * @name sap.zen.crosstab.HeaderCell#getTableCol
 * @function
 */

/**
 * Setter for property <code>tableCol</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iTableCol  new value for property <code>tableCol</code>
 * @return {sap.zen.crosstab.HeaderCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.HeaderCell#setTableCol
 * @function
 */


/**
 * 
 *
 * @name sap.zen.crosstab.HeaderCell.prototype.addStyle
 * @function
 * @param {string} 
 *         sSStyle
 * 

 * @type void
 * @public
 */


// Start of sap\zen\crosstab\HeaderCell.js
///**
// * This file defines behavior for the control, 
// */




sap.zen.crosstab.HeaderCell.prototype.init = function () {
	"use strict";
	this.aStyles = [];
	this.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_HEADER_CELL);
	this.bLoading = false;
	this.bSelectable = false;
	this.bIsInnerMember = false;
	this.bIsResult = false;
	this.bIsMobileResize = false;
	this.sUnit = "";
	this.bIsEntryEnabled = false;
	this.sPassiveCellType = sap.zen.crosstab.rendering.RenderingConstants.PASSIVE_CELL_TYPE_NORMAL;
	this.bTextHasLineBreaks = false;
};

sap.zen.crosstab.HeaderCell.prototype.getCellType = function() {
	return sap.zen.crosstab.rendering.RenderingConstants.TYPE_HEADER_CELL;
};

sap.zen.crosstab.HeaderCell.prototype.getCssClassNames = function (bIsIE8) {
	return sap.zen.crosstab.CellStyleHandler.getCssClasses(this.aStyles, bIsIE8);
};

sap.zen.crosstab.HeaderCell.prototype.getStyleIdList = function () {
	return this.aStyles;
};

sap.zen.crosstab.HeaderCell.prototype.setStyleIdList = function (aNewStyles) {
	this.aStyles = aNewStyles;
};

sap.zen.crosstab.HeaderCell.prototype.addStyle = function (sStyle) {
	var iStyleId = sap.zen.crosstab.CellStyleHandler.getStyleId(sStyle,
			sap.zen.crosstab.rendering.RenderingConstants.TYPE_HEADER_CELL);
	if (this.aStyles.indexOf(iStyleId) === -1) {
		this.aStyles.push(iStyleId);
	}
};

sap.zen.crosstab.HeaderCell.prototype.removeStyle = function (sStyle) {
	var iStyleId = sap.zen.crosstab.CellStyleHandler.getStyleId(sStyle,
			sap.zen.crosstab.rendering.RenderingConstants.TYPE_HEADER_CELL);
	var iIndex = this.aStyles.indexOf(iStyleId);
	if (iIndex !== -1) {
		this.aStyles.splice(iIndex, 1);
	}
};

sap.zen.crosstab.HeaderCell.prototype.hasStyle = function (sStyle) {
	var iStyleId = sap.zen.crosstab.CellStyleHandler.getStyleId(sStyle,
			sap.zen.crosstab.rendering.RenderingConstants.TYPE_HEADER_CELL);
	var iIndex = this.aStyles.indexOf(iStyleId);
	if (iIndex === -1) {
		return false;
	} else {
		return true;
	}
};

sap.zen.crosstab.HeaderCell.prototype.isLoading = function () {
	return this.bLoading;
};

sap.zen.crosstab.HeaderCell.prototype.setLoading = function (bLoading) {
	this.bLoading = bLoading;
};

sap.zen.crosstab.HeaderCell.prototype.isSelectable = function () {
	return this.bSelectable;
};

sap.zen.crosstab.HeaderCell.prototype.setSelectable = function (bSelectable) {
	this.bSelectable = bSelectable;
};

sap.zen.crosstab.HeaderCell.prototype.setInnerMember = function (bIsInnerMember) {
	this.bIsInnerMember = bIsInnerMember;
};

sap.zen.crosstab.HeaderCell.prototype.isInnerMember = function () {
	return this.bIsInnerMember;
};

sap.zen.crosstab.HeaderCell.prototype.setResult = function (bIsResult) {
	this.bIsResult = bIsResult;
};

sap.zen.crosstab.HeaderCell.prototype.isResult = function () {
	return this.bIsResult;
};

sap.zen.crosstab.HeaderCell.prototype.getUnescapedText = function () {
	return sap.zen.crosstab.utils.Utils.unEscapeDisplayString(this.getText());
};

sap.zen.crosstab.HeaderCell.prototype.isMobileResize = function () {
	return this.bIsMobileResize;
};

sap.zen.crosstab.HeaderCell.prototype.setMobileResize = function (pbMobileResize) {
	this.bIsMobileResize = pbMobileResize;
};

sap.zen.crosstab.HeaderCell.prototype.setEntryEnabled = function (bIsEntryEnabled) {
	this.bIsEntryEnabled = bIsEntryEnabled;
};

sap.zen.crosstab.HeaderCell.prototype.isEntryEnabled = function () {
	return this.bIsEntryEnabled;
};

sap.zen.crosstab.HeaderCell.prototype.setUnit = function (sUnit) {
	this.sUnit = sUnit;
};

sap.zen.crosstab.HeaderCell.prototype.getUnit = function () {
	return this.sUnit;
};

sap.zen.crosstab.HeaderCell.prototype.getPassiveCellType = function () {
	return this.sPassiveCellType;
};

sap.zen.crosstab.HeaderCell.prototype.setPassiveCellType = function (sPCellType) {
	this.sPassiveCellType = sPCellType;
};

sap.zen.crosstab.HeaderCell.prototype.setTextHasLineBreaks = function (bTextHasLineBreaks) {
	this.bTextHasLineBreaks = bTextHasLineBreaks;
};

sap.zen.crosstab.HeaderCell.prototype.textHasLineBreaks = function () {
	return this.bTextHasLineBreaks;
};

}; // end of sap/zen/crosstab/HeaderCell.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.HeaderCellRenderer') ) {
jQuery.sap.declare("sap.zen.crosstab.HeaderCellRenderer");




/**
 * @class HeaderCell renderer.
 * @static
 */
sap.zen.crosstab.HeaderCellRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be rendered
 */
sap.zen.crosstab.HeaderCellRenderer.render = function (oRenderManager, oControl) {
	"use strict";
	// convenience variable
	var oArea = oControl.getArea();
	var oCrosstab = oArea.getCrosstab();
	var rm = oRenderManager;
	var iColspan = null;
	var iRowspan = null;

	var fRenderCallback = oArea.getRenderCellCallback();
	var sRenderText = oControl.getText();
	var oAdditionalStyles = null;

	if (fRenderCallback) {
		var oCallbackResult = fRenderCallback(new sap.zen.crosstab.IHeaderCell(oControl));
		oAdditionalStyles = oCallbackResult.additionalStyles;
		sRenderText = oCallbackResult.renderText;
	}

	var sCssClasses = oControl.getCssClassNames(oCrosstab.isIE8Mode());

	if (oControl.getSort()) {
		// Empty css class to enable hover effects
		sCssClasses += " sapzencrosstab-HeaderCellSortable";
	}

	var sDrillState = oControl.getDrillState();

	if (sDrillState) {
		sCssClasses += " sapzencrosstab-HeaderCellHierarchy";
	}

	// write the HTML into the render manager
	rm.write("<td");

	rm.writeControlData(oControl);
	rm.writeAttribute("class", sCssClasses);

	rm.writeAttribute("tabindex", sap.zen.crosstab.rendering.RenderingConstants.TABINDEX);

	iColspan = oControl.getEffectiveColSpan();
	if (iColspan > 1) {
		rm.writeAttribute("colspan", iColspan);
	}

	iRowspan = oControl.getEffectiveRowSpan();
	if (iRowspan > 1) {
		rm.writeAttribute("rowspan", iRowspan);
	}

	rm.write(">"); // td element

	rm.write("<div");
	rm.writeAttribute("class", "sapzencrosstab-cellLayoutDiv");
	rm.writeAttribute("id", oControl.getId() + "_cellLayoutDiv");
	rm.writeAttribute("tabindex", sap.zen.crosstab.rendering.RenderingConstants.TABINDEX);
	if (oControl.isEntryEnabled()) {
		// prepare for postprocessing logic workaround in adjustColWidths of RenderEngine
		rm.addStyle("width", "0px");
		rm.writeStyles();
	}
	rm.write(">");

	if (oControl.isEntryEnabled()) {
		rm.write("<table style='width: 100%; border-spacing: 0px;'><tbody>");
		rm.write("<tr>");
		rm.write("<td style='width: 100%; padding: 0px 5px 0px 0px;'>");
	}

	rm.write("<div");
	rm.writeAttribute("id", oControl.getId() + "_contentDiv");
	rm.writeAttribute("tabindex", sap.zen.crosstab.rendering.RenderingConstants.TABINDEX);
	if (oControl.isEntryEnabled()) {
		rm.addStyle("width", "100%");
		rm.writeStyles();
	}

	var sClasses = "sapzencrosstab-HeaderCellContentDiv";
	if (oControl.isLoading()) {
		sClasses += " sapzencrosstab-LoadingCellContentDiv";
	}
	rm.writeAttribute("class", sClasses);

	if (oAdditionalStyles) {
		for ( var sStyleKey in oAdditionalStyles) {
			rm.addStyle(sStyleKey, oAdditionalStyles[sStyleKey]);
		}
	}
	rm.writeStyles();

	rm.write(">");

	var sSort = oControl.getSort();

	if (sSort || sDrillState) {
		createContentTable(sSort, sDrillState);
	} else {
		rm.write(sRenderText);
	}

	// cell content div
	rm.write("</div>");

	if (oCrosstab.getPropertyBag().isEnableColResize() === true) {
		if (oArea.isColHeaderArea() || oArea.isDimHeaderArea()) {
			if (oCrosstab.getPropertyBag().isTestMobileMode() || oCrosstab.getPropertyBag().isMobileMode()) {
				oControl.setMobileResize(true);
			} else {
				// resize handle div
				rm.write("<div");
				rm.writeAttribute("id", "resi_" + oControl.getId());
				rm.writeAttribute("class", "sapzencrosstab-columnResizeHandle");
				rm.writeAttribute("title", oCrosstab.getPropertyBag().getText(
						sap.zen.crosstab.TextConstants.COLWIDTH_ADJUST_TEXT_KEY));
				rm.write(">");
				rm.write("</div>");
				oControl.setMobileResize(false);
			}
		}
	}
	// cellLayoutDiv
	rm.write("</div>");

	if (oControl.isEntryEnabled()) {
		rm.write("</td>");

		rm.write("<td style='padding: 0px'>");

		rm.write("<div");
		rm.writeAttribute("id", "vhlp_" + oControl.getId());
		rm.writeAttribute("class", "sapzencrosstab-HeaderCellDivValueHelp sapzencrosstab-HeaderCellValueHelp");
		rm.write(">");
		rm.write("</div>");

		rm.write("</td>");

		rm.write("</tr>");

		rm.write("</tbody></table>");
	}

	rm.write("</td>");

	function insertSortingImage () {
		if (sSort) {
			var iTextIndex = 0;
			rm.write("<td>");
			var sClass = "sapzencrosstab-HeaderCellDivSortable ";

			rm.write("<div");
			if (sSort === "NONE") {
				sClass += "sapzencrosstab-HeaderCellSortNone";
				iTextIndex = 0;
			} else if (sSort === "ASC") {
				sClass += "sapzencrosstab-HeaderCellSortAsc";
				iTextIndex = 1;
			} else if (sSort === "DESC") {
				sClass += "sapzencrosstab-HeaderCellSortDesc";
				iTextIndex = 2;
			}
			rm.writeAttribute("class", sClass);
			rm.writeAttribute("id", "sort_" + oControl.getId());

			// Tooltip
			var sSortTooltip = oCrosstab.getPropertyBag().getSortingToolTip(iTextIndex);
			if (sSortTooltip) {
				rm.writeAttribute("title", sSortTooltip);
			}

			rm.write("></div></td>");
		}
	}

	function insertHierarchyActionImage () {
		if (sDrillState) {
			var iLevel = oControl.getLevel();
			var isRowHeaderArea = oControl.getArea().isRowHeaderArea();
			var sClass = "sapzencrosstab-HeaderCellDivHierarchy ";
			if (oControl.getHierarchyAction()) {
				if (sDrillState === "O") {
					sClass += "sapzencrosstab-CollapseNode";
				} else if (sDrillState === "C") {
					sClass += "sapzencrosstab-ExpandNode";
				}
				if (sDrillState === "O" || sDrillState === "C") {
					sClass += " sapzencrosstab-PointerCursor";
				}
			}

			// insert space before text
			if (iLevel > 0) {
				if (isRowHeaderArea) {
					var iWidth = iLevel * oCrosstab.getHierarchyIndentWidth();
					rm.write("<td><div");
					rm.writeAttribute("tabindex", sap.zen.crosstab.rendering.RenderingConstants.TABINDEX);
					rm.addStyle("width", iWidth + "px");
					rm.writeAttribute("class", "sapzencrosstab-HierarchySpacerDivBefore");
					rm.writeStyles();
					rm.write("></div></td>");
				}
			}

			if ((sDrillState === "L" && iLevel > 0) || sDrillState !== "L") {
				rm.write("<td><div");
				if (oControl.getHierarchyAction()) {
					rm.writeAttribute("id", "hier_" + oControl.getId());
				}
				rm.writeAttribute("class", sClass);

				// Tooltip
				var sHierarchyTooltip = oControl.getHierarchyTooltip();
				if (sHierarchyTooltip) {
					rm.writeAttribute("title", sHierarchyTooltip);
				}

				rm.write("></div></td>");
			}
		}
	}

	function writeTextContent () {
		rm.write("<td><div");
		rm.writeAttribute("id", oControl.getId() + "_textContentDiv");
		rm.writeAttribute("tabindex", sap.zen.crosstab.rendering.RenderingConstants.TABINDEX);
		rm.write(">");
		rm.write(sRenderText);
		rm.write("</div></td>");
	}

	function insertColHeaderHierarchySpacerLinesBefore () {
		if (sDrillState) {
			var iLevel = oControl.getLevel();
			if (iLevel > 0 && oControl.getArea().isColHeaderArea()) {
				var iHeight = iLevel * oCrosstab.getHierarchyIndentHeight();
				rm.write("<tr><td><div");
				rm.writeAttribute("tabindex", sap.zen.crosstab.rendering.RenderingConstants.TABINDEX);
				rm.writeAttribute("class", "sapzencrosstab-HierarchySpacerLinesBefore");
				rm.addStyle("height", iHeight + "px");
				rm.writeStyles();
				rm.write("></div></td></tr>");
			}
		}
	}

	function insertColHeaderHierarchySpacerLinesAfter () {
		if (sDrillState && oControl.getArea().isColHeaderArea()) {
			var iLevel = oControl.getLevel();
			var iMaxLevel = oCrosstab.getColHeaderHierarchyLevels()[oControl.getRow()];
			var iDiff = iMaxLevel - iLevel;
			if (iDiff > 0) {
				var iHeight = iDiff * oCrosstab.getHierarchyIndentHeight();
				rm.write("<tr><td><div");
				rm.writeAttribute("tabindex", sap.zen.crosstab.rendering.RenderingConstants.TABINDEX);
				rm.writeAttribute("class", "sapzencrosstab-HierarchySpacerLinesAfter");
				rm.addStyle("height", iHeight + "px");
				rm.writeStyles();
				rm.write("></div></td></tr>");
			}
		}
	}

	function insertRowHeaderHierarchSpacerDivAfter () {
		if (sDrillState && oControl.getArea().isRowHeaderArea()) {
			var iLevel = oControl.getLevel();
			var iMaxLevel = oCrosstab.getRowHeaderHierarchyLevels()[oControl.getCol()];
			var iDiff = iMaxLevel - iLevel;
			if (iDiff > 0) {
				var iWidth = iDiff * oCrosstab.getHierarchyIndentWidth();
				rm.write("<td><div");
				rm.writeAttribute("tabindex", sap.zen.crosstab.rendering.RenderingConstants.TABINDEX);
				rm.addStyle("width", iWidth + "px");
				rm.writeAttribute("class", "sapzencrosstab-HierarchySpacerDivAfter");
				rm.writeStyles();
				rm.write("></div></td>");
			}
		}
	}

	function createContentTable () {
		rm.write("<table><tbody>");
		insertColHeaderHierarchySpacerLinesBefore();
		rm.write("<tr>");
		insertHierarchyActionImage();
		writeTextContent();
		insertSortingImage();
		insertRowHeaderHierarchSpacerDivAfter();
		rm.write("</tr>");
		insertColHeaderHierarchySpacerLinesAfter();
		rm.write("</tbody></table>");
	}
};

}; // end of sap/zen/crosstab/HeaderCellRenderer.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.TouchHandler') ) {
jQuery.sap.declare("sap.zen.crosstab.TouchHandler");


sap.zen.crosstab.TouchHandler = function (oEventHandler, oCrosstab) {

	var oDataArea = oCrosstab.getDataArea();
	var oRowHeaderArea = oCrosstab.getRowHeaderArea();
	var oColHeaderArea = oCrosstab.getColumnHeaderArea();
	var oDimensionHeaderArea = oCrosstab.getDimensionHeaderArea();
	var iLastMouseX = 0;
	var iLastMouseY = 0;
	var bTouchStartReceived = false;
	var bMoveAction = false;
	var oDomDataArea = $("#" + oDataArea.getId());
	var oDomRowHeaderArea = $("#" + oRowHeaderArea.getId());
	var oDomColHeaderArea = $("#" + oColHeaderArea.getId());
	var oDomDimensionHeaderArea = $("#" + oDimensionHeaderArea.getId());
	var sTargetAreaId = "";
	var oTimeout = null;
	var iDelay = "800";
	var iVScrollCnt = 0;
	var iHScrollCnt = 0;
	var iRowCntLength = 0;
	var iColCntLength = 0;
	var iNewVScrollPos = 0;
	var iNewHScrollPos = 0;
	var iOldVScrollPos = 0;
	var iOldHScrollPos = 0;
	var oPopup = null;
	var oPopupContent = null;
	var iIpadFactor = 2;
	var oResizeMenu = null;
	var oVScrollbar = null;
	var oHScrollbar = null;
	var bIsHeaderScrolling = false;
	
	function getMobileResizeableCell (e) {
		var oResizeableCell = null;
		var i = 0;
		var oCell = sap.ui.getCore().getControl(e.target.id);
		var oDomCell = null;
		var sCellId = null;

		if (oCell && (oCell.isMobileResize && oCell.isMobileResize())) {
			oResizeableCell = oCell;
		} else {
			// see if we have a selectable cell as parent
			var aParentCells = $(e.target).parents("td");
			if (aParentCells) {
				for (i = 0; i < aParentCells.length; i++) {
					oDomCell = $(aParentCells[i]);
					sCellId = oDomCell.attr("id");
					if (sCellId && sCellId.length > 0) {
						oCell = sap.ui.getCore().getControl(sCellId);
						if (oCell && (oCell.isMobileResize && oCell.isMobileResize())) {
							oResizeableCell = oCell;
							break;
						}
					}
				}
			}
		}
		return oResizeableCell;
	}
	
	function menuResizeEntrySelected (oEvent) {
		var oCell = oEvent.getParameter("item").oSelectedCell;
		if (oCell) {
			oEventHandler.doColResize(oCell);
		}
	}

	function ensureResizeMenu () {
		if (!oResizeMenu) {
			// Create the menu
			oResizeMenu = new sap.ui.commons.Menu("resizemenu", {
				ariaDescription: "Crosstab Menu",
				tooltip: "Menu containing crosstab related actions"
			});
			oResizeMenu.addStyleClass("sapzencrosstab-MenuStyle");
			// Create the items and add them to the menu
			var oMenuItem = new sap.ui.commons.MenuItem("item1", {
				text: oCrosstab.getPropertyBag().getText(
						sap.zen.crosstab.TextConstants.MOBILE_MENUITEM_COLWIDTH_ADJUST_TEXT_KEY)
			});
			oMenuItem.attachSelect(menuResizeEntrySelected);
			oResizeMenu.addItem(oMenuItem);
		}
	}

	function prepareRowColPopup () {
		iRowCntLength = (oDataArea.getRowCnt() + "").length;
		iColCntLength = (oDataArea.getColCnt() + "").length;
		// Prepare row/col popup
		oPopup = new sap.ui.core.Popup();
		oPopup.setContent(new sap.ui.commons.TextView());
		oPopup.setDurations(125, 500);
		oPopup.setAutoClose(true);

		oPopupContent = oPopup.getContent();

		oPopupContent.addStyleClass("sapzencrosstab-ScrollPopup");
		oPopupContent.setWrapping(false);

		var eDock = sap.ui.core.Popup.Dock;
		oPopup.setPosition(eDock.CenterCenter, eDock.CenterCenter, $('#' + oCrosstab.getId() + "_renderSizeDiv")[0],
				"0");
	}

	function rerenderRowColPopup () {
		var sRowText = oCrosstab.getPropertyBag().getText(sap.zen.crosstab.TextConstants.ROW_TEXT_KEY) + ": "
				+ sap.zen.crosstab.utils.Utils.padWithZeroes(iNewVScrollPos + 1, iRowCntLength) + "/"
				+ oRowHeaderArea.getRowCnt();
		var sColText = oCrosstab.getPropertyBag().getText(sap.zen.crosstab.TextConstants.COL_TEXT_KEY) + ": "
				+ sap.zen.crosstab.utils.Utils.padWithZeroes(iNewHScrollPos + 1, iColCntLength) + "/"
				+ oColHeaderArea.getColCnt();
		var sText = sRowText + " " + sColText;
		oPopup.getContent().setProperty("text", sText, true);
		oPopup.getContent().rerender();
	}

	function onTouchStart (e) {
		sap.zen.crosstab.utils.Utils.cancelEvent(e);

		iVScrollCnt = 0;
		iHScrollCnt = 0;
		iNewVScrollPos = 0;
		iNewHScrollPos = 0;

		if (oResizeMenu) {
			oResizeMenu.close();
		}

		sTargetAreaId = e.currentTarget.getAttribute("id");
		oCurrentlyHoveredCell = null;

		if (e.originalEvent.touches && e.originalEvent.touches.length) {
			e = e.originalEvent.touches[0];
		} else if (e.originalEvent.changedTouches && e.originalEvent.changedTouches.length) {
			e = e.originalEvent.changedTouches[0];
		}

		iLastMouseX = e.pageX;
		iLastMouseY = e.pageY;
		bTouchStartReceived = true;
		bMoveAction = false;

		if (oTimeout) {
			window.clearTimeout(oTimeout);
			oTimeout = null;
		}
		oTimeout = setTimeout(function () {
			bTouchStartReceived = false;
			bMoveAction = false;

			var oCell = getMobileResizeableCell(e);
			if (oCell) {
				ensureResizeMenu();
				var oDomCell = $('#' + oCell.getId());
				var eDock = sap.ui.core.Popup.Dock;
				// provide context (i. e. the selected cell) for selection event
				oResizeMenu.getItems()[0].oSelectedCell = oCell;
				oResizeMenu.open(false /* First item already highlighted */,
						oDomCell /* Dom reference which gets the focus back when the menu is closed */,
						eDock.BeginBottom, /* "Edge" of the menu (see sap.ui.core.Popup) */
						eDock.BeginTop, /* "Edge" of the related opener position (see sap.ui.core.Popup) */
						oDomCell, /* Related opener position (see sap.ui.core.Popup) */
						0 + " " + 0, /* Offset */
						sap.ui.core.Collision.flip /* Collision detection */);

			}
		}, iDelay);
	}
	
	function handleHeaderScrolling(iDx, iAbsDx) {
		var oHeaderScrollbar = oCrosstab.getHorizontalHeaderScrollbar();
		if (oHeaderScrollbar) {
			iOldHScrollPos = oHeaderScrollbar.getScrollPosition();
			iNewHScrollPos = Math.max(iOldHScrollPos - iDx, 0);
			if (iAbsDx > 0) {
				oCrosstab.scrollHeaderHorizontal(iNewHScrollPos);
			}
		}
	}
	
	function handleDataScrolling(iDx, iDy, iAbsDx, iAbsDy) {
		if (oCrosstab.getPropertyBag().isPixelScrolling()) {
			if (oVScrollbar) {
				iOldVScrollPos = oVScrollbar.getScrollPosition();
				iNewVScrollPos = Math.max(iOldVScrollPos - iDy, 0);
			}
			if (oHScrollbar) {
				iOldHScrollPos = oHScrollbar.getScrollPosition();
				iNewHScrollPos = Math.max(iOldHScrollPos - iDx, 0);
			}
			if (oVScrollbar && iAbsDy > 0) {
				oCrosstab.scrollVertical(iNewVScrollPos);
			}
			if (oHScrollbar && iAbsDx > 0) {
				oCrosstab.scrollHorizontal(iNewHScrollPos);
			}

		} else {
			if (oPopup.getOpenState() === sap.ui.core.OpenState.CLOSED) {
				oPopup.open(-1);
			}
			if (oVScrollbar) {
				if (oCrosstab.getRenderEngine().isVScrolledToEnd()) {
					if (sap.zen.crosstab.utils.Utils.sign(iDy) > 0) {
						iVScrollCnt -= sap.zen.crosstab.utils.Utils.sign(iDy);
					} else {
						iVScrollCnt = 0;
					}
				} else {
					iVScrollCnt -= sap.zen.crosstab.utils.Utils.sign(iDy);
				}
				iOldVScrollPos = oRowHeaderArea.getRenderStartRow();
				iNewVScrollPos = Math.max(Math.floor(iVScrollCnt / iIpadFactor) + iOldVScrollPos, 0);
				iNewVScrollPos = Math.min(oDataArea.getRowCnt() - 1, iNewVScrollPos);
			}

			if (oHScrollbar) {
				if (oCrosstab.getRenderEngine().isHScrolledToEnd()) {
					if (sap.zen.crosstab.utils.Utils.sign(iDx) > 0) {
						iHScrollCnt -= sap.zen.crosstab.utils.Utils.sign(iDx);
					} else {
						iHScrollCnt = 0;
					}
				} else {
					iHScrollCnt -= sap.zen.crosstab.utils.Utils.sign(iDx);
				}
				iOldHScrollPos = oColHeaderArea.getRenderStartCol();
				iNewHScrollPos = Math.max(Math.floor(iHScrollCnt / iIpadFactor) + iOldHScrollPos, 0);
				iNewHScrollPos = Math.min(oDataArea.getColCnt() - 1, iNewHScrollPos);
			}

			rerenderRowColPopup();
		}
	}

	function onTouchMove (e) {
		sap.zen.crosstab.utils.Utils.cancelEvent(e);
		if (bTouchStartReceived == false) {
			return true;
		}
		bMoveAction = true;

		if (oTimeout) {
			window.clearTimeout(oTimeout);
			oTimeout = null;
		}

		if (e.originalEvent.touches && e.originalEvent.touches.length) {
			e = e.originalEvent.touches[0];
		} else if (e.originalEvent.changedTouches && e.originalEvent.changedTouches.length) {
			e = e.originalEvent.changedTouches[0];
		}

		var actMouseX = e.pageX;
		var actMouseY = e.pageY;

		var iDx = actMouseX - iLastMouseX;
		var iDy = actMouseY - iLastMouseY;

		oVScrollbar = oCrosstab.getVScrollbar();
		oHScrollbar = oCrosstab.getHScrollbar();

		var iAbsDy = Math.abs(iDy);
		var iAbsDx = Math.abs(iDx);

		if (iAbsDy > iAbsDx && iAbsDx < 5) {
			iDx = 0;
			iAbsDx = 0;
		} else if (iAbsDx > iAbsDy && iAbsDy < 5) {
			iDy = 0;
			iAbsDy = 0;
		}

		bIsHeaderScrolling = false;
		if (sTargetAreaId === oRowHeaderArea.getId()) {
			bIsHeaderScrolling = oCrosstab.isHeaderHScrolling() && (iDx !== 0); 
			if (!bIsHeaderScrolling) {
				iDx = 0;
				iAbsDx = 0;
			}
		} else if (sTargetAreaId === oColHeaderArea.getId()) {
			iDy = 0;
			iAbsDy = 0;
		} else if (sTargetAreaId === oDimensionHeaderArea.getId()) {
			bIsHeaderScrolling = oCrosstab.isHeaderHScrolling() && (iDx !== 0); 
			if (!bIsHeaderScrolling) {
				iDx = 0;
				iAbsDx = 0;
			}
			iDy = 0;
			iAbsDy = 0;
		}
		
		if (bIsHeaderScrolling === true) {
			handleHeaderScrolling(iDx, iAbsDx);
		} else {
			handleDataScrolling(iDx, iDy, iAbsDx, iAbsDy);
		}

		iLastMouseX = e.pageX;
		iLastMouseY = e.pageY;
	}

	function onTouchEnd (e) {
		sap.zen.crosstab.utils.Utils.cancelEvent(e);

		if (oTimeout) {
			window.clearTimeout(oTimeout);
			oTimeout = null;
		}

		if (bTouchStartReceived == false) {
			return true;
		}
		if (!bMoveAction) {
			oEventHandler.executeOnClickAction(e);
		}

		bTouchStartReceived = false;
		bMoveAction = false;

		if (!bIsHeaderScrolling) {
			if (!oCrosstab.getPropertyBag().isPixelScrolling()) {
				if (oPopup.getOpenState() === sap.ui.core.OpenState.OPEN) {
					oPopup.close();
				}
				var bReattachEvents = false;
				if (iNewVScrollPos !== iOldVScrollPos) {
					oCrosstab.scrollVertical(iNewVScrollPos);
					bReattachEvents = true;
				}
				if (iNewHScrollPos !== iOldHScrollPos) {
					oCrosstab.scrollHorizontal(iNewHScrollPos);
					bReattachEvents = true;
				}

				if (bReattachEvents === true) {
					oEventHandler.attachEvents();
				}
			}
			iVScrollCnt = 0;
			iHScrollCnt = 0;
		}
	}

	this.registerTouchEvents = function (oDomRenderSizeDiv) {
		prepareRowColPopup();

		// TOUCHSTART
		// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		var sEventToHandle = "touchstart";
		if (oCrosstab.getPropertyBag().isTestMobileMode() && !oCrosstab.getPropertyBag().isMobileMode()) {
			sEventToHandle = "mousedown";
		}
		oDomDataArea.unbind(sEventToHandle);
		oDomDataArea.bind(sEventToHandle, onTouchStart);

		oDomRowHeaderArea.unbind(sEventToHandle);
		oDomRowHeaderArea.bind(sEventToHandle, onTouchStart);

		oDomColHeaderArea.unbind(sEventToHandle);
		oDomColHeaderArea.bind(sEventToHandle, onTouchStart);

		oDomDimensionHeaderArea.unbind(sEventToHandle);
		oDomDimensionHeaderArea.bind(sEventToHandle, onTouchStart);

		// TOUCHMOVE
		// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		sEventToHandle = "touchmove";
		if (oCrosstab.getPropertyBag().isTestMobileMode() && !oCrosstab.getPropertyBag().isMobileMode()) {
			sEventToHandle = "mousemove";
		}
		oDomRenderSizeDiv.unbind(sEventToHandle);
		oDomRenderSizeDiv.bind(sEventToHandle, onTouchMove);

		// TOUCHEND
		// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		sEventToHandle = "touchend";
		if (oCrosstab.getPropertyBag().isTestMobileMode() && !oCrosstab.getPropertyBag().isMobileMode()) {
			sEventToHandle = "mouseup";
		}
		oDomRenderSizeDiv.unbind(sEventToHandle);
		oDomRenderSizeDiv.bind(sEventToHandle, onTouchEnd);
	};
}
}; // end of sap/zen/crosstab/TouchHandler.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.datahandler.JsonDataHandler') ) {
jQuery.sap.declare("sap.zen.crosstab.datahandler.JsonDataHandler");





sap.zen.crosstab.datahandler.JsonDataHandler = function (oCrosstab) {

	var oDimensionHeaderArea = oCrosstab.getDimensionHeaderArea();
	var oColHeaderArea = oCrosstab.getColumnHeaderArea();
	var oRowHeaderArea = oCrosstab.getRowHeaderArea();
	var oDataArea = oCrosstab.getDataArea();

	var iFixedColHeaders = 0;
	var iFixedRowHeaders = 0;
	var iTotalDataColumns = 0;
	var iTotalDataRows = 0;

	var bFillDimensionHeaderArea = false;
	var bFillRowHeaderArea = false;
	var bFillColHeaderArea = false;

	var oJsonTableControl = null;
	var oCrosstabAreasToBeFilled = null;
	var iColOffset = 0;
	var iRowOffset = 0;

	var oColHeaderHierarchyLevels = {};
	var oRowHeaderHierarchyLevels = {};
	
	function createDefaultCrosstabTextCache () {
		if (!sap.zen.CrosstabTextCache) {
			sap.zen.CrosstabTextCache = {};
			sap.zen.CrosstabTextCache.filled = false;
			sap.zen.CrosstabTextCache.oTexts = {};
			sap.zen.CrosstabTextCache.oSortingTextLookupTable = {};
			sap.zen.CrosstabTextCache.defaultProvided = false;
		}
		var oPropertyBag = oCrosstab.getPropertyBag();
		// The texts are only sent once when the Crosstab is initialized. Therefore, this fallback
		// is only necessary if the texts have never before been set
		oPropertyBag.addText(sap.zen.crosstab.TextConstants.ROW_TEXT_KEY, "Row");
		oPropertyBag.addText(sap.zen.crosstab.TextConstants.COL_TEXT_KEY, "Column");
		oPropertyBag.addText(sap.zen.crosstab.TextConstants.COLWIDTH_ADJUST_TEXT_KEY,
				"Double Click to adjust Column Width");
		oPropertyBag.addText(sap.zen.crosstab.TextConstants.MOBILE_MENUITEM_COLWIDTH_ADJUST_TEXT_KEY,
				"Adjust Column Width");

		provideDefaultSortingTexts(oPropertyBag);
		sap.zen.CrosstabTextCache.defaultProvided = true;
	}

	function readTranslatedTexts (oTexts) {
		if (sap.zen.CrosstabTextCache.filled === false) {
			var oPropertyBag = oCrosstab.getPropertyBag();
			if (oTexts) {
				oPropertyBag.addText(sap.zen.crosstab.TextConstants.ROW_TEXT_KEY, oTexts.rowtext || "Row");
				oPropertyBag.addText(sap.zen.crosstab.TextConstants.COL_TEXT_KEY, oTexts.coltext || "Column");
				oPropertyBag.addText(sap.zen.crosstab.TextConstants.COLWIDTH_ADJUST_TEXT_KEY, oTexts.colwidthtext
						|| "Double Click to adjust Column Width");
				oPropertyBag.addText(sap.zen.crosstab.TextConstants.MOBILE_MENUITEM_COLWIDTH_ADJUST_TEXT_KEY,
						oTexts.mobilemenuitemcolwidthtext || "Adjust Column Width");

				extractSortingTexts(oTexts, oPropertyBag);
			}
			sap.zen.CrosstabTextCache.filled = true;
		}
	}

	function provideDefaultSortingTexts (oPropertyBag) {
		var oSortingLookup = {};
		oSortingLookup.alttext = "Unsorted. Select to sort ascending";
		oSortingLookup.tooltipidx = 0;
		oPropertyBag.addSortingTextLookup("0", oSortingLookup);

		oSortingLookup = {};
		oSortingLookup.alttext = "Sorted ascending. Select to sort descending";
		oSortingLookup.tooltipidx = 1;
		oPropertyBag.addSortingTextLookup("1", oSortingLookup);

		oSortingLookup = {};
		oSortingLookup.alttext = "Sorted descending. Select to sort ascending";
		oSortingLookup.tooltipidx = 2;
		oPropertyBag.addSortingTextLookup("2", oSortingLookup);
	}

	function extractSortingTexts (oTexts, oPropertyBag) {
		var oSortingTextList = oTexts.sorting;
		if (!oSortingTextList) {
			provideDefaultSortingTexts(oPropertyBag);
		} else {
			var i = 0;
			var iListLength = parseInt(oSortingTextList.length, 10);
			for (i = 0; i < iListLength; i++) {
				var oSortingLookup = {};
				oSortingLookup.alttext = oSortingTextList[i].alttext;
				oSortingLookup.tooltipidx = oSortingTextList[i].tooltipidx;
				oPropertyBag.addSortingTextLookup(i + "", oSortingLookup);
			}
		}
	}

	this.determineBasicAreaData = function (oCrosstabData, bIsFirstPage) {
		if (!sap.zen.CrosstabTextCache || (sap.zen.CrosstabTextCache && !sap.zen.CrosstabTextCache.defaultProvided)) {
			createDefaultCrosstabTextCache();
		}

		oJsonTableControl = oCrosstabData;

		if (!oJsonTableControl.rows) {
			handleMsgInTable(oJsonTableControl);
		} else {
			if (oJsonTableControl.selectedaxis) {
				oCrosstab.setSelectionInfo(oJsonTableControl.selectedaxis, oJsonTableControl.selectedpos);
			} else {
				if (oJsonTableControl.singledatacellselection === true) {
					oCrosstab.setSingleDataCellSelectionInfo(oJsonTableControl.datacellrowpos,
							oJsonTableControl.datacellcolpos);
				} else {
					oCrosstab.setSelectionInfo(null, -1);
				}
			}

			// Highlighting for SDK
			if (oJsonTableControl.dataselectionmode === undefined) {
				oJsonTableControl.dataselectionmode = false;
			}
			oCrosstab.setDataSelectionMode(oJsonTableControl.dataselectionmode);
			oCrosstab.setHighlightingInfo(oJsonTableControl.highlighting);
			oCrosstab.setSingleDataCellSelection(oJsonTableControl.singledatacellselection);

			if (bIsFirstPage || oJsonTableControl.changed) {

				readTranslatedTexts(oJsonTableControl.texts);

				oColHeaderHierarchyLevels = {};
				oRowHeaderHierarchyLevels = {};

				iFixedColHeaders = oJsonTableControl.fixedcolheaders;
				iFixedRowHeaders = oJsonTableControl.fixedrowheaders;

				if (!oJsonTableControl.pixelscrolling) {
					oCrosstab.setHCutOff(false);
					oCrosstab.setVCutOff(false);

					iTotalDataColumns = oJsonTableControl.totaldatacols;
					iTotalDataRows = oJsonTableControl.totaldatarows;
				} else {
					oCrosstab.setHCutOff(oJsonTableControl.totaldatacols > oJsonTableControl.sentdatacols);
					oCrosstab.setVCutOff(oJsonTableControl.totaldatarows > oJsonTableControl.sentdatarows);

					iTotalDataColumns = oJsonTableControl.sentdatacols;
					iTotalDataRows = oJsonTableControl.sentdatarows;
				}

				if (!iFixedColHeaders || !iFixedRowHeaders) {
					oDimensionHeaderArea.setRowCnt(0);
					oDimensionHeaderArea.setColCnt(0);
					if (!iFixedRowHeaders) {
						oRowHeaderArea.setRowCnt(0);
						oRowHeaderArea.setColCnt(0);
						if (iFixedColHeaders) {
							oColHeaderArea.setRowCnt(iFixedColHeaders);
							oColHeaderArea.setColCnt(iTotalDataColumns);
						}
					} else if (!iFixedColHeaders) {
						oColHeaderArea.setRowCnt(0);
						oColHeaderArea.setColCnt(0);
						if (iFixedRowHeaders) {
							oRowHeaderArea.setRowCnt(iTotalDataRows);
							oRowHeaderArea.setColCnt(iFixedRowHeaders);
						}
					}
				} else {
					oDimensionHeaderArea.setRowCnt(iFixedColHeaders);
					oDimensionHeaderArea.setColCnt(iFixedRowHeaders);

					oRowHeaderArea.setRowCnt(iTotalDataRows);
					oRowHeaderArea.setColCnt(iFixedRowHeaders);

					oColHeaderArea.setRowCnt(iFixedColHeaders);
					oColHeaderArea.setColCnt(iTotalDataColumns);
				}

				oDataArea.setRowCnt(iTotalDataRows);
				oDataArea.setColCnt(iTotalDataColumns);

				oCrosstab.setTotalRows(iFixedColHeaders + iTotalDataRows);
				oCrosstab.setTotalCols(iFixedRowHeaders + iTotalDataColumns);

				oCrosstab.setOnSelectCommand(oJsonTableControl.onselectcommand);
				oCrosstab.getPropertyBag().setSelectionEnabled(oJsonTableControl.selectionenabled);
				oCrosstab.getPropertyBag().setDisplayExceptions(oJsonTableControl.displayexceptions);
				oCrosstab.getPropertyBag().setEnableColResize(oJsonTableControl.enablecolresize);

				oCrosstab.setScrollNotifyCommand(oJsonTableControl.scrollnotifier);

				// for this to work, the basic area data must have been determined already, plus the selection info
				// must have been determined. Don't move this line further up
				setUserColWidthsToAreas(oCrosstabData);

				var oCellApi = new sap.zen.crosstab.CrosstabCellApi(oCrosstab, iFixedRowHeaders, iFixedColHeaders,
						iTotalDataColumns, iTotalDataRows);
				oCrosstab.setCellApi(oCellApi);
			}
			extractCrossRequestInfo();
			// planning
			if (!(oCrosstab.getPropertyBag().isMobileMode() || oCrosstab.getPropertyBag().isTestMobileMode())) {
				if (oJsonTableControl.transferdatacommand) {
					oCrosstab.setTransferDataCommand(oJsonTableControl.transferdatacommand);
				}
				if (oJsonTableControl.callvaluehelpcommand) {
					oCrosstab.setCallValueHelpCommand(oJsonTableControl.callvaluehelpcommand);
				}
				if (oJsonTableControl.newlinescnt) {
					oCrosstab.setNewLinesCnt(oJsonTableControl.newlinescnt);
				}
				if (oJsonTableControl.newlinespos) {
					oCrosstab.setNewLinesPos(oJsonTableControl.newlinespos);
				}
			}

			if (oJsonTableControl.contextmenucmd) {
				oCrosstab.getPropertyBag().setContextMenuCommand(oJsonTableControl.contextmenucmd);
				oCrosstab.createContextMenu();
			}
			
			if (oJsonTableControl.headerwidth) {
				oCrosstab.getPropertyBag().setMaxHeaderWidth(oJsonTableControl.headerwidth);
			} else {
				oCrosstab.getPropertyBag().setMaxHeaderWidth(0);
			}
		}
	};

	function setUserColWidthsToAreas (oCrosstabData) {
		var widthList = oCrosstabData.usercolwidths;
		if (widthList) {
			for (var i = 0; i < widthList.length; i++) {
				var entry = widthList[i];
				var colIndex = entry.colid;
				if (isNaN(entry.colwidth)) {
					continue;
				}
				var iColWidth = Math.max(0, parseInt(entry.colwidth, 10));
				var bIgnore = false;
				if (entry.ignore !== undefined) {
					bIgnore = entry.ignore;
				}
				if (colIndex === '*') {
					if (iFixedColHeaders && iFixedRowHeaders) {
						oColHeaderArea.setColUserWidth(colIndex, iColWidth, bIgnore);
						oDataArea.setColUserWidth(colIndex, iColWidth, bIgnore);
						oDimensionHeaderArea.setColUserWidth(colIndex, iColWidth, bIgnore);
						oRowHeaderArea.setColUserWidth(colIndex, iColWidth, bIgnore);
					} else {
						if (!iFixedRowHeaders) {
							oColHeaderArea.setColUserWidth(colIndex, iColWidth, bIgnore);
						} else if (!iFixedColHeaders) {
							oRowHeaderArea.setColUserWidth(colIndex, iColWidth, bIgnore);
						}
						oDataArea.setColUserWidth(colIndex, iColWidth, bIgnore);
					}
				} else {
					if (iFixedColHeaders && iFixedRowHeaders) {
						// all areas present
						if (colIndex >= iFixedRowHeaders) {
							// column header and data area
							oColHeaderArea.setColUserWidth(colIndex - iFixedRowHeaders, iColWidth, bIgnore);
							oDataArea.setColUserWidth(colIndex - iFixedRowHeaders, iColWidth, bIgnore);
						} else {
							// dimension header and row header area
							oDimensionHeaderArea.setColUserWidth(colIndex, iColWidth, bIgnore);
							oRowHeaderArea.setColUserWidth(colIndex, iColWidth, bIgnore);
						}
					} else {
						// we don't have a dimension header area. So either row header or col header is missing
						if (!iFixedRowHeaders) {
							// row header missing. Index goes directly to col header area and data area
							oColHeaderArea.setColUserWidth(colIndex, iColWidth, bIgnore);
							oDataArea.setColUserWidth(colIndex, iColWidth, bIgnore);
						} else if (!iFixedColHeaders) {
							// only row header and data area, so find out what to use
							if (colIndex >= iFixedRowHeaders) {
								oDataArea.setColUserWidth(colIndex - iFixedRowHeaders, iColWidth, bIgnore);
							} else {
								oRowHeaderArea.setColUserWidth(colIndex, iColWidth, bIgnore);
							}
						}
					}
				}
			}
		}
	}

	function extractCrossRequestInfo () {
		var oCrossRequestManager = oCrosstab.getRenderEngine().getCrossRequestManager();

		if (oJsonTableControl.scrolltoselection && oJsonTableControl.selectedaxis
				&& oJsonTableControl.selectedpos !== undefined) {
			oJsonTableControl.rootcause = "SDK";
			if (oJsonTableControl.selectedaxis === "ROWS") {
				oCrossRequestManager.saveSDKVScrollInfo(oJsonTableControl.selectedpos, "SDK");
			} else if (oJsonTableControl.selectedaxis === "COLUMNS") {
				oCrossRequestManager.saveSDKHScrollInfo(oJsonTableControl.selectedpos, "SDK");
			} else if (oJsonTabkleControl.selectedaxis === "DATA") {
				oCrossRequestManager.saveSDKVScrollInfo(oJsonTableControl.datacellrowpos, "SDK");
				oCrossRequestManager.saveSDKHScrollInfo(oJsonTableControl.datacellcolpos, "SDK");
			}
		}

		if (oJsonTableControl.rootcause) {
			oCrossRequestManager.setRootCause(oJsonTableControl.rootcause);
			if (oJsonTableControl.rootcause === "hierarchy") {
				oCrossRequestManager.setHierarchyAction(oJsonTableControl.rootcause_hierarchy); // expanded/collapsed
				oCrossRequestManager.setIsHierarchyDirectionDown(oJsonTableControl.rootcause_hierarchy_directiondown);
			}
			oCrossRequestManager.handleRootCause();
		}

		if (!(oJsonTableControl.scrolltoselection && oJsonTableControl.selectedaxis && oJsonTableControl.selectedpos !== undefined)
				&& !(oJsonTableControl.rootcause)) {
			if (oCrossRequestManager) {
				// set scroll parameters that come from the server if any
				if (oJsonTableControl.clienthpos !== undefined && oJsonTableControl.clientvpos !== undefined
						&& oJsonTableControl.clienthscrolledtoend !== undefined
						&& oJsonTableControl.clientvscrolledtoend !== undefined) {
					// plausibility check
					if (oJsonTableControl.clienthscrolledtoend === true) {
						oJsonTableControl.clienthpos = oJsonTableControl.totaldatacols - 1;
					}
					if (oJsonTableControl.clientvscrolledtoend === true) {
						oJsonTableControl.clientvpos = oJsonTableControl.totaldatarows - 1;
					}
					oCrossRequestManager.setScrollData(parseInt(oJsonTableControl.clienthpos, 10),
							oJsonTableControl.clienthscrolledtoend, parseInt(oJsonTableControl.clientvpos, 10),
							oJsonTableControl.clientvscrolledtoend);
				}
			}
		}
		// Horizontal scrollpos in header if any
		if (oJsonTableControl.clientheaderhpos) {
			oCrossRequestManager.setHeaderScrollData({"iHPos" : parseInt(oJsonTableControl.clientheaderhpos, 10)});
		}
	}

	this.jsonToDataModel = function (oPageInfo) {
		if (oJsonTableControl.rows) {
			oCrosstabAreasToBeFilled = oPageInfo.oCrosstabAreasToBeFilled;
			iColOffset = oPageInfo.iColOffset;
			iRowOffset = oPageInfo.iRowOffset;

			checkHeaderAreasToBeFilled();

			var aRows = oJsonTableControl.rows;
			for (var i = 0, iMaxRows = aRows.length; i < iMaxRows; i++) {
				var iRowIndex = aRows[i].row.rowidx;
				var aCells = aRows[i].row.cells;
				for (var j = 0, iMaxCols = aCells.length; j < iMaxCols; j++) {
					var oJsonCellControl = aCells[j].control;
					var iColIndex = oJsonCellControl.colidx;
					addCell(oJsonCellControl, iRowIndex, iColIndex);
				}
			}
		}
		oCrosstab.setColHeaderHierarchyLevels(oColHeaderHierarchyLevels);
		oCrosstab.setRowHeaderHierarchyLevels(oRowHeaderHierarchyLevels);
	};

	function checkHeaderAreasToBeFilled () {
		bFillDimensionHeaderArea = oCrosstabAreasToBeFilled[oDimensionHeaderArea.getAreaType()];
		bFillRowHeaderArea = oCrosstabAreasToBeFilled[oRowHeaderArea.getAreaType()];
		bFillColHeaderArea = oCrosstabAreasToBeFilled[oColHeaderArea.getAreaType()];
	}

	function handleMsgInTable (oJsonTableControl) {
		oDimensionHeaderArea.setRowCnt(2);
		oDimensionHeaderArea.setColCnt(1);

		var oCell = createHeaderCell(oDimensionHeaderArea, 0, 0);
		oCell.setText(oJsonTableControl.messagetitle);
		oDimensionHeaderArea.insertCell(oCell, 0, 0);

		oCell = createHeaderCell(oDimensionHeaderArea, 1, 0);
		oCell.setText(oJsonTableControl.messagetext);
		oDimensionHeaderArea.insertCell(oCell, 1, 0);
	}

	var addCell = function (oJsonCellControl, iRowIndex, iColIndex) {
		var iModelRow = iRowIndex - 1;
		var iModelCol = iColIndex - 1;

		if (iColIndex > iFixedRowHeaders && iRowIndex > iFixedColHeaders) {
			addDataCell(oJsonCellControl, iModelRow + iRowOffset, iModelCol + iColOffset);
		} else if (bFillDimensionHeaderArea && iColIndex <= iFixedRowHeaders && iRowIndex <= iFixedColHeaders) {
			addDimensionAreaCell(oJsonCellControl, iModelRow, iModelCol);
		} else if (bFillColHeaderArea && iRowIndex <= iFixedColHeaders && iColIndex > iFixedRowHeaders) {
			addColumnHeaderCell(oJsonCellControl, iModelRow, iModelCol + iColOffset);
		} else if (bFillRowHeaderArea && iColIndex <= iFixedRowHeaders && iRowIndex > iFixedColHeaders) {
			addRowHeaderCell(oJsonCellControl, iModelRow + iRowOffset, iModelCol);
		}
	};

	function createDataCell (iRow, iCol) {
		var oDataCell = new sap.zen.crosstab.DataCell();
		oDataCell.setArea(oDataArea);
		oDataCell.setRow(iRow);
		oDataCell.setCol(iCol);
		return oDataCell;
	}

	var addDataCell = function (oJsonCellControl, iModelRow, iModelCol) {
		// coordinates in data area
		var iRowIndex = iModelRow - iFixedColHeaders;
		var iColIndex = iModelCol - iFixedRowHeaders;

		var oDataCell = createDataCell(iRowIndex, iColIndex);
		oDataCell.setTableRow(iModelRow);
		oDataCell.setTableCol(iModelCol);
		parseCommonCellData(oJsonCellControl, oDataCell);

		if (iRowIndex % 2 === 1) {
			oDataCell.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_ALTERNATING);
		}
		oDataArea.insertCell(oDataCell, iRowIndex, iColIndex);
	};

	var addDimensionAreaCell = function (oJsonCellControl, iModelRow, iModelCol) {
		addHeaderCell(oJsonCellControl, oDimensionHeaderArea, iModelRow, iModelCol, iModelRow, iModelCol);
	};

	var addRowHeaderCell = function (oJsonCellControl, iModelRow, iModelCol) {
		var iActualModelRow = iModelRow;
		if (oJsonCellControl.axisidx !== undefined) {
			iActualModelRow = oJsonCellControl.axisidx + iFixedColHeaders;
		}
		addHeaderCell(oJsonCellControl, oRowHeaderArea, iModelRow - iFixedColHeaders, iModelCol, iActualModelRow,
				iModelCol);
	};

	var addColumnHeaderCell = function (oJsonCellControl, iModelRow, iModelCol) {
		var iActualModelCol = iModelCol;
		if (oJsonCellControl.axisidx !== undefined) {
			iActualModelCol = oJsonCellControl.axisidx + iFixedRowHeaders;
		}
		addHeaderCell(oJsonCellControl, oColHeaderArea, iModelRow, iModelCol - iFixedRowHeaders, iModelRow,
				iActualModelCol);
	};

	function createHeaderCell (oArea, iRow, iCol) {
		var oHeaderCell = new sap.zen.crosstab.HeaderCell();
		oHeaderCell.setArea(oArea);
		oHeaderCell.setRow(iRow);
		oHeaderCell.setCol(iCol);
		return oHeaderCell;
	}

	var addHeaderCell = function (oJsonCellControl, oHeaderArea, iAreaRowIndex, iAreaColIndex, iModelRow, iModelCol) {
		var oHeaderCell = createHeaderCell(oHeaderArea, iAreaRowIndex, iAreaColIndex);
		oHeaderCell.setTableRow(iModelRow);
		oHeaderCell.setTableCol(iModelCol);

		parseCommonCellData(oJsonCellControl, oHeaderCell);
		parseHeaderCellData(oJsonCellControl, oHeaderCell, oHeaderArea);

		if (!oJsonTableControl.dataselectionmode
				|| (oJsonTableControl.dataselectionmode && !oJsonTableControl.highlighting)) {
			if (oHeaderArea.isColHeaderArea() && oHeaderCell.getColSpan() === 1) {
				oHeaderCell.setSelectable(oHeaderCell.isInnerMember() && !oHeaderCell.isResult());
			} else if (oHeaderArea.isRowHeaderArea() && oHeaderCell.getRowSpan() === 1) {
				oHeaderCell.setSelectable(oHeaderCell.isInnerMember() && !oHeaderCell.isResult());
			} else {
				oHeaderCell.setSelectable(false);
			}
		} else {
			// In case of data selection mode when a selection is already present this locks the axis.
			// e.g. if there is a selection on the rows only rows can be selected and vice versa
			if (oHeaderArea.isColHeaderArea() && oHeaderCell.getColSpan() === 1) {
				if (!oJsonTableControl.highlighting.rows) {
					oHeaderCell.setSelectable(oHeaderCell.isInnerMember() && !oHeaderCell.isResult());
				} else {
					oHeaderCell.setSelectable(false);
				}
			} else if (oHeaderArea.isRowHeaderArea() && oHeaderCell.getRowSpan() === 1) {
				if (!oJsonTableControl.highlighting.cols) {
					oHeaderCell.setSelectable(oHeaderCell.isInnerMember() && !oHeaderCell.isResult());
				} else {
					oHeaderCell.setSelectable(false);
				}
			} else {
				oHeaderCell.setSelectable(false);
			}
		}

		oHeaderArea.insertCell(oHeaderCell, iAreaRowIndex, iAreaColIndex);
	};

	var parseCommonCellData = function (oJsonCellControl, oCommonCell) {
		var sText = oJsonCellControl._v;
		if (sText) {
			var oPreparedTextObject = sap.zen.crosstab.utils.Utils.prepareStringForRendering(sText);
			oCommonCell.setText(oPreparedTextObject.text);
			oCommonCell.setTextHasLineBreaks(oPreparedTextObject.bHasLineBreaks);
		}

		var exceptionVisualizations = oJsonCellControl.exceptionvisualizations;
		if (exceptionVisualizations) {
			for ( var index in exceptionVisualizations) {
				if (exceptionVisualizations.hasOwnProperty(index)) {
					var viz = exceptionVisualizations[index];
					if (viz) {
						sap.zen.crosstab.CellStyleHandler.setExceptionStylesOnCell(oCommonCell, viz.formattype,
								viz.alertlevel);
					}
				}
			}
		}

		if (oJsonCellControl.isemphasized) {
			oCommonCell.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_EMPHASIZED);
		}

		// planning
		if (!(oCrosstab.getPropertyBag().isMobileMode() || oCrosstab.getPropertyBag().isTestMobileMode())) {
			if (oJsonCellControl.isdataentryenabled) {
				oCommonCell.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_DATA_ENTRY_ENABLED);
				oCommonCell.setEntryEnabled(true);
				if (oJsonCellControl.unit) {
					oCommonCell.setUnit(oJsonCellControl.unit);
				}
			}

			if (oJsonCellControl.hasinvalidvalue) {
				oCommonCell.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_INVALID_VALUE);
			}

			if (oJsonCellControl.hasnewvalue) {
				oCommonCell.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_NEW_VALUE);
			}

			if (oJsonCellControl.islocked) {
				oCommonCell.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_LOCKED);
			}
		}

		if (oJsonCellControl.isresult) {
			if (oCommonCell.setResult) {
				oCommonCell.setResult(oJsonCellControl.isresult);
			}
			oCommonCell.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_TOTAL);
		}

		if (oJsonCellControl.passivetype) {
			oCommonCell.setPassiveCellType(oJsonCellControl.passivetype);
		}
	};

	var parseHeaderCellData = function (oJsonCellControl, oHeaderCell, oHeaderArea) {
		if (oJsonCellControl.rowspan) {
			oHeaderCell.setRowSpan(oJsonCellControl.rowspan);
		} else {
			oHeaderCell.setRowSpan(1);
		}

		if (oJsonCellControl.colspan) {
			oHeaderCell.setColSpan(oJsonCellControl.colspan);
		} else {
			oHeaderCell.setColSpan(1);
		}

		if (oJsonCellControl.key) {
			oHeaderCell.setMergeKey(oJsonCellControl.key);
		}
		if (oJsonCellControl.sort) {
			oHeaderCell.setSort(oJsonCellControl.sort);
		}
		if (oJsonCellControl.sorttxtidx) {
			oHeaderCell.setSortTextIndex(parseInt(oJsonCellControl.sorttxtidx, 10));
		}

		if (oJsonCellControl.sortaction) {
			oHeaderCell.setSortAction(oJsonCellControl.sortaction);
		}
		// level 0 is valid!
		if (typeof (oJsonCellControl.level) != "undefined") {
			oHeaderCell.setLevel(oJsonCellControl.level);
			saveHierarchyLevelInfo(oHeaderArea, oHeaderCell, oJsonCellControl.level);
		} else {
			oHeaderCell.setLevel(-1);
		}
		if (oJsonCellControl.drillstate) {
			if (oJsonCellControl.drillstate !== "A") {
				// Attribute is not a drillstate for rendering. It occurs when a [KEY][TEXT] or similar display is
				// chosen.
				// The attribute data must not be rendered with indentations
				oHeaderCell.setDrillState(oJsonCellControl.drillstate);
			}
		}
		if (oJsonCellControl.hierarchyaction) {
			oHeaderCell.setHierarchyAction(oJsonCellControl.hierarchyaction);
		}
		if (oJsonCellControl.hierarchytooltip) {
			oHeaderCell.setHierarchyTooltip(oJsonCellControl.hierarchytooltip);
		}
		if (oJsonCellControl.isinnermember) {
			oHeaderCell.setInnerMember(oJsonCellControl.isinnermember);
		}
		if (oHeaderCell.getRow() % 2 === 1
				&& oHeaderCell.getRowSpan() === 1
				&& (oJsonCellControl.isinnermember || oHeaderCell.getColSpan() + oHeaderCell.getCol() === iFixedRowHeaders)) {
			oHeaderCell.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_ALTERNATING);
		}
	};

	var saveHierarchyLevelInfo = function (oArea, oCell, iLevel) {
		if (oArea.getAreaType() === sap.zen.crosstab.rendering.RenderingConstants.TYPE_COLUMN_HEADER_AREA) {
			var iRow = oCell.getRow();
			if (oColHeaderHierarchyLevels[iRow] != undefined) {
				if (oColHeaderHierarchyLevels[iRow] < iLevel) {
					oColHeaderHierarchyLevels[iRow] = iLevel;
				}
			} else {
				oColHeaderHierarchyLevels[iRow] = iLevel;
			}
		} else if (oArea.getAreaType() === sap.zen.crosstab.rendering.RenderingConstants.TYPE_ROW_HEADER_AREA) {
			var iCol = oCell.getCol();
			if (oRowHeaderHierarchyLevels[iCol] != undefined) {
				if (oRowHeaderHierarchyLevels[iCol] < iLevel) {
					oRowHeaderHierarchyLevels[iCol] = iLevel;
				}
			} else {
				oRowHeaderHierarchyLevels[iCol] = iLevel;
			}
		}
	};
};

}; // end of sap/zen/crosstab/datahandler/JsonDataHandler.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.keyboard.CrosstabKeyboardNavHandler') ) {
jQuery.sap.declare("sap.zen.crosstab.keyboard.CrosstabKeyboardNavHandler");


sap.zen.crosstab.keyboard.CrosstabKeyboardNavHandler = function (oCrosstab, oEventHandler) {
	"use strict";

	var iFocusRow = -1;
	var iFocusCol = -1;
	var iOldFocusRow = -1;
	var iOldFocusCol = -1;
	var iNavDx = 0;
	var iNavDy = 0;
	var that = this;
	var bEnabled = false;
	var oDataArea = oCrosstab.getDataArea();
	
	this.reset = function() {
		this.disableCell(iFocusRow, iFocusCol);
		this.disableCell(iOldFocusRow, iOldFocusCol);
		iFocusRow = -1;
		iFocusCol = -1;
		iOldFocusRow = -1;
		iOldFocusCol = -1;
		iNavDx = 0;
		iNavDy = 0;
	};

	this.setEnabled = function (pbEnabled) {
		bEnabled = pbEnabled;
	};

	this.attachEvents = function (oJqDiv) {
		if (!bEnabled) {
			return;
		}
		oJqDiv.off("keydown", this.keyboardNavKeyHandler);
		oJqDiv.on("keydown", this.keyboardNavKeyHandler);
		// this must be used to make a div accept keydown events and focus-enabled
		oJqDiv.attr("tabindex", sap.zen.crosstab.rendering.RenderingConstants.TABINDEX);
	};

	this.getFocusScrollDiv = function (oCell) {
		var oDomScrollDiv = null;
		if (oCell.getArea().isDataArea() || oCell.getArea().isColHeaderArea()) {
			oDomScrollDiv = $('#' + oCrosstab.getId() + '_lowerRight_scrollDiv')[0];
		} else if (oCell.getArea().isRowHeaderArea()) {
			oDomScrollDiv = $('#' + oCrosstab.getId() + '_lowerLeft_scrollDiv')[0];
		}
		return oDomScrollDiv;
	};

	this.movePixelCellIntoFocus = function (oCell, oDomCell, oScrollDivRect, bUserSelected, bLookAheadMode) {
		var bHasScrolled = false;

		var oCellDivRect = oDomCell.getBoundingClientRect();
		var iScrollDivRectWidth = oScrollDivRect.right - oScrollDivRect.left;
		var iContentDivRectWidth = oCellDivRect.right - oCellDivRect.left;
		var iScrollDivRectHeight = oScrollDivRect.bottom - oScrollDivRect.top;
		var iContentDivRectHeight = oCellDivRect.bottom - oCellDivRect.top;

		// horizontal
		if (iContentDivRectWidth < iScrollDivRectWidth) {
			if (oCellDivRect.right > oScrollDivRect.right) {
				var iOldScrollPos = oCrosstab.getHScrollbar().getScrollPosition();
				oCrosstab.scrollHorizontal(iOldScrollPos + oCellDivRect.right - oScrollDivRect.right);
				bHasScrolled = true;
			} else if (oCellDivRect.left < oScrollDivRect.left) {
				var iOldScrollPos = oCrosstab.getHScrollbar().getScrollPosition();
				oCrosstab.scrollHorizontal(iOldScrollPos - (oScrollDivRect.left - oCellDivRect.left));
				bHasScrolled = true;
			}
		}
		// vertical
		if (bUserSelected || bLookAheadMode) {
			if (iContentDivRectHeight < iScrollDivRectHeight) {
				if (oCellDivRect.bottom > oScrollDivRect.bottom) {
					var iOldScrollPos = oCrosstab.getVScrollbar().getScrollPosition();
					oCrosstab.scrollVertical(iOldScrollPos + oCellDivRect.bottom - oScrollDivRect.bottom);
					bHasScrolled = true;

				} else if (oCellDivRect.top < oScrollDivRect.top) {
					var iOldScrollPos = oCrosstab.getVScrollbar().getScrollPosition();
					oCrosstab.scrollVertical(iOldScrollPos - (oScrollDivRect.top - oCellDivRect.top));
					bHasScrolled = true;
				}
			} else {
				// cell is higher than scrolldiv -> scroll to beginning of cell
				var iOldScrollPos = oCrosstab.getVScrollbar().getScrollPosition();
				oCrosstab.scrollVertical(iOldScrollPos - (oScrollDivRect.top - oCellDivRect.top));
				bHasScrolled = true;
			}
		}

		return bHasScrolled;
	};
	
	this.moveRowHeaderAreaCellHorizontally = function(oCell, oDomCell) {
		var oScrollDivRect = $('#' + oCrosstab.getId() + "_lowerLeft_scrollDiv")[0].getBoundingClientRect();
		var oCellDivRect = oDomCell.getBoundingClientRect();

		var iScrollDivRectWidth = oScrollDivRect.right - oScrollDivRect.left;
		var iContentDivRectWidth = oCellDivRect.right - oCellDivRect.left;
		
		var oHeaderHScrollbar = oCrosstab.getHorizontalHeaderScrollbar();
		
		if (iContentDivRectWidth < iScrollDivRectWidth) {
			if (oCellDivRect.right > oScrollDivRect.right) {
				var iOldScrollPos = oHeaderHScrollbar.getScrollPosition();
				oCrosstab.scrollHeaderHorizontal(iOldScrollPos + oCellDivRect.right - oScrollDivRect.right);
			} else if (oCellDivRect.left < oScrollDivRect.left) {
				var iOldScrollPos = oHeaderHScrollbar.getScrollPosition();
				oCrosstab.scrollHeaderHorizontal(iOldScrollPos - (oScrollDivRect.left - oCellDivRect.left));
			}
		}
	};

	this.moveRowColCellIntoFocus = function (oCell, oDomCell, oScrollDivRect, bUserSelected, bLookAheadMode) {
		var bHasScrolled = false;

		var oCellDivRect = oDomCell.getBoundingClientRect();
		var iScrollDivRectWidth = oScrollDivRect.right - oScrollDivRect.left;
		var iContentDivRectWidth = oCellDivRect.right - oCellDivRect.left;

		var iRenderStartCol = oCrosstab.getDataArea().getRenderStartCol();
		var iRenderStartRow = oCrosstab.getDataArea().getRenderStartRow();

		var iMaxRow = oCrosstab.getDataArea().getRowCnt() - 1;

		// horizontal check: only for data cells. Header cells do not scroll horizontally
		if (oCell.getArea().isDataArea() || oCell.getArea().isColHeaderArea()) {
			var oHScrollbar = oCrosstab.getHScrollbar();
			if (oHScrollbar) {
				if (iContentDivRectWidth < iScrollDivRectWidth) {
					// check if the cell's content div fits in into the visible area
					// horizontal
					if (oCellDivRect.right > oScrollDivRect.right) {
						oCrosstab.scrollHorizontal(iRenderStartCol + 1);
						bHasScrolled = true;
					} else if (oCellDivRect.left < oScrollDivRect.left) {
						oCrosstab.scrollHorizontal(iRenderStartCol - 1);
						bHasScrolled = true;
					}
				}
			}
		}
		
		// horizontal header scrolling if relevant
		if (oCrosstab.isHeaderHScrolling() === true && oCell.getArea().isRowHeaderArea()) {
			this.moveRowHeaderAreaCellHorizontally(oCell, oDomCell);
		}

		// vertical correction: only for data and row header cells
		if (iRenderStartRow === oCell.getTableRow() - oCrosstab.getTableFixedColHeaderRowCnt()) {
			// cell is already at the top. Don't try to shift it in from below.
			// this is especially important for cells with such large rowspans that the
			// whole cell does never fit into the crosstab viewport.
			// This check will be made further down too after the cell was scrolled into focus and
			// before the "fine tuning" begins
			return bHasScrolled;
		}

		if (oCell.getArea().isDataArea() || (oCell.getArea().isRowHeaderArea() && bUserSelected) || bLookAheadMode) {
			var oVScrollbar = oCrosstab.getVScrollbar();
			if (oVScrollbar) {
				var iRenderedRows = oCrosstab.getDataArea().getRenderRowCnt();
				var iCurrentVScrollPos = oVScrollbar.getScrollPosition();
				var iRow = oCell.getTableRow() - oCrosstab.getTableFixedColHeaderRowCnt();
				// cell sticks out at the top
				if (iRow < iRenderStartRow) {
					oCrosstab.scrollVertical(iRow);
					bHasScrolled = true;
				} else if (iRow + oCell.getRowSpan() > (iRenderStartRow + iRenderedRows)) {
					// cell sticks out at the bottom
					var iCellRowsVisible = iRenderStartRow + iRenderedRows - oCell.getRow();
					var iScrollDelta = oCell.getRowSpan() - iCellRowsVisible;
					var iNewScrollPos = Math.max(0, Math.min(iCurrentVScrollPos + iScrollDelta + 1, iMaxRow));
									
					if (iScrollDelta !== 0) {
						oCrosstab.scrollVertical(iNewScrollPos);
						bHasScrolled = true;
					}
					iRenderStartRow = oCrosstab.getDataArea().getRenderStartRow();
					// trying to shift in a cell from the bottom that doesn't fit at the top -> go to top
					if (iRenderStartRow > iRow) {
						oCrosstab.scrollVertical(iRow);
						bHasScrolled = true;
					}
				}

				iRenderStartRow = oCrosstab.getDataArea().getRenderStartRow();
				if (iRenderStartRow === oCell.getTableRow() - oCrosstab.getTableFixedColHeaderRowCnt()) {
					// cell was already scrolled to the top. Don't try to shift it in from below.
					// this is especially important for cells with such large rowspans that the
					// whole cell does never fit into the crosstab viewport
					return bHasScrolled;
				}

				if (bHasScrolled) {
					oDomCell = $('#' + oCell.getId())[0];
					oCellDivRect = oDomCell.getBoundingClientRect();
					iCurrentVScrollPos = oVScrollbar.getScrollPosition();
				}
				// final correction due to vertical "half cells"
				if (oCellDivRect.bottom > oScrollDivRect.bottom) {
					while (oCellDivRect.bottom > oScrollDivRect.bottom && iCurrentVScrollPos < iMaxRow) {
						oCrosstab.scrollVertical(Math.min(iCurrentVScrollPos + 1, iMaxRow));
						iCurrentVScrollPos = oVScrollbar.getScrollPosition();
						oDomCell = $('#' + oCell.getId())[0];
						oCellDivRect = oDomCell.getBoundingClientRect();
						bHasScrolled = true;
					}
				} else if (oCellDivRect.top < oScrollDivRect.top) {
					oCrosstab.scrollVertical(Math.max(0, iCurrentVScrollPos - 1));
					bHasScrolled = true;
				}
			}
		}

		return bHasScrolled;
	};

	this.getCellIntoDom = function (oCell, oOldCell, bNewLine) {
		var iNewPos = 0;
		if (iNavDy === 0) {
			var oHScrollbar = oCrosstab.getHScrollbar();
			if (oHScrollbar && !bNewLine) {
				if (iNavDx > 0) {
					iNewPos = oHScrollbar.getScrollPosition() + oOldCell.getColSpan();
				} else if (iNavDx < 0) {
					iNewPos = oCell.getTableCol() - oCrosstab.getTableFixedRowHeaderColCnt();
				}
				oCrosstab.scrollHorizontal(iNewPos);
			}
		} else if (iNavDx == 0) {
			var oVScrollbar = oCrosstab.getVScrollbar();
			if (oVScrollbar) {
				if (iNavDy > 0) {
					iNewPos = oVScrollbar.getScrollPosition() + oOldCell.getRowSpan();
				} else {
					if (iNavDy < 0) {
						iNewPos = oCell.getTableRow() - oCrosstab.getTableFixedColHeaderRowCnt();	
					}
				}
				oCrosstab.scrollVertical(iNewPos);
			}
		}
	};

	this.getRowLookAheadCell = function (oCell) {
		var oLookAheadCell = null;
		var oTempCell = null;
		var iMaxCol = 0;
		var iMinCol = 0;
		if (oCell.getRowSpan() > 1) {
			if (iNavDx > 0) {
				iMinCol = oCell.getTableCol();
				iMaxCol = oCrosstab.getRenderStartCol() + oCrosstab.getRenderColCnt()
						+ oCrosstab.getTableFixedRowHeaderColCnt();
				for (var i = iMinCol; i <= iMaxCol; i++) {
					oTempCell = oCrosstab.getTableCellWithSpans(iFocusRow, i);
					if (oTempCell.getRowSpan() === 1) {
						oLookAheadCell = oTempCell;
						break;
					} else {
						if (oLookAheadCell) {
							if (oTempCell.getRowSpan() < oLookAheadCell.getRowSpan()) {
								oLookAheadCell = oTempCell;
							}
						} else {
							oLookAheadCell = oTempCell;
						}
					}
				}
			}
		} else {
			oLookAheadCell = oCell;
		}
		return oLookAheadCell;
	};

	this.scrollCellIntoFocus = function (oCell, bUserSelected, bNewLine, oOldCell) {
		var oLookAheadCell = oCell;
		var bLookAheadMode = false;
		if (!bUserSelected && oCell.getArea().isRowHeaderArea() && bNewLine === true && oCrosstab.getVScrollbar() && !oCrosstab.isHeaderHScrolling()) {
			// find the cell that is needed for positioning when scrolling. Only during horizontal forward navigation!
			if (iNavDx > 0 && iNavDy === 0) {
				oLookAheadCell = this.getRowLookAheadCell(oCell);
			}
		}

		if (oLookAheadCell !== oCell) {
			oCell = oLookAheadCell;
			bLookAheadMode = true;
		}

		var oDomScrollDiv = this.getFocusScrollDiv(oCell);
		if (!oDomScrollDiv) {
			return false;
		}

		var bHasScrolled = false;
		var isPixelScrolling = oCrosstab.getPropertyBag().isPixelScrolling();

		var oDomCell = $('#' + oCell.getId())[0];
		if (!oDomCell && !isPixelScrolling) {
			this.getCellIntoDom(oCell, oOldCell, bNewLine);
		}

		if (!oDomCell) {
			return false;
		}
		// the bounding client rects
		var oScrollDivRect = oDomScrollDiv.getBoundingClientRect();

		if (isPixelScrolling) {
			bHasScrolled = this.movePixelCellIntoFocus(oCell, oDomCell, oScrollDivRect, bUserSelected, bLookAheadMode);
		} else {
			bHasScrolled = this.moveRowColCellIntoFocus(oCell, oDomCell, oScrollDivRect, bUserSelected, bLookAheadMode);
		}

		return bHasScrolled;
	};

	this.keyboardNavKeyHandler = function (e) {
		// check handling the right crosstab
		if (iFocusRow > -1 && iFocusCol > -1) {
			iNavDx = 0;
			iNavDy = 0;
			if (e.which === 9) {
				// TAB
				iNavDx = 1;
			} else if (e.which === 38) {
				iNavDy = -1;
				// ARROW UP
			} else if (e.which === 40) {
				// ARROW DN
				iNavDy = 1;
			} else if (e.which === 37) {
				// ARROW LEFT
				iNavDx = -1;
			} else if (e.which === 39) {
				// ARROW RIGHT
				iNavDx = 1;
			}
			if (iNavDx === 0 && iNavDy === 0) {
				// no changes
				return true;
			} else {
				if (!oCrosstab.hasLoadingPages()) {
					that.moveCellFocus();
				}
				sap.zen.crosstab.utils.Utils.cancelEvent(e);
				return false;
			}
		}
		return true;
	};

	this.restoreFocusOnCell = function () {
		if (!bEnabled) {
			return;
		}
		if (iFocusRow > -1 && iFocusCol > -1 && !oCrosstab.hasLoadingPages()) {
			var oRestoreCell = oCrosstab.getTableCellWithSpans(iFocusRow, iFocusCol);
			if (oRestoreCell && !oRestoreCell.isLoading()) {
				this.disableCell(iOldFocusRow, iOldFocusCol);
				this.navigateToCellAction(oRestoreCell, -1, -1);
			}
		}
	};

	function focusNoScroll (oJqElement, oDomScrollDiv) {
		var x = oDomScrollDiv.scrollLeft;
		var y = oDomScrollDiv.scrollTop;

		oJqElement.focus();

		if (oDomScrollDiv.scrollLeft !== x) {
			oDomScrollDiv.scrollLeft = x;
		}
		if (oDomScrollDiv.scrollTop !== y) {
			oDomScrollDiv.scrollTop = y;
		}
	}

	// Actions to be carried out when cell is reached via keyboard navigation
	this.navigateToCellAction = function (oCell, iSelectionStartPos, iSelectionEndPos) {
		var oJqCell = null;
		var oJqContentDiv = null;
		var oDomScrollDiv = null;
		var oJqTextContentDiv = null;

		oJqCell = $('#' + oCell.getId());
		oJqCell.addClass("sapzencrosstab-CellFocus");
		oJqContentDiv = $('#' + oCell.getId() + "_contentDiv");
		oJqTextContentDiv = oJqCell.find("#" + oCell.getId() + "_textContentDiv");

		if (!oCell.isEntryEnabled()) {
			oDomScrollDiv = this.getFocusScrollDiv(oCell);
			if (oJqTextContentDiv.length > 0) {
				oJqContentDiv = oJqTextContentDiv;
			}
			if ($.browser.mozilla) {
				focusNoScroll(oJqContentDiv, oDomScrollDiv);
			}
			// Text selection
			var oDomContentDiv = oJqContentDiv[0];
			if (oDomContentDiv && iSelectionStartPos === -1 && iSelectionEndPos === -1) {
				sap.zen.crosstab.utils.Utils.selectTextInElement(oDomContentDiv);
			}

			focusNoScroll(oJqContentDiv, oDomScrollDiv);
		} else {
			oEventHandler.provideInputEnabledCell(oCell, oCell.getId(), oJqContentDiv, iSelectionStartPos, iSelectionEndPos);
		}
	};

	// Actions to be carried out when cell is moved away from via keyboard navigation
	this.navigateFromCellAction = function (oCell) {
		var oJqCell = $('#' + oCell.getId());
		// marked cell may have been scrolled out of displayed area
		if (oJqCell.length > 0) {
			oJqCell.removeClass("sapzencrosstab-CellFocus");
		}
		var oInputField = oJqCell.find("input");
		oInputField.focusout();
	};

	// This is only called when user clicks a cell
	this.focusNewCell = function (oCell, iSelectionStartPos, iSelectionEndPos) {
		if (!bEnabled) {
			return false;
		}
		if (!oCell) {
			return false;
		}
		var bHasScrolled = false;
		if (iFocusRow > -1 && iFocusCol > -1) {
			this.disableCell(iFocusRow, iFocusCol);
		}

		iFocusRow = oCell.getTableRow();
		iFocusCol = oCell.getTableCol();
		iOldFocusRow = iFocusRow;
		iOldFocusCol = iFocusCol;

		var oVScrollbar = oCrosstab.getVScrollbar();
		var oHScrollbar = oCrosstab.getHScrollbar();

		if (oVScrollbar || oHScrollbar) {
			// row adjustment
			if (oVScrollbar) {
				bHasScrolled = this.scrollCellIntoFocus(oCell, true, false, null);
			}
		}
		this.navigateToCellAction(oCell, iSelectionStartPos, iSelectionEndPos);
		return bHasScrolled;
	};

	this.scrollToCell = function (oCell) {
		var iDataRow = oCell.getTableRow() - oCrosstab.getTableFixedColHeaderRowCnt();
		var iDataCol = oCell.getTableCol() - oCrosstab.getTableFixedRowHeaderColCnt();

		var bVScroll = iDataRow < oCrosstab.getRenderStartRow()
				|| iDataRow > (oCrosstab.getRenderStartRow() + oCrosstab.getRenderRowCnt());

		var bHScroll = false;
		if (oCell.getArea().isDataArea() || oCell.getArea().isColHeaderArea()) {
			bHScroll = iDataCol < oCrosstab.getRenderStartCol()
					|| iDataCol > (oCrosstab.getRenderStartCol() + oCrosstab.getRenderColCnt());
		}
		if (oCrosstab.getVScrollbar() && bVScroll) {
			oCrosstab.scrollVertical(oCell.getTableRow() - oCrosstab.getTableFixedColHeaderRowCnt());
		}
		if (oCrosstab.getHScrollbar() && oCell.getArea().isDataArea() && bHScroll) {
			oCrosstab.scrollHorizontal(oCell.getTableCol() - oCrosstab.getTableFixedRowHeaderColCnt());
		}
	};

	this.disableCell = function (iTableRow, iTableCol) {
		var oCell = null;
		if (iTableRow > -1 && iTableRow > -1) {
			oCell = oCrosstab.getTableCellWithSpans(iTableRow, iTableCol);
			if (oCell && !oCell.isLoading()) {
				// deactivate old cell in any case
				this.navigateFromCellAction(oCell);
			}
		}
	};

	this.moveCellFocus = function () {
		if (!bEnabled) {
			return;
		}
		// take given oCell when defined, otherwise operate using the deltas.
		// For delta handling, a cell must be focused
		// ASSUMPTION: we only move in steps with abs(step) = 1, i. e. +1 and -1!
		var oNewCell = null;
		var iScrollToCol = -1;
		var iScrollToRow = -1;

		var iMaxRow = oCrosstab.getTableRowCnt() - 1;
		var iMaxCol = oCrosstab.getTableColCnt() - 1;
		var iMinRow = oCrosstab.getTableFixedColHeaderRowCnt();

		iOldFocusRow = iFocusRow;
		iOldFocusCol = iFocusCol;

		var bNewLine = false;
		var bUserSelected = false;

		var oCurrentCell = oCrosstab.getTableCellWithSpans(iOldFocusRow, iOldFocusCol);
		if (oCurrentCell && !oCrosstab.hasLoadingPages()) {
			// this is needed if somebody focused a cell and then scrolls away from it so it no longer is in the DOM
			// When a key is pressed, this cell must be brought back into the DOM and
			// navigation again starts from there.
			// Hence, do this only if a key event was registered, not a click to a new cell
			if (iNavDx !== 0 || iNavDy !== 0) {
				this.scrollToCell(oCurrentCell);
			}
		}

		if (iNavDy < 0) {
			if (oCurrentCell.getTableRow() === iMinRow) {
				return;
			}
		} else if (iNavDy > 0) {
			if ((oCurrentCell.getTableRow() + oCurrentCell.getRowSpan() - 1) === iMaxRow) {
				return;
			}
		}

		this.disableCell(oCurrentCell.getTableRow(), oCurrentCell.getTableCol());

		if (iFocusRow > -1 && iFocusCol > -1) {
			if (iNavDx === 0 && iNavDy === 0) {
				return;
			}
			var iNewFocusRow = iFocusRow;
			var iNewFocusCol = iFocusCol;
			if (iNavDx !== 0) {
				// horizontal movement
				if (iNavDx > 0) {
					// moving forward
					iNewFocusCol = oCurrentCell.getTableCol() + oCurrentCell.getColSpan() + iNavDx - 1;
					if (iNewFocusCol > iMaxCol) {
						if (iNewFocusRow < iMaxRow) {
							iNewFocusRow++;
							iNewFocusCol = 0;
							iScrollToCol = 0;
							bNewLine = true;
						} else {
							iNewFocusCol = iMaxCol;
							iNewFocusRow = iMaxRow;
						}
					}
				} else {
					// moving backward
					iNewFocusCol = oCurrentCell.getTableCol();
					iNewFocusCol--;
					if (iNewFocusCol >= 0) {
						var oPreviousCellInRow = oCrosstab.getTableCellWithSpans(iNewFocusRow, iNewFocusCol);
						if (!oPreviousCellInRow) {
							return;
						}
						if (oPreviousCellInRow.isLoading()) {
							return;
						}
						// get the actual col if the cell had a colSpan
						iNewFocusCol = oPreviousCellInRow.getTableCol();
					} else {
						if (iNewFocusRow > iMinRow) {
							iNewFocusRow--;
							iNewFocusCol = iMaxCol;
							iScrollToCol = iMaxCol;
							if (iNewFocusRow < oDataArea.getRenderStartRow() + iMinRow) {
								// scrolling is 0-based with regard to data area
								iScrollToRow = iNewFocusRow - iMinRow;
							}
							bNewLine = true;
						} else {
							iNewFocusCol = 0;
							iNewFocusRow = iMinRow;
						}
					}
				}
				// when moving horizontally, first check if the cell can be found searching the same row.
				oNewCell = oCrosstab.getTableCellWithSpans(iNewFocusRow, iNewFocusCol);
				if (oNewCell.isLoading()) {
					return;
				}
				if (oCurrentCell) {
					if (oCurrentCell.getArea() !== oNewCell.getArea() && iScrollToCol === -1) {
						// transition from header to data area and vice versa when free selection has taken place and no
						// other scrollToCol was commanded
						iScrollToCol = 0;
					}
				}
			} else if (iNavDy !== 0) {
				if (iNavDy > 0) {
					// moving down
					iNewFocusRow = Math.min(oCurrentCell.getTableRow() + oCurrentCell.getRowSpan() + iNavDy - 1,
							iMaxRow);
				} else if (iNavDy < 0) {
					iNewFocusRow = Math.max(oCurrentCell.getTableRow() + iNavDy, iMinRow);
				}
				oNewCell = oCrosstab.getTableCellWithSpans(iNewFocusRow, iNewFocusCol);
				if (oNewCell.isLoading()) {
					return;
				}
				// vertical movement will handle the same as a click -> position to top of cell
				iNewFocusRow = oNewCell.getTableRow();
				// handle as user selection
				bUserSelected = true;
			}
			// set the actual values only if we come here.
			// may bail out before due to loading cells present
			iFocusRow = iNewFocusRow;
			iFocusCol = iNewFocusCol;
		}

		if (oNewCell) {
			// scrolling due to wrap events in horizontal scrolling
			if (iScrollToRow >= 0) {
				oCrosstab.scrollVertical(iScrollToRow);
			}
			if (iScrollToCol >= 0) {
				oCrosstab.scrollHorizontal(iScrollToCol);
			}

			this.scrollCellIntoFocus(oNewCell, bUserSelected, bNewLine, oCurrentCell);
			this.navigateToCellAction(oNewCell, -1, -1);
		}
	};
};
}; // end of sap/zen/crosstab/keyboard/CrosstabKeyboardNavHandler.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.paging.CellMerger') ) {
jQuery.sap.declare("sap.zen.crosstab.paging.CellMerger");


sap.zen.crosstab.paging.CellMerger = function (oPageManager) {
	"use strict";

	var oRowHeaderArea = null;
	var oColHeaderArea = null;

	this.mergeRowHeaderCells = function (iPagePosRow) {
		oRowHeaderArea = oPageManager.getCrosstab().getRowHeaderArea();
		var iCol = 0;
		var oMergeCell = null;
		for (iCol = 0; iCol < oRowHeaderArea.getColCnt(); iCol++) {
			// the order is important: go from bottom to top, otherwise cell might be
			// deleted before it can be handled
			oMergeCell = getBottomCellWithMergeKey(iPagePosRow, iCol);
			if (oMergeCell) {
				mergeCellWithLowerPage(oMergeCell, iPagePosRow, iCol);
			}
			oMergeCell = getTopCellWithMergeKey(iPagePosRow, iCol);
			if (oMergeCell) {
				mergeCellWithUpperPages(oMergeCell, iPagePosRow, iCol);
			}
		}
	};

	function mergeCellWithUpperPages (oMergeCell, iPagePosRow, iCol) {
		var iCurrentPagePosRow = iPagePosRow - 1;
		var oCell = null;
		var oUpperMergeCell = null;
		var oRowIndices = null;
		var iRow = 0;
		var iRowSpan = oMergeCell.getRowSpan();

		var iStatus = oPageManager.getHeaderTileInfo(oRowHeaderArea, iCurrentPagePosRow).iStatus;
		while (iStatus === sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADED && iCurrentPagePosRow >= 0 && !oUpperMergeCell) {
			oRowIndices = getRowIndices(iCurrentPagePosRow);
			for (iRow = oRowIndices.iMaxRowIndex; iRow >= oRowIndices.iMinRowIndex && !oUpperMergeCell; iRow--) {
				oCell = oRowHeaderArea.getCellDirect(iRow, iCol);
				if (oCell) {
					if (oCell.getMergeKey()) {					
						if (oMergeCell.getMergeKey() === oCell.getMergeKey()) {
							if (iRow === oRowIndices.iMaxRowIndex || oCell.getRowSpan() > 1) {
								oUpperMergeCell = oCell;
							} else {
								// we have a cell with same merge key, but it is not at the bottom of the tile of the upper page
								// or it does not have any rowspan. Hence, this cannot be a cell relevant
								// for rowspan merging and any further searching is not necessary (there cannot be any cell above the already found
								// cell that still rowspan-merges with the cell in the bottom page).
								return;
							}
						} else {
							// we have found the first cell with merge key while searching upward in the same column of an upper page, 
							// but it does not fit the requested key of the merge cell.
							// Hence, this merge key must be for something else. Don't use it for rowspan merging.
							// Any further searching upward is now pointless since if it isn't the first cell with merge key that is found, 
							// there cannot be any rowspan merging any more
							return;
						}
					}
				}
			}

			iCurrentPagePosRow--;
			iStatus = oPageManager.getHeaderTileInfo(oRowHeaderArea, iCurrentPagePosRow).iStatus;
		}

		if (oUpperMergeCell) {
			copyCellStyles(oMergeCell, oUpperMergeCell);
			oUpperMergeCell.setRowSpan(iRowSpan + oUpperMergeCell.getRowSpan());
			oRowHeaderArea.insertCell(null, oMergeCell.getRow(), oMergeCell.getCol());
		}
	}

	function getRowIndices (iPagePosRow) {
		var oRowIndices = {};
		oRowIndices.iMinRowIndex = iPagePosRow * oPageManager.getTileRowCnt();
		oRowIndices.iMaxRowIndex = (iPagePosRow + 1) * oPageManager.getTileRowCnt() - 1;
		oRowIndices.iMaxRowIndex = Math.min(oRowIndices.iMaxRowIndex, oRowHeaderArea.getRowCnt() - 1);
		return oRowIndices;
	}

	function getTopCellWithMergeKey (iPagePosRow, iCol) {
		var oTopMergeCell = null;
		var oIndices = getRowIndices(iPagePosRow);
		var iRow = 0;
		var oCell = null;
		var sMergeKey = "";

		for (iRow = oIndices.iMinRowIndex; iRow <= oIndices.iMaxRowIndex && !oTopMergeCell; iRow++) {
			oCell = oRowHeaderArea.getCellDirect(iRow, iCol);
			if (oCell) {
				sMergeKey = oCell.getMergeKey();
				if (sMergeKey) {
					oTopMergeCell = oCell;
				}
			}
		}

		return oTopMergeCell;
	}

	function mergeCellWithLowerPage (oMergeCell, iPagePosRow, iCol) {
		var oCell = null;
		var iFoundRowSpan = 0;
		var sMergeKey = "";
		var oIndices = null;

		var iStatus = oPageManager.getHeaderTileInfo(oRowHeaderArea, iPagePosRow + 1).iStatus;
		if (iStatus === sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADED) {
			oIndices = getRowIndices(iPagePosRow + 1);
			oCell = oRowHeaderArea.getCellDirect(oIndices.iMinRowIndex, iCol);
			if (oCell) {
				sMergeKey = oCell.getMergeKey();
				if (sMergeKey && sMergeKey === oMergeCell.getMergeKey()) {
					iFoundRowSpan = oCell.getRowSpan();
					oRowHeaderArea.insertCell(null, oIndices.iMinRowIndex, iCol);
					copyCellStyles(oCell, oMergeCell);
				}
			}
		}

		if (iFoundRowSpan) {
			oMergeCell.setRowSpan(oMergeCell.getRowSpan() + iFoundRowSpan);
		}
	}

	function getBottomCellWithMergeKey (iPagePosRow, iCol) {
		var oBottomMergeCell = null;
		var oIndices = getRowIndices(iPagePosRow);
		var iRow = 0;
		var sMergeKey = "";
		var oCell = null;

		for (iRow = oIndices.iMaxRowIndex; iRow >= oIndices.iMinRowIndex && !oBottomMergeCell; iRow--) {
			oCell = oRowHeaderArea.getCellDirect(iRow, iCol);
			if (oCell) {
				sMergeKey = oCell.getMergeKey();
				if (sMergeKey) {
					oBottomMergeCell = oCell;
				}
			}
		}

		return oBottomMergeCell;
	}

	// Col Header merging ///////////////////////////////////////////////////////////////////////////
	this.mergeColHeaderCells = function (iPagePosCol) {
		oColHeaderArea = oPageManager.getCrosstab().getColumnHeaderArea();
		var iRow = 0;
		var oMergeCell = null;
		for (iRow = 0; iRow < oColHeaderArea.getRowCnt(); iRow++) {
			// the order is important: go from right to left, otherwise cell might be
			// deleted before it can be handled
			oMergeCell = getRightCellWithMergeKey(iPagePosCol, iRow);
			if (oMergeCell) {
				mergeCellWithRightPage(oMergeCell, iPagePosCol, iRow);
			}
			oMergeCell = getLeftCellWithMergeKey(iPagePosCol, iRow);
			if (oMergeCell) {
				mergeCellWithLeftPages(oMergeCell, iPagePosCol, iRow);
			}
		}
	};

	function getColIndices (iPagePosCol) {
		var oColIndices = {};
		oColIndices.iMinColIndex = iPagePosCol * oPageManager.getTileColCnt();
		oColIndices.iMaxColIndex = (iPagePosCol + 1) * oPageManager.getTileColCnt() - 1;
		oColIndices.iMaxColIndex = Math.min(oColIndices.iMaxColIndex, oColHeaderArea.getColCnt() - 1);
		return oColIndices;
	}

	function mergeCellWithRightPage (oMergeCell, iPagePosCol, iRow) {
		var oCell = null;
		var iFoundColSpan = 0;
		var sMergeKey = "";
		var oIndices = null;

		var iStatus = oPageManager.getHeaderTileInfo(oColHeaderArea, iPagePosCol + 1).iStatus;
		if (iStatus === sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADED) {
			oIndices = getColIndices(iPagePosCol + 1);
			oCell = oColHeaderArea.getCellDirect(iRow, oIndices.iMinColIndex);
			if (oCell) {
				sMergeKey = oCell.getMergeKey();
				if (sMergeKey && sMergeKey === oMergeCell.getMergeKey()) {
					iFoundColSpan = oCell.getColSpan();
					oColHeaderArea.insertCell(null, iRow, oIndices.iMinColIndex);
					copyCellStyles(oCell, oMergeCell);
				}
			}
		}

		if (iFoundColSpan) {
			oMergeCell.setColSpan(oMergeCell.getColSpan() + iFoundColSpan);
		}
	}

	function getRightCellWithMergeKey (iPagePosCol, iRow) {
		var oRightMergeCell = null;
		var oIndices = getColIndices(iPagePosCol);
		var iCol = 0;
		var sMergeKey = "";
		var oCell = null;

		for (iCol = oIndices.iMaxColIndex; iCol >= oIndices.iMinColIndex && !oRightMergeCell; iCol--) {
			oCell = oColHeaderArea.getCellDirect(iRow, iCol);
			if (oCell) {
				sMergeKey = oCell.getMergeKey();
				if (sMergeKey) {
					oRightMergeCell = oCell;
				}
			}
		}

		return oRightMergeCell;
	}

	function getLeftCellWithMergeKey (iPagePosCol, iRow) {
		var oLeftMergeCell = null;
		var oIndices = getColIndices(iPagePosCol);
		var iCol = 0;
		var oCell = null;
		var sMergeKey = "";

		for (iCol = oIndices.iMinColIndex; iCol <= oIndices.iMaxColIndex && !oLeftMergeCell; iCol++) {
			oCell = oColHeaderArea.getCellDirect(iRow, iCol);
			if (oCell) {
				sMergeKey = oCell.getMergeKey();
				if (sMergeKey) {
					oLeftMergeCell = oCell;
				}
			}
		}

		return oLeftMergeCell;
	}

	function mergeCellWithLeftPages (oMergeCell, iPagePosCol, iRow) {
		var iCurrentPagePosCol = iPagePosCol - 1;
		var oCell = null;
		var oLeftMergeCell = null;
		var oColIndices = null;
		var iCol = 0;
		var iColSpan = oMergeCell.getColSpan();

		var iStatus = oPageManager.getHeaderTileInfo(oColHeaderArea, iCurrentPagePosCol).iStatus;
		while (iStatus === sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADED && iCurrentPagePosCol >= 0 && !oLeftMergeCell) {
			oColIndices = getColIndices(iCurrentPagePosCol);
			for (iCol = oColIndices.iMaxColIndex; iCol >= oColIndices.iMinColIndex && !oLeftMergeCell; iCol--) {
				oCell = oColHeaderArea.getCellDirect(iRow, iCol);
				if (oCell) {
					if (oCell.getMergeKey()) {
						if (oMergeCell.getMergeKey() === oCell.getMergeKey()) {
							if (iCol === oColIndices.iMaxColIndex || oCell.getColSpan() > 1) {
								oLeftMergeCell = oCell;
							} else {
								return;
							}
						} else {
							return;
						}
					}
				}
			}

			iCurrentPagePosCol--;
			iStatus = oPageManager.getHeaderTileInfo(oColHeaderArea, iCurrentPagePosCol).iStatus;
		}

		if (oLeftMergeCell) {
			copyCellStyles(oMergeCell, oLeftMergeCell);
			oLeftMergeCell.setColSpan(iColSpan + oLeftMergeCell.getColSpan());
			oColHeaderArea.insertCell(null, oMergeCell.getRow(), oMergeCell.getCol());
		}
	}

	function copyCellStyles (oSourceCell, oTargetCell) {
		var aStyleIdList = oSourceCell.getStyleIdList();
		oTargetCell.setStyleIdList(aStyleIdList);
	}
};
}; // end of sap/zen/crosstab/paging/CellMerger.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.paging.Page') ) {


jQuery.sap.declare("sap.zen.crosstab.paging.Page");

// This is the page that represents the runtime page.
// It is responsible for distributing data from one runtime page
// to all the areas of the crosstab
sap.zen.crosstab.paging.Page = function (oPagePos, sPageKey, oPageManager) {
	"use strict";

	var iStatus = sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_UNKNOWN;
	var iPageDataRowCnt = 0;
	var iPageDataColCnt = 0;
	var iPageTileRowCnt = oPageManager.getTileRowCnt();
	var iPageTileColCnt = oPageManager.getTileColCnt();
	var oCellMerger = oPageManager.getCellMerger();
	var oDataHandler = oPageManager.getDataHandler();
	var oCrosstab = oPageManager.getCrosstab();
	var oDimensionHeaderArea = oCrosstab.getDimensionHeaderArea();
	var oColHeaderArea = oCrosstab.getColumnHeaderArea();
	var oRowHeaderArea = oCrosstab.getRowHeaderArea();
	var oDataArea = oCrosstab.getDataArea();
	var oCrosstabAreasToBeFilled = {};
	var aAreaKeys = [];

	fillAreaKeys();

	function fillAreaKeys () {
		aAreaKeys.push(oDimensionHeaderArea.getAreaType());
		aAreaKeys.push(oColHeaderArea.getAreaType());
		aAreaKeys.push(oRowHeaderArea.getAreaType());
		aAreaKeys.push(oDataArea.getAreaType());
	}

	this.getPageKey = function () {
		return sPageKey;
	};

	this.getRow = function () {
		return oPageCoordinates.iRow;
	};

	this.getCol = function () {
		return oPageCoordinates.iCol;
	};

	this.getPosition = function () {
		return oPagePos;
	};

	this.getStatus = function () {
		return iStatus;
	};

	this.setStatus = function (iNewStatus) {
		iStatus = iNewStatus;
	};

	this.getPageDataRowCnt = function () {
		return iPageDataRowCnt;
	};

	this.getPageDataColCnt = function () {
		return iPageDataColCnt;
	};

	this.receiveData = function (oCrosstabData, bIsFirstPageData) {
		// what has actually been sent
		iPageDataRowCnt = oCrosstabData.sentdatarows;
		iPageDataColCnt = oCrosstabData.sentdatacols;
		// the maximum page size. These data correspond to DATA rows/cols (without headers)
		iPageTileRowCnt = oCrosstabData.tilerows;
		iPageTileColCnt = oCrosstabData.tilecols;

		oDataHandler.determineBasicAreaData(oCrosstabData, bIsFirstPageData);

		checkAreas();

		var oPageInfo = {};

		oPageInfo.iRowOffset = oPagePos.iRow * iPageTileRowCnt;
		oPageInfo.iColOffset = oPagePos.iCol * iPageTileColCnt;
		oPageInfo.bIsFirstPage = bIsFirstPageData;
		oPageInfo.oCrosstabAreasToBeFilled = oCrosstabAreasToBeFilled;
		oPageInfo.oCrosstabData = oCrosstabData;

		oDataHandler.jsonToDataModel(oPageInfo);
		setLoadedStatusAfterDataHandling();

		handleLoadedPage();
	};

	this.removeData = function () {
		iStatus = sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_UNKNOWN;
		oCrosstabAreasToBeFilled = {};
		addArea(oDataArea);
		removePageFromHeaderTiles();
		clearDataSections();
	};

	function clearDataSections () {
		var i = 0;
		var oAreaInfo = null;
		for (i = 0; i < aAreaKeys.length; i++) {
			oAreaInfo = oCrosstabAreasToBeFilled[aAreaKeys[i]];
			if (oAreaInfo) {
				fillAreaRegionWithCells(oAreaInfo, false);
				oAreaInfo.oArea.decreaseLoadingPageCnt();
			}
		}
	}

	function checkHeaderAreaForRemoval (oArea, iTileIndex) {
		var oAreaTileInfo = decreaseTileRefCnt(oArea, iTileIndex);
		if (oAreaTileInfo.iRefCnt === 0) {
			oAreaTileInfo.iStatus = sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_UNKNOWN;
			oPageManager.setHeaderTileInfo(oArea, iTileIndex, oAreaTileInfo);
			addArea(oArea);
		}
	}

	function removePageFromHeaderTiles () {
		checkHeaderAreaForRemoval(oDimensionHeaderArea, 0);
		checkHeaderAreaForRemoval(oRowHeaderArea, oPagePos.iRow);
		checkHeaderAreaForRemoval(oColHeaderArea, oPagePos.iCol);
	}

	function addPageToTileRefCnt () {
		increaseTileRefCnt(oDimensionHeaderArea, 0);
		increaseTileRefCnt(oRowHeaderArea, oPagePos.iRow);
		increaseTileRefCnt(oColHeaderArea, oPagePos.iCol);
	}

	function setHeaderTileStatus (oArea, iTileIndex, iStatus) {
		var oTileInfo = oPageManager.getHeaderTileInfo(oArea, iTileIndex);
		oTileInfo.iStatus = iStatus;
		oPageManager.setHeaderTileInfo(oArea, iTileIndex, oTileInfo);
	}

	function increaseTileRefCnt (oArea, iTileIndex) {
		var oTileInfo = oPageManager.getHeaderTileInfo(oArea, iTileIndex);
		oTileInfo.iRefCnt++;
		oPageManager.setHeaderTileInfo(oArea, iTileIndex, oTileInfo);
	}

	function decreaseTileRefCnt (oArea, iTileIndex) {
		var oTileInfo = oPageManager.getHeaderTileInfo(oArea, iTileIndex);
		oTileInfo.iRefCnt--;
		oPageManager.setHeaderTileInfo(oArea, iTileIndex, oTileInfo);
		return oTileInfo;
	}

	function checkAreas () {
		oCrosstabAreasToBeFilled = {};

		addArea(oDataArea, 0);

		if (oPageManager.getHeaderTileInfo(oRowHeaderArea, oPagePos.iRow).iStatus !== sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADED) {
			addArea(oRowHeaderArea, oPagePos.iRow);
		}
		if (oPageManager.getHeaderTileInfo(oColHeaderArea, oPagePos.iCol).iStatus !== sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADED) {
			addArea(oColHeaderArea, oPagePos.iCol);
		}
		if (oPageManager.getHeaderTileInfo(oDimensionHeaderArea, 0).iStatus !== sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADED) {
			addArea(oDimensionHeaderArea, 0);
		}
	}

	function handleLoadedPage () {
		var i = 0;
		var oAreaInfo = null;
		for (i = 0; i < aAreaKeys.length; i++) {
			oAreaInfo = oCrosstabAreasToBeFilled[aAreaKeys[i]];
			if (oAreaInfo) {
				// Handle col/row measurements
				changeColWidthTemporaryFlag(oAreaInfo, false);
				changeRowHeightTemporaryFlag(oAreaInfo, false);
				oAreaInfo.oArea.decreaseLoadingPageCnt();
			}
		}
	}

	function addArea (oArea, iTileIndex) {
		var sKey = oArea.getAreaType();
		var oAreaInfo = {};
		oAreaInfo.oArea = oArea;
		oAreaInfo.oAreaRegion = getAreaCellRegionFromPagePos(oArea);
		oAreaInfo.iTileIndex = iTileIndex;
		oCrosstabAreasToBeFilled[sKey] = oAreaInfo;
	}

	this.provideLoadingCells = function (oArea) {
		iStatus = sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADING;
		determineAreasForLoadingCells(oArea);
		addPageToTileRefCnt();
		handleLoadingPage();
	};

	function setLoadedStatusAfterDataHandling () {
		iStatus = sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADED;
		var oAreaInfo = null;

		oAreaInfo = oCrosstabAreasToBeFilled[oColHeaderArea.getAreaType()];
		if (oAreaInfo) {
			oCellMerger.mergeColHeaderCells(oPagePos.iCol);
			setHeaderTileStatus(oAreaInfo.oArea, oPagePos.iCol,
					sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADED);
		}

		oAreaInfo = oCrosstabAreasToBeFilled[oRowHeaderArea.getAreaType()];
		if (oAreaInfo) {
			oCellMerger.mergeRowHeaderCells(oPagePos.iRow);
			setHeaderTileStatus(oAreaInfo.oArea, oPagePos.iRow,
					sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADED);
		}

		oAreaInfo = oCrosstabAreasToBeFilled[oDimensionHeaderArea.getAreaType()];
		if (oAreaInfo) {
			setHeaderTileStatus(oAreaInfo.oArea, 0, sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADED);
		}
	}

	function determineAreasForLoadingCells (oArea) {
		oCrosstabAreasToBeFilled = {};
		addArea(oDataArea, 0);

		if (oArea.isDataArea()) {
			if (oPageManager.getHeaderTileInfo(oRowHeaderArea, oPagePos.iRow).iStatus === sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_UNKNOWN) {
				addArea(oRowHeaderArea, oPagePos.iRow);
				setHeaderTileStatus(oRowHeaderArea, oPagePos.iRow,
						sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADING);
			}
			if (oPageManager.getHeaderTileInfo(oColHeaderArea, oPagePos.iCol).iStatus === sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_UNKNOWN) {
				addArea(oColHeaderArea, oPagePos.iCol);
				setHeaderTileStatus(oColHeaderArea, oPagePos.iCol,
						sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADING);
			}
			if (oPageManager.getHeaderTileInfo(oDimensionHeaderArea, 0).iStatus === sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_UNKNOWN) {
				addArea(oDimensionHeaderArea, 0);
				setHeaderTileStatus(oDimensionHeaderArea, 0,
						sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADING);
			}
		} else {
			if (oArea.isColHeaderArea()) {
				addArea(oArea, oPagePos.iCol);
				setHeaderTileStatus(oArea, oPagePos.iCol, sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADING);
			} else if (oArea.isRowHeaderArea()) {
				addArea(oArea, oPagePos.iRow);
				setHeaderTileStatus(oArea, oPagePos.iRow, sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADING);
			} else if (oArea.isDimensionHeaderArea()) {
				addArea(oArea, 0);
				setHeaderTileStatus(oArea, 0, sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADING);
			}
		}
	}

	function handleLoadingPage () {
		var i = 0;
		var oAreaInfo = null;

		for (i = 0; i < aAreaKeys.length; i++) {
			oAreaInfo = oCrosstabAreasToBeFilled[aAreaKeys[i]];
			if (oAreaInfo) {
				fillAreaRegionWithCells(oAreaInfo, true);
				changeColWidthTemporaryFlag(oAreaInfo, true);
				changeRowHeightTemporaryFlag(oAreaInfo, true);
				oAreaInfo.oArea.increaseLoadingPageCnt();
			}
		}
	}

	function fillAreaRegionWithCells (oAreaInfo, bIsLoading) {
		var iRow = 0;
		var iCol = 0;
		var oCell = null;
		var oAreaRegion = oAreaInfo.oAreaRegion;
		var oArea = oAreaInfo.oArea;

		for (iRow = oAreaRegion.iStartRow; iRow <= oAreaRegion.iEndRow; iRow++) {
			for (iCol = oAreaRegion.iStartCol; iCol <= oAreaRegion.iEndCol; iCol++) {
				if (bIsLoading) {
					oCell = createLoadingCell(oArea, iRow, iCol);
				}
				oArea.insertCell(oCell, iRow, iCol);
			}
		}
	}

	function changeColWidthTemporaryFlag (oAreaInfo, bIsTemporary) {
		var oAreaRegion = oAreaInfo.oAreaRegion;
		var oArea = oAreaInfo.oArea;
		var iCol = 0;

		for (iCol = oAreaRegion.iStartCol; iCol <= oAreaRegion.iEndCol; iCol++) {
			oArea.changeColWidthTemporaryFlag(iCol, sPageKey, bIsTemporary);
		}
	}

	function changeRowHeightTemporaryFlag (oAreaInfo, bIsTemporary) {
		var oAreaRegion = oAreaInfo.oAreaRegion;
		var oArea = oAreaInfo.oArea;
		var iRow = 0;

		for (iRow = oAreaRegion.iStartRow; iRow <= oAreaRegion.iEndRow; iRow++) {
			oArea.changeRowHeightTemporaryFlag(iRow, sPageKey, bIsTemporary);
		}
	}

	function getAreaCellRegionFromPagePos (oArea) {
		var oAreaRegion = {};

		if (oArea.isDimHeaderArea()) {
			// always full size for dimension header. Should not be necessary for paging though.
			oAreaRegion.iStartRow = 0;
			oAreaRegion.iEndRow = oArea.getRowCnt() - 1;
			oAreaRegion.iStartCol = 0;
			oAreaRegion.iEndCol = oArea.getColCnt() - 1;
		} else if (oArea.isRowHeaderArea()) {
			oAreaRegion.iStartRow = oPagePos.iRow * iPageTileRowCnt;
			oAreaRegion.iEndRow = Math.min(oAreaRegion.iStartRow + iPageTileRowCnt - 1, oArea.getRowCnt() - 1);
			oAreaRegion.iStartCol = 0;
			oAreaRegion.iEndCol = oArea.getColCnt() - 1;
		} else if (oArea.isColHeaderArea()) {
			oAreaRegion.iStartRow = 0;
			oAreaRegion.iEndRow = oArea.getRowCnt() - 1;
			oAreaRegion.iStartCol = oPagePos.iCol * iPageTileColCnt;
			oAreaRegion.iEndCol = Math.min(oAreaRegion.iStartCol + iPageTileColCnt - 1, oArea.getColCnt() - 1);
		} else if (oArea.isDataArea()) {
			oAreaRegion.iStartRow = oPagePos.iRow * iPageTileRowCnt;
			oAreaRegion.iEndRow = Math.min(oAreaRegion.iStartRow + iPageTileRowCnt - 1, oArea.getRowCnt() - 1);
			oAreaRegion.iStartCol = oPagePos.iCol * iPageTileColCnt;
			oAreaRegion.iEndCol = Math.min(oAreaRegion.iStartCol + iPageTileColCnt - 1, oArea.getColCnt() - 1);
		}

		return oAreaRegion;
	}

	function createLoadingCell (oArea, iRow, iCol) {
		var oCell = null;
		if (oArea.isDataArea()) {
			oCell = new sap.zen.crosstab.DataCell();
		} else {
			oCell = new sap.zen.crosstab.HeaderCell();
			oCell.setRowSpan(1);
			oCell.setColSpan(1);
		}
		oCell.setArea(oArea);
		oCell.setRow(iRow);
		oCell.setCol(iCol);
		// oCell.setText("Loading...");
		oCell.setLoading(true);
		oCell.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_LOADING);
		return oCell;
	}
};

}; // end of sap/zen/crosstab/paging/Page.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.paging.RequestHandler') ) {
jQuery.sap.declare("sap.zen.crosstab.paging.RequestHandler");


sap.zen.crosstab.paging.RequestHandler = function(oPageManager) {
	"use strict";

	var oCrosstab = oPageManager.getCrosstab();
	var sRequestCommandTemplate = oPageManager.getRequestCommandTemplate();
	var iPageTileRowCnt = oPageManager.getTileRowCnt();
	var iPageTileColCnt = oPageManager.getTileColCnt();
	var oRequestStack = new sap.zen.crosstab.paging.RequestStack(0);
	var iMaxRequests = 0;
	var iTimeout = 0;

	oRequestStack.addElementRemovedHandler(requestRemovedCallback);

	var oRequestTimer = null;

	this.sendPageRequest = function(oPage) {
		oRequestStack.push(oPage);
		resetTimer();
	};
	
	this.enableTimeout = function(bEnableTimeout) {
		iTimeout = bEnableTimeout ? 1000: 0;
	};

	this.reset = function() {
		oRequestStack.clear();
		iMaxRequests = 0;
		this.enableTimeout(false);
	};

	this.setMaxQueueRequests = function(iMaxRequestCnt) {
		iMaxRequests = iMaxRequestCnt;
	};

	this.getMaxQueueRequests = function() {
		return oRequestStack.getMaxSize();
	};

	this.unlimitStack = function() {
		oRequestStack.unlimitStack();
	};

	function resetTimer() {
		if (oRequestTimer) {
			clearTimeout(oRequestTimer);
		}
		oRequestTimer = setTimeout(handleQueuedRequests, iTimeout);
	}

	function sendRequest(oPage) {
		var fReqHandler = oCrosstab.getPageRequestHandler();
		var oPagePos = oPage.getPosition();
		if (fReqHandler) {
			var iRow = Math.floor(oPagePos.iRow);
			var iCol = Math.floor(oPagePos.iCol);
			fReqHandler(iRow, iCol);
		} else {
			var sCommand = buildPageRequestCommand(oPagePos);
			var fSendRequest = new Function(sCommand);
			fSendRequest();
		}
	}

	function handleQueuedRequests() {
		var oPage = null;
		while (oRequestStack.getActualSize() > 0) {
			oPage = oRequestStack.pop();
			sendRequest(oPage);
		}
		if (iMaxRequests > 0) {
			oRequestStack.resetStack(iMaxRequests);
			iMaxRequests = 0;
		}
	}

	function requestRemovedCallback(oRemovedPage) {
		oPageManager.removeRequest(oRemovedPage);
	}

	function buildPageRequestCommand(oPagePos) {
		var iRequestedRow = oPagePos.iRow * iPageTileRowCnt + 1;
		var iRequestedCol = oPagePos.iCol * iPageTileColCnt + 1;

		var sCommand = sRequestCommandTemplate.replace("__X__", iRequestedCol);
		sCommand = sCommand.replace("__Y__", iRequestedRow);

		return sCommand;
	}
};
}; // end of sap/zen/crosstab/paging/RequestHandler.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.rendering.ScrollManager') ) {
jQuery.sap.declare("sap.zen.crosstab.rendering.ScrollManager");

jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.OpenState'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.TextView'); // unlisted dependency retained




sap.zen.crosstab.rendering.ScrollManager = function (oCrosstab, oRenderEngine) {
	"use strict";
	var oColHeaderArea = oCrosstab.getColumnHeaderArea();
	var oRowHeaderArea = oCrosstab.getRowHeaderArea();
	var oDimensionHeaderArea = oCrosstab.getDimensionHeaderArea();
	var oDataArea = oCrosstab.getDataArea();
	var oMeasuring = oRenderEngine.getMeasuringHelper();

	var iCurrentVScrollStep = 0;
	var iCurrentHScrollStep = 0;
	var bHScrolledToEnd = false;
	var bVScrolledToEnd = false;

	var iHScrollValue = 0;
	var iVScrollValue = 0;

	var oLastHScrollParams = null;
	var oHScrollTimer = null;

	var oLastVScrollParams = null;
	var oVScrollTimer = null;

	var oPopup = new sap.ui.core.Popup();
	oPopup.setContent(new sap.ui.commons.TextView());
	oPopup.setDurations(125, 500);
	oPopup.setAutoClose(true);
	oPopup.getContent().addStyleClass("sapzencrosstab-ScrollPopup");
	oPopup.getContent().setWrapping(false);

	var iRowCntLength = (oDataArea.getRowCnt() + "").length;
	var iColCntLength = (oDataArea.getColCnt() + "").length;

	var iVPopupWidth = 0;
	var iHPopupWidth = 0;

	var bBlockHScrollEvent = false;
	var bBlockVScrollEvent = false;
	
	var that = this;

	this.destroy = function () {
		oPopup.destroy();
	};

	this.setHScrollPos = function (iHScrollPos) {
		iCurrentHScrollStep = iHScrollPos;
	};

	this.setVScrollPos = function (iVScrollPos) {
		iCurrentVScrollStep = iVScrollPos;
	};

	function handleHScrolling (poEvent) {
		oCrosstab.getPageManager().enableTimeout(true);
		oHScrollTimer = null;
		var oParameters = null;
		if (!poEvent) {
			oParameters = oLastHScrollParams;
		} else {
			oParameters = poEvent.getParameters();
		}
		if (oParameters) {
			var oHScrollbar = oCrosstab.getHScrollbar();
			var iMaxSteps = oHScrollbar.getSteps();
			bHScrolledToEnd = oParameters.newScrollPos === iMaxSteps;
			iCurrentHScrollStep = oParameters.newScrollPos;
			that.sendClientScrollPosUpdate();
			var iStartCol = oParameters.newScrollPos;

			if (iStartCol !== oColHeaderArea.getRenderStartCol()) {

				// If iStartCol == oColHeaderArea.getColCnt() this means that there is a need to scroll to see the end
				// of the last column.
				// The last column is already rendered but not fully visible. In this case, omit the rendering and move
				// the div.
				if (iStartCol !== oColHeaderArea.getColCnt()) {
					oRenderEngine.beginRendering();
					oRenderEngine.renderColHeaderArea(iStartCol);
					oRenderEngine.renderDataArea();
					oRenderEngine.adjustColWidths(oColHeaderArea, oDataArea);
					oRenderEngine.adjustRowHeights(oRowHeaderArea, oDataArea);
					oRenderEngine.adjustRowHeights(oDimensionHeaderArea, oColHeaderArea);
					oRenderEngine.finishRendering();
				}

				var iColHeaderAreaWidth = oMeasuring.getAreaWidth(oColHeaderArea);

				// The visible width of the column header area
				var iAvailableColHeaderAreaWidth = oMeasuring.getUpperRightScrollDivWidth();

				var bHasUnusedSpace = iColHeaderAreaWidth < iAvailableColHeaderAreaWidth;
				var bLastColRendered = oColHeaderArea.getRenderColCnt() + oColHeaderArea.getRenderStartCol() === oColHeaderArea
						.getColCnt();

				if (bHScrolledToEnd || bHasUnusedSpace && bLastColRendered) {
					if (bHasUnusedSpace && iStartCol > 0) {
						oRenderEngine.beginRendering();
						// "4" is purely based on heuristics
						oRenderEngine.appendLeftCols(oColHeaderArea, 4);
						oRenderEngine.appendLeftCols(oDataArea, 4);
						oRenderEngine.adjustColWidths(oColHeaderArea, oDataArea);
						oRenderEngine.adjustRowHeights(oRowHeaderArea, oDataArea);
						oRenderEngine.adjustRowHeights(oDimensionHeaderArea, oColHeaderArea);
						oRenderEngine.finishRendering();
					}

					// If the user scrolls to the left you can't move the scrollbar to the right, or he won't be able to
					// scroll to the left again
					if (!bHScrolledToEnd && oParameters.forward) {
						moveHScrollbar(0, true);
					}

					moveHScrollDiv(true);
				} else {
					moveHScrollDiv(false);
				}
			} else {
				if (bHScrolledToEnd) {
					moveHScrollDiv(true);
				}
			}

			if (bVScrolledToEnd) {
				moveVScrollDiv(true);
			}

			if (oParameters.newScrollPos === 0) {
				moveHScrollDiv(false);
			}
		}
		oPopup.close();
	}

	this.hScrollHandler = function (oEvent, bNoTimer) {
		if (!bBlockHScrollEvent) {
			if (bNoTimer) {
				handleHScrolling(oEvent);
			} else {
				// don't save the oEvent instance itself. It will be discarded by PHX
				oLastHScrollParams = oEvent.getParameters();
				if (oHScrollTimer) {
					clearTimeout(oHScrollTimer);
					oHScrollTimer = null;
					displayHPopup(oLastHScrollParams.newScrollPos);
				}
				oHScrollTimer = setTimeout(handleHScrolling, 200, null);
				iCurrentHScrollStep = oLastHScrollParams.newScrollPos;
			}
		} else {
			bBlockHScrollEvent = false;
		}
	};

	function moveHScrollbar (iStep, bScrollToEnd) {
		var oHScrollbar = oCrosstab.getHScrollbar();
		var iCurrentStep = oHScrollbar.getScrollPosition();
		if (bScrollToEnd) {
			iStep = oHScrollbar.getSteps();
		}
		if (iCurrentStep !== iStep) {
			oHScrollbar.setScrollPosition(iStep);
			bBlockHScrollEvent = true;
		}
		iCurrentHScrollStep = iStep;
	}

	function moveHScrollDiv (bScrollToEnd) {
		var oLRS = $('#' + oCrosstab.getId() + "_lowerRight_scrollDiv");
		iHScrollValue = bScrollToEnd ? oLRS[0].scrollWidth : 0;
		that.positionHScrollDiv(oLRS);
	}

	this.positionHScrollDiv = function (oLRS) {
		if (!oLRS) {
			oLRS = $('#' + oCrosstab.getId() + "_lowerRight_scrollDiv");
		}
		var oURS = $('#' + oCrosstab.getId() + "_upperRight_scrollDiv");
		oLRS.scrollLeft(iHScrollValue);
		oURS.scrollLeft(iHScrollValue);
	};

	this.vScrollHandler = function (oEvent, bNoTimer) {
		if (!bBlockVScrollEvent) {
			if (bNoTimer) {
				handleVScrolling(oEvent);
			} else {
				// don't save the oEvent instance itself. It will be discarded by PHX
				oLastVScrollParams = oEvent.getParameters();
				if (oVScrollTimer) {
					clearTimeout(oVScrollTimer);
					oVScrollTimer = null;
					displayVPopup(oLastVScrollParams.newScrollPos);
				}
				oVScrollTimer = setTimeout(handleVScrolling, 200, null);
				iCurrentVScrollStep = oLastVScrollParams.newScrollPos;
			}
		} else {
			bBlockVScrollEvent = false;
		}
	};
	
	this.sendClientScrollPosUpdate = function() {
		oCrosstab.getUtils().sendClientScrollPosUpdate(iCurrentHScrollStep, bHScrolledToEnd, iCurrentVScrollStep, bVScrolledToEnd);
	};
	
	function displayHPopup (iScrollPos) {
		var oColHeaderArea = oCrosstab.getColumnHeaderArea();
		var oCell = null;
		var aHeaderTexts = [];
		for ( var iRow = 0; iRow < 1; iRow++) {
			oCell = oColHeaderArea.getCellWithColSpan(iRow, iScrollPos, true);
			if (oCell) {
				aHeaderTexts.push(oCell.getUnescapedText());
			} else {
				aHeaderTexts.push("?");
			}
		}
		var sLabelText = oCrosstab.getPropertyBag().getText(sap.zen.crosstab.TextConstants.COL_TEXT_KEY) + " "
				+ sap.zen.crosstab.utils.Utils.padWithZeroes(iScrollPos + 1, iColCntLength) + "/" + oColHeaderArea.getColCnt();

		if (!iHPopupWidth) {
			renderHPopup(sLabelText);
			iHPopupWidth = $('#' + oPopup.getContent().getId()).innerWidth();
		}

		sLabelText = sLabelText + "\n" + aHeaderTexts.join("\n");
		renderHPopup(sLabelText);

	}

	function renderHPopup (sLabelText) {
		oPopup.getContent().setProperty("text", sLabelText, true);
		var eDock = sap.ui.core.Popup.Dock;

		if (iHPopupWidth) {
			oPopup.getContent().setWidth(iHPopupWidth + "px");
		}

		var oHScrollbar = oCrosstab.getHScrollbar();
		var iWidth = oMeasuring.getRenderSizeDivSize().iWidth - oMeasuring.getAreaWidth(oCrosstab.getRowHeaderArea());
		var iPopupWidth = $("#" + oPopup.getContent().getId()).outerWidth();
		iWidth = iWidth - iPopupWidth;
		var rPercent = oHScrollbar.getScrollPosition() / oHScrollbar.getSteps();
		var sXCoord = (iWidth * rPercent) + " ";

		oPopup.setPosition(eDock.BeginBottom, eDock.BeginTop, $('#' + oCrosstab.getHScrollbar().getId())[0], sXCoord
				+ "-20");

		if (oPopup.getOpenState() === sap.ui.core.OpenState.CLOSED) {
			oPopup.open(-1);
		}
		oPopup.getContent().rerender();
	}

	function displayVPopup (iScrollPos) {
		var oRowHeaderArea = oCrosstab.getRowHeaderArea();
		var oCell = null;
		var aHeaderTexts = [];
		// oRowHeaderArea.getColCnt()
		for ( var iCol = 0; iCol < 1; iCol++) {
			oCell = oRowHeaderArea.getCellWithRowSpan(iScrollPos, iCol, true);
			if (oCell) {
				aHeaderTexts.push(oCell.getUnescapedText());
			} else {
				aHeaderTexts.push("?");
			}
		}
		var sLabelText = oCrosstab.getPropertyBag().getText(sap.zen.crosstab.TextConstants.ROW_TEXT_KEY) + " "
				+ sap.zen.crosstab.utils.Utils.padWithZeroes(iScrollPos + 1, iRowCntLength) + "/" + oRowHeaderArea.getRowCnt();

		if (!iVPopupWidth) {
			renderVPopup(sLabelText);
			iVPopupWidth = $('#' + oPopup.getContent().getId()).innerWidth();
		}
		sLabelText = sLabelText + "\n" + aHeaderTexts.join("\n");
		renderVPopup(sLabelText);
	}

	function renderVPopup (sLabelText) {
		oPopup.getContent().setProperty("text", sLabelText, true);
		var eDock = sap.ui.core.Popup.Dock;
		var oVScrollbar = oCrosstab.getVScrollbar();
		var iHeight = oMeasuring.getRenderSizeDivSize().iHeight
				- oMeasuring.getAreaHeight(oCrosstab.getColumnHeaderArea());
		var iPopupHeight = $("#" + oPopup.getContent().getId()).outerHeight();
		iHeight = iHeight - iPopupHeight;
		var rPercent = oVScrollbar.getScrollPosition() / oVScrollbar.getSteps();
		var sYCoord = " " + (iHeight * rPercent);

		oPopup
				.setPosition(eDock.EndTop, eDock.BeginTop, $('#' + oCrosstab.getVScrollbar().getId())[0], "-20"
						+ sYCoord);

		if (iVPopupWidth) {
			oPopup.getContent().setWidth(iVPopupWidth + "px");
		}

		if (oPopup.getOpenState() === sap.ui.core.OpenState.CLOSED) {
			oPopup.open(-1);
		}
		oPopup.getContent().rerender();
	}

	function handleVScrolling (poEvent) {
		oCrosstab.getPageManager().enableTimeout(true);
		oVScrollTimer = null;
		var oParameters = null;
		if (!poEvent) {
			oParameters = oLastVScrollParams;
		} else {
			oParameters = poEvent.getParameters();
		}
		if (oParameters) {
			var oVScrollbar = oCrosstab.getVScrollbar();
			var iMaxSteps = oVScrollbar.getSteps();
			bVScrolledToEnd = oParameters.newScrollPos === iMaxSteps;
			iCurrentVScrollStep = oParameters.newScrollPos;
			that.sendClientScrollPosUpdate();
			var iStartRow = oParameters.newScrollPos;

			// TODO: make sure this is not executed because of stray scrolling events that do not result from any
			// scrolling

			if (iStartRow !== oRowHeaderArea.getRenderStartRow()) {
				
				// If iStartRow == oRowHeaderArea.getRowCnt() this means that there is a need to scroll to see the end
				// of the last row.
				// The last row is already rendered but not fully visible. In this case, omit the rendering and move
				// the div.
				if (iStartRow !== oRowHeaderArea.getRowCnt()) {
					oRenderEngine.beginRendering();
					oRenderEngine.renderRowHeaderArea(iStartRow);
					oRenderEngine.renderDataArea();
					oRenderEngine.adjustColWidths(oDimensionHeaderArea, oRowHeaderArea);
					oRenderEngine.adjustColWidths(oColHeaderArea, oDataArea);
					oRenderEngine.adjustRowHeights(oRowHeaderArea, oDataArea);
					oRenderEngine.finishRendering();
				}

				var iRowHeaderAreaHeight = oMeasuring.getAreaHeight(oRowHeaderArea);

				// The visible height of the row header area
				var iAvailableRowHeaderAreaHeight = oMeasuring.getLowerScrollDivHeight();

				var bHasUnusedSpace = iRowHeaderAreaHeight < iAvailableRowHeaderAreaHeight;
				var bLastRowRendered = oRowHeaderArea.getRenderRowCnt() + oRowHeaderArea.getRenderStartRow() === oRowHeaderArea
						.getRowCnt();

				if (bVScrolledToEnd || bHasUnusedSpace && bLastRowRendered) {
					if (bHasUnusedSpace && iStartRow > 0) {
						oRenderEngine.beginRendering();
						// "2" is purely based on heuristics
						oRenderEngine.appendTopRows(oRowHeaderArea, 2);
						oRenderEngine.appendTopRows(oDataArea, 2);
						oRenderEngine.adjustColWidths(oDimensionHeaderArea, oRowHeaderArea);
						oRenderEngine.adjustColWidths(oColHeaderArea, oDataArea);
						oRenderEngine.adjustRowHeights(oRowHeaderArea, oDataArea);
						oRenderEngine.finishRendering();
					}

					// If the user scrolls to the top you can't move the scrollbar to the bottom, or he won't be able to
					// scroll to the top again
					if (!bVScrolledToEnd && oParameters.forward) {
						moveVScrollbar(0, true);
					}

					moveVScrollDiv(true);
				} else {
					moveVScrollDiv(false);
				}
			} else {
				if (bVScrolledToEnd) {
					moveVScrollDiv(true);
				}
			}

			if (oParameters.newScrollPos === 0) {
				moveVScrollDiv(false);
			}

			if (bHScrolledToEnd) {
				moveHScrollDiv(true);
			}
		}
		oPopup.close();
		adjustHeaderScrollDivs();
	}
	
	function adjustHeaderScrollDivs() {
		var oHeaderScrollManager = oCrosstab.getRenderEngine().getHeaderScrollManager();
		if (oHeaderScrollManager) {
			oHeaderScrollManager.moveScrollbars();
		}
	}

	function moveVScrollbar (iStep, bScrollToEnd) {
		var oVScrollbar = oCrosstab.getVScrollbar();
		var iCurrentStep = oVScrollbar.getScrollPosition();
		if (bScrollToEnd) {
			iStep = oVScrollbar.getSteps();
		}
		if (iCurrentStep !== iStep) {
			oVScrollbar.setScrollPosition(iStep);
			bBlockVScrollEvent = true;
		}
		iCurrentVScrollStep = iStep;
	}

	function moveVScrollDiv (bScrollToEnd) {
		var oLRS = $('#' + oCrosstab.getId() + "_lowerRight_scrollDiv");
		iVScrollValue = bScrollToEnd ? oLRS[0].scrollHeight : 0;
		that.positionVScrollDiv(oLRS);
	}

	this.positionVScrollDiv = function (oLRS) {
		if (!oLRS) {
			oLRS = $('#' + oCrosstab.getId() + "_lowerRight_scrollDiv");
		}
		var oLLS = $('#' + oCrosstab.getId() + "_lowerLeft_scrollDiv");

		oLRS.scrollTop(iVScrollValue);
		oLLS.scrollTop(iVScrollValue);
	};

	this.moveScrollbars = function (oScrollbarVisibility, bRenderScrollbars, pbHScrolledToEnd, pbVScrolledToEnd) {
		var oHScrollbar = oCrosstab.getHScrollbar();
		if (oHScrollbar) {
			// scrollstep can be greater than actual scrollbar steps, e. g. if a hierarchy node was collapsed
			if (pbHScrolledToEnd !== undefined) {
				bHScrolledToEnd = pbHScrolledToEnd;
			} else {
				bHScrolledToEnd = (oHScrollbar.getSteps() <= iCurrentHScrollStep)
						&& (oColHeaderArea.getRenderStartCol() + oColHeaderArea.getRenderColCnt() >= oColHeaderArea
								.getColCnt());
			}
			if (bHScrolledToEnd) {
				moveHScrollbar(0, true);
				moveHScrollDiv(true);
			} else {
				moveHScrollbar(iCurrentHScrollStep, false);
			}
		}
		var oVScrollbar = oCrosstab.getVScrollbar();
		if (oVScrollbar) {
			if (pbVScrolledToEnd !== undefined) {
				bVScrolledToEnd = pbVScrolledToEnd;
			} else {
				// scrollstep can be greater than actual scrollbar steps, e. g. if a hierarchy node was collapsed
				bVScrolledToEnd = (oVScrollbar.getSteps() <= iCurrentVScrollStep)
						&& (oRowHeaderArea.getRenderStartRow() + oRowHeaderArea.getRenderRowCnt() >= oRowHeaderArea
								.getRowCnt());
			}
			if (bVScrolledToEnd) {
				moveVScrollbar(0, true);
				moveVScrollDiv(true);
			} else {
				moveVScrollbar(iCurrentVScrollStep, false);
			}
		}
	};

	this.commandHScrolledToEnd = function () {
		bHScrolledToEnd = true;
	};

	this.commandVScrolledToEnd = function () {
		bVScrolledToEnd = true;
	};

	this.isVScrolledToEnd = function () {
		return bVScrolledToEnd;
	};

	this.isHScrolledToEnd = function () {
		return bHScrolledToEnd;
	};
	
	this.setVScrolledToEnd = function(pbVScrolledToEnd) {
		bVScrolledToEnd = pbVScrolledToEnd;
	};
	
	this.setHScrolledToEnd = function(pbHScrolledToEnd) {
		bHScrolledToEnd = pbHScrolledToEnd;
	};
};
}; // end of sap/zen/crosstab/rendering/ScrollManager.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.rendering.ScrollbarRenderer') ) {
jQuery.sap.declare("sap.zen.crosstab.rendering.ScrollbarRenderer");



sap.zen.crosstab.rendering.ScrollbarRenderer = function (oCrosstab, oRenderManager, oMeasuring, oDomElementProvider) {
	"use strict";
	var iScrollbarWidth = 0;
	var bHScrollbarVisible = false;
	var bVScrollbarVisible = false;
	var bHHeaderScrollbarVisible = false;
	var oHScrollHandler = null;
	var oVScrollHandler = null;
	var oHeaderHScrollHandler = null;
	var bIsPixelScrolling = oCrosstab.getPropertyBag().isPixelScrolling();

	function writeUpperVScrollCellContent (iUpperAreaHeight) {
		oRenderManager.write("<div");
		oRenderManager.writeAttribute("id", oCrosstab.getId() + "_upperRightPad");
		oRenderManager.writeAttribute("class", "sapzencrosstab-UpperRightScrollPad");
		oRenderManager.addStyle("width", iScrollbarWidth + "px");
		oRenderManager.addStyle("height", iUpperAreaHeight + "px");
		oRenderManager.writeStyles();
		oRenderManager.write(">");
		oRenderManager.write("</div>");
	}

	function writeLowerVScrollCellContent (iScrollDivHeight, iUpperAreaHeight) {
		var oVScrollbar = null;
		var iInitialHeight = 0;
		var iHeight = 0;
		if (!oCrosstab.getVScrollbar()) {
			oVScrollbar = new sap.ui.core.ScrollBar();
			oCrosstab.setVScrollbar(oVScrollbar);
		}
		oVScrollbar = oCrosstab.getVScrollbar();
		oVScrollbar.setVertical(true);
		
		if (bHHeaderScrollbarVisible === true && !bHScrollbarVisible) {
			iInitialHeight = $('#' + oCrosstab.getId() + "_renderSizeDiv").outerHeight() - iScrollbarWidth;
		} else {
			iInitialHeight = iScrollDivHeight;
		}
		
		iHeight = iInitialHeight - iUpperAreaHeight;
		oVScrollbar.setSize(iHeight + "px");
		// Step determination carried out later as soon as the RenderSizeDiv size was adapted
		oRenderManager.renderControl(oVScrollbar);
	}

	function beginVScrollTableCell () {
		oRenderManager.write("<td");
		oRenderManager.writeAttribute("class", "sapzencrosstab-VScrollCell");
		oRenderManager.write(">");
	}

	function renderVScrollbarTable (iScrollDivHeight) {
		var iUpperAreaHeight = oMeasuring.getUpperScrollDivHeight();

		oRenderManager.write("<table");

		oRenderManager.writeAttribute("id", oCrosstab.getId() + "_vScrollTab");
		oRenderManager.writeAttribute("class", "sapzencrosstab-VScrollTable");
		oRenderManager.write(">");

		// first row: upper right pad
		oRenderManager.write("<tr>");
		beginVScrollTableCell();
		writeUpperVScrollCellContent(iUpperAreaHeight);
		oRenderManager.write("</td>");
		oRenderManager.write("</tr>");

		// second row: actual scrollbar
		oRenderManager.write("<tr>");
		beginVScrollTableCell();
		writeLowerVScrollCellContent(iScrollDivHeight, iUpperAreaHeight);
		oRenderManager.write("</td>");
		oRenderManager.write("</tr>");

		oRenderManager.write("</table>");
	}

	function renderVScrollbarSection () {
		// vertical section div
		oRenderManager.write("<div");
		oRenderManager.writeAttribute("id", oCrosstab.getId() + "_vScrollDiv");

		oRenderManager.addStyle("position", "absolute");
		oRenderManager.addStyle("top", "0px");
		oRenderManager.addStyle("right", "0px");

		oRenderManager.addStyle("width", iScrollbarWidth + "px");

		var iHeight = oMeasuring.getRenderSizeDivSize().iHeight;
		if (bHScrollbarVisible) {
			iHeight = Math.min(oCrosstab.getContentHeight() - iScrollbarWidth, iHeight);
		}

		oRenderManager.addStyle("height", iHeight + "px");

		oRenderManager.writeStyles();
		oRenderManager.write(">");

		renderVScrollbarTable(iHeight);

		oRenderManager.write("</div>");
	}
	
	function getLeftScrollDivWidth() {
		var iWidth = 0;
		var oDiv = $('#' + oCrosstab.getId() + "_upperLeft_scrollDiv");
		if (oDiv.length > 0) {
			iWidth = $.browser.msie ? oDiv.width() : oDiv.outerWidth();
		} 
		if (iWidth === 0) {
			oDiv = $('#' + oCrosstab.getId() + "_lowerLeft_scrollDiv");
			iWidth = $.browser.msie ? oDiv.width() : oDiv.outerWidth();
		}
		return iWidth;
	}

	function writeLeftHScrollCellContent (iLowerLeftAreaWidth) {
		if (!bHHeaderScrollbarVisible) {
			oRenderManager.write("<div");
			oRenderManager.writeAttribute("id", oCrosstab.getId() + "_lowerLeftPad");
			oRenderManager.writeAttribute("class", "sapzencrosstab-LowerLeftScrollPad");
			oRenderManager.addStyle("width", iLowerLeftAreaWidth + "px");
			oRenderManager.addStyle("height", iScrollbarWidth + "px");
			oRenderManager.writeStyles();
			oRenderManager.write(">");
			oRenderManager.write("</div>");
		} else {
			var oHHeaderScrollbar = null;
			if (!oCrosstab.getHorizontalHeaderScrollbar()) {
				oHHeaderScrollbar = new sap.ui.core.ScrollBar();
				oCrosstab.setHorizontalHeaderScrollbar(oHHeaderScrollbar);
			}
			oHHeaderScrollbar = oCrosstab.getHorizontalHeaderScrollbar();
			oHHeaderScrollbar.setVertical(false);
			var iLeftScrollDivWidth = getLeftScrollDivWidth();
			oHHeaderScrollbar.setSize(iLeftScrollDivWidth + "px");
			oRenderManager.renderControl(oHHeaderScrollbar);
		}
	}

	function beginHScrollTableCell (bHHeaderScrollbarVisible) {
		if (bHHeaderScrollbarVisible === true) {
			oRenderManager.write("<td");
			oRenderManager.writeAttribute("id", oCrosstab.getId() + "_hScrollTableCell");
			oRenderManager.writeAttribute("class", "sapzencrosstab-HScrollCell sapzencrosstab-HScrollCellWithHeaderScrollRightBorder");
		} else {
			oRenderManager.write("<td");
			oRenderManager.writeAttribute("class", "sapzencrosstab-HScrollCell");
		}
		oRenderManager.write(">");
	}

	function writeRightHScrollCellContent () {
		oRenderManager.write("<div");
		oRenderManager.writeAttribute("id", oCrosstab.getId() + "_lowerRightPad");
		oRenderManager.writeAttribute("class", "sapzencrosstab-LowerRightScrollPad");
		oRenderManager.addStyle("width", iScrollbarWidth + "px");
		oRenderManager.addStyle("height", iScrollbarWidth + "px");
		oRenderManager.writeStyles();
		oRenderManager.write(">");
		oRenderManager.write("</div>");
	}

	function writeMiddleHScrollCellContent (iScrollDivWidth, iLowerLeftAreaWidth) {
		if (bHScrollbarVisible === true) {
		var oHScrollbar = null;
		if (!oCrosstab.getHScrollbar()) {
			oHScrollbar = new sap.ui.core.ScrollBar();
			oCrosstab.setHScrollbar(oHScrollbar);
		}
		oHScrollbar = oCrosstab.getHScrollbar();
		oHScrollbar.setVertical(false);
		oHScrollbar.setSize((iScrollDivWidth - iLowerLeftAreaWidth - (bVScrollbarVisible ? iScrollbarWidth : 0)) + "px");
		// Step determination carried out later as soon as the RenderSizeDiv size was adapted
		oRenderManager.renderControl(oHScrollbar);
		} else {
			// write a blank div
			oRenderManager.write("<div");
			oRenderManager.writeAttribute("id", oCrosstab.getId() + "_lowerMiddlePad");
			oRenderManager.writeAttribute("class", "sapzencrosstab-LowerMiddleScrollPad");
			oRenderManager.addStyle("width", (iScrollDivWidth - iLowerLeftAreaWidth - (bVScrollbarVisible ? iScrollbarWidth : 0)) + "px");
			oRenderManager.addStyle("height", iScrollbarWidth + "px");
			oRenderManager.writeStyles();
			oRenderManager.write(">");
			oRenderManager.write("</div>");
		}
	}

	function renderHScrollbarTable (iWidth) {
		var oDomLowerLeftArea = $('#' + oCrosstab.getId() + "_lowerLeft");
		var iLowerLeftAreaWidth = oDomLowerLeftArea.outerWidth();

		oRenderManager.write("<table");
		oRenderManager.writeAttribute("id", oCrosstab.getId() + "_hScrollTab");
		oRenderManager.writeAttribute("class", "sapzencrosstab-HScrollTable");
		oRenderManager.write(">");

		oRenderManager.write("<tr>");

		// left padding or header scrollbar
		beginHScrollTableCell(bHHeaderScrollbarVisible);
		writeLeftHScrollCellContent(iLowerLeftAreaWidth);
		oRenderManager.write("</td>");

		// scrollbar or padding if only header scrollbar
		var iScrollDivWidth = oCrosstab.getContentWidth();
		beginHScrollTableCell();
		writeMiddleHScrollCellContent(iScrollDivWidth, iLowerLeftAreaWidth);
		oRenderManager.write("</td>");

		// right padding
		if (bVScrollbarVisible) {
			beginHScrollTableCell();
			writeRightHScrollCellContent();
			oRenderManager.write("</td>");
		}

		oRenderManager.write("</tr>");
		oRenderManager.write("</table>");
	}
	
	function renderHScrollbarSection () {
		// horizontal section div
		oRenderManager.write("<div");
		oRenderManager.writeAttribute("id", oCrosstab.getId() + "_hScrollDiv");

		oRenderManager.addStyle("position", "absolute");
		var iToolbarHeight = oCrosstab.getPropertyBag().getToolbarHeight();
		oRenderManager.addStyle("bottom", iToolbarHeight + "px");

		oRenderManager.addStyle("height", iScrollbarWidth + "px");

		var iWidth = oCrosstab.getContentWidth();
		oRenderManager.addStyle("width", iWidth + "px");
		oRenderManager.addStyle("height", iScrollbarWidth + "px");

		oRenderManager.writeStyles();
		oRenderManager.write(">");
		
		renderHScrollbarTable(iWidth);

		oRenderManager.write("</div>");
	}
	
	this.renderScrollbars = function (oScrollbarVisibility) {
		bHScrollbarVisible = oScrollbarVisibility.bHasHScrollbar;
		bVScrollbarVisible = oScrollbarVisibility.bHasVScrollbar;
		bHHeaderScrollbarVisible = oScrollbarVisibility.bHasHHeaderScrollbar;
	
		if (bHScrollbarVisible || bVScrollbarVisible || bHHeaderScrollbarVisible) {
			iScrollbarWidth = oMeasuring.getBrowserScrollbarWidth();
			
			if (iScrollbarWidth === 0) {
				/*
				 * Performance optimization: On the iPad there are no scrollbars, the width is 0.
				 * Therefore, we don't need to render the scrollbars. However, we need the sap.ui.core.ScrollBar
				 * because the scroll state is handled within those objects. 
				 */
				if (bVScrollbarVisible) {
					var oVScrollbar = new sap.ui.core.ScrollBar();
					oCrosstab.setVScrollbar(oVScrollbar);
				}
				if (bHScrollbarVisible) {
					var oHScrollbar = new sap.ui.core.ScrollBar();
					oCrosstab.setHScrollbar(oHScrollbar);
				}
				if (bHHeaderScrollbarVisible) {
					var oHHeaderScrollbar = new sap.ui.core.ScrollBar();
					oCrosstab.setHorizontalHeaderScrollbar(oHHeaderScrollbar);
				}
			} else {
				var oTableDiv = oDomElementProvider.getElement(oCrosstab.getId());
				var sInnerHtml = oTableDiv.html();
				if (bVScrollbarVisible) {
					renderVScrollbarSection();
				}
				if (bHScrollbarVisible || bHHeaderScrollbarVisible) {
					renderHScrollbarSection();
				}
				oRenderManager.write(sInnerHtml);
				oRenderManager.flush(oTableDiv[0]);
			}
		}
	};

	this.attachHandlers = function (poHScrollHandler, poVScrollHandler, poHeaderHScrollHandler) {
		this.detachHandlers();

		oHScrollHandler = poHScrollHandler;
		oVScrollHandler = poVScrollHandler;
		oHeaderHScrollHandler = poHeaderHScrollHandler;

		if (oHScrollHandler && oCrosstab.getHScrollbar()) {
			oCrosstab.getHScrollbar().attachScroll(oHScrollHandler);
			oCrosstab.getHScrollbar().attachBrowserEvent("mousedown touchstart",
					sap.zen.crosstab.utils.Utils.cancelEvent);
		}
		if (oVScrollHandler && oCrosstab.getVScrollbar()) {
			oCrosstab.getVScrollbar().attachScroll(oVScrollHandler);
			oCrosstab.getVScrollbar().attachBrowserEvent("mousedown touchstart",
					sap.zen.crosstab.utils.Utils.cancelEvent);
			
			this.attachMouseWheelHandler();
		}
		if (oHeaderHScrollHandler && oCrosstab.getHorizontalHeaderScrollbar()) {
			oCrosstab.getHorizontalHeaderScrollbar().attachScroll(oHeaderHScrollHandler);
			oCrosstab.getHorizontalHeaderScrollbar().attachBrowserEvent("mousedown touchstart",
					sap.zen.crosstab.utils.Utils.cancelEvent);
		}
	};
	
	this.attachMouseWheelHandler = function () {
		if (!oCrosstab.getPropertyBag().isMobileMode()) {
			var oTableDiv = oCrosstab.getTableDiv();
			if (/Firefox/i.test(navigator.userAgent)) {
				oTableDiv[0].addEventListener("DOMMouseScroll", this.vScrollMouseWheelFireFox);
			} else {
				oTableDiv.on("mousewheel", this.vScrollMouseWheel);
			}
		}
	};

	this.detachMouseWheelHandler = function () {
		if (!oCrosstab.getPropertyBag().isMobileMode()) {
			var oTableDiv = oCrosstab.getTableDiv();
			if (/Firefox/i.test(navigator.userAgent)) {
				oTableDiv[0].removeEventListener("DOMMouseScroll", this.vScrollMouseWheelFireFox);
			} else {
				oTableDiv.off("mousewheel", this.vScrollMouseWheel);
			}
		}
	};
	
	function sign(number) {
		return number && number / Math.abs(number);
	}
	
	this.vScrollMouseWheelFireFox = function(e) {
		var iFactor = sign(e.detail);
		mouseWheelScroll(e, iFactor);		
	};
	
	this.vScrollMouseWheel = function(e) {
		var iFactor = -sign(e.originalEvent.wheelDelta);
		mouseWheelScroll(e, iFactor);
	};
	
	function mouseWheelScroll (e, iFactor) {
		if (oCrosstab.hasLoadingPages() === false) {
			var iStepSize = 0;
			var iUpperLimit = 0;
			if (bIsPixelScrolling === true) {
				iStepSize = 120;
				iUpperLimit = parseInt(oCrosstab.getVScrollbar().getContentSize(), 10);
			} else {
				iStepSize = 3;
				iUpperLimit = oCrosstab.getVScrollbar().getSteps();
			}
			var iNewScrollPos = oCrosstab.getVScrollPos() + iFactor * iStepSize;
			iNewScrollPos = Math.max(0, iNewScrollPos);
			iNewScrollPos = Math.min(iNewScrollPos, iUpperLimit);
			// use timing otherwise we are going to run into all sorts of problems (performance, stability ...)
			oCrosstab.getRenderEngine().scrollVertical(iNewScrollPos, true);
		}
		sap.zen.crosstab.utils.Utils.cancelEvent(e);
	}

	this.detachHandlers = function () {
		if (oHScrollHandler && oCrosstab.getHScrollbar()) {
			oCrosstab.getHScrollbar().detachScroll(oHScrollHandler);
			oCrosstab.getHScrollbar().detachBrowserEvent("mousedown touchstart",
					sap.zen.crosstab.utils.Utils.cancelEvent);
		}
		if (oVScrollHandler && oCrosstab.getVScrollbar()) {
			oCrosstab.getVScrollbar().detachScroll(oVScrollHandler);
			oCrosstab.getVScrollbar().detachBrowserEvent("mousedown touchstart",
					sap.zen.crosstab.utils.Utils.cancelEvent);
			
			this.detachMouseWheelHandler();
		}
		if (oHeaderHScrollHandler && oCrosstab.getHorizontalHeaderScrollbar()) {
			oCrosstab.getHorizontalHeaderScrollbar().detachScroll(oHeaderHScrollHandler);
			oCrosstab.getHorizontalHeaderScrollbar().detachBrowserEvent("mousedown touchstart",
					sap.zen.crosstab.utils.Utils.cancelEvent);
		}
		oHScrollHandler = null;
		oVScrollHandler = null;
		oHeaderHScrollHandler = null;
	};

	this.destroy = function () {
		this.detachHandlers();
		iScrollbarWidth = 0;
		bHScrollbarVisible = false;
		bVScrollbarVisible = false;
		oHScrollHandler = null;
		oVScrollHandler = null;
	};

	this.setScrollbarSteps = function () {
		if (oCrosstab.getPropertyBag().isPixelScrolling()) {
			this.setScrollbarStepsInPixelMode();
		} else {
			this.setScrollbarStepsInStepMode();
		}
		if (bHHeaderScrollbarVisible) {
			this.setHorizontalHeaderScrollbarSteps();
		}
	};
	
	this.setHorizontalHeaderScrollbarSteps = function() {
		var oHeaderHScrollbar = oCrosstab.getHorizontalHeaderScrollbar();
		if (oHeaderHScrollbar) {
			var sDivId = null;
			if (oCrosstab.hasDimensionHeaderArea()) {
				sDivId = oCrosstab.getId() + "_dimHeaderArea_container";
			} else if (oCrosstab.hasRowHeaderArea()) {
				sDivId = oCrosstab.getId() + "_rowHeaderArea_container";
			}
			if (sDivId) {
				var oJqDiv = $('#' + sDivId);
				oHeaderHScrollbar.setContentSize(oJqDiv.outerWidth() + "px");
				oHeaderHScrollbar.rerender();
			}
		}
	};
	
	this.adjustHorizontalHeaderScrollbarContainerSize = function() {	
		var oHHeaderScrollbar = oCrosstab.getHorizontalHeaderScrollbar();
		if (oHHeaderScrollbar) {
			var oTd = $('#' + oCrosstab.getId() + "_hScrollTableCell");
			if (oTd.length > 0) {
				var iWidthCorrection = parseInt(oTd.css("border-right-width"), 10)
						+ parseInt(oTd.css("border-left-width"), 10);
				oHHeaderScrollbar.setSize((parseInt(oHHeaderScrollbar.getSize(), 10) - iWidthCorrection) + "px");
				oHHeaderScrollbar.rerender();
			}
		}
	};

	this.setScrollbarStepsInPixelMode = function () {
		var oVScrollbar = oCrosstab.getVScrollbar();
		var oHScrollbar = oCrosstab.getHScrollbar();
		var oDomDataArea = $('#' + oCrosstab.getId() + "_dataArea_container");
		if (oVScrollbar) {
			var iHeight = 0;
			if(!oCrosstab.hasDataArea()){
				//Can happen in scenarios where there is no data area, but only a header area.
				//See customer message 0120025231 0000377482 2013
				var oDomRowHeaderArea = $('#' + oCrosstab.getId() + "_rowHeaderArea_container");
				iHeight = oDomRowHeaderArea.outerHeight();
			} else {
				iHeight = oDomDataArea.outerHeight();
			}
			oVScrollbar.setContentSize(iHeight + "px");
			oVScrollbar.rerender();
		}
		if (oHScrollbar) {
			var iWidth = 0;
			if(!oCrosstab.hasDataArea()){
				//Can happen in scenarios where there is no data area, but only a header area.
				//See customer message 0120025231 0000377482 2013
				var oDomColHeaderArea = $('#' + oCrosstab.getId() + "_colHeaderArea_container");
				iWidth = oDomColHeaderArea.outerWidth();
			} else {
				iWidth = oDomDataArea.outerWidth();
			}
			oHScrollbar.setContentSize(iWidth + "px");
			oHScrollbar.rerender();
		}
	};

	this.setScrollbarStepsInStepMode = function () {
		var oRenderSizeDivSize = oMeasuring.getRenderSizeDivSize();
		var oDataArea = oCrosstab.getDataArea();
		var oVScrollbar = oCrosstab.getVScrollbar();
		var oHScrollbar = oCrosstab.getHScrollbar();
		if (oVScrollbar) {
			var iColHeaderAreaHeight = oMeasuring.getAreaHeight(oCrosstab.getColumnHeaderArea());
			var iAvailableHeightForRows = oRenderSizeDivSize.iHeight - iColHeaderAreaHeight;
			var iRenderStartRow = oDataArea.getRenderStartRow();
			var iMaxEndRow = iRenderStartRow + oDataArea.getRenderRowCnt();
			var iRowCnt = 1;

			for ( var iRow = iRenderStartRow; iRow < iMaxEndRow; iRow++) {
				iAvailableHeightForRows -= oDataArea.getRowHeight(iRow);
				if (iAvailableHeightForRows < 0) {
					break;
				}
				iRowCnt++;
			}
			oVScrollbar.setSteps(Math.max(1, oDataArea.getRowCnt() - iRowCnt));
			oVScrollbar.rerender();
		}
		if (oHScrollbar) {
			var iRowHeaderAreaWidth = oMeasuring.getAreaWidth(oCrosstab.getRowHeaderArea());
			var iAvailableWidthForCols = oRenderSizeDivSize.iWidth - iRowHeaderAreaWidth;
			var iRenderStartCol = oDataArea.getRenderStartCol();
			var iMaxEndCol = iRenderStartCol + oDataArea.getRenderColCnt();
			var iColCnt = 1;

			for ( var iCol = iRenderStartCol; iCol < iMaxEndCol; iCol++) {
				iAvailableWidthForCols -= oDataArea.getColWidth(iCol);
				if (iAvailableWidthForCols < 0) {
					break;
				}
				iColCnt++;
			}
			oHScrollbar.setSteps(Math.max(1, oDataArea.getColCnt() - iColCnt));
			oHScrollbar.rerender();
		}
	};
	
	this.adjustHScrollbarWidth = function(iScrollPadWidth){
		var oDomLowerLeftPad = $('#'+oCrosstab.getId() + '_lowerLeftPad');
		var oDomLowerRightScrollDiv = $('#'+oCrosstab.getId() + '_lowerRight_scrollDiv');
		oDomLowerLeftPad.width(iScrollPadWidth);
		
		var oHScrollbar = oCrosstab.getHScrollbar();
		oHScrollbar.setSize(oDomLowerRightScrollDiv.outerWidth() + "px");
		oHScrollbar.rerender();
	};
	
	this.adjustVScrollbarHeight = function(iScrollPadHeight){
		var oDomUpperRightPad = $('#'+oCrosstab.getId() + '_upperRightPad');
		var oDomLowerRightScrollDiv = $('#'+oCrosstab.getId() + '_lowerRight_scrollDiv');
		oDomUpperRightPad.height(iScrollPadHeight);
		
		var oVScrollbar = oCrosstab.getVScrollbar();
		oVScrollbar.setSize(oDomLowerRightScrollDiv.outerHeight() + "px");
		oVScrollbar.rerender();
	};


};
}; // end of sap/zen/crosstab/rendering/ScrollbarRenderer.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.paging.PageManager') ) {
jQuery.sap.declare("sap.zen.crosstab.paging.PageManager");






sap.zen.crosstab.paging.PageManager = function (oCrosstab) {
	"use strict";

	var oJsonDataHandler = new sap.zen.crosstab.datahandler.JsonDataHandler(oCrosstab);
	var oCellMerger = new sap.zen.crosstab.paging.CellMerger(this);
	var oRequestHandler = null;

	var oPages = {};
	var oHeaderTileStatus = {};

	var iPageTileRowCnt = 0;
	var iPageTileColCnt = 0;
	var sRequestCommandTemplate = "";
	var iPageRowPos = 0;
	var iPageColPos = 0;
	var bHasPages = false;
	var aRemovedPages = [];

	var bResizeEventReceived = false;
	var bNewDataModel = true;

	var oReceivedData = {};
	var oAlreadyLoadedCells = {};

	function afterRenderingActions () {
		cleanupRemovedPages();
		if (bResizeEventReceived || bNewDataModel) {
			bResizeEventReceived = false;
			bNewDataModel = false;
			adjustRequestStackSize();
		}
	}

	function adjustRequestStackSize () {
		var oDataArea = oCrosstab.getDataArea();
		var iRenderedRowCnt = oDataArea.getRenderRowCnt();
		var iRenderedColCnt = oDataArea.getRenderColCnt();

		var iHPageCnt = Math.round(iRenderedColCnt / iPageTileColCnt) + 1;
		var iVPageCnt = Math.round(iRenderedRowCnt / iPageTileRowCnt) + 1;

		// heuristics
		var iMaxRequestCnt = Math.max(1, iHPageCnt * iVPageCnt * 2);

		if (oRequestHandler) {
			oRequestHandler.setMaxQueueRequests(iMaxRequestCnt);
		}
	}
	
	this.enableTimeout = function(bEnableTimeout) {
		if (oRequestHandler) {
			oRequestHandler.enableTimeout(bEnableTimeout);
		}
	};

	this.getRequestStackSize = function () {
		var iRequestStackSize = -1;
		if (oRequestHandler) {
			iRequestStackSize = oRequestHandler.getMaxQueueRequests();
		}
		return iRequestStackSize;
	};

	this.resizeEvent = function () {
		bResizeEventReceived = true;
		if (oRequestHandler) {
			oRequestHandler.unlimitStack();
		}
	};

	this.checkResponseConsistency = function (oCrosstabData) {
		if (oCrosstabData.pvcheck) {
			return true;
		}
		if (iPageTileRowCnt > 0 && iPageTileColCnt > 0) {
			return (oCrosstabData.tilerows === iPageTileRowCnt && oCrosstabData.tilecols === iPageTileColCnt);
		}
		return true;
	};

	this.receiveData = function (oCrosstabData) {
		var bIsConsistent = this.checkResponseConsistency(oCrosstabData);
		if (bIsConsistent) {
			parsePagingData(oCrosstabData);

			var oPagePos = {};
			oPagePos.iRow = iPageRowPos;
			oPagePos.iCol = iPageColPos;

			var oPage = null;
			var bIsFirstPage = isFirstPageData();
			if (bIsFirstPage) {
				oPage = this.createPage(oPagePos);
				bHasPages = true;
			} else {
				oPage = this.getPage(oPagePos);
			}
			if (oPage) {
				oPage.receiveData(oCrosstabData, bIsFirstPage);
			}

			if (oCrosstab.getPropertyBag().isDebugMode()) {
				var oPageCoordinates = oPage.getPosition();
				var sKey = oPageCoordinates.iRow + "_" + oPageCoordinates.iCol;
				oReceivedData[sKey] = {};
				oReceivedData[sKey].component = oCrosstabData;
			}
		}
	};

	function cleanupRemovedPages () {
		var i = 0;
		var oPage = null;
		var sPageKey = "";
		for (i = 0; i < aRemovedPages.length; i++) {
			oPage = aRemovedPages[i];
			if (oPage) {
				oPage.removeData();
				sPageKey = oPage.getPageKey();
				delete oPages[sPageKey];
			}
		}
		aRemovedPages = [];
	}

	oCrosstab.getRenderEngine().addAfterFinishRenderingHandler(afterRenderingActions);

	this.removeRequest = function (oPage) {
		aRemovedPages.push(oPage);
	};

	this.getRequestCommandTemplate = function () {
		return sRequestCommandTemplate;
	};

	this.removeHeaderTileRequest = function (oArea, iTileIndex, sPageKey) {
		var oTiles = oHeaderTileStatus[oArea.getAreaType()];
		if (oTiles) {
			var oTileInfo = oTiles[iTileIndex];
			if (oTileInfo) {
				var iRequestIndex = $.inArray(sPageKey, oTileInfo.aRequestingPages);
				if (iRequestIndex !== -1) {
					oTileInfo.aRequestingPages.splice(iRequestIndex, 1);
					if (oTileInfo.aRequestingPages.length === 0) {
						oTileInfo.iStatus = sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_UNKNOWN;
					}
				}
			}
		}
	};

	this.getHeaderTileInfo = function (oArea, iTileIndex) {
		return getHeaderTileInfo(oArea, iTileIndex);
	};

	this.setHeaderTileInfo = function (oArea, iTileIndex, oTileInfo) {
		var oTiles = getHeaderTiles(oArea);
		oTiles[iTileIndex] = oTileInfo;
	};

	function getHeaderTiles (oArea) {
		var oTiles = oHeaderTileStatus[oArea.getAreaType()];
		if (!oTiles) {
			oTiles = {};
			oHeaderTileStatus[oArea.getAreaType()] = oTiles;
		}
		return oTiles;
	}

	function getHeaderTileInfo (oArea, iTileIndex) {
		var oTiles = getHeaderTiles(oArea);
		var oTileInfo = oTiles[iTileIndex];
		if (!oTileInfo) {
			oTileInfo = {};
			oTileInfo.iStatus = sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_UNKNOWN;
			oTileInfo.iRefCnt = 0;
			oTiles[iTileIndex] = oTileInfo;
		}
		return oTileInfo;
	}

	this.ensureCellAvailable = function (oArea, iRow, iCol) {
		var oPage = null;
		var iTileStatus = sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_UNKNOWN;
		var bIsHeaderCell = false;
		var bRequest = false;
		var sCellKey = oArea.getAreaType() + "/" + iRow + "/" + iCol;

		// if a cell is already available (page requested and received, cell is really there) this check isn't necessary
		// anymore
		if (!oAlreadyLoadedCells[sCellKey]) {
			var oPagePos = getPagePosFromAreaCellPos(iRow, iCol, oArea);
			if (oPagePos) {
				if (oArea.isRowHeaderArea()) {
					iTileStatus = this.getHeaderTileInfo(oArea, oPagePos.iRow).iStatus;
					bIsHeaderCell = true;
				} else if (oArea.isColHeaderArea()) {
					iTileStatus = this.getHeaderTileInfo(oArea, oPagePos.iCol).iStatus;
					bIsHeaderCell = true;
				}
				oPage = this.getPage(oPagePos);
				if (bIsHeaderCell) {
					if (iTileStatus === sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_UNKNOWN) {
						bRequest = true;
					}
				} else {
					bRequest = !oPage;
				}
				if (bRequest) {
					oPage = this.createPage(oPagePos);
					oPage.provideLoadingCells(oArea);
					if (!oRequestHandler) {
						oRequestHandler = new sap.zen.crosstab.paging.RequestHandler(this);
					}
					oRequestHandler.sendPageRequest(oPage);
				} else {
					if ((oPage && oPage.getStatus() === sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADED)
							|| iTileStatus
							&& iTileStatus === sap.zen.crosstab.paging.PagingConstants.PAGE_STATUS_LOADED) {
						oAlreadyLoadedCells[sCellKey] = true;
					}
				}
			}
		}
	};

	this.reset = function () {
		oPages = {};
		oHeaderTileStatus = {};
		bHasPages = false;
		if (oRequestHandler) {
			oRequestHandler.reset();
		}
		bNewDataModel = true;
		oReceivedData = {};
		oAlreadyLoadedCells = {};
		iPageTileRowCnt = 0;
		iPageTileColCnt = 0;
	};

	this.getDataHandler = function () {
		return oJsonDataHandler;
	};

	this.getTileRowCnt = function () {
		return iPageTileRowCnt;
	};

	this.getTileColCnt = function () {
		return iPageTileColCnt;
	};

	this.getPageKeyFromPos = function (oPagePos) {
		return this.getPageKeyFromRowCol(oPagePos.iRow, oPagePos.iCol);
	};

	this.getPageKeyFromRowCol = function (iRow, iCol) {
		return iRow + "/" + iCol;
	};

	this.getPagePosFromKey = function (sKey) {
		var oPagePos = {};
		var aRowCol = sKey.split("/");
		oPagePos.iRow = parseInt(aRowCol[0], 10);
		oPagePos.iCol = parseInt(aRowCol[1], 10);
		return oPagePos;
	};

	this.getCrosstab = function () {
		return oCrosstab;
	};

	this.createPage = function (oPagePos) {
		var oPage = null;
		var sPageKey = this.getPageKeyFromPos(oPagePos);
		if (sPageKey) {
			oPage = new sap.zen.crosstab.paging.Page(oPagePos, sPageKey, this);
			oPages[sPageKey] = oPage;
		}
		return oPage;
	};

	this.getPage = function (oPagePos) {
		return this.getPageFromRowCol(oPagePos.iRow, oPagePos.iCol);
	};

	this.getPageFromRowCol = function (iRow, iCol) {
		var oPage = null;
		var sPageKey = this.getPageKeyFromRowCol(iRow, iCol);
		if (sPageKey) {
			oPage = oPages[sPageKey];
		}
		return oPage;
	};

	this.getCellMerger = function () {
		return oCellMerger;
	};

	function isFirstPageData () {
		return (iPageRowPos === 0 && iPageColPos === 0) || !bHasPages;
	}

	function parsePagingData (oJsonTableControl) {
		// max Page (Tile) size
		iPageTileRowCnt = oJsonTableControl.tilerows;
		iPageTileColCnt = oJsonTableControl.tilecols;

		sRequestCommandTemplate = oJsonTableControl.scrollaction;

		// coordinate of the page itself
		iPageRowPos = oJsonTableControl.v_pos;
		if (iPageRowPos) {
			iPageRowPos = Math.floor(iPageRowPos / iPageTileRowCnt);
		} else {
			iPageRowPos = 0;
		}
		iPageColPos = oJsonTableControl.h_pos;
		if (iPageColPos) {
			iPageColPos = Math.floor(iPageColPos / iPageTileColCnt);
		} else {
			iPageColPos = 0;
		}
	}

	function getPagePosFromAreaCellPos (iCellRow, iCellCol, oArea) {
		// Contract with runtime:
		// Dimension header, row header columns and column header rows
		// can never span across multiple pages
		var oPagePos = {
			iRow: 0,
			iCol: 0
		};
		// For requesting RowHeaderArea and ColHeaderArea tiles:
		// Make sure that a page gets requested that can actually be used, i. e. that
		// is based on the renderStartRow for ColHeaderArea and on renderStartCol for RowHeaderArea.
		// This way, we can save quite some requests which not only cost performance but might lead to
		// crucial requests being removed from the request queue.
		if (oArea.isRowHeaderArea()) {
			oPagePos.iRow = Math.floor(iCellRow / iPageTileRowCnt);
			oPagePos.iCol = Math.floor(oCrosstab.getColumnHeaderArea().getRenderStartCol() / iPageTileColCnt);
		} else if (oArea.isColHeaderArea()) {
			oPagePos.iRow = Math.floor(oCrosstab.getRowHeaderArea().getRenderStartRow() / iPageTileRowCnt);
			oPagePos.iCol = Math.floor(iCellCol / iPageTileColCnt);
		} else if (oArea.isDataArea()) {
			oPagePos.iRow = Math.floor(iCellRow / iPageTileRowCnt);
			oPagePos.iCol = Math.floor(iCellCol / iPageTileColCnt);
		}
		return oPagePos;
	}

	this.getReceivedPages = function () {
		return JSON.stringify(oReceivedData);
	};

};
}; // end of sap/zen/crosstab/paging/PageManager.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.rendering.CrossRequestManager') ) {
jQuery.sap.declare("sap.zen.crosstab.rendering.CrossRequestManager");






sap.zen.crosstab.rendering.CrossRequestManager = function (oCrosstab, oRenderEngine) {
	"use strict";

	var oScrollManager = null;
	var oHeaderScrollManager = null;
	var iHScrollPos = 0;
	var sHScrollAction = "";
	var iVScrollPos = 0;
	var sVScrollAction = "";
	var bHasSavedInfo = false;
	var aColHeaderSavedColWidths = null;
	var aDimHeaderSavedColWidths = null;
	var aDataAreaSavedColWidths = null;
	var aRowHeaderSavedColWidths = null;
	var bRequestIsHierarchyDirectionDown = false;
	var sRequestRootCause = "";
	var sRequestHierarchyAction = "";
	var iTotalRowCnt = 0;
	var iTotalColCnt = 0;
	var iDataAreaHeight = 0;
	var iDataWidth = 0;
	var bAdjustHPixelPos = false;
	var bAdjustVPixelPos = false;
	var bRootCauseHandled = false;
	var bHScrolledToEnd = undefined;
	var bVScrolledToEnd = undefined;
	var oHeaderScrollData = null;
	var oDataArea = oCrosstab.getDataArea();
	var oRowHeaderArea = oCrosstab.getRowHeaderArea();
	var oColHeaderArea = oCrosstab.getColumnHeaderArea();
	var oDimHeaderArea = oCrosstab.getDimensionHeaderArea();

	this.reset = function () {
		if (oScrollManager) {
			oScrollManager.destroy();
		}
		oScrollManager = null;
		if (oHeaderScrollManager) {
			oHeaderScrollManager.destroy();
		}
		oHeaderScrollManager = null;
	};

	this.clearSavedData = function () {
		oScrollManager = null;
		oHeaderScrollManager = null;
		iHScrollPos = 0;
		sHScrollAction = "";
		iVScrollPos = 0;
		sVScrollAction = "";
		bHasSavedInfo = false;
		aColHeaderSavedColWidths = null;
		aDimHeaderSavedColWidths = null;
		aDataAreaSavedColWidths = null;
		aRowHeaderSavedColWidths = null;
		bRequestIsHierarchyDirectionDown = false;
		sRequestRootCause = "";
		sRequestHierarchyAction = "";
		iTotalRowCnt = 0;
		iTotalColCnt = 0;
		oHeaderScrollData = null;
	};

	this.saveTableDimensions = function () {
		if (oCrosstab.getPropertyBag().isPixelScrolling()) {
			var oDomDataArea = $('#' + oCrosstab.getId() + "_dataArea");
			iDataAreaHeight = oDomDataArea.outerHeight();
			iDataWidth = oDomDataArea.outerWidth();
		}
		iTotalRowCnt = oCrosstab.getTotalRows();
		iTotalColCnt = oCrosstab.getTotalCols();
	};

	function checkHierarchyAction (iDeltaBeforeMinusAfter) {
		if (sRequestHierarchyAction === "expanded") {
			return (iDeltaBeforeMinusAfter < 0);
		} else if (sRequestHierarchyAction === "collapsed") {
			return (iDeltaBeforeMinusAfter > 0);
		} else {
			return false;
		}
	}

	this.handleRootCause = function () {
		var iOldVScrollPos = iVScrollPos;
		var iOldHScrollPos = iHScrollPos;
		var bOldHScrolledToEnd = bHScrolledToEnd;
		var bOldVScrolledToEnd = bVScrolledToEnd;
		
		if (sRequestRootCause === "plan") {
			if (sHScrollAction !== "plan" && sVScrollAction !== "plan") {
				this.clearSavedData();
			}
		} else if (sRequestRootCause === "sorting") {
			if (sHScrollAction !== "sort") {
				this.clearSavedData();
			} else {
				var oSelectedCellData = oCrosstab.getSelectedCellData();
				if (oSelectedCellData
						&& oSelectedCellData.sAreaType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_ROW_HEADER_AREA) {
					iVScrollPos = Math.max(0, (oSelectedCellData.iRow - 1));
					oRenderEngine.setDeferredVScrollPosDetermination(oCrosstab.getPropertyBag().isPixelScrolling());
				} else {
					iVScrollPos = 0;
					bVScrolledToEnd = false;
				}
			}
		} else if (sRequestRootCause === "hierarchy") {
			if (sHScrollAction === "hier" && sVScrollAction === "hier") {
				var iRowDelta = iTotalRowCnt - oCrosstab.getTotalRows();
				var iColDelta = iTotalColCnt - oCrosstab.getTotalCols();
				if (iRowDelta !== 0) {
					if (checkHierarchyAction(iRowDelta)) {
						if (!bRequestIsHierarchyDirectionDown) {
							if (oCrosstab.getPropertyBag().isPixelScrolling()) {
								bAdjustVPixelPos = true;
							} else {
								iVScrollPos = Math.max(0, iVScrollPos - iRowDelta);
							}
						}
					} else {
						this.clearSavedData();
					}
				} else if (iColDelta !== 0) {
					if (checkHierarchyAction(iColDelta)) {
						if (!bRequestIsHierarchyDirectionDown) {
							if (oCrosstab.getPropertyBag().isPixelScrolling()) {
								bAdjustHPixelPos = true;
							} else {
								iHScrollPos = Math.max(0, iHScrollPos - iColDelta);
							}
						}
					} else {
						this.clearSavedData();
					}
				}

			} else {
				this.clearSavedData();
			}
		}
		// cleanup
		bRequestIsHierarchyDirectionDown = false;
		sRequestRootCause = "";
		sRequestHierarchyAction = "";
		iTotalRowCnt = 0;
		iTotalColCnt = 0;
		
		// This doesn't need to be done for header scrolling since the scrollpos based on a rootcause will never get changed
		if (iOldHScrollPos !== iHScrollPos || iOldVScrollPos !== iVScrollPos || bOldHScrolledToEnd !== bHScrolledToEnd || bOldVScrolledToEnd !== bVScrolledToEnd) {
			oCrosstab.getUtils().sendScrollPosUpdate(iHScrollPos, bHScrolledToEnd, iVScrollPos, bVScrolledToEnd);
		}
		
		bRootCauseHandled = true;
	};

	this.getHPixelScrollPosAfterRendering = function () {
		var iPos = -1;
		if (oCrosstab.getPropertyBag().isPixelScrolling()) {
			var oDomDataArea = $('#' + oCrosstab.getId() + "_dataArea");
			if (bAdjustHPixelPos) {
				var iHDelta = oDomDataArea.outerWidth() - iDataWidth;
				iPos = iHScrollPos + iHDelta;
				bAdjustHPixelPos = false;
			}
		}
		return iPos;
	};

	this.getVPixelScrollPosAfterRendering = function () {
		var iPos = -1;
		if (oCrosstab.getPropertyBag().isPixelScrolling()) {
			var oDomDataArea = $('#' + oCrosstab.getId() + "_dataArea");
			if (bAdjustVPixelPos) {
				var iVDelta = oDomDataArea.outerHeight() - iDataAreaHeight;
				iPos = iVScrollPos + iVDelta;
				bAdjustVPixelPos = false;
			}
		}
		return iPos;
	};

	this.setRootCause = function (sRootCause) {
		sRequestRootCause = sRootCause;
	};

	this.setHierarchyAction = function (sHierarchyAction) {
		sRequestHierarchyAction = sHierarchyAction;
	};

	this.setIsHierarchyDirectionDown = function (bIsHierarchyDirectionDown) {
		bRequestIsHierarchyDirectionDown = bIsHierarchyDirectionDown;
	};

	this.getScrollManager = function () {
		if (!oScrollManager) {
			if (oCrosstab.getPropertyBag().isPixelScrolling()) {
				oScrollManager = new sap.zen.crosstab.rendering.PixelScrollManager(oCrosstab, oRenderEngine);
			} else {
				oScrollManager = new sap.zen.crosstab.rendering.ScrollManager(oCrosstab, oRenderEngine);
			}
			if (bHasSavedInfo) {
				if (sHScrollAction) {
					oScrollManager.setHScrollPos(iHScrollPos);
				}
				if (sVScrollAction) {
					oScrollManager.setVScrollPos(iVScrollPos);
				}
			}
		}
		return oScrollManager;
	};
	
	this.getHeaderScrollManager = function() {
		if (!oHeaderScrollManager) {
			oHeaderScrollManager = new sap.zen.crosstab.rendering.HeaderScrollManager(oCrosstab, oRenderEngine);
			if (bHasSavedInfo) {
				oHeaderScrollManager.setHScrollData(oHeaderScrollData);
			}
		}
		return oHeaderScrollManager;
	};

	this.saveHScrollInfo = function (spAction, bResetVPosition) {
		if (oCrosstab.getPropertyBag().isPixelScrolling()) {
			var oDomLowerRightScrollDiv = $('#' + oCrosstab.getId() + "_lowerRight_scrollDiv");
			iHScrollPos = 0;
			if (oDomLowerRightScrollDiv && oDomLowerRightScrollDiv.length > 0) {
				iHScrollPos = oDomLowerRightScrollDiv.scrollLeft();
			}
		} else {
			iHScrollPos = oCrosstab.getColumnHeaderArea().getRenderStartCol();
			if (oScrollManager && oScrollManager.isHScrolledToEnd()) {
				iHScrollPos++;
				bHScrolledToEnd = true;
			}
		}
		if (bResetVPosition) {
			iVScrollPos = 0;
		}
		sHScrollAction = spAction;
		bHasSavedInfo = true;
	};
	
	this.saveVScrollInfo = function (spAction, bResetHPosition) {
		if (oCrosstab.getPropertyBag().isPixelScrolling()) {
			var oDomLowerRightScrollDiv = $('#' + oCrosstab.getId() + "_lowerRight_scrollDiv");
			iVScrollPos = 0;
			if (oDomLowerRightScrollDiv && oDomLowerRightScrollDiv.length > 0) {
				iVScrollPos = oDomLowerRightScrollDiv.scrollTop();
			}
		} else {
			iVScrollPos = oCrosstab.getRowHeaderArea().getRenderStartRow();
			if (oScrollManager && oScrollManager.isVScrolledToEnd()) {
				iVScrollPos++;
				bVScrolledToEnd = true;
			}
		}
		if (bResetHPosition) {
			iHScrollPos = 0;
		}
		sVScrollAction = spAction;
		bHasSavedInfo = true;
	};

	this.saveSDKVScrollInfo = function (piVScrollPos, psVScrollAction) {
		iVScrollPos = piVScrollPos;
		bHasSavedInfo = true;
		sVScrollAction = psVScrollAction;
	};

	this.saveSDKHScrollInfo = function (piHScrollPos, psHScrollAction) {
		iHScrollPos = piHScrollPos;
		bHasSavedInfo = true;
		sHScrollAction = psHScrollAction;
	};

	this.savedInfoHandled = function () {
		if (bRootCauseHandled === true) {
			iHScrollPos = 0;
			sHScrollAction = "";
			iVScrollPos = 0;
			sVScrollAction = "";
			bHasSavedInfo = false;
			aColHeaderSavedColWidths = null;
			aDimHeaderSavedColWidths = null;
			aDataAreaSavedColWidths = null;
			aRowHeaderSavedColWidths = null;
			bRootCauseHandled = false;
			bHScrolledToEnd = undefined;
			bVScrolledToEnd = undefined;
			oHeaderScrollData = null;
		}
	};

	this.hasSavedInfo = function () {
		return bHasSavedInfo;
	};

	this.getSavedHScrollInfo = function () {
		var oHScrollInfo = null;
		if (sHScrollAction) {
			oHScrollInfo = {};
			oHScrollInfo.iPos = iHScrollPos;
			oHScrollInfo.sAction = sHScrollAction;
			oHScrollInfo.bScrolledToEnd = bHScrolledToEnd;
		}
		return oHScrollInfo;
	};

	this.getSavedVScrollInfo = function () {
		var oVScrollInfo = null;
		if (sVScrollAction) {
			oVScrollInfo = {};
			oVScrollInfo.iPos = iVScrollPos;
			oVScrollInfo.sAction = sVScrollAction;
			oVScrollInfo.bScrolledToEnd = bVScrolledToEnd;
		}
		return oVScrollInfo;
	};

	this.saveColWidths = function () {
		var oColHeaderArea = oCrosstab.getColumnHeaderArea();
		var oDimHeaderArea = oCrosstab.getDimensionHeaderArea();
		var oRowHeaderArea = oCrosstab.getRowHeaderArea();
		var oDataArea = oCrosstab.getDataArea();
		if (!oColHeaderArea.hasLoadingPages()) {
			aColHeaderSavedColWidths = oColHeaderArea.getColWidths();
			bHasSavedInfo = true;
		}
		if (!oDataArea.hasLoadingPages()) {
			aDataAreaSavedColWidths = oDataArea.getColWidths();
			bHasSavedInfo = true;
		}
		if (!oDimHeaderArea.hasLoadingPages()) {
			aDimHeaderSavedColWidths = oDimHeaderArea.getColWidths();
			bHasSavedInfo = true;
		}
		if (!oRowHeaderArea.hasLoadingPages()) {
			aRowHeaderSavedColWidths = oRowHeaderArea.getColWidths();
			bHasSavedInfo = true;
		}
	};

	this.restoreColWidths = function () {
		var oColHeaderArea = oCrosstab.getColumnHeaderArea();
		var oDimHeaderArea = oCrosstab.getDimensionHeaderArea();
		var oRowHeaderArea = oCrosstab.getRowHeaderArea();
		var oDataArea = oCrosstab.getDataArea();

		if (aColHeaderSavedColWidths) {
			oColHeaderArea.setColWidths(aColHeaderSavedColWidths);
			aColHeaderSavedColWidths = null;
		}
		if (aDataAreaSavedColWidths) {
			oDataArea.setColWidths(aDataAreaSavedColWidths);
			aDataAreaSavedColWidths = null;
		}
		if (aDimHeaderSavedColWidths) {
			oDimHeaderArea.setColWidths(aDimHeaderSavedColWidths);
			aDimHeaderSavedColWidths = null;
		}
		if (aRowHeaderSavedColWidths) {
			oRowHeaderArea.setColWidths(aRowHeaderSavedColWidths);
			aRowHeaderSavedColWidths = null;
		}
	};
	
	function determineCheckedScrollValues(piHScrollPos, pbHScrolledToEnd, piVScrollPos, pbVScrolledToEnd) {
		var oCheckedValues = {
				iHScrollPos : piHScrollPos,
				bHScrolledToEnd : pbHScrolledToEnd,
				iVScrollPos : piVScrollPos,
				bVScrolledToEnd : pbVScrolledToEnd
		};
			
		if (oCheckedValues.iHScrollPos < 0) {
			oCheckedValues.iHScrollPos = 0;
			oCheckedValues.bHScrolledToEnd = false;
		}
		
		if (oCheckedValues.iVScrollPos < 0) {
			oCheckedValues.iVScrollPos = 0;
			oCheckedValues.bVScrolledToEnd = false;
		}
		
		var oArea = oDataArea ? oDataArea : oColHeaderArea;
		var iLastColPos = oArea.getColCnt() - 1;
		
		if (oCheckedValues.iHScrollPos > iLastColPos) {
			oCheckedValues.iHScrollPos = 0;
			oCheckedValues.bHScrolledToEnd = false;
		}
		
		oArea = oDataArea ? oDataArea : oRowHeaderArea;
		var iLastRowPos = oArea.getRowCnt() - 1;
		
		if (oCheckedValues.iVScrollPos > iLastRowPos) {
			oCheckedValues.iVScrollPos = 0;
			oCheckedValues.bVScrolledToEnd = false;
		}
		
		
		if ((oCheckedValues.iHScrollPos !== piHScrollPos) || (oCheckedValues.iVScrollPos !== piVScrollPos)) {
			// reset scroll position on server
			oCrosstab.getUtils().sendScrollPosUpdate(0, false, 0, false);
		}
		return oCheckedValues;
	}
	
	this.setScrollData = function(piHScrollPos, pbHScrolledToEnd, piVScrollPos, pbVScrolledToEnd) {
		var oCheckedValues = determineCheckedScrollValues(piHScrollPos, pbHScrolledToEnd, piVScrollPos, pbVScrolledToEnd);
		iHScrollPos = oCheckedValues.iHScrollPos;
		iVScrollPos = oCheckedValues.iVScrollPos;
		bHScrolledToEnd = oCheckedValues.bHScrolledToEnd;
		bVScrolledToEnd = oCheckedValues.bVScrolledToEnd;
		bHasSavedInfo = true;
		sHScrollAction = "GEN";
		sVScrollAction = "GEN";
	};
	
	function determineCheckedHeaderScrollValues(poHeaderScrollData) {
		var oCheckedData = poHeaderScrollData;
		if (oCheckedData.iHPos < 0) {
			oCheckedData.iHPos = 0;
		}
		
		// header scrolling uses pixel scrolling only. If the headers change due to e. g. a context menu action
		// so that the scrollpos is bigger than the div size, browsers should handle this gracefully, so currently
		// there is no need to adapt the pixel HPOS
		
		if (oCheckedData.iHPos !== poHeaderScrollData.iHPos) {
			oCrosstab.getUtils().sendScrollPosUpdate(oCheckedData.iHPos, undefined, undefined, undefined, true);
		}
		return oCheckedData;
	}
	
	this.setHeaderScrollData = function(poHeaderScrollData) {
		var oCheckedData = determineCheckedHeaderScrollValues(poHeaderScrollData);
		bHasSavedInfo = true;
		oHeaderScrollData = oCheckedData;
	};
	
	this.getHeaderScrollData = function() {
		return oHeaderScrollData;
	};
};
}; // end of sap/zen/crosstab/rendering/CrossRequestManager.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.rendering.RenderEngine') ) {
jQuery.sap.declare("sap.zen.crosstab.rendering.RenderEngine");







sap.zen.crosstab.rendering.RenderEngine = function (oCrosstab) {
	"use strict";
	var oColHeaderArea = oCrosstab.getColumnHeaderArea();
	var oDimensionHeaderArea = oCrosstab.getDimensionHeaderArea();
	var oRowHeaderArea = oCrosstab.getRowHeaderArea();
	var oDataArea = oCrosstab.getDataArea();
	var oRenderManager = null;
	var oScrollbarRenderer = null;
	var oResizeDiv = null;
	var oTableDiv = null;
	var oResizeFrame = null;
	var sLoadingTimerId = "";
	var bIsLoadingAnimationVisible = false;
	var aNewScrollbarEventHandlers = [];

	var oDomElementProvider = new sap.zen.crosstab.rendering.DomElementProvider();
	var oMeasuring = new sap.zen.crosstab.utils.Measuring(oCrosstab, oDomElementProvider);

	var oCrossRequestManager = new sap.zen.crosstab.rendering.CrossRequestManager(oCrosstab, this);
	var oScrollManager = null;
	var oHeaderScrollManager = null;
	var bIsIE8 = false;

	var bDeferredVScrollPosDetermination = false;

	var oScrollbarVisibility = {
		bHasHScrollbar: false,
		bHasVScrollbar: false,
		bHasHHeaderScrollbar: false
	};

	var aAfterFinishRenderingHandlers = [];

	var bAdjustFrameDivs = true;
	
	var bDivSizesValid = false;
	
	var iRenderSizeDivOrigBottom = -1;
	
	this.isIE8Mode = function () {
		return bIsIE8;
	};
	
	this.renderResizeOutline = function () {
		if ((oCrosstab.getWidth() === "auto" && oCrosstab.hResize())
				|| (oCrosstab.getHeight() === "auto" && oCrosstab.vResize())) {
			var sCrosstabId = oCrosstab.getId();
			var sDivId = sCrosstabId + "_resizeDiv";
			var sFrameId = sCrosstabId + "_resizeFrame";
			var iTopBorder = 0;
			var iLeftBorder = 0;

			oTableDiv = oDomElementProvider.getElement(sCrosstabId);
			if (oTableDiv && oTableDiv[0]) {

				oTableDiv.css("overflow", "hidden");
				var oTableDivData = oMeasuring.getTableDivBordersAndPadding();
				iTopBorder = oTableDivData.borders.iTopBorderWidth;
				iLeftBorder = oTableDivData.borders.iLeftBorderWidth;

				oResizeDiv = jQuery.sap.byId(sDivId);
				oResizeDiv.css("visibility", "visible");
				oResizeDiv.css("top", -iTopBorder + "px");
				oResizeDiv.css("left", -iLeftBorder + "px");

				oResizeFrame = jQuery.sap.byId(sFrameId);
				oResizeFrame.css("width", oCrosstab.getIntWidth() + "px");
				oResizeFrame.css("height", oCrosstab.getIntHeight() + "px");
				oResizeFrame.css("top", -iTopBorder + "px");
				oResizeFrame.css("left", -iLeftBorder + "px");
				oResizeFrame.css("visibility", "visible");

				var oHScrollTab = oTableDiv.find("#" + oCrosstab.getId() + "_hScrollTab");
				if (oHScrollTab && oHScrollTab.length > 0) {
					oHScrollTab.appendTo(oResizeFrame);
					oHScrollTab.css("position", "absolute");
					var iToolbarHeight = oCrosstab.getPropertyBag().getToolbarHeight();
					oHScrollTab.css("bottom", iToolbarHeight + "px");
					oHScrollTab.css("left", "0px");
				}

				var oVScrollTab = oTableDiv.find("#" + oCrosstab.getId() + "_vScrollTab");
				if (oVScrollTab && oVScrollTab.length > 0) {
					oVScrollTab.appendTo(oResizeFrame);
					oVScrollTab.css("position", "absolute");
					oVScrollTab.css("top", "0px");
					oVScrollTab.css("right", "0px");
				}

				if (oCrosstab.getPropertyBag().hasToolbar()) {
					var oToolbar = oTableDiv.find("#" + oCrosstab.getId() + "_toolbar");
					if (oToolbar && oToolbar.length > 0) {
						oToolbar.appendTo(oResizeFrame);
						oToolbar.css("position", "absolute");
						oToolbar.css("left", "0px");
						oToolbar.css("bottom", "0px");
					}
				}

			}
		}
	};

	this.removeResizeOutline = function () {
		if (oResizeDiv) {
			oResizeDiv.css("visibility", "hidden");
			oResizeDiv = null;
		}
		if (oTableDiv) {
			oTableDiv.css("overflow", "hidden");
			oTableDiv = null;
		}
		if (oResizeFrame) {
			oResizeFrame.css("visibility", "hidden");
			oResizeFrame = null;
		}
	};

	this.addAfterFinishRenderingHandler = function (fHandler) {
		if ($.inArray(fHandler, aAfterFinishRenderingHandlers) === -1) {
			aAfterFinishRenderingHandlers.push(fHandler);
		}
	};

	this.removeAfterFinishRenderingHandler = function (fHandler) {
		var iIndex = $.inArray(fHandler, aAfterFinishRenderingHandlers);
		if (iIndex !== -1) {
			aAfterFinishRenderingHandlers.splice(iIndex, 1);
		}
	};

	this.removeAllAfterFinishRenderingHandlers = function () {
		aAfterFinishRenderingHandlers = [];
	};

	this.renderCell = function (oArea, iRow, iCol) {
		var oCell = oArea.getCell(iRow, iCol);
		if (oCell) {
			oRenderManager.renderControl(oCell);
		}
		return oCell;
	};

	this.renderArea = function (oArea, iStartRow, iRowCnt, iStartCol, iColCnt, sRowStyle) {
		if (!iStartRow) {
			iStartRow = 0;
		}
		if (!iRowCnt) {
			iRowCnt = 0;
		}
		if (!iStartCol) {
			iStartCol = 0;
		}
		if (!iColCnt) {
			iColCnt = 0;
		}

		var iEndRow = iStartRow + iRowCnt;
		var iEndCol = iStartCol + iColCnt;

		var iRow = 0;
		var iCol = 0;

		for (iRow = iStartRow; iRow < iEndRow; iRow++) {
			if (sRowStyle) {
				oRenderManager.write("<tr");
				oRenderManager.writeAttribute("class", sRowStyle);
				oRenderManager.write(">");
			} else {
				oRenderManager.write("<tr>");
			}
			for (iCol = iStartCol; iCol < iEndCol; iCol++) {
				this.renderCell(oArea, iRow, iCol);
			}
			oRenderManager.write("</tr>");
		}
	};

	this.setDeferredVScrollPosDetermination = function (bDeferredVScrollPosDet) {
		bDeferredVScrollPosDetermination = bDeferredVScrollPosDet;
	};

	function determineIsIE8 () {
		bIsIE8 = false;
		if ($.browser.msie) {
			if ($.browser.version.substring(0, 2) === "8.") {
				bIsIE8 = true;
			}
			if ($.browser.fVersion && $.browser.fVersion === 8) {
				// a browser newer than IE8 but run in IE8 document mode
				bIsIE8 = true;
			}
			// alert("Version: " + $.browser.version + "\nfVersion: " + $.browser.fVersion);
		}
	}

	this.beginRendering = function () {
		determineIsIE8();
		oRenderManager = sap.ui.getCore().createRenderManager();
		initDomElementProvider();
		oTableDiv = oDomElementProvider.getElement(oCrosstab.getId());
		if (!oCrosstab.getPropertyBag().isDebugMode()) {
			oTableDiv.css("visibility", "hidden");
		}

		if (oCrossRequestManager.hasSavedInfo()) {
			var oHScrollInfo = oCrossRequestManager.getSavedHScrollInfo();
			if (oHScrollInfo) {
				oColHeaderArea.setRenderStartCol(oHScrollInfo.iPos);
				oCrossRequestManager.restoreColWidths();
			}
			var oVScrollInfo = oCrossRequestManager.getSavedVScrollInfo();
			if (oVScrollInfo) {
				oRowHeaderArea.setRenderStartRow(oVScrollInfo.iPos);
			}
		}
	};

	this.finishRendering = function () {
		this.showLoadingVisualization();

		var i = 0;
		var fHandler = null;
		if (oRenderManager) {
			oRenderManager.destroy();
		}
		oRenderManager = null;

		oMeasuring.reset();

		oCrosstab.highlightCells();
		oCrosstab.restoreSelection();

		oTableDiv = oDomElementProvider.getElement(oCrosstab.getId());
		oTableDiv.css("visibility", "visible");
		oCrossRequestManager.savedInfoHandled();
		oCrosstab.restoreFocusOnCell();
		this.setDivSizeValidity();
		
		for (i = 0; i < aAfterFinishRenderingHandlers.length; i++) {
			fHandler = aAfterFinishRenderingHandlers[i];
			if (fHandler) {
				fHandler();
			}
		}
	};

	this.renderDimensionHeaderArea = function () {
		var iRenderStartRow = 0;
		var iRenderRowCnt = oDimensionHeaderArea.getRowCnt();
		var iRenderStartCol = 0;
		var iRenderColCnt = oDimensionHeaderArea.getColCnt();

		this.renderArea(oDimensionHeaderArea, iRenderStartRow, iRenderRowCnt, iRenderStartCol, iRenderColCnt, "sapzencrosstab-HeaderRow");
		oDimensionHeaderArea.setRenderSize(iRenderStartRow, iRenderRowCnt, iRenderStartCol, iRenderColCnt);
		oRenderManager.flush(oDomElementProvider.getElement(oDimensionHeaderArea.getId())[0]);
	};

	this.renderDataArea = function () {
		var iRenderStartRow = 0;
		var iRenderRowCnt = 0;
		var iRenderStartCol = 0;
		var iRenderColCnt = 0;

		// Need to check if there is a data area without column header or without row header area.
		// Example: only measures in rows or columns which can typically be found with initial drilldown states
		if (oRowHeaderArea.hasContent()) {
			iRenderStartRow = oRowHeaderArea.getRenderStartRow();
			iRenderRowCnt = oRowHeaderArea.getRenderRowCnt();
		} else {
			iRenderStartRow = 0;
			iRenderRowCnt = oDataArea.getRowCnt();
		}

		if (oColHeaderArea.hasContent()) {
			iRenderStartCol = oColHeaderArea.getRenderStartCol();
			iRenderColCnt = oColHeaderArea.getRenderColCnt();
		} else {
			iRenderStartCol = 0;
			iRenderColCnt = oDataArea.getColCnt();
		}

		var iVerticalOverlap = getVerticalScrollingOverlap(iRenderStartRow, iRenderRowCnt, iRenderStartCol,
				iRenderColCnt);
		var iHorizontalOverlap = getHorizontalScrollingOverlap(iRenderStartRow, iRenderRowCnt, iRenderStartCol,
				iRenderColCnt);

		if (iVerticalOverlap) {
			removeDataAreaRows(iVerticalOverlap);
			renderRemainingDataAreaRows(iVerticalOverlap, iRenderStartRow, iRenderRowCnt, iRenderStartCol,
					iRenderColCnt, this);
		} else if (iHorizontalOverlap) {
			removeDataAreaCols(iHorizontalOverlap);
			renderRemainingDataAreaCols(iHorizontalOverlap, iRenderStartRow, iRenderRowCnt, iRenderStartCol,
					iRenderColCnt, this);
			oRenderManager.flush(oDomElementProvider.getElement(oDataArea.getId())[0]);
		} else {
			this.renderArea(oDataArea, iRenderStartRow, iRenderRowCnt, iRenderStartCol, iRenderColCnt);
			oRenderManager.flush(oDomElementProvider.getElement(oDataArea.getId())[0]);
		}

		oDataArea.setRenderSize(iRenderStartRow, iRenderRowCnt, iRenderStartCol, iRenderColCnt);
	};

	function getVerticalScrollingOverlap (iRenderStartRow, iRenderRowCnt, iRenderStartCol, iRenderColCnt) {
		if (iRenderStartCol !== oDataArea.getRenderStartCol() || iRenderColCnt !== oDataArea.getRenderColCnt()
				|| iRenderRowCnt !== oDataArea.getRenderRowCnt()) {
			return 0;
		}

		var oldEndRow = oDataArea.getRenderStartRow() + oDataArea.getRenderRowCnt();
		var newEndRow = iRenderStartRow + iRenderRowCnt;

		// positive: scrolling down
		// negative: scrolling up
		var newRows = newEndRow - oldEndRow;

		if (Math.abs(newRows) < iRenderRowCnt) {
			return newRows;
		} else {
			return 0;
		}

		return 0;
	}

	function getHorizontalScrollingOverlap (iRenderStartRow, iRenderRowCnt, iRenderStartCol, iRenderColCnt) {
		if (iRenderStartRow !== oDataArea.getRenderStartRow() || iRenderRowCnt !== oDataArea.getRenderRowCnt()
				|| iRenderColCnt !== oDataArea.getRenderColCnt()) {
			return 0;
		}

		var oldEndCol = oDataArea.getRenderStartCol() + oDataArea.getRenderColCnt();
		var newEndCol = iRenderStartCol + iRenderColCnt;

		// positive: scrolling right
		// negative: scrolling left
		var newCols = newEndCol - oldEndCol;

		if (Math.abs(newCols) < iRenderColCnt) {
			return newCols;
		} else {
			return 0;
		}

		return 0;
	}

	function removeDataAreaRows (iOverlap) {
		var oDomDataArea = $('#' + oDataArea.getId());
		var oDomDataAreaClone = oDomDataArea.clone();
		var oDomDataAreaTBody = $(oDomDataAreaClone[0].firstChild);
		var oTrs = oDomDataAreaTBody.find('> tr');

		if (iOverlap > 0) {
			// remove rows from the top
			for (var i = 0; i < iOverlap; i++) {
				$(oTrs[i]).remove();
			}

		} else {
			// remove rows from the bottom
			var iTrs = oTrs.length;
			for (var i = iTrs + iOverlap; i < iTrs; i++) {
				$(oTrs[i]).remove();
			}
		}

		oDomDataArea.replaceWith(oDomDataAreaClone);
		oDomElementProvider.addElement(oDataArea.getId(), $("#" + oDataArea.getId()));

	}

	function removeDataAreaCols (iOverlap) {
		var oDomDataArea = $('#' + oDataArea.getId());
		var oDomDataAreaClone = oDomDataArea.clone();
		var oDomDataAreaTBody = $(oDomDataAreaClone[0].firstChild);
		var oTrs = oDomDataAreaTBody.find('> tr');
		var iNumberOfRows = oTrs.length;

		if (iOverlap > 0) {
			// remove cols from left
			for (var i = 0; i < iNumberOfRows; i++) {
				var oTds = $(oTrs[i]).find("> td");
				for (var j = 0; j < iOverlap; j++) {
					$(oTds[j]).remove();
				}
			}
		} else {
			// remove cols from right
			for (var i = 0; i < iNumberOfRows; i++) {
				var oTds = $(oTrs[i]).find("> td");
				var iEndCol = oTds.length - Math.abs(iOverlap) - 1;
				for (var j = oTds.length - 1; j > iEndCol; j--) {
					$(oTds[j]).remove();
				}
			}
		}
		oDomDataArea.replaceWith(oDomDataAreaClone);
		oDomElementProvider.addElement(oDataArea.getId(), $("#" + oDataArea.getId()));
	}

	function renderRemainingDataAreaRows (iOverlap, iRenderStartRow, iRenderRowCnt, iRenderStartCol, iRenderColCnt,
			that) {
		var oDomDataAreaTBody = $($('#' + oDataArea.getId())[0].firstChild);
		var sHtml = oDomDataAreaTBody.html();
		var iNewRowCnt = Math.abs(iOverlap);
		var iNewStartRow;

		if (iOverlap > 0) {
			// the old rows need to be rendered before the new ones
			oRenderManager.write(sHtml);
			iNewStartRow = iRenderRowCnt + iRenderStartRow - iOverlap;
			that.renderArea(oDataArea, iNewStartRow, iNewRowCnt, iRenderStartCol, iRenderColCnt);
		} else {
			// the new rows need to be rendered before the old ones
			iNewStartRow = iRenderStartRow;
			that.renderArea(oDataArea, iNewStartRow, iNewRowCnt, iRenderStartCol, iRenderColCnt);
			oRenderManager.write(sHtml);
		}

		oRenderManager.flush(oDomDataAreaTBody[0]);
	}

	function renderRemainingDataAreaCols (iOverlap, iRenderStartRow, iRenderRowCnt, iRenderStartCol, iRenderColCnt,
			that) {

		var oDomDataAreaTBody = $($('#' + oDataArea.getId())[0].firstChild);
		var iNewStartCol;

		var oTrs = oDomDataAreaTBody.find("> tr");

		if (iOverlap > 0) {
			// the new cols need to be put right from the remaining ones
			iNewStartCol = iRenderStartCol + iRenderColCnt - iOverlap;
			for (var i = 0; i < oTrs.length; i++) {
				var oTr = $(oTrs[i]);
				var sInnerHtml = oTr.html();
				oRenderManager.write("<tr>");
				oRenderManager.write(sInnerHtml);

				for (var iCol = iNewStartCol; iCol < iRenderStartCol + iRenderColCnt; iCol++) {
					oRenderManager.renderControl(oDataArea.getCell(iRenderStartRow + i, iCol));
				}

				oRenderManager.write("</tr>");
			}

		} else {
			// the new cols need to be put left from the remaining ones
			iNewStartCol = iRenderStartCol;
			for (var i = 0; i < oTrs.length; i++) {
				var oTr = $(oTrs[i]);
				var sInnerHtml = oTr.html();
				oRenderManager.write("<tr>");

				for (var iCol = iNewStartCol; iCol < iNewStartCol - iOverlap; iCol++) {
					oRenderManager.renderControl(oDataArea.getCell(iRenderStartRow + i, iCol));
				}
				oRenderManager.write(sInnerHtml);
				oRenderManager.write("</tr>");
			}
		}

	}

	this.renderColHeaderArea = function (iRenderStartCol) {
		var sInnerHtml = "";
		var iStartCol = 0;
		var iColOffset = 0;
		var oDomColHeaderArea = oDomElementProvider.getElement(oColHeaderArea.getId());
		var iDimensionHeaderAreaWidth = oMeasuring.getAreaWidth(oDimensionHeaderArea);
		var iTotalWidth = 0;
		var iAvailableWidth = oCrosstab.getContentWidth() - iDimensionHeaderAreaWidth;
		var iColHeaderAreaColCnt = oColHeaderArea.getColCnt();
		var iMaxColOffset = 0;
		var iEffectiveWidth = 0;
		var iRow, iAdjustedColWidth;
		var sRowId, sRowHtml;
		var oDomRow;
		var iRowCnt = oColHeaderArea.getRowCnt();
		var iBlockRenderColCnt = 0;
		var iBlockRenderStartCol = iStartCol;
		var iBlockRenderUpperLimit;
		var sRowIdBase = oCrosstab.getId() + "_ColHeaderRow_";
		var checkFunclet = null;

		if (!oCrosstab.getPropertyBag().isDebugMode()) {
			oDomColHeaderArea.hide();
		}
		oDomColHeaderArea.html("");

		var bHScrolledToEnd = false;

		if (oCrosstab.getPropertyBag().isPixelScrolling()) {
			checkFunclet = conditionRenderAreaFull;
			iStartCol = 0;
			iMaxColOffset = iColHeaderAreaColCnt;
		} else {
			checkFunclet = conditionRenderArea;
			iStartCol = iRenderStartCol;
			iMaxColOffset = iColHeaderAreaColCnt - iStartCol;
			bHScrolledToEnd = this.isHScrolledToEnd();
		}

		while (checkFunclet(iColOffset, iMaxColOffset, iEffectiveWidth, iAvailableWidth, bHScrolledToEnd)) {
			sInnerHtml = oDomColHeaderArea[0].innerHTML;
			if (!sInnerHtml) {
				// We need to render the initial <tr>s
				prepareColHeaderRows(oDomColHeaderArea);
			}
			iBlockRenderStartCol = iStartCol + iColOffset;
			iBlockRenderColCnt = 0;
			iAdjustedColWidth = oColHeaderArea.getFinalColWidth(iBlockRenderStartCol);

			if (!iAdjustedColWidth) {
				iBlockRenderColCnt++;
			}
			while (checkFunclet(iColOffset, iMaxColOffset, iEffectiveWidth, iAvailableWidth, bHScrolledToEnd)
					&& iAdjustedColWidth) {
				// Find a block of cols that already have been measured (we can render them at once instead of measuring
				// every time)
				iColOffset++;
				iEffectiveWidth += iAdjustedColWidth;
				iAdjustedColWidth = oColHeaderArea.getFinalColWidth(iStartCol + iColOffset);
				iBlockRenderColCnt++;
			}

			iBlockRenderUpperLimit = iBlockRenderStartCol + iBlockRenderColCnt;

			for (iRow = 0; iRow < iRowCnt; iRow++) {
				sRowId = sRowIdBase + iRow;
				oDomRow = oDomColHeaderArea.find("#" + sRowId)[0];
				sRowHtml = oDomRow.innerHTML;

				oRenderManager.write("<tr id=\"" + sRowId + "\" class=\"sapzencrosstab-HeaderRow\">");
				oRenderManager.write(sRowHtml);

				for (var iBlockRenderCol = iBlockRenderStartCol; iBlockRenderCol < iBlockRenderUpperLimit; iBlockRenderCol++) {
					var oCell = null;
					if (iBlockRenderCol === iStartCol) {
						// The first cell in a row needs an adjusted span
						oCell = oColHeaderArea.getCellWithColSpan(iRow, iBlockRenderCol);
					} else {
						oCell = oColHeaderArea.getCell(iRow, iBlockRenderCol);
					}
					if (oCell) {
						oRenderManager.renderControl(oCell);
					}
				}
				oRenderManager.write("</tr>");
			}

			oRenderManager.flush(oDomColHeaderArea[0]);

			if (!oColHeaderArea.getFinalColWidth(iBlockRenderStartCol)) {
				var iNewColWidth = oDomColHeaderArea.outerWidth() - iTotalWidth;
				iEffectiveWidth += iNewColWidth;
				iColOffset++;
			}
			iTotalWidth = oDomColHeaderArea.outerWidth();
		}

		oColHeaderArea.setRenderSize(0, oColHeaderArea.getRowCnt(), iStartCol, iColOffset);
		oDomColHeaderArea.show();
	};

	function hasScrolledHorizontally () {
		return (oColHeaderArea.getRenderStartCol() > 0);
	}

	this.appendColumnsAfterResize = function () {
		var oDomColHeaderArea = oDomElementProvider.getElement(oColHeaderArea.getId());
		var iTotalWidth = 0;
		var iNewColWidth = 0;
		var iAdjustedColWidth = 0;
		if (oColHeaderArea.getRenderStartCol() > 0
				&& oColHeaderArea.getRenderStartCol() + oColHeaderArea.getRenderColCnt() === oColHeaderArea.getColCnt()) {
			// we have a scrolled state
			var iAvailableWidth = oCrosstab.getContentWidth() - oMeasuring.getAreaWidth(oDimensionHeaderArea);
			var iEffectiveWidth = oDomColHeaderArea.outerWidth();
			iTotalWidth = iEffectiveWidth;
			var bColAppended = false;
			if (!oCrosstab.getPropertyBag().isDebugMode()) {
				oDomColHeaderArea.hide();
			}
			while (iEffectiveWidth <= iAvailableWidth && oColHeaderArea.getRenderStartCol() > 0) {
				this.appendLeftCols(oColHeaderArea, 1);
				this.appendLeftCols(oDataArea, 1);
				bColAppended = true;
				iAdjustedColWidth = oColHeaderArea.getFinalColWidth(oColHeaderArea.getRenderStartCol());
				if (iAdjustedColWidth) {
					iEffectiveWidth += iAdjustedColWidth;
				} else {
					iNewColWidth = oDomColHeaderArea.outerWidth() - iTotalWidth;
					iEffectiveWidth += iNewColWidth;
				}
				iTotalWidth = oDomColHeaderArea.outerWidth();
			}
			oDomColHeaderArea.show();
			if (bColAppended) {
				this.adjustRowHeights(oDimensionHeaderArea, oColHeaderArea);
				this.adjustRowHeights(oRowHeaderArea, oDataArea);
				this.adjustColWidths(oColHeaderArea, oDataArea);
				oMeasuring.calculateRenderSize(true);
				this.calculateRenderSizeDivSize();
				if (!oScrollManager) {
					oScrollManager = oCrossRequestManager.getScrollManager();
				}
				oScrollManager.commandHScrolledToEnd();
			}
		}
		oDomColHeaderArea = oDomElementProvider.getElement(oColHeaderArea.getId());
	};

	function prepareColHeaderRows (oDomColHeaderArea) {
		var iEndRow = oColHeaderArea.getRowCnt();
		var iRow = 0;

		for (iRow = 0; iRow < iEndRow; iRow++) {
			oRenderManager.write("<tr");
			oRenderManager.writeAttribute("class", "sapzencrosstab-HeaderRow");
			oRenderManager.writeAttribute("id", oCrosstab.getId() + "_ColHeaderRow_" + iRow);
			oRenderManager.write(">");
			oRenderManager.write("</tr>");
		}

		oRenderManager.flush(oDomColHeaderArea[0]);
	}

	function renderFirstRowInRowHeader (iStartRow) {
		var iEndRow = iStartRow + 1;
		var iStartCol = 0;
		var iEndCol = iStartCol + oRowHeaderArea.getColCnt();

		var iRow = 0;
		var iCol = 0;

		for (iRow = iStartRow; iRow < iEndRow; iRow++) {
			oRenderManager.write("<tr");
			oRenderManager.writeAttribute("class", "sapzencrosstab-HeaderRow");
			oRenderManager.write(">");
			for (iCol = iStartCol; iCol < iEndCol; iCol++) {
				var oCell = oRowHeaderArea.getCellWithRowSpan(iRow, iCol);
				if (oCell) {
					oRenderManager.renderControl(oCell);
				}
			}
			oRenderManager.write("</tr>");
		}
	}

	this.isVScrolledToEnd = function () {
		var bVScrolledToEnd = false;
		if (oScrollManager) {
			bVScrolledToEnd = oScrollManager.isVScrolledToEnd();
		}
		return bVScrolledToEnd;
	};

	this.isHScrolledToEnd = function () {
		var bHScrolledToEnd = false;
		if (oScrollManager) {
			bHScrolledToEnd = oScrollManager.isHScrolledToEnd();
		}
		return bHScrolledToEnd;
	};

	function conditionRenderArea (iOffset, iMaxOffset, iSpace, iAvailableSpace, bScrolledToEnd) {
		return ((iSpace < iAvailableSpace) || bScrolledToEnd) && iOffset < iMaxOffset;
	}

	function conditionRenderAreaFull (iOffset, iMaxOffset) {
		return iOffset < iMaxOffset;
	}

	this.renderRowHeaderArea = function (iStartRow) {
		var sInnerHtml = "";
		var oDomRowHeaderArea = oDomElementProvider.getElement(oRowHeaderArea.getId());
		var iRowOffset = 0;
		var iDimensionHeaderAreaHeight = oMeasuring.getAreaHeight(oDimensionHeaderArea);
		var iTotalHeight = iDimensionHeaderAreaHeight;
		var iCrosstabHeight = oCrosstab.getContentHeight();
		var iRowHeaderAreaRowCnt = oRowHeaderArea.getRowCnt();
		var iMaxRowOffset = 0;
		var iRowsToBeRendered = 1;
		var sRowHeaderAreaId = '#' + oRowHeaderArea.getId();
		var checkFunclet = null;

		if (!oCrosstab.getPropertyBag().isDebugMode()) {
			oDomRowHeaderArea.hide();
		}
		$($(sRowHeaderAreaId)[0].firstChild).html("");
		var bVScrolledToEnd = false;

		if (oCrosstab.getPropertyBag().isPixelScrolling()) {
			checkFunclet = conditionRenderAreaFull;
			iStartRow = 0;
			iMaxRowOffset = iRowHeaderAreaRowCnt;
		} else {
			checkFunclet = conditionRenderArea;
			iMaxRowOffset = iRowHeaderAreaRowCnt - iStartRow;
			bVScrolledToEnd = this.isVScrolledToEnd();
		}

		while (checkFunclet(iRowOffset, iMaxRowOffset, iTotalHeight, iCrosstabHeight, bVScrolledToEnd)) {
			// We need to get this every time in order to reflect the changes in HTML
			sInnerHtml = $($(sRowHeaderAreaId)[0].firstChild).html() || "";
			oRenderManager.write(sInnerHtml);
			iRowsToBeRendered = 1;

			if (iRowOffset > 0) {
				if (oCrosstab.getPropertyBag().isPixelScrolling()) {
					// In pixel scrolling mode there is no need to render the rows separately
					iRowsToBeRendered = iMaxRowOffset - iRowOffset;
				} else {
					// Performance optimization: render multiple rows at once because flushing is way more expensive
					// than rendering too many rows
					if (iRowOffset < iMaxRowOffset - 2) {
						iRowsToBeRendered = 3;
					} else if (iRowOffset < iMaxRowOffset - 1) {
						iRowsToBeRendered = 2;
					}
				}
				this.renderArea(oRowHeaderArea, iStartRow + iRowOffset, iRowsToBeRendered, 0, oRowHeaderArea
						.getColCnt(), "sapzencrosstab-HeaderRow");

			} else {
				renderFirstRowInRowHeader(iStartRow);
			}
			oRenderManager.flush(oDomRowHeaderArea[0]);
			iRowOffset += iRowsToBeRendered;
			iTotalHeight = iDimensionHeaderAreaHeight + oDomRowHeaderArea.outerHeight();

		}
		oDomRowHeaderArea.show();
		oRowHeaderArea.setRenderSize(iStartRow, iRowOffset, 0, oRowHeaderArea.getColCnt());
		if (bIsIE8) {
			fixIE8RowSpanCells(oRowHeaderArea);
		}
	};

	function determineHtmlIE8RowSpan (oRowHeaderArea, iRow, iCol) {
		var iRowSpanCounter = 1;
		var oCell = oRowHeaderArea.getCell(iRow, iCol, true);
		if (!oCell) {
			while (!oCell && iRow > 0) {
				iRow--;
				iRowSpanCounter++;
				oCell = oRowHeaderArea.getCell(iRow, iCol, true);
			}
		}
		return iRowSpanCounter;
	}

	function fixIE8RowSpanCells (oRowHeaderArea) {
		var iLastRow = oRowHeaderArea.getRenderStartRow() + oRowHeaderArea.getRenderRowCnt() - 1;
		var iStartCol = oRowHeaderArea.getRenderStartCol();
		var iEndCol = iStartCol + oRowHeaderArea.getRenderColCnt() - 1;
		var iCol = 0;
		var oCell = null;
		var iHtmlRowSpan = 1;

		for (iCol = iStartCol; iCol <= iEndCol; iCol++) {
			oCell = oRowHeaderArea.getCellWithRowSpan(iLastRow, iCol);
			if (oCell) {
				iHtmlRowSpan = determineHtmlIE8RowSpan(oRowHeaderArea, iLastRow, iCol);
				oCell.setHtmlIE8RowSpan(iHtmlRowSpan);
			}
		}
	}

	this.appendRowsAfterResize = function () {
		var oDomRowHeaderArea = oDomElementProvider.getElement(oRowHeaderArea.getId());
		var iTotalHeight = 0;
		var iNewRowHeight = 0;
		var iAdjustedRowHeight = 0;
		if (oRowHeaderArea.getRenderStartRow() > 0) {
			var iAvailableHeight = oCrosstab.getContentHeight() - oMeasuring.getAreaHeight(oDimensionHeaderArea);
			var iEffectiveHeight = oDomRowHeaderArea.outerHeight();
			// init
			iTotalHeight = iEffectiveHeight;
			var bRowAppended = false;
			if (!oCrosstab.getPropertyBag().isDebugMode()) {
				oDomRowHeaderArea.hide();
			}
			while (iEffectiveHeight <= iAvailableHeight
					&& oRowHeaderArea.getRenderStartRow() > 0
					&& oRowHeaderArea.getRenderStartRow() + oRowHeaderArea.getRenderRowCnt() === oRowHeaderArea
							.getRowCnt()) {
				this.appendTopRows(oRowHeaderArea, 1);
				this.appendTopRows(oDataArea, 1);
				bRowAppended = true;
				iAdjustedRowHeight = oRowHeaderArea.getFinalRowHeight(oRowHeaderArea.getRenderStartRow());
				if (iAdjustedRowHeight) {
					iEffectiveHeight += iAdjustedRowHeight;
				} else {
					iNewRowHeight = oDomRowHeaderArea.outerHeight() - iTotalHeight;
					iEffectiveHeight += iNewRowHeight;
				}
				iTotalHeight = oDomRowHeaderArea.outerHeight();
			}
			oDomRowHeaderArea.show();
			if (bRowAppended) {
				this.adjustRowHeights(oRowHeaderArea, oDataArea);
				this.adjustColWidths(oDimensionHeaderArea, oRowHeaderArea);
				this.adjustColWidths(oColHeaderArea, oDataArea);
				oMeasuring.calculateRenderSize(true);
				this.calculateRenderSizeDivSize();
				if (!oScrollManager) {
					oScrollManager = oCrossRequestManager.getScrollManager();
				}
				oScrollManager.commandVScrolledToEnd();
			}
		}
		oDomRowHeaderArea = oDomElementProvider.getElement(oRowHeaderArea.getId());
	};

	this.setUserColWidths = function (oArea) {
		if (!oArea.hasContent() || !oArea.hasUserColWidths()) {
			return;
		}
		oArea.calculateColGranularity();
		var aAreaColWidths = oArea.measureColGranularityCells();
		oArea.applyColWidthsToGranularityCells(aAreaColWidths);

		var oDomArea = oDomElementProvider.getElement(oArea.getId());
		var oDomAreaClone = oDomArea.clone();

		setColWidths(oArea, oDomArea, oDomAreaClone, true);

		oDomArea.replaceWith(oDomAreaClone);

		oDomArea = $("#" + oArea.getId());

		forceColWidths(oArea, oDomArea, true);

		oDomElementProvider.addElement(oArea.getId(), $("#" + oArea.getId()));
		oArea.setColGranularityCalculatedAndMeasured(true);
	};

	this.adjustColWidths = function (oUpperArea, oLowerArea) {
		if (!oLowerArea.hasContent() || !oUpperArea.hasContent()) {
			if (!oUpperArea.hasUserColWidths() && !oLowerArea.hasUserColWidths()) {
				return;
			}
		}

		var oDomUpperArea = oDomElementProvider.getElement(oUpperArea.getId());
		var oDomLowerArea = oDomElementProvider.getElement(oLowerArea.getId());

		oUpperArea.calculateColGranularity();
		oLowerArea.calculateColGranularity();

		var aUpperColWidths = oUpperArea.measureColGranularityCells();
		var aLowerColWidths = oLowerArea.measureColGranularityCells();

		oUpperArea.setColGranularityCalculatedAndMeasured(false);
		oLowerArea.setColGranularityCalculatedAndMeasured(false);

		var i = 0;
		var iResultWidth;

		for (i = oUpperArea.getRenderStartCol(); i < aUpperColWidths.length; i++) {
			iResultWidth = Math.max(aUpperColWidths[i] || 0, aLowerColWidths[i] || 0);
			aUpperColWidths[i] = iResultWidth;
			aLowerColWidths[i] = iResultWidth;
		}

		// forcing of the colwidth setting needs to be done in case the respective area
		// has user col width settings. In that case, the calculatedColWidths are already set
		// and would not get set again to the adjusted values from this method.
		oUpperArea.applyColWidthsToGranularityCells(aUpperColWidths, oUpperArea.hasUserColWidths());
		oLowerArea.applyColWidthsToGranularityCells(aLowerColWidths, oLowerArea.hasUserColWidths());

		var oDomUpperAreaClone = oDomUpperArea.clone();
		var oDomLowerAreaClone = oDomLowerArea.clone();

		setColWidths(oUpperArea, oDomUpperArea, oDomUpperAreaClone);
		setColWidths(oLowerArea, oDomLowerArea, oDomLowerAreaClone);

		oDomUpperArea.replaceWith(oDomUpperAreaClone);
		oDomLowerArea.replaceWith(oDomLowerAreaClone);

		oDomUpperArea = $("#" + oUpperArea.getId());
		oDomLowerArea = $("#" + oLowerArea.getId());

		forceColWidths(oUpperArea, oDomUpperArea);
		forceColWidths(oLowerArea, oDomLowerArea);

		if (oLowerArea.isRowHeaderArea() && oCrosstab.getNewLinesCnt() > 0 && oCrosstab.getCallValueHelpCommand()) {
			postProcessRowHeaderInputCells();
		}

		oDomElementProvider.addElement(oUpperArea.getId(), $("#" + oUpperArea.getId()));
		oDomElementProvider.addElement(oLowerArea.getId(), $("#" + oLowerArea.getId()));
	};

	function postProcessInputRow (iRow, iColCnt) {
		var oJqLayoutDiv = null;
		var oJqCell = null;
		var oJqContentDiv = null;
		var sSetWidth = null;
		var iCol = 0;
		var oCell = null;
		var aColGranularity = oRowHeaderArea.getColGranularity();
		var iCellLayoutDivWidth = 0;
		var iCalculatedColWidth = aColGranularity[iCol].iWidth;
		var iPaddingLeft = 0;
		var iPaddingRight = 0;
		var iBorderLeft = 0;
		var iBorderRight = 0;
		var iIconTdWidth = 0;
		var oJqTd = null;
		var iContentDivWidth = 0;

		for (iCol = 0; iCol < iColCnt; iCol++) {
			oCell = oRowHeaderArea.getCell(iRow, iCol);
			if (oCell && oCell.isEntryEnabled()) {
				oJqCell = $('#' + oCell.getId());
				oJqLayoutDiv = $('#' + oCell.getId() + "_cellLayoutDiv");
				sSetWidth = sap.zen.crosstab.utils.Utils.getWidthFromStyle(oJqLayoutDiv);
				if (aColGranularity && aColGranularity.length > 0) {
					iCalculatedColWidth = aColGranularity[iCol].iWidth;

					iPaddingLeft = parseInt(oJqCell.css("padding-left")) || 0;
					iPaddingRight = parseInt(oJqCell.css("padding-right")) || 0;
					iBorderLeft = parseInt(oJqCell.css("border-left-width")) || 0;
					iBorderRight = parseInt(oJqCell.css("border-right-width")) || 0;

					iCellLayoutDivWidth = iCalculatedColWidth - iPaddingLeft - iPaddingRight - iBorderLeft
							- iBorderRight;
					oJqLayoutDiv.css("width", iCellLayoutDivWidth + "px");

					// fix the content div
					iIconTdWidth = $(oJqLayoutDiv.find("td")[1]).outerWidth();
					oJqTd = $(oJqLayoutDiv.find("td")[0]);
					iPaddingLeft = parseInt(oJqTd.css("padding-left")) || 0;
					iPaddingRight = parseInt(oJqTd.css("padding-right")) || 0;

					oJqContentDiv = oJqTd.find("#" + oCell.getId() + "_contentDiv");
					iContentDivWidth = iCellLayoutDivWidth - iPaddingLeft - iPaddingRight - iIconTdWidth;
					oJqContentDiv.css("width", iContentDivWidth + "px");
				}
			}
		}
	}

	function postProcessRowHeaderInputCells () {
		var iColCnt = oRowHeaderArea.getRenderColCnt();
		var iRowCnt = oRowHeaderArea.getRenderRowCnt();
		var iStartRow = oRowHeaderArea.getRenderStartRow();
		var iTotalRowCnt = oRowHeaderArea.getRowCnt();
		var iNewLinesCnt = oCrosstab.getNewLinesCnt();
		var iRow = 0;
		var i = 0;

		if (oCrosstab.isNewLinesTop()) {
			if (iStartRow < iNewLinesCnt) {
				for (iRow = iStartRow; iRow < iNewLinesCnt; iRow++) {
					postProcessInputRow(iRow, iColCnt);
				}
			}
		} else if (oCrosstab.isNewLinesBottom()) {
			var iLinesToBeFixed = (iStartRow + iRowCnt) - (iTotalRowCnt - iNewLinesCnt);
			if (iLinesToBeFixed > 0) {
				var iFixRow = iStartRow + iRowCnt - 1;
				for (i = 0; i < iLinesToBeFixed; i++) {
					postProcessInputRow(iFixRow, iColCnt);
					iFixRow--;
				}
			}
		}
	}

	this.adjustRowHeights = function (oLeftArea, oRightArea) {
		if (!oRightArea.hasContent() || !oLeftArea.hasContent()) {
			return;
		}

		var oDomLeftArea = oDomElementProvider.getElement(oLeftArea.getId());
		var oDomRightArea = oDomElementProvider.getElement(oRightArea.getId());

		oLeftArea.calculateRowGranularity();
		oRightArea.calculateRowGranularity();

		var aLeftRowHeights = oLeftArea.measureRowGranularityCells();
		var aRightRowHeights = oRightArea.measureRowGranularityCells();

		var i = 0;
		var iResultHeight;
		for (i = oLeftArea.getRenderStartRow(); i < aLeftRowHeights.length; i++) {
			iResultHeight = Math.max(aLeftRowHeights[i] || 0, aRightRowHeights[i] || 0);
			aLeftRowHeights[i] = iResultHeight;
			aRightRowHeights[i] = iResultHeight;
		}

		var aLevelCells = oRightArea.isColHeaderArea() ? oRightArea.getLevelCells() : null;
		oLeftArea.applyRowHeightsToGranularityCells(aLeftRowHeights, aLevelCells);
		oRightArea.applyRowHeightsToGranularityCells(aRightRowHeights, aLevelCells);

		var oDomLeftAreaClone = oDomLeftArea.clone();
		var oDomRightAreaClone = oDomRightArea.clone();

		setRowHeights(oLeftArea, oDomLeftArea, oDomLeftAreaClone);
		setRowHeights(oRightArea, oDomRightArea, oDomRightAreaClone);

		oDomLeftArea.replaceWith(oDomLeftAreaClone);
		oDomRightArea.replaceWith(oDomRightAreaClone);

		oDomLeftArea = $("#" + oLeftArea.getId());
		oDomRightArea = $("#" + oRightArea.getId());

		// Needs to be called AFTER the new table is attached to the DOM, because it needs to measure if the set row
		// heights have been applied
		forceRowHeights(oLeftArea, oDomLeftArea);
		forceRowHeights(oRightArea, oDomRightArea);
		
		if ($.browser.msie) {		
			postProcessRowHeightsForIE(oLeftArea);
			postProcessRowHeightsForIE(oRightArea);
		}

		oDomElementProvider.addElement(oLeftArea.getId(), $("#" + oLeftArea.getId()));
		oDomElementProvider.addElement(oRightArea.getId(), $("#" + oRightArea.getId()));
	};
	
	function postProcessRowHeightsForIE (oArea) {
		var oCellsWithLineBreakTexts = oArea.getCellsWithLineBreakTexts();
		var iRow = 0;
		var iCol = 0;
		var iRenderStartRow = 0;
		var iRenderEndRow = 0;
		var iRenderStartCol = 0;
		var iRenderEndCol = 0;
		var oCell = null;
		var oContentDiv = null;
		
		if (oCellsWithLineBreakTexts) {
			iRenderStartRow = oArea.getRenderStartRow();
			iRenderEndRow = iRenderStartRow + oArea.getRenderRowCnt() - 1;
			iRenderStartCol = oArea.getRenderStartCol();
			iRenderEndCol = iRenderStartCol + oArea.getRenderColCnt() - 1;
			
			for (iRow = iRenderStartRow; iRow <= iRenderEndRow; iRow++) {
				for (iCol = iRenderStartCol; iCol <= iRenderEndCol; iCol++) {
					oCell = oArea.getCell(iRow, iCol);
					if (oCell) {
						oCell = oCellsWithLineBreakTexts[oCell.getId()];
						if (oCell) {
							oContentDiv = $('#' + oCell.getId() + "_contentDiv");
							if (oContentDiv && oContentDiv.length > 0) {
								oContentDiv.css("height", oContentDiv.outerHeight() + "px");
							}
						}
					}
				}
			}
		}
	}

	function setColWidths (oArea, oDomArea, oDomAreaClone, bCheckFixedSetting) {
		var i = 0;
		var aCellInfo = oArea.getColGranularity();
		var oCellInfo = null;
		var oDomCell = null;
		var oDomCellClone = null;
		var oDomContentDiv = null;
		var iContentWidth = 0;

		for (i = 0; i < aCellInfo.length; i++) {

			oCellInfo = aCellInfo[i];
			if (oCellInfo) {
				if (bCheckFixedSetting === true) {
					if (!oArea.isFixedColWidthSet(oCellInfo.iCol)) {
						continue;
					}
				}
				oDomCell = oDomArea.find("#" + oCellInfo.sId);
				oDomCellClone = oDomAreaClone.find("#" + oCellInfo.sId);
				iContentWidth = calculateContentWidth(oDomCell, oCellInfo.iWidth, oArea.getCell(oCellInfo.iRow,
						oCellInfo.iCol));
				var oCell = sap.ui.getCore().getControl(oCellInfo.sId);
				if (oCell.isEntryEnabled() && oArea.isRowHeaderArea()) {
					oDomContentDiv = $(oDomCellClone.find("#" + oCellInfo.sId + "_cellLayoutDiv"));
				} else {
					oDomContentDiv = $(oDomCellClone.find("#" + oCellInfo.sId + "_contentDiv"));
				}
				oDomContentDiv.width(iContentWidth);
			}
		}
	}

	function forceColWidths (oArea, oDomArea, bCheckFixedSetting) {
		var i = 0;
		var aCellInfo = oArea.getColGranularity();
		var oCellInfo = null;
		var oDomCell = null;
		var oDomAreaClone = null;
		var iCellWidth = 0;
		var oHandledColSpanCells = {};

		for (i = 0; i < aCellInfo.length; i++) {
			oCellInfo = aCellInfo[i];
			if (oCellInfo) {
				if (bCheckFixedSetting === true) {
					if (!oArea.isFixedColWidthSet(oCellInfo.iCol)) {
						continue;
					}
				}
				oDomCell = oDomArea.find("#" + oCellInfo.sId);
				iCellWidth = oDomCell.outerWidth();
				if (iCellWidth > oCellInfo.iWidth) {
					if (!oDomAreaClone) {
						oDomAreaClone = oDomArea.clone();
					}
					forceColWidth(oArea, oDomArea, oDomAreaClone, oCellInfo, oHandledColSpanCells);
				}
			}
		}
		if (oDomAreaClone) {
			oDomArea.replaceWith(oDomAreaClone);
		}
	}

	function setRowHeights (oArea, oDomArea, oDomAreaClone) {
		var i = 0;
		var aCellInfo = oArea.getRowGranularity();
		var oCellInfo = null;
		var oDomCell = null;
		var oDomCellClone = null;
		var oDomRow = null;
		var iCalculatedRowHeight = 0;

		for (i = 0; i < aCellInfo.length; i++) {
			oCellInfo = aCellInfo[i];
			if (oCellInfo) {
				oDomCell = oDomArea.find("#" + oCellInfo.sId);
				oDomCellClone = oDomAreaClone.find("#" + oCellInfo.sId);
				oDomRow = oDomCellClone.parent();
				iCalculatedRowHeight = calculateRowHeight(oDomCell, oCellInfo.iHeight);
				oDomRow.height(iCalculatedRowHeight);
			}
		}
	}

	function forceRowHeights (oArea, oDomArea) {
		var i = 0;
		var aCellInfo = oArea.getRowGranularity();
		var oCellInfo = null;
		var oDomCell = null;
		var iCellHeight = 0;
		var oDomAreaClone = null;
		var oHandledRowSpanCells = {};

		for (i = 0; i < aCellInfo.length; i++) {
			oCellInfo = aCellInfo[i];
			if (oCellInfo) {
				oDomCell = oDomArea.find("#" + oCellInfo.sId);
				// getting the row height in IE8 with cells with rowspan > 1 present
				// returns the height of the rowspan cell, not of the row. This is a
				// bug in IE8. It's fixed in IE9 and does not occur with any other current browser.
				// Hence, we need to derive the row height from a cell height instead of the row itself.
				// iRowHeight = oDomRow.outerHeight(); // doesn't work right in IE8
				// iCellHeight = oDomCell.outerHeight();
				var oDomRow = oDomCell.parent();
				iCellHeight = oDomRow.outerHeight();
				// var iCellHeight2 = oDomCell.outerHeight();
				// if (iCellHeight2 > oCellInfo.iHeight) {
				//
				// }
				if (iCellHeight > oCellInfo.iHeight) {
					if (!oDomAreaClone) {
						oDomAreaClone = oDomArea.clone();
					}
					forceRowHeight(oArea, oDomArea, oDomAreaClone, oCellInfo, oHandledRowSpanCells);
				} 
			}
		}
		if (oDomAreaClone) {
			oDomArea.replaceWith(oDomAreaClone);
		}
	}

	function determineContentHeight (oDomCell, iCellHeight) {
		var iHeight = 0;
		if (bIsIE8) {
			// check if the cell contains a table.
			// Assumption: a cell that contains more than one
			// element will organize it in a <table> as it is
			// the case with hierarchies.
			var oTables = oDomCell.find("table");
			if (oTables === null || oTables.length === 0) {
				iHeight = calculateContentHeight(oDomCell, iCellHeight);
			}
			// for IE8, return height 0 in case we have a table in the cell,
			// otherwise we'll see misalignment due to the rowheight bugs in IE8
		} else {
			iHeight = calculateContentHeight(oDomCell, iCellHeight);
		}
		return iHeight;
	}

	function forceRowHeight (oArea, oDomArea, oDomAreaClone, oCellInfo, oHandledRowSpanCells) {
		var iEndCol = oArea.getRenderStartCol() + oArea.getRenderColCnt();
		var iCol = 0;
		var oCell = null;
		var iCellHeight = 0;
		var i = 0;
		var aCalculatedRowHeights = oArea.getCalculatedRowHeights();
		var oDomContentDiv = null;
		var oDomCell = null;
		var oDomCellClone = null;
		var iContentHeight = 0;
		var iRowSpan = 0;

		for (iCol = oArea.getRenderStartCol(); iCol < iEndCol; iCol++) {
			oCell = oArea.getCellWithColSpan(oCellInfo.iRow, iCol);
			// adjust cell with rowspans that are left of the row granularity cells.
			// algorithm symmetrical and same intention as in forceColWidth
			if (!oCell && iCol < oCellInfo.iCol) {
				oCell = oArea.getCellWithRowSpan(oCellInfo.iRow, iCol);
				if (oCell) {
					if (!oHandledRowSpanCells[oCell.getId()]) {
						oHandledRowSpanCells[oCell.getId()] = oCell;
					} else {
						oCell = null;
					}
				}
			}
			if (oCell) {
				oDomCell = oDomArea.find("#" + oCell.getId());
				oDomCellClone = oDomAreaClone.find("#" + oCell.getId());
				if (oDomCell.length > 0) {
					iCellHeight = 0;
					iRowSpan = bIsIE8 ? oCell.getHtmlIE8RowSpan() : oCell.getEffectiveRowSpan();
					for (i = 0; i < iRowSpan; i++) {
						iCellHeight += aCalculatedRowHeights[oCellInfo.iRow + i] || 0;
					}
					iContentHeight = determineContentHeight(oDomCell, iCellHeight);
					oDomContentDiv = $(oDomCellClone.find("#" + oCell.getId() + "_contentDiv"));
					oDomContentDiv.css("line-height", iContentHeight + "px");
				}
			}
		}
	}

	function forceColWidth (oArea, oDomArea, oDomAreaClone, oCellInfo, oHandledColSpanCells) {
		var iRow = 0;
		var oCell = null;
		var oDomCell = null;
		var oDomCellClone = null;
		var oDomContentDiv = null;
		var iContentWidth = 0;
		var iCellWidth = 0;
		var i = 0;
		var aCalculatedColWidths = oArea.getCalculatedColWidths();
		var iEffectiveColSpan;

		var iEndRow = oArea.getRenderStartRow() + oArea.getRenderRowCnt();
		for (iRow = oArea.getRenderStartRow(); iRow < iEndRow; iRow++) {
			oCell = oArea.getCellWithRowSpan(iRow, oCellInfo.iCol);
			// adjust cells with colspan that are above the granularity cells.
			// otherwise, it can happen that due to a large content, the colspanned cell
			// will expand the granularity cells despite that they have a width enforced
			if (!oCell && iRow < oCellInfo.iRow) {
				oCell = oArea.getCellWithColSpan(iRow, oCellInfo.iCol);
				if (oCell) {
					if (!oHandledColSpanCells[oCell.getId()]) {
						oHandledColSpanCells[oCell.getId()] = oCell;
					} else {
						oCell = null;
					}
				}
			}
			if (oCell) {
				oDomCell = oDomArea.find("#" + oCell.getId());
				oDomCellClone = oDomAreaClone.find("#" + oCell.getId());
				if (oDomCell.length > 0) {
					iCellWidth = 0;
					iEffectiveColSpan = oCell.getEffectiveColSpan();
					for (i = 0; i < iEffectiveColSpan; i++) {
						iCellWidth += aCalculatedColWidths[oCellInfo.iCol + i] || 0;
					}
					iContentWidth = calculateContentWidth(oDomCell, iCellWidth, oCell);
					if (oCell.isEntryEnabled() && oArea.isRowHeaderArea()) {
						oDomContentDiv = $(oDomCellClone.find("#" + oCell.sId + "_cellLayoutDiv"));
					} else {
						oDomContentDiv = $(oDomCellClone.find("#" + oCell.getId() + "_contentDiv"));
					}
					oDomContentDiv.width(iContentWidth);
				}
			}
		}
	}

	function calculateContentWidth (oDomCell, iCommonWidth, oCell) {
		var iPaddingLeft = parseInt(oDomCell.css("padding-left")) || 0;
		var iPaddingRight = parseInt(oDomCell.css("padding-right")) || 0;
		var iBorderLeft = parseInt(oDomCell.css("border-left-width")) || 0;
		var iBorderRight = parseInt(oDomCell.css("border-right-width")) || 0;

		var iContentDivBorderLeft = 0;
		var iContentDivBorderRight = 0;

		if (oCell !== null && oCell.isEntryEnabled()) {
			if (oCell.isEntryEnabled() && oCell.getArea().isRowHeaderArea()) {
				var oDomContentDiv = $(oDomCell.find("#" + oCell.getId() + "_cellLayoutDiv"));
			} else {
				var oDomContentDiv = oDomCell.find('#' + oCell.getId() + "_contentDiv");
			}

			iContentDivBorderLeft = parseInt(oDomContentDiv.css("border-left-width")) || 0;
			iContentDivBorderRight = parseInt(oDomContentDiv.css("border-right-width")) || 0;
		}

		// don't let a width be 0 since soome browsers have problem with this, e. g. Safari iPad iOS 6
		// make it at least 1 px
		var iContentWidth = Math.max(1, iCommonWidth - iPaddingLeft - iPaddingRight - iBorderLeft - iBorderRight
				- iContentDivBorderLeft - iContentDivBorderRight);

		return iContentWidth;
	}

	function calculateRowHeight (oDomCell, iCellHeight) {
		var oParent = $(oDomCell).parent();
		var iTopRowBorderWidth = parseInt(oParent.css("border-top-width"), 10) || 0;
		var iBottomRowBorderWidth = parseInt(oParent.css("border-bottom-width"), 10) || 0;

		var iRowHeight = iCellHeight + iTopRowBorderWidth + iBottomRowBorderWidth;

		return iRowHeight;
	}

	function calculateContentHeight (oDomCell, iCellHeight) {
		var iPaddingTop = parseInt(oDomCell.css("padding-top")) || 0;
		var iPaddingBottom = parseInt(oDomCell.css("padding-bottom")) || 0;
		var iBorderTop = parseInt(oDomCell.css("border-top-width")) || 0;
		var iBorderBottom = parseInt(oDomCell.css("border-bottom-width")) || 0;

		var iContentHeight = iCellHeight - iPaddingTop - iPaddingBottom - iBorderTop - iBorderBottom;

		return iContentHeight;
	}

	this.determineHeaderScrollbarVisible = function() {
		// currently only horizontally => width is relevant
		if (oScrollbarVisibility) {
			var iHeaderWidth = 0;
			var oJqScrollDiv = null;
			var oJqContainerDiv = null;
			var bNeedHorizontalHeaderScrolling = false;

			if (oDimensionHeaderArea.getColCnt() > 0) {
				iHeaderWidth = oMeasuring.getAreaSize(oDimensionHeaderArea).iWidth;
				oJqContainerDiv = $('#' + oCrosstab.getId() + "_dimHeaderArea_container");
				oJqScrollDiv = $('#' + oCrosstab.getId() + "_upperLeft_scrollDiv");
			}
			if (iHeaderWidth === 0) {
				if (oRowHeaderArea.getColCnt() > 0) {
					iHeaderWidth = oMeasuring.getAreaSize(oRowHeaderArea).iWidth;
					oJqContainerDiv = $('#' + oCrosstab.getId() + "_rowHeaderArea_container");
					oJqScrollDiv = $('#' + oCrosstab.getId() + "_lowerLeft_scrollDiv");
				}
			}

			if (iHeaderWidth > 0) {
				// check if the accomodating div is wide enough
				bNeedHorizontalHeaderScrolling = (oJqContainerDiv.outerWidth() > oJqScrollDiv.outerWidth());
			}
			oScrollbarVisibility.bHasHHeaderScrollbar = bNeedHorizontalHeaderScrolling;
		}
	};
	
	this.determineScrollbarsVisible = function () {
		oScrollbarVisibility = {};

		var oDimensionHeaderAreaSize = oMeasuring.getAreaSize(oDimensionHeaderArea);
		var oRenderSize = oMeasuring.calculateRenderSize();
		var oRenderSizeDivSize = oMeasuring.getRenderSizeDivSize(oCrosstab);
		var iIntWidth = oCrosstab.getContentWidth();
		var iIntHeight = oCrosstab.getContentHeight();
		var iScrollbarWidth = oMeasuring.getBrowserScrollbarWidth();
		var oRenderSizeDivBorders = null;

		var bHAllRendered = oDataArea.getRenderColCnt() === oDataArea.getColCnt();
		var bVAllRendered = oDataArea.getRenderRowCnt() === oDataArea.getRowCnt();

		oScrollbarVisibility.bHasHScrollbar = ((oRenderSize.iWidth > iIntWidth || !bHAllRendered) && oRenderSizeDivSize.iWidth > oDimensionHeaderAreaSize.iWidth);
		oScrollbarVisibility.bHasVScrollbar = ((oRenderSize.iHeight > iIntHeight || !bVAllRendered) && oRenderSizeDivSize.iHeight > oDimensionHeaderAreaSize.iHeight);

		if (oScrollbarVisibility.bHasHScrollbar && !oScrollbarVisibility.bHasVScrollbar) {
			oRenderSizeDivBorders = oMeasuring.getRenderSizeDivBorders();

			if (iIntHeight <= oRenderSize.iHeight + iScrollbarWidth + oRenderSizeDivBorders.borders.iBottomBorderWidth
					+ oRenderSizeDivBorders.borders.iTopBorderWidth) {
				oScrollbarVisibility.bHasVScrollbar = true;
			}
		} else if (!oScrollbarVisibility.bHasHScrollbar && oScrollbarVisibility.bHasVScrollbar) {
			oRenderSizeDivBorders = oMeasuring.getRenderSizeDivBorders();

			if (iIntWidth <= oRenderSize.iWidth + iScrollbarWidth + oRenderSizeDivBorders.borders.iRightBorderWidth
					+ oRenderSizeDivBorders.borders.iLeftBorderWidth) {
				oScrollbarVisibility.bHasHScrollbar = true;
			}
		}
		
		this.determineHeaderScrollbarVisible();
	};

	this.setAdjustFrameDivs = function (pbAdjustFrameDivs) {
		bAdjustFrameDivs = pbAdjustFrameDivs;
	};

	this.removeOuterDivBorders = function () {
		var oDomRenderSizeDiv = $(jQuery.sap.byId(oCrosstab.getId() + "_renderSizeDiv"));
		oDomRenderSizeDiv.css("border-bottom-width", "");
		oDomRenderSizeDiv.css("border-top-width", "");
		oDomRenderSizeDiv.css("border-left-width", "");
		oDomRenderSizeDiv.css("border-right-width", "");
	};
	
	this.setDivSizeValidity = function() {
		bDivSizesValid = !oCrosstab.getRowHeaderArea().hasLoadingPages() && !oCrosstab.getColumnHeaderArea().hasLoadingPages();
	};

	// this method is used for an all new calculation. RenderSizeDiv might have been adjusted before, hence this method will
	// contain adjustments to take a bottom border zero into account as it might have been set in COMPACT MODE in adjustRenderSizeDivSize
	this.calculateRenderSizeDivSize = function () {
		if (bAdjustFrameDivs || !bDivSizesValid) {
			var oRenderSize = oMeasuring.calculateRenderSize(true);
			var oDomRenderSizeDiv = $(jQuery.sap.byId(oCrosstab.getId() + "_renderSizeDiv"));
			var oBorders = oMeasuring.getRenderSizeDivBorders(oDomRenderSizeDiv);
			
			// correct bottom border if set to zero before. This is needed for new calculation because in adjustRenderSizeDivSize,
			// the bottom border of the renderSizeDiv may have been set to zero (COMPACT_MODE) and any new calculation will yield
			// in wrong renderSizeDiv heights
			if (iRenderSizeDivOrigBottom !== -1) {
				oBorders.borders.iBottomBorderWidth = iRenderSizeDivOrigBottom; 
			}

			var iMaxWidth = oCrosstab.getContentWidth() - oBorders.borders.iLeftBorderWidth
					- oBorders.borders.iRightBorderWidth;

			var iWidth = oRenderSize.iWidth;
			oDomRenderSizeDiv.width(Math.min(iMaxWidth, iWidth) + "px");

			var iMaxHeight = oCrosstab.getContentHeight() - oBorders.borders.iBottomBorderWidth
					- oBorders.borders.iTopBorderWidth;

			var iHeight = oRenderSize.iHeight;
			oDomRenderSizeDiv.height(Math.min(iMaxHeight, iHeight) + "px");
		}
	};

	// this method is used for an all new calculation. RenderSizeDiv might have been adjusted before, hence this method will
	// contain adjustments to take a bottom border zero into account as it might have been set in this method during COMPACT_MODE
	this.adjustRenderSizeDivSize = function () {
		if (bAdjustFrameDivs || !bDivSizesValid) {
			var oDomRenderSizeDiv = $(jQuery.sap.byId(oCrosstab.getId() + "_renderSizeDiv"));
			var oBorders = oMeasuring.getRenderSizeDivBorders(oDomRenderSizeDiv);
			// correct bottom border if set to zero before. This is needed for new calculation because in adjustRenderSizeDivSize,
			// the bottom border of the renderSizeDiv may have been set to zero (COMPACT_MODE) and any new calculation will yield
			// in wrong renderSizeDiv heights
			if (iRenderSizeDivOrigBottom !== -1) {
				oBorders.borders.iBottomBorderWidth = iRenderSizeDivOrigBottom; 
			}

			var iRenderSizeDivHeight = oMeasuring.getRenderSizeDivSize().iHeight;
			// outerDiv calculation from Measuring might operate on renderSizeDiv that has bottom border set to zero.
			// Hence, for a new calculation as requested here, this needs to be compensated for.
			if (iRenderSizeDivOrigBottom !== -1) {
				iRenderSizeDivHeight += iRenderSizeDivOrigBottom;
			}

			var iRenderSizeDivWidth = oMeasuring.getRenderSizeDivSize().iWidth;

			var iAvailableHeight = oCrosstab.getContentHeight();
			if (oScrollbarVisibility.bHasHScrollbar || oScrollbarVisibility.bHasHHeaderScrollbar) {
				iAvailableHeight -= oMeasuring.getBrowserScrollbarWidth();
			}

			if (oCrosstab.getRenderMode() === sap.zen.crosstab.rendering.RenderingConstants.RENDERMODE_COMPACT) {
				var iScrollbarHeight = (oScrollbarVisibility.bHasHScrollbar || oScrollbarVisibility.bHasHHeaderScrollbar) ? oMeasuring.getBrowserScrollbarWidth() : 0;

				var iToolbarHeight = oCrosstab.getPropertyBag().getToolbarHeight();

				var iRenderSizeDivWithScrollbarHeightAndToolbar = iRenderSizeDivHeight + iScrollbarHeight
						+ oBorders.borders.iBottomBorderWidth + oBorders.borders.iTopBorderWidth + iToolbarHeight;

				var iTotalAvailableHeight = iAvailableHeight + iScrollbarHeight + iToolbarHeight;

				if (iTotalAvailableHeight >= iRenderSizeDivWithScrollbarHeightAndToolbar) {
					iAvailableHeight = iRenderSizeDivWithScrollbarHeightAndToolbar;
					var oTableDiv = oDomElementProvider.getElement(oCrosstab.getId());
					oTableDiv.css("height", iAvailableHeight + "px");
					if (iRenderSizeDivOrigBottom === -1) {
						iRenderSizeDivOrigBottom = parseInt(oDomRenderSizeDiv.css("border-bottom-width"), 10);
					}
					oDomRenderSizeDiv.css("border-bottom-width", "0px");
				}
			}

			if (iRenderSizeDivHeight >= iAvailableHeight) {
				if (iRenderSizeDivOrigBottom === -1) {
					iRenderSizeDivOrigBottom = parseInt(oDomRenderSizeDiv.css("border-bottom-width"), 10);
				}
				oDomRenderSizeDiv.css("border-bottom-width", "0px");
			}
			var iCalculatedRenderSizeDivHeight = Math.min(iRenderSizeDivHeight, iAvailableHeight);
			oDomRenderSizeDiv.css("height", iCalculatedRenderSizeDivHeight);

			var iAvailableWidth = oCrosstab.getContentWidth();
			if (oScrollbarVisibility.bHasVScrollbar) {
				iAvailableWidth -= oMeasuring.getBrowserScrollbarWidth();
			}

			if (oCrosstab.getRenderMode() === sap.zen.crosstab.rendering.RenderingConstants.RENDERMODE_COMPACT) {
				var iScrollbarWidth = oScrollbarVisibility.bHasVScrollbar ? oMeasuring.getBrowserScrollbarWidth() : 0;
				var iRenderSizeDivWidthScrollbarWidth = iRenderSizeDivWidth + iScrollbarWidth
						+ oBorders.borders.iLeftBorderWidth + oBorders.borders.iRightBorderWidth;

				var iTotalAvailableWidth = iAvailableWidth + iScrollbarWidth;

				if (iTotalAvailableWidth >= iRenderSizeDivWidthScrollbarWidth) {
					iAvailableWidth = iRenderSizeDivWidthScrollbarWidth;
					var oTableDiv = oDomElementProvider.getElement(oCrosstab.getId());
					oTableDiv.css("width", iAvailableWidth + "px");
					oDomRenderSizeDiv.css("border-right-width", "0px");
				}
			}

			if (iRenderSizeDivWidth >= iAvailableWidth) {
				oDomRenderSizeDiv.css("border-right-width", "0px");
			}
			var iCalculatedRenderSizeDivWidth = Math.min(iRenderSizeDivWidth, iAvailableWidth);
			oDomRenderSizeDiv.css("width", iCalculatedRenderSizeDivWidth);
		}
	};

	this.renderScrollbars = function () {
		this.determineScrollbarsVisible();
		if (oScrollbarVisibility.bHasHScrollbar || oScrollbarVisibility.bHasVScrollbar || oScrollbarVisibility.bHasHHeaderScrollbar) {
			if (!oScrollManager) {
				oScrollManager = oCrossRequestManager.getScrollManager();
			}
			if (oScrollbarVisibility.bHasHHeaderScrollbar) {
				oHeaderScrollManager = oCrossRequestManager.getHeaderScrollManager();
			}
			if (oScrollbarRenderer) {
				oScrollbarRenderer.destroy();
				oScrollbarRenderer = null;
			}
			oScrollbarRenderer = new sap.zen.crosstab.rendering.ScrollbarRenderer(oCrosstab, oRenderManager,
					oMeasuring, oDomElementProvider);
			oScrollbarRenderer.renderScrollbars(oScrollbarVisibility);
			oScrollbarRenderer.attachHandlers(oScrollManager.hScrollHandler, oScrollManager.vScrollHandler, oScrollbarVisibility.bHasHHeaderScrollbar ? oHeaderScrollManager.hScrollHandler : null);
			notifyNewScrollbars();
		} else {
			oScrollManager = null;
		}
	};

	function notifyNewScrollbars () {
		var i = 0;
		for (i = 0; i < aNewScrollbarEventHandlers.length; i++) {
			aNewScrollbarEventHandlers[i]();
		}
	}

	this.setScrollbarSteps = function () {
		if (oScrollbarRenderer) {
			oScrollbarRenderer.setScrollbarSteps();
		}
	};

	this.adjustScrollDivSizes = function () {
		// data area and column header area
		var oDomLowerLeftArea = jQuery.sap.byId(oCrosstab.getId() + "_lowerLeft");
		var iLowerLeftAreaWidth = oDomLowerLeftArea.outerWidth();
		var iRenderSizeDivSize = oMeasuring.getRenderSizeDivSize();

		var sDataColHeaderScrollDivWidth = (iRenderSizeDivSize.iWidth - iLowerLeftAreaWidth) + "px";

		var oDomDataScrollDiv = jQuery.sap.byId(oCrosstab.getId() + "_lowerRight_scrollDiv");
		oDomDataScrollDiv.width(sDataColHeaderScrollDivWidth);

		var oDomColHeaderScrollDiv = jQuery.sap.byId(oCrosstab.getId() + "_upperRight_scrollDiv");
		oDomColHeaderScrollDiv.width(sDataColHeaderScrollDivWidth);

		// data area and row header area
		var oDomUpperLeftArea = jQuery.sap.byId(oCrosstab.getId() + "_upperLeft");
		var iUpperAreaHeight = oDomUpperLeftArea.outerHeight();

		if (!iUpperAreaHeight) {
			// Required for IE if there is no dimension header
			var oDomUpperRightArea = jQuery.sap.byId(oCrosstab.getId() + "_upperRight");
			iUpperAreaHeight = oDomUpperRightArea.outerHeight();
		}

		var sDataRowHeaderScrollDivHeight = (iRenderSizeDivSize.iHeight - iUpperAreaHeight) + "px";

		oDomDataScrollDiv.height(sDataRowHeaderScrollDivHeight);

		var oDomRowHeaderScrollDiv = jQuery.sap.byId(oCrosstab.getId() + "_lowerLeft_scrollDiv");
		oDomRowHeaderScrollDiv.height(sDataRowHeaderScrollDivHeight);
	};

	this.appendLeftCols = function (oArea, iNumberOfCols) {
		var iStartCol = Math.max(0, oArea.getRenderStartCol() - iNumberOfCols);
		var iEndCol = Math.max(0, oArea.getRenderStartCol() - 1);
		var iActualNumberOfCols = iNumberOfCols;
		if (iStartCol === iEndCol) {
			iActualNumberOfCols = 1;
		}
		
		var iStartRow = oArea.getRenderStartRow();
		var iEndRow = iStartRow + oArea.getRenderRowCnt() - 1;
		var oCell = null;

		var iRowCounter = 0;
		var iColCounter = 0;
		var iRow = 0;
		
		var oJqTable = $('#' + oArea.getId());
		var oJqTableBody = oJqTable.children("tbody");
		
		if (oJqTableBody.length === 0) {
			oJqTable.append("<tbody></tbody>");
			oJqTableBody = oJqTable.children("tbody");
			for (iRow = iStartRow; iRow <= iEndRow; iRow++) {
				oJqTableBody.append("<tr/>");
			}
		}
		
		var oRows = oJqTableBody.children("tr");

		for (iRow = iStartRow; iRow <= iEndRow; iRow++) {
			var oRow = oRows[iRowCounter];

			iColCounter = 0;

			for (var iCol = iStartCol; iCol <= iEndCol; iCol++) {
				if (iColCounter === 0) {
					oCell = oArea.getCellWithColSpan(iRow, iCol);
				} else {
					oCell = oArea.getCell(iRow, iCol);
				}

				if (oCell) {
					var iColSpan = oCell.getColSpan();

					if (iColSpan > 1) {

						var iEffectiveColSpan = oCell.getEffectiveColSpan();
						var iRenderedColCnt = Math.min(iActualNumberOfCols, (oArea.getRenderStartCol() - iStartCol));
						var iRemainingColSpan = iEffectiveColSpan - (iRenderedColCnt - iColCounter);

						if (iRemainingColSpan > 0) {
							var oCellToBeRemoved = $(oRow).find("> :first-child");
							oCellToBeRemoved.remove();
						}

					}
					oRenderManager.renderControl(oCell);
				}
				iColCounter++;
			}

			var sRowHtml = $($(oRows[iRowCounter])).html();
			oRenderManager.write(sRowHtml);
			oRenderManager.flush(oRow);
			iRowCounter++;
		}

		var iRenderColCnt = oArea.getRenderColCnt();
		var iAdditionalCols = iEndCol - iStartCol + 1;
		oArea.setRenderColCnt(iRenderColCnt + iAdditionalCols);
		oArea.setRenderStartCol(iStartCol);
	};

	this.appendTopRows = function (oArea, iNumberOfRows) {
		var iStartRow = Math.max(0, oArea.getRenderStartRow() - iNumberOfRows);
		var iEndRow = Math.max(0, oArea.getRenderStartRow() - 1);
		var iActualNumberOfRows = iNumberOfRows;
		if (iStartRow === iEndRow) {
			iActualNumberOfRows = 1; // can't get bigger than that no matter what iNumberOfRows
		} 
		var iStartCol = oArea.getRenderStartCol();
		var iEndCol = iStartCol + oArea.getRenderColCnt() - 1;
		
		var oJqTable = $('#' + oArea.getId());
		var oJqTBody = oJqTable.children("tbody");
		
		if (oJqTBody.length === 0) {
			oJqTable.append("<tbody/>");
			oJqTBody = oJqTable.children("tbody");
		}
		
		var sRows = oJqTBody.html();
		var aColIndexes = [];

		var iRowCounter = 0;
		var iColCounter = 0;

		var oCell = null;

		if (!oCrosstab.getPropertyBag().isDebugMode()) {
			oJqTBody.hide();
		}
		// Render the new rows & find cells that need to be deleted in the old rows
		for (var iRow = iStartRow; iRow <= iEndRow; iRow++) {
			iColCounter = 0;
			oRenderManager.write("<tr");
			oRenderManager.writeAttribute("class", "sapzencrosstab-HeaderRow");
			oRenderManager.write(">");
			for (var iCol = iStartCol; iCol <= iEndCol; iCol++) {
				oCell = null;
				if (iRowCounter === 0) {
					oCell = oArea.getCellWithRowSpan(iRow, iCol);
				} else {
					oCell = oArea.getCell(iRow, iCol);
				}

				if (oCell) {
					var iRowSpan = oCell.getRowSpan();
					if (iRowSpan > 1) {
						var iEffectiveRowSpan = oCell.getEffectiveRowSpan();
						var iRemainingRowSpan = iEffectiveRowSpan - (iActualNumberOfRows - iRowCounter);

						if (iRemainingRowSpan > 0) {
							aColIndexes.push(iCol);
						}
					}
					oRenderManager.renderControl(oCell);
				}
				iColCounter++;
			}
			oRenderManager.write("</tr>");
			iRowCounter++;
		}

		var aCellIds = [];
		// delete old cells
		if (aColIndexes.length > 0) {
			var oRows = $('#' + oArea.getId()).children("tbody").children("tr");
			var oFirstRow = $(oRows[0]);
			var i = 0;
			for (i = 0; i < aColIndexes.length; i++) {
				var oCell = oFirstRow.find("> :nth-child(" + (aColIndexes[i] + 1) + ")");
				if (oCell.length > 0) {
					var sCellId = oCell.attr('id');
					aCellIds.push(sCellId);
				}
			}

			for (var j = 0; j < aCellIds.length; j++) {
				var oCellToBeRemoved = oFirstRow.find("#" + aCellIds[j]);
				oCellToBeRemoved.remove();
			}

			oRenderManager.write("<tr");
			oRenderManager.writeAttribute("class", "sapzencrosstab-HeaderRow");
			oRenderManager.write(">");
			oRenderManager.write(oFirstRow.html() + "</tr>");

			for (i = 1; i < oRows.length; i++) {
				oRenderManager.write("<tr");
				oRenderManager.writeAttribute("class", "sapzencrosstab-HeaderRow");
				oRenderManager.write(">");
				oRenderManager.write($(oRows[i]).html() + "</tr>");
			}

		} else {
			oRenderManager.write(sRows);
		}

		oArea.setRenderStartRow(iStartRow);
		oArea.setRenderRowCnt(oArea.getRenderRowCnt() + iEndRow - iStartRow + 1);

		oRenderManager.flush(oJqTBody[0]);
		oJqTBody.show();
	};
	
	function createScrollEvent (iPos, oScrollbar, bIsScrollableHeaderCell) {
		var iNewPos = 0;
		var iOldScrollPos = oScrollbar.getScrollPosition();

		var oEvent = {};
		oEvent.parameters = {};
		oEvent.oSource = oScrollbar;
		oEvent.parameters.oldScrollPos = iOldScrollPos;

		if (oCrosstab.getPropertyBag().isPixelScrolling() || bIsScrollableHeaderCell) {
			iNewPos = Math.max(0, Math.min(iPos, parseInt(oScrollbar.getContentSize(), 10)));
			oEvent.parameters.action = "Drag";
		} else {
			iNewPos = Math.max(0, Math.min(iPos, oScrollbar.getSteps()));
			oEvent.parameters.action = "STEP";
		}

		oEvent.getParameters = function () {
			return this.parameters;
		};

		oEvent.parameters.newScrollPos = iNewPos;
		oEvent.parameters.forward = (iNewPos - iOldScrollPos) > 0;

		return oEvent;
	}

	this.scrollHorizontal = function (iHPos) {
		if (oCrosstab.getHScrollbar()) {
			var oEvent = createScrollEvent(iHPos, oCrosstab.getHScrollbar());
			oCrosstab.getHScrollbar().setScrollPosition(oEvent.getParameters().newScrollPos);
			oScrollManager.hScrollHandler(oEvent, true);
		}
	};

	this.scrollVertical = function (iVPos, bUseTimer) {
		if (oCrosstab.getVScrollbar()) {
			var oEvent = createScrollEvent(iVPos, oCrosstab.getVScrollbar());
			oCrosstab.getVScrollbar().setScrollPosition(oEvent.getParameters().newScrollPos);
			var bNoTimer = false;
			if (!bUseTimer) {
				bNoTimer = true;
			}
			oScrollManager.vScrollHandler(oEvent, bNoTimer);
		}
	};
	
	this.scrollHeaderHorizontal = function(iPos) {
		var oHScrollbar = oCrosstab.getHorizontalHeaderScrollbar();
		if (oHScrollbar) {
			var oEvent = createScrollEvent(iPos, oHScrollbar, true);
			oHScrollbar.setScrollPosition(oEvent.getParameters().newScrollPos);
			oHeaderScrollManager.hScrollHandler(oEvent);
		}
	};
	
	this.getMeasuringHelper = function () {
		return oMeasuring;
	};

	this.reset = function () {
		oCrossRequestManager.reset();
		oScrollManager = null;
		oMeasuring.reset();
		if (oScrollbarRenderer) {
			oScrollbarRenderer.destroy();
			oScrollbarRenderer = null;
		}
		aNewScrollbarEventHandlers = [];
		bDivSizesValid = false;
		iRenderSizeDivOrigBottom = -1;
	};

	this.adjustScrollPositions = function (bRenderScrollbars) {
		if (oScrollbarVisibility.bHasHScrollbar || oScrollbarVisibility.bHasVScrollbar) {
			if (bDeferredVScrollPosDetermination && oCrosstab.getPropertyBag().isPixelScrolling()) {
				// calculate actual heuristic pixel scrolltop from row information based
				// on the area sizes.
				// in case of deferred position determination (as it currently only occurs when
				// sorting in a crosstab with selection and pixel scrolling enabled), the iPos information
				// in the VScrollInfo object contains the row which needs to be transferred into a
				// pixel scrolltop value
				var iScrollTop = 0;
				var oVScrollInfo = oCrossRequestManager.getSavedVScrollInfo();
				if (oVScrollInfo) {
					var oDataArea = oCrosstab.getDataArea();
					var iDataAreaHeight = oMeasuring.getAreaHeight(oDataArea);
					var iTotalDataRows = oDataArea.getRowCnt();
					var iAverageRowHeight = Math.round(iDataAreaHeight / iTotalDataRows);
					iScrollTop = oVScrollInfo.iPos * iAverageRowHeight;
				}
				oScrollManager.setVScrollPos(iScrollTop);
			}
			
			var bHScrolledToEnd = undefined;
			var bVScrolledToEnd = undefined;
			if (oCrossRequestManager) {
				if (oCrossRequestManager.hasSavedInfo()) {
					var oScrollInfo = oCrossRequestManager.getSavedHScrollInfo();
					if (oScrollInfo) {
						bHScrolledToEnd = oScrollInfo.bScrolledToEnd;
					}
					oScrollInfo = oCrossRequestManager.getSavedVScrollInfo();
					if (oScrollInfo) {
						bVScrolledToEnd = oScrollInfo.bScrolledToEnd;
					}
				}
			}
			oScrollManager.moveScrollbars(oScrollbarVisibility, bRenderScrollbars, bHScrolledToEnd, bVScrolledToEnd);
			bDeferredVScrollPosDetermination = false;
		}
		
		// adjust header scrollbar
		if (oCrosstab.isHeaderHScrolling() === true) {
			if (oCrossRequestManager && oCrossRequestManager.hasSavedInfo() === true) {
				oHeaderScrollManager.setHScrollData(oCrossRequestManager.getHeaderScrollData());
				oHeaderScrollManager.moveScrollbars();
			}
		}
	};

	this.hasCrosstabSizeChanged = function () {
		return oMeasuring.hasCrosstabSizeChanged(true);
	};

	this.getTableDivValues = function () {
		return oMeasuring.getTableDivBordersAndPadding();
	};

	function initDomElementProvider () {
		var oTableDiv = oCrosstab.getTableDiv();

		var sColHeaderAreaId = oColHeaderArea.getId();
		var sRowHeaderAreaId = oRowHeaderArea.getId();
		var sDimHeaderAreaId = oDimensionHeaderArea.getId();
		var sDataAreaId = oDataArea.getId();

		oDomElementProvider.addElement(oCrosstab.getId(), oTableDiv);
		oDomElementProvider.addElement(sColHeaderAreaId, oTableDiv.find("#" + sColHeaderAreaId));
		oDomElementProvider.addElement(sRowHeaderAreaId, oTableDiv.find("#" + sRowHeaderAreaId));
		oDomElementProvider.addElement(sDimHeaderAreaId, oTableDiv.find("#" + sDimHeaderAreaId));
		oDomElementProvider.addElement(sDataAreaId, oTableDiv.find("#" + sDataAreaId));
	}

	this.showLoadingIndicator = function () {
		if (!sLoadingTimerId && !bIsLoadingAnimationVisible) {
			sLoadingTimerId = setTimeout(displayLoadingIndicator, 300);
		} else if (bIsLoadingAnimationVisible) {
			displayLoadingIndicator();
		}
	};

	function displayLoadingIndicator () {
		bIsLoadingAnimationVisible = true;
		var oTableDiv = oDomElementProvider.getElement(oCrosstab.getId());
		oTableDiv.addClass("sapzencrosstab-TableDivLoading");
		var oAnimDiv = oTableDiv.find("#" + oCrosstab.getId() + "_loadingAnimationDiv");
		var iWidth = parseInt(oAnimDiv.css("width"), 10);
		var iHeight = parseInt(oAnimDiv.css("height"), 10);
		var oRenderSizeDivSize = oMeasuring.getRenderSizeDivSize(oCrosstab);
		var iLeft = oRenderSizeDivSize.iWidth / 2 - iWidth / 2;
		var iTop = oRenderSizeDivSize.iHeight / 2 - iHeight / 2;
		oAnimDiv.css("top", iTop + "px");
		oAnimDiv.css("left", iLeft + "px");
		oAnimDiv.css("visibility", "visible");
	}

	function cleanupTimer () {
		if (sLoadingTimerId) {
			clearTimeout(sLoadingTimerId);
			sLoadingTimerId = "";
		}
	}

	this.hideLoadingIndicator = function () {
		cleanupTimer();
		var oTableDiv = oDomElementProvider.getElement(oCrosstab.getId());
		oTableDiv.removeClass("sapzencrosstab-TableDivLoading");
		var oAnimationDiv = oTableDiv.find("#" + oCrosstab.getId() + "_loadingAnimationDiv");
		if (oAnimationDiv && oAnimationDiv[0]) {
			oAnimationDiv.css("visibility", "hidden");
		}
		bIsLoadingAnimationVisible = false;
	};

	this.showLoadingVisualization = function () {
		if (oDataArea.hasLoadingPages()) {
			this.showLoadingIndicator();
		} else {
			this.hideLoadingIndicator();
		}
	};

	this.moveScrollDivs = function () {
		if (oScrollManager) {
			if (oScrollbarVisibility) {
				if (oScrollbarVisibility.bHasHScrollbar) {
					oScrollManager.positionHScrollDiv();
				}
				if (oScrollbarVisibility.bHasVScrollbar) {
					oScrollManager.positionVScrollDiv();
				}
			}
		}
	};

	this.getCrossRequestManager = function () {
		return oCrossRequestManager;
	};

	this.registerNewScrollbarsNotification = function (fHandler) {
		if ($.inArray(fHandler, aNewScrollbarEventHandlers) === -1) {
			aNewScrollbarEventHandlers.push(fHandler);
		}
	};

	this.checkScrollbarSize = function () {
		if (oScrollbarVisibility.bHasVScrollbar) {
			var oDomUpperRightPad = $('#' + oCrosstab.getId() + '_upperRightPad');
			var oDomUpperScrollDiv = null;

			if (oCrosstab.hasDimensionHeaderArea()) {
				oDomUpperScrollDiv = $('#' + oCrosstab.getId() + '_upperLeft_scrollDiv');
			} else if (oCrosstab.hasColHeaderArea()) {
				oDomUpperScrollDiv = $('#' + oCrosstab.getId() + '_upperRight_scrollDiv');
			}

			if (oDomUpperRightPad !== null && oDomUpperRightPad.length > 0 && oDomUpperScrollDiv !== null && oDomUpperScrollDiv.length > 0) {
				var iUpperScrollDivHeight = oDomUpperScrollDiv.outerHeight();
				if (iUpperScrollDivHeight !== oDomUpperRightPad.outerHeight()) {
					if (oScrollbarRenderer) {
						oScrollbarRenderer.adjustVScrollbarHeight(iUpperScrollDivHeight);
					}
				}
			}
		}

		if (oScrollbarVisibility.bHasHScrollbar) {
			var oDomLowerLeftPad = $('#' + oCrosstab.getId() + '_lowerLeftPad');
			var oDomLeftScrollDiv;

			if (oCrosstab.hasRowHeaderArea()) {
				oDomLeftScrollDiv = $('#' + oCrosstab.getId() + '_lowerLeft_scrollDiv');
			} else {
				oDomLeftScrollDiv = $('#' + oCrosstab.getId() + '_upperLeft_scrollDiv');
			}

			var iLeftScrollDivWidth = oDomLeftScrollDiv.outerWidth();

			if (iLeftScrollDivWidth !== oDomLowerLeftPad.outerWidth()) {
				if (oScrollbarRenderer) {
					oScrollbarRenderer.adjustHScrollbarWidth(iLeftScrollDivWidth);
				}
			}
		}

	};
	
	this.updateRenderingOfInputCellAfterCheck = function(oCell) {
		var oJqCell = $('#' + oCell.getId());
		if (oJqCell.length > 0) {
			var sClassName = sap.zen.crosstab.CellStyleHandler.getCompleteStyleName(sap.zen.crosstab.rendering.RenderingConstants.STYLE_INVALID_VALUE, oCell.getCellType());
			if (oCell.hasStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_INVALID_VALUE) === true) {
				oJqCell.addClass(sClassName);
			} else {
				oJqCell.removeClass(sClassName);
			}
			var oJqContentDiv = oJqCell.find("#" + oCell.getId() + "_contentDiv");
			oJqContentDiv.html(oCell.getText());
		}
	};
	
	this.updateHeaderScrollbarSizes = function() {
		if (oScrollbarRenderer) {
			oScrollbarRenderer.setHorizontalHeaderScrollbarSteps();
			oScrollbarRenderer.adjustHorizontalHeaderScrollbarContainerSize();
		}
	};
	
	function manipulateHeaderAreaClass(sPostFix, bAdd) {
		var oArea = $('#' + oCrosstab.getId() + sPostFix);
		if (oArea.length > 0) {
			if (bAdd === true) {
				oArea.find("tbody>tr[class=sapzencrosstab-HeaderRow]>td:last-child").addClass("sapzencrosstab-removeRightBorder");
			} else {
				oArea.find("tbody>tr[class=sapzencrosstab-HeaderRow]>td:last-child").removeClass("sapzencrosstab-removeRightBorder");
			}
		}
	}
	
	function setHeaderScrollStyles(oJqRowHeaderDiv, oJqDimHeaderDiv) {
		if (oJqRowHeaderDiv && oJqRowHeaderDiv.length > 0) {
			oJqRowHeaderDiv.addClass("sapzencrosstab-lowerScrollHeaderSeparator");
		}
		
		if (oJqDimHeaderDiv && oJqDimHeaderDiv.length > 0) {
			oJqDimHeaderDiv.addClass("sapzencrosstab-upperScrollHeaderSeparator");
		}
		
		manipulateHeaderAreaClass("_rowHeaderArea", true);
		manipulateHeaderAreaClass("_dimHeaderArea", true);
	}
	
	function removeHeaderScrollStyles(oJqRowHeaderDiv, oJqDimHeaderDiv) {
		if (oJqRowHeaderDiv && oJqRowHeaderDiv.length > 0) {
			oJqRowHeaderDiv.removeClass("sapzencrosstab-lowerScrollHeaderSeparator");
		}
		
		if (oJqDimHeaderDiv && oJqDimHeaderDiv.length > 0) {
			oJqDimHeaderDiv.removeClass("sapzencrosstab-upperScrollHeaderSeparator");
		}
		
		manipulateHeaderAreaClass("_rowHeaderArea", false);
		manipulateHeaderAreaClass("_dimHeaderArea", false);		
	}
	
	this.forceHeaderWidth = function() {
		var oJqRowHeaderDiv = null;
		var oJqDimHeaderDiv = null;
		var iRowHeaderWidth = 0;
		var iDimHeaderWidth = 0;
		var iLargestWidth = 0;
		
		if (oCrosstab.hasRowHeaderArea() === false && oCrosstab.hasDimensionHeaderArea() === false) {
			return;
		}
		
		var iWidth = oCrosstab.getPropertyBag().getMaxHeaderWidth();
		
		if (!isNaN(iWidth) && iWidth > 0) {	
			if (oCrosstab.hasRowHeaderArea()) {
				oJqRowHeaderDiv = $('#' + oCrosstab.getId() + '_lowerLeft_scrollDiv');
				iRowHeaderWidth = oJqRowHeaderDiv.outerWidth();
			}
			if (oCrosstab.hasDimensionHeaderArea()) {
				oJqDimHeaderDiv = $('#' + oCrosstab.getId() + '_upperLeft_scrollDiv');
				iDimHeaderWidth = oJqDimHeaderDiv.outerWidth();
			}
			iLargestWidth = Math.max(iRowHeaderWidth, iDimHeaderWidth);
			if (iLargestWidth > iWidth) {
				// force widths
				oJqRowHeaderDiv.css("width", iWidth);
				oJqDimHeaderDiv.css("width", iWidth);
				oCrosstab.setHeaderHScrolling(true);
			} else {
				if (oCrosstab.isHeaderHScrolling() === true) {
					oCrosstab.setHeaderHScrolling(false);
					oCrosstab.getUtils().sendClientScrollPosUpdate(0, undefined, undefined, undefined, true);
				}
			}
			if (oCrosstab.isHeaderHScrolling()) {
				setHeaderScrollStyles(oJqRowHeaderDiv, oJqDimHeaderDiv);
			} else {
				removeHeaderScrollStyles(oJqRowHeaderDiv, oJqDimHeaderDiv);
			}
		} else {
			oCrosstab.setHeaderHScrolling(false);
			oCrosstab.setHorizontalHeaderScrollbar(null);
		}
	};
	
	this.getHeaderScrollManager = function() {
		return oHeaderScrollManager;
	};
	
};


}; // end of sap/zen/crosstab/rendering/RenderEngine.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.BaseArea') ) {
jQuery.sap.declare("sap.zen.crosstab.BaseArea");





sap.zen.crosstab.BaseArea = function (oCrosstab) {
	"use strict";
	this.sAreaType = "";
	this.sId = "";
	this.oCrosstab = oCrosstab;
	this.iRenderStartRow = 0;
	this.iRenderRowCnt = 0;
	this.iRenderStartCol = 0;
	this.iRenderColCnt = 0;
	this.bHasContent = false;
	this.fRenderCellCallback = null;
	this.oDataModel = new sap.zen.crosstab.rendering.DataModel(this);

	this.aColGranularity = [];
	this.aColWidths = [];

	this.aCalculatedColWidths = [];
	this.aTemporaryColWidths = [];

	this.aRowGranularity = [];
	this.aRowHeights = [];

	this.aCalculatedRowHeights = [];
	this.aTemporaryRowHeights = [];

	this.oColsWithSymbolException = {};

	this.oColUserWidth = {};

	this.aLevelCells = [];

	this.iLoadingPageCnt = 0;

	this.bColGranularityCalculatedAndMeasured = false;

	this.oUserResizedCols = {};
	
	this.oCellsWithLineBreakTexts = null;
};

sap.zen.crosstab.BaseArea.prototype.insertCell = function (oCell, iRow, iCol) {
	if (oCell) {
		if (oCell.textHasLineBreaks() === true) {
			if (!this.oCellsWithLineBreakTexts) {
				this.oCellsWithLineBreakTexts = {};
			}
			this.oCellsWithLineBreakTexts[oCell.getId()] = oCell;
		}
		this.bHasContent = true;
		var oModelCoordinates = this.oCrosstab.getUtils().getModelCoordinates(iRow, iCol, this.sAreaType);

		if (oModelCoordinates.iCol === 0) {
			oCell.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_FIRST_IN_ROW);
		}
		if (oModelCoordinates.iRow === 0) {
			oCell.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_FIRST_IN_COL);
		}
		if ((oModelCoordinates.iCol + oCell.getColSpan()) === this.oCrosstab.getTotalCols()) {
			oCell.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_LAST_IN_ROW);
		}
		if ((oModelCoordinates.iRow + oCell.getRowSpan()) === this.oCrosstab.getTotalRows()) {
			oCell.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_LAST_IN_COL);
		}
	}
	this.oDataModel.insertCell(oCell, iRow, iCol);
};

sap.zen.crosstab.BaseArea.prototype.addHighlightingForCell = function (iRow, iCol) {
	var oCell = this.oDataModel.getCellWithSpan(iRow, iCol);
	if (oCell) {
		// In future render cycles, the cell needs to keep the highlighted state
		oCell.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_HIGHLIGHTED);

		// To get the cell to highlight immediately the style is set in the DOM. This is cheaper than rerendering.
		var oDomCell = $("#" + oCell.getId());
		if (this.isDataArea()) {
			oDomCell.addClass("sapzencrosstab-DataCellHighlighted");
		} else {
			oDomCell.addClass("sapzencrosstab-HeaderCellHighlighted");
		}
	}
};

sap.zen.crosstab.BaseArea.prototype.removeHighlightingForCell = function (iRow, iCol) {
	var oCell = this.oDataModel.getCellWithSpan(iRow, iCol);
	if (oCell) {
		oCell.removeStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_HIGHLIGHTED);
		var oDomCell = $("#" + oCell.getId());
		if (this.isDataArea()) {
			oDomCell.removeClass("sapzencrosstab-DataCellHighlighted");
		} else {
			oDomCell.removeClass("sapzencrosstab-HeaderCellHighlighted");
		}
	}
};

sap.zen.crosstab.BaseArea.prototype.resetColGranularity = function () {
	this.aColGranularity = [];
};

sap.zen.crosstab.BaseArea.prototype.resetRowGranularity = function () {
	this.aRowGranularity = [];
};

sap.zen.crosstab.BaseArea.prototype.calculateColGranularity = function () {
	if (this.bColGranularityCalculatedAndMeasured === false) {
		var iRow = 0;
		var iEndRow = this.iRenderStartRow + this.iRenderRowCnt;
		var iCol = 0;
		var iEndCol = this.iRenderStartCol + this.iRenderColCnt;

		this.aColGranularity = [];
		for (iCol = this.iRenderStartCol; iCol < iEndCol; iCol++) {
			for (iRow = this.iRenderStartRow; iRow < iEndRow; iRow++) {
				if (this.collectColGranularity(iRow, iCol, this)) {
					break;
				}
			}
		}
	}
};

sap.zen.crosstab.BaseArea.prototype.calculateRowGranularity = function () {
	var iRow = 0;
	var iEndRow = this.iRenderStartRow + this.iRenderRowCnt;
	var iCol = 0;
	var iEndCol = this.iRenderStartCol + this.iRenderColCnt;

	this.aRowGranularity = [];
	for (iRow = this.iRenderStartRow; iRow < iEndRow; iRow++) {
		for (iCol = this.iRenderStartCol; iCol < iEndCol; iCol++) {
			if (this.collectRowGranularity(iRow, iCol, this)) {
				break;
			}
		}
	}
};

sap.zen.crosstab.BaseArea.prototype.getCellForGranularity = function (iRow, iCol, that) {
	var oCell = null;

	if (iCol === that.iRenderStartCol && iRow === that.iRenderStartRow) {
		oCell = that.oDataModel.getCellWithSpan(iRow, iCol);
	} else if (iCol === that.iRenderStartCol) {
		oCell = that.oDataModel.getCellWithColSpan(iRow, iCol);
	} else if (iRow === that.iRenderStartRow) {
		oCell = that.oDataModel.getCellWithRowSpan(iRow, iCol);
	} else {
		oCell = that.oDataModel.getCellDirect(iRow, iCol);
	}
	return oCell;
};

sap.zen.crosstab.BaseArea.prototype.collectColGranularity = function (iRow, iCol, that) {
	var oCell = that.getCellForGranularity(iRow, iCol, that);
	var iColSpan = -1;
	if (oCell) {
		iColSpan = oCell.getEffectiveColSpan();

		var oCellInfo = that.aColGranularity[iCol];
		if (oCellInfo) {
			if (iColSpan < oCellInfo.iColSpan) {
				oCellInfo.sId = oCell.getId();
				oCellInfo.iRow = iRow;
				oCellInfo.iCol = iCol;
				oCellInfo.iColSpan = iColSpan;
				oCellInfo.iWidth = 0;
			}
		} else {
			oCellInfo = {};
			oCellInfo.sId = oCell.getId();
			oCellInfo.iRow = iRow;
			oCellInfo.iCol = iCol;
			oCellInfo.iColSpan = iColSpan;
			oCellInfo.iWidth = 0;
			that.aColGranularity[iCol] = oCellInfo;
		}
	}

	return iColSpan === 1;
};

sap.zen.crosstab.BaseArea.prototype.collectRowGranularity = function (iRow, iCol, that) {
	var oCell = that.getCellForGranularity(iRow, iCol, that);
	var iRowSpan = -1;
	if (oCell) {
		iRowSpan = oCell.getEffectiveRowSpan();

		var oCellInfo = that.aRowGranularity[iRow];
		if (oCellInfo) {
			if (iRowSpan < oCellInfo.iRowSpan) {
				oCellInfo.sId = oCell.getId();
				oCellInfo.iRow = iRow;
				oCellInfo.iCol = iCol;
				oCellInfo.iRowSpan = iRowSpan;
				oCellInfo.iHeight = 0;
				oCellInfo.isLevelCell = this.isColHeaderArea() && oCell.getLevel && oCell.getLevel() > -1;
				oCellInfo.isEntryEnabled = false; // oCell.isEntryEnabled();
			}
		} else {
			oCellInfo = {};
			oCellInfo.sId = oCell.getId();
			oCellInfo.iRow = iRow;
			oCellInfo.iCol = iCol;
			oCellInfo.iRowSpan = iRowSpan;
			oCellInfo.iHeight = 0;
			oCellInfo.isLevelCell = this.isColHeaderArea() && oCell.getLevel && oCell.getLevel() > -1;
			oCellInfo.isEntryEnabled = false; // oCell.isEntryEnabled();
			that.aRowGranularity[iRow] = oCellInfo;
		}
	}

	return iRowSpan === 1;
};

sap.zen.crosstab.BaseArea.prototype.measureColGranularityCells = function () {
	var iCol = 0;
	var oCellInfo = null;
	var oDomCell = null;
	var iCellWidth = 0;
	var iWidth = 0;
	var iModulo = 0;
	var i = 0;

	if (this.bColGranularityCalculatedAndMeasured === false) {
		this.aColWidths = [];

		for (iCol = this.iRenderStartCol; iCol < this.aColGranularity.length; iCol++) {
			oCellInfo = this.aColGranularity[iCol];
			if (oCellInfo) {
				oDomCell = jQuery.sap.byId(oCellInfo.sId);
				if (oDomCell) {
					// hack: increase width by 1 px to compensate for rasterizing
					// problems in IE9, especially when using text with ellipses
					iCellWidth = oDomCell.outerWidth() + 1;
					iWidth = Math.floor(iCellWidth / oCellInfo.iColSpan);
					iModulo = iCellWidth % oCellInfo.iColSpan;

					for (i = 0; i < oCellInfo.iColSpan; i++) {
						if (this.aCalculatedColWidths[iCol + i] && !this.aTemporaryColWidths[iCol + i]) {
							this.aColWidths[iCol + i] = this.aCalculatedColWidths[iCol + i];
						} else {
							if (i === oCellInfo.iColSpan - 1) {
								iWidth += iModulo;
							}
							if (this.aColWidths[iCol + i]) {
								if (this.aColWidths[iCol + i] < iWidth) {
									this.aColWidths[iCol + i] = iWidth;
								}
							} else {
								this.aColWidths[iCol + i] = iWidth;
							}
						}
					}
				}
			}
		}

		// When there are Exceptions with symbols present, the cell width needs to be increased because the symbol is a
		// background image and not measured
		if (sap.zen.crosstab.utils.Utils.hasEntries(this.oColsWithSymbolException)) {
			var correctedWidth = null;
			var width;
			for ( var colIndex in this.oColsWithSymbolException) {
				if (this.oColsWithSymbolException.hasOwnProperty(colIndex)) {
					correctedWidth = this.oColsWithSymbolException[colIndex];
					if (correctedWidth === undefined || correctedWidth === null || isNaN(correctedWidth) === true) {
						width = this.aColWidths[colIndex];
						correctedWidth = width + this.oCrosstab.getExceptionSymbolWidth();
						this.oColsWithSymbolException[colIndex] = correctedWidth;
					}
					this.aColWidths[colIndex] = this.oColsWithSymbolException[colIndex];
				}
			}
		}

		// user defined column widths take precedence
		if (this.oColUserWidth && sap.zen.crosstab.utils.Utils.hasEntries(this.oColUserWidth)) {
			var iUserColWidth;
			for (var i = 0; i < this.aColWidths.length; i++) {
				iUserColWidth = this.determineUserColWidth(i);
				if (iUserColWidth > -1) {
					this.aColWidths[i] = iUserColWidth;
				}
			}
		}
	}
	return this.aColWidths;
};

sap.zen.crosstab.BaseArea.prototype.measureRowGranularityCells = function () {
	var iRow = 0;
	var oCellInfo = null;
	var oDomCell = null;
	var iCellHeight = 0;
	var iHeight = 0;
	var iModulo = 0;
	var i = 0;

	this.aLevelCells = [];
	this.aRowHeights = [];

	for (iRow = this.iRenderStartRow; iRow < this.aRowGranularity.length; iRow++) {
		oCellInfo = this.aRowGranularity[iRow];
		if (oCellInfo) {
			oDomCell = jQuery.sap.byId(oCellInfo.sId);
			if (oDomCell) {
				iCellHeight = oDomCell.outerHeight();
				iHeight = Math.floor(iCellHeight / oCellInfo.iRowSpan);
				iModulo = iCellHeight % oCellInfo.iRowSpan;

				if (oCellInfo.isLevelCell) {
					for (i = 0; i < oCellInfo.iRowSpan; i++) {
						if (i === oCellInfo.iRowSpan - 1) {
							iHeight += iModulo;
						}
						if (this.aRowHeights[iRow + i]) {
							if (this.aRowHeights[iRow + i] < iHeight) {
								this.aRowHeights[iRow + i] = iHeight;
							}
						} else {
							this.aRowHeights[iRow + i] = iHeight;
						}
						if (this.aCalculatedRowHeights[iRow + i] && !this.aTemporaryRowHeights[iRow + i]) {
							if (this.aRowHeights[iRow + i] < this.aCalculatedRowHeights[iRow + i]) {
								this.aRowHeights[iRow + i] = this.aCalculatedRowHeights[iRow + i];
							}
						}
						this.aLevelCells[iRow + i] = true;
					}
				} else {
					for (i = 0; i < oCellInfo.iRowSpan; i++) {
						if (this.aCalculatedRowHeights[iRow + i] && !this.aTemporaryRowHeights[iRow + i]) {
							this.aRowHeights[iRow + i] = this.aCalculatedRowHeights[iRow + i];
						} else {
							if (i === oCellInfo.iRowSpan - 1) {
								iHeight += iModulo;
							}
							if (this.aRowHeights[iRow + i]) {
								if (this.aRowHeights[iRow + i] < iHeight) {
									this.aRowHeights[iRow + i] = iHeight;
								}
							} else {
								this.aRowHeights[iRow + i] = iHeight;
							}
						}
						this.aLevelCells[iRow + i] = false;
					}
				}
			}
		}
	}
	return this.aRowHeights;
};

sap.zen.crosstab.BaseArea.prototype.getLevelCells = function () {
	return this.aLevelCells;
};

sap.zen.crosstab.BaseArea.prototype.hasLoadingPages = function () {
	return this.iLoadingPageCnt > 0;
};

sap.zen.crosstab.BaseArea.prototype.getCalculatedColWidths = function () {
	return this.aCalculatedColWidths;
};

sap.zen.crosstab.BaseArea.prototype.getCalculatedRowHeights = function () {
	return this.aCalculatedRowHeights;
};

sap.zen.crosstab.BaseArea.prototype.addPageToTempArray = function (aArray, iIndex, sPageKey) {
	if (!aArray[iIndex]) {
		aArray[iIndex] = [];
	}
	aArray[iIndex].push(sPageKey);
};

sap.zen.crosstab.BaseArea.prototype.removePageFromTempArray = function (aArray, iIndex, sPageKey) {
	var aPageArray = aArray[iIndex];
	if (aPageArray) {
		for (var i = 0; i < aPageArray.length; i++) {
			if (aPageArray[i] === sPageKey) {
				aPageArray.splice(i, 1);
				break;
			}
		}
		if (aPageArray.length === 0) {
			aArray[iIndex] = null;
		}
	}
};

sap.zen.crosstab.BaseArea.prototype.changeColWidthTemporaryFlag = function (iCol, sPageKey, bIsTemporary) {
	// if there is already a measurement we don't need to flag as temporary because it must be valid
	if (!this.aCalculatedColWidths[iCol] && bIsTemporary) {
		this.addPageToTempArray(this.aTemporaryColWidths, iCol, sPageKey);
	} else if (!bIsTemporary && this.aTemporaryColWidths[iCol]) {
		this.removePageFromTempArray(this.aTemporaryColWidths, iCol, sPageKey);
		if (!this.aTemporaryColWidths[iCol]) {
			this.aCalculatedColWidths[iCol] = null;
		}
	}
};

sap.zen.crosstab.BaseArea.prototype.changeRowHeightTemporaryFlag = function (iRow, sPageKey, bIsTemporary) {
	if (!this.aCalculatedRowHeights[iRow] && bIsTemporary) {
		this.addPageToTempArray(this.aTemporaryRowHeights, iRow, sPageKey);
	} else if (!bIsTemporary && this.aTemporaryRowHeights[iRow]) {
		this.removePageFromTempArray(this.aTemporaryRowHeights, iRow, sPageKey);
		if (!this.aTemporaryRowHeights[iRow]) {
			this.aCalculatedRowHeights[iRow] = null;
		}
	}
};

sap.zen.crosstab.BaseArea.prototype.applyColWidthsToGranularityCells = function (aColWidths, bForceColWidth) {
	var iCol = 0;
	var oCellInfo = null;
	var i = 0;
	var iWidth = 0;
	var iCalculatedWidth = 0;

	for (iCol = this.iRenderStartCol; iCol < this.aColGranularity.length; iCol++) {
		oCellInfo = this.aColGranularity[iCol];
		if (oCellInfo) {
			iWidth = 0;
			for (i = 0; i < oCellInfo.iColSpan; i++) {
				iCalculatedWidth = aColWidths[iCol + i];
				iWidth += iCalculatedWidth;
				if (!this.aCalculatedColWidths[iCol + i] || bForceColWidth === true) {
					this.aCalculatedColWidths[iCol + i] = iCalculatedWidth;
				}
			}
			oCellInfo.iWidth = iWidth;
		}
	}
};

sap.zen.crosstab.BaseArea.prototype.applyRowHeightsToGranularityCells = function (aRowHeights, aLevelCells) {
	var iRow = 0;
	var oCellInfo = null;
	var i = 0;
	var iHeight = 0;
	var iCalculatedHeight = 0;

	for (iRow = this.iRenderStartRow; iRow < this.aRowGranularity.length; iRow++) {
		oCellInfo = this.aRowGranularity[iRow];
		if (oCellInfo) {
			iHeight = 0;
			for (i = 0; i < oCellInfo.iRowSpan; i++) {
				iCalculatedHeight = aRowHeights[iRow + i];
				iHeight += iCalculatedHeight;
				if (!this.aCalculatedRowHeights[iRow + i] || (aLevelCells && aLevelCells[iRow + i])) {
					this.aCalculatedRowHeights[iRow + i] = iCalculatedHeight;
				}
			}
			oCellInfo.iHeight = iHeight;
		}
	}
};

sap.zen.crosstab.BaseArea.prototype.getColGranularity = function () {
	return this.aColGranularity;
};

sap.zen.crosstab.BaseArea.prototype.getRowGranularity = function () {
	return this.aRowGranularity;
};

sap.zen.crosstab.BaseArea.prototype.getCellDirect = function (iRow, iCol) {
	return this.oDataModel.getCellDirect(iRow, iCol);
};

sap.zen.crosstab.BaseArea.prototype.getCell = function (iRow, iCol) {
	return this.oDataModel.getCell(iRow, iCol);
};

sap.zen.crosstab.BaseArea.prototype.renderBaseArea = function (oRenderManager) {
	this.oCrosstab.getRenderEngine().renderArea(this, oRenderManager);
};

sap.zen.crosstab.BaseArea.prototype.setRowCnt = function (iRowCnt) {
	this.oDataModel.setRowCnt(iRowCnt);
};

sap.zen.crosstab.BaseArea.prototype.getRowCnt = function () {
	return this.oDataModel.getRowCnt();
};

sap.zen.crosstab.BaseArea.prototype.setColCnt = function (iColCnt) {
	this.oDataModel.setColCnt(iColCnt);
};

sap.zen.crosstab.BaseArea.prototype.getColCnt = function () {
	return this.oDataModel.getColCnt();
};

sap.zen.crosstab.BaseArea.prototype.clear = function (bKeepUserColWidths, bKeepCalculatedColWidths) {
	this.oDataModel.clear();
	this.iRenderStartRow = 0;
	this.iRenderRowCnt = 0;
	this.iRenderStartCol = 0;
	this.iRenderColCnt = 0;
	this.bHasContent = false;
	this.fRenderCellCallback = null;
	this.aColGranularity = [];
	this.aColWidths = [];

	this.aTemporaryColWidths = [];

	this.aRowGranularity = [];
	this.aRowHeights = [];

	this.aCalculatedRowHeights = [];
	this.aTemporaryRowHeights = [];

	this.iLoadingPageCnt = 0;

	this.aLevelCells = [];

	this.oColUserWidth = {};

	this.oColsWithSymbolException = {};

	if (!bKeepUserColWidths) {
		this.oUserResizedCols = {};
	}
	
	if (!bKeepCalculatedColWidths) {
		this.aCalculatedColWidths = [];
	}
	
	this.oCellsWithLineBreakTexts = null;
};

sap.zen.crosstab.BaseArea.prototype.getDataModel = function () {
	return this.oDataModel;
};

sap.zen.crosstab.BaseArea.prototype.setDataModel = function (oDataModel) {
	this.oDataModel = oDataModel;
};

sap.zen.crosstab.BaseArea.prototype.getId = function () {
	return this.sId;
};

sap.zen.crosstab.BaseArea.prototype.setId = function (sId) {
	this.sId = sId;
};

sap.zen.crosstab.BaseArea.prototype.getAreaType = function () {
	return this.sAreaType;
};

sap.zen.crosstab.BaseArea.prototype.getCrosstab = function () {
	return this.oCrosstab;
};

sap.zen.crosstab.BaseArea.prototype.getPageManager = function () {
	return this.oCrosstab.getPageManager();
};

sap.zen.crosstab.BaseArea.prototype.getCellWithColSpan = function (iRow, iCol, bDoNotLoadPage) {
	return this.oDataModel.getCellWithColSpan(iRow, iCol, bDoNotLoadPage);
};

sap.zen.crosstab.BaseArea.prototype.getCellWithRowSpan = function (iRow, iCol, bDoNotLoadPage) {
	return this.oDataModel.getCellWithRowSpan(iRow, iCol, bDoNotLoadPage);
};

sap.zen.crosstab.BaseArea.prototype.setRenderSize = function (iRenderStartRow, iRenderRowCnt, iRenderStartCol,
		iRenderColCnt) {
	this.iRenderStartRow = iRenderStartRow;
	this.iRenderRowCnt = iRenderRowCnt;
	this.iRenderStartCol = iRenderStartCol;
	this.iRenderColCnt = iRenderColCnt;
};

sap.zen.crosstab.BaseArea.prototype.setRenderStartRow = function (iRow) {
	this.iRenderStartRow = iRow;
};

sap.zen.crosstab.BaseArea.prototype.setRenderRowCnt = function (iRowCnt) {
	this.iRenderRowCnt = iRowCnt;
};

sap.zen.crosstab.BaseArea.prototype.setRenderStartCol = function (iCol) {
	this.iRenderStartCol = iCol;
};

sap.zen.crosstab.BaseArea.prototype.setRenderColCnt = function (iColCnt) {
	this.iRenderColCnt = iColCnt;
};

sap.zen.crosstab.BaseArea.prototype.getRenderStartRow = function () {
	return this.iRenderStartRow;
};

sap.zen.crosstab.BaseArea.prototype.getRenderRowCnt = function () {
	return this.iRenderRowCnt;
};

sap.zen.crosstab.BaseArea.prototype.getRenderStartCol = function () {
	return this.iRenderStartCol;
};

sap.zen.crosstab.BaseArea.prototype.getRenderColCnt = function () {
	return this.iRenderColCnt;
};

sap.zen.crosstab.BaseArea.prototype.getRenderedCellsByCol = function (iCol) {
	return this.oDataModel.getCellsByCol(iCol, this.iRenderStartRow, this.iRenderRowCnt);
};

sap.zen.crosstab.BaseArea.prototype.getRenderedCellsByRow = function (iRow) {
	return this.oDataModel.getCellsByRow(iRow, this.iRenderStartCol, this.iRenderColCnt);
};

sap.zen.crosstab.BaseArea.prototype.resetColWidth = function (iCol) {
	this.aCalculatedColWidths[iCol] = 0;
};

sap.zen.crosstab.BaseArea.prototype.getColWidth = function (iCol) {
	return this.aCalculatedColWidths[iCol];
};

sap.zen.crosstab.BaseArea.prototype.getColWidths = function () {
	return this.aCalculatedColWidths;
};

sap.zen.crosstab.BaseArea.prototype.setColWidths = function (aColWidths) {
	this.aCalculatedColWidths = aColWidths;
};

sap.zen.crosstab.BaseArea.prototype.determineUserColWidth = function (iCol) {
	var iColWidth = -1;
	if (!this.oUserResizedCols[iCol]) {
		var oWidthInfo = this.oColUserWidth[iCol];
		var oStarInfo = this.oColUserWidth['*'];

		if (oWidthInfo && !oWidthInfo.ignore) {
			iColWidth = oWidthInfo.width;
		} else {
			if (oStarInfo) {
				if (oWidthInfo) {
					if (!oWidthInfo.ignore) {
						iColWidth = oStarInfo.width;
					}
				} else {
					iColWidth = oStarInfo.width;
				}
			}
		}
	}
	return iColWidth;
};

sap.zen.crosstab.BaseArea.prototype.getFinalColWidth = function (iCol) {
	var iColWidth = 0;

	if (!this.hasLoadingPages()) {
		iColWidth = this.getColWidth(iCol);
	}

	var iUserColWidth = this.determineUserColWidth(iCol);
	if (iUserColWidth > -1) {
		iColWidth = iUserColWidth;
	}

	return iColWidth;
};

sap.zen.crosstab.BaseArea.prototype.getRowHeight = function (iRow) {
	return this.aCalculatedRowHeights[iRow];
};

sap.zen.crosstab.BaseArea.prototype.getFinalRowHeight = function (iRow) {
	var iRowHeight = 0;
	if (!this.hasLoadingPages()) {
		iRowHeight = this.getRowHeight(iRow);
	}
	return iRowHeight;
};

sap.zen.crosstab.BaseArea.prototype.hasContent = function () {
	return this.bHasContent;
};

sap.zen.crosstab.BaseArea.prototype.registerRenderCellCallback = function (fCallback) {
	this.fRenderCellCallback = fCallback;
};

sap.zen.crosstab.BaseArea.prototype.removeRenderCellCallback = function () {
	this.fRenderCellCallback = null;
};

sap.zen.crosstab.BaseArea.prototype.getRenderCellCallback = function () {
	return this.fRenderCellCallback;
};

sap.zen.crosstab.BaseArea.prototype.isDimHeaderArea = function () {
	return this.sAreaType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_DIMENSION_HEADER_AREA;
};

sap.zen.crosstab.BaseArea.prototype.isRowHeaderArea = function () {
	return this.sAreaType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_ROW_HEADER_AREA;
};

sap.zen.crosstab.BaseArea.prototype.isColHeaderArea = function () {
	return this.sAreaType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_COLUMN_HEADER_AREA;
};

sap.zen.crosstab.BaseArea.prototype.isDataArea = function () {
	return this.sAreaType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_DATA_AREA;
};

// static helper
sap.zen.crosstab.BaseArea.getArea = function (oCrosstab, sAreaType) {
	if (sAreaType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_DIMENSION_HEADER_AREA) {
		return oCrosstab.getDimensionHeaderArea();
	} else if (sAreaType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_ROW_HEADER_AREA) {
		return oCrosstab.getRowHeaderArea();
	} else if (sAreaType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_COLUMN_HEADER_AREA) {
		return oCrosstab.getColumnHeaderArea();
	} else if (sAreaType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_DATA_AREA) {
		return oCrosstab.getDataArea();
	} else {
		return null;
	}
};

sap.zen.crosstab.BaseArea.prototype.increaseLoadingPageCnt = function () {
	this.iLoadingPageCnt++;
};

sap.zen.crosstab.BaseArea.prototype.decreaseLoadingPageCnt = function () {
	if (this.iLoadingPageCnt > 0) {
		this.iLoadingPageCnt--;
	}
};

// Area rendering helpers
sap.zen.crosstab.BaseArea.prototype.getLoadingPageCnt = function () {
	return this.iLoadingPageCnt;
};

sap.zen.crosstab.BaseArea.prototype.openContainerCell = function (oRm, sClass) {
	oRm.write("<td");
	oRm.addStyle("border-spacing", "0px");
	oRm.addStyle("padding", "0px");
	oRm.addStyle("border-width", "0px");
	oRm.addStyle("margin", "0px");
	oRm.writeStyles();
	if (sClass) {
		oRm.writeAttribute("class", sClass);
	}
	oRm.write(">");
};

sap.zen.crosstab.BaseArea.prototype.closeContainerCell = function (oRm) {
	oRm.write("</td>");
};

sap.zen.crosstab.BaseArea.prototype.openContainerTable = function (oRm) {
	oRm.write("<table");
	oRm.writeAttribute("id", this.sId + "_container");
	oRm.addStyle("border-collapse", "collapse");
	oRm.addStyle("border-spacing", "0px");
	oRm.addStyle("padding", "0px");
	oRm.addStyle("border-width", "0px");
	oRm.addStyle("margin", "0px");
	oRm.writeStyles();
	oRm.write(">");
};

sap.zen.crosstab.BaseArea.prototype.closeContainerTable = function (oRm) {
	oRm.write("</table>");
};

sap.zen.crosstab.BaseArea.prototype.renderContainerStructure = function (oRm, sStyle, bVCutOff, bHCutOff) {
	this.openContainerTable(oRm);

	// first row
	oRm.write("<tr>");

	this.openContainerCell(oRm);

	oRm.write("<table");
	oRm.writeAttribute("id", this.sId);
	oRm.writeAttribute("class", sStyle);
	oRm.write(">");
	oRm.write("</table>");

	this.closeContainerCell(oRm);

	if (bHCutOff) {
		this.openContainerCell(oRm, "sapzencrosstab-HorizontalCutOff-" + this.getAreaType());

		oRm.write("<div");
		oRm.writeAttribute("class", "sapzencrosstab-HorizontalCutOffSpacer");
		oRm.write(">");
		oRm.write("</div>");

		this.closeContainerCell(oRm);
	}

	oRm.write("</tr>");

	if (bVCutOff) {
		// second row
		oRm.write("<tr>");

		this.openContainerCell(oRm, "sapzencrosstab-VerticalCutOff-" + this.getAreaType());
		oRm.write("<div");
		oRm.writeAttribute("class", "sapzencrosstab-VerticalCutOffSpacer");
		oRm.write(">");
		oRm.write("</div>");

		this.closeContainerCell(oRm);

		if (bHCutOff) {
			this.openContainerCell(oRm, "sapzencrosstab-CutOffCorner");
			this.closeContainerCell(oRm);
		}

		oRm.write("</tr>");
	}

	this.closeContainerTable(oRm);
};

sap.zen.crosstab.BaseArea.prototype.columnHasSymbolException = function (iCol) {
	this.oColsWithSymbolException[iCol] = null;
};

sap.zen.crosstab.BaseArea.prototype.setColUserWidth = function (iCol, iWidthInPx, bIgnore) {
	this.oColUserWidth[iCol] = {
		"width": iWidthInPx,
		"ignore": bIgnore
	};
};

sap.zen.crosstab.BaseArea.prototype.clearColUserWidth = function (iCol) {
	delete this.oColUserWidth[iCol];
};

sap.zen.crosstab.BaseArea.prototype.hasUserColWidths = function () {
	var bHasUserColWidths = this.oColUserWidth && sap.zen.crosstab.utils.Utils.hasEntries(this.oColUserWidth);
	return bHasUserColWidths;
};

sap.zen.crosstab.BaseArea.prototype.isFixedColWidthSet = function (iCol) {
	if (!this.hasUserColWidths() && !sap.zen.crosstab.utils.Utils.hasEntries(this.oUserResizedCols)) {
		return false;
	}
	if (this.oColUserWidth[iCol] !== undefined) {
		return true;
	}
	if (this.oUserResizedCols[iCol] !== undefined) {
		return true;
	}
	return false;
};

sap.zen.crosstab.BaseArea.prototype.setColGranularityCalculatedAndMeasured = function (bColCalculationAndMeasuringDone) {
	this.bColGranularityCalculatedAndMeasured = bColCalculationAndMeasuringDone;
};

sap.zen.crosstab.BaseArea.prototype.setUserResizedCol = function (iCol) {
	this.oUserResizedCols[iCol] = true;
};

sap.zen.crosstab.BaseArea.prototype.clearUserResizedCol = function (iCol) {
	delete this.oUserResizedCols[iCol];
};

sap.zen.crosstab.BaseArea.prototype.getCellsWithLineBreakTexts = function () {
	return this.oCellsWithLineBreakTexts;
};

}; // end of sap/zen/crosstab/BaseArea.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.ColumnHeaderArea') ) {
jQuery.sap.declare("sap.zen.crosstab.ColumnHeaderArea");



sap.zen.crosstab.ColumnHeaderArea = function (oCrosstab) {
	"use strict";
	sap.zen.crosstab.BaseArea.call(this, oCrosstab);
	this.sAreaType = sap.zen.crosstab.rendering.RenderingConstants.TYPE_COLUMN_HEADER_AREA;
	this.iRenderStartCol = 0;
	this.iRenderColCnt = 0;
	this.bLastPageLoaded = false;
};

sap.zen.crosstab.ColumnHeaderArea.prototype = jQuery.sap.newObject(sap.zen.crosstab.BaseArea.prototype);

sap.zen.crosstab.ColumnHeaderArea.prototype.renderArea = function (oRenderManager) {
	this.renderContainerStructure(oRenderManager, "sapzencrosstab-ColumnHeaderArea", false, this.oCrosstab.isHCutOff());
};

}; // end of sap/zen/crosstab/ColumnHeaderArea.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.DataArea') ) {
jQuery.sap.declare("sap.zen.crosstab.DataArea");



sap.zen.crosstab.DataArea = function (oCrosstab) {
	"use strict";
	sap.zen.crosstab.BaseArea.call(this, oCrosstab);
	this.sAreaType = sap.zen.crosstab.rendering.RenderingConstants.TYPE_DATA_AREA;
};

sap.zen.crosstab.DataArea.prototype = jQuery.sap.newObject(sap.zen.crosstab.BaseArea.prototype);

sap.zen.crosstab.DataArea.prototype.renderArea = function (oRenderManager) {
	this.renderContainerStructure(oRenderManager, "sapzencrosstab-DataArea", this.oCrosstab.isVCutOff(), this.oCrosstab
			.isHCutOff());
};

sap.zen.crosstab.DataArea.prototype.insertCell = function (oCell, iRow, iCol) {
	sap.zen.crosstab.BaseArea.prototype.insertCell.call(this, oCell, iRow, iCol);
	if (iCol === this.oDataModel.getColCnt() - 1 && oCell) {
		oCell.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_LAST_IN_ROW);
	}

	if (iRow === this.oDataModel.getRowCnt() - 1 && oCell) {
		oCell.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_LAST_IN_COL);
	}
};

}; // end of sap/zen/crosstab/DataArea.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.DimensionHeaderArea') ) {
jQuery.sap.declare("sap.zen.crosstab.DimensionHeaderArea");



sap.zen.crosstab.DimensionHeaderArea = function (oCrosstab) {
	"use strict";
	sap.zen.crosstab.BaseArea.call(this, oCrosstab);
	this.sAreaType = sap.zen.crosstab.rendering.RenderingConstants.TYPE_DIMENSION_HEADER_AREA;
};

sap.zen.crosstab.DimensionHeaderArea.prototype = jQuery.sap.newObject(sap.zen.crosstab.BaseArea.prototype);

sap.zen.crosstab.DimensionHeaderArea.prototype.renderArea = function (oRenderManager) {
	var sClasses = "sapzencrosstab-DimensionHeaderArea";
	if (this.oCrosstab.getPropertyBag().isMobileMode()) {
		sClasses += " sapzencrosstab-MobileHeaderSeparator"; 
	}
	this.renderContainerStructure(oRenderManager, sClasses, false, false);
};

sap.zen.crosstab.DimensionHeaderArea.prototype.getPageManager = function () {
	// runtime contract: dim header will always be completely on the first page.
	// Hence, we don't need a page manager.
	return null;
};

}; // end of sap/zen/crosstab/DimensionHeaderArea.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.EventHandler') ) {
jQuery.sap.declare("sap.zen.crosstab.EventHandler");






sap.zen.crosstab.EventHandler = function (oCrosstab) {
	"use strict";
	
	var that = this;
	var oCrossRequestManager = oCrosstab.getRenderEngine().getCrossRequestManager();
	var oCurrentlyHoveredCell = null;
	var oSelectedCellData = null;
	var oDataArea = oCrosstab.getDataArea();
	var oRowHeaderArea = oCrosstab.getRowHeaderArea();
	var oColHeaderArea = oCrosstab.getColumnHeaderArea();
	var oDimensionHeaderArea = oCrosstab.getDimensionHeaderArea();
	var oHighlightingInfo = null;
	var oKeyboardHandler = new sap.zen.crosstab.keyboard.CrosstabKeyboardNavHandler(oCrosstab, this);
	var sMouseDownTargetId = null;
	var bPreventClickAction = false;
	var oTouchHandler = null;

	function isPreventAction (oCurrentlySelectedCell, oCell, oCrosstab) {
		var bPreventAction = false;
		if (oCrosstab.isDataSelectionMode()) {
			if (oCurrentlySelectedCell === oCell) {
				bPreventAction = true;
			}
		}
		return bPreventAction;
	}

	this.removeHighlighting = function (oHeaderCell) {
		var oDomHeaderCell = $('#' + oHeaderCell.getId());
		if (oDomHeaderCell.hasClass("sapzencrosstab-HighlightRowHeaderCell")
				|| oDomHeaderCell.hasClass("sapzencrosstab-HighlightColHeaderCell")) {
			this.applySelectionEffect(oHeaderCell, getCellHighlightFunclets(false));
		}
	};

	this.handleRowColSelection = function (e) {
		if (!oCurrentlyHoveredCell && oCrosstab.getPropertyBag().isMobileMode()) {
			oCurrentlyHoveredCell = getParentSelectableCell(e);
		}
		if (oCurrentlyHoveredCell) {
			var oCurrentlySelectedCell = that.getSelectedCell();
			if (!oCurrentlySelectedCell) {
				oCurrentlySelectedCell = getParentSelectableCell(e);
				if (oCurrentlySelectedCell) {
					var oFunclets = getCellSelectFunclets(true);
					that.applySelectionEffect(oCurrentlySelectedCell, oFunclets);
					that.setSelectedCell(oCurrentlySelectedCell);
					that.sendSelectCommand(oCurrentlySelectedCell);
					sap.zen.crosstab.utils.Utils.cancelEvent(e);
				}
			} else {
				var oCell = getParentSelectableCell(e);
				if (oCell && oCell.isSelectable && oCell.isSelectable()) {
					var bDoNothing = false;
					if (oCurrentlySelectedCell) {
						// if there was already something selected, remove the selection effects
						// in case we are in dataselection mode, a click on a selected cell shall not remove
						// the selection. So check this.
						bDoNothing = isPreventAction(oCurrentlySelectedCell, oCell, oCrosstab);
						if (!bDoNothing) {
							var oFunclets = getCellSelectFunclets(false);
							that.applySelectionEffect(oCurrentlySelectedCell, oFunclets);
						}
					}
					if (oCell === oCurrentlySelectedCell) {
						if (!bDoNothing) {
							oCurrentlySelectedCell = null;
						}
					} else {
						oCurrentlySelectedCell = oCell;
					}
					if (oCurrentlySelectedCell) {
						if (!bDoNothing) {
							// only step 1: ideally, the highlighted state is returned
							// via callback and then rendered after a fresh roundtrip
							that.highlightCells();
							var oFunclets = getCellSelectFunclets(true);
							that.applySelectionEffect(oCurrentlySelectedCell, oFunclets);
						}
					}
					if (!bDoNothing) {
						that.setSelectedCell(oCurrentlySelectedCell);
						that.sendSelectCommand(oCurrentlySelectedCell);
					}
					sap.zen.crosstab.utils.Utils.cancelEvent(e);
				}
			}
			if (oCrosstab.getPropertyBag().isMobileMode()) {
				oCurrentlyHoveredCell = null;
			}
			return true;
		} else {
			// No selectable cell was clicked
			return false;
		}
	};

	this.handleHierarchyClick = function (e, sTargetId, sClickAction) {
		var oCell = getCellById(sTargetId);
		var sHierarchyAction = oCell.getHierarchyAction();
		var sDrillState = oCell.getDrillState();
		if (sDrillState !== "L") {
			if (oCell.getArea().isRowHeaderArea()) {
				oCrossRequestManager.saveColWidths();
			}
			oCrossRequestManager.saveTableDimensions();
			oCrossRequestManager.saveHScrollInfo(sClickAction);
			oCrossRequestManager.saveVScrollInfo(sClickAction);
			executeAction(sHierarchyAction);
		}
		sap.zen.crosstab.utils.Utils.cancelEvent(e);
	};

	this.handleSortClick = function (e, sTargetId, sClickAction) {
		var oCell = getCellById(sTargetId);
		var sSortAction = oCell.getSortAction();
		if (sSortAction || oCrosstab.getTestProxy().getTestAction()) {
			oCrossRequestManager.saveVScrollInfo(sClickAction);
			oCrossRequestManager.saveHScrollInfo(sClickAction);
			oCrossRequestManager.saveColWidths();
			if (!oCrosstab.getTestProxy().getTestAction()) {
				executeAction(sSortAction);
			}
		}
		sap.zen.crosstab.utils.Utils.cancelEvent(e);
	};

	this.handleDataCellSelection = function (e) {
		if (oCurrentlyHoveredCell) {
			if (!oSelectedCellData) {
				var oFunclets = getCellSelectFunclets(true);
				that.applySelectionEffect(oCurrentlyHoveredCell, oFunclets);
				that.setSelectedCell(oCurrentlyHoveredCell);
				that.sendSelectCommand(oCurrentlyHoveredCell);
				sap.zen.crosstab.utils.Utils.cancelEvent(e);
			} else {
				var oCell = getParentSelectableCell(e);
				var oCurrentlySelectedCell = oDataArea.getCell(oSelectedCellData.iRow, oSelectedCellData.iCol);
				var oFunclets = getCellSelectFunclets(false);
				that.applySelectionEffect(oCurrentlySelectedCell, oFunclets);
				if (oCell) {
					if (oCell === oCurrentlySelectedCell) {
						oCurrentlySelectedCell = null;
					} else {
						oCurrentlySelectedCell = oCell;
					}
					if (oCurrentlySelectedCell) {
						var oFunclets = getCellSelectFunclets(true);
						that.applySelectionEffect(oCurrentlySelectedCell, oFunclets);
					}
					that.setSelectedCell(oCurrentlySelectedCell);
					that.sendSelectCommand(oCurrentlySelectedCell);
					sap.zen.crosstab.utils.Utils.cancelEvent(e);
				}
			}
		}
	};

	this.findTargetId = function (oDomTarget) {
		var sTargetId = null;
		var oJqClosestDiv = $(oDomTarget).closest("div");
		if (oJqClosestDiv.length > 0) {
			var sId = oJqClosestDiv.attr("id");
			if (sId) {
				var idx = sId.indexOf("_contentDiv");
				if (idx > -1) {
					sTargetId = sId.slice(0, idx);
				}
			}
		}
		return sTargetId;
	};

	this.executeOnClickAction = function (e) {
		if (bPreventClickAction) {
			return;
		}
		sMouseDownTargetId = null;
		bPreventClickAction = false;
		var sTargetId = e.target.id;

		if (!sTargetId) {
			sTargetId = that.findTargetId(e.target);
		}

		if (!sTargetId) {
			return;
		}
		var sClickAction = getActionById(sTargetId);

		if (sClickAction === "sort") {
			that.handleSortClick(e, sTargetId, sClickAction);
		} else if (sClickAction === "hier") {
			that.handleHierarchyClick(e, sTargetId, sClickAction);
		} else if (sClickAction === "__ce") {
			if (oCrosstab.hasLoadingPages()) {
				sap.zen.crosstab.utils.Utils.cancelEvent(e);
				return;
			}
			var bIsSelectionEnabled = oCrosstab.getPropertyBag().isSelectionEnabled();
			if (bIsSelectionEnabled && oCrosstab.isSingleDataCellSelection() === true) {
				that.handleDataCellSelection(e);
			} else if (bIsSelectionEnabled) {
				var bWasSelection = that.handleRowColSelection(e);
				if (!bWasSelection) {
					that.handleInputEnabledCell(sTargetId, -1, -1);
				}
			} else {
				that.handleInputEnabledCell(sTargetId, -1, -1);
			}
		} else if (sClickAction === "vhlp") {
			that.handleValueHelpClick(sTargetId);
		}
		sap.zen.crosstab.utils.Utils.cancelEvent(e);
	};

	this.getCellIdFromContenDivId = function (sId) {
		var i = sId.indexOf("_contentDiv");
		if (i > -1) {
			sId = sId.slice(0, i);
		} else {
			i = sId.indexOf("_textContentDiv");
			if (i > -1) {
				sId = sId.slice(0, i);
			}
		}
		return sId;
	};

	this.provideInputEnabledCell = function (oModelCell, sTargetId, oContentDiv, iSelectionStartPos, iSelectionEndPos) {
		var oInputField = oContentDiv.find("input");

		if (oInputField.length === 0) {
			var sRenderText = oContentDiv.text();
			var html = oContentDiv.html();
			var bCellIsDataCell = oModelCell.getArea().isDataArea();

			var sSetContentDivWidth = null;

			var executeTransferData = function (sValue) {
				// Cut away the unit if the input was provided with a unit, otherwise the input is invalid
				var sUnit = oModelCell.getUnit();
				if (sUnit && sUnit !== "") {
					var iUnitIndex = sValue.toUpperCase().indexOf(sUnit.toUpperCase());
					if (iUnitIndex !== -1) {
						if (iUnitIndex === 0) {
							// leading unit
							sValue = sValue.substring(iUnitIndex + sUnit.length);
						} else {
							// trailing unit
							sValue = sValue.substring(0, iUnitIndex);
						}

					}
				}

				var iOffset = oCrosstab.calculateOffset(oModelCell);

				// Trim the input, leading and trailing whitespaces lead to errors
				sValue = $.trim(sValue);

				var sTransferDataCommand = oCrosstab.getTransferDataCommand();
				sTransferDataCommand = sTransferDataCommand.replace("__ROW__", oModelCell.getRow() + "");
				sTransferDataCommand = sTransferDataCommand.replace("__COL__", (oModelCell.getCol() - iOffset) + "");
				sTransferDataCommand = sTransferDataCommand.replace("__VALUE__", sValue);
				sTransferDataCommand = sTransferDataCommand.replace("__CTYPE__", oModelCell.getPassiveCellType());

				oCrossRequestManager.saveVScrollInfo("plan");
				oCrossRequestManager.saveHScrollInfo("plan");
				oCrossRequestManager.saveColWidths();

				executeAction(sTransferDataCommand, true);
			};

			var onLoseFocus = function (e) {
				if (oInputField.val() !== sRenderText) {
					executeTransferData(oInputField.val());

					// This prevents that the previous entry shows up again in the cell while waiting for the delta with
					// the new value
					var sEncodedRenderText = $('<div/>').text(sRenderText).html();
					html = html.replace(sEncodedRenderText, oInputField.val());
				}
				onFocusLost(e);
			};
			
			var checkTargetIsInCrosstab = function(e) {
				var bIsInCrosstab = true;
				var sTargetId = null;
				var oJqTableDiv = null;
				var oJqTarget = null;
				// do keep focus if a value help is opening although the newly focused element is not part of the crosstab
				if (e && e.relatedTarget && e.relatedTarget.id && oCrosstab.getValueHelpStatus() !== sap.zen.crosstab.VHLP_STATUS_OPENING) {
					// does not work in FireFox yet (see https://bugzilla.mozilla.org/show_bug.cgi?id=962251)
					sTargetId = e.relatedTarget.id;
					oJqTarget = $('#' + sTargetId);
					oJqTableDiv = oCrosstab.getTableDiv();
					bIsInCrosstab = oJqTarget.closest(oJqTableDiv).length > 0;
				}
				return bIsInCrosstab;
			};

			var onFocusLost = function (e) {
				var oJqDiv = $('#' + sTargetId + "_contentDiv");
				oJqDiv.html(html);

				if (sSetContentDivWidth && bCellIsDataCell) {
					oJqDiv.width(sSetContentDivWidth);
				}
						
				if (checkTargetIsInCrosstab(e) === true) {
					oJqDiv.focus();
				} else {
					oKeyboardHandler.reset();
				}
			};

			var onInputFieldKeyDown = function (e) {
				if (e.which === 27) {
					onFocusLost();
					sap.zen.crosstab.utils.Utils.cancelEvent(e);
				}
				if (e.which === 13) {
					if (oInputField.val() !== sRenderText) {
						sap.zen.crosstab.utils.Utils.cancelEvent(e);
						executeTransferData(oInputField.val());
					} else {
						onFocusLost();
						if (oCrosstab.isIE8Mode()) {
							oKeyboardHandler.keyboardNavKeyHandler(e);
						}
					}
				}
				if (e.which === 38 || e.which === 40) {
					// enable vert keyboard navigation
					return true;
				}
				if (e.which === 37 || e.which === 39) {
					if (!e.ctrkKey && !e.altKey && !e.shiftKey) {
						// left/right keys must work in the input field to move back and forward in the text string.
						// however, left/right keys must not lead to leaving the cell/input field.
						// Hence, just prevent bubbling of the event to the navigation key handler, but still execute
						// the
						// default
						sap.zen.crosstab.utils.Utils.stopEventPropagation(e);
					}
					return true;
				}
			};

			var iContentDivWidth = 0;
			// content Div handling for data cells
			if (bCellIsDataCell) {
				iContentDivWidth = oContentDiv.innerWidth();
				sSetContentDivWidth = sap.zen.crosstab.utils.Utils.getWidthFromStyle(oContentDiv);
			}
			oContentDiv.html("<input id=\"" + sTargetId + "_input" + "\" type=\"text\" value=\"" + sRenderText
					+ "\" />");

			if (bCellIsDataCell) {
				oContentDiv.width(iContentDivWidth + "px");
			}
			oInputField = $('#' + sTargetId + "_input");
			oInputField.addClass("sapzencrosstab-EntryEnabledInput");
			oInputField.keydown(onInputFieldKeyDown);
			oInputField.focus();
			oCrosstab.getUtils().selectTextInInputField(oInputField, iSelectionStartPos, iSelectionEndPos);
			oInputField.on("focusout", onLoseFocus);
		} else {
			oCrosstab.getUtils().selectTextInInputField(oInputField, iSelectionStartPos, iSelectionEndPos);
		}
	};

	this.handleValueHelpClick = function (sTargetId) {
		var oCell = getCellById(sTargetId);
		if (oCell) {
			oKeyboardHandler.focusNewCell(oCell, -1, -1);
			var sCallValueHelpCommand = oCrosstab.getCallValueHelpCommand();

			var iOffset = oCrosstab.calculateOffset(oCell);

			oCrossRequestManager.saveVScrollInfo("plan");
			oCrossRequestManager.saveHScrollInfo("plan");
			oCrossRequestManager.saveColWidths();

			sCallValueHelpCommand = sCallValueHelpCommand.replace("__ROW__", oCell.getRow());
			sCallValueHelpCommand = sCallValueHelpCommand.replace("__COL__", oCell.getCol() - iOffset);
			sCallValueHelpCommand = sCallValueHelpCommand.replace("__DOM_REF_ID__", sTargetId);
			executeAction(sCallValueHelpCommand, true);
		}
	};

	this.handleInputEnabledCell = function (sTargetId, iSelectionStartPos, iSelectionEndPos) {
		if (sTargetId) {
			sTargetId = this.getCellIdFromContenDivId(sTargetId);
			if (sTargetId) {
				var oModelCell = sap.ui.getCore().getControl(sTargetId);
				if (oModelCell) {
					if (oModelCell.getArea().isDataArea() || oModelCell.getArea().isRowHeaderArea()) {
						oKeyboardHandler.focusNewCell(oModelCell, iSelectionStartPos, iSelectionEndPos);
					}
				}
			}
		}
	};

	this.sendSelectCommand = function (oCell) {
		var iRow = -1;
		var iCol = -1;
		var sAxis = "";

		if (oCell) {
			var oArea = oCell.getArea();
			// BICS values!
			if (oArea.isRowHeaderArea()) {
				sAxis = "ROWS";
			} else if (oArea.isColHeaderArea()) {
				sAxis = "COLUMNS";
			} else {
				sAxis = "DATA";
			}
			iRow = oCell.getRow();
			iCol = oCell.getCol();
		}

		var onSelectJsCommand = oCrosstab.getOnSelectCommand();
		onSelectJsCommand = onSelectJsCommand.replace("__ROW__", iRow + "");
		onSelectJsCommand = onSelectJsCommand.replace("__COL__", iCol + "");
		onSelectJsCommand = onSelectJsCommand.replace("__AXIS__", sAxis);
		executeAction(onSelectJsCommand, true);
	};
	
	this.resetColWidths = function(oCell, oUpperArea, oLowerArea) {
		var iEffectiveCol = oCell.getCol() + oCell.getColSpan() - 1;
		var iCol = 0;
		var iEndCol = oCell.getCol() + oCell.getColSpan() - oCell.getEffectiveColSpan();
		for (iCol = iEffectiveCol; iCol >= iEndCol; iCol--) {
			oUpperArea.resetColWidth(iCol);
			oLowerArea.resetColWidth(iCol);
			oUpperArea.setUserResizedCol(iCol);
			oLowerArea.setUserResizedCol(iCol);
		}
	};
	
	this.doColResize = function(oCell) {
		var oUpperArea = oCell.getArea();
		if (oUpperArea.isColHeaderArea()) {
			var oDataArea = oCrosstab.getDataArea();
			this.resetColWidths(oCell, oUpperArea, oDataArea);
		} else if (oUpperArea.isDimHeaderArea()) {
			var oRowHeaderArea = oCrosstab.getRowHeaderArea();
			this.resetColWidths(oCell, oUpperArea, oRowHeaderArea);
		}
		oCrosstab.invalidate();
	};

	this.executeOnDblClickAction = function (e) {
		var sTargetId = e.target.id;
		var sDblClickAction = getActionById(sTargetId);
		var oCell;

		if (sDblClickAction === "resi") {
			oCell = getCellById(sTargetId);
			that.doColResize(oCell);
			sap.zen.crosstab.utils.Utils.cancelEvent(e);
		}
	};

	this.rowSelectAction = function (iRow, iStartCol, oArea, fActionFunclet) {
		var iCol = 0;
		var oCell = null;
		var iColLimit = iStartCol + oArea.getRenderColCnt();

		for (iCol = iStartCol; iCol < iColLimit; iCol++) {
			oCell = oArea.getCell(iRow, iCol);
			if (oCell) {
				var oDomCell = $('#' + oCell.getId());
				if (oDomCell && oDomCell.length > 0) {
					fActionFunclet(oDomCell, oCell);
				}
			}
		}
	};

	this.colSelectAction = function (iStartRow, iCol, oArea, fActionFunclet) {
		var iRow = 0;
		var oCell = null;
		var iRowLimit = iStartRow + oArea.getRenderRowCnt();

		for (iRow = iStartRow; iRow < iRowLimit; iRow++) {
			oCell = oArea.getCell(iRow, iCol);
			if (oCell) {
				var oDomCell = $('#' + oCell.getId());
				if (oDomCell && oDomCell.length > 0) {
					fActionFunclet(oDomCell, oCell);
				}
			}
		}
	};

	this.setSelectionInfo = function (sAxis, iPos) {
		if (!oSelectedCellData) {
			oSelectedCellData = {};
			if (sAxis === "ROWS") {
				oSelectedCellData.sAreaType = sap.zen.crosstab.rendering.RenderingConstants.TYPE_ROW_HEADER_AREA;
			} else if (sAxis === "COLUMNS") {
				oSelectedCellData.sAreaType = sap.zen.crosstab.rendering.RenderingConstants.TYPE_COLUMN_HEADER_AREA;
			}
		}
		if (sAxis && oSelectedCellData) {
			if (sAxis === "ROWS") {
				if (oSelectedCellData.sAreaType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_ROW_HEADER_AREA) {
					oSelectedCellData.iRow = iPos;
				} else {
					this.resetSelection();
				}
			} else if (sAxis === "COLUMNS") {
				if (oSelectedCellData.sAreaType === sap.zen.crosstab.rendering.RenderingConstants.TYPE_COLUMN_HEADER_AREA) {
					oSelectedCellData.iCol = iPos;
				} else {
					this.resetSelection();
				}
			} else {
				this.resetSelection();
			}
		} else {
			this.resetSelection();
		}
	};

	this.setSingleDataCellSelectionInfo = function (iRowPos, iColPos) {
		if (!oSelectedCellData) {
			oSelectedCellData = {};
		}
		if (iRowPos > -1 && iColPos > -1) {
			oSelectedCellData.iRow = iRowPos;
			oSelectedCellData.iCol = iColPos;
			oSelectedCellData.sAreaType = sap.zen.crosstab.rendering.RenderingConstants.TYPE_DATA_AREA;
		} else {
			this.resetSelection();
		}
	};

	this.setHighlightingInfo = function (oHlInfo) {
		oHighlightingInfo = oHlInfo;
	};

	this.getSelectedCellData = function () {
		return oSelectedCellData;
	};

	this.resetSelection = function () {
		oSelectedCellData = null;
	};

	this.setSelectedCell = function (oCell) {
		if (oCell === null) {
			oSelectedCellData = null;
		} else {
			if (!oSelectedCellData) {
				oSelectedCellData = {};
			}
			oSelectedCellData.iRow = oCell.getRow();
			oSelectedCellData.iCol = oCell.getCol();
			oSelectedCellData.sAreaType = oCell.getArea().getAreaType();
		}
	};

	this.getSelectedCell = function () {
		var oCell = null;
		if (oSelectedCellData) {
			var oArea = sap.zen.crosstab.BaseArea.getArea(oCrosstab, oSelectedCellData.sAreaType);
			if (oSelectedCellData.iCol === undefined) {
				/*
				 * if oSelectedCellData is available, but no column information is set we need to find a selectable
				 * cells column to apply the selection effect. This can occur if an application hides a Crosstab with a
				 * selected row and then shows it again.
				 */
				var iCol = oArea.getColCnt() - 1;
				while (iCol >= 0 && !oCell) {
					oCell = oArea.getCell(oSelectedCellData.iRow, iCol);
					if (oCell && !((oCell.isSelectable && oCell.isSelectable()))) {
						oCell = null;
					}
					iCol--;
				}
			} else if (oSelectedCellData.iRow === undefined) {
				/*
				 * if oSelectedCellData is available, but no row information is set we need to find a selectable cells
				 * row to apply the selection effect. This can occur if an application hides a Crosstab with a selected
				 * column and then shows it again.
				 */
				var iRow = oArea.getRowCnt() - 1;
				while (iRow >= 0 && !oCell) {
					oCell = oArea.getCell(iRow, oSelectedCellData.iCol);
					if (oCell && !((oCell.isSelectable && oCell.isSelectable()))) {
						oCell = null;
					}
					iRow--;
				}

			} else {
				oCell = oArea.getCell(oSelectedCellData.iRow, oSelectedCellData.iCol);
			}
		}
		return oCell;
	};

	this.restoreSelection = function () {
		var oCell = this.getSelectedCell();
		if (oCell
				&& ((oCell.isSelectable && oCell.isSelectable() || oCrosstab.isSingleDataCellSelection()
						&& oCell.getArea().isDataArea()) || oCell.isLoading())) {
			var oFunclets = getCellSelectFunclets(true);
			this.applySelectionEffect(oCell, oFunclets);
			this.setSelectedCell(oCell);
		} else {
			this.setSelectedCell(null);
		}
		oCurrentlyHoveredCell = null;
	};

	this.doHighlighting = function (positions, oArea, fGetCount, fGetCell) {
		var i = 0;
		var length = positions.length;
		for (i = 0; i < length; i++) {
			var oCell = null;
			var pos = positions[i].pos;
			var iCoord = fGetCount(oArea);
			while (iCoord >= 0 && !oCell) {
				oCell = fGetCell(pos, iCoord, oArea);
				if (oCell && !((oCell.isSelectable && oCell.isSelectable()))) {
					oCell = null;
				}
				iCoord--;
			}
			if (oCell) {
				this.applySelectionEffect(oCell, getCellHighlightFunclets(true));
			}
		}
	};

	this.highlightCells = function () {
		if (oHighlightingInfo) {
			var rowPositions = oHighlightingInfo.rows;
			if (rowPositions) {
				this.doHighlighting(rowPositions, oCrosstab.getRowHeaderArea(), function (oArea) {
					return oArea.getColCnt() - 1;
				}, function (pos, iCoord, oArea) {
					return oArea.getCell(pos, iCoord);
				});
			}
			var colPositions = oHighlightingInfo.cols;
			if (colPositions) {
				this.doHighlighting(colPositions, oCrosstab.getColumnHeaderArea(), function (oArea) {
					return oArea.getRowCnt() - 1;
				}, function (pos, iCoord, oArea) {
					return oArea.getCell(iCoord, pos);
				});
			}
		}
	};

	this.applySelectionEffect = function (oCell, oFunclets) {
		var oArea = oCell.getArea();
		var iRow = oCell.getRow();
		var iCol = oCell.getCol();
		var oSelectableCell = null;

		if (oArea.isRowHeaderArea()) {
			oSelectableCell = oCell;
			while (oSelectableCell && oSelectableCell.isSelectable && oSelectableCell.isSelectable() && iCol >= 0) {
				iCol--;
				if (iCol >= 0) {
					oSelectableCell = oArea.getCell(iRow, iCol);
				} else {
					oSelectableCell = null;
				}
			}
			this.rowSelectAction(iRow, iCol + 1, oArea, oFunclets.fRowHeaderCellActionFunclet);
			this.rowSelectAction(iRow, oDataArea.getRenderStartCol(), oDataArea, oFunclets.fDataCellActionFunclet);
		} else if (oArea.isColHeaderArea()) {
			oSelectableCell = oCell;
			while (oSelectableCell && oSelectableCell.isSelectable && oSelectableCell.isSelectable() && iRow >= 0) {
				iRow--;
				if (iRow >= 0) {
					oSelectableCell = oArea.getCell(iRow, iCol);
				} else {
					oSelectableCell = null;
				}
			}
			this.colSelectAction(iRow + 1, iCol, oArea, oFunclets.fColHeaderCellActionFunclet);
			this.colSelectAction(oDataArea.getRenderStartRow(), iCol, oDataArea, oFunclets.fDataCellActionFunclet);
		} else if (oArea.isDataArea()) {
			// Data selection mode: highlight the single cell itself
			if (oCell) {
				var oDomCell = $('#' + oCell.getId());
				if (oDomCell && oDomCell.length > 0) {
					oFunclets.fDataCellActionFunclet(oDomCell, oCell);
				}
			}
		}
	};

	function getParentSelectableCell (e) {
		var oSelectableCell = null;
		var i = 0;
		var oCell = sap.ui.getCore().getControl(e.target.id);
		var oDomCell = null;
		var sCellId = null;

		if (oCell && (oCell.isSelectable && oCell.isSelectable() || oCrosstab.isSingleDataCellSelection())) {
			oSelectableCell = oCell;
		} else {
			// see if we have a selectable cell as parent
			var aParentCells = $(e.target).parents("td");
			if (aParentCells) {
				for (i = 0; i < aParentCells.length; i++) {
					oDomCell = $(aParentCells[i]);
					sCellId = oDomCell.attr("id");
					if (sCellId && sCellId.length > 0) {
						oCell = sap.ui.getCore().getControl(sCellId);
						if (oCell
								&& (oCell.isSelectable && oCell.isSelectable() || oCrosstab.isSingleDataCellSelection())) {
							oSelectableCell = oCell;
							break;
						}
					}
				}
			}
		}
		return oSelectableCell;
	}

	this.executeOnMouseEnter = function (e) {
		if (!oCurrentlyHoveredCell) {
			if (!oCrosstab.isSingleDataCellSelection()) {
				oCurrentlyHoveredCell = getParentSelectableCell(e);
			} else if (oCrosstab.isSingleDataCellSelection() === true) {
				var oCell = getParentSelectableCell(e);
				if (oCell && oCell.getArea().isDataArea()) {
					oCurrentlyHoveredCell = oCell;
				}
			}
			if (oCurrentlyHoveredCell) {
				var oFunclets = getCellHoverFunclets(true);
				that.applySelectionEffect(oCurrentlyHoveredCell, oFunclets);
				sap.zen.crosstab.utils.Utils.cancelEvent(e);
			}
		}
	};

	this.removeHoverEffect = function () {
		if (oCurrentlyHoveredCell) {
			var oFunclets = getCellHoverFunclets(false);
			that.applySelectionEffect(oCurrentlyHoveredCell, oFunclets);
			oCurrentlyHoveredCell = null;
		}
	};

	this.executeOnMouseOut = function (e) {
		if (oCurrentlyHoveredCell) {
			var oDomMoveTarget = e.toElement || e.relatedTarget;
			var oDomMoveSrc = e.target;
			var oFoundCell = null;
			var oCell = sap.ui.getCore().getControl(e.target.id);
			var oDomCell = null;
			var bRemoveHoverEffect = false;

			if (oCell
					&& (oCell.isSelectable && oCell.isSelectable() || oCrosstab.isSingleDataCellSelection()
							&& oCell.getArea().isDataArea())) {
				if (oCell === oCurrentlyHoveredCell) {
					oFoundCell = $(oDomMoveSrc).find($(oDomMoveTarget));
					if (!(oFoundCell && oFoundCell.length > 0)) {
						bRemoveHoverEffect = true;
					}
				}
			} else {
				// we don't have a selectable (i. e. hoverable) cell directly.
				// See if it is something that is
				// a) starts contained in the currently hovered cell
				// b) and is moving out of the currently hovered cell
				oDomCell = $('#' + oCurrentlyHoveredCell.getId());
				oFoundCell = oDomCell.find($(oDomMoveSrc));
				if (oFoundCell && oFoundCell.length > 0) {
					// check target
					oFoundCell = oDomCell.find($(oDomMoveTarget));
					if (!(oFoundCell && oFoundCell.length > 0)) {
						bRemoveHoverEffect = true;
					}
				}
			}
			if (bRemoveHoverEffect) {
				that.removeHoverEffect();
				sap.zen.crosstab.utils.Utils.cancelEvent(e);
			}
		}
	};

	function getCellHoverFunclets (bHover) {
		var oFunclets = {};
		if (bHover) {
			oFunclets.fDataCellActionFunclet = function (oDomCell, oCell) {
				oDomCell.addClass('sapzencrosstab-HoverDataCell');
				if (oDomCell.hasClass('sapzencrosstab-HighlightDataCell')) {
					oDomCell.removeClass('sapzencrosstab-HighlightDataCell');
					oCell.bRestoreHighlight = true;
				}
			};
			oFunclets.fRowHeaderCellActionFunclet = function (oDomCell, oCell) {
				oDomCell.addClass('sapzencrosstab-HoverRowHeaderCell');
				if (oDomCell.hasClass('sapzencrosstab-HighlightRowHeaderCell')) {
					oDomCell.removeClass('sapzencrosstab-HighlightRowHeaderCell');
					oCell.bRestoreHighlight = true;
				}
			};
			oFunclets.fColHeaderCellActionFunclet = function (oDomCell, oCell) {
				oDomCell.addClass('sapzencrosstab-HoverColHeaderCell');
				if (oDomCell.hasClass('sapzencrosstab-HighlightColHeaderCell')) {
					oDomCell.removeClass('sapzencrosstab-HighlightColHeaderCell');
					oCell.bRestoreHighlight = true;
				}
			};
		} else {
			oFunclets.fDataCellActionFunclet = function (oDomCell, oCell) {
				oDomCell.removeClass('sapzencrosstab-HoverDataCell');
				if (oCell.bRestoreHighlight === true) {
					oCell.bRestoreHighlight = false;
					oDomCell.addClass('sapzencrosstab-HighlightDataCell');
				}
			};
			oFunclets.fRowHeaderCellActionFunclet = function (oDomCell, oCell) {
				oDomCell.removeClass('sapzencrosstab-HoverRowHeaderCell');
				if (oCell.bRestoreHighlight === true) {
					oCell.bRestoreHighlight = false;
					oDomCell.addClass('sapzencrosstab-HighlightRowHeaderCell');
				}
			};
			oFunclets.fColHeaderCellActionFunclet = function (oDomCell, oCell) {
				oDomCell.removeClass('sapzencrosstab-HoverColHeaderCell');
				if (oCell.bRestoreHighlight === true) {
					oCell.bRestoreHighlight = false;
					oDomCell.addClass('sapzencrosstab-HighlightColheaderCell');
				}
			};
		}
		return oFunclets;
	}

	function getCellSelectFunclets (bSelect) {
		var oFunclets = {};
		if (bSelect) {
			oFunclets.fDataCellActionFunclet = function (oDomCell, oCell) {
				oDomCell.addClass('sapzencrosstab-SelectDataCell');
				oDomCell.removeClass('sapzencrosstab-HighlightDataCell');
				oCell.bRestoreHighlight = false;
			};
			oFunclets.fRowHeaderCellActionFunclet = function (oDomCell, oCell) {
				oDomCell.addClass('sapzencrosstab-SelectRowHeaderCell');
				oDomCell.removeClass('sapzencrosstab-HighlightRowHeaderCell');
				oCell.bRestoreHighlight = false;
			};
			oFunclets.fColHeaderCellActionFunclet = function (oDomCell, oCell) {
				oDomCell.addClass('sapzencrosstab-SelectColHeaderCell');
				oDomCell.removeClass('sapzencrosstab-HighlightColHeaderCell');
				oCell.bRestoreHighlight = false;
			};
		} else {
			oFunclets.fDataCellActionFunclet = function (oDomCell, oCell) {
				oDomCell.removeClass('sapzencrosstab-SelectDataCell');
			};
			oFunclets.fRowHeaderCellActionFunclet = function (oDomCell, oCell) {
				oDomCell.removeClass('sapzencrosstab-SelectRowHeaderCell');
			};
			oFunclets.fColHeaderCellActionFunclet = function (oDomCell, oCell) {
				oDomCell.removeClass('sapzencrosstab-SelectColHeaderCell');
			};
		}
		return oFunclets;
	}

	function getCellHighlightFunclets (bHighlight) {
		var oFunclets = {};
		if (bHighlight) {
			oFunclets.fDataCellActionFunclet = function (oDomCell, oCell) {
				oDomCell.addClass('sapzencrosstab-HighlightDataCell');
			};
			oFunclets.fRowHeaderCellActionFunclet = function (oDomCell, oCell) {
				oDomCell.addClass('sapzencrosstab-HighlightRowHeaderCell');
			};
			oFunclets.fColHeaderCellActionFunclet = function (oDomCell, oCell) {
				oDomCell.addClass('sapzencrosstab-HighlightColHeaderCell');
			};
		} else {
			oFunclets.fDataCellActionFunclet = function (oDomCell, oCell) {
				oDomCell.removeClass('sapzencrosstab-HighlightDataCell');
			};
			oFunclets.fRowHeaderCellActionFunclet = function (oDomCell, oCell) {
				oDomCell.removeClass('sapzencrosstab-HighlightRowHeaderCell');
			};
			oFunclets.fColHeaderCellActionFunclet = function (oDomCell, oCell) {
				oDomCell.removeClass('sapzencrosstab-HighlightColHeaderCell');
			};
		}
		return oFunclets;
	}

	this.attachEvents = function () {
		var oDomRenderSizeDiv = $("#" + oCrosstab.getId() + "_renderSizeDiv");

		oDomRenderSizeDiv.unbind("dblclick");
		oDomRenderSizeDiv.bind("dblclick", this.executeOnDblClickAction);

		oDomRenderSizeDiv.unbind("mousedown");
		oDomRenderSizeDiv.bind("mousedown", this.executeOnMouseDown);

		if (oCrosstab.getPropertyBag().isMobileMode() || oCrosstab.getPropertyBag().isTestMobileMode()) {
			oDomRenderSizeDiv.unbind('click');
			oDomRenderSizeDiv.bind('click', function (e) {
				sap.zen.crosstab.utils.Utils.cancelEvent(e);
			});

			oDomRenderSizeDiv.unbind('mousedown');
			oDomRenderSizeDiv.bind('mousedown', function (e) {
				sap.zen.crosstab.utils.Utils.cancelEvent(e);
			});

			oTouchHandler = new sap.zen.crosstab.TouchHandler(this, oCrosstab);
			oTouchHandler.registerTouchEvents(oDomRenderSizeDiv);
			
			oKeyboardHandler.setEnabled(false);
		} else {
			oDomRenderSizeDiv.unbind("mouseup", this.executeOnMouseUp);
			oDomRenderSizeDiv.bind("mouseup", this.executeOnMouseUp);

			oDomRenderSizeDiv.unbind('click');
			oDomRenderSizeDiv.bind('click', this.executeOnClickAction);
			if (oCrosstab.getPropertyBag().isSelectionEnabled()) {
				oDomRenderSizeDiv.unbind('mouseover');
				oDomRenderSizeDiv.bind('mouseover', this.executeOnMouseEnter);

				oDomRenderSizeDiv.unbind('mouseout');
				oDomRenderSizeDiv.bind('mouseout', this.executeOnMouseOut);
			}
			// CHANGE THE FOLLOWING CALL TO DISABLE KEYBOARD HANDLER: single point of entry
			oKeyboardHandler.setEnabled(isPlanningMode());
			oKeyboardHandler.attachEvents(oDomRenderSizeDiv);
		}
	};
	
	this.executeOnMouseDown = function (e) {
		var sTargetId = e.target.id;
		var sClickAction = getActionById(sTargetId);

		if (sClickAction === "resi") {
			sap.zen.crosstab.utils.Utils.cancelEvent(e);
		} else {
			sMouseDownTargetId = sTargetId;
		}
	};

	function isPlanningMode () {
		return (oCrosstab.getTransferDataCommand() && oCrosstab.getTransferDataCommand() !== "");
	}

	function checkMouseUpInSameCell (sCellId, e) {
		var bInSameCell = false;
		var oDomCell = $('#' + sCellId)[0];
		if (oDomCell) {
			var oRect = oDomCell.getBoundingClientRect();
			var bHMatches = (oRect.left < e.clientX) && (e.clientX < oRect.right);
			var bVMatches = (oRect.bottom > e.clientY) && (e.clientY > oRect.top);
			bInSameCell = bHMatches && bVMatches;
		}
		return bInSameCell;
	}

	this.executeOnMouseUp = function (e) {
		bPreventClickAction = false;
		if (sMouseDownTargetId) {
			var sCellId = that.getCellIdFromContenDivId(sMouseDownTargetId);
			// prevent action during multiple selection of cells. Make sure we stay in the same cell
			if (checkMouseUpInSameCell(sCellId, e)) {
				var oCell = sap.ui.getCore().getControl(sCellId);
				if (oCell) {
					if (isPlanningMode()) {
						var oDomContainerDiv = $('#' + sMouseDownTargetId)[0];
						var oPositions = null;
						if (oDomContainerDiv) {
							oPositions = oCrosstab.getUtils().getSelectionParams(oDomContainerDiv);
						}
						if (oPositions.iSelectionStartPos >= 0 || oPositions.iSelectionEndPos >= 0) {
							bPreventClickAction = true;
							that.handleInputEnabledCell(e.target.id, oPositions.iSelectionStartPos,
									oPositions.iSelectionEndPos);
						}
					}
				}
			} else {
				sap.zen.crosstab.utils.Utils.cancelEvent(e);
				sap.zen.crosstab.utils.Utils.stopEventPropagation(e);
				bPreventClickAction = true;
			}
		}
	};

	this.restoreFocusOnCell = function () {
		oKeyboardHandler.restoreFocusOnCell();
	};

	function getActionById (sId) {
		var sAction = sId.slice(0, 4);
		return sAction;
	}

	function getCellById (sId) {
		var sCellId = sId.slice(5);
		return sap.ui.getCore().getControl(sCellId);
	}

	function executeAction (sAction, bDontShowLoading) {
		if (sAction) {
			if (!bDontShowLoading) {
				// oCrosstab.showLoadingIndicator();
			}
			var fAction = new Function(sAction);
			fAction();
		}
	}

};
}; // end of sap/zen/crosstab/EventHandler.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.RowHeaderArea') ) {
jQuery.sap.declare("sap.zen.crosstab.RowHeaderArea");



sap.zen.crosstab.RowHeaderArea = function (oCrosstab) {
	"use strict";
	sap.zen.crosstab.BaseArea.call(this, oCrosstab);
	this.sAreaType = sap.zen.crosstab.rendering.RenderingConstants.TYPE_ROW_HEADER_AREA;
	this.iRenderStartRow = 0;
	this.iRenderRowCnt = 0;
	this.bLastPageLoaded = false;
};

sap.zen.crosstab.RowHeaderArea.prototype = jQuery.sap.newObject(sap.zen.crosstab.BaseArea.prototype);

sap.zen.crosstab.RowHeaderArea.prototype.renderArea = function (oRenderManager) {
	var sClasses = "sapzencrosstab-RowHeaderArea";
	if (this.oCrosstab.getPropertyBag().isMobileMode()) {
		sClasses += " sapzencrosstab-MobileHeaderSeparator"; 
	}
	this.renderContainerStructure(oRenderManager, sClasses, this.oCrosstab.isVCutOff(), false);
};

}; // end of sap/zen/crosstab/RowHeaderArea.js
if ( !jQuery.sap.isDeclared('sap.zen.crosstab.Crosstab') ) {
/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.zen.crosstab.Crosstab.
jQuery.sap.declare("sap.zen.crosstab.Crosstab");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Crosstab.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the new Crosstab
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 14.1.0
 *
 * @constructor   
 * @public
 * @name sap.zen.crosstab.Crosstab
 */
sap.ui.core.Control.extend("sap.zen.crosstab.Crosstab", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.zen.crosstab",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.zen.crosstab.Crosstab with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.zen.crosstab.Crosstab.extend
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.zen.crosstab.Crosstab#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.zen.crosstab.Crosstab} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.Crosstab#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.zen.crosstab.Crosstab#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.zen.crosstab.Crosstab} <code>this</code> to allow method chaining
 * @public
 * @name sap.zen.crosstab.Crosstab#setHeight
 * @function
 */


// Start of sap\zen\crosstab\Crosstab.js
///**
// * This file defines behavior for the Crosstab control, 
// */















sap.zen.crosstab.Crosstab.prototype.init = function () {
	"use strict";

	this.scrolled = false;

	this.ensureIndexOf();

	var sCrosstabId = this.getId();
	var sDataAreaId = sCrosstabId + "_dataArea";
	this.dataArea = new sap.zen.crosstab.DataArea(this);
	this.dataArea.setId(sDataAreaId);

	var sColumnHeaderAreaId = sCrosstabId + "_colHeaderArea";
	this.columnHeaderArea = new sap.zen.crosstab.ColumnHeaderArea(this);
	this.columnHeaderArea.setId(sColumnHeaderAreaId);

	var sRowHeaderAreaId = sCrosstabId + "_rowHeaderArea";
	this.rowHeaderArea = new sap.zen.crosstab.RowHeaderArea(this);
	this.rowHeaderArea.setId(sRowHeaderAreaId);

	var sDimensionHeaderAreaId = sCrosstabId + "_dimHeaderArea";
	this.dimensionHeaderArea = new sap.zen.crosstab.DimensionHeaderArea(this);
	this.dimensionHeaderArea.setId(sDimensionHeaderAreaId);

	this.oPropertyBag = new sap.zen.crosstab.PropertyBag(this);
	this.oRenderEngine = new sap.zen.crosstab.rendering.RenderEngine(this);
	this.oEventHandler = new sap.zen.crosstab.EventHandler(this);
	this.oUtils = new sap.zen.crosstab.utils.Utils(this);

	this.iCalculatedWidth = -1;
	this.iCalculatedHeight = -1;

	this.fPageRequestHandler = null;

	this.bOnAfterRendering = true;

	this.bIsVResize = false;
	this.bIsHResize = false;

	this.iHierarchyIndentWidth = 0;
	this.iHierarchyIndentHeight = 0;

	this.iExceptionSymbolWidth = 0;

	// new default is COMPACT render mode
	this.iRenderMode = sap.zen.crosstab.rendering.RenderingConstants.RENDERMODE_COMPACT;

	this.bRenderScrollbars = true;

	this.bHCutOff = false;
	this.bVCutOff = false;

	this.sOnSelectCommand = null;
	this.sTransferDataCommand = null;
	this.sCallValueHelpCommand = null;

	this.iTotalRowCnt = 0;
	this.iTotalColCnt = 0;

	this.oHScrollbar = null;
	this.oVScrollbar = null;
	this.oHorizontalHeaderScrollbar = null;

	this.iTimeoutCounter = 0;
	this.oColHeaderHierarchyLevels = {};
	this.oRowHeaderHierarchyLevels = {};

	this.oTestProxy = new sap.zen.crosstab.CrosstabTestProxy(this, this.oEventHandler, this.oRenderEngine);

	this.bAdjustFrameDivs = true;
	this.iSavedWidthForPrepareDom = 0;
	this.iSavedHeightForPrepareDom = 0;

	this.bDataSelectionMode = false;

	this.oCellApi = null;

	this.iNewLinesCnt = 0;
	this.sNewLinesPos = "";
	this.bPlanningCheckMode = false;

	this.sScrollNotifyCommand = null;

	this.oContextMenu = null;
	
	this.iValueHelpStatus = 0;
	
	this.bHeaderHScrolling = false;
	
	this.bWasRendered = false;
};

sap.zen.crosstab.Crosstab.prototype.ensureIndexOf = function () {
	// official code from developer.mozilla.org
	// needed for IE8 support and other browsers that don't support the ECMA-262, 5th edition "indexOf" function
	if (!Array.prototype.indexOf) {
		Array.prototype.indexOf = function (searchElement) {
			"use strict";
			if (this == null) {
				throw new TypeError();
			}
			var t = Object(this);
			var len = t.length >>> 0;
			if (len === 0) {
				return -1;
			}
			var n = 0;
			if (arguments.length > 1) {
				n = Number(arguments[1]);
				if (n != n) {
					n = 0;
				} else if (n != 0 && n != Infinity && n != -Infinity) {
					n = (n > 0 || -1) * Math.floor(Math.abs(n));
				}
			}
			if (n >= len) {
				return -1;
			}
			var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
			for (; k < len; k++) {
				if (k in t && t[k] === searchElement) {
					return k;
				}
			}
			return -1;
		};
	}
};

sap.zen.crosstab.Crosstab.prototype.getTableDiv = function () {
	var oTableDiv = null;
	if (this.iRenderMode === sap.zen.crosstab.rendering.RenderingConstants.RENDERMODE_COMPACT) {
		oTableDiv = $('#' + this.getId() + "_altRenderModeTableDiv");
	} else {
		oTableDiv = $('#' + this.getId());
	}
	return oTableDiv;
};

sap.zen.crosstab.Crosstab.prototype.ensurePageManager = function () {
	if (!this.oPageManager) {
		this.oPageManager = new sap.zen.crosstab.paging.PageManager(this);
	}
	return this.oPageManager;
};

sap.zen.crosstab.Crosstab.prototype.getIntWidth = function () {
	var iWidth = -1;
	var sWidth = this.getWidth();
	if (sWidth && sWidth !== "auto") {
		iWidth = parseInt(sWidth, 10);
	} else {
		iWidth = this.iCalculatedWidth;
	}
	return iWidth;
};

sap.zen.crosstab.Crosstab.prototype.getContentWidth = function () {
	var iWidth = this.getIntWidth();
	var oTableDivValues = this.getRenderEngine().getTableDivValues();
	iWidth = iWidth - oTableDivValues.borders.iLeftBorderWidth - oTableDivValues.borders.iRightBorderWidth;
	return iWidth;
};

sap.zen.crosstab.Crosstab.prototype.getContentHeight = function () {
	var iHeight = this.getIntHeight();
	var oTableDivValues = this.getRenderEngine().getTableDivValues();
	var iToolbarHeight = this.oPropertyBag.getToolbarHeight();
	iHeight = iHeight - oTableDivValues.borders.iTopBorderWidth - oTableDivValues.borders.iBottomBorderWidth
			- iToolbarHeight;
	return iHeight;
};

sap.zen.crosstab.Crosstab.prototype.getIntHeight = function () {
	var iHeight = -1;
	var sHeight = this.getHeight();
	if (sHeight && sHeight !== "auto") {
		iHeight = parseInt(sHeight, 10);
	} else {
		iHeight = this.iCalculatedHeight;
	}
	return iHeight;
};

sap.zen.crosstab.Crosstab.prototype.resize = function (e) {
	var oDomCrosstab = jQuery.sap.byId(this.getId());
	var iNewWidth = parseInt(oDomCrosstab.outerWidth(), 10);
	var iNewHeight = parseInt(oDomCrosstab.outerHeight(), 10);
	this.isHResize = iNewWidth !== this.getIntWidth();
	this.isVResize = iNewHeight !== this.getIntHeight();

	if (this.isHResize || this.isVResize) {
		this.ensurePageManager().resizeEvent();
	}
};

sap.zen.crosstab.Crosstab.prototype.determineRenderMode = function (oCrosstabControlProperties) {
	var iNewRenderMode = -1;
	if (oCrosstabControlProperties) {
		if (oCrosstabControlProperties.alwaysfill) {
			iNewRenderMode = sap.zen.crosstab.rendering.RenderingConstants.RENDERMODE_FILL;
		} else {
			iNewRenderMode = sap.zen.crosstab.rendering.RenderingConstants.RENDERMODE_COMPACT;
		}
	}
	if (iNewRenderMode === -1) {
		iNewRenderMode = sap.zen.crosstab.rendering.RenderingConstants.RENDERMODE_COMPACT;
	}
	if (iNewRenderMode !== this.iRenderMode) {
		this.oRenderEngine.reset();
		this.iRenderMode = iNewRenderMode;
	}
};

sap.zen.crosstab.Crosstab.prototype.determineScrollMode = function (oCrosstabControlProperties) {
	var bNewPixelScrolling = oCrosstabControlProperties.pixelscrolling;
	if (bNewPixelScrolling !== this.oPropertyBag.isPixelScrolling()) {
		this.oRenderEngine.reset();
		this.oPropertyBag.setPixelScrolling(bNewPixelScrolling);
	}
};

sap.zen.crosstab.Crosstab.prototype.applyControlProperties = function (oCrosstabControlProperties) {
	this.bPlanningCheckMode = oCrosstabControlProperties.pvcheck !== null
			&& oCrosstabControlProperties.pvcheck !== undefined;
	var bIsConsistent = this.ensurePageManager().checkResponseConsistency(oCrosstabControlProperties);
	if (!bIsConsistent) {
		this.reset(oCrosstabControlProperties);
	}
	if (!this.bPlanningCheckMode) {
		this.determineRenderMode(oCrosstabControlProperties);
		this.determineScrollMode(oCrosstabControlProperties);
		this.ensurePageManager().receiveData(oCrosstabControlProperties);
	} else {
		this.handlePlanningCheckData(oCrosstabControlProperties);
	}
	this.bPlanningCheckMode = false;
};

sap.zen.crosstab.Crosstab.prototype.calculateOffset = function (oCell) {
	var iOffset = 0;
	var oArea = oCell.getArea();
	if (oArea.isRowHeaderArea()) {
		for (var i = 0; i < oCell.getCol(); i++) {
			var oTempCell = oArea.getCell(oCell.getRow(), i);
			if (!oTempCell) {
				iOffset++;
			} else if (!oTempCell.isEntryEnabled()) {
				iOffset++;
			}
		}
	}
	return iOffset;
};

sap.zen.crosstab.Crosstab.prototype.calculateRowHeaderColOffsetsForRow = function(iTableRow) {
	var oColMapping = {};
	var iTableCol = 0;
	var oCell = null;
	var iEntryEnabledCol = 0;
	var iMaxColCnt = this.rowHeaderArea.getColCnt();
	
	for (iTableCol = 0; iTableCol < iMaxColCnt; iTableCol++) {
		oCell = this.getTableCell(iTableRow, iTableCol);
		if (oCell !== null && oCell.isEntryEnabled()) {
			oColMapping[iEntryEnabledCol] = iTableCol;
			iEntryEnabledCol++;
		}
	}
	
	return oColMapping;
};

sap.zen.crosstab.Crosstab.prototype.handlePlanningCheckData = function (oCrosstabControlProperties) {
	var i = 0;
	var oCheckCells = oCrosstabControlProperties.pvcheck;
	var iCellCnt = oCheckCells.length;
	var oColMappingPerTabRow = {};
	var oColMapping = null;
	var iTableCol = 0;

	for (i = 0; i < iCellCnt; i++) {
		var oCheckCell = oCheckCells[i];
		// contract: we get column positions in newlines as successively and need to map
		// them to actual table columns due to text/key display etc.
		oColMapping = oColMappingPerTabRow[oCheckCell.tabrow];
		if (!oColMapping) {
			oColMapping = this.calculateRowHeaderColOffsetsForRow(oCheckCell.tabrow);
			oColMappingPerTabRow[oCheckCell.tabrow] = oColMapping;
		}
		
		var iTableCol = oColMapping[oCheckCell.tabcol] || oCheckCell.tabcol;
		var oCell = this.getTableCell(oCheckCell.tabrow, iTableCol);
		if (oCell) {
			oCell.setText(oCheckCell.text);
			if (oCheckCell.valid === false) {
				oCell.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_INVALID_VALUE);
			} else {
				oCell.removeStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_INVALID_VALUE);
			}

			if (oCheckCell.newvalue === true) {
				oCell.addStyle(sap.zen.crosstab.rendering.RenderingConstants.STYLE_NEW_VALUE);
			}
			this.oRenderEngine.updateRenderingOfInputCellAfterCheck(oCell);
		}
	}
};

sap.zen.crosstab.Crosstab.prototype.determineKeepUserColWidths = function (oCrosstabControlProperties) {
	if (oCrosstabControlProperties.dataproviderchanged) {
		return false;
	}
		
	if (oCrosstabControlProperties.resultsetchanged && oCrosstabControlProperties.rootcause === undefined) {
		return false;
	}
	
	return true;
};

sap.zen.crosstab.Crosstab.prototype.determineKeepCalculatedColWidths = function (oCrosstabControlProperties) {
	var iVpos = (oCrosstabControlProperties.v_pos || 1) - 1;
	var iSentDataRows = oCrosstabControlProperties.sentdatarows || 0;
	var iClientVpos = oCrosstabControlProperties.clientvpos || 0;
	var iTotalDataRows = oCrosstabControlProperties.totaldatarows || 0;
	
	var iHpos = (oCrosstabControlProperties.h_pos || 1) - 1;
	var iSentDataCols = oCrosstabControlProperties.sentdatacols || 0;
	var iClientHpos = oCrosstabControlProperties.clienthpos || 0;
	var iTotalDataCols = oCrosstabControlProperties.totaldatacols || 0;
	
	var bIsPaging = oCrosstabControlProperties.ispaging || false;
	
	var bKeepColWidthsForHScrolling = false;
	var bKeepColWidthsForVScrolling = false;
	
	if (this.bWasRendered === true && !bIsPaging) {
		if ((iClientVpos > 0) && (iClientVpos <= iTotalDataRows) && (iClientVpos > (iVpos + iSentDataRows))) {
			bKeepColWidthsForVScrolling = true;
		}
		
		if ((iClientHpos > 0) && (iClientHpos <= iTotalDataCols) && (iClientHpos > (iHpos + iSentDataCols))) {
			bKeepColWidthsForHScrolling = true;
		}
		
		if (bKeepColWidthsForVScrolling === true || bKeepColWidthsForHScrolling === true) {
			return true;
		}
	}
	
	return false;
};

sap.zen.crosstab.Crosstab.prototype.reset = function (oCrosstabControlProperties) {
	var bKeepUserColWidths = this.determineKeepUserColWidths(oCrosstabControlProperties);
	var bKeepCalculatedColWidths = this.determineKeepCalculatedColWidths(oCrosstabControlProperties);
	
	this.getDimensionHeaderArea().clear(bKeepUserColWidths, bKeepCalculatedColWidths);
	this.getColumnHeaderArea().clear(bKeepUserColWidths, bKeepCalculatedColWidths);
	this.getRowHeaderArea().clear(bKeepUserColWidths, bKeepCalculatedColWidths);
	this.getDataArea().clear(bKeepUserColWidths, bKeepCalculatedColWidths);

	this.oRenderEngine.reset();

	this.oPageManager.reset();
};

sap.zen.crosstab.Crosstab.prototype.updateControlProperties = function (oCrosstabControlProperties) {
	if (oCrosstabControlProperties && oCrosstabControlProperties.changed) {
		this.reset(oCrosstabControlProperties);
	}
	this.applyControlProperties(oCrosstabControlProperties);
};

sap.zen.crosstab.Crosstab.prototype.expectOnAfterRenderingCall = function () {
	this.bOnAfterRendering = false;
};

sap.zen.crosstab.Crosstab.prototype.onAfterRendering = function () {
	if (this.bOnAfterRendering
			|| ((typeof sap.zen.Dispatcher != 'undefined') && sap.zen.Dispatcher.instance.isDeferredRendering())) {
		this.doRendering();
	}
};

sap.zen.crosstab.Crosstab.prototype.setSelectionInfo = function (sAxis, iPos) {
	this.oEventHandler.setSelectionInfo(sAxis, iPos);
};

sap.zen.crosstab.Crosstab.prototype.setHighlightingInfo = function (oHighlightingInfo) {
	this.oEventHandler.setHighlightingInfo(oHighlightingInfo);
};

sap.zen.crosstab.Crosstab.prototype.getSelectedCellData = function () {
	return this.oEventHandler.getSelectedCellData();
};

sap.zen.crosstab.Crosstab.prototype.restoreSelection = function () {
	this.oEventHandler.restoreSelection();
};

sap.zen.crosstab.Crosstab.prototype.restoreFocusOnCell = function () {
	this.oEventHandler.restoreFocusOnCell();
};

sap.zen.crosstab.Crosstab.prototype.highlightCells = function () {
	this.oEventHandler.highlightCells();
};

sap.zen.crosstab.Crosstab.prototype.prepareExistingDom = function () {
	if (!this.bPlanningCheckMode) {
		var oDomBody = $('#' + this.getDimensionHeaderArea().getId()).find("tbody");
		oDomBody.empty();
		oDomBody = $('#' + this.getRowHeaderArea().getId()).find("tbody");
		oDomBody.empty();
		oDomBody = $('#' + this.getColumnHeaderArea().getId()).find("tbody");
		oDomBody.empty();
		oDomBody = $('#' + this.getDataArea().getId()).find("tbody");
		oDomBody.empty();
		this.bRenderScrollbars = false;

		this.determineNeedToAdjustOuterDivs();
	}
};

// Outer divs should generally not be adapted during paging operations since width and height are
// otherwise modified by JavaScript calculations which are only valid for the first rendering and
// give pixel-off errors.
// However, if the size of the crosstab is changed (either by using setWidth or implicitly by auto width),
// and paging is active, a resize of the outer divs needs to happen. This requires the size adaptation for
// the outer divs to work unless the last page has been loaded.
// Once the last page has been loaded due to enlarging the crosstab size, any further request to prepare
// the existing DOM is again a simple paging operation without size change, which means that starting from
// that point the outer size div sizes can again be left unaltered.
sap.zen.crosstab.Crosstab.prototype.determineNeedToAdjustOuterDivs = function () {
	var iWidth = this.getIntWidth();
	var iHeight = this.getIntHeight();
	this.bAdjustFrameDivs = true;
	if (iWidth === this.iSavedWidthForPrepareDom && iHeight === this.iSavedHeightForPrepareDom) {
		this.bAdjustFrameDivs = false;
	} else {
		// any outer div adjust operation in the existing dom context needs to clear
		// the borders for the calculations to work properly. Otherwise, calculations for
		// border corrections will be carried out on already adjusted borders which leads
		// to wrong results and pixel-off errors
		this.getRenderEngine().removeOuterDivBorders();
	}

	if (!this.getDataArea().hasLoadingPages()) {
		this.iSavedWidthForPrepareDom = iWidth;
		this.iSavedHeightForPrepareDom = iHeight;
	}
};

sap.zen.crosstab.Crosstab.prototype.determineHierarchyIndents = function () {
	var oDomMeasureDiv = $('#' + this.getId() + "_measureDiv");
	if (oDomMeasureDiv && oDomMeasureDiv.length > 0) {
		oDomMeasureDiv.css("visibility", "visible");
		this.iHierarchyIndentWidth = parseInt(oDomMeasureDiv.outerWidth(), 10);
		this.iHierarchyIndentHeight = parseInt(oDomMeasureDiv.outerHeight(), 10);
		oDomMeasureDiv.css("visibility", "none");
	}
};

sap.zen.crosstab.Crosstab.prototype.determineAlertSymbolDimensions = function () {
	var oDomMeasureDiv = $('#' + this.getId() + "_exceptionMeasureDiv");
	if (oDomMeasureDiv && oDomMeasureDiv.length > 0) {
		oDomMeasureDiv.css("visibility", "visible");
		this.iExceptionSymbolWidth = parseInt(oDomMeasureDiv.outerWidth(), 10);
		oDomMeasureDiv.css("visibility", "none");
	}
};

sap.zen.crosstab.Crosstab.prototype.isRenderingPossible = function () {
	/*
	 * Sometimes doRendering is called even though the DOM is not prepared. This means there is no basic Crosstab
	 * structure available which could be filled with content. If rendering is continued in this case, there will be
	 * JavaScript exceptions. In this case it is safer to wait for UI5 to call onAfterRendering(). See Message Number
	 * 0120061532 0001269803 2013 See Message Number 0120031469 0004834824 2012
	 */

	if ((typeof sap.zen.Dispatcher != 'undefined') && sap.zen.Dispatcher.instance.suppressRendering()) {
		if (!sap.zen.Dispatcher.instance.isSingleDelta(this.getId())) {
			// register for deferred rendering, do not render right now
			// because the parent might not have correct size yet
			sap.zen.Dispatcher.instance.registerForDeferredRendering(this);
			return false;
		}
	}

	var aElementsToCheck = [];
	aElementsToCheck.push($('#' + this.getId()));
	aElementsToCheck.push($('#' + this.getId() + '_upperSection'));
	aElementsToCheck.push($('#' + this.getId() + '_lowerSection'));
	aElementsToCheck.push($('#' + this.getId() + '_dimHeaderArea'));
	aElementsToCheck.push($('#' + this.getId() + '_colHeaderArea'));
	aElementsToCheck.push($('#' + this.getId() + '_dataArea'));

	for (var i = 0; i < aElementsToCheck.length; i++) {
		if (aElementsToCheck[i].length !== 1) {
			// expect another rendering call
			this.bOnAfterRendering = true;
			// do not continue with rendering
			return false;
		}
	}
	return true;
};

sap.zen.crosstab.Crosstab.prototype.determineCrosstabSize = function () {
	var oSizeInfo = {};
	oSizeInfo.bContinueRendering = true;
	oSizeInfo.bAutoHeight = false;
	oSizeInfo.bAutoWidth = false;
	if (!this.getWidth() || !this.getHeight()) {
		// if width/height has not been set there is no point in continuing the rendering process
		// either a pixel value or 'auto' is required to render
		oSizeInfo.bContinueRendering = false;
	} else {
		if (this.getWidth() === "auto") {
			oSizeInfo.bAutoWidth = true;
			var iWidth = jQuery.sap.byId(this.getId()).parent().outerWidth();
			if (iWidth && iWidth > 0) {
				this.iCalculatedWidth = iWidth;
			}
		}
		if (this.getHeight() === "auto") {
			oSizeInfo.bAutoHeight = true;
			var iHeight = jQuery.sap.byId(this.getId()).parent().outerHeight();
			if (iHeight && iHeight > 0) {
				this.iCalculatedHeight = iHeight;
			}
		}
	}
	return oSizeInfo;
};

sap.zen.crosstab.Crosstab.prototype.doRendering = function () {
	if (this.bPlanningCheckMode === true) {
		return;
	}

	if (!this.isRenderingPossible()) {
		return;
	}
	var oSizeInfo = this.determineCrosstabSize();
	if (!oSizeInfo.bContinueRendering) {
		return;
	}
	// If no size is available, the container probably hasn't been fully rendered yet.
	// Therefore, delay the rendering until a size is available.
	// Crosstab 10x10px does not make any sense. If containers don't have their sizes yet, their size
	// may be 0 or 1px, so with 10px, we should have a safe heuristics
	if ((oSizeInfo.bAutoWidth && this.iCalculatedWidth <= 10)
			|| (oSizeInfo.bAutoHeight && this.iCalculatedHeight <= 10)) {
		this.iTimeoutCounter++;
		if (this.iTimeoutCounter > 1000) {
			return;
		}
		setTimeout((function (that) {
			return function () {
				that.doRendering();
			};
		})(this), 10);
		return;
	}

	this.determineHierarchyIndents();

	if (this.getPropertyBag().isDisplayExceptions()) {
		this.determineAlertSymbolDimensions();
	}

	var oRenderEngine = this.getRenderEngine();
	oRenderEngine.setAdjustFrameDivs(this.bAdjustFrameDivs);

	if (oRenderEngine.hasCrosstabSizeChanged()) {
		this.ensurePageManager().resizeEvent();
	}

	if (this.oPropertyBag.hasToolbar()) {
		var oToolbarDiv = $('#' + this.getId() + "_toolbar");
		var iToolbarHeight = oToolbarDiv.outerHeight();
		this.oPropertyBag.setToolbarHeight(iToolbarHeight);
	}

	// The sequence of this is important, think before changing it!
	oRenderEngine.beginRendering();

	oRenderEngine.renderDimensionHeaderArea();
	oRenderEngine.setUserColWidths(this.getDimensionHeaderArea());

	oRenderEngine.renderRowHeaderArea(this.getRowHeaderArea().getRenderStartRow());
	oRenderEngine.setUserColWidths(this.getRowHeaderArea());
	
	oRenderEngine.adjustColWidths(this.getDimensionHeaderArea(), this.getRowHeaderArea());
	
	// all of the steps above (especially the col width adjuster) must have been done before forcing a width on the
	// header area in case of scrolling
	oRenderEngine.forceHeaderWidth();

	oRenderEngine.renderColHeaderArea(this.getColumnHeaderArea().getRenderStartCol());
	oRenderEngine.setUserColWidths(this.getColumnHeaderArea());

	oRenderEngine.renderDataArea();
	oRenderEngine.setUserColWidths(this.getDataArea());

	oRenderEngine.adjustColWidths(this.getColumnHeaderArea(), this.getDataArea());
	oRenderEngine.adjustRowHeights(this.getDimensionHeaderArea(), this.getColumnHeaderArea());
	oRenderEngine.adjustRowHeights(this.getRowHeaderArea(), this.getDataArea());

	oRenderEngine.calculateRenderSizeDivSize();

	if (!this.oPropertyBag.isPixelScrolling()) {
		oRenderEngine.appendColumnsAfterResize();
		oRenderEngine.appendRowsAfterResize();
	}
	
	if (this.bRenderScrollbars) {
		oRenderEngine.renderScrollbars();
	}

	oRenderEngine.adjustRenderSizeDivSize();

	if (this.bRenderScrollbars) {
		oRenderEngine.setScrollbarSteps();
	}

	oRenderEngine.adjustScrollDivSizes();

	if (!this.bRenderScrollbars) {
		oRenderEngine.checkScrollbarSize();
	}
	oRenderEngine.adjustScrollPositions(this.bRenderScrollbars);

	if (!this.oPropertyBag.isPixelScrolling()) {
		oRenderEngine.moveScrollDivs();
	}
	
	oRenderEngine.updateHeaderScrollbarSizes();

	oRenderEngine.finishRendering();

	this.oEventHandler.attachEvents();

	this.bOnAfterRendering = true;
	this.bRenderScrollbars = true;
	this.bAdjustFrameDivs = true;
	this.bWasRendered = true;

	// Test ONLY
	// if (!this.scrolled && this.getId() === "CROSSTAB_1") {
	// this.scrollHorizontal(27);
	// this.scrolled = true;
	// }
};

sap.zen.crosstab.Crosstab.prototype.scrollHorizontal = function (iCol) {
	this.oRenderEngine.scrollHorizontal(iCol);
};

sap.zen.crosstab.Crosstab.prototype.scrollVertical = function (iRow) {
	this.oRenderEngine.scrollVertical(iRow);
};

sap.zen.crosstab.Crosstab.prototype.scrollHeaderHorizontal = function (iPos) {
	this.oRenderEngine.scrollHeaderHorizontal(iPos);
};

sap.zen.crosstab.Crosstab.prototype.getVScrollPos = function () {
	var iVScrollPos = -1;
	if (this.oVScrollbar) {
		iVScrollPos = this.oVScrollbar.getScrollPosition();
	}
	return iVScrollPos;
};

sap.zen.crosstab.Crosstab.prototype.getHScrollPos = function () {
	var iHScrollPos = -1;
	if (this.oHScrollbar) {
		iHScrollPos = this.oHScrollbar.getScrollPosition();
	}
	return iHScrollPos;
};

sap.zen.crosstab.Crosstab.prototype.renderResizeOutline = function () {
	this.oRenderEngine.renderResizeOutline();
};

sap.zen.crosstab.Crosstab.prototype.removeResizeOutline = function () {
	this.oRenderEngine.removeResizeOutline();
};

sap.zen.crosstab.Crosstab.prototype.registerPageRequestHandler = function (fHandler) {
	this.fPageRequestHandler = fHandler;
};

sap.zen.crosstab.Crosstab.prototype.unregisterPageRequestHandler = function () {
	this.fPageRequestHandler = null;
};

sap.zen.crosstab.Crosstab.prototype.getPageRequestHandler = function () {
	return this.fPageRequestHandler;
};

sap.zen.crosstab.Crosstab.prototype.getReceivedPages = function () {
	return this.ensurePageManager().getReceivedPages();
};

sap.zen.crosstab.Crosstab.prototype.getHierarchyIndentWidth = function () {
	return this.iHierarchyIndentWidth;
};

sap.zen.crosstab.Crosstab.prototype.getExceptionSymbolWidth = function () {
	return this.iExceptionSymbolWidth;
};

sap.zen.crosstab.Crosstab.prototype.getHierarchyIndentHeight = function () {
	return this.iHierarchyIndentHeight;
};

sap.zen.crosstab.Crosstab.prototype.hideLoadingIndicator = function () {
	this.oRenderEngine.hideLoadingIndicator();
};

sap.zen.crosstab.Crosstab.prototype.showLoadingIndicator = function () {
	this.oRenderEngine.showLoadingIndicator();
};

sap.zen.crosstab.Crosstab.prototype.setHCutOff = function (bHCutOff) {
	this.bHCutOff = bHCutOff;
};

sap.zen.crosstab.Crosstab.prototype.isHCutOff = function () {
	return this.bHCutOff;
};

sap.zen.crosstab.Crosstab.prototype.setVCutOff = function (bVCutOff) {
	this.bVCutOff = bVCutOff;
};

sap.zen.crosstab.Crosstab.prototype.isVCutOff = function () {
	return this.bVCutOff;
};

sap.zen.crosstab.Crosstab.prototype.getTotalRows = function () {
	return this.iTotalRowCnt;
};

sap.zen.crosstab.Crosstab.prototype.getTotalCols = function () {
	return this.iTotalColCnt;
};

sap.zen.crosstab.Crosstab.prototype.setTotalCols = function (iColCnt) {
	this.iTotalColCnt = iColCnt;
};

sap.zen.crosstab.Crosstab.prototype.setTotalRows = function (iRowCnt) {
	this.iTotalRowCnt = iRowCnt;
};

sap.zen.crosstab.Crosstab.prototype.setHScrollbar = function (oHScrollbar) {
	this.oHScrollbar = oHScrollbar;
};

sap.zen.crosstab.Crosstab.prototype.setVScrollbar = function (oVScrollbar) {
	this.oVScrollbar = oVScrollbar;
};

sap.zen.crosstab.Crosstab.prototype.getVScrollbar = function () {
	return this.oVScrollbar;
};

sap.zen.crosstab.Crosstab.prototype.getHScrollbar = function () {
	return this.oHScrollbar;
};

sap.zen.crosstab.Crosstab.prototype.getTestProxy = function () {
	return this.oTestProxy;
};

sap.zen.crosstab.Crosstab.prototype.setOnSelectCommand = function (sOnSelectCommand) {
	this.sOnSelectCommand = sOnSelectCommand;
};

sap.zen.crosstab.Crosstab.prototype.getOnSelectCommand = function () {
	return this.sOnSelectCommand;
};

sap.zen.crosstab.Crosstab.prototype.setTransferDataCommand = function (sTransferDataCommand) {
	this.sTransferDataCommand = sTransferDataCommand;
};

sap.zen.crosstab.Crosstab.prototype.getTransferDataCommand = function () {
	return this.sTransferDataCommand;
};

sap.zen.crosstab.Crosstab.prototype.setCallValueHelpCommand = function (sCallValueHelpCommand) {
	this.sCallValueHelpCommand = sCallValueHelpCommand;
};

sap.zen.crosstab.Crosstab.prototype.getCallValueHelpCommand = function () {
	return this.sCallValueHelpCommand;
};

sap.zen.crosstab.Crosstab.prototype.getRenderMode = function () {
	return this.iRenderMode;
};

sap.zen.crosstab.Crosstab.prototype.getUtils = function () {
	return this.oUtils;
};

sap.zen.crosstab.Crosstab.prototype.getDataArea = function () {
	return this.dataArea;
};

sap.zen.crosstab.Crosstab.prototype.getDimensionHeaderArea = function () {
	return this.dimensionHeaderArea;
};

sap.zen.crosstab.Crosstab.prototype.getColumnHeaderArea = function () {
	return this.columnHeaderArea;
};

sap.zen.crosstab.Crosstab.prototype.getRowHeaderArea = function () {
	return this.rowHeaderArea;
};

sap.zen.crosstab.Crosstab.prototype.getRenderEngine = function () {
	return this.oRenderEngine;
};

sap.zen.crosstab.Crosstab.prototype.hResize = function () {
	return this.isHResize;
};

sap.zen.crosstab.Crosstab.prototype.vResize = function () {
	return this.isVResize;
};

sap.zen.crosstab.Crosstab.prototype.getPageManager = function () {
	return this.oPageManager;
};

sap.zen.crosstab.Crosstab.prototype.isRenderScrollbars = function () {
	return this.bRenderScrollbars;
};

sap.zen.crosstab.Crosstab.prototype.getPropertyBag = function () {
	return this.oPropertyBag;
};

sap.zen.crosstab.Crosstab.prototype.hasToolbar = function () {
	return this.bHasToolbar;
};

sap.zen.crosstab.Crosstab.prototype.setColHeaderHierarchyLevels = function (oLevels) {
	this.oColHeaderHierarchyLevels = oLevels;
};

sap.zen.crosstab.Crosstab.prototype.getColHeaderHierarchyLevels = function () {
	return this.oColHeaderHierarchyLevels;
};

sap.zen.crosstab.Crosstab.prototype.setRowHeaderHierarchyLevels = function (oLevels) {
	this.oRowHeaderHierarchyLevels = oLevels;
};

sap.zen.crosstab.Crosstab.prototype.getRowHeaderHierarchyLevels = function () {
	return this.oRowHeaderHierarchyLevels;
};

sap.zen.crosstab.Crosstab.prototype.isIE8Mode = function () {
	return this.oRenderEngine.isIE8Mode();
};

sap.zen.crosstab.Crosstab.prototype.hasDimensionHeaderArea = function () {
	var bResult = false;
	if (this.dimensionHeaderArea !== undefined) {
		bResult = (this.dimensionHeaderArea.getColCnt() > 0 && this.dimensionHeaderArea.getRowCnt() > 0);
	}
	return bResult;
};

sap.zen.crosstab.Crosstab.prototype.hasRowHeaderArea = function () {
	var bResult = false;
	if (this.rowHeaderArea !== undefined) {
		bResult = (this.rowHeaderArea.getColCnt() > 0 && this.rowHeaderArea.getRowCnt() > 0);
	}
	return bResult;
};

sap.zen.crosstab.Crosstab.prototype.hasColHeaderArea = function () {
	var bResult = false;
	if (this.columnHeaderArea !== undefined) {
		bResult = (this.columnHeaderArea.getColCnt() > 0 && this.columnHeaderArea.getRowCnt() > 0);
	}
	return bResult;
};

sap.zen.crosstab.Crosstab.prototype.hasDataArea = function () {
	var bResult = false;
	if (this.dataArea !== undefined) {
		bResult = (this.dataArea.getColCnt() > 0 && this.dataArea.getRowCnt() > 0);
	}
	return bResult;
};

sap.zen.crosstab.Crosstab.prototype.setDataSelectionMode = function (bIsDataSelectionMode) {
	this.bDataSelectionMode = bIsDataSelectionMode;
};

sap.zen.crosstab.Crosstab.prototype.isDataSelectionMode = function () {
	return this.bDataSelectionMode;
};

sap.zen.crosstab.Crosstab.prototype.setSingleDataCellSelection = function (bIsSingleDataCellSelection) {
	this.bSingleDataCellSelection = bIsSingleDataCellSelection;
};

sap.zen.crosstab.Crosstab.prototype.isSingleDataCellSelection = function () {
	return this.bSingleDataCellSelection;
};

sap.zen.crosstab.Crosstab.prototype.setSingleDataCellSelectionInfo = function (iRowPos, iColPos) {
	this.oEventHandler.setSingleDataCellSelectionInfo(iRowPos, iColPos);
};

// Cell API
sap.zen.crosstab.Crosstab.prototype.getTableCell = function (iTableRow, iTableCol) {
	return this.oCellApi.getTableCell(iTableRow, iTableCol);
};

sap.zen.crosstab.Crosstab.prototype.getTableCellWithSpans = function (iRow, iCol) {
	return this.oCellApi.getTableCellWithSpans(iRow, iCol);
};

sap.zen.crosstab.Crosstab.prototype.getTableRowCnt = function (iTableRow, iTableCol) {
	return this.oCellApi.getTableRowCnt();
};

sap.zen.crosstab.Crosstab.prototype.getTableColCnt = function (iTableRow, iTableCol) {
	return this.oCellApi.getTableColCnt();
};

sap.zen.crosstab.Crosstab.prototype.getTableFixedRowHeaderColCnt = function () {
	return this.oCellApi.getTableFixedRowHeaderColCnt();
};

sap.zen.crosstab.Crosstab.prototype.getTableFixedColHeaderRowCnt = function () {
	return this.oCellApi.getTableFixedColHeaderRowCnt();
};

sap.zen.crosstab.Crosstab.prototype.getTableMaxScrollColCnt = function () {
	return this.oCellApi.getTableMaxScrollColCnt();
};

sap.zen.crosstab.Crosstab.prototype.getTableMaxScrollRowCnt = function () {
	return this.oCellApi.getTableMaxScrollRowCnt();
};

sap.zen.crosstab.Crosstab.prototype.setCellApi = function (poCellApi) {
	this.oCellApi = poCellApi;
};

sap.zen.crosstab.Crosstab.prototype.hasLoadingPages = function () {
	return this.dataArea.hasLoadingPages() || this.rowHeaderArea.hasLoadingPages()
			|| this.columnHeaderArea.hasLoadingPages();
};

sap.zen.crosstab.Crosstab.prototype.getRenderRowCnt = function () {
	if (this.dataArea) {
		return this.dataArea.getRenderRowCnt();
	} else if (this.rowHeaderArea) {
		return this.rowHeaderArea.getRenderRowCnt();
	}
};

sap.zen.crosstab.Crosstab.prototype.getRenderStartRow = function () {
	if (this.dataArea) {
		return this.dataArea.getRenderStartRow();
	} else if (this.rowHeaderArea) {
		return this.rowHeaderArea.getRenderStartRow();
	}
};

sap.zen.crosstab.Crosstab.prototype.getRenderColCnt = function () {
	if (this.dataArea) {
		return this.dataArea.getRenderColCnt();
	} else if (this.columnHeaderArea) {
		return this.columnHeaderArea.getRenderColCnt();
	}
};

sap.zen.crosstab.Crosstab.prototype.getRenderStartCol = function () {
	if (this.dataArea) {
		return this.dataArea.getRenderStartCol();
	} else if (this.columnHeaderArea) {
		return this.columnHeaderArea.getRenderStartCol();
	}
};

sap.zen.crosstab.Crosstab.prototype.setNewLinesCnt = function (iNewLinesCnt) {
	this.iNewLinesCnt = iNewLinesCnt;
};

sap.zen.crosstab.Crosstab.prototype.getNewLinesCnt = function () {
	return this.iNewLinesCnt;
};

sap.zen.crosstab.Crosstab.prototype.setNewLinesPos = function (sNewLinesPos) {
	this.sNewLinesPos = sNewLinesPos;
};

sap.zen.crosstab.Crosstab.prototype.getNewLinesPos = function () {
	return this.sNewLinesPos;
};

sap.zen.crosstab.Crosstab.prototype.isNewLinesTop = function () {
	if (!this.sNewLinesPos) {
		return false;
	}
	return (this.sNewLinesPos === "TOP");
};

sap.zen.crosstab.Crosstab.prototype.isNewLinesBottom = function () {
	if (!this.sNewLinesPos) {
		return false;
	}
	return (this.sNewLinesPos === "BOTTOM");
};

sap.zen.crosstab.Crosstab.prototype.setScrollNotifyCommand = function (sScrollNotifyCommand) {
	this.sScrollNotifyCommand = sScrollNotifyCommand;
};

sap.zen.crosstab.Crosstab.prototype.getScrollNotifyCommand = function () {
	return this.sScrollNotifyCommand;
};

sap.zen.crosstab.Crosstab.prototype.getContextMenuAction = function (sContextMenuComponentId, oDomClickedElement) {
	var fAction = null;
	if (this.oContextMenu) {
		fAction = this.oContextMenu.getContextMenuAction(sContextMenuComponentId, oDomClickedElement);
	}
	return fAction;
};

sap.zen.crosstab.Crosstab.prototype.createContextMenu = function () {
	if (!this.oContextMenu) {
		this.oContextMenu = new sap.zen.crosstab.CrosstabContextMenu(this);
	}
};

sap.zen.crosstab.Crosstab.prototype.setValueHelpStatus = function(iValueHelpStatus) {
	this.iValueHelpStatus = iValueHelpStatus;
};

sap.zen.crosstab.Crosstab.prototype.getValueHelpStatus = function() {
	return this.iValueHelpStatus;
};

sap.zen.crosstab.Crosstab.prototype.getHorizontalHeaderScrollbar = function() {
	return this.oHorizontalHeaderScrollbar;
};

sap.zen.crosstab.Crosstab.prototype.setHorizontalHeaderScrollbar = function(oHorizontalHeaderScrollbar) {
	this.oHorizontalHeaderScrollbar = oHorizontalHeaderScrollbar;
};

sap.zen.crosstab.Crosstab.prototype.setHeaderHScrolling = function(bHeaderHScrolling) {
	this.bHeaderHScrolling = bHeaderHScrolling;
	if (!this.bHeaderHScrolling) {
		this.oHorizontalHeaderScrollbar = null;
	}
};

sap.zen.crosstab.Crosstab.prototype.isHeaderHScrolling = function() {
	return this.bHeaderHScrolling;
};
}; // end of sap/zen/crosstab/Crosstab.js
