// This file has been generated by the SAPUI5 'AllInOne' Builder
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
*/
sap.ui.controller("sap.suite.ui.smartbusiness.designtime.association.Main", {

	onInit : function() {
		jQuery.sap.require("sap.ca.scfld.md.Startup");
		sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.designtime.association', this);
	},

	/**
	 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
	 * 
	 * @memberOf MainXML
	 */
	onExit : function() {
		//exit cleanup code here
	}

});
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
*/
sap.ui.controller("sap.suite.ui.smartbusiness.designtime.authorization.Main", {

	onInit : function() {
		jQuery.sap.require("sap.ca.scfld.md.Startup");
		sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.designtime.authorization', this);
	},

	/**
	 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
	 * 
	 * @memberOf MainXML
	 */
	onExit : function() {
		//exit cleanup code here
	}

});
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
*/
sap.ui.controller("sap.suite.ui.smartbusiness.designtime.drilldown.Main", {

	onInit : function() {
		jQuery.sap.require("sap.ca.scfld.md.Startup");				
		sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.designtime.drilldown', this);
	}
});

sap.ui.controller("sap.suite.ui.smartbusiness.designtime.evaluation.Main", {

	onInit : function() {
		jQuery.sap.require("sap.ca.scfld.md.Startup");				
		sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.designtime.evaluation', this);
	}
});

sap.ui.controller("sap.suite.ui.smartbusiness.designtime.evaluation.view.createEvalTargetThresholdTrendInput", {

	onBeforeRendering : function(){

		var that = this;

		this.parentController = this.getView().getViewData().controller;
		this.oApplicationFacade = this.parentController.oApplicationFacade;
		this.oResourceBundle = this.oApplicationFacade.getResourceBundle(); 

		this.getView().getModel().getData().VALUES_SOURCE = this.getView().byId("valueTypeSelect").getSelectedKey();
		if(this.getView().getModel().getData().TREND){
			this.getView().byId('applyTrendCheckBox').setSelected(true);
		}
		else{
			this.getView().byId('applyTrendCheckBox').setSelected(false);
		}
		
		this.createTrendThresholdLayout();

	},

	openMeasureSelectDialog : function(oEvent){

		var that=this;
		this.valueType = oEvent.getSource().getCustomData()[0].getKey();
		var oDataUrl = this.parentController.getView().getModel().getData().ODATA_URL;
		var oDataEntitySet = this.parentController.getView().getModel().getData().ODATA_ENTITYSET;
		
		
		if(!(oDataUrl && oDataEntitySet)){
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"));
			return;
		}
		else{
			var measureModel = this.populateMeasure(oDataUrl,oDataEntitySet);
			var measureSelectDialog = new sap.m.SelectDialog({
				title: that.oResourceBundle.getText("SELECT_MEASURE"),
				noDataText: that.oResourceBundle.getText("NO_DATA_FOUND"),
				items: {
					path: "/measures",
					template: new sap.m.StandardListItem({
						title:"{measureName}",

					})},
					confirm: function(oEvent){

						switch(that.valueType){
						case "REFERENCE_VALUE" : 
							that.getView().getModel().setProperty("/REFERENCE_VALUE",oEvent.getParameter("selectedItem").getProperty("title"));
							break;
						case "CRITICALHIGH" : 
							that.getView().getModel().setProperty("/CRITICALHIGH",oEvent.getParameter("selectedItem").getProperty("title"));
							break;
						case "WARNINGHIGH" : 
							that.getView().getModel().setProperty("/WARNINGHIGH",oEvent.getParameter("selectedItem").getProperty("title"));
							break;
						case "TARGET" : 
							that.getView().getModel().setProperty("/TARGET",oEvent.getParameter("selectedItem").getProperty("title"));
							break;
						case "WARNINGLOW" : 
							that.getView().getModel().setProperty("/WARNINGLOW",oEvent.getParameter("selectedItem").getProperty("title"));
							break;
						case "CRITICALLOW" : 
							that.getView().getModel().setProperty("/CRITICALLOW",oEvent.getParameter("selectedItem").getProperty("title"));
							break;
						case "TREND" : 
							that.getView().getModel().setProperty("/TREND",oEvent.getParameter("selectedItem").getProperty("title"));
							break;
						};

					},
					liveChange: function(oEvent){
						var searchValue = oEvent.getParameter("value");
						var oFilter = new sap.ui.model.Filter("measureName", sap.ui.model.FilterOperator.Contains, searchValue);
						var oBinding = oEvent.getSource().getBinding("items");
						oBinding.filter([oFilter],false);
					}
			});           
			measureSelectDialog.setModel(measureModel);
			measureSelectDialog.open();
		}
	},
	
	validateQueryServiceURI : function(dataSource) {
		dataSource = jQuery.trim(dataSource);
		if (!jQuery.sap.startsWith(dataSource, "/")) {
			dataSource = "/" + dataSource;
		}
		if (jQuery.sap.endsWith(dataSource, "/")) {
			dataSource = dataSource.substring(0, dataSource.length - 1);
		}
		return dataSource;
	},
	
	populateMeasure : function(dataSource, entitySet) {
		dataSource = this.validateQueryServiceURI(dataSource) + "";
		entitySet = entitySet + "";
		var measures = [], measureDataArray = [], obj = {};
		var i;

		measures = sap.suite.smartbusiness.odata.getAllMeasures(dataSource, entitySet);

		for (i = 0; i < measures.length; i++) {
			obj = {};
			obj.measureName = measures[i];
			measureDataArray.push(obj);
		}
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData({
			measures : measureDataArray
		});
		return oModel;
	},

	createTrendThresholdLayout : function(){

		var that = this;

		var viewModelData = this.getView().getModel().getData();

		if(viewModelData){
			this.createTrendLayout();
			switch(viewModelData.GOAL_TYPE){

			case "MA" :
				that.createLayoutForMaximizingKPI();

				this.getView().byId('kpiGoalTypeImage').setSrc("../../resources/sap/suite/ui/smartbusiness/designtime/evaluation/img/Maximizing.png");
				this.getView().byId('kpiGoalTypeLabel').setText(that.oResourceBundle.getText("KPI_GOAL_TYPE_MAXIMIZING"));
				this.getView().byId('criticalLowLabel').setText(that.oResourceBundle.getText("CRITICAL"));
				this.getView().byId('warningLowLabel').setText(that.oResourceBundle.getText("WARNING"));
				this.getView().byId('criticalHighLabel').setVisible(false);
				this.getView().byId('warningHighLabel').setVisible(false);
				this.getView().byId('evaluationCriticalHigh').setVisible(false);
				this.getView().byId('evaluationWarningHigh').setVisible(false);
				break;

			case "MI" : 
				that.createLayoutForMinimizingKPI();

				this.getView().byId('kpiGoalTypeImage').setSrc("../../resources/sap/suite/ui/smartbusiness/designtime/evaluation/img/Minimizing.png");
				this.getView().byId('kpiGoalTypeLabel').setText(that.oResourceBundle.getText("KPI_GOAL_TYPE_MINIMIZING"));                                                
				this.getView().byId('criticalHighLabel').setText(that.oResourceBundle.getText("CRITICAL"));
				this.getView().byId('warningHighLabel').setText(that.oResourceBundle.getText("WARNING"));
				this.getView().byId('criticalLowLabel').setVisible(false);
				this.getView().byId('warningLowLabel').setVisible(false);
				this.getView().byId('evaluationCriticalLow').setVisible(false);
				this.getView().byId('evaluationWarningLow').setVisible(false);
				break;

			case "RA" :
				that.createLayoutForRangeKPI();

				this.getView().byId('kpiGoalTypeImage').setSrc("../../resources/sap/suite/ui/smartbusiness/designtime/evaluation/img/Range.png");
				this.getView().byId('criticalLowLabel').setText(that.oResourceBundle.getText("CRITICAL_LOW"));
				this.getView().byId('warningLowLabel').setText(that.oResourceBundle.getText("WARNING_LOW"));
				this.getView().byId('criticalHighLabel').setText(that.oResourceBundle.getText("CRITICAL_HIGH"));
				this.getView().byId('warningHighLabel').setText(that.oResourceBundle.getText("WARNING_HIGH"));
				this.getView().byId('kpiGoalTypeLabel').setText(that.oResourceBundle.getText("KPI_GOAL_TYPE_RANGE"));
				break;
			};
		}
	},

	createLayoutForMaximizingKPI : function(){

		var that = this;
		switch(this.getView().byId('valueTypeSelect').getSelectedKey()){

		case "MEASURE" : 
			that.getView().byId('evaluationCriticalLow').setShowValueHelp(true);
			that.getView().byId('evaluationWarningLow').setShowValueHelp(true);
			that.getView().byId('evaluationTarget').setShowValueHelp(true);
			that.getView().byId('evaluationReferenceValue').setShowValueHelp(true);
			break;

		case "FIXED" : 

			that.getView().byId('evaluationCriticalLow').setShowValueHelp(false);
			that.getView().byId('evaluationWarningLow').setShowValueHelp(false);
			that.getView().byId('evaluationTarget').setShowValueHelp(false);
			that.getView().byId('evaluationReferenceValue').setShowValueHelp(false);
			break;
		};
	},

	createLayoutForMinimizingKPI : function(){

		var that = this;
		switch(this.getView().byId('valueTypeSelect').getSelectedKey()){

		case "MEASURE" : 
			that.getView().byId('evaluationCriticalHigh').setShowValueHelp(true);
			that.getView().byId('evaluationWarningHigh').setShowValueHelp(true);
			that.getView().byId('evaluationTarget').setShowValueHelp(true);
			that.getView().byId('evaluationReferenceValue').setShowValueHelp(true);
			break;

		case "FIXED" : 
			that.getView().byId('evaluationCriticalHigh').setShowValueHelp(false);
			that.getView().byId('evaluationWarningHigh').setShowValueHelp(false);
			that.getView().byId('evaluationTarget').setShowValueHelp(false);
			that.getView().byId('evaluationReferenceValue').setShowValueHelp(false);
			break;
		};
	},

	createLayoutForRangeKPI : function(){

		var that = this;
		switch(this.getView().byId('valueTypeSelect').getSelectedKey()){

		case "MEASURE" : 
			var measureSelectFunction = jQuery.proxy(that.openMeasureSelectDialog,that);
			that.getView().byId('evaluationCriticalHigh').setShowValueHelp(true);
			that.getView().byId('evaluationWarningHigh').setShowValueHelp(true);
			that.getView().byId('evaluationCriticalLow').setShowValueHelp(true);
			that.getView().byId('evaluationWarningLow').setShowValueHelp(true);
			that.getView().byId('evaluationTarget').setShowValueHelp(true);
			that.getView().byId('evaluationReferenceValue').setShowValueHelp(true);
			break;

		case "FIXED" : 
			that.getView().byId('evaluationCriticalLow').setShowValueHelp(false);
			that.getView().byId('evaluationWarningLow').setShowValueHelp(false);
			that.getView().byId('evaluationCriticalHigh').setShowValueHelp(false);
			that.getView().byId('evaluationWarningHigh').setShowValueHelp(false);
			that.getView().byId('evaluationTarget').setShowValueHelp(false);
			that.getView().byId('evaluationReferenceValue').setShowValueHelp(false);
			break;
		};
	},
	
	createMeasuresDialog : function(){
		var that = this;
		var oDataUrl = this.parentController.getView().getModel().getData().ODATA_URL;
		var oDataEntitySet = this.parentController.getView().getModel().getData().ODATA_ENTITYSET;
		if(!(oDataUrl && oDataEntitySet)){
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"));
			return;
		}
		var measureModel = this.populateMeasure(oDataUrl,oDataEntitySet);
		that.measuresDialog = new sap.m.SelectDialog({
			title: that.oResourceBundle.getText("SELECT_MEASURE"),
			noDataText: that.oResourceBundle.getText("NO_DATA_FOUND"),
			multiSelect : true,
			items: {
				path: "/measures",
				template: new sap.m.StandardListItem({
					title:"{measureName}",

				})},
			confirm : function(oEvent){
				var oSelectedItem = oEvent.getParameter("selectedItems");
				for ( var key in oSelectedItem)
				{   
					that.byId("additionalMeasures").addToken(new sap.m.Token({text : oSelectedItem[key].getTitle()}));
					that.measuresDialog.removeItem(oSelectedItem[key]);
				}
			}
		});
		that.measuresDialog.setModel(measureModel);
	},
	
	openAdditionalMeasures : function(oEvent){
		var that = this;
		if(!that.measuresDialog){
			that.createMeasuresDialog();
		}
		var items = that.measuresDialog.getItems();
		var tokens = that.byId("additionalMeasures").getTokens();
		for(var i=0;i<tokens.length;i++){
			for(var j=0;j<items.length;j++){
				if(tokens[i].getText() === items[j].getTitle()){
					that.measuresDialog.removeItem(items[j]);
				}
			}
		}
		that.measuresDialog.open();
	},
	
	multiMeasureTokenChange : function(oEvent){
		var that = this;
		if(oEvent.getParameter("type") == "removed"){
			if(!that.measuresDialog){
				that.createMeasuresDialog();
			}
			var item = oEvent.getParameter("token");
			var measures = [];
			measures = that.measuresDialog.getModel().getData().measures;
			for(var i=0;i<measures.length;i++){
				if(measures[i].measureName === item.getText()){
					that.measuresDialog.addItem(
							new sap.m.StandardListItem({
								title : item.getText(),
							})
						);
				}
			}
			
		}
		var measures = [];
		measures = that.byId("additionalMeasures").getTokens();
		for(var i=0,l=measures.length; i<l; i++) {
			if(measures[i].getText() == that.getView().getModel().getData().COLUMN_NAME) {
				that.byId("additionalMeasures").setValueState("Error");
				//sap.suite.smartbusiness.utils.showErrorMessage(this.getView().getViewData().controller.oApplicationFacade.getResourceBundle().getText("ADDI_MEASURE_HAS_MAIN_MEASURE"));
				return;
			}
			else{
				that.byId("additionalMeasures").setValueState("None");
			}
		}
		
	},
	multiMeasureChange : function(value){
		var that = this;
		var measures = [];
		measures = that.byId("additionalMeasures").getValue().split(",");
		for(var i=0;i<measures.length;i++){
			that.byId("additionalMeasures").setValue("")
			that.byId("additionalMeasures").addToken(new sap.m.Token({text : measures[i]}));
		}
		measures = that.byId("additionalMeasures").getTokens();
		if(measures.length == 0){
			that.byId("additionalMeasures").setValueState("None");
		}
		for(var i=0,l=measures.length; i<l; i++) {
			if(measures[i].getText() == that.getView().getModel().getData().COLUMN_NAME) {
				that.byId("additionalMeasures").setValueState("Error");
				//sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ADDI_MEASURE_HAS_MAIN_MEASURE"));
				return;
			}
			else{
				that.byId("additionalMeasures").setValueState("None");
			}
		}
	},
	
	applyAdditionalMeasuresCheckBoxSelected : function(){
		var that = this;
		if(this.getView().byId('selectAdditionalMeasuresCheckBox').getSelected()){
			that.getView().byId('additionalMeasures').setVisible(true);
		}
		else{
			var backDialog = new sap.m.Dialog({
				icon:"sap-icon://warning2",
				title:that.oResourceBundle.getText("WARNING"),
				state:"Warning",
				type:"Message",
				content:[new sap.m.Text({text:that.oResourceBundle.getText("ON_ADIITIONAL_MEASURES_DESELECT")})],
				beginButton: new sap.m.Button({
					text:that.oResourceBundle.getText("CONTINUE"),
					press: function(){
						var tokens = that.getView().byId('additionalMeasures').getTokens();
						for(var i=0;i<tokens.length;i++){
							if(that.measuresDialog){
								that.measuresDialog.addItem(
										new sap.m.StandardListItem({
											title : tokens[i].getText(),
										})
									);
						
							}
						}
						that.getView().byId('additionalMeasures').removeAllTokens();
						that.getView().byId('additionalMeasures').setVisible(false);
						backDialog.close();
						
					}
				}),
				endButton: new sap.m.Button({
					text:that.oResourceBundle.getText("CANCEL"),
					press:function(){
						that.getView().byId('selectAdditionalMeasuresCheckBox').setSelected(true);
						backDialog.close();
					}
				})                                                
			});
			backDialog.open();
		}
		
	},

	applyTrendCheckBoxSelected : function(){
		if(this.getView().byId('applyTrendCheckBox').getSelected()){
			this.getView().getModel().getData().TREND = "";
			this.getView().getModel().updateBindings();
			this.getView().byId('trendLabel').setVisible(true);
			this.getView().byId('evaluationTrend').setVisible(true);

			this.createTrendLayout();
		}
		else{
			this.getView().getModel().getData().TREND = "";
			this.getView().getModel().updateBindings();
			this.getView().byId('trendLabel').setVisible(false);
			this.getView().byId('evaluationTrend').setShowValueHelp(false);
			this.getView().byId('evaluationTrend').setVisible(false);
		}
	},

	createTrendLayout : function(){
		var that = this;

		if(this.getView().byId('applyTrendCheckBox').getSelected()){
			switch((this.getView().byId('valueTypeSelect').getSelectedKey()).toUpperCase()){

			case "MEASURE" :  
				that.getView().byId('evaluationTrend').setShowValueHelp(true);

				break;
			case "FIXED" : 
				that.getView().byId('evaluationTrend').setShowValueHelp(false);
				break;

			default : break;
			};
		}
		else{
			that.getView().byId('trendLabel').setVisible(false);
			that.getView().byId('evaluationTrend').setShowValueHelp(false);
			that.getView().byId('evaluationTrend').setVisible(false);
		}
	},

	valueTypeSelectChange : function(){
		this.getView().getModel().getData().REFERENCE_VALUE = "";
		this.getView().getModel().getData().CRITICALLOW = "";
		this.getView().getModel().getData().WARNINGLOW = "";
		this.getView().getModel().getData().TARGET = "";
		this.getView().getModel().getData().WARNINGHIGH = "";
		this.getView().getModel().getData().CRITICALHIGH = "";
		this.getView().getModel().getData().TREND = "";

		this.getView().getModel().updateBindings();

		this.createTrendThresholdLayout();
	}
});

sap.ui.controller("sap.suite.ui.smartbusiness.designtime.kpi.Main", {

	onInit : function() {
		jQuery.sap.require("sap.ca.scfld.md.Startup");				
		sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.designtime.kpi', this);
	}
});

//jQuery.sap.includeStyleSheet("sap/suite/ui/smartbusiness/kpi/resources/KpiParametersCss.css");
sap.ui.controller("sap.suite.ui.smartbusiness.designtime.tools.migration.Main", {

	onInit: function() {
		
		jQuery.sap.require("sap.ca.scfld.md.Startup");
		sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.designtime.tools.migration', this);
	
	
		
			

	}


});
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
*/
sap.ui.controller("sap.suite.ui.smartbusiness.designtime.visualization.Main", {

	onInit : function() {
		jQuery.sap.require("sap.ca.scfld.md.Startup");
		sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.designtime.visualization', this);
	},

	/**
	 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
	 * 
	 * @memberOf MainXML
	 */
	onExit : function() {
		//exit cleanup code here
	}

});
sap.ui.controller("sap.suite.ui.smartbusiness.designtime.workspace.Main", {

	onInit : function() {
		jQuery.sap.require("sap.ca.scfld.md.Startup");
		sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.designtime.workspace', this);
	},

	/**
	 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
	 * 
	 * @memberOf MainXML
	 */
	onExit : function() {
		//exit cleanup code here
	}

});
sap.ui.controller("sap.suite.ui.smartbusiness.drilldown.view.Main", {
    onInit : function() {
        jQuery.sap.require("sap.ca.scfld.md.Startup");
        sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.drilldown', this);
    }
});
jQuery.sap.declare('sap.suite.ui.smartbusiness.library-all');
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.association.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.authorization.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.drilldown.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.drilldown.js.util'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.evaluation.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.evaluation.view.createEvalTargetThresholdTrendInput.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.kpi.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.tools.migration.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.visualization.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.workspace.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.drilldown.view.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.association.Configuration') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.association.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained


sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.designtime.association.Configuration", {
	oServiceParams: {
		serviceList: [{
			name : "SMART_BUSINESS",
			masterCollection : "INDICATORS_MODELER",
			serviceUrl : "/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata/",
			isDefault : true,
			mockedDataSource : "",
			useBatch : false
		}]
	},

	/**
	 * @inherit
	 */
	getServiceList : function() {
		return this.getServiceParams().serviceList;
	},

	getMasterKeyAttributes : function() {
		//return the key attribute of your master list item
		return ["Id"];
	},
	getExcludedQueryStringParameters : function() {
		return ["sap-client","sap-language"];
	},
	getHanaSystem : function() {
        var hashObj = hasher || window.hasher; 
        var hashArr = hashObj.getHashAsArray();
        if(hashArr && hashArr.length && hashArr[0]) {
               var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
               for(var i=0,l=hashParameters.length; i<l; i++) {
                     if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                            return hashParameters[i].split("=")[1]; 
                     }
               }
        }
        return "";
	},
	getServiceParams : function() {
		if(sap.ushell && sap.ushell.Container) {
			var serviceUrl = this.oServiceParams.serviceList[0].serviceUrl;
	        this.oServiceParams.serviceList[0].serviceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(serviceUrl, this.getHanaSystem());
		}
        return this.oServiceParams;
	},


});
}; // end of sap/suite/ui/smartbusiness/designtime/association/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.association.view.S2.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.association.view.S2.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 */
jQuery.sap.require('sap.ca.scfld.md.controller.ScfldMasterController'); // unlisted dependency retained


sap.ca.scfld.md.controller.ScfldMasterController.extend("sap.suite.ui.smartbusiness.designtime.association.view.S2", {

	onInit: function() {
		var that = this;

		that.oApplicationFacade.getODataModel().setSizeLimit(100000);
		if(!(that.oApplicationFacade.currentLogonHanaUser)) {
			this.oApplicationFacade.getODataModel().read("/SESSION_USER",null,null,true,function(data) {
				that.oApplicationFacade.currentLogonHanaUser = (data.results && data.results.length) ? data.results[0].LOGON_USER : null; 
			}, function(err) {
				that.oApplicationFacade.currentLogonHanaUser = null;
				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
			});
		}
		this.byId("list").getBinding("items").filter(new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ, 1));
	},
	createFilterOptions: function() {
		var that = this; 
		var filterOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("filterOptionsDialog"),
			filterItems: [
			              new sap.m.ViewSettingsFilterItem({
			            	  text: that.oApplicationFacade.getResourceBundle().getText("ACTIVITY"),
			            	  key: "activity",
			            	  items: [
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("SELF_CREATED"),
			            	        	  key: "self_created"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("RECENTLY_WORKED_UPON"),
			            	        	  key: "recently_worked_upon"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("FAVOURITE"),
			            	        	  key: "favorite"
			            	          }),
			            	          ]
			              })
			              ],
			              confirm : function(evt) {
			            	  that.setFiltering(evt.getParameter("filterItems"));
			              }
		});
		return filterOptionsDialog;
	},

	createSortOptions: function() {
		var that = this;
		var sortOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("sortOptionsDialog"),
			sortItems: [
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_NEWEST"),
			            	key: "newest"
			            }), 
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_OLDEST"),
			            	key: "oldest"
			            }),
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_TYPE"),
			            	key: "type"
			            }),
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("ALPHABETICALLY"),
			            	key: "alphabetically"
			            })
			            ],
			            confirm : function(evt) {
			            	if(evt.getParameter("sortItem")) {
			            		that.setSorting(evt.getParameter("sortItem").getKey(), evt.getParameter("sortDescending"));
			            	}
			            	else {
			            		that.setGrouping("workspace", true);
			            	}
			            }
		});
		return sortOptionsDialog;
	},

	createGroupOptions: function() {
		var that = this;
		var groupOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("groupOptionsDialog"),
			groupItems: [
			             new sap.m.ViewSettingsItem({
			            	 text: that.oApplicationFacade.getResourceBundle().getText("BY_WORKSPACE"),
			            	 key: "workspace"
			             }), 
			             new sap.m.ViewSettingsItem({
			            	 text: that.oApplicationFacade.getResourceBundle().getText("BY_TYPE"),
			            	 key: "type"
			             }),
			             new sap.m.ViewSettingsItem({
			            	 text: that.oApplicationFacade.getResourceBundle().getText("BY_STATUS"),
			            	 key: "status"
			             }),
			             new sap.m.ViewSettingsItem({
			            	 text: that.oApplicationFacade.getResourceBundle().getText("BY_OWNER"),
			            	 key: "owner"
			             })
			             ],
			             confirm : function(evt) {
			            	 if(evt.getParameter("groupItem")) {
			            		 that.setGrouping(evt.getParameter("groupItem").getKey(), evt.getParameter("groupDescending"));
			            	 }
			            	 else {
			            		 that.setGrouping("workspace", true);
			            	 }
			             }
		});
		return groupOptionsDialog;
	},

	getHeaderFooterOptions : function() {
		var that = this;
		return {
			sI18NMasterTitle : "MASTER_TITLE",
			onBack : function() {
				window.history.back();
			},
			oFilterOptions : {
				onFilterPressed: function(evt) {
					that.getView().filterOptionDialog = that.getView().filterOptionDialog || that.createFilterOptions();
					that.getView().filterOptionDialog.open();
				}
			},
			oSortOptions : {
				onSortPressed: function(evt) {
					that.getView().sortOptionDialog = that.getView().sortOptionDialog || that.createSortOptions();
					that.getView().sortOptionDialog.open();
				}
			},
			oGroupOptions : {
				onGroupPressed: function(evt) {
					that.getView().groupOptionDialog = that.getView().groupOptionDialog || that.createGroupOptions();
					that.getView().groupOptionDialog.open();
				}
			}
		};
	},

	formatTitle: function(title) {
		return (title || "");
	},

	formatAssociationCount: function(sourceCount,targetCount) {
		if(sourceCount==null && targetCount==null){
			return 0;
		}
		if(sourceCount==null){
			return parseInt(targetCount);
		}
		if(targetCount==null){
			return parseInt(sourceCount);
		}
		return (parseInt(sourceCount)+parseInt(targetCount));
	},

	formatID: function(id,type) {
		if(type == "KPI") {
			return (this.oApplicationFacade.getResourceBundle().getText(type, id));
		}
		else {
			return (this.oApplicationFacade.getResourceBundle().getText(type) + ": " + id);
		}
	},

	formatOwnerName: function(ownerName) {
		return (this.oApplicationFacade.getResourceBundle().getText("ADDED_BY",ownerName));
	},

	formatState: function(state) {
		return (state ? "ACTIVE" : "DRAFT");
	},

	formatGroupName: function(context) {
		var that = this;
		var indicator_type = context.getProperty("MANUAL_ENTRY");
		var groupTitle = "";
		switch(indicator_type) {
		case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
		break;
		case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
		break;
		default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_KPI_OPI");
		}
		return {
			key: groupTitle,
			text: groupTitle
		}
	},

	setGrouping: function(key, groupDescending) {
		var that = this;
		groupDescending = groupDescending || false;
		var list = this.getView().byId("list");
		if(key == "type") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("TYPE",groupDescending,function(context){
				return {
					key: context.getProperty("TYPE"),
					text: (context.getProperty("TYPE") + "S")
				}
			})]);
		} 
		else if(key == "status") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("IS_ACTIVE",groupDescending,function(context){
				return {
					key: context.getProperty("IS_ACTIVE") ? "ACTIVE" : "DRAFT",
							text: context.getProperty("IS_ACTIVE") ? that.oApplicationFacade.getResourceBundle().getText("ACTIVE_KPI_OPI") : that.oApplicationFacade.getResourceBundle().getText("DRAFT_KPI_OPI"),
				}
			})]);
		}
		else if(key == "owner") { 
			list.getBinding("items").sort([new sap.ui.model.Sorter("OWNER_NAME",groupDescending,function(context){
				var owner_name = context.getProperty("OWNER_NAME");
				var groupTitle = "";
				switch(owner_name) {
				case null: groupTitle = that.oApplicationFacade.getResourceBundle().getText("NO_OWNER");
				break;
				case "": groupTitle = that.oApplicationFacade.getResourceBundle().getText("NO_OWNER");
				break;
				default: groupTitle = owner_name;
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			})]);
		}
		else if(key == "workspace") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("MANUAL_ENTRY",groupDescending,function(context){
				var indicator_type = context.getProperty("MANUAL_ENTRY");
				var groupTitle = "";
				switch(indicator_type) {
				case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
				break;
				case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
				break;
				default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_KPI_OPI");
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			})]);
		}
	},

	setFiltering: function(items) {
		var that = this
		var filtersArray = [];
		var list = this.getView().byId("list");

		var filterObject = {
				"drafts": (new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ, 0)),
				"activated": (new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ, 1)),
				"self_created": (new sap.ui.model.Filter("CREATED_BY", sap.ui.model.FilterOperator.EQ, that.oApplicationFacade.currentLogonHanaUser)),
				"recently_worked_upon": (new sap.ui.model.Filter("MANUAL_ENTRY", sap.ui.model.FilterOperator.EQ, 0)),
				"favorite": (new sap.ui.model.Filter("MANUAL_ENTRY", sap.ui.model.FilterOperator.EQ, 1))
		};

		filtersArray = sap.suite.smartbusiness.utils.getFilterArray(items, filterObject);
		
		if(filtersArray.length) {
			list.getBinding("items").filter(new sap.ui.model.Filter(filtersArray,true));
		}
		else {
			list.getBinding("items").filter(filtersArray);
		}
	},
	setSorting: function(key, groupDescending) {
		var that = this;
		groupDescending = groupDescending || false;
		var list = that.getView().byId("list");
		if(key == "newest") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("CREATED_ON",true,null)]); 
		} 
		else if(key == "oldest") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("CREATED_ON",false,null)]);
		}
		else if(key == "type") { 
			list.getBinding("items").sort([new sap.ui.model.Sorter("TYPE",groupDescending,null)]);
		}
		else if(key == "alphabetically") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("TITLE",groupDescending,null)]);
		}
	},
	
	onExit: function() {
		var hashObj = hasher || window.hasher;
		if(!(hashObj.getHash())) {
			sap.suite.smartbusiness.utils.backToHome();
		}
	},
	
	applySearchPatternToListItem : function(oItem, sFilterPattern) {
		if(sap.ca.scfld.md.controller.ScfldMasterController.prototype.applySearchPatternToListItem.apply(this, arguments)) {
			return true;
		}
		else {
//			// extra source of data "the tags"
//			var dependents = oItem.getDependents() || [];
//			for(var i=0,l=dependents.length; i<l; i++) {
//				if(dependents[i].getText().toLowerCase().indexOf(sFilterPattern) != -1) {
//					return true;
//				}
//			}
		}
		return false;
	}
});
}; // end of sap/suite/ui/smartbusiness/designtime/association/view/S2.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.association.view.S3.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.association.view.S3.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 */
jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained


sap.ca.scfld.md.controller.BaseDetailController.extend("sap.suite.ui.smartbusiness.designtime.association.view.S3", {

	onInit : function() { 
		var that = this;
		var view = this.getView();

		this.oRouter.attachRouteMatched(function(evt) {
			if (evt.getParameter("name") === "detail") {

				var context = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").contextPath));
				view.setBindingContext(context);

				that.contextIndicatorId = view.getBindingContext().getProperty("ID") || evt.getParameter("arguments").contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');

				var model = new sap.ui.model.json.JSONModel();
				that.getView().byId("kpiAssociationTable").getBinding("items").filter(new sap.ui.model.Filter([new sap.ui.model.Filter("SOURCE_INDICATOR", sap.ui.model.FilterOperator.EQ, that.contextIndicatorId) , new sap.ui.model.Filter("TARGET_INDICATOR", sap.ui.model.FilterOperator.EQ, that.contextIndicatorId)],false));
				that.getView().byId("tags").getBinding("items").filter(new sap.ui.model.Filter([new sap.ui.model.Filter("ID", sap.ui.model.FilterOperator.EQ, that.contextIndicatorId) , new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ, 1), new sap.ui.model.Filter("TYPE", sap.ui.model.FilterOperator.EQ, "IN")],true));
			}
		}, this);

		this.oHeaderFooterOptions =
		{
				bSuppressBookmarkButton: {},
				oEditBtn : {
					sI18nBtnTxt : "ADD_ASSOCIATION",
					onBtnPressed : function(evt) {
						sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"associationCreate", context:that.getView().getBindingContext().sPath.substring(1)});
					}
				}
		};
		that.byId("idDirection").setColor(sap.ui.core.theming.Parameters.get("sapUiLightText"));
		that.byId("associationEdit").setColor(sap.ui.core.theming.Parameters.get("sapUiLightText"));
		that.byId("associationDelete").setColor(sap.ui.core.theming.Parameters.get("sapUiLightText"));
	},

	getHeaderFooterOptions : function() {
		return this.oHeaderFooterOptions;
	},

	formatAssociationCount: function(sourceCount,targetCount) {
		var that = this;
		if(sourceCount==null && targetCount==null){
			return that.oApplicationFacade.getResourceBundle().getText("ASSOCIATIONS")+"(0)";
		}
		if(sourceCount==null){
			return that.oApplicationFacade.getResourceBundle().getText("ASSOCIATIONS")+"("+targetCount+")";
		}
		if(targetCount==null){
			return that.oApplicationFacade.getResourceBundle().getText("ASSOCIATIONS")+"("+sourceCount+")";
		}
		var count = (parseInt(sourceCount)+parseInt(targetCount));
		return that.oApplicationFacade.getResourceBundle().getText("ASSOCIATIONS")+"("+count.toString()+")";
	},

	formatStatus: function(status) {
		return ((status) ? this.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE") 
				: this.oApplicationFacade.getResourceBundle().getText("STATUS_DRAFT"));
	},

	formatGoalType: function(goalType) {
		var goalTypeText = null;
		switch(goalType) {
		case 'MA': goalTypeText = this.oApplicationFacade.getResourceBundle().getText("MAXIMIZING"); break;
		case 'MI': goalTypeText = this.oApplicationFacade.getResourceBundle().getText("MINIMIZING"); break;
		case 'RA': goalTypeText = this.oApplicationFacade.getResourceBundle().getText("RANGE"); break;
		default : goalTypeText = this.oApplicationFacade.getResourceBundle().getText("NONE");
		}
		return goalTypeText;
	},

	formatTags: function(tag) { 
		return ((this.getView().byId("tags").getItems().length > 1) ? (', ' + tag) : (tag));
	},
	formatStatusOfAssociation: function(is_active,counter){
		var that = this;
		if(counter=="2"){
			var str = that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE")+","+that.oApplicationFacade.getResourceBundle().getText("STATUS_DRAFT");
			return str;
		}
		if(is_active==0){
			return that.oApplicationFacade.getResourceBundle().getText("STATUS_NEW");
		}
		if(is_active==1){
			return that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE");
		}
	},

	formatProperties: function(name, value)  {
		var prop = ((this.getView().byId("assoProperties").getItems().length > 1) ? (", " + name + " : " + value) : (name + " : " + value+","));
		return prop;
	},
	formatAssociationType: function(associationType){
		if(associationType=="SUPPORTING"){
			return this.oApplicationFacade.getResourceBundle().getText("SUPPORTING");
		}
		else{
			return this.oApplicationFacade.getResourceBundle().getText("CONFLICTING");
		}
	},
	formatArrowDirection: function(source_indicator) {
		return ((source_indicator == this.contextIndicatorId) ? ("sap-icon://arrow-right") : ("sap-icon://arrow-left"));  
	},

	formatTargetIndicatorText: function(sourceIndicator, targetIndicator, sourceIndicatorTitle, targetIndicatorTitle) { 
		var indicatorText = null;
		if(targetIndicator == this.contextIndicatorId) {
			indicatorText = sourceIndicatorTitle;
		}
		else {
			indicatorText = targetIndicatorTitle;
		}
		return indicatorText;
	},

	handleAssociationEdit: function(evt) {
		var that = this;
		var associationPathText;
		if(evt.getSource().getBindingContext().getObject().COUNTER=="1"){
			associationPathText = evt.getSource().getBindingContext().sPath.substring(1).replace("ASSOCIATIONS_MODELER","ASSOCIATIONS");
		}
		else{
			associationPathText = evt.getSource().getBindingContext().sPath.substring(1).replace("ASSOCIATIONS_MODELER","ASSOCIATIONS").replace("IS_ACTIVE=1","IS_ACTIVE=0")
		}
		sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"associationEdit", context:(that.getView().getBindingContext().sPath.substring(1).replace("INDICATORS_MODELER","INDICATORS") + "/" + associationPathText)});
	},

	handleAssociationDelete: function(event) {
		var that = this;
		that.entity = event.getSource().getBindingContext().sPath.substring(1).replace("ASSOCIATIONS_MODELER","ASSOCIATIONS");
		that.entityObj=that.formOldObjectForAssociation(that.entity);

		var confirmDialog = new sap.m.Dialog({
			title:that.oApplicationFacade.getResourceBundle().getText("DELETE"),
			type:"Message",
			content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("DELETE_ASSOCIATION")})],
			beginButton: new sap.m.Button({
				text:"Ok",
				press: function(oEvent){
				
					confirmDialog.close();
					var ODataModel = that.oApplicationFacade.getODataModel();
					/*ODataModel.remove(that.entity,null,function(data){
						sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETION_SUCCESSFUL"));
						ODataModel.refresh();
					
					
					},
					function(error){
						sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETION_FAILED"));
					});*/
					
					//ajax call to delete the association
					sap.suite.smartbusiness.utils.remove(sap.suite.smartbusiness.utils.serviceUrl("ASSOCIATIONS_CUD"),that.entityObj,function(data){
						sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETION_SUCCESSFUL"));
						ODataModel.refresh();
					},
					function(error){
						sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETION_FAILED"));
					});
					 //////////////////
					
					}
			}),
			endButton: new sap.m.Button({
				text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
				press:function(){
					confirmDialog.close();}
			})                                              
		});
		confirmDialog.open();                                                                 
	},
	formOldObjectForAssociation: function(str) {
		var that = this;
		
		var oldAssociationPayload={};
		oldAssociationPayload.TYPE = str.substring(str.indexOf("'",str.search("TYPE"))+1, str.indexOf("'",str.indexOf("'",str.search("TYPE"))+1));
		oldAssociationPayload.SOURCE_INDICATOR= str.substring(str.indexOf("'",str.search("SOURCE_INDICATOR"))+1, str.indexOf("'",str.indexOf("'",str.search("SOURCE_INDICATOR"))+1));
		oldAssociationPayload.TARGET_INDICATOR= str.substring(str.indexOf("'",str.search("TARGET_INDICATOR"))+1, str.indexOf("'",str.indexOf("'",str.search("TARGET_INDICATOR"))+1));
		oldAssociationPayload.IS_ACTIVE= parseInt(str.substring(str.indexOf("=",str.search("IS_ACTIVE"))+1, str.indexOf("=",str.search("IS_ACTIVE"))+2));

		return oldAssociationPayload;
		
	},
});

}; // end of sap/suite/ui/smartbusiness/designtime/association/view/S3.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.association.view.S4.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.association.view.S4.controller');
jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained

jQuery.sap.includeStyleSheet("../../resources/sap/suite/ui/smartbusiness/designtime/association/view/nameValueTable.css");

sap.ca.scfld.md.controller.BaseDetailController.extend("sap.suite.ui.smartbusiness.designtime.association.view.S4", {
	/**
	 * Called when a controller is instantiated and its View controls (if available) are already created.
	 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
	 */
	onInit: function() {
		var that = this; 
		var view = this.getView();

		this.oRouter.attachRouteMatched(function(evt) {
			that.viewMode = evt.getParameter("name");
			that.directionChange=0;
			that.getView().byId("associationPropertyValue").setValueState("None");
			that.getView().byId("associationPropertyName").setValueState("None");

			if (evt.getParameter("name") === "associationEdit") {

				var context = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").contextPath));
				that.associationContext = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").associationPath));

				view.sourceIndicatorContexts = {contextPath:evt.getParameter("arguments").contextPath, context:context};
				view.associationContexts = {contextPath:evt.getParameter("arguments").associationPath, context:that.associationContext};


				view.setBindingContext(that.associationContext);

				that.modelForSelectAssociation = new sap.ui.model.json.JSONModel();
				that.byId("associationTypeSelect").setModel(that.modelForSelectAssociation, "associationSelectModel");

				that.oApplicationFacade.getODataModel().read(view.associationContexts.contextPath,null,null,false,function(data){
					that.modelForSelectAssociation.setData({TITLE:data.TITLE, TYPE:data.TYPE});
					that.associationData = data;
					that.initialAssociationType = data.TYPE;
				}, function(){
				});

				that.sourceIndicatorModel = new sap.ui.model.json.JSONModel();
				that.byId("sourceIndicatorContent").setModel(that.sourceIndicatorModel, "sourceIndicator");


				that.targetIndicatorModel = new sap.ui.model.json.JSONModel();
				that.byId("targetIndicatorContent").setModel(that.targetIndicatorModel, "targetIndicator");

				that.associationPropertiesModel = new sap.ui.model.json.JSONModel();
				that.byId("propertyNameValueBox").setModel(that.associationPropertiesModel, "associationProp");

				if(context.getObject()) {
					that.contextIndicatorId = view.getBindingContext().getProperty("ID");
				}
				else {
					this.oApplicationFacade.getODataModel().read(view.sourceIndicatorContexts.contextPath, null, null, true, function(data){
						that.contextIndicatorId = data.ID;
					}, function(){
					});
				}   
				that.oApplicationFacade.getODataModel().read(view.associationContexts.contextPath +"/SOURCE_INDICATOR_INFO",null,null,false,function(data){
					if(data.results && data.results.length) {
						that.sourceIndicatorModel.setData({INDICATOR:data.results});
						that.byId("sourceIndicatorText").setText(that.oApplicationFacade.getResourceBundle().getText("CURRENT_KPI_OPI")+": " + (data.results[0].TITLE || ""));
						that.initialSourceIndicatorId = data.results[0].ID;
					}
					else {
						that.sourceIndicatorModel.setData({INDICATOR:data});
						that.byId("sourceIndicatorText").setText(that.oApplicationFacade.getResourceBundle().getText("CURRENT_KPI_OPI")+": " + (data.TITLE || ""));
						that.initialSourceIndicatorId = data.ID;
					}
				}, function(){
				});

				that.oApplicationFacade.getODataModel().read(view.associationContexts.contextPath +"/TARGET_INDICATOR_INFO",null,null,false,function(data){
					if(data.results && data.results.length) {
						that.targetIndicatorModel.setData({INDICATOR:data.results});
						that.byId("selectedKpiOpiId").setValue(data.results[0].TITLE);
						that.initialTargetIndicatorId = data.results[0].ID;
					}
					else {
						that.targetIndicatorModel.setData({INDICATOR:data});
						that.byId("selectedKpiOpiId").setValue(data.TITLE);
						that.initialTargetIndicatorId = data.ID;
					}
				}, function(){
				});


				that.oApplicationFacade.getODataModel().read(view.associationContexts.contextPath +"/PROPERTIES",null,null,true,function(data){
					that.associationPropertiesModel.setData({PROPERTIES:data.results});
					//Storing initial of Properties model
					that.oldPropertiesList = $.extend(true, {}, that.getView().byId('propertyNameValueBox').getModel("associationProp"));
				}, function(){
				});
			}
			else if (evt.getParameter("name") === "associationCreate") {

				that.sourceIndicatorModel = new sap.ui.model.json.JSONModel();
				that.byId("sourceIndicatorContent").setModel(that.sourceIndicatorModel, "sourceIndicator");

				that.associationData = {};

				that.targetIndicatorModel = new sap.ui.model.json.JSONModel();
				that.targetIndicatorModel.setData({INDICATOR:[]});
				that.byId("targetIndicatorContent").setModel(that.targetIndicatorModel, "targetIndicator");

				that.associationPropertiesModel = new sap.ui.model.json.JSONModel();
				that.byId("propertyNameValueBox").setModel(that.associationPropertiesModel, "associationProp");
				that.associationPropertiesModel.setData({PROPERTIES:[]});
				that.oldPropertiesList = $.extend(true, {}, that.associationPropertiesModel);

				this.byId("selectedKpiOpiId").setEditable(true);

				var context = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").contextPath));
				that.associationContext = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").associationPath));

				view.sourceIndicatorContexts = {contextPath:evt.getParameter("arguments").contextPath, context:context};
				view.associationContexts = {contextPath:evt.getParameter("arguments").associationPath, context:that.associationContext};
				view.setBindingContext(context);
				that.byId("selectedKpiOpiId").setValue("");

				if(context.getObject()) {
					that.contextIndicatorId = view.getBindingContext().getProperty("ID");
					this.byId("sourceIndicatorText").setText(that.oApplicationFacade.getResourceBundle().getText("CURRENT_KPI_OPI")+": "+ (view.getBindingContext().getProperty("TITLE") || ""));
					that.sourceIndicatorModel.setData({INDICATOR:that.oApplicationFacade.getODataModel().oData[evt.getParameter("arguments").contextPath]});
				}
				else {
					this.oApplicationFacade.getODataModel().read(view.sourceIndicatorContexts.contextPath, null, null, true, function(data){
						that.byId("sourceIndicatorText").setText(that.oApplicationFacade.getResourceBundle().getText("CURRENT_KPI_OPI")+": " + (data.TITLE || ""));
						that.sourceIndicatorModel.setData({INDICATOR:data});
						that.contextIndicatorId = data.ID;
					}, function(){
					});
				}
				
			}
		}, this);

		this.oHeaderFooterOptions = {
				bSuppressBookmarkButton : {},
				onBack: function(){
					var backDialog = new sap.m.Dialog({
						icon:"sap-icon://warning2",
						title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
						state:"Error",
						type:"Message",
						content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("ON_BACK_WARNING")})],
						beginButton: new sap.m.Button({
							text:that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
							press: function(){
								if(that.viewMode=="associationEdit"){
									sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath.replace("INDICATORS","INDICATORS_MODELER")});
								}
								else if(that.viewMode=="associationCreate"){
									sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath});
								}
							}
						}),
						endButton: new sap.m.Button({
							text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
							press:function(){backDialog.close();}
						})                                              
					});
					if(that.anythingChangedOnBack()==true){
						backDialog.open();
					}
					else{
						if(that.viewMode=="associationEdit"){
							sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath.replace("INDICATORS","INDICATORS_MODELER")});
						}
						else if(that.viewMode=="associationCreate"){
							sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath});
						}
					}
				},
				oEditBtn : {
					sId: "SAVE",
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						view.getController().saveAndExit(0);
					}
				},
				buttonList : [ {
					sI18nBtnTxt : "SAVE_AND_ACTIVATE",
					onBtnPressed : function(evt) {
						view.getController().saveAndExit(1);
						view.getController().activateAssociation();
					}
				},{
					sI18nBtnTxt : "SAVE_CREATE_NEW",
					onBtnPressed : function(evt) {
						view.getController().saveAndCreateNew();
					}
				},{
					sI18nBtnTxt : "CANCEL",
					onBtnPressed : function(evt) {
						var backDialog = new sap.m.Dialog({
							icon:"sap-icon://warning2",
							title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
							state:"Error",
							type:"Message",
							content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("ON_BACK_WARNING")})],
							beginButton: new sap.m.Button({
								text:that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
								press: function(){view.getController().cancel();}
							}),
							endButton: new sap.m.Button({
								text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
								press:function(){backDialog.close();}
							})                                              
						});
						if(that.anythingChangedOnBack()==true){
							backDialog.open();
						}
						else{
							if(that.viewMode=="associationEdit"){
								sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath.replace("INDICATORS","INDICATORS_MODELER")});
							}
							else if(that.viewMode=="associationCreate"){
								sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath});
							}
						}
					}
				}]
		};
		var delText = that.oApplicationFacade.getResourceBundle().getText("DELETE")+" "+that.oApplicationFacade.getResourceBundle().getText("DRAFT");
		this.oHeaderFooterOptionsForDraft = {
				bSuppressBookmarkButton : {},
				onBack: function(){
					var backDialog = new sap.m.Dialog({
						icon:"sap-icon://warning2",
						title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
						state:"Error",
						type:"Message",
						content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("ON_BACK_WARNING")})],
						beginButton: new sap.m.Button({
							text:that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
							press: function(){
								if(that.viewMode=="associationEdit"){
									sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath.replace("INDICATORS","INDICATORS_MODELER")});
								}
								else if(that.viewMode=="associationCreate"){
									sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath});
								}
							}
						}),
						endButton: new sap.m.Button({
							text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
							press:function(){backDialog.close();}
						})                                              
					});
					if(that.anythingChangedOnBack()==true){
						backDialog.open();
					}
					else{
						if(that.viewMode=="associationEdit"){
							sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath.replace("INDICATORS","INDICATORS_MODELER")});
						}
						else if(that.viewMode=="associationCreate"){
							sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath});
						}
					}
				},
				oEditBtn : {
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						view.getController().saveAndExit(0);
					}
				},
				buttonList : [ {
					sI18nBtnTxt : "SAVE_AND_ACTIVATE",
					onBtnPressed : function(evt) {
						view.getController().saveAndExit(1);
						view.getController().activateAssociation();
					}
				},{
					sI18nBtnTxt : "SAVE_CREATE_NEW",
					onBtnPressed : function(evt) {
						view.getController().saveAndCreateNew();
					}
				},{
					sI18nBtnTxt : "CANCEL",
					onBtnPressed : function(evt) {
						var backDialog = new sap.m.Dialog({
							icon:"sap-icon://warning2",
							title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
							state:"Error",
							type:"Message",
							content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("ON_BACK_WARNING")})],
							beginButton: new sap.m.Button({
								text:that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
								press: function(){view.getController().cancel();}
							}),
							endButton: new sap.m.Button({
								text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
								press:function(){backDialog.close();}
							})                                              
						});
						backDialog.open();
					}
				},{
					sI18nBtnTxt : delText,
					onBtnPressed : function(evt) {
						var confirmDialog = new sap.m.Dialog({
							title: delText,
							type:"Message",
							beginButton: new sap.m.Button({
								text:that.oApplicationFacade.getResourceBundle().getText("OK"),
								press: function(){
									confirmDialog.close();
									that.deleteDraft();
									if(that.viewMode=="associationEdit"){
										sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath.replace("INDICATORS","INDICATORS_MODELER")});
									}
								}
							}),
							endButton: new sap.m.Button({
								text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
								press:function(){
									confirmDialog.close();
								}
							})                                              
						});
						confirmDialog.open();
					}
				}]
		};
		that.byId("directionArrowAssociation").setColor(sap.ui.core.theming.Parameters.get("sapUiLightText"));
		that.byId("deleteAssociationProp").setColor(sap.ui.core.theming.Parameters.get("sapUiLightText"));
	},
	formOldAssociationObject: function(str) {
		var that = this;
		var oldAssociationPayload={};
		oldAssociationPayload.TYPE = str.substring(str.indexOf("'",str.search("TYPE"))+1, str.indexOf("'",str.indexOf("'",str.search("TYPE"))+1));
		oldAssociationPayload.SOURCE_INDICATOR= str.substring(str.indexOf("'",str.search("SOURCE_INDICATOR"))+1, str.indexOf("'",str.indexOf("'",str.search("SOURCE_INDICATOR"))+1));
		oldAssociationPayload.TARGET_INDICATOR= str.substring(str.indexOf("'",str.search("TARGET_INDICATOR"))+1, str.indexOf("'",str.indexOf("'",str.search("TARGET_INDICATOR"))+1));
		oldAssociationPayload.IS_ACTIVE= parseInt(str.substring(str.indexOf("=",str.search("IS_ACTIVE"))+1, str.indexOf("=",str.search("IS_ACTIVE"))+2));

		return oldAssociationPayload;
	},
	anythingChangedOnBack: function(){
		var that = this;
		var sPath = (that.viewMode != "associationCreate") ? that.associationContext.sPath : null;
		var oldAssociationObject = sPath ? that.formOldAssociationObject(sPath) : {TARGET_INDICATOR:"",SOURCE_INDICATOR:"",TYPE:this.byId("associationTypeSelect").getItems()[0].getKey(),IS_ACTIVE:0};
		var newAssociationProperties = that.getView().byId('propertyNameValueBox').getModel("associationProp").getData().PROPERTIES;
		var oldAssociationProperties = that.oldPropertiesList ? that.oldPropertiesList.getData().PROPERTIES : [];
		
		var updatePropertiesPayload = sap.suite.smartbusiness.utils.dirtyBitCheck({
			oldPayload : oldAssociationProperties,
			newPayload : newAssociationProperties,
			objectType : "ASSOCIATION_PROPERTIES"
		});
		if(oldAssociationObject.TARGET_INDICATOR != (that.targetIndicatorModel.getData().INDICATOR.ID || "") || that.directionChange==1 || oldAssociationObject.TYPE!=that.byId("associationTypeSelect").getSelectedItem().getKey() || updatePropertiesPayload.updates.length>0 || updatePropertiesPayload.deletes.length>0){
			return true;
		}
		else{
			return false;
		}
	},
	deleteDraft: function(){
		var that = this;
		var sPath = that.associationContext.sPath;
		var deletObject = that.formOldAssociationObject(sPath);
		sap.suite.smartbusiness.utils.remove(sap.suite.smartbusiness.utils.serviceUrl("ASSOCIATIONS_CUD"),deletObject,function(data){
			sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETION_SUCCESSFUL"));
			//ODataModel.refresh();
		},
		function(error){
			sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETION_FAILED"));
		});
	},
	changeValueState: function(){
		var that = this;
		that.getView().byId("associationPropertyValue").setValueState("None");
		that.getView().byId("associationPropertyName").setValueState("None");
	},
	getHeaderFooterOptions : function() {
		var that = this;
		var sPath = that.associationContext.sPath;
		var IS_ACTIVE = parseInt(sPath.charAt(sPath.indexOf("=",sPath.search("IS_ACTIVE"))+1));
		if(that.viewMode=="associationEdit"){
			if(IS_ACTIVE==1){
				return this.oHeaderFooterOptions;
			}
			else{
				return this.oHeaderFooterOptionsForDraft;
			}
		}
		else if(that.viewMode=="associationCreate"){
			return this.oHeaderFooterOptions;
		}
	},
	handleAssociationTypeChange : function(){
		var that = this;
		var modelForProperties = this.getView().byId('propertyNameValueBox').getModel("associationProp");
		modelForProperties.getData().PROPERTIES = modelForProperties.getData().PROPERTIES || [];
		for(i=0;i<modelForProperties.getData().PROPERTIES.length;i++){
			if(modelForProperties.getData().PROPERTIES[i].TYPE=="SUPPORTING"){
				modelForProperties.getData().PROPERTIES[i].TYPE="CONFLICTING";
			}
			else{
				modelForProperties.getData().PROPERTIES[i].TYPE="SUPPORTING";
			}
		}
		modelForProperties.updateBindings();
//		if(this.viewMode == "associationEdit") {
//			if((this.byId("associationTypeSelect").getSelectedItem().getKey() != this.initialAssociationType) || (this.sourceIndicatorModel.getData().INDICATOR.ID != this.initialSourceIndicatorId) || (this.targetIndicatorModel.getData().INDICATOR.ID != this.initialTargetIndicatorId)) {
//				this.setBtnEnabled("SAVE",false);
//			}
//			else {
//				this.setBtnEnabled("SAVE",true);
//			}
//		}
	},

	handleReverseAssociationDirection : function(){
		var that = this;
		if(that.directionChange==0){
			that.directionChange=1;
		}
		else{
			that.directionChange=0;
		}
		var i,temp;
		var sourceIndicator = this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR;
		var targetIndicator = this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR;

		if(targetIndicator.length==0){
			this.getView().byId("selectedKpiOpiId").setValueState("Error");
			sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("TARGET_KPI_NOT_SELECTED"));
		}
		else{
			this.byId("sourceIndicatorContent").getModel("sourceIndicator").setData({INDICATOR:targetIndicator});
			this.byId("targetIndicatorContent").getModel("targetIndicator").setData({INDICATOR:sourceIndicator});

			//Handle reverse for properties
			var modelForProperties = this.getView().byId('propertyNameValueBox').getModel("associationProp");
			modelForProperties.getData().PROPERTIES = modelForProperties.getData().PROPERTIES || [];

			for(i=0;i<modelForProperties.getData().PROPERTIES.length;i++){
				temp = null;
				temp = modelForProperties.getData().PROPERTIES[i].SOURCE_INDICATOR;
				modelForProperties.getData().PROPERTIES[i].SOURCE_INDICATOR = modelForProperties.getData().PROPERTIES[i].TARGET_INDICATOR;
				modelForProperties.getData().PROPERTIES[i].TARGET_INDICATOR = temp;
			}      
			modelForProperties.updateBindings();
		}
//		if(this.viewMode == "associationEdit") {
//			if((this.byId("associationTypeSelect").getSelectedItem().getKey() != this.initialAssociationType) || (this.sourceIndicatorModel.getData().INDICATOR.ID != this.initialSourceIndicatorId) || (this.targetIndicatorModel.getData().INDICATOR.ID != this.initialTargetIndicatorId)) {
//				this.setBtnEnabled("SAVE",false);
//			}
//			else {
//				this.setBtnEnabled("SAVE",true);
//			}
//		}
	},

	listAllKpis:function(){ 
		var that = this;

		that.hanaViewValueHelpDialog = that.hanaViewValueHelpDialog || new sap.m.SelectDialog({
			title: that.oApplicationFacade.getResourceBundle().getText("SELECT_VIEW"),
			noDataText: that.oApplicationFacade.getResourceBundle().getText("NO_DATA_FOUND"),
			items: {
				path: "/INDICATORS_MODELER",
				template: new sap.m.ObjectListItem({
					title:"{TITLE}",
					number:"{parts:[{path:'ASSOCIATION_SOURCE_COUNT'},{path:'ASSOCIATION_TARGET_COUNT'}], formatter:'.formatAssociationCount'}",
					firstStatus: new sap.m.ObjectStatus({
						text: that.oApplicationFacade.getResourceBundle().getText("ASSOCIATIONS"),
					}),
					attributes: [
					             new sap.m.ObjectAttribute({
					            	 text: "{ID}"
					             })
					             ]
				}),
			},
			confirm: function(oEvent){
				var i;
				if (that.viewMode === "associationEdit"){                            
				}
				else if (that.viewMode === "associationCreate"){
					if(that.getView().byId("selectedKpiOpiId").getValueState()==="Error"){
						that.getView().byId("selectedKpiOpiId").setValueState("None");
					}
				}
				that.byId("selectedKpiOpiId").setValue(oEvent.getParameter("selectedItem").getBindingContext().getProperty("TITLE"));
				that.targetIndicatorModel.setData({INDICATOR:oEvent.getParameter("selectedItem").getBindingContext().getObject()});
				that.targetIndicatorModel.updateBindings();

				//Change Properties Target kpi
				var modelForProperties = that.getView().byId('propertyNameValueBox').getModel("associationProp");
				modelForProperties.getData().PROPERTIES = modelForProperties.getData().PROPERTIES || [];

				for(i=0;i<modelForProperties.getData().PROPERTIES.length;i++){
					modelForProperties.getData().PROPERTIES[i].TARGET_INDICATOR = oEvent.getParameter("selectedItem").getBindingContext().getProperty("ID");
				}      
				modelForProperties.updateBindings();
//				if(that.viewMode == "associationEdit") {
//					if((that.byId("associationTypeSelect").getSelectedItem().getKey() != that.initialAssociationType) || (that.sourceIndicatorModel.getData().INDICATOR.ID != that.initialSourceIndicatorId) || (that.targetIndicatorModel.getData().INDICATOR.ID != that.initialTargetIndicatorId)) {
//						that.setBtnEnabled("SAVE",false);
//					}
//					else {
//						that.setBtnEnabled("SAVE",true);
//					}
//				}
			},
			liveChange: function(oEvent){
				var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
				var oFilterById = new sap.ui.model.Filter("tolower(ID)", sap.ui.model.FilterOperator.Contains, searchValue);
				var oFilterByTitle = new sap.ui.model.Filter("tolower(TITLE)", sap.ui.model.FilterOperator.Contains, searchValue);
				var oFilterCurrentId = new sap.ui.model.Filter("ID", sap.ui.model.FilterOperator.NE, that.contextIndicatorId);
				var oFilterIsActive = new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ, 1);
				var oBinding = oEvent.getSource().getBinding("items");
				var firstFilters = new sap.ui.model.Filter([oFilterById,oFilterByTitle], false);
				var secondFilters = new sap.ui.model.Filter([oFilterCurrentId,oFilterIsActive], true);
				oBinding.filter(new sap.ui.model.Filter([firstFilters, secondFilters], true));
			}
		});    
		that.hanaViewValueHelpDialog.setModel(that.oApplicationFacade.getODataModel());
		var filters = [];
		filters.push(new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ, 1));
		filters.push(new sap.ui.model.Filter("ID", sap.ui.model.FilterOperator.NE, that.contextIndicatorId));
		that.hanaViewValueHelpDialog.getBinding("items").filter(new sap.ui.model.Filter(filters,true));
		that.hanaViewValueHelpDialog.open();
	},

	addNewProperty: function() {
		var that = this;
		var propertyPresent = 0;
		if(this.getView().byId("associationPropertyName").getValue() && this.getView().byId("associationPropertyValue").getValue()) {

			if(this.viewMode=="associationEdit"){
				this.isActiveValue = 0;
			}
			else if(this.viewMode=="associationCreate"){

				var targetIndicator = this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR;
				if(targetIndicator.length==0){
					this.getView().byId("selectedKpiOpiId").setValueState("Error");
					sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("TARGET_KPI_NOT_SELECTED"));
					return;
				}
				this.isActiveValue = 0;
			}                    
			this.getView().byId("associationPropertyName").setValueState("None");
			if(this.getView().byId("associationPropertyValue").getValue()){
				this.getView().byId("associationPropertyValue").setValueState("None");
				var propertyModel = this.getView().byId('propertyNameValueBox').getModel("associationProp");
				propertyModel.getData().PROPERTIES = propertyModel.getData().PROPERTIES || [];

				for(var i=0;i<propertyModel.getData().PROPERTIES.length;i++){
					if(propertyModel.getData().PROPERTIES[i].NAME == this.getView().byId("associationPropertyName").getValue() && propertyModel.getData().PROPERTIES[i].VALUE == this.getView().byId("associationPropertyValue").getValue()){
						propertyPresent = 1;
					}
				}
				if(propertyPresent == 0){
					propertyModel.getData().PROPERTIES.push({NAME:this.getView().byId("associationPropertyName").getValue(),VALUE:this.getView().byId("associationPropertyValue").getValue(), TYPE:this.byId("associationTypeSelect").getSelectedItem().getKey(), SOURCE_INDICATOR:(this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR.ID || this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR[0].ID), TARGET_INDICATOR:(this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR.ID || this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR[0].ID), IS_ACTIVE:this.isActiveValue});
					propertyModel.updateBindings();
					this.getView().byId("associationPropertyName").setValue("");
					this.getView().byId("associationPropertyValue").setValue("");
				}
				else{
					this.getView().byId("associationPropertyValue").setValueState("Error");
					this.getView().byId("associationPropertyName").setValueState("Error");
					sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_PROPERTY_VALUE"));
				}
			}
			else {
				this.getView().byId("associationPropertyValue").setValueState("Error");
				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ENTER_PROPERTY_VALUE"));
			}
		}
		else {
			this.getView().byId("associationPropertyName").setValueState("Error");
			sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("EMTER_PROPERTY_NAME"));
		}
	},

	removeProperty : function(evt) { 
		var that = this;
		var path = evt.getSource().getBindingContext("associationProp").getPath();
		evt.getSource().getBindingContext("associationProp").getModel().getData().PROPERTIES.splice(path
				.substring(path.lastIndexOf("/") + 1), 1);
		evt.getSource().getBindingContext("associationProp").getModel().updateBindings();
	},

	saveAndExit: function(isSaveAndActivate) {
		var that = this;
		this.saveAssociation(isSaveAndActivate);
		if(isSaveAndActivate==0){
			//that.oApplicationFacade.getODataModel().refresh();
			if(this.viewMode=="associationEdit"){
				sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath.replace("INDICATORS","INDICATORS_MODELER")});
			}
			else if(this.viewMode=="associationCreate"){
				sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath});
			}
		}
	},

	activateAssociation: function() {
		var that = this;
		var sourceIndicator = this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR.length ? this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR[0] : this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR;
		var targetIndicator = this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR.length ? this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR[0] : this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR;

		that.ODataModel = that.oApplicationFacade.getODataModel();



		/*that.ODataModel.create("/ACTIVE_ASSOCIATIONS", payload, null, function(data) {
                     sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVATED"));
              }, function(err) {
                     sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_ACTIVATION_FAILED"));
              });   
		 */

		/****ACTIVATE ASSOCIATION****/
		sap.suite.smartbusiness.utils.create(sap.suite.smartbusiness.utils.serviceUrl("ACTIVATE_ASSOCIATION_SERVICE_URI"),that.payload,null,
				function() {
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVATED"));
					that.oApplicationFacade.getODataModel().refresh();
					if(that.viewMode=="associationEdit"){
						sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath.replace("INDICATORS","INDICATORS_MODELER")});
					}
					else if(that.viewMode=="associationCreate"){
						sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath});
					}
				},
				function(err) {
					sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_ACTIVATION_FAILED"), err.responseText);
				});
		//that.oApplicationFacade.getODataModel().refresh();

		/*****************************************/
	},

	saveAndCreateNew: function() {
		var that = this;
		this.saveAssociation();

		that.byId("selectedKpiOpiId").setValue("");
		that.targetIndicatorModel.setData({});
		that.targetIndicatorModel.updateBindings();

		//Change Properties Target kpi
		var modelForProperties = that.getView().byId('propertyNameValueBox').getModel("associationProp");
		modelForProperties.getData().PROPERTIES = modelForProperties.getData().PROPERTIES || [];

		modelForProperties.getData().PROPERTIES = [];   
		modelForProperties.updateBindings();
		//this.oApplicationFacade.getODataModel().refresh();
	},

	cancel: function() {
		var that = this;
		if(that.viewMode=="associationEdit"){
			sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath.replace("INDICATORS","INDICATORS_MODELER")});
		}
		else if(that.viewMode=="associationCreate"){
			sap.suite.smartbusiness.utils.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath});
		}
	},

	formOldObjectForAssociation: function(sourceIndicator,targetIndicator) {
		var that = this;

		var sourceIndicatorObj = that.sourceIndicatorModel.getData().INDICATOR.length ? that.sourceIndicatorModel.getData().INDICATOR[0] : that.sourceIndicatorModel.getData().INDICATOR;
		var oldAssociationPayload = {TYPE:this.byId("associationTypeSelect").getSelectedItem().getKey(),SOURCE_INDICATOR:sourceIndicator.ID, TARGET_INDICATOR:targetIndicator.ID, IS_ACTIVE:0, CREATED_BY:sourceIndicatorObj.CREATED_BY, CREATED_ON:sourceIndicatorObj.CREATED_ON, CHANGED_BY:null, CHANGED_ON:null};
		var str = that.associationContext.sPath;

		oldAssociationPayload.TYPE = str.substring(str.indexOf("'",str.search("TYPE"))+1, str.indexOf("'",str.indexOf("'",str.search("TYPE"))+1));
		oldAssociationPayload.SOURCE_INDICATOR= str.substring(str.indexOf("'",str.search("SOURCE_INDICATOR"))+1, str.indexOf("'",str.indexOf("'",str.search("SOURCE_INDICATOR"))+1));
		oldAssociationPayload.TARGET_INDICATOR= str.substring(str.indexOf("'",str.search("TARGET_INDICATOR"))+1, str.indexOf("'",str.indexOf("'",str.search("TARGET_INDICATOR"))+1));
		oldAssociationPayload.IS_ACTIVE= parseInt(str.substring(str.indexOf("=",str.search("IS_ACTIVE"))+1, str.indexOf("=",str.search("IS_ACTIVE"))+2));

		return oldAssociationPayload;
	},

	performBatchOperation : function(batchArray){
		var that = this;
		that.oDataModel = that.oApplicationFacade.getODataModel();
		that.oDataModel.addBatchChangeOperations(batchArray);
		that.oDataModel.submitBatch(function(data,response,errorResponse){
			if(errorResponse.length)
			{      
				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED_FAILED"));
				return;
			}
			var error = false;
			var responses = data.__batchResponses[0].__changeResponses;
			for(var key in responses)
				if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200")
					error = true;                     
			if(error)
				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED_FAILED"));
			else
			{      
				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED"));
			}
		}, function(error){
			sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED_FAILED"));
		},false);
	},

	savePropertiesHelper : function(associationPropertiesPayload, updateAssociationPayload, sourceIndicator, targetIndicator, isSaveAndActivate){
		var that = this;
		that.batchArray = [];
		var propertyPayload;
		var propertyPayloadArray = [];
		that.oDataModel = that.oApplicationFacade.getODataModel();


		for (var i = 0; i < associationPropertiesPayload.PROPERTIES.length; i++) {
			propertyPayload = {}
			propertyPayload.IS_ACTIVE = 0;
			propertyPayload.TYPE = associationPropertiesPayload.PROPERTIES[i].TYPE;
			propertyPayload.NAME = associationPropertiesPayload.PROPERTIES[i].NAME;
			propertyPayload.VALUE = associationPropertiesPayload.PROPERTIES[i].VALUE;
			propertyPayload.SOURCE_INDICATOR = associationPropertiesPayload.PROPERTIES[i].SOURCE_INDICATOR;
			propertyPayload.TARGET_INDICATOR = associationPropertiesPayload.PROPERTIES[i].TARGET_INDICATOR;
			propertyPayloadArray.push(propertyPayload);
		}

		if((that.viewMode === "associationEdit" && !(that.associationData.IS_ACTIVE)) || (that.viewMode === "associationEdit" && that.associationData.IS_ACTIVE && isSaveAndActivate)){

			var finalAssociationEditPayload={};
			finalAssociationEditPayload.DELETE={};
			finalAssociationEditPayload.CREATE={};


			var that = this;
			var sourceIndicator = this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR.length ? this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR[0] : this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR;
			var targetIndicator = this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR.length ? this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR[0] : this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR;

			that.ODataModel = that.oApplicationFacade.getODataModel();
			that.payload = {TYPE:that.byId("associationTypeSelect").getSelectedItem().getKey(),SOURCE_INDICATOR:sourceIndicator.ID, TARGET_INDICATOR:targetIndicator.ID};




			if(updateAssociationPayload.updates.length!=0){
				var entityForDelete = that.associationContext.sPath;
				that.batchArray.push(that.oDataModel.createBatchOperation(entityForDelete,"DELETE"));
				that.batchArray.push(that.oDataModel.createBatchOperation("/ASSOCIATIONS","POST",updateAssociationPayload.updates[0]));
			}

			var oldPropertyArray = that.oldPropertiesList.getData().PROPERTIES;
			var updatePropertiesPayload = sap.suite.smartbusiness.utils.dirtyBitCheck({
				oldPayload : oldPropertyArray,
				newPayload : propertyPayloadArray,
				objectType : "ASSOCIATION_PROPERTIES"
			});

			if(updateAssociationPayload.updates.length!=0 ){
				finalAssociationEditPayload.DELETE={"TYPE": updateAssociationPayload.deletes[0].TYPE, "SOURCE_INDICATOR": updateAssociationPayload.deletes[0].SOURCE_INDICATOR,
						"TARGET_INDICATOR":updateAssociationPayload.deletes[0].TARGET_INDICATOR,"IS_ACTIVE":updateAssociationPayload.deletes[0].IS_ACTIVE,"PROPERTY":oldPropertyArray};

				finalAssociationEditPayload.CREATE={"TYPE": updateAssociationPayload.updates[0].TYPE,"SOURCE_INDICATOR": updateAssociationPayload.updates[0].SOURCE_INDICATOR,
						"TARGET_INDICATOR":updateAssociationPayload.updates[0].TARGET_INDICATOR,"IS_ACTIVE":updateAssociationPayload.updates[0].IS_ACTIVE,"PROPERTY":propertyPayloadArray

				};
				//update association
				sap.suite.smartbusiness.utils.update(sap.suite.smartbusiness.utils.serviceUrl("ASSOCIATIONS_CUD"),finalAssociationEditPayload,null,
				function() {
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED"));
					that.oApplicationFacade.getODataModel().refresh();
				},
				function(err) {
					sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED_FAILED"), err.responseText);
				});
				//that.oApplicationFacade.getODataModel().refresh();
			}
			//If only properties are changed
			else{
				if(updatePropertiesPayload.deletes.length>0){
					finalAssociationEditPayload.TYPE = updatePropertiesPayload.deletes[0].TYPE;
					finalAssociationEditPayload.TARGET_INDICATOR = updatePropertiesPayload.deletes[0].TARGET_INDICATOR;
					finalAssociationEditPayload.SOURCE_INDICATOR = updatePropertiesPayload.deletes[0].SOURCE_INDICATOR;
					finalAssociationEditPayload.IS_ACTIVE = updatePropertiesPayload.deletes[0].IS_ACTIVE;
				}
				if(updatePropertiesPayload.updates.length>0){
					finalAssociationEditPayload.TYPE = updatePropertiesPayload.updates[0].TYPE;
					finalAssociationEditPayload.TARGET_INDICATOR = updatePropertiesPayload.updates[0].TARGET_INDICATOR;
					finalAssociationEditPayload.SOURCE_INDICATOR = updatePropertiesPayload.updates[0].SOURCE_INDICATOR;
					finalAssociationEditPayload.IS_ACTIVE = updatePropertiesPayload.updates[0].IS_ACTIVE;
				}
				finalAssociationEditPayload.PROPERTY = {remove:updatePropertiesPayload.deletes, create:updatePropertiesPayload.updates};
				delete finalAssociationEditPayload.CREATE;
				delete finalAssociationEditPayload.DELETE;
				//update association
				sap.suite.smartbusiness.utils.update(sap.suite.smartbusiness.utils.serviceUrl("ASSOCIATIONS_CUD"),finalAssociationEditPayload,null,
				function() {
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED"));
					that.oApplicationFacade.getODataModel().refresh();
				},
				function(err) {
					sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED_FAILED"), err.responseText);
				});
				//that.oApplicationFacade.getODataModel().refresh();
			}
			/*if(updatePropertiesPayload.deletes.length!=0){

                           var flag;
                           for(var i=0;i<updatePropertiesPayload.deletes.length;i++){
                                  flag = 0;
                                  if(that.batchArray.length>0){
                                         for(var j=0;j<that.batchArray.length;j++){
                                                var requestUri = that.batchArray[j].requestUri;
                                                var str = requestUri.substring(0,requestUri.indexOf('('));
                                                var sourceIndicator = requestUri.substring(requestUri.indexOf("'",requestUri.search("SOURCE_INDICATOR"))+1,requestUri.indexOf("'",requestUri.indexOf("'",requestUri.search("SOURCE_INDICATOR"))+1));
                                                var targetIndicator = requestUri.substring(requestUri.indexOf("'",requestUri.search("TARGET_INDICATOR"))+1,requestUri.indexOf("'",requestUri.indexOf("'",requestUri.search("TARGET_INDICATOR"))+1));

                                                if(that.batchArray[j].method=="DELETE" && str=="ASSOCIATIONS" && sourceIndicator==updatePropertiesPayload.deletes[i].SOURCE_INDICATOR && targetIndicator==updatePropertiesPayload.deletes[i].TARGET_INDICATOR){
                                                       flag=1;
                                                }
                                         }
                                  }
                                  if(flag==0){
                                         var entityPropDelete = "/ASSOCIATION_PROPERTIES(TYPE='"+updatePropertiesPayload.deletes[i].TYPE+"',NAME='"+updatePropertiesPayload.deletes[i].NAME+"',VALUE='"+updatePropertiesPayload.deletes[i].VALUE+"',SOURCE_INDICATOR='"+updatePropertiesPayload.deletes[i].SOURCE_INDICATOR+"',TARGET_INDICATOR='"+updatePropertiesPayload.deletes[i].TARGET_INDICATOR+"',IS_ACTIVE="+updatePropertiesPayload.deletes[i].IS_ACTIVE+")";
                                         that.batchArray.push(that.oDataModel.createBatchOperation(entityPropDelete,"DELETE"));
                                  }
                           }
                     }
                     if(updatePropertiesPayload.updates.length!=0){
                           for(var i=0;i<updatePropertiesPayload.updates.length;i++){
                                  that.batchArray.push(that.oDataModel.createBatchOperation("/ASSOCIATION_PROPERTIES","POST",updatePropertiesPayload.updates[i]));
                           }
                     }
                     if(that.batchArray){
                           that.performBatchOperation(that.batchArray);
                     }
                     else{
                            sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED"));
                     }*/
		}
		if(that.viewMode === "associationCreate" || (that.viewMode === "associationEdit" && that.associationData.IS_ACTIVE && !isSaveAndActivate)){
			var sourceIndicatorObj = that.sourceIndicatorModel.getData().INDICATOR.length ? that.sourceIndicatorModel.getData().INDICATOR[0] : that.sourceIndicatorModel.getData().INDICATOR;
			var associationPayload = {TYPE:that.byId("associationTypeSelect").getSelectedItem().getKey(),SOURCE_INDICATOR:sourceIndicator.ID, TARGET_INDICATOR:targetIndicator.ID, IS_ACTIVE:0, CREATED_BY:sourceIndicatorObj.CREATED_BY, CREATED_ON:sourceIndicatorObj.CREATED_ON, CHANGED_BY:null, CHANGED_ON:null};


			that.finalAssociationPayload ={};
			that.finalAssociationPayload.TYPE=associationPayload.TYPE;
			that.finalAssociationPayload.SOURCE_INDICATOR=associationPayload.SOURCE_INDICATOR
			that.finalAssociationPayload.TARGET_INDICATOR=associationPayload.TARGET_INDICATOR
			that.finalAssociationPayload.IS_ACTIVE=associationPayload.IS_ACTIVE
			that.finalAssociationPayload.PROPERTY=propertyPayloadArray;




			var sourceIndicator = this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR.length ? this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR[0] : this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR;
			var targetIndicator = this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR.length ? this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR[0] : this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR;

			that.ODataModel = that.oApplicationFacade.getODataModel();
			that.payload = {TYPE:that.byId("associationTypeSelect").getSelectedItem().getKey(),SOURCE_INDICATOR:sourceIndicator.ID, TARGET_INDICATOR:targetIndicator.ID};


			sap.suite.smartbusiness.utils.create(sap.suite.smartbusiness.utils.serviceUrl("ASSOCIATIONS_CUD"),that.finalAssociationPayload,null,
			function() {
				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED"));
				that.oApplicationFacade.getODataModel().refresh();
			},
			function(err) {
				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED_FAILED"), err.responseText);
			});

			//that.oApplicationFacade.getODataModel().refresh();

			/*that.batchArray.push(that.oDataModel.createBatchOperation("/ASSOCIATIONS","POST",associationPayload))
                     if(propertyPayloadArray){
                           for(var i=0; i<propertyPayloadArray.length;i++){
                                  that.batchArray.push(that.oDataModel.createBatchOperation("/ASSOCIATION_PROPERTIES","POST",propertyPayloadArray[i]));
                           }
                     }
                     if(that.batchArray){
                           that.performBatchOperation(that.batchArray);
                     }
                     else{
                            sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED"));
                     }*/





		}
	},


	saveAssociationHelper : function(sourceIndicator,targetIndicator,isSaveAndActivate){
		var that = this;
		var sourceIndicatorObj = {};
		if(that.sourceIndicatorModel.getData().INDICATOR.length) {
			sourceIndicatorObj = that.sourceIndicatorModel.getData().INDICATOR[0];
		}
		else {
			sourceIndicatorObj = that.sourceIndicatorModel.getData().INDICATOR;
		}
		var associationPayload = {TYPE:that.byId("associationTypeSelect").getSelectedItem().getKey(),SOURCE_INDICATOR:sourceIndicator.ID, TARGET_INDICATOR:targetIndicator.ID, IS_ACTIVE:0, CREATED_BY:sourceIndicatorObj.CREATED_BY, CREATED_ON:sourceIndicatorObj.CREATED_ON, CHANGED_BY:null, CHANGED_ON:null};
		var associationPropertiesPayload = {PROPERTIES:that.getView().byId('propertyNameValueBox').getModel("associationProp").getData().PROPERTIES}
		var updateAssociationPayload = null;

		if((that.viewMode === "associationEdit" && !(that.associationData.IS_ACTIVE)) || (that.viewMode === "associationEdit" && that.associationData.IS_ACTIVE && isSaveAndActivate)){
			var oldAssociationObject = that.formOldObjectForAssociation(sourceIndicator, targetIndicator);
			updateAssociationPayload = sap.suite.smartbusiness.utils.dirtyBitCheck({
				oldPayload : oldAssociationObject,
				newPayload : associationPayload,
				objectType : "ASSOCIATIONS"
			});

			that.savePropertiesHelper(associationPropertiesPayload, updateAssociationPayload, sourceIndicator, targetIndicator, isSaveAndActivate);
		}
		else if(that.viewMode === "associationCreate" || (that.viewMode === "associationEdit" && that.associationData.IS_ACTIVE)){
			that.savePropertiesHelper(associationPropertiesPayload, updateAssociationPayload, sourceIndicator, targetIndicator);
		}
	},

	saveAssociation: function(isSaveAndActivate) {
		var that = this;
		var sourceIndicator = {};
		var targetIndicator = {};
		if(this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR.length && this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR.length) {
			sourceIndicator = this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR[0];
			targetIndicator = this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR[0];
		}
		else {
			sourceIndicator = this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR;
			targetIndicator = this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR;
		}
		var payload = {};
		if(this.viewMode === "associationEdit") {
			that.saveAssociationHelper(sourceIndicator,targetIndicator,isSaveAndActivate);
		}
		else if(that.viewMode === "associationCreate") {
			if(targetIndicator==null){
				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("SELECT_A_KPI_TO_ASSOCIATE"));
				that.byId("selectedKpiOpiId").setValueState(sap.ui.core.ValueState.Error);
			}
			else{
				that.saveAssociationHelper(sourceIndicator,targetIndicator,isSaveAndActivate);
			}
			that.oApplicationFacade.getODataModel().refresh();
		}
	},
	/**
	 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
	 * (NOT before the first rendering! onInit() is used for oController one!).
	 */
	onBeforeRendering: function() {
	},

	/**
	 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
	 * This hook is the same one oController SAPUI5 controls get after being rendered.
	 */
	onAfterRendering: function() {
	},

	/**
	 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
	 */
	onExit: function() {

	}

});

}; // end of sap/suite/ui/smartbusiness/designtime/association/view/S4.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.authorization.Configuration') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.authorization.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained


sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.designtime.authorization.Configuration", {
	oServiceParams: {
		serviceList: [{
			name : "SMART_BUSINESS",
			masterCollection : "EVALUATIONS",
			serviceUrl : "/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata/",
			isDefault : true,
			mockedDataSource : "",
			useBatch : false
		}]
	},

	/**
	 * @inherit
	 */
	getServiceList : function() {
		return this.getServiceParams().serviceList;
	},

	getMasterKeyAttributes : function() {
		//return the key attribute of your master list item
		return ["Id"];
	},
	getExcludedQueryStringParameters : function() {
		return ["sap-client","sap-language"];
	},
	getHanaSystem : function() {
        var hashObj = hasher || window.hasher; 
        var hashArr = hashObj.getHashAsArray();
        if(hashArr && hashArr.length && hashArr[0]) {
               var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
               for(var i=0,l=hashParameters.length; i<l; i++) {
                     if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                            return hashParameters[i].split("=")[1]; 
                     }
               }
        }
        return "";
	},
	getServiceParams : function() {
		if(sap.ushell && sap.ushell.Container) {
			var serviceUrl = this.oServiceParams.serviceList[0].serviceUrl;
	        this.oServiceParams.serviceList[0].serviceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(serviceUrl, this.getHanaSystem());
		}
        return this.oServiceParams;
	},

});
}; // end of sap/suite/ui/smartbusiness/designtime/authorization/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.authorization.view.S2.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.authorization.view.S2.controller');
jQuery.sap.require('sap.ca.scfld.md.controller.ScfldMasterController'); // unlisted dependency retained


sap.ca.scfld.md.controller.ScfldMasterController.extend("sap.suite.ui.smartbusiness.designtime.authorization.view.S2", {

	onInit: function() {
		var that = this;             
		
		that.oApplicationFacade.getODataModel().setSizeLimit(100000);
		
		if(!(that.oApplicationFacade.currentLogonHanaUser)) {
			this.oApplicationFacade.getODataModel().read("/SESSION_USER",null,null,true,function(data) {
				that.oApplicationFacade.currentLogonHanaUser = (data.results && data.results.length) ? data.results[0].LOGON_USER : null; 
			}, function(err) {
				that.oApplicationFacade.currentLogonHanaUser = null;
				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
			});
		}
		this.byId("list").getBinding("items").filter([new sap.ui.model.Filter("IS_ACTIVE","EQ",1)]);
	},
	createFilterOptions: function() {
		var that = this;
		var filterOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("filterOptionsDialog"),
			filterItems: [
			              new sap.m.ViewSettingsFilterItem({
			            	  text: that.oApplicationFacade.getResourceBundle().getText("ACTIVITY"),
			            	  key: "activity",
			            	  items: [
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("SELF_CREATED"),
			            	        	  key: "self_created"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("RECENTLY_WORKED_UPON"),
			            	        	  key: "recently_worked_upon"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("FAVORITE"),
			            	        	  key: "favorite"
			            	          }),
			            	          ]
			              })
			              ],
			              confirm : function(evt) {
			            	  var infoBarText = "";
			            	  var selectedFilters = evt.getParameter("filterItems");

			            	  that.setFiltering(evt.getParameter("filterItems"));

			            	  if(selectedFilters && selectedFilters.length) {
			            		  var filterObj = {};
			            		  for(var i=0,l=selectedFilters.length; i<l; i++) {
			            			  filterObj[selectedFilters[i].getParent().getKey()] = filterObj[selectedFilters[i].getParent().getKey()] || "";
			            			  filterObj[selectedFilters[i].getParent().getKey()] += (filterObj[selectedFilters[i].getParent().getKey()]) ? (",") : "";
			            			  filterObj[selectedFilters[i].getParent().getKey()] += selectedFilters[i].getText(); 
			            		  }

			            		  for(var filter in filterObj) {
			            			  if(filterObj.hasOwnProperty(filter)) {
			            				  infoBarText += (infoBarText) ? " ; " : "";
			            				  infoBarText += filterObj[filter];
			            			  }
			            		  }
			            		  that.byId("filterToolbar").setVisible(true);
			            		  that.byId("visualizationInfo").setText(infoBarText);   
			            	  }
			            	  else {
			            		  that.byId("visualizationInfo").setText("");
			            		  that.byId("filterToolbar").setVisible(false);
			            	  }
			              }
		});
		return filterOptionsDialog;
	},

	createSortOptions: function() {
		var that = this;
		var sortOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("sortOptionsDialog"),
			sortItems: [
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("CREATION_DATE"),
			            	key: "newest"
			            }), 
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("ALPHABETICALLY"),
			            	key: "alphabetically"
			            }),
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("NONE"),
			            	key: "none"
			            })
			            ],
			            confirm : function(evt) {
			            	if(evt.getParameter("sortItem")) {
			            		if(evt.getParameter("sortItem").getKey() == "none") {
			            			that.setGrouping("indicator", (evt.getParameter("groupDescending") || false));
			            		} 
			            		else {
			            			that.setSorting(evt.getParameter("sortItem").getKey(), evt.getParameter("sortDescending"));
			            		}
			            	}
			            	else {
			            		that.setGrouping("indicator", (evt.getParameter("groupDescending") || false));
			            	}
			            }
		});
		return sortOptionsDialog;
	},

	createGroupOptions: function() {
		var that = this;
		var groupOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("groupOptionsDialog"),
			groupItems: [
						new sap.m.ViewSettingsItem({
							text: that.oApplicationFacade.getResourceBundle().getText("BY_WORKSPACE"),
							key: "workspace"
						}),
			             new sap.m.ViewSettingsItem({
			            	 text: that.oApplicationFacade.getResourceBundle().getText("BY_INDICATOR"),
			            	 key: "indicator"
			             }),
			             new sap.m.ViewSettingsItem({
			            	 text: that.oApplicationFacade.getResourceBundle().getText("BY_OWNER"),
			            	 key: "owner"
			             })
			             ],
			             confirm : function(evt) {
			            	 if(evt.getParameter("groupItem")) {
			            		 that.setGrouping(evt.getParameter("groupItem").getKey(), evt.getParameter("groupDescending"));
			            	 }
			            	 else { 
			            		 that.setGrouping("indicator", (evt.getParameter("groupDescending") || false));
			            	 }
			             }
		});
		groupOptionsDialog.setSelectedGroupItem("workspace");
		groupOptionsDialog.setGroupDescending(true);
		return groupOptionsDialog;
	},

	getHeaderFooterOptions : function() {
		var that = this;
		return {
			sI18NMasterTitle : "MASTER_TITLE",
			onBack: function() {
				window.history.back();
			},
			oFilterOptions : {
				onFilterPressed: function(evt) {
					that.getView().filterOptionDialog = that.getView().filterOptionDialog || that.createFilterOptions();
					that.getView().filterOptionDialog.open();
				}
			},
			oSortOptions : {
				onSortPressed: function(evt) {
					that.getView().sortOptionDialog = that.getView().sortOptionDialog || that.createSortOptions();
					that.getView().sortOptionDialog.open();
				}
			},
			oGroupOptions : {
				onGroupPressed: function(evt) {
					that.getView().groupOptionDialog = that.getView().groupOptionDialog || that.createGroupOptions();
					that.getView().groupOptionDialog.open();
				}
			},
		};
	},

	formatIndicatorId: function(context) {
		var that = this;
		var indicator_type = context.getProperty("MANUAL_ENTRY");
		var groupTitle = "";
		switch(indicator_type) {
		case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
		break;
		case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
		break;
		default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_EVALUATIONS");
		}
		return {
			key: groupTitle,
			text: groupTitle
		}
		//return {text: ("KPI: " + context.getProperty("INDICATOR")), key: context.getProperty("INDICATOR")}; 
	},

	setGrouping: function(key, groupDescending) {
		var that = this;
		groupDescending = groupDescending || false;
		var list = this.getView().byId("list");
		if(key == "indicator") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("INDICATOR",groupDescending,function(context){
				return {
					key: context.getProperty("INDICATOR"),
					text: ("KPI: " + context.getProperty("INDICATOR"))
				}
			})]);
		} 
		else if(key == "owner") { 
			list.getBinding("items").sort([new sap.ui.model.Sorter("OWNER_NAME",groupDescending,function(context){
				var owner_name = context.getProperty("OWNER_NAME");
				var groupTitle = "";
				switch(owner_name) {
				case null: groupTitle = that.oApplicationFacade.getResourceBundle().getText("NO_OWNER");
				break;
				case "": groupTitle = that.oApplicationFacade.getResourceBundle().getText("NO_OWNER");
				break;
				default: groupTitle = owner_name;
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			})]);
		}
		else if(key == "workspace") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("MANUAL_ENTRY",groupDescending,function(context){
				var indicator_type = context.getProperty("MANUAL_ENTRY");
				var groupTitle = "";
				switch(indicator_type) {
				case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
				break;
				case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
				break;
				default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_EVALUATIONS");
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			})]);
		}
	},

	setFiltering: function(items) {
		var that = this;
		var filtersArray = [];
		var list = that.getView().byId("list");

		var filterObject = {
				"self_created": (new sap.ui.model.Filter("CREATED_BY", sap.ui.model.FilterOperator.EQ, that.oApplicationFacade.currentLogonHanaUser)),
				"recently_worked_upon": (new sap.ui.model.Filter("MANUAL_ENTRY", sap.ui.model.FilterOperator.EQ, 0)),
				"favorite": (new sap.ui.model.Filter("MANUAL_ENTRY", sap.ui.model.FilterOperator.EQ, 1))
		};

		filtersArray = sap.suite.smartbusiness.utils.getFilterArray(items, filterObject);
		
		if(filtersArray.length) {
			list.getBinding("items").filter(new sap.ui.model.Filter(filtersArray,true));
		}
		else {
			list.getBinding("items").filter(filtersArray);
		}
	},

	setSorting: function(key, groupDescending) {
		var that = this;
		groupDescending = groupDescending || false;
		var list = that.getView().byId("list");
		if(key == "newest") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("CREATED_ON",groupDescending,null)]); 
		} 
		else if(key == "alphabetically") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("TITLE",groupDescending,null)]);
		}
	}, 
	
	applySearchPatternToListItem : function(oItem, sFilterPattern) {
		if(sap.ca.scfld.md.controller.ScfldMasterController.prototype.applySearchPatternToListItem.apply(this, arguments)) {
			return true;
		}
		else {
			// extra source of data "the tags"
			var dependents = oItem.getDependents() || [];
			for(var i=0,l=dependents.length; i<l; i++) {
				if(dependents[i].getText().toLowerCase().indexOf(sFilterPattern) != -1) {
					return true;
				}
			}
		}
		return false;
	}

});

}; // end of sap/suite/ui/smartbusiness/designtime/authorization/view/S2.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.authorization.view.S3.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.authorization.view.S3.controller');


jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained


sap.ca.scfld.md.controller.BaseDetailController.extend("sap.suite.ui.smartbusiness.designtime.authorization.view.S3", {

	onInit : function() {
		var that = this;
		var view = this.getView();

		this.oRouter.attachRouteMatched(function(oEvent) {
			if (oEvent.getParameter("name") === "detail") {
				var context = new sap.ui.model.Context(view.getModel(), '/' + oEvent.getParameter("arguments").contextPath);
				var contextPath = oEvent.getParameter("arguments").contextPath;
				view.setBindingContext(context);
				that.getUsersAndRoles(view.getBindingContext().getProperty("ID") || contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,''));
			}
		}, this);
		var that = this;
		this.oHeaderFooterOptions =
			 { 
				bSuppressBookmarkButton: {},
				oEditBtn : {
					sI18nBtnTxt : "S3_EDIT",
					onBtnPressed : function(evt) {
					sap.suite.smartbusiness.utils.replaceHash({action:"authorizeSBEvaluation", route:"subDetail", context: view.getBindingContext().getPath().split("/")[1]});
				},
				bEnabled : false, // default true
			},
		};
		
	},
	getUsersAndRoles:function(id){
		var that = this;
		this.byId("users").getBinding("content").filter([new sap.ui.model.Filter("ID", "EQ",id),new sap.ui.model.Filter("TYPE", "EQ","USER")]);
		this.byId("roles").getBinding("content").filter([new sap.ui.model.Filter("ID", "EQ",id),new sap.ui.model.Filter("TYPE", "EQ","ROLE")]);
		this.byId("users").getBinding("content").attachDataReceived(function(data){
			that.byId("usersTab").setCount(data.getSource().getLength());
			that.byId("usersTitle").setText(that.oApplicationFacade.getResourceBundle().getText("AUTH_USERS")+" ("+data.getSource().getLength()+")");
		});
		this.byId("roles").getBinding("content").attachDataReceived(function(data){
			that.byId("rolesTab").setCount(data.getSource().getLength());
			that.byId("rolesTitle").setText(that.oApplicationFacade.getResourceBundle().getText("ROLES")+" ("+data.getSource().getLength()+")");
		});
	},
	formatId: function(id){
		return this.oApplicationFacade.getResourceBundle().getText("ID")+" : "+id;
	},
	formatOwner: function(owner){
		return sap.suite.smartbusiness.formatters.getBundleText(undefined, "OWNER", owner);
	},
	getHeaderFooterOptions : function() {
		return this.oHeaderFooterOptions;
	},
	formatProperties: function(name, value) {
		return ((this.getView().byId("properties").getItems().length > 1) ? (', ' + name + ' : ' + value) : (name + ' : ' + value));
	},
	formatFavoriteMark: function(favMark) {
        return ((favMark) ? true : false);
	},
});

}; // end of sap/suite/ui/smartbusiness/designtime/authorization/view/S3.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.authorization.view.S4.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.authorization.view.S4.controller');
jQuery.sap.require('sap.ca.scfld.md.controller.BaseFullscreenController'); // unlisted dependency retained


sap.ca.scfld.md.controller.BaseFullscreenController.extend("sap.suite.ui.smartbusiness.designtime.authorization.view.S4", {

	onInit: function() {
		var that = this;
		this.userSearch = false;
		this.roleSearch =  false;
		this.previousAuthorizations =  [];
		this.previousSelectedIds = {};
		this.previousSelectedIds["USER"] = {};
		this.previousSelectedIds["ROLE"] = {};
		this.selectedIds = {};
		this.selectedIds["USER"] = {};
		this.selectedIds["ROLE"] = {};
		var filterByAlphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];
		this.filterByAlphabetModel = new sap.ui.model.json.JSONModel();	
		this.filterByAlphabetModel.setData(filterByAlphabet);	
		this.selectedItemsModel = new sap.ui.model.json.JSONModel();
		this.selectedItemsModel.setData([]);
		this.byId("selectedItemsList").setModel(this.selectedItemsModel,"selectedItems");
		this.alphabetFilterDialog = {};
		this.deletedItems = [];		
		
		this.oRouter.attachRouteMatched(function(evt){
			if(evt.getParameter("name") != "subDetail")
				return;
			var context = new sap.ui.model.Context(that.getView().getModel(), '/' + (evt.getParameter("arguments").contextPath));
			that.getView().setBindingContext(context);
			that.itemId = that.getView().getBindingContext().getProperty("ID");
			if(!that.itemId)
			{
				that.itemId = (/ID=\'.*\'/).exec(evt.getParameter("arguments").contextPath)[0];
				that.itemId = that.itemId.slice(that.itemId.indexOf("'")+1,that.itemId.lastIndexOf("'"));
			}
			that.getView().getModel().read("/AUTHORIZED_USERS",null,"$filter=ID eq '"+that.itemId+"'",false,function(data){
				that.selectedIds["USER"] = {};
				that.selectedIds["ROLE"] = {};		
				that.deletedItems = [];					
				that.previousAuthorizations = jQuery.extend(true,[],data.results);
				that.selectedItemsModel.setData(data.results);
				that.initialSelectedItems = jQuery.extend(true, [], data.results);
				that.byId("selectedItemsTab").setCount(data.results.length);	
				for(var key in data.results)
					that.selectedIds[data.results[key].TYPE][data.results[key].NAME] = data.results[key].NAME;
				that.previousSelectedIds = jQuery.extend(true,{},that.selectedIds);
			}, function(error){
				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_LOADING_AUTH"));
			});
			that.byId("userList").bindItems("/HANA_USERS", new sap.m.CustomListItem({
				selected: {
					path: "NAME",
					formatter: function(name){
						return ((that.selectedIds["USER"][name])?true:false);
					}
				},
				content: [
				          new sap.ui.layout.Grid({
				        	  defaultSpan:"L12 M12",
				        	  width:"60%",
				        	  vSpacing:0,
				        	  content:[new sap.ui.core.Icon({
				        	        	   src:"sap-icon://person-placeholder",
				        	        	   size:"40px",
				        	        	   color:{
				        						path: "NAME",
				        						formatter: function(name){ return (that.selectedIds["USER"][name]?"#009de0":"#e6e6e6"); }
				        	        	   },
				        	        	   layoutData: new sap.ui.layout.GridData({span:"L1 M1"})
				        	           }),
				        	           new sap.m.Label({text:"{NAME}",layoutData: new sap.ui.layout.GridData({span:"L8 M8"})})
				        	           ]
				          })]
			}));
			that.byId("roleList").bindItems("/HANA_ROLES", new sap.m.CustomListItem({
				selected: {
					path: "NAME",
					formatter: function(name){return (that.selectedIds["ROLE"][name]?true:false);}
				},
				content: [
				          new sap.ui.layout.Grid({
				        	  defaultSpan:"L12 M12",
				        	  width:"60%",
				        	  vSpacing:0,
				        	  content:[new sap.ui.core.Icon({
				        	        	   src:"sap-icon://group",
				        	        	   size:"40px",
				        	        	   color:{
				        						path: "NAME",
				        						formatter: function(name){
				        							return (that.selectedIds["ROLE"][name]?"#009de0":"#e6e6e6");
				        						}
				        	        	   },
				        	        	   layoutData: new sap.ui.layout.GridData({span:"L1 M1"})
				        	           }),
				        	           new sap.m.Label({text:"{NAME}",layoutData: new sap.ui.layout.GridData({span:"L7 M7"})}),
				        	           new sap.m.Link({
				        	        	   text: {path:'NO_OF_USERS', formatter: jQuery.proxy(that.formatNoOfUsers,that)},
				        	        	   press: jQuery.proxy(that.onAllRolesLinkSelect,that),
				        	        	   layoutData:new sap.ui.layout.GridData({span:"L2 M2"})
				        	           })]
				          })]
			}));			
		});
		this.oHeaderFooterOptions =
		{ 	
				bSuppressBookmarkButton: {},
				sI18NFullscreenTitle: "S3_EDIT",
				oFilterOptions : {
					onFilterPressed: function(evt) {
						if(that.byId("idIconTabBarMulti").getSelectedKey() == "selected")
							sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FILTER_NOT_APPLICABLE"));
						else
							that.openFilterDialog();
					}
				},
				onBack: function(oEvent){
					that.handleBackAndCancel();
				},
				oEditBtn : {
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						that.saveAuthorizations();
					}
				},
				buttonList : [{
					sI18nBtnTxt : "RESET",
					onBtnPressed : function(evt) {
						that.resetAuthorizations();
					},
				},
				{	sI18nBtnTxt : "CANCEL",
					onBtnPressed : function(evt) {
						that.handleBackAndCancel();						
					}
				}]				
		};	
		this.setHeaderFooterOptions(this.oHeaderFooterOptions);
	},
	
	getHeaderFooterOptions : function() {
		return this.oHeaderFooterOptions;
	},			
	onUserSearch: function(oEvent){
		var prevUserSearch = this.userSearch;
		oEvent.getSource().getValue() == "" ? this.userSearch = false : this.userSearch = true;
		var itemBinding = this.byId("userList").getBinding("items");
		if(prevUserSearch)
			itemBinding.aFilters.pop();
		if(this.userSearch)
			itemBinding.aFilters.push(new sap.ui.model.Filter("tolower(NAME)","Contains","'"+oEvent.getSource().getValue().toLowerCase()+"'"));		
		itemBinding.filter(itemBinding.aFilters);
	},
	onRoleSearch: function(oEvent){
		var prevRoleSearch = this.roleSearch;
		oEvent.getSource().getValue() == "" ? this.roleSearch = false : this.roleSearch = true;
		var itemBinding = this.byId("roleList").getBinding("items");
		if(prevRoleSearch)
			itemBinding.aFilters.pop();
		if(this.roleSearch)
			itemBinding.aFilters.push(new sap.ui.model.Filter("tolower(NAME)","Contains","'"+oEvent.getSource().getValue().toLowerCase()+"'"));
		itemBinding.filter(itemBinding.aFilters);
	},
	refreshFilter: function(){
		var eventSourceType = this.byId("idIconTabBarMulti").getSelectedKey();
		var itemBinding = this.byId((eventSourceType === "users")?"userList":"roleList").getBinding("items");
		itemBinding.filter(itemBinding.aFilters.pop(),false);
		this.byId((eventSourceType === "users")?"userInfoToolbar":"roleInfoToolbar").setVisible(false);
		this.alphabetFilterDialog[eventSourceType] = null;	
	},
	onUserItemSelectionChange: function(oEvent){
		this.onItemSelectionChange(oEvent,"USER");
	},
	onRoleItemSelectionChange: function(oEvent){
		this.onItemSelectionChange(oEvent,"ROLE");
	},
	onItemSelectionChange: function(oEvent,type){
		var selectedItemData = this.selectedItemsModel.getData();
		var selectedItem = oEvent.getParameter("listItem");
		var selectedItemContext = selectedItem.getBindingContext().getObject();
		if(selectedItem.getSelected())
		{	//remove re-selected item from deletion array if it exists there
			for(var key in this.deletedItems)
			{ 	if(this.deletedItems[key].NAME === selectedItemContext.NAME && this.deletedItems[key].TYPE === type)
					this.deletedItems.splice(key,1);
			}			
			selectedItemContext.TYPE = type;
			selectedItemData.push(selectedItemContext);
			var selectedItemIcon = selectedItem.getContent()[0].getContent()[0];			
			selectedItemIcon.setColor("#009de0");
			this.selectedIds[type][selectedItemContext.NAME] = selectedItemContext.NAME;			
		}
		else
		{	//Maintaining array of deleted items that were previously authorised
			for(var key in this.previousAuthorizations)
			{	if(this.previousAuthorizations[key].NAME === selectedItemContext.NAME && this.previousAuthorizations[key].TYPE === type)
				{ 	selectedItemContext.TYPE = type;
					this.deletedItems.push(selectedItemContext);			
				}
			}
			for(var key in selectedItemData)
				if((selectedItemData[key].NAME == selectedItemContext.NAME) && (selectedItemData[key].TYPE == type))
					selectedItemData.splice(key,1);
			var selectedItemIcon = selectedItem.getContent()[0].getContent()[0];
			selectedItemIcon.setColor("#e6e6e6");
			this.selectedIds[type][selectedItemContext.NAME] = null;
		}
		this.selectedItemsModel.setData(selectedItemData);
		this.byId("selectedItemsTab").setCount(selectedItemData.length);
	},
	onSelectedItemDelete: function(oEvent){
		var deletedObject = oEvent.getParameter("listItem").getBindingContext("selectedItems").getObject();
		var itemList = this.byId(deletedObject.TYPE=="USER"?"userList":"roleList");
		//Maintaining array of deleted items that were previously authorised
		for(var key in this.previousAuthorizations)
		{	if(this.previousAuthorizations[key].NAME === deletedObject.NAME && this.previousAuthorizations[key].TYPE === deletedObject.TYPE)
				this.deletedItems.push(deletedObject);			
		}
		this.selectedIds[deletedObject.TYPE][deletedObject.NAME] = null;
		itemList.getModel().refresh(true);

		var selectedItemsData = this.selectedItemsModel.getData();
		var spliceIndex = oEvent.getParameter("listItem").getBindingContext("selectedItems").getPath().substr(1);
		selectedItemsData.splice(spliceIndex,1);
		this.selectedItemsModel.setData(selectedItemsData);
		this.byId("selectedItemsList").rerender();
		this.byId("selectedItemsTab").setCount(selectedItemsData.length);	
	},
	onAllRolesLinkSelect: function(oEvent){
		var roleName = oEvent.getSource().getBindingContext().getProperty("NAME");
		var noOfUsers = oEvent.getSource().getBindingContext().getProperty("NO_OF_USERS");
		this.onRolesLinkSelect(oEvent,roleName,noOfUsers);
	},
	onSelectedRolesLinkSelect: function(oEvent){
		var roleName = oEvent.getSource().getBindingContext("selectedItems").getProperty("NAME");
		var noOfUsers = oEvent.getSource().getBindingContext("selectedItems").getProperty("NO_OF_USERS");
		this.onRolesLinkSelect(oEvent,roleName,noOfUsers);
	},
	onRolesLinkSelect: function(oEvent,roleName,noOfUsers){
		noOfUsers = noOfUsers+" "+( noOfUsers==1?this.oApplicationFacade.getResourceBundle().getText("USER"):this.oApplicationFacade.getResourceBundle().getText("USERS"));
		if(!this._rolesPopover)
		{
			this.roleNameLabel = new sap.m.Label({
				text:roleName,
				design: "Bold",
				layoutData: new sap.ui.layout.GridData({span:"L10 M10"}) 
			});
			this.noOfUsersLabel = new sap.m.Label({
				text: noOfUsers,
				design: "Bold",
				layoutData: new sap.ui.layout.GridData({span:"L12 M12"}) 
			});
			var rolesPopoverHeader =  new sap.ui.layout.Grid({
				defaultSpan:"L12 M12",
				content:[new sap.ui.core.Icon({
							src:"sap-icon://group",
							size: "40px",
							color: "#e6e6e6",
							layoutData: new sap.ui.layout.GridData({span:"L2 M2"}) }),
				         this.roleNameLabel,
				         this.noOfUsersLabel
				         ]
			});
			this.usersForRole = new sap.ui.layout.Grid({span:"L12 M12"});
			var rolesPopoverLayout = new sap.m.VBox({
				items: [rolesPopoverHeader,this.usersForRole],
			});
			this._rolesPopover = new sap.m.Popover({
				title: "{i18n>ROLE_DETAILS}",
				content: rolesPopoverLayout						
			});
			this.getView().addDependent(this._rolesPopover);
		}
		this.roleNameLabel.setText(roleName);
		this.noOfUsersLabel.setText(noOfUsers);
		this.usersForRole.bindAggregation("content","/USERS_GRANTED_ROLE(P_ROLE_NAME='"+roleName+"')/Results",new sap.m.Label({
			text:"{NAME}",
			layoutData: new sap.ui.layout.GridData({span:"L12 M12"})
		}));
		var infoBar = oEvent.getSource();
		jQuery.sap.delayedCall(0, this, function () {
			this._rolesPopover.openBy(infoBar);
		});	
	},
	formatSelectedItemsIcon: function(type){
		if(type === "ROLE")
			return "sap-icon://group";
		else
			return "sap-icon://person-placeholder";
	},
	formatNoOfUsers: function(noOfUsers){
		if(noOfUsers)
			return noOfUsers+" "+(noOfUsers==1?this.oApplicationFacade.getResourceBundle().getText("USER"):this.oApplicationFacade.getResourceBundle().getText("USERS"));
		else
			return "";		
	},
	saveAuthorizations: function(){
		var that = this;
		var selectedItems = this.selectedItemsModel.getData();
		var deleteBatch = [];
		var createBatch = [];
		var isDeleteSuccessful = true;
		var payload = {ID:this.itemId,REVOKE:[],GRANT:[]};
		var busyDialog = new sap.m.BusyDialog();
		busyDialog.open();
		
		//odata remove
		//Deleting the removed authorizations
//		for(var key in this.deletedItems)
//		{	var path = "(NAME='"+this.deletedItems[key].NAME+"',TYPE='"+this.deletedItems[key].TYPE+"',ID='"+this.itemId+"')";
//			deleteBatch.push(this.getView().getModel().createBatchOperation("/AUTHORIZED_USERS"+path,"DELETE"));
//		}
//		this.getView().getModel().addBatchChangeOperations(deleteBatch);
//		this.getView().getModel().submitBatch(function(data,response,errorResponse){
//			if(errorResponse.length)
//			{	isDeleteSuccessful = false;
//				return;
//			}
//			var responses = data.__batchResponses[0].__changeResponses;
//			for(var key in responses)
//				if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200")
//					isDeleteSuccessful = false;		
//		},function(error){
//			isDeleteSuccessful = false;
//		},false);
//		if(!isDeleteSuccessful)
//		{	busyDialog.close();
//			sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("AUTH_SAVE_ERROR"));
//			return;
//		}

		//odata write
		//Writing the new authorizations
//		for(var key in selectedItems)
//		{	var payload = {
//				NAME: selectedItems[key].NAME,
//				TYPE: selectedItems[key].TYPE,
//				ID: this.itemId,
//				OBJECT_NAME: (this.itemId + "_SSB_AP")
//			};
//			createBatch.push(this.getView().getModel().createBatchOperation("/AUTHORIZED_USERS","POST",payload));
//		}
//		this.getView().getModel().addBatchChangeOperations(createBatch);
//		this.getView().getModel().submitBatch(function(data,response,errorResponse){
//			if(errorResponse.length)
//			{	busyDialog.close();
//				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("AUTH_SAVE_ERROR"));
//				return;
//			}
//			var error = false;
//			var responses = data.__batchResponses[0].__changeResponses;
//			for(var key in responses)
//				if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200")
//					error = true;				
//			if(error)
//				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("AUTH_SAVE_ERROR"));
//			else
//			{	sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("AUTH_SAVE_SUCCESS"));
//				that.onNavBack();	
//				window.history.back();
//			}
//			busyDialog.close();
//		}, function(error){
//				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("AUTH_SAVE_ERROR"));
//				busyDialog.close();
//		},false);
		//xsjs create
		for(var key in this.deletedItems) {
			payload.REVOKE.push(this.deletedItems[key].NAME);
		}
		for(var key in selectedItems) {
			payload.GRANT.push(selectedItems[key].NAME);
		}
		sap.suite.smartbusiness.utils.create(sap.suite.smartbusiness.utils.serviceUrl("AUTHORIZATION_SERVICE_URI"),payload,null,function(data) {
			sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("AUTH_SAVE_SUCCESS"));
			that.onNavBack();	
			sap.suite.smartbusiness.utils.replaceHash({action:"authorizeSBEvaluation", route:"detail", context: that.getView().getBindingContext().getPath().split("/")[1]});
			busyDialog.close();
		}, function(err) {
			sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("AUTH_SAVE_ERROR"), err.responseText);
			busyDialog.close();
		});
	},
	resetAuthorizations: function(){
		this.selectedIds = jQuery.extend(true,{},this.previousSelectedIds);
		this.selectedItemsModel.setData(jQuery.extend(true,[],this.previousAuthorizations));
		this.byId("selectedItemsTab").setCount(this.previousAuthorizations.length);
		this.byId("selectedItemsList").rerender();
		this.byId("userList").getModel().refresh(true);
		this.byId("roleList").getModel().refresh(true);
		this.deletedItems = [];	
	},
	onNavBack: function(){
		this.selectedIds["USER"] = {};
		this.selectedIds["ROLE"] = {};		
		this.deletedItems = [];	
	},
	openFilterDialog: function(){
		var that = this;
		var eventSourceType = this.byId("idIconTabBarMulti").getSelectedKey();
		if(!this.alphabetFilterDialog[eventSourceType])
		{		
			this.alphabetFilterDialog[eventSourceType] = new sap.m.SelectDialog({
				title: that.oApplicationFacade.getResourceBundle().getText("FILTER")+" : "+
				(eventSourceType=="users"?that.oApplicationFacade.getResourceBundle().getText("USERS"):that.oApplicationFacade.getResourceBundle().getText("ROLES")),
				growingScrollToLoad: true,
				rememberSelections: true,
				multiSelect: true,
				search: function(oEvent){
					that.alphabetFilterDialog[eventSourceType].getBinding("items").filter(new sap.ui.model.Filter("","Contains",this.getValue()));
				},
				confirm: function(oEvent){
					var aFilters = [];
					var itemBinding = that.byId((eventSourceType === "users")?"userList":"roleList").getBinding("items");
					
					var searchFilter = null;
					if(eventSourceType === "users")
						searchFilter = that.userSearch ? itemBinding.aFilters.pop() : null;
					else
						searchFilter = that.roleSearch ? itemBinding.aFilters.pop() : null;	
						
					var selectedFilters = [];
					var selectedItems = oEvent.getParameter("selectedContexts");
					for(var key in selectedItems)
					{	aFilters.push(new sap.ui.model.Filter("NAME","StartsWith",selectedItems[key].getObject()));
						selectedFilters.push(selectedItems[key].getObject());
					}		
					if(searchFilter)
						aFilters.push(searchFilter);
					itemBinding.filter(aFilters,false);
					if(selectedFilters.length > 0)
					{	that.byId((eventSourceType === "users")?"userInfoToolbar":"roleInfoToolbar").setVisible(true);
						that.byId((eventSourceType === "users")?"userInfoToolbarLabel":"roleInfoToolbarLabel").setText(that.oApplicationFacade.getResourceBundle().getText("FILTERED_BY")+"("+selectedFilters.join(", ")+")");
					}
					else
						that.byId((eventSourceType === "users")?"userInfoToolbar":"roleInfoToolbar").setVisible(false);
				},
				items: {
					path:"/",
					template: new sap.m.StandardListItem({title: "{}"})
				}
			});
			this.alphabetFilterDialog[eventSourceType].setModel(this.filterByAlphabetModel);						
		}
		this.alphabetFilterDialog[eventSourceType].open();
	},
	onSelectIconTab: function(oEvent){
		if(oEvent.getParameter("selectedKey") == "selected")
		{	this.oHeaderFooterOptions.oFilterOptions.bDisabled = true;
			this.setHeaderFooterOptions(this.oHeaderFooterOptions);
		}
		else
		{	this.oHeaderFooterOptions.oFilterOptions.bDisabled = false;
			this.setHeaderFooterOptions(this.oHeaderFooterOptions);
		}
	},
	
	handleBackAndCancel: function() {
		var that = this;
		var deltaAuth = sap.suite.smartbusiness.utils.dirtyBitCheck({oldPayload: that.initialSelectedItems, newPayload: that.selectedItemsModel.getData(), objectType: "AUTHORIZATION"});
		
		if(deltaAuth.updates.length || deltaAuth.deletes.length) {
			var backDialog = new sap.m.Dialog({
				icon:"sap-icon://warning2",
				title: that.oApplicationFacade.getResourceBundle().getText("WARNING"),
				state:"Error",
				type:"Message",
				content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("ON_BACK_WARNING")})],
				beginButton: new sap.m.Button({
					text: that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
					press: function(){
						sap.suite.smartbusiness.utils.replaceHash({action:"authorizeSBEvaluation", route:"detail", context: that.getView().getBindingContext().getPath().split("/")[1]});
					}
				}),
				endButton: new sap.m.Button({
					text: that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
					press: function(){backDialog.close();}
				})							
			});
			backDialog.open();
		}
		else {
			sap.suite.smartbusiness.utils.replaceHash({action:"authorizeSBEvaluation", route:"detail", context: that.getView().getBindingContext().getPath().split("/")[1]});
		}
	}
});
}; // end of sap/suite/ui/smartbusiness/designtime/authorization/view/S4.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.drilldown.Configuration') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.drilldown.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained


sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.designtime.drilldown.Configuration", {
	oServiceParams: {
		serviceList: [{
			name: "smart_business_runtime_services",
			masterCollection: "EVALUATIONS",
			serviceUrl: "/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata",
			isDefault: true,
			mockedDataSource: "/ddaconfig/model/metadata.xml"
		}]
	},

	getHanaSystem : function() {
        var hashObj = hasher || window.hasher; 
        var hashArr = hashObj.getHashAsArray();
        if(hashArr && hashArr.length && hashArr[0]) {
               var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
               for(var i=0,l=hashParameters.length; i<l; i++) {
                     if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                            return hashParameters[i].split("=")[1]; 
                     }
               }
        }
        return "";
	},
	
	getServiceParams : function() {
		if(sap.ushell && sap.ushell.Container) {
			var serviceUrl = this.oServiceParams.serviceList[0].serviceUrl;
	        this.oServiceParams.serviceList[0].serviceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(serviceUrl, this.getHanaSystem());
		}
        return this.oServiceParams;
	},

	/**
	 * @inherit
	 */
	getServiceList : function() {
		return this.getServiceParams().serviceList;
	},

	getMasterKeyAttributes : function() {
		//return the key attribute of your master list item
		return ["ID", "IS_ACTIVE"];
	},
	getExcludedQueryStringParameters : function() {
	    return ["sap-client","sap-language"];
	}
});

}; // end of sap/suite/ui/smartbusiness/designtime/drilldown/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.drilldown.view.S2.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.drilldown.view.S2.controller');

jQuery.sap.require('sap.ca.scfld.md.controller.ScfldMasterController'); // unlisted dependency retained


sap.ca.scfld.md.controller.ScfldMasterController.extend("sap.suite.ui.smartbusiness.designtime.drilldown.view.S2", {

	onInit:function(){
           var that = this;
		
		   that.oApplicationFacade.getODataModel().setSizeLimit(100000);
		
		if(!(that.oApplicationFacade.currentLogonHanaUser)) {
			this.oApplicationFacade.getODataModel().read("/SESSION_USER",null,null,true,function(data) {
				that.oApplicationFacade.currentLogonHanaUser = (data.results && data.results.length) ? data.results[0].LOGON_USER : null; 
			}, function(err) {
				that.oApplicationFacade.currentLogonHanaUser = null;
				sap.suite.smartbusiness.utils.showErrorMessage(that.getView().getModel("i18n").getProperty("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
			});
		}
		
		
		
	},
	

	formatIndicatorId: function(context) {
		return {text: ("KPI: " + context.getProperty("INDICATOR")), key: context.getProperty("INDICATOR")}; 
	},
	_handleItemPress:function(){
		
	},
	createGroupOptions: function() {
		var that = this;
		var groupOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("groupOptionsDialog"),
			groupItems: [
					new sap.m.ViewSettingsItem({
						text: that.getView().getModel("i18n").getProperty("BY_INDICATOR"),
						key: "indicator"
					}),
					new sap.m.ViewSettingsItem({
						text: that.getView().getModel("i18n").getProperty("BY_OWNER"),
						key: "owner"
					})
					],
			confirm : function(evt) {
				if(evt.getParameter("groupItem")) {
					that.setGrouping(evt.getParameter("groupItem").getKey(), evt.getParameter("groupDescending"));
				}
				else { 
					that.setGrouping("indicator", (evt.getParameter("groupDescending") || false));
				}
			}
		});
		return groupOptionsDialog;
	},
	
	getHeaderFooterOptions : function() {
		var that = this;
		return {
			sI18NMasterTitle : "ALL_ACTIVE_EVALUATIONS",
			// sI18NSearchFieldPlaceholder : "SEARCHFIELD_PLACEHOLDER",
		/*	onEditPress : function() {
				jQuery.sap.log.info("master list: edit pressed");
				that.refreshHeaderFooterForEditToggle();
			},*/
			oFilterOptions : {
				onFilterPressed: function(evt) {
					that.getView().filterOptionDialog = that.getView().filterOptionDialog || that.createFilterOptions();
					that.getView().filterOptionDialog.open();
				}
			},
			oSortOptions : {
				onSortPressed: function(evt) {
					that.getView().sortOptionDialog = that.getView().sortOptionDialog || that.createSortOptions();
					that.getView().sortOptionDialog.open();
				}
			},
			oGroupOptions : {
				onGroupPressed: function(evt) {
					that.getView().groupOptionDialog = that.getView().groupOptionDialog || that.createGroupOptions();
					that.getView().groupOptionDialog.open();
				}
			},
		
		
			
		};
	},
	setGrouping: function(key, groupDescending) {
		var that=this;
		groupDescending = groupDescending || false;
		var list = this.getView().byId("list");
		if(key == "indicator") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("INDICATOR",groupDescending,function(context){
				return {
					key: context.getProperty("INDICATOR"),
					text: ("KPI: " + context.getProperty("INDICATOR"))
				}
			})]);
		} 
		else if(key == "owner") { 
			list.getBinding("items").sort([new sap.ui.model.Sorter("OWNER_NAME",groupDescending,function(context){
				var owner_name = context.getProperty("OWNER_NAME");
				var groupTitle = "";
				switch(owner_name) {
				case null: groupTitle = that.getView().getModel("i18n").getProperty("NO_OWNER");
				break;
				case "": groupTitle = that.getView().getModel("i18n").getProperty("NO_OWNER");
				break;
				default: groupTitle = owner_name;
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			})]);
		}
	},
	
	createSortOptions: function() {
		var that = this;
		var sortOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("sortOptionsDialog"),
			sortItems: [
					new sap.m.ViewSettingsItem({
						text: that.getView().getModel("i18n").getProperty("CREATION_DATE"),
						key: "newest"
					}), 
					new sap.m.ViewSettingsItem({
						text: that.getView().getModel("i18n").getProperty("ALPHABETICALLY"),
						key: "alphabetically"
					}),
					new sap.m.ViewSettingsItem({
						text: that.getView().getModel("i18n").getProperty("NONE"),
						key: "none"
					})
					],
			confirm : function(evt) {
				if(evt.getParameter("sortItem")) {
					if(evt.getParameter("sortItem").getKey() == "none") {
						that.setGrouping("indicator", (evt.getParameter("groupDescending") || false));
					} 
					else {
						that.setSorting(evt.getParameter("sortItem").getKey(), evt.getParameter("sortDescending"));
					}
            	}
            	else {
            		that.setGrouping("indicator", (evt.getParameter("groupDescending") || false));
            	}
			}
		});
		return sortOptionsDialog;
	}, 
	
	setSorting: function(key, groupDescending) {
		groupDescending = groupDescending || false;
		var list = this.getView().byId("list");
		if(key == "newest") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("CREATED_ON",groupDescending,null)]); 
		} 
		else if(key == "alphabetically") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("TITLE",groupDescending,null)]);
		}
	},
	setFiltering: function(items) {
		var filters = [];
		var list = this.getView().byId("list");
		
		var filterObject = {
			"self_created": (new sap.ui.model.Filter("CREATED_BY", sap.ui.model.FilterOperator.EQ, this.oApplicationFacade.currentLogonHanaUser)),
			
			
		};
		
		for(var item in items) {
			filters.push(filterObject[item]);
		}
		
		if(filters.length) {
			list.getBinding("items").filter(new sap.ui.model.Filter(filters,false));
		}
		else {
			list.getBinding("items").filter(filters);
		}
	},
	createFilterOptions: function() {
		var that = this;
		var filterOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("filterOptionsDialog"),
			filterItems: [
					new sap.m.ViewSettingsFilterItem({
						text: that.getView().getModel("i18n").getProperty("ACTIVITY"),
						key: "activity",
						items: [
						         new sap.m.ViewSettingsItem({
						        	 text: that.getView().getModel("i18n").getProperty("SELF_CREATED"),
						        	 key: "self_created"
						         }),
						        
						         
						        ]
					})
					],
					confirm : function(evt) {
						var infoBarText = "";
						var selectedFilters = evt.getParameter("filterItems");

						that.setFiltering(evt.getParameter("filterKeys"));

						if(selectedFilters && selectedFilters.length) {
							var filterObj = {};
							for(var i=0,l=selectedFilters.length; i<l; i++) {
								filterObj[selectedFilters[i].getParent().getKey()] = filterObj[selectedFilters[i].getParent().getKey()] || "";
								filterObj[selectedFilters[i].getParent().getKey()] += (filterObj[selectedFilters[i].getParent().getKey()]) ? (",") : "";
								filterObj[selectedFilters[i].getParent().getKey()] += selectedFilters[i].getText(); 
							}

							for(var filter in filterObj) {
								if(filterObj.hasOwnProperty(filter)) {
									infoBarText += (infoBarText) ? " ; " : "";
									infoBarText += filterObj[filter];
								}
							}
								
						}
						
					}
		});
		return filterOptionsDialog;
	},
	
	 
	
	
});	
}; // end of sap/suite/ui/smartbusiness/designtime/drilldown/view/S2.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.evaluation.Component') ) {
// define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.evaluation.Component");
jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained


// extent of sap.ca.scfld.md.ComponentBase
sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.designtime.evaluation.Component", {
       metadata : sap.ca.scfld.md.ComponentBase.createMetaData("FS", {
              "name": "Fullscreen Sample",
              "version" : "1.0.0-SNAPSHOT",
              "library" : "sap.suite.ui.smartbusiness.designtime.evaluation",
              "includes" : ["../../lib/Util.js"],
              "dependencies" : {
                     "libs" : ["sap.m"],
                     "components" : [],
              },
              "config" : {
              	"resourceBundle" : "i18n/i18n.properties",
          			"titleResource" : "FULLSCREEN_TITLE",
          			"icon" : "sap-icon://Fiori5/F0822",
          			"favIcon" : "../../../../../../../resources/sap/ca/ui/themes/base/img/favicon/F0822_Create_Evaluation.ico",
          			"homeScreenIconPhone" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0822_Create_Evaluation/57_iPhone_Desktop_Launch.png",
          			"homeScreenIconPhone@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0822_Create_Evaluation/114_iPhone-Retina_Web_Clip.png",
          			"homeScreenIconTablet" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0822_Create_Evaluation/72_iPad_Desktop_Launch.png",
          			"homeScreenIconTablet@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0822_Create_Evaluation/144_iPad_Retina_Web_Clip.png",
          			"startupImage320x460" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/320_x_460.png",
          			"startupImage640x920" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_920.png",
          			"startupImage640x1096" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_1096.png",
          			"startupImage768x1004" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/768_x_1004.png",
          			"startupImage748x1024" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/748_x_1024.png",
          			"startupImage1536x2008" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1536_x_2008.png",
          			"startupImage1496x2048" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1496_x_2048.png"
              },
              viewPath : "sap.suite.ui.smartbusiness.designtime.evaluation.view",
              fullScreenPageRoutes : {
                     // fill the routes to your full screen pages in here.
                     "fullscreen" : {
                           "pattern" : "",
                           "view" : "S1"
                     },
                     "addEvaluation" : {
                           "pattern" : "addEvaluation/{indicatorContext}",
                           "view" : "S1"
                     },
                     "editEvaluation" : {
                           "pattern" : "editEvaluation/{indicatorContext}/{evaluationContext}",
                           "view" : "S1"
                     },
                     "duplicateEvaluation" : {
                         "pattern" : "duplicateEvaluation/{indicatorContext}/{evaluationContext}",
                         "view" : "S1"
                     },
                     "editEvaluationDraft" : {
                         "pattern" : "editEvaluationDraft/{indicatorContext}/{evaluationContext}",
                         "view" : "S1"
                     },
              //     "subscreen" : {
              //            "pattern" : "second",
              //            "view" : "S2"
              //     }
              },
       }),    

       /**
       * Initialize the application
       * 
        * @returns {sap.ui.core.Control} the content
       */
       createContent : function() {
              var oViewData = {component: this};
              return sap.ui.view({
                     viewName : "sap.suite.ui.smartbusiness.designtime.evaluation.Main",
                     type : sap.ui.core.mvc.ViewType.XML,
                     viewData : oViewData
              });
       }
});

}; // end of sap/suite/ui/smartbusiness/designtime/evaluation/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.evaluation.Configuration') ) {

jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.evaluation.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained


sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.designtime.evaluation.Configuration", {

	oServiceParams: {
		serviceList: [{
			name : "SMART_BUSINESS",
			masterCollection : "",
			serviceUrl : "/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata/",
			isDefault : true,
			mockedDataSource : "",
			useBatch : false
		}]
	},


	getAppConfig: function() {
		return this.oAppConfig;
	},

	/**
	 * @inherit
	 */
	getServiceList: function () {
		return this.oServiceParams.serviceList;
	},

	getMasterKeyAttributes: function () {
		return ["Id"];
	},
	getExcludedQueryStringParameters : function() {
		return ["sap-client","sap-language"];
	},
	getHanaSystem : function() {
        var hashObj = hasher || window.hasher; 
        var hashArr = hashObj.getHashAsArray();
        if(hashArr && hashArr.length && hashArr[0]) {
               var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
               for(var i=0,l=hashParameters.length; i<l; i++) {
                     if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                            return hashParameters[i].split("=")[1]; 
                     }
               }
        }
        return "";
	},
	getServiceParams : function() {
		if(sap.ushell && sap.ushell.Container) {
			var serviceUrl = this.oServiceParams.serviceList[0].serviceUrl;
	        this.oServiceParams.serviceList[0].serviceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(serviceUrl, this.getHanaSystem());
		}
        return this.oServiceParams;
	},


});

}; // end of sap/suite/ui/smartbusiness/designtime/evaluation/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.evaluation.view.S1.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.evaluation.view.S1.controller');
jQuery.sap.require('sap.ca.scfld.md.controller.BaseFullscreenController'); // unlisted dependency retained

jQuery.sap.includeStyleSheet("../../resources/sap/suite/ui/smartbusiness/designtime/evaluation/view/evaluationParameters.css");

sap.ca.scfld.md.controller.BaseFullscreenController.extend("sap.suite.ui.smartbusiness.designtime.evaluation.view.S1",{	
	onAfterRendering : function(){
		var that = this;
		that.initialModel = that._cloneObj(that.getView().getModel().getData());
	},
	navigateBack : function(){
		var that = this;
		var isActive;
		var backDialog = new sap.m.Dialog({
			icon:"sap-icon://warning2",
			title:that.oResourceBundle.getText("WARNING"),
			state:"Warning",
			type:"Message",
			content:[new sap.m.Text({text:that.oResourceBundle.getText("NAVIGATION_DATA_LOSS")})],
			beginButton: new sap.m.Button({
				text:that.oResourceBundle.getText("CONTINUE"),
				press: function(){
					backDialog.close();
					if(that.fromHome){
						window.location.hash = "";
					}
					else{
						if(this.editDraft){
							window.location.hash = "FioriApplication-SBWorkspace?sap-system=HANA&/evalDetail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)/EVALUATIONS_MODELER(ID='"+that.getView().getModel().getData().ID+"',IS_ACTIVE=1)";
						}
						else
						if(that.evalContext){
							window.location.hash = "FioriApplication-SBWorkspace?sap-system=HANA&/evalDetail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)/EVALUATIONS_MODELER(ID='"+that.getView().getModel().getData().ID+"',IS_ACTIVE="+isActive+")";
						}
						else{
							window.location.hash = "FioriApplication-SBWorkspace?sap-system=HANA&/detail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)";
						}
						
					}
				}
			}),
			endButton: new sap.m.Button({
				text:that.oResourceBundle.getText("CANCEL"),
				press:function(){
					backDialog.close();
				}
			})                                                
		});
		var updateRequired = false;
		if(that.getView().getModel().getData().mode === "create"){
			var batch = {};
			batch.oldPayload = that.getEvalParamPayload(that.initialModel);
			batch.newPayload = that.getEvalParamPayload(that.getView().getModel().getData());
			batch.objectType = "Evaluations";
			batch = sap.suite.smartbusiness.utils.dirtyBitCheck(batch);
			if(batch.updates.length > 0){
				updateRequired = true;
			}
		}
		else{
			var that = this,i = 0;
			
			var batch = {};
			that.saveFilters(that.getView());
			that.saveValues(that.getView());
			that.saveTags(that.getView());
			that.saveProperties(that.getView());
			that.saveAdditionalLanguages(that.getView());

			//checking for changes in evaluation parameters
			batch.oldPayload = that.getEvalParamPayload(that.evalDetails);
			batch.oldPayload.DATA_SPECIFICATION = "";
			isActive = batch.oldPayload.IS_ACTIVE;
			batch.oldPayload.IS_ACTIVE = 0;
			batch.newPayload = that.getEvalParamPayload(that.getView().getModel().getData());
			batch.newPayload.DATA_SPECIFICATION = "";
			batch.objectType = "Evaluations";
			batch = sap.suite.smartbusiness.utils.dirtyBitCheck(batch);
			if(batch.updates.length > 0){
				updateRequired = true;
			}

			//for changes in evaluation filters
			batch.oldPayload = that.evalDetails.FILTERS.results;
			for(var key in batch.oldPayload){
				batch.oldPayload[key].IS_ACTIVE = 0;
			}
			batch.newPayload = that.evalFiltersPayload;
			batch.objectType = "EVALUATION_FILTERS";
			batch = sap.suite.smartbusiness.utils.dirtyBitCheck(batch);
			if(batch.deletes.length > 0){
				updateRequired = true;
			}
			if(batch.updates.length > 0){
				updateRequired = true;
			}

			//for changes in evaluation values
			for(i=0;i<that.evalDetails.VALUES.results.length;i++){
				if(that.evalDetails.VALUES.results[i].COLUMN_NAME){
					delete that.evalDetails.VALUES.results[i].FIXED;
				}
				else{
					delete that.evalDetails.VALUES.results[i].COLUMN_NAME;
				}
			}
			batch.oldPayload = that.evalDetails.VALUES.results;
			for(var key in batch.oldPayload){
				batch.oldPayload[key].IS_ACTIVE = 0;
			}
			batch.newPayload = that.valuesPayload;
			batch.objectType = "EVALUATION_VALUES";
			batch = sap.suite.smartbusiness.utils.dirtyBitCheck(batch);
			if(batch.deletes.length > 0){
				updateRequired = true;
			}
			if(batch.updates.length > 0){
				updateRequired = true;
			}

			//for changes in evaluation tags
			batch.oldPayload = that.evalDetails.TAGS.results;
			for(var key in batch.oldPayload){
				batch.oldPayload[key].IS_ACTIVE = 0;
			}
			batch.newPayload = that.tagsPayload;
			batch.objectType = "TAGS";
			batch = sap.suite.smartbusiness.utils.dirtyBitCheck(batch);
			if(batch.deletes.length > 0){
				updateRequired = true;
			}
			if(batch.updates.length > 0){
				updateRequired = true;
			}

			//for changes in evaluation properties
			batch.oldPayload = that.evalDetails.PROPERTIES.results;
			for(var key in batch.oldPayload){
				batch.oldPayload[key].IS_ACTIVE = 0;
			}
			batch.newPayload = that.propPayload
			batch.objectType = "PROPERTIES";
			batch = sap.suite.smartbusiness.utils.dirtyBitCheck(batch);
			if(batch.deletes.length > 0){
				updateRequired = true;
			}
			if(batch.updates.length > 0){
				updateRequired = true;
			}

			//for changes in additional languages
			batch.oldPayload = that.evalDetails.ADDITIONAL_LANGUAGE_ARRAY;
			for(var key in batch.oldPayload){
				batch.oldPayload[key].IS_ACTIVE = 0;
			}
			batch.newPayload = that.languagesPayload
			batch.objectType = "EVALUATION_TEXTS";
			batch = sap.suite.smartbusiness.utils.dirtyBitCheck(batch);
			if(batch.deletes.length > 0){
				updateRequired = true;
			}
			if(batch.updates.length > 0){
				updateRequired = true;
			}
			
		}
		if(updateRequired){
			backDialog.open();
		}
		else{
			if(that.fromHome){
				window.location.hash = "";
			}
			else{
				if(this.editDraft){
					window.location.hash = "FioriApplication-SBWorkspace?sap-system=HANA&/evalDetail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)/EVALUATIONS_MODELER(ID='"+that.getView().getModel().getData().ID+"',IS_ACTIVE=1)";
				}
				else
				if(that.evalContext){
					window.location.hash = "FioriApplication-SBWorkspace?sap-system=HANA&/evalDetail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)/EVALUATIONS_MODELER(ID='"+that.getView().getModel().getData().ID+"',IS_ACTIVE="+isActive+")";
				}
				else{
					window.location.hash = "FioriApplication-SBWorkspace?sap-system=HANA&/detail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)";
				}
				
			}
		}
	},
	onInit : function() {
		var that = this;
		that.fromHome = false;
		var oOptions = {
				onBack : function(){
					that.navigateBack();
				},

				bSuppressBookmarkButton : {},
				oEditBtn : {
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						that.saveAndExit();
					}
				},
				buttonList : [{
					sI18nBtnTxt : "SAVE_CREATE_NEW",
					onBtnPressed : function(evt) {
						that.saveAndCreateNew();
					}
				}, 
				{
					sI18nBtnTxt : "SAVE_AND_ACTIVATE",
					onBtnPressed : function(evt) {
						that.saveAndActivate();
					}
				},{
					sI18nBtnTxt : "ACTIVATE_VISUALIZE",
					onBtnPressed : function(evt) {
						that.activateAndAddTiles();
					}
				},{
					sI18nBtnTxt : "CANCEL",
					onBtnPressed : function(evt) {
						that.navigateBack();
					}
				}]
		};
		this.setHeaderFooterOptions(oOptions);
		this.busyDialog = new sap.m.BusyDialog();
		this.oResourceBundle = this.oApplicationFacade.getResourceBundle();
		var oModel = new sap.ui.model.json.JSONModel({NO_OF_ADDITIONAL_LANGUAGES:0});
		this.getView().setModel(oModel); 
		this.oDataModel = this.oApplicationFacade.getODataModel();
		this.editDraft = false;
		//this.oDataModel.attachRequestCompleted(that.onODataServiceLoad, that); // this is to ensure that we fire
		// select event on the odata
		// service field only after we
		// receive the data
		this.oModelForInputParameters = new sap.ui.model.json.JSONModel();
		this.oModelForDimensions = new sap.ui.model.json.JSONModel();

		var evalContext = this.evalContext || "";
		that.getView().byId("propertyNameValueBox").bindAggregation("items", "/PROPERTIES", function(a, b) {
			return new sap.ui.layout.Grid({
				content : [new sap.m.Input({
					value : "{NAME}",
					layoutData : new sap.ui.layout.GridData({
						span : "L4 M4 S4"
					})
				}), new sap.m.Input({
					value : "{VALUE}",
					layoutData : new sap.ui.layout.GridData({
						span : "L4 M4 S4"
					})
				}), new sap.m.Button({
					icon : "sap-icon://sys-cancel",
					type : "Transparent",
					layoutData : new sap.ui.layout.GridData({
						span : "L2 M2 S2"
					}),
					press : function(evt) {
						that.removeProperty(evt);
					}
				})],
				defaultSpan : "L12 M12 S12"
			}).addStyleClass("propertyEntryGrid");;
		});
		this.oDataModel.read("/LANGUAGE?$filter=LAISO eq '"+(sap.ui.getCore().getConfiguration().getLocale().getLanguage()).toUpperCase()+"'", null, null, false, function(data) {
			that.localLanguage = data.results[0].SPRAS;
		});
		that.getView().getModel().setProperty("/NO_OF_ADDITIONAL_LANGUAGES", 0);
		this.setInputParameterAndFilterLayout();
		this.decideMode();
	},
	decideMode : function(){
		var that = this;
		this.oRouter.attachRouteMatched(function(evt) {
			this.getView().getModel().setProperty("/SCALING","0")
			if(evt.getParameter("name") === "duplicateEvaluation"){
				try {
                    if(sap.ushell.services.AppConfiguration && sap.ushell.services.AppConfiguration.setWindowTitle){
                            sap.ushell.services.AppConfiguration.setWindowTitle(that.oResourceBundle.getText("FULLSCREEN_TITLE_DUPLICATE"));
                    }
                } catch(e){
                    jQuery.sap.log.error("Error Setting Window Page Title : "+that.oResourceBundle.getText("FULLSCREEN_TITLE_DUPLICATE"))
                }
                that.duplicateEval = true;
				this.evalContext = evt.getParameter("arguments").evaluationContext;
				this.indicatorContext = evt.getParameter("arguments").indicatorContext;
				that.getView().getModel().setProperty("/mode","create");
				that._oControlStore.oTitle.setText(that.oResourceBundle.getText("FULLSCREEN_DYN_TITLE", "Duplicate"));
				that.byId("evalId").setEditable(true);
				that.populateEvalDetails();
				that.fromHome = false;
			}
			else if(evt.getParameter("name") === "editEvaluationDraft"){
				try {
                    if(sap.ushell.services.AppConfiguration && sap.ushell.services.AppConfiguration.setWindowTitle){
                            sap.ushell.services.AppConfiguration.setWindowTitle(that.oResourceBundle.getText("FULLSCREEN_TITLE_EDIT"));
                    }
                } catch(e){
                    jQuery.sap.log.error("Error Setting Window Page Title : "+that.oResourceBundle.getText("FULLSCREEN_TITLE_EDIT"))
                }
				that.footerForEditMode();
				this.evalContext = evt.getParameter("arguments").evaluationContext;
				this.indicatorContext = evt.getParameter("arguments").indicatorContext;
				that.getView().getModel().setProperty("/mode","edit");
				this.editDraft = true;
				that.populateEvalDetails();
				that._oControlStore.oTitle.setText(that.oResourceBundle.getText("FULLSCREEN_DYN_TITLE", "Edit"));
				that.byId("evalId").setEditable(false);
				that.fromHome = false;
			}
			else if(evt.getParameter("arguments").indicatorContext && evt.getParameter("arguments").evaluationContext){
				try {
                    if(sap.ushell.services.AppConfiguration && sap.ushell.services.AppConfiguration.setWindowTitle){
                            sap.ushell.services.AppConfiguration.setWindowTitle(that.oResourceBundle.getText("FULLSCREEN_TITLE_EDIT"));
                    }
                } catch(e){
                    jQuery.sap.log.error("Error Setting Window Page Title : "+that.oResourceBundle.getText("FULLSCREEN_TITLE_EDIT"))
                }
				this.evalContext = evt.getParameter("arguments").evaluationContext;
				this.indicatorContext = evt.getParameter("arguments").indicatorContext;
				that.getView().getModel().setProperty("/mode","edit");
				that.populateEvalDetails();
				that._oControlStore.oTitle.setText(that.oResourceBundle.getText("FULLSCREEN_DYN_TITLE", "Edit"));
				that.byId("evalId").setEditable(false);
				that.fromHome = false;
			}
			else if(evt.getParameter("arguments").indicatorContext){
				that.getView().getModel().setProperty("/mode","create");
				that.busyDialog.open();
				this.indicatorContext = evt.getParameter("arguments").indicatorContext;
				that.getView().getModel().setProperty("/IS_ACTIVE",0);
				that.getView().getModel().setProperty("/NO_OF_ADDITIONAL_LANGUAGES", 0);
				that.getKpiDetails();
				that._oControlStore.oTitle.setText(that.oResourceBundle.getText("FULLSCREEN_DYN_TITLE", "Add"));
				that.byId("indicatorId").setEditable(false);
				that.fromHome = false;
			}
			else{
				that.byId("selectKpi").setText(that.oResourceBundle.getText("SELECT_KPI_OPI"));
				that.getView().getModel().setProperty("/mode","create");
				that.getView().getModel().setProperty("/IS_ACTIVE",0);
				that.getView().getModel().setProperty("/NO_OF_ADDITIONAL_LANGUAGES", 0);
				that._oControlStore.oTitle.setText(that.oResourceBundle.getText("FULLSCREEN_DYN_TITLE", "Add"));
				that.fromHome = true;
			}

		}, this);
	},
	footerForEditMode : function(){
		var that = this;
		var oOptions = {
				bSuppressBookmarkButton : {},
				onBack : function(){
					that.navigateBack();
				},
				oEditBtn : {
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						that.saveAndExit();
					}
				},
				buttonList : [{
					sI18nBtnTxt : "SAVE_AND_ACTIVATE",
					onBtnPressed : function(evt) {
						that.saveAndActivate();
					}
				}, {
					sI18nBtnTxt : "DELETE",
					onBtnPressed : function(evt) {
						that.deleteDraft();
					}
				}, {
					sI18nBtnTxt : "CANCEL",
					onBtnPressed : function(evt) {
						that.navigateBack();
					}
				}]
		};
		this.setHeaderFooterOptions(oOptions);
	},
	populateEvalDetails : function(){
		var that = this;
		that.busyDialog.open();
		that.oDataModel.read(that.indicatorContext, null,null, true, function(kpiData) {
			that.getView().getModel().setProperty("/INDICATOR",kpiData.ID);
			that.byId("indicatorId").setEditable(false);
			that.getView().getModel().setProperty("/GOAL_TYPE",kpiData.GOAL_TYPE);
			if(kpiData.DATA_SPECIFICATION != ""){
				that.getView().getModel().setProperty("/DATA_SPECIFICATION",kpiData.DATA_SPECIFICATION);
				that.byId("additionalInfo").setVisible(true);
			}
			else{
				that.byId("additionalInfo").setVisible(false);
			}
			that.getView().getModel().setProperty("/INDICATOR_TYPE",kpiData.TYPE);
			that.oDataModel.read(that.evalContext, null,"$expand=FILTERS,VALUES,PROPERTIES,TAGS", true, function(data) {
				that.evalDetails = {};
				that.evalDetails = that._cloneObj(data);
				that.getView().getModel().setProperty("/ID",data.ID);
				that.getView().getModel().setProperty("/TITLE",data.TITLE);
				that.getView().getModel().setProperty("/DESCRIPTION",data.DESCRIPTION);
				that.oDataModel.read("/EVALUATION_TEXTS?$filter=ID eq '" + data.ID + "' and IS_ACTIVE eq " + data.IS_ACTIVE, null, null, false, function(languageData) {
					languageData = languageData.results;
					var languageArray = [];
					for(i=0;i<languageData.length;i++){
						var languageObject = {};
						languageObject.TITLE = languageData[i].TITLE;
						languageObject.DESCRIPTION = languageData[i].DESCRIPTION;
						that.oDataModel.read("/LANGUAGE?$filter=SPRAS eq '"+languageData[i].LANGUAGE+"'", null, null, false, function(data) {
							languageObject.LANGUAGE_KEY = data.results[0].LAISO;
							languageObject.LANGUAGE = data.results[0].SPRAS;
							languageObject.IS_ACTIVE = that.getView().getModel().getData().IS_ACTIVE;
							languageObject.ID = that.getView().getModel().getData().ID;
						});
						if(languageObject.LANGUAGE!=that.localLanguage){
							languageArray.push(languageObject);
						}
					}
					that.getView().getModel().setProperty("/ADDITIONAL_LANGUAGE_ARRAY",languageArray);
					that.getView().getModel().setProperty("/NO_OF_ADDITIONAL_LANGUAGES",languageArray.length); 
					that.evalDetails.ADDITIONAL_LANGUAGE_ARRAY = languageArray;
					that.evalDetails.NO_OF_ADDITIONAL_LANGUAGES = languageArray.length;
				});

				that.getView().getModel().setProperty("/IS_ACTIVE",0);
				that.getView().getModel().setProperty("/SEMANTIC_OBJECT",data.SEMANTIC_OBJECT);
				that.getView().getModel().setProperty("/ACTION",data.ACTION);
				if(data.GOAL_TYPE)
					that.getView().getModel().setProperty("/GOAL_TYPE",data.GOAL_TYPE);
				that.getView().getModel().setProperty("/INDICATOR_TYPE",data.INDICATOR_TYPE);

				that.getView().getModel().setProperty("/OWNER_NAME",data.OWNER_NAME);
				that.getView().getModel().setProperty("/OWNER_ID",data.OWNER_ID);
				that.getView().getModel().setProperty("/OWNER_E_MAIL",data.OWNER_E_MAIL);
				that.getView().getModel().setProperty("/VIEW_NAME",data.VIEW_NAME);
				that.getView().getModel().setProperty("/ODATA_URL",data.ODATA_URL);
				that.createTargetThresholdLayout();
				if(data.ODATA_ENTITYSET){
					that.getView().getModel().setProperty("/ODATA_ENTITYSET",data.ODATA_ENTITYSET);
					//that.populateDimensionsAndInputParameters(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
					try{
						that.oModelForMeasure = that.populateMeasure(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
						that.populateDimensionsAndInputParameters(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
					}
					catch(e){
						sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"), that.oResourceBundle.getText("ERROR_ODATA_ANALYTICS"));
						that.resetDimensionsAndInputParameters();
					}

				}

				that.getView().getModel().setProperty("/COLUMN_NAME",data.COLUMN_NAME);  

				that.getView().getModel().setProperty("/SCALING",data.SCALING);
				that.getView().getModel().updateBindings();
				if(data.TAGS.results.length > 0){
					var tags = "";
					for(var i=0;i<data.TAGS.results.length;i++){
						tags+=data.TAGS.results[i].TAG+",";
					}
					tags = tags.substring(0,tags.length-1);
					that.getView().getModel().setProperty("/TAG",tags);
				}
				if(data.FILTERS.results.length > 0){
					var inputParams = [], dimensions = [],j=0,k=0;
					for(var i=0;i<data.FILTERS.results.length;i++){
						if(data.FILTERS.results[i].TYPE === "PA"){
							inputParams[j] = {};
							inputParams[j++] = data.FILTERS.results[i];
						}
						else if(data.FILTERS.results[i].TYPE === "FI"){
							dimensions[k] = {};
							dimensions[k++] = data.FILTERS.results[i];
						}
					}
					if(inputParams.length > 0){
						var inputParamFormatted =  {};
						inputParamFormatted.inputParameters = [];
						inputParamFormatted.inputParameters = that.formObjectForFilters(inputParams);
						if(that.oModelForInputParameters.getData().inputParameters && that.oModelForInputParameters.getData().inputParameters.length) {
							for(var i=0;i<that.oModelForInputParameters.getData().inputParameters.length;i++){
								for(var j=0;j<inputParamFormatted.inputParameters.length;j++){
									if(that.oModelForInputParameters.getData().inputParameters[i].name === inputParamFormatted.inputParameters[j].name){
										that.oModelForInputParameters.getData().inputParameters[i].value_1 = inputParamFormatted.inputParameters[j].value_1;
										that.oModelForInputParameters.getData().inputParameters[i].value_2 = inputParamFormatted.inputParameters[j].value_2;
									}
								}
							}
							that.oModelForInputParameters.updateBindings();
						}	
					}
					if(dimensions.length > 0){
						var filtersFormatted = {};
						filtersFormatted.selectedDimensions = [];
						filtersFormatted.selectedDimensions = that.formObjectForFilters(dimensions);
						that.oModelForDimensions.getData().selectedDimensions = filtersFormatted.selectedDimensions;
						that.oModelForDimensions.updateBindings();
					}
				}

				if(data.PROPERTIES.results.length > 0){
					that.getView().getModel().setProperty("/PROPERTIES",data.PROPERTIES.results);
					that.getView().getModel().updateBindings();
				}

				that.getView().getModel().setProperty("/VALUES_SOURCE",data.VALUES_SOURCE);
				if(data.VALUES.results.length > 0){
					for(i=0;i<data.VALUES.results.length;i++){
						if(data.VALUES.results[i].FIXED){
							that.populateTargetAndTresholds(data.VALUES.results[i].TYPE,data.VALUES.results[i].FIXED);
						}
						else{
							that.populateTargetAndTresholds(data.VALUES.results[i].TYPE,data.VALUES.results[i].COLUMN_NAME);
						}
					} 
				}
				that.busyDialog.close();

			},function(err){
				that.busyDialog.close();
				sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_EVALUATION_DOES_NOT_EXIST"));
			});

		},function(err){
			that.busyDialog.close();
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_KPI_DOES_NOT_EXIST"));
		});

	},
	populateAdditionalMeasures : function(type,value){
		var that = this;
		var multiInput = that.getView().byId('targetThresholdPanel').getContent()[0].byId("additionalMeasures");
		multiInput.addToken(new sap.m.Token({text : value}));
		that.getView().byId('targetThresholdPanel').getContent()[0].byId("selectAdditionalMeasuresCheckBox").setSelected(true);
		that.getView().byId('targetThresholdPanel').getContent()[0].byId('additionalMeasures').setVisible(true);
	},
	populateTargetAndTresholds : function(type,value){
		var that = this;
		switch(type){
		case "CL" : that.getView().getModel().setProperty("/CRITICALLOW",value);break;
		case "WL" : that.getView().getModel().setProperty("/WARNINGLOW",value);break;
		case "TA" : that.getView().getModel().setProperty("/TARGET",value);break;
		case "CH" : that.getView().getModel().setProperty("/CRITICALHIGH",value);break;
		case "WH" : that.getView().getModel().setProperty("/WARNINGHIGH",value);break;
		case "TC" : that.getView().getModel().setProperty("/TREND",value);break;
		case "RE" : that.getView().getModel().setProperty("/REFERENCE_VALUE",value);break;
		default : that.populateAdditionalMeasures(type,value);
		}
	},
	formObjectForFilters : function(listOfFilters){
		var i = 0, j = 0, k = 0, temp = [], tempObj;
		for(i=0;i<listOfFilters.length;i++){
			if(listOfFilters[i].OPERATOR == "BT"){
				tempObj = {};
				tempObj = {"name":listOfFilters[i].NAME, "operator":listOfFilters[i].OPERATOR,  "value_1":listOfFilters[i].VALUE_1, "value_2":listOfFilters[i].VALUE_2}
				temp[j++] = tempObj; 
			}
			else{
				for(k=0;k<temp.length;k++){
					if((temp[k].name == listOfFilters[i].NAME) && (temp[k].operator == listOfFilters[i].OPERATOR)){
						break;
					}
				}
				if(k == temp.length){
					tempObj = {};
					tempObj = {"name":listOfFilters[i].NAME, "operator":listOfFilters[i].OPERATOR,  "value_1":listOfFilters[i].VALUE_1, "value_2":listOfFilters[i].VALUE_2}
					temp[j++] = tempObj;
				}
				else{
					temp[k].value_1+=","+listOfFilters[i].VALUE_1;
				}
			}
		}
		return temp;
	},

	getKpiDetails : function() {
		var that = this;
		if(!that.indicatorContext){
			that.busyDialog.close();
			that.indicatorContext = "INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)"
		}
		that.oDataModel.read(that.indicatorContext, null, "$expand=TAGS,PROPERTIES", true, function(data) {
			that.getView().getModel().setProperty("/INDICATOR", data.ID);
			if(data.IS_ACTIVE == 0){
				sap.m.MessageToast.show(that.oResourceBundle.getText("ERROR_INACTIVE_KPI_CANNOT_HAVE_EVALUATION"));
				window.location.hash = "FioriApplication-SBWorkspace?sap-system=HANA&/detail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=0)";
				return;
			}
			that.getView().byId("indicatorId").setValueState("None");

			that.getView().getModel().setProperty("/DESCRIPTION", data.DESCRIPTION);
			if(data.TAGS.results.length > 0){
				var tags = "";
				for(var i=0;i<data.TAGS.results.length;i++){
					tags+=data.TAGS.results[i].TAG+",";
				}
				tags = tags.substring(0,tags.length-1);
				that.getView().getModel().setProperty("/TAG",tags);
			}
			that.getView().getModel().setProperty("/OWNER_NAME", data.OWNER_NAME);
			that.getView().getModel().setProperty("/OWNER_ID", data.OWNER_ID);
			that.getView().getModel().setProperty("/OWNER_E_MAIL", data.OWNER_E_MAIL);
			if(data.PROPERTIES.results.length > 0){
				that.getView().getModel().setProperty("/PROPERTIES",data.PROPERTIES.results);
				that.getView().getModel().updateBindings();
			}
			if(data.DATA_SPECIFICATION != ""){
				that.getView().getModel().setProperty("/DATA_SPECIFICATION",data.DATA_SPECIFICATION);
				that.byId("additionalInfo").setVisible(true);
			}
			else{
				that.byId("additionalInfo").setVisible(false);
			}
			that.getView().getModel().setProperty("/DATA_SPECIFICATION", data.DATA_SPECIFICATION);
			that.getView().getModel().setProperty("/SEMANTIC_OBJECT", data.SEMANTIC_OBJECT);
			that.getView().getModel().setProperty("/ACTION", data.ACTION);
			that.getView().getModel().setProperty("/INDICATOR_TYPE", data.TYPE);
			that.getView().getModel().setProperty("/VIEW_NAME", data.VIEW_NAME);
			that.getView().getModel().setProperty("/ODATA_URL", data.ODATA_URL);
			that.createTargetThresholdLayout();
			if (data.ODATA_ENTITYSET) {
				that.getView().getModel().setProperty("/ODATA_ENTITYSET", data.ODATA_ENTITYSET);
				that.resetDimensionsAndInputParameters();
				try{
					that.populateDimensionsAndInputParameters(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
					that.oModelForMeasure = that.populateMeasure(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
				}
				catch(e) {
					sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"), that.oResourceBundle.getText("ERROR_ODATA_ANALYTICS"));
					that.resetDimensionsAndInputParameters();
				}

			}
			that.getView().getModel().setProperty("/COLUMN_NAME", data.COLUMN_NAME);
			that.getView().getModel().setProperty("/GOAL_TYPE", data.GOAL_TYPE);
			that.busyDialog.close();

		}, function(err) {
			that.busyDialog.close(); 
			that.getView().byId("indicatorId").setValueState("Error");
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_KPI_DOES_NOT_EXIST"));
		});
	},
	getEvalParamPayload : function(formData) {
		var evalPayload = {};
		evalPayload.ID = formData.ID;
		evalPayload.DESCRIPTION = formData.DESCRIPTION;
		evalPayload.INDICATOR = formData.INDICATOR;
		evalPayload.ODATA_URL = formData.ODATA_URL;
		evalPayload.VIEW_NAME = formData.VIEW_NAME;
		evalPayload.COLUMN_NAME = formData.COLUMN_NAME;
		evalPayload.OWNER_NAME = formData.OWNER_NAME;
		evalPayload.OWNER_E_MAIL = formData.OWNER_E_MAIL;
		evalPayload.OWNER_ID = formData.OWNER_ID;
		evalPayload.CREATED_BY = "";
		evalPayload.CHANGED_BY = "";
		evalPayload.IS_ACTIVE = formData.IS_ACTIVE;
		evalPayload.SCALING = parseInt(formData.SCALING)||0;
		evalPayload.TITLE = formData.TITLE;
		evalPayload.ENTITY_TYPE = "";
		evalPayload.ODATA_ENTITYSET = formData.ODATA_ENTITYSET;
		evalPayload.ODATA_PROPERTY = "";
		evalPayload.SEMANTIC_OBJECT = formData.SEMANTIC_OBJECT;
		evalPayload.ACTION = formData.ACTION;
		evalPayload.DATA_SPECIFICATION = formData.DATA_SPECIFICATION;
		evalPayload.GOAL_TYPE = formData.GOAL_TYPE;
		evalPayload.INDICATOR_TYPE = formData.INDICATOR_TYPE;
		evalPayload.VALUES_SOURCE = formData.VALUES_SOURCE;
		return evalPayload;
	},
	setFilterPayload : function(id, type, name, operator, value1, value2) {
		var obj = {};
		obj.ID = id;
		obj.IS_ACTIVE = this.getView().getModel().getData().IS_ACTIVE;
		obj.TYPE = type;
		obj.NAME = name;
		obj.OPERATOR = operator;
		obj.VALUE_1 = value1;
		if (value2)
			obj.VALUE_2 = value2;
		else
			obj.VALUE_2 = "";
		return obj;

	},
	getInputParamPayload : function(form) {
		var evalInputParams = {}, j = 0;
		var formData = form.getModel().getData();
		if (form.getController().oModelForInputParameters) {
			evalInputParams = form.getController().oModelForInputParameters.getData();
			if (evalInputParams.inputParameters) {
				if (evalInputParams.inputParameters.length > 0) {
					var i = 0, filterValue = [], filterValue1;
					while (i < evalInputParams.inputParameters.length) {
						if (evalInputParams.inputParameters[i].operator === "BT") {
							if ((evalInputParams[i].value_1 !== "") || (evalInputParams[i].value_2 !== "")) {
								filterValue = evalInputParams.inputParameters[i].value_1.split(",");
								filterValue1 = evalInputParams.inputParameters[i].value_2.split(",");
								if ((filterValue1.length === 1) && (!filterValue.length === 1)) {

									evalInputParams.inputParameters[i].value_1 = (evalInputParams.inputParameters[i].propertyType == "Edm.DateTime")
									? new Date(evalInputParams.inputParameters[i].value_1).toJSON() : evalInputParams.inputParameters[i].value_1;
									evalInputParams.inputParameters[i].value_2 = (evalInputParams.inputParameters[i].propertyType == "Edm.DateTime")
									? new Date(evalInputParams.inputParameters[i].value_2).toJSON() : evalInputParams.inputParameters[i].value_2;
									this.evalFiltersPayload[j] = {};
									this.evalFiltersPayload[j] = this.setFilterPayload(formData.ID, "PA",
											evalInputParams.inputParameters[i].name, evalInputParams.inputParameters[i].operator,
											evalInputParams.inputParameters[i].value_1, evalInputParams.inputParameters[i].value_2);
									j++;
								}
							}
						} else {
							filterValue = evalInputParams.inputParameters[i].value_1.split(",");
							if (filterValue.length > 0) {
								for ( var k = 0; k < filterValue.length; k++) {
									if (filterValue[k] !== "") {

										filterValue[k] = (evalInputParams.inputParameters[i].propertyType == "Edm.DateTime")
										? new Date(filterValue[k]).toJSON() : filterValue[k];
										this.evalFiltersPayload[j] = {};
										this.evalFiltersPayload[j] = this.setFilterPayload(formData.ID, "PA",
												evalInputParams.inputParameters[i].name, evalInputParams.inputParameters[i].operator,
												filterValue[k]);
										j++;
									}
								}
							}
						}
						i++;
					}
				}
			}

		}
	},
	getFiltersPayload : function(form) {
		var formData = form.getModel().getData();
		var evalDimensionFilters = {}, j = this.evalFiltersPayload.length;
		if (form.getController().oModelForDimensions) {
			evalDimensionFilters = form.getController().oModelForDimensions.getData();
			if (evalDimensionFilters.selectedDimensions) {
				if (evalDimensionFilters.selectedDimensions.length > 0) {
					var i = 0, filterValue = [], filterValue1;
					while (i < evalDimensionFilters.selectedDimensions.length) 
					{
						if (evalDimensionFilters.selectedDimensions[i].operator === "BT") 
						{
							if ((evalDimensionFilters.selectedDimensions[i].value_1 !== "")
									&& (evalDimensionFilters.selectedDimensions[i].value_2 !== ""))
							{
								filterValue = evalDimensionFilters.selectedDimensions[i].value_1.split(",");
								filterValue1 = evalDimensionFilters.selectedDimensions[i].value_2.split(",");
								if ((filterValue1.length === 1) || (!filterValue.length === 1))
								{
									evalDimensionFilters.selectedDimensions[i].value_1 = (evalDimensionFilters.selectedDimensions[i].propertyType == "Edm.DateTime")
									? new Date(evalDimensionFilters.selectedDimensions[i].value_1).toJSON() : evalDimensionFilters.selectedDimensions[i].value_1;
									evalDimensionFilters.selectedDimensions[i].value_2 = (evalDimensionFilters.selectedDimensions[i].propertyType == "Edm.DateTime")
									? new Date(evalDimensionFilters.selectedDimensions[i].value_2).toJSON() : evalDimensionFilters.selectedDimensions[i].value_2;
									this.evalFiltersPayload[j] = {};
									this.evalFiltersPayload[j] = this.setFilterPayload(formData.ID, "FI",
											evalDimensionFilters.selectedDimensions[i].name,
											evalDimensionFilters.selectedDimensions[i].operator,
											evalDimensionFilters.selectedDimensions[i].value_1,
											evalDimensionFilters.selectedDimensions[i].value_2);

									j++;
								}
							}
						} else {
							filterValue = evalDimensionFilters.selectedDimensions[i].value_1.split(",");
							if (filterValue.length > 0) 
							{
								for (var k = 0; k < filterValue.length; k++)
								{
									if (filterValue[k] != "")
									{      
										filterValue[k] = (evalDimensionFilters.selectedDimensions[i].propertyType == "Edm.DateTime")
										? new Date(filterValue[k]).toJSON() : filterValue[k];
										this.evalFiltersPayload[j] = {};
										this.evalFiltersPayload[j] = this.setFilterPayload(formData.ID, "FI",
												evalDimensionFilters.selectedDimensions[i].name,
												evalDimensionFilters.selectedDimensions[i].operator, 
												filterValue[k]);
										j++;
									}

								}
							}
						}
						i++;
					}
				}
			}
		}
	},

	getThresholdValue : function(id, type, state, value) {
		var obj = {};
		obj.ID = id;
		obj.TYPE = type;
		obj.IS_ACTIVE = state;

		var form = this.getView();
		var formData = form.getModel().getData();
		var valueType = formData.VALUES_SOURCE;
		if (valueType === "MEASURE") {
			obj.COLUMN_NAME = value;
		}
		if (valueType === "FIXED") {
			obj.FIXED = value;
		}
		obj.ODATA_PROPERTY = "";
		return obj;
	},
	getRangePayload : function(form) {
		var formData = form.getModel().getData();
		var i = 0;
		if (formData.CRITICALHIGH && formData.CRITICALHIGH !== "") {
			this.valuesPayload[i] = this.getThresholdValue(formData.ID, "CH", formData.IS_ACTIVE, formData.CRITICALHIGH);
			i++;
		}
		if (formData.WARNINGHIGH && formData.WARNINGHIGH !== "") {
			this.valuesPayload[i] = this.getThresholdValue(formData.ID, "WH", formData.IS_ACTIVE, formData.WARNINGHIGH);
			i++;
		}
		if (formData.TARGET && formData.TARGET !== "") {
			this.valuesPayload[i] = this
			.getThresholdValue(formData.ID, "TA", formData.IS_ACTIVE,formData.TARGET);
			i++;
		}
		if (formData.CRITICALLOW && formData.CRITICALLOW !== "") {
			this.valuesPayload[i] = this.getThresholdValue(formData.ID, "CL", formData.IS_ACTIVE,formData.CRITICALLOW);
			i++;
		}
		if (formData.WARNINGLOW && formData.WARNINGLOW !== "") {
			this.valuesPayload[i] = this.getThresholdValue(formData.ID, "WL", formData.IS_ACTIVE,formData.WARNINGLOW);
			i++;
		}
	},
	getMaximizingPayload : function(form) {
		var formData = form.getModel().getData();
		var i = this.valuesPayload.length;

		if (formData.TARGET && formData.TARGET !== "") {
			this.valuesPayload[i] = this
			.getThresholdValue(formData.ID, "TA", formData.IS_ACTIVE, formData.TARGET);
			i++;
		}
		if (formData.CRITICALLOW && formData.CRITICALLOW !== "") {
			this.valuesPayload[i] = this.getThresholdValue(formData.ID, "CL", formData.IS_ACTIVE,formData.CRITICALLOW);
			i++;
		}
		if (formData.WARNINGLOW && formData.WARNINGLOW !== "") {
			this.valuesPayload[i] = this.getThresholdValue(formData.ID, "WL", formData.IS_ACTIVE,formData.WARNINGLOW);
			i++;
		}
	},
	getMinimizingPayload : function(form) {
		var formData = form.getModel().getData();
		var i = this.valuesPayload.length;

		if (formData.CRITICALHIGH && formData.CRITICALHIGH !== "") {
			this.valuesPayload[i] = this.getThresholdValue(formData.ID, "CH", formData.IS_ACTIVE,formData.CRITICALHIGH);
			i++;
		}
		if (formData.WARNINGHIGH && formData.WARNINGHIGH !== "") {
			this.valuesPayload[i] = this.getThresholdValue(formData.ID, "WH", formData.IS_ACTIVE,formData.WARNINGHIGH);
			i++;
		}
		if (formData.TARGET && formData.TARGET !== "") {
			this.valuesPayload[i] = this
			.getThresholdValue(formData.ID, "TA", formData.IS_ACTIVE, formData.TARGET);
			i++;
		}

	},
	saveFilters : function(form) {
		this.evalFiltersPayload = [];
		this.getInputParamPayload(form);
		this.getFiltersPayload(form);
	},
	saveValues : function(form) {
		var that = this;
		this.valuesPayload = [];
		var formData = form.getModel().getData();
		switch (formData.GOAL_TYPE) {
		case "RA" :
			that.getRangePayload(form);
			break;
		case "MA" :
			that.getMaximizingPayload(form);
			break;
		case "MI" :
			that.getMinimizingPayload(form);
			break;
		}
		if (formData.TREND && formData.TREND !== "") {
			var i = this.valuesPayload.length;
			this.valuesPayload[i] = this.getThresholdValue(formData.ID, "TC", formData.IS_ACTIVE, formData.TREND);
			i++;
		}
		if (formData.REFERENCE_VALUE && formData.REFERENCE_VALUE !== "") {
			var i = this.valuesPayload.length;
			this.valuesPayload[i] = this.getThresholdValue(formData.ID, "RE", formData.IS_ACTIVE, formData.REFERENCE_VALUE);
			i++;
		}
		if(that.getView().byId('targetThresholdPanel').getContent()[0].byId("additionalMeasures").getTokens().length){
			var tokens = that.getView().byId('targetThresholdPanel').getContent()[0].byId("additionalMeasures").getTokens();
			for(var i=0,j=this.valuesPayload.length;i<tokens.length;i++){
				var type = "0";
				if (i.toString().length === 1) { 
					type = "0"+i; 
				}
				else{
					type = i.toString();
				}
				this.valuesPayload[j++] = {
						ID:formData.ID,
						IS_ACTIVE:formData.IS_ACTIVE,
						TYPE:type,
						COLUMN_NAME:tokens[i].getText(),
						ODATA_PROPERTY:""
					}
			}
		}
	},
	saveTags : function(form) {
		var formData = form.getModel().getData();
		this.tagsPayload = [];
		if (formData.TAG) {
			var tags = [];

			tags = formData.TAG.split(",");
			for ( var i = 0; i < tags.length; i++) {
				this.tagsPayload[i] = {};
				this.tagsPayload[i].ID = formData.ID;
				this.tagsPayload[i].IS_ACTIVE = formData.IS_ACTIVE;
				this.tagsPayload[i].TYPE = "EV";
				this.tagsPayload[i].TAG = tags[i];
			}
		}

	},
	saveProperties : function(form) {
		var formData = form.getModel().getData();
		this.propPayload = [];
		if (formData.PROPERTIES) {
			for ( var i = 0; i < formData.PROPERTIES.length; i++) {
				this.propPayload[i] = {};
				this.propPayload[i].ID = formData.ID;
				this.propPayload[i].IS_ACTIVE = formData.IS_ACTIVE;
				this.propPayload[i].TYPE = "EV";
				this.propPayload[i].NAME = formData.PROPERTIES[i].NAME;
				this.propPayload[i].VALUE = formData.PROPERTIES[i].VALUE;
			}

		}
	},
	saveAdditionalLanguages : function(form){
		var that = this;
		var formData = form.getModel().getData();
		this.languagesPayload = [];
		if(formData.NO_OF_ADDITIONAL_LANGUAGES > 0){
			var i=0,j=0,k=0,temp;
			that.oDataModel.read("/LANGUAGE",null,null,false,function(data){
				while(i<formData.ADDITIONAL_LANGUAGE_ARRAY.length){
					temp = formData.ADDITIONAL_LANGUAGE_ARRAY[i].LANGUAGE_KEY;
					for(j=0;j<data.results.length;j++){
						if(data.results[j].LAISO === temp){
							formData.ADDITIONAL_LANGUAGE_ARRAY[i].LANGUAGE = data.results[j].SPRAS;
							formData.ADDITIONAL_LANGUAGE_ARRAY[i].LANGUAGE_KEY = data.results[j].LAISO;
							break;
						}
					}
					i++;
				}
			});
			for(i=0;i<formData.ADDITIONAL_LANGUAGE_ARRAY.length;i++){
				this.languagesPayload[i] = {};
				this.languagesPayload[i].ID = formData.ID;
				this.languagesPayload[i].IS_ACTIVE = formData.IS_ACTIVE;
				this.languagesPayload[i].LANGUAGE = formData.ADDITIONAL_LANGUAGE_ARRAY[i].LANGUAGE;
				this.languagesPayload[i].LANGUAGE_KEY = formData.ADDITIONAL_LANGUAGE_ARRAY[i].LANGUAGE_KEY;
				this.languagesPayload[i].TITLE = formData.ADDITIONAL_LANGUAGE_ARRAY[i].TITLE;
				this.languagesPayload[i].DESCRIPTION = formData.ADDITIONAL_LANGUAGE_ARRAY[i].DESCRIPTION;
			}
		}
	},
	createBatchForEvalCreateMode : function(oEvent){
		var that = this;
		that.evalPayload = {};
		that.evalPayload.ID = that.evalParamPayload.ID;
		that.evalPayload.IS_ACTIVE = that.evalParamPayload.IS_ACTIVE;
		that.evalPayload.EVALUATION = that.evalParamPayload;
		delete that.evalPayload.EVALUATION.ID;
		delete that.evalPayload.EVALUATION.IS_ACTIVE;
		
		that.evalPayload.FILTERS = [];
		that.evalPayload.FILTERS = that.evalFiltersPayload;
		for(var i=0;i<that.evalPayload.FILTERS.length;i++){
			delete that.evalPayload.FILTERS[i].ID;
			delete that.evalPayload.FILTERS[i].IS_ACTIVE;
		}
		that.evalPayload.VALUES = [];
		that.evalPayload.VALUES = that.valuesPayload;
		for(var i=0;i<that.evalPayload.VALUES.length;i++){
			delete that.evalPayload.VALUES[i].ID;
			delete that.evalPayload.VALUES[i].IS_ACTIVE;
		}
		that.evalPayload.TAGS = [];
		that.evalPayload.TAGS = that.tagsPayload;
		for(var i=0;i<that.evalPayload.TAGS.length;i++){
			delete that.evalPayload.TAGS[i].ID;
			delete that.evalPayload.TAGS[i].IS_ACTIVE;
		}
		that.evalPayload.PROPERTIES = [];
		that.evalPayload.PROPERTIES = that.propPayload;
		for(var i=0;i<that.evalPayload.PROPERTIES.length;i++){
			delete that.evalPayload.PROPERTIES[i].ID;
			delete that.evalPayload.PROPERTIES[i].IS_ACTIVE;
		}
		
		
		that.evalPayload.TEXTS = [];
		that.evalPayload.TEXTS = that.languagesPayload;
		for(var i=0;i<that.evalPayload.TEXTS.length;i++){
			delete that.evalPayload.TEXTS[i].ID;
			delete that.evalPayload.TEXTS[i].IS_ACTIVE;
			delete that.evalPayload.TEXTS[i].LANGUAGE_KEY;
		}
		var url = sap.suite.smartbusiness.utils.serviceUrl("EVALUATION_SERVICE_URI");
		
		
		sap.suite.smartbusiness.utils.create(url,that.evalPayload,null,function(data){
			that.saveSuccessHandling(oEvent);
		},function(error){
			that.saveErrorHandling(error);
		});
	},
	
	createBatchPayload:function(oEvent){
		var that = this,i = 0;
		var path, updateRequired = false;
		var updatePayload = {};
		var batch = {};
		var formData = that.getView().getModel().getData();
		updatePayload.ID = formData.ID;
		updatePayload.IS_ACTIVE = formData.IS_ACTIVE;
		//checking for changes in evaluation parameters
		batch.oldPayload = that.getEvalParamPayload(that.evalDetails);
		batch.newPayload = that.evalParamPayload;
		batch.objectType = "Evaluations";
		batch = sap.suite.smartbusiness.utils.dirtyBitCheck(batch);
		if(batch.updates.length > 0){
			updatePayload.EVALUATION = {};
			updatePayload.EVALUATION.update = {}
			updatePayload.EVALUATION.update = that.evalParamPayload;
			delete updatePayload.EVALUATION.update.ID;
			delete updatePayload.EVALUATION.update.IS_ACTIVE;
			updateRequired = true;
		}

		//for changes in evaluation filters
		batch.oldPayload = that.evalDetails.FILTERS.results;
		batch.newPayload = that.evalFiltersPayload;
		batch.objectType = "EVALUATION_FILTERS";
		batch = sap.suite.smartbusiness.utils.dirtyBitCheck(batch);
		updatePayload.FILTERS = {};
		if(batch.deletes.length > 0){
			for(i=0;i<batch.deletes.length;i++){
				delete batch.deletes[i].ID;
				delete batch.deletes[i].IS_ACTIVE;
			}
			updatePayload.FILTERS.remove = batch.deletes;
			updateRequired = true;
		}
		if(batch.updates.length > 0){
			for(var i=0;i<batch.updates.length;i++){
				delete batch.updates[i].ID;
				delete batch.updates[i].IS_ACTIVE;
			}
			updatePayload.FILTERS.create = batch.updates;
			updateRequired = true;
		}

		//for changes in evaluation values
		for(i=0;i<that.evalDetails.VALUES.results.length;i++){
			if(that.evalDetails.VALUES.results[i].COLUMN_NAME){
				delete that.evalDetails.VALUES.results[i].FIXED;
			}
			else{
				delete that.evalDetails.VALUES.results[i].COLUMN_NAME;
			}
		}
		batch.oldPayload = that.evalDetails.VALUES.results;
		batch.newPayload = that.valuesPayload;
		batch.objectType = "EVALUATION_VALUES";
		batch = sap.suite.smartbusiness.utils.dirtyBitCheck(batch);
		updatePayload.VALUES = {};
		if(batch.deletes.length > 0){
			for(var i=0;i<batch.deletes;i++){
				delete batch.deletes[i].ID;
				delete batch.deletes[i].IS_ACTIVE;
			}
			updatePayload.VALUES.remove = batch.deletes;
			updateRequired = true;
		}
		if(batch.updates.length > 0){
			for(var i=0;i<batch.updates.length;i++){
				delete batch.updates[i].ID;
				delete batch.updates[i].IS_ACTIVE;
			}
			updatePayload.VALUES.create = batch.updates;
			updateRequired = true;
		}

		//for changes in evaluation tags
		batch.oldPayload = that.evalDetails.TAGS.results;
		batch.newPayload = that.tagsPayload;
		batch.objectType = "TAGS";
		batch = sap.suite.smartbusiness.utils.dirtyBitCheck(batch);
		updatePayload.TAGS = {};
		if(batch.deletes.length > 0){
			for(i=0;i<batch.deletes.length;i++){
				delete batch.deletes[i].ID;
				delete batch.deletes[i].IS_ACTIVE;
			}
			updatePayload.TAGS.remove = batch.deletes;
			updateRequired = true;
		}
		if(batch.updates.length > 0){
			for(var i=0;i<batch.updates.length;i++){
				delete batch.updates[i].ID;
				delete batch.updates[i].IS_ACTIVE;
			}
			updatePayload.TAGS.create = batch.updates;
			updateRequired = true;
		}


		//for changes in evaluation properties
		batch.oldPayload = that.evalDetails.PROPERTIES.results;
		batch.newPayload = that.propPayload
		batch.objectType = "PROPERTIES";
		batch = sap.suite.smartbusiness.utils.dirtyBitCheck(batch);
		updatePayload.PROPERTIES = {};
		if(batch.deletes.length > 0){
			for(i=0;i<batch.deletes.length;i++){
				delete batch.deletes[i].ID;
				delete batch.deletes[i].IS_ACTIVE;
			}
			updatePayload.PROPERTIES.remove = batch.deletes;
			updateRequired = true;
		}
		if(batch.updates.length > 0){
			for(var i=0;i<batch.updates.length;i++){
				delete batch.updates[i].ID;
				delete batch.updates[i].IS_ACTIVE;
			}
			updatePayload.PROPERTIES.create = batch.updates;
			updateRequired = true;
		}

		//for changes in additional languages
		batch.oldPayload = that.evalDetails.ADDITIONAL_LANGUAGE_ARRAY;
		batch.newPayload = that.languagesPayload
		batch.objectType = "EVALUATION_TEXTS";
		batch = sap.suite.smartbusiness.utils.dirtyBitCheck(batch);
		updatePayload.TEXTS = {}
		if(batch.deletes.length > 0){
			for(i=0;i<batch.deletes.length;i++){
				delete batch.deletes[i].ID;
				delete batch.deletes[i].IS_ACTIVE;
			}
			updatePayload.TEXTS.remove = batch.deletes;
			updateRequired = true;
		}
		if(batch.updates.length > 0){
			for(var i=0;i<batch.updates.length;i++){
				delete batch.updates[i].ID;
				delete batch.updates[i].IS_ACTIVE;
			}
			updatePayload.TEXTS.create = batch.updates;
			updateRequired = true;
		}
		if(!updateRequired){
			that.busyDialog.close();   
			that.saveSuccessHandling(oEvent);
			return;
		}
		else{
			var url = sap.suite.smartbusiness.utils.serviceUrl("EVALUATION_SERVICE_URI");
			sap.suite.smartbusiness.utils.update(url,updatePayload,null,function(data){
				that.saveSuccessHandling(oEvent);
			},function(error){
				that.saveErrorHandling(error);
			});
		}
	},
	saveErrorHandling : function(error){
		var that = this;
		sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_EVAL_SAVE"));
		that.busyDialog.close();
	},
	saveSuccessHandling : function(oEvent){
		var that = this;
		sap.m.MessageToast.show(that.oResourceBundle.getText("SUCCESS_EVAL_SAVE"));
		if(oEvent === "activate" || oEvent === "saveActivate"){
			var obj = {};
			obj.ID = that.getView().getModel().getData().ID;
			var url = sap.suite.smartbusiness.utils.serviceUrl("ACTIVATE_EVALUATION_SERVICE_URI");
			sap.suite.smartbusiness.utils.create(url,obj,null,function(data){
				that.busyDialog.close();
				sap.m.MessageToast.show(that.oResourceBundle.getText("SUCCESS_EVAL_ACTIVATE"));
				if(oEvent === "activate")
					window.location.hash = "FioriApplication-configureSBKPITile?sap-system=HANA&/detail/EVALUATIONS_CHIP(ID='"+that.getView().getModel().getData().ID+"',IS_ACTIVE=1)";
				else if(oEvent === "saveActivate" && !that.fromHome)
					window.location.hash = "FioriApplication-SBWorkspace?sap-system=HANA&/evalDetail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)/EVALUATIONS_MODELER(ID='"+that.getView().getModel().getData().ID+"',IS_ACTIVE=1)";
				else if(that.fromHome){
					window.location.hash = "";
				}
			},function(error){
				that.busyDialog.close(); 
				sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ACTIVATING_EVALUATION"));
			});
		}
		else if(oEvent == "create"){
			that.busyDialog.close(); 
			if(that.fromHome){
				window.location.hash = "";
			}
			else{
				if(this.editDraft){
					window.location.hash = "FioriApplication-SBWorkspace?sap-system=HANA&/evalDetail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)/EVALUATIONS_MODELER(ID='"+that.getView().getModel().getData().ID+"',IS_ACTIVE=1)";
				}
				else
				if(that.duplicateEval){
					window.location.hash = "FioriApplication-SBWorkspace?sap-system=HANA&/evalDetail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)/EVALUATIONS_MODELER(ID='"+that.getView().getModel().getData().ID+"',IS_ACTIVE=0)";
				}
				else
				if(that.evalDetails){
					var isActive = that.evalDetails.IS_ACTIVE;
					window.location.hash = "FioriApplication-SBWorkspace?sap-system=HANA&/evalDetail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)/EVALUATIONS_MODELER(ID='"+that.getView().getModel().getData().ID+"',IS_ACTIVE="+isActive+")";
				}
				else{
					window.location.hash = "FioriApplication-SBWorkspace?sap-system=HANA&/evalDetail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)/EVALUATIONS_MODELER(ID='"+that.getView().getModel().getData().ID+"',IS_ACTIVE=0)";
				}
			}
		}
		else if(oEvent == "createNew"){
			that.busyDialog.close(); 
			that.byId("evalId").setEditable(true);
			that.getView().getModel().setData({});
			that.getView().getModel().setProperty("/NO_OF_ADDITIONAL_LANGUAGES",0);
			that.getKpiDetails();
			window.location.hash = "FioriApplication-createSBKPIEvaluation&/addEvaluation/"+that.indicatorContext;
		}
		that.busyDialog.close();
	},
	saveAndExit : function(oEvent) {
		var that = this;
		that.createBatch = [];
		that.deleteBatch = [];
		var formData = that.getView().getModel().getData();
		if (!formData.INDICATOR) {
			that.byId("indicatorId").setValueState("Error");
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_SELECT_KPI"));
			return;
		}
		if (that.byId("indicatorId").getValueState() === "Error") {
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_KPI_DOES_NOT_EXIST"));
			return;
		}
		if (that.byId("evalOwnerEmail").getValueState() === "Error") {
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_VALID_EVAL_E_MAIL"));
			return;
		}
		if(formData.mode === "edit"){
			if (!formData.ID) {
				that.byId("evalId").setValueState("Error");
				sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_EVALUATION_ID"));
				return;
			}
			if (that.byId("evalId").getValueState() === "Error") {
				sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_VALID_EVAL_ID"));
				return;
			}
		}
		else{
			if(!that.validateEvalId()){
				if (!formData.ID) {
					that.byId("evalId").setValueState("Error");
					sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_EVALUATION_ID"));
					return;
				}
				if (that.byId("evalId").getValueState() === "Error") {
					sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_VALID_EVAL_ID"));
					return;
				}
			}
			else{
				return;
			}
		}
		if(formData.VALUES_SOURCE === "FIXED"){
			var validatedEvalValues = this.validateEvaluationValues(this.getView().getModel().getData());
			if(validatedEvalValues.length){

				var msg = this.oResourceBundle.getText("ERROR_ENTER_VALID_THRESHOLD_VALUES");
				var i;
				for(i=0;i<validatedEvalValues.length;i++){
					if(validatedEvalValues[i]==="CL"){
						if(this.getView().getModel().getData().GOAL_TYPE === "RA"){
							msg = msg+"\n"+this.oResourceBundle.getText("CRITICAL_LOW");
						}
						else{
							msg = msg+"\n"+this.oResourceBundle.getText("CRITICAL");
						}
					}
					if(validatedEvalValues[i]==="WL"){
						if(this.getView().getModel().getData().GOAL_TYPE === "RA"){
							msg = msg+"\n"+this.oResourceBundle.getText("WARNING_LOW");
						}
						else{
							msg = msg+"\n"+this.oResourceBundle.getText("WARNING");
						}
					}
					if(validatedEvalValues[i]==="TA"){
						msg = msg+"\n"+this.oResourceBundle.getText("TARGET");
					}
					if(validatedEvalValues[i]==="CH"){
						if(this.getView().getModel().getData().GOAL_TYPE === "RA"){
							msg = msg+"\n"+this.oResourceBundle.getText("CRITICAL_HIGH");
						}
						else{
							msg = msg+"\n"+this.oResourceBundle.getText("CRITICAL");
						}
					}
					if(validatedEvalValues[i]==="WH"){
						if(this.getView().getModel().getData().GOAL_TYPE === "RA"){
							msg = msg+"\n"+this.oResourceBundle.getText("WARNING_HIGH");
						}
						else{
							msg = msg+"\n"+this.oResourceBundle.getText("WARNING");
						}
					}
				}
				sap.suite.smartbusiness.utils.showErrorMessage(msg);
				return;
			}
		}

		if(!that.indicatorContext){
			that.indicatorContext = "INDICATORS_MODELER(ID='"+formData.INDICATOR+"',IS_ACTIVE=1)"
		}

		that.busyDialog.open();
		that.evalParamPayload = {};
		that.evalParamPayload = that.getEvalParamPayload(that.getView().getModel().getData());
		that.saveFilters(that.getView());
		that.saveValues(that.getView());
		that.saveTags(that.getView());
		that.saveProperties(that.getView());
		that.saveAdditionalLanguages(that.getView());
		if(!oEvent){
			oEvent = "create";
		}

		if(formData.mode === "create"){
			that.createBatch = that.createBatchForEvalCreateMode(oEvent);
		}
		else if(formData.mode === "edit"){
			if(that.evalDetails.IS_ACTIVE === 0 && formData.IS_ACTIVE === 0){
				that.createBatchPayload(oEvent);
			}
			else if(that.evalDetails.IS_ACTIVE === 1 && formData.IS_ACTIVE === 0){
				that.getView().getModel().setProperty("/mode","create");
				that.createBatch = that.createBatchForEvalCreateMode(oEvent); 
			}
		}

	},
	saveAndCreateNew : function(oEvent) {
		this.saveAndExit("createNew");
	},
	saveAndActivate : function(){
		var that = this;
		that.checkForActivation("saveActivate");
	},
	checkForActivation : function(param){
		var that = this;
		var formData = that.getView().getModel().getData();
		if (!formData.TITLE || formData.TITLE === "") {
			that.byId("evalTitle").setValueState("Error");
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_EVALUATION_TITLE"));
			return;
		}

		var error = that.validateDimensionsAndInputParameters();
		if (error.error) {
			if (error.errorType === "mandatoryFieldEmpty") {
				sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_ALL_INPUT_PARAMETERS"));
				return;
			}
			if (error.errorType === "fieldEmpty") {
				sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_ALL_DIMENSION_VALUES"));
				return;
			}
			if(error.errorType === "invalidEntry"){
				sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_INVALID_TEXT_FOR",error.errorDimension.name));
				return;
			}
		}
		if(formData.ODATA_URL === ""){
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_ODATA_URL"));
			return;
		}
		if(formData.ODATA_ENTITYSET === ""){
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_ENTITY_SET"));
			return;
		}
		if(formData.COLUMN_NAME === ""){
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_MEASURE"));
			return;
		}
		
		if(that.getView().byId('targetThresholdPanel').getContent()[0].byId("additionalMeasures").getTokens().length) {
			var additionalMeasures = that.byId('targetThresholdPanel').getContent()[0].byId("additionalMeasures").getTokens();
			for(var i=0,l=additionalMeasures.length; i<l; i++) {
				if(additionalMeasures[i].getText() == formData.COLUMN_NAME) {
					that.byId('targetThresholdPanel').getContent()[0].byId("additionalMeasures").setValueState("Error");
					sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ADDI_MEASURE_HAS_MAIN_MEASURE"));
					return;
				}
			}
		}
		
		if(!formData.TARGET  || formData.TARGET == ""){
			var backDialog = new sap.m.Dialog({
				icon:"sap-icon://warning2",
				title:that.oResourceBundle.getText("WARNING"),
				state:"Warning",
				type:"Message",
				content:[new sap.m.Text({text:that.oResourceBundle.getText("ERROR_TARGET_NOT_ENTERED")})],
				beginButton: new sap.m.Button({
					text:that.oResourceBundle.getText("CONTINUE"),
					press: function(){
						backDialog.close();
						that.saveAndExit(param);
					}
				}),
				endButton: new sap.m.Button({
					text:that.oResourceBundle.getText("CANCEL"),
					press:function(){
						backDialog.close();
					}
				})                                                
			});
			backDialog.open();
		}
		else{
			that.saveAndExit(param);
		}
	},
	activateAndAddTiles:function(){
		var that = this;
		that.checkForActivation("activate");
	},
	cancel : function() {
		this.navigateBack();
	},

	deleteDraft:function(){
		var that = this;
		var obj = {};
		obj.ID = that.getView().getModel().getData().ID;
		obj.IS_ACTIVE = that.getView().getModel().getData().IS_ACTIVE;
		
		var url = sap.suite.smartbusiness.utils.serviceUrl("EVALUATION_SERVICE_URI");
		
		sap.suite.smartbusiness.utils.remove(url,obj,function(data){
			sap.m.MessageToast.show(that.oResourceBundle.getText("SUCCESS_DELETING_DRAFT"));
			window.location.hash = "FioriApplication-SBWorkspace?sap-system=HANA&/detail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)";
		},function(error){
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_DELETING_DRAFT"));
		});
		
	},
	validateEvalId : function() {
		var that = this;
		var evalIdField = this.getView().byId('evalId');

		var is_active = 0;
		var evalId = evalIdField.getValue();
		if (evalId) {
			if (!(/^[a-zA-Z0-9.]*$/.test(evalId))) {
				sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_VALID_EVAL_ID"));
				evalIdField.setValueState("Error");
				return true;
			} else {
				evalIdField.setValueState("None");
				this.oDataModel.read("/EVALUATIONS", null,"$filter=ID eq '"+evalId+"'", true,
						function(data) {
					if(data.results.length > 0){
						if (data.results[0].ID) {
							evalIdField.setValueState("Error");
							sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_EVAL_WITH_ID_EXISTS",evalId));
							return true;
						} else {
							evalIdField.setValueState("None");
						}
					}
					else{
						evalIdField.setValueState("None");
					}
				}, function() {
					evalIdField.setValueState("None");
				});
			}

		}
		return false;
	},

	validateEmailAddress : function() {
		var that = this;
		var evalOwnerEmailField = this.getView().byId('evalOwnerEmail');
		var evalOwnerEmailValue = evalOwnerEmailField.getValue();
		if (evalOwnerEmailValue) {
			if (!(/^\w+[\w-\.]*\@\w+((-\w+)|(\w*))\.[a-z]/.test(evalOwnerEmailValue))) {
				evalOwnerEmailField.setValueState("Error");
				sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_VALID_EVAL_E_MAIL"));
			} else {
				evalOwnerEmailField.setValueState("None");
			}
		} else {
			evalOwnerEmailField.setValueState("None");
		}
	},

	listAllKpis : function() {
		var that = this;
		var hanaViewValueHelpDialog = new sap.m.SelectDialog({
			title : that.oResourceBundle.getText("SELECT_KPI"),
			noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
			items : {
				path : "/INDICATORS_MODELER",
				template : new sap.m.ObjectListItem({
					title : "{TITLE}",
					number : "{EVALUATION_COUNT}",
					firstStatus : new sap.m.ObjectStatus({
						text : "Evaluations",
					}),
					attributes : [new sap.m.ObjectAttribute({
						text : "{ID}"
					})]

				})
			},
			confirm : function(oEvent) {
				that.busyDialog.open(); 
				that.indicatorContext = "INDICATORS_MODELER(ID='"+oEvent.getParameter("selectedItem").getBindingContext().getProperty("ID")+"',IS_ACTIVE=1)"
				that.getKpiDetails();

			},
			liveChange : function(oEvent) {
				var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
				var oFilterById = new sap.ui.model.Filter("tolower(ID)", sap.ui.model.FilterOperator.Contains,
						searchValue);
				var oFilterByTitle = new sap.ui.model.Filter("tolower(TITLE)", sap.ui.model.FilterOperator.Contains,
						searchValue);
				var oFilterISActive = new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ,1);
				var oBinding = oEvent.getSource().getBinding("items");
				var firstFilters = new sap.ui.model.Filter([oFilterById,oFilterByTitle], false);
				var secondFilters = new sap.ui.model.Filter([oFilterISActive], true);
				oBinding.filter(new sap.ui.model.Filter([firstFilters, secondFilters], true));
			}
		});
		hanaViewValueHelpDialog.setModel(that.oDataModel);
		var filters = [];
		filters.push(new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ, 1));
		hanaViewValueHelpDialog.getBinding("items").filter(new sap.ui.model.Filter(filters,true));
		hanaViewValueHelpDialog.open();
	},
	handleHanaViewValueHelp : function() {
		var that = this;
		var hanaViewValueHelpDialog = new sap.m.SelectDialog({
			title : that.oResourceBundle.getText("SELECT_VIEW"),
			noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
			items : {
				path : "/HANA_VIEWS",
				template : new sap.m.StandardListItem({
					title : {
						parts : [{
							path : "OBJECT",
							type : new sap.ui.model.type.String()
						}, {
							path : "PACKAGE",
							type : new sap.ui.model.type.String()
						}, {
							path : "SUFFIX",
							type : new sap.ui.model.type.String()
						}],
						formatter : function(o, p, s) {
							if (s.indexOf("view") != -1)
								return p + "/" + o;
							else
								return p + "::" + o;
						}
					},
					description : "{SUFFIX}"
				})
			},
			confirm : function(oEvent) {
				that.getView().getModel().setProperty("/VIEW_NAME", oEvent.getParameter("selectedItem").getProperty("title"));
				that.getView().getModel().setProperty("/ODATA_URL","");
				that.getView().getModel().setProperty("/ODATA_ENTITYSET","");
				that.getView().getModel().setProperty("/COLUMN_NAME","");
				that.resetAdditionalMeasures();
				that.currentSelectedHanaViewObject = oEvent.getParameter("selectedItem").getBindingContext().getObject();
			},
			liveChange : function(oEvent) {
				var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
				var oFilterPackage = new sap.ui.model.Filter("tolower(PACKAGE)", sap.ui.model.FilterOperator.Contains,
						searchValue);
				var oFilterObject = new sap.ui.model.Filter("tolower(OBJECT)", sap.ui.model.FilterOperator.Contains,
						searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter(new sap.ui.model.Filter([oFilterPackage, oFilterObject], false));
			}

		});
		hanaViewValueHelpDialog.setModel(this.oDataModel);
		hanaViewValueHelpDialog.open();
	},
	hanaViewChange : function(value){
		var that = this;
		that.getView().getModel().setProperty("/ODATA_URL","");
		that.getView().getModel().setProperty("/ODATA_ENTITYSET","");
		that.getView().getModel().setProperty("/COLUMN_NAME","");
		that.resetAdditionalMeasures();
		that.resetDimensionsAndInputParameters();
	},
	handleOdataServiceValueHelp:function(){
		var that = this;
		if(!that.byId("viewInput").getValue()){
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_A_HANA_VIEW"));
		}
		else{
			var selectedHanaView = that.getView().getModel().getProperty("/VIEW_NAME");
			selectedHanaView = (selectedHanaView.indexOf("/") != -1 ? selectedHanaView.split("/") : selectedHanaView
					.split("::"));
			var hanaOdataServiceHelpDialog = new sap.m.SelectDialog({
				title : that.oResourceBundle.getText("SELECT_ODATA_SERVICE"),
				noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
				items : {
					path : "/ODATA_FOR_ENTITY(P_PACKAGE='" + selectedHanaView[0] + "',P_OBJECT='" + selectedHanaView[1] + "')/Results",
					template : new sap.m.StandardListItem({
						title : {
							parts : [{
								path : "PACKAGE",
								type : new sap.ui.model.type.String()
							}, {
								path : "OBJECT",
								type : new sap.ui.model.type.String()
							}],
							formatter : function(o, p, s) {
								o = o.replace(/\./g, '/');
								return "/" + o + "/" + p + ".xsodata";
							}
						},
					})
				},
				confirm : function(oEvent) {
					that.getView().getModel().setProperty("/ODATA_URL", oEvent.getParameter("selectedItem").getProperty("title"));
					that.getView().getModel().setProperty("/ODATA_ENTITYSET","");
					that.getView().getModel().setProperty("/COLUMN_NAME","");
					that.resetAdditionalMeasures();
					that.currentSelectedODataUrlObject = oEvent.getParameter("selectedItem").getBindingContext().getObject();
				},
				liveChange : function(oEvent) {
					var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
					var oFilterPackage = new sap.ui.model.Filter("tolower(PACKAGE)", sap.ui.model.FilterOperator.Contains,
							searchValue);
					var oFilterObject = new sap.ui.model.Filter("tolower(OBJECT)", sap.ui.model.FilterOperator.Contains,
							searchValue);
					var oBinding = oEvent.getSource().getBinding("items");
					oBinding.filter(new sap.ui.model.Filter([oFilterPackage, oFilterObject], false));
				}

			});
			hanaOdataServiceHelpDialog.setModel(that.oDataModel);
			hanaOdataServiceHelpDialog.open();
		}

	},
	oDataUrlChange : function(value){
		var that = this;
		that.getView().getModel().setProperty("/ODATA_ENTITYSET","");
		that.getView().getModel().setProperty("/COLUMN_NAME","");
		that.resetAdditionalMeasures();
		that.resetDimensionsAndInputParameters();
	},
	handleEntitySetValueHelp : function(){
		var that = this;
		if(!that.byId("odataServiceInput").getValue()){
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_ODATA_URL"));
		}
		else{
			var that = this;
			that.oModelForEntity;
			var hanaEntitySetHelpDialog = new sap.m.SelectDialog({
				title : that.oResourceBundle.getText("SELECT_ENTITY_SET"),
				noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
				items : {
					path : "/entitySet",
					template : new sap.m.StandardListItem({
						title : {
							parts : [{
								path : "entityName",
								type : new sap.ui.model.type.String()
							}],
							formatter : function(o,s) {
								return o;
							}
						},
					})
				},
				confirm : function(oEvent) {
					that.getView().getModel().setProperty("/ODATA_ENTITYSET", oEvent.getParameter("selectedItem").getProperty("title"));
					that.resetDimensionsAndInputParameters();
					that.resetAdditionalMeasures();
					try {
						that.populateDimensionsAndInputParameters(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
					}
					catch(e) {
						sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"), that.oResourceBundle.getText("ERROR_ODATA_ANALYTICS"));
						that.resetDimensionsAndInputParameters();
					}

				},
				liveChange : function(oEvent) {
					var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
					var oFilterPackage = new sap.ui.model.Filter("tolower(entityName)", sap.ui.model.FilterOperator.Contains,
							searchValue);
					var oBinding = oEvent.getSource().getBinding("items");
					oBinding.filter(new sap.ui.model.Filter([oFilterPackage], false));
				}

			});

			try {
				if(that.getView().getModel().getData().VIEW_NAME)  {
					that.populateRelevantEntitySet(hanaEntitySetHelpDialog);
				}
				else {
					that.oModelForEntity = that.populateEntitySet(that.getView().byId("odataServiceInput").getValue());
					hanaEntitySetHelpDialog.setModel(that.oModelForEntity);
					hanaEntitySetHelpDialog.open();
				}
			} catch (err) {

			} 
		}
	},
	entitySetChange : function(value){
		var that = this;
		that.resetAdditionalMeasures();
		if(that.getView().getModel().getProperty("/ODATA_URL") && that.getView().getModel().getProperty("/ODATA_ENTITYSET")) {

			try {
				that.populateDimensionsAndInputParameters(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
			}
			catch(e) {
				sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"), that.oResourceBundle.getText("ERROR_ODATA_ANALYTICS"));
				that.resetDimensionsAndInputParameters();
			}
		}
		else {
			that.resetDimensionsAndInputParameters();
			that.getView().getModel().setProperty("/COLUMN_NAME","");
		}

	},
	handleMeasureValueHelp : function(){
		var that = this;
		var that = this;
		if(!that.byId("entitySetInput").getValue()){
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_ENTITY_SET"));
		}
		else{
			try {
				that.oModelForMeasure = that.populateMeasure(that.getView().getModel().getProperty("/ODATA_URL"), that
						.getView().getModel().getProperty("/ODATA_ENTITYSET"));

			} catch (err) {

			}
			var hanaMeasureHelpDialog = new sap.m.SelectDialog({
				title : that.oResourceBundle.getText("SELECT_MEASURE"),
				noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
				items : {
					path : "/measures",
					template : new sap.m.StandardListItem({
						title : {
							parts : [{
								path : "measureName",
								type : new sap.ui.model.type.String()
							}],
							formatter : function(o,s) {
								return o;
							}
						},
					})
				},
				confirm : function(oEvent) {
					that.getView().getModel().setProperty("/COLUMN_NAME", oEvent.getParameter("selectedItem").getProperty("title"));
				},
				liveChange : function(oEvent) {
					var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
					var oFilterPackage = new sap.ui.model.Filter("tolower(measureName)", sap.ui.model.FilterOperator.Contains,
							searchValue);
					var oBinding = oEvent.getSource().getBinding("items");
					oBinding.filter(new sap.ui.model.Filter([oFilterPackage], false));
				}

			});
			hanaMeasureHelpDialog.setModel(that.oModelForMeasure);
			hanaMeasureHelpDialog.open();

		}
	},

	measureChange : function(value){
		var that = this;
		try {
			that.oModelForMeasure = that.populateMeasure(that.getView().getModel().getProperty("/ODATA_URL"), that
					.getView().getModel().getProperty("/ODATA_ENTITYSET"));

		} catch (err) {

		}
	},

	handleChangeAdditionalInfo : function(oEvent) {
		var that = this;
		that.getView().getModel().setProperty("info", that.getView().byId("additionalInfoId"));

	},
	populateRelevantEntitySet : function(dialog) {
		var that = this;
		var modelData = this.getView().getModel().getData();

		var odata_package = modelData.ODATA_URL.substr(0,modelData.ODATA_URL.lastIndexOf("/"));
		odata_package = odata_package.replace(/\//g, '.').replace(".","");

		var odata_file = modelData.ODATA_URL.substr(modelData.ODATA_URL.lastIndexOf("/") + 1);
		odata_file = odata_file.split(".")[0];

		var entity = "/ODATA_FOR_ENTITY(P_PACKAGE='"+modelData.VIEW_NAME.split("/")[0] + "',P_OBJECT='" +modelData.VIEW_NAME.split("/")[1] + "')/Results?$filter=PACKAGE eq '" + odata_package + "' and OBJECT eq '" + odata_file + "'";

		this.oApplicationFacade.getODataModel().read(entity, null, null, false, function(data) {
			if(data.results && data.results.length) {
				var cdata = data.results[0].CDATA_STR;

				dialog.open();

				// handling comments in the xsodata file
				if(cdata) {
					//handling "//"
					var eachLine = cdata.split("\n");
					for(var i=0,l=eachLine.length; i<l; i++) {
						if(eachLine[i].indexOf("//") != -1) {
							eachLine[i] = eachLine[i].substr(0, eachLine[i].indexOf("//"));
						}
					}
					cdata = eachLine.join("\n");

					//handling "/* */"
					while(cdata.indexOf("/*") != -1) {
						var start = cdata.indexOf("/*");
						var end = cdata.indexOf("*/");
						end = (end == -1) ? cdata.length : (end-2);
						cdata = cdata.substr(0,start) + cdata.substr(end);
					}
				}

				var entityDataArray = [];

				var oModel = new sap.ui.model.json.JSONModel();

				var a = cdata.split(modelData.VIEW_NAME.split("/")[0] + '::' + modelData.VIEW_NAME.split("/")[1]);

				if(a.length == 1) {
					a = cdata.split(modelData.VIEW_NAME.split("/")[0] + '/' + modelData.VIEW_NAME.split("/")[1]);
				}

				if(a.length == 1) {
					sap.m.MessageToast.show("OData Document not compatible");
					oModel = that.populateEntitySet(that.getView().byId("odataServiceInput").getValue());
					dialog.setModel(oModel);
					return;
				}

				for(var i=1,l=a.length; i<l; i++) {
					var obj = {};
					obj.entityName = a[i].split('"')[2];
					entityDataArray.push(obj);
				}

				oModel.setData({
					entitySet : entityDataArray
				});
				dialog.setModel(oModel);
				return;
			}
		}, function(err) {

		});

	},
	//Odata For Analytics
	populateEntitySet : function(dataSource) {
		var oController = this;
		var oModel = new sap.ui.model.json.JSONModel();
		var resultEntity = [], entityDataArray = [], obj = {};
		var i;
		resultEntity = sap.suite.smartbusiness.odata.getAllEntitySet(dataSource);
		for (i = 0; i < resultEntity.length; i++) {
			obj = {};
			obj.entityName = resultEntity[i];
			entityDataArray.push(obj);
		}
		oModel.setData({
			entitySet : entityDataArray
		});
		return oModel;
	},

	validateQueryServiceURI : function(dataSource) {
		dataSource = jQuery.trim(dataSource);
		if (!jQuery.sap.startsWith(dataSource, "/")) {
			dataSource = "/" + dataSource;
		}
		if (jQuery.sap.endsWith(dataSource, "/")) {
			dataSource = dataSource.substring(0, dataSource.length - 1);
		}
		return dataSource;
	},

	populateMeasure : function(dataSource, entitySet) {
		dataSource = this.validateQueryServiceURI(dataSource) + "";
		entitySet = entitySet + "";
		var measures = [], measureDataArray = [], obj = {};
		var i;

		measures = sap.suite.smartbusiness.odata.getAllMeasures(dataSource, entitySet);

		for (i = 0; i < measures.length; i++) {
			obj = {};
			obj.measureName = measures[i];
			measureDataArray.push(obj);
		}
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData({
			measures : measureDataArray
		});
		return oModel;
	},

	additionalInformationForKpi : function(evt) {
		var that = this;
		that.dialogAdditionalInfo = new sap.m.Dialog({
			type : "Message",
			title : that.oResourceBundle.getText("ADDITIONAL_INFO_FROM_KPI"),
			content : [new sap.m.Label({text:{path:'/DATA_SPECIFICATION', formatter:function(value){
				if(that.getView().getModel().getData().DATA_SPECIFICATION){
					return that.getView().getModel().getData().DATA_SPECIFICATION;
				}
				else{
					return that.oResourceBundle.getText("ERROR_NO_DATA_TO_DISPLAY");
				}
			}}})],//.setText(oController.getView().getModel().getData().DATA_SPECIFICATION)],
			beginButton : new sap.m.Button({
				text : that.oResourceBundle.getText("CLOSE"),
				press : function(oEvent) {
					oEvent.getSource().getParent().close();
				}
			})
		});
		that.dialogAdditionalInfo.setModel(that.getView().getModel());
		that.dialogAdditionalInfo.open();
	},

	addNewProperty : function() {
		if (this.getView().byId("propertyName").getValue()) {
			this.getView().byId("propertyName").setValueState("None");
			if (this.getView().byId("propertyValue").getValue()) {
				this.getView().byId("propertyValue").setValueState("None");
				var propertyModel = this.getView().byId('propertyNameValueBox').getModel();
				propertyModel.getData().PROPERTIES = propertyModel.getData().PROPERTIES || [];
				for(var i=0; i<propertyModel.getData().PROPERTIES.length;i++){
					if((propertyModel.getData().PROPERTIES[i].NAME === this.getView().byId("propertyName").getValue()) && (propertyModel.getData().PROPERTIES[i].VALUE === this.getView().byId("propertyValue").getValue())){
						sap.suite.smartbusiness.utils.showErrorMessage(this.oResourceBundle.getText("ERROR_PROPERTY_VALUE_PAIR_EXISTS"));
						return;
					}
				}

				propertyModel.getData().PROPERTIES.push({
					NAME : this.getView().byId("propertyName").getValue(),
					VALUE : this.getView().byId("propertyValue").getValue()
				});
				propertyModel.updateBindings();
				this.getView().byId("propertyName").setValue("");
				this.getView().byId("propertyValue").setValue("");
			} else {
				this.getView().byId("propertyValue").setValueState("Error");
				sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_PROPERTY_VALUE"));
			}
		} else {
			this.getView().byId("propertyName").setValueState("Error");
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_PROPERTY_NAME"));
		}
	},

	removeProperty : function(evt) {
		var path = evt.getSource().getBindingContext().getPath();
		evt.getSource().getBindingContext().getModel().getData().PROPERTIES.splice(path.substring(path
				.lastIndexOf("/") + 1), 1);
		evt.getSource().getBindingContext().getModel().updateBindings();
	},

	populateDimensionsAndInputParameters : function(dataSource, entitySet) {
		var dimensions = [];
		var inputParameters = [];
		this.oData4SAPAnalyticsModel = new sap.suite.smartbusiness.odata4analytics.Model(
				new sap.suite.smartbusiness.odata4analytics.Model.ReferenceByURI(dataSource), null);
		this.queryResultObj = this.oData4SAPAnalyticsModel.findQueryResultByName(entitySet);
		var queryResultObjDimensions = this.queryResultObj.getAllDimensions();
		for (key in queryResultObjDimensions) {
			var name = queryResultObjDimensions[key].getName();
			var propertyType = queryResultObjDimensions[key].getKeyProperty().type;
			var newObj = {
					name : name,
					propertyType : propertyType
			};
			dimensions.push(newObj);
		}
		var data = this.oModelForDimensions.getData();
		data.dimensions = dimensions;
		data.dataSource = dataSource;
		data.entitySet = entitySet;
		if(data.selectedDimensions)
		{      
			for(var key in data.selectedDimensions)
			{
				data.selectedDimensions[key].propertyType = this.queryResultObj.findDimensionByName(data.selectedDimensions[key].name)?
						this.queryResultObj.findDimensionByName(data.selectedDimensions[key].name).getKeyProperty().type:"";  
						if(data.selectedDimensions[key].propertyType == "Edm.DateTime")
						{    
							var valueArray = data.selectedDimensions[key].value_1.split(",");
							for( i in valueArray)
							{      if( valueArray[i] != "")
							{
								var dateObj = new Date(valueArray[i]);
								var month = dateObj.getMonth()+1;
								month = /^\d$/.test(month) ? "0"+ month : month;
								var date = dateObj.getDate();
								date = /^\d$/.test(date) ? "0"+ date : date;
								var hours = dateObj.getHours();
								hours = /^\d$/.test(hours) ? "0"+ hours : hours;
								var minutes = dateObj.getMinutes();
								minutes = /^\d$/.test(minutes) ? "0"+ minutes : minutes;
								var seconds = dateObj.getSeconds();
								seconds = /^\d$/.test(seconds) ? "0"+ seconds : seconds;
								valueArray[i] = dateObj.getFullYear()+"-"+ month +"-"+date+" "+hours+":"+minutes+":"+seconds+"."+dateObj.getMilliseconds();
							}
							}
							data.selectedDimensions[key].value_1 = valueArray.join(",");
							valueArray = null;
							valueArray = data.selectedDimensions[key].value_2.split(",");
							for(var i in valueArray)
							{
								if(valueArray[i] != "")
								{
									var dateObj = new Date(data.selectedDimensions[key].value_2);
									var month = dateObj.getMonth()+1;
									month = /^\d$/.test(month) ? "0"+ month : month;
									var date = dateObj.getDate();
									date = /^\d$/.test(date) ? "0"+ date : date;
									var hours = dateObj.getHours();
									hours = /^\d$/.test(hours) ? "0"+ hours : hours;
									var minutes = dateObj.getMinutes();
									minutes = /^\d$/.test(minutes) ? "0"+ minutes : minutes;
									var seconds = dateObj.getSeconds();
									seconds = /^\d$/.test(seconds) ? "0"+ seconds : seconds;
									valueArray[i] = dateObj.getFullYear()+"-"+ month +"-"+date+" "+hours+":"+minutes+":"+seconds+"."+dateObj.getMilliseconds();
								}
							}
							data.selectedDimensions[key].value_2 = valueArray.join(",");
							this.dimensionValue[data.selectedDimensions[key].name] = this.dimensionValue[data.selectedDimensions[key].name] ? this.dimensionValue[data.selectedDimensions[key].name] : {};
							this.dimensionValue[data.selectedDimensions[key].name]["value_1"] = data.selectedDimensions[key].value_1;
							this.dimensionValue[data.selectedDimensions[key].name]["value_2"] = data.selectedDimensions[key].value_2;                                      
						}
			}
		}
		this.oModelForDimensions.setData(data);
		var inputParametersObj = this.queryResultObj.getParameterization();
		if (inputParametersObj)
		{                              
			if(this.oModelForInputParameters.getData().inputParameters)
			{   
				var inputParameters = this.oModelForInputParameters.getData().inputParameters;
				for(var key in inputParameters)
				{
					inputParameters[key].propertyType = inputParametersObj.findParameterByName(inputParameters[key].name).getProperty().type;
					if(inputParameters[key].propertyType == "Edm.DateTime")
					{
						var valueArray = inputParameters[key].value_1.split(",");
						for( i in valueArray)
						{        
							if( valueArray[i] != "")
							{
								var dateObj = new Date(valueArray[i]);
								var month = dateObj.getMonth()+1;
								month = /^\d$/.test(month) ? "0"+ month : month;
								var date = dateObj.getDate();
								date = /^\d$/.test(date) ? "0"+ date : date;
								var hours = dateObj.getHours();
								hours = /^\d$/.test(hours) ? "0"+ hours : hours;
								var minutes = dateObj.getMinutes();
								minutes = /^\d$/.test(minutes) ? "0"+ minutes : minutes;
								var seconds = dateObj.getSeconds();
								seconds = /^\d$/.test(seconds) ? "0"+ seconds : seconds;
								valueArray[i] = dateObj.getFullYear()+"-"+ month +"-"+date+" "+hours+":"+minutes+":"+seconds+"."+dateObj.getMilliseconds();
							}
						}
						inputParameters[key].value_1 = valueArray.join(",");
						valueArray = null;
						valueArray = inputParameters[key].value_2.split(",");
						for(var i in valueArray)
						{
							if(valueArray[i] != "")
							{
								var dateObj = new Date(data.selectedDimensions[key].value_2);
								var month = dateObj.getMonth()+1;
								month = /^\d$/.test(month) ? "0"+ month : month;
								var date = dateObj.getDate();
								date = /^\d$/.test(date) ? "0"+ date : date;
								var hours = dateObj.getHours();
								hours = /^\d$/.test(hours) ? "0"+ hours : hours;
								var minutes = dateObj.getMinutes();
								minutes = /^\d$/.test(minutes) ? "0"+ minutes : minutes;
								var seconds = dateObj.getSeconds();
								seconds = /^\d$/.test(seconds) ? "0"+ seconds : seconds;
								valueArray[i] = dateObj.getFullYear()+"-"+ month +"-"+date+" "+hours+":"+minutes+":"+seconds+"."+dateObj.getMilliseconds();
							}
						}
						inputParameters[key].value_2 = valueArray.join(",");
					}
				}                                       
			}
			else
			{   
				var inputParametersNames = inputParametersObj.getAllParameters();
				for ( var key in inputParametersNames) {
					var name = inputParametersNames[key].getName();
					var propertyType = inputParametersNames[key].getProperty().type;
					var optional = inputParametersNames[key].isOptional();
					var newObj = {
							name : name,
							propertyType : propertyType,
							operator : "EQ",
							value_1 : "",
							value_2 : ""
					};
					inputParameters.push(newObj);
				}
			}
			if (inputParameters.length > 0)
				this.byId("inputParameterLayoutHeaders").setVisible(true);
			data = this.oModelForInputParameters.getData();
			data.inputParameters = inputParameters;
			this.oModelForInputParameters.setData(data);
		}              

	},

	setInputParameterAndFilterLayout : function() {
		var that = this;
		this.dimensionValueHelpDialogs = {};
		this.dimensionValue = {};
		this.byId("inputParameterLayoutHeaders").setVisible(false);
		this.byId("inputParameterBaseLayout").setModel(this.oModelForInputParameters);
		this.byId("inputParameterBaseLayout").bindAggregation("items", "/inputParameters", function(sId, oContext) {
			var inputParameterOperator = new sap.m.Select({
				width : "100%",
				customData : [{
					key : "valueType",
					value : "value_1"
				}],
				items : [new sap.ui.core.Item({
					text : that.oResourceBundle.getText("EQUAL_TO"),
					key : "EQ"
				})],
				selectedKey : "{operator}",
				layoutData : new sap.ui.layout.GridData({
					span : "L4 M4"
				})
			});
			var inputParameterValue = new sap.m.Input({
				value : "{value_1}",
				customData : [{
					key : "valueType",
					value : "value_1"
				}],
				//showValueHelp : true,
				valueHelpRequest : jQuery.proxy(that.openInputParameterValueHelpDialog,that),
				change : jQuery.proxy(that.handleDimensionValueChange, that),
				valueState : {
					path : "error_1",
					formatter : function(error) {
						if (error)
							return "Error";
						else
							return "None";
					}
				},
				layoutData : new sap.ui.layout.GridData({
					span : "L4 M4"
				})
			});
			var inputParameterGrid = new sap.ui.layout.Grid({
				defaultSpan : "L9 M9",
				content : [new sap.m.Input({
					value : "{name}",
					editable:false,
					layoutData : new sap.ui.layout.GridData({
						span : "L4 M4"
					})
				}), inputParameterOperator, inputParameterValue]
			});
			return inputParameterGrid;
		});
		//Dimensions Layout
		this.byId("dimensionLayoutHeaders").setVisible(false);
		this.byId("baseDimensionLayout").setModel(this.oModelForDimensions);
		this.byId("baseDimensionLayout").bindAggregation("items", "/selectedDimensions", function(sId, oContext) {
			var dimensionOperator = new sap.m.Select({
				width : "100%",
				customData : [{
					key : "valueType",
					value : "value_1"
				}],
				items : [new sap.ui.core.Item({
					text : that.oResourceBundle.getText("EQUAL_TO"),
					key : "EQ"
				}), new sap.ui.core.Item({
					text : that.oResourceBundle.getText("GREATER_THAN"),
					key : "GT"
				}), new sap.ui.core.Item({
					text : that.oResourceBundle.getText("LESS_THAN"),
					key : "LT"
				}), new sap.ui.core.Item({
					text : that.oResourceBundle.getText("NOT_EQUAL_TO"),
					key : "NE"
				}), new sap.ui.core.Item({
					text : that.oResourceBundle.getText("BETWEEN"),
					key : "BT"
				})],
				selectedKey : "{operator}",
				change : jQuery.proxy(that.handleOperatorChange, that),
				layoutData : new sap.ui.layout.GridData({
					span : "L3 M3"
				})
			});
			var dimensionValue = new sap.m.Input({
				value : "{value_1}",
				customData : [{
					key : "valueType",
					value : "value_1"
				}],
				showValueHelp : true,
				valueState : {
					path : "error_1",
					formatter : function(error) {
						if (error)
							return "Error";
						else
							return "None";
					}
				},
				valueHelpRequest : jQuery.proxy(that.handleDimensionValueHelp, that),
				change : jQuery.proxy(that.handleDimensionValueChange, that),
				layoutData : new sap.ui.layout.GridData({
					span : "L4 M4"
				})
			});
			var dimensionValueTo = new sap.m.Input({
				value : "{value_2}",
				customData : [{
					key : "valueType",
					value : "value_2"
				}],
				showValueHelp : true,
				visible : {
					path : "operator",
					formatter : function(operator) {
						return (operator === "BT") ? true : false;
					}
				},
				valueState : {
					path : "error_2",
					formatter : function(error) {
						if (error)
							return "Error";
						else
							return "None";
					}
				},
				valueHelpRequest : jQuery.proxy(that.handleDimensionValueToHelp, that),
				change : jQuery.proxy(that.handleDimensionValueChange, that),
				layoutData : new sap.ui.layout.GridData({
					span : "L4 M4"
				})
			});
			var dimensionValueToLabel = new sap.m.Label({
				text : "To",
				visible : {
					path : "operator",
					formatter : function(operator) {
						return (operator === "BT") ? true : false;
					}
				}
			});
			var dimensionValueLayout = new sap.m.VBox({
				items : [dimensionValue, dimensionValueToLabel, dimensionValueTo],
				layoutData : new sap.ui.layout.GridData({
					span : "L4 M4"
				})
			});
			var dimensionDel = new sap.m.Button({
				icon : "sap-icon://sys-cancel",
				type : "Transparent",
				layoutData : new sap.ui.layout.GridData({
					span : "L2 M2 S2"
				}),
				press : function(evt) {
					var path = evt.getSource().getBindingContext().getPath();
					if(that.dimensionValue){
						if(that.dimensionValue[evt.getSource().getBindingContext().getObject().name]){
							delete that.dimensionValue[evt.getSource().getBindingContext().getObject().name]
						}
					}
					evt.getSource().getBindingContext().getModel().getData().selectedDimensions.splice(path.substring(path
							.lastIndexOf("/") + 1), 1);
					evt.getSource().getBindingContext().getModel().updateBindings();
					
					if(evt.getSource().getBindingContext().getModel().getData().selectedDimensions.length == 0){
						that.byId("dimensionLayoutHeaders").setVisible(false);
					}
				}
			});
			var dimensionGrid = new sap.ui.layout.Grid({
				defaultSpan : "L12 M12",
				content : [new sap.m.Input({
					value : "{name}",
					editable:false,
					layoutData : new sap.ui.layout.GridData({
						span : "L3 M3"
					})
				}), dimensionOperator, dimensionValueLayout,dimensionDel]
			});
			return dimensionGrid;
		});
	},

	openInputParameterValueHelpDialog : function(name) {
		var that = this;
		var inputParameterValueHelpDialog = new sap.m.SelectDialog({
			title : that.oResourceBundle.getText("SELECT_VALUES"),
			multiSelect : true,
			rememberSelections : true,
			items : {
				path : "/results",
				template : new sap.m.StandardListItem({
					title : "{" + name + "}",
				})
			},
			confirm : function(oEvent) {
			},
			liveChange : function(oEvent) {
			}
		});
		inputParameterValueHelpDialog.setGrowingThreshold(100);
		inputParameterValueHelpDialog.open();
	},

	openDimensionDialog : function() {
		var that = this;
		if (!this.dimensionDialog) {
			var oSorter1 = new sap.ui.model.Sorter("name",false);
			this.dimensionDialog = new sap.m.SelectDialog({
				title : that.oResourceBundle.getText("SELECT_DIMENSIONS"),
				multiSelect : true,
				items : {
					path : "/dimensions",
					sorter : oSorter1,
					template : new sap.m.StandardListItem({title : "{name}"})
				},
				confirm : function(oEvent) {
					var selectedDimensions = that.oModelForDimensions.getData().selectedDimensions||[];
					var selectedItems = oEvent.getParameter("selectedItems");
					var aContexts = [];
					for(var key in selectedItems){
						aContexts[key] = selectedItems[key].getBindingContext();
					}
					for ( var key in aContexts) {
						var selectedObject = that._cloneObj(aContexts[key].getObject());
						selectedObject.value_1 = "";
						selectedObject.value_2 = "";
						selectedObject.operator = "EQ";
						selectedDimensions.push(selectedObject);
					}
					if (aContexts.length > 0)
						that.byId("dimensionLayoutHeaders").setVisible(true);
					else
						that.byId("dimensionLayoutHeaders").setVisible(false);
					that.oModelForDimensions.setProperty("/selectedDimensions", selectedDimensions);
				},
				liveChange : function(oEvent) {
					var searchValue = oEvent.getParameter("value");
					var oFilter = new sap.ui.model.Filter("name", sap.ui.model.FilterOperator.Contains, searchValue);
					var oBinding = oEvent.getSource().getBinding("items");
					oBinding.filter([oFilter]);
				}
			});
			this.dimensionDialog.setGrowingThreshold(100);
			this.dimensionDialog.setModel(this.oModelForDimensions);

			/*if(that.getView().getModel().getData().mode == "edit" || that.getView().getModel().getData().mode == "duplicate")
			{
				var dialogItems = this.dimensionDialog.getItems();
				var selectedDimensions = this.oModelForDimensions.getData().selectedDimensions;
				for(var key in dialogItems)
				{      for(var dimensionKey in selectedDimensions)
				{
					if(dialogItems[key].getTitle() == selectedDimensions[dimensionKey].name)
						dialogItems[key].setSelected(true);
				}
				}
			}*/
		}
		this.dimensionDialog.open();
	},


	handleDimensionValueHelp : function(oEvent) {
		this.openDimensionValueHelpDialog(oEvent, "value_1");
	},

	handleDimensionValueToHelp : function(oEvent) {
		this.openDimensionValueHelpDialog(oEvent, "value_2");
	},

	openDimensionValueHelpDialog : function(oEvent, valueType) {
		var that = this;
		var parentInputField = oEvent.getSource();
		var baseModel = this.getView().getModel();
		var dimensionValuesModel = new sap.ui.model.json.JSONModel();
		var inputParameterArray = [];
		this.dimensionContext = oEvent.getSource().getBindingContext();
		var dimensionName = oEvent.getSource().getBindingContext().getProperty("name");
		var dimensionOperator = oEvent.getSource().getBindingContext().getProperty("operator")
		var dimensionType = oEvent.getSource().getBindingContext().getProperty("propertyType")
		var inputParameterData = this.oModelForInputParameters.getData().inputParameters;
		for ( var key in inputParameterData) {
			inputParameterArray.push({ 
				OPERATOR: inputParameterData[key].operator, 
				NAME: inputParameterData[key].name, 
				VALUE_1: inputParameterData[key].value_1,
				VALUE_2: inputParameterData[key].value_2, 
				TYPE: "PA" // TYPE { FI, PA} 
			}); 
		}
		var queryService = sap.suite.smartbusiness.odata.getUri({
			serviceUri : baseModel.getProperty("/ODATA_URL"),
			entitySet : baseModel.getProperty("/ODATA_ENTITYSET"),
			filter : inputParameterArray,
			dimension : dimensionName
		});
		queryService.model.read(queryService.uri, null, null, false, function(data) {
			if (that.dimensionValue[dimensionName])
			{
				that.dimensionValue[dimensionName][valueType] = that.dimensionValue[dimensionName][valueType]
				? that.dimensionValue[dimensionName][valueType] : "";
				var dimensionValueArray = that.dimensionValue[dimensionName][valueType] === ""
					? null : that.dimensionValue[dimensionName][valueType].split(",");
				for (key in dimensionValueArray)
				{      var userInputData = true;
				for ( var i in data.results)
				{   if(dimensionType == "Edm.DateTime")
				{      var date = new Date(dimensionValueArray[key]).toJSON();
				var dateFromService = new Date(data.results[i][dimensionName]).toJSON();
				if(date == dateFromService)
				{      userInputData = false;
				break;                                                                     
				}
				}
				else if (dimensionValueArray[key] === data.results[i][dimensionName])
				{  userInputData = false;
				break;
				}
				}
				if (userInputData)
				{
					var userInputValueObject = {};
					userInputValueObject[dimensionName] = dimensionValueArray[key];
					userInputValueObject.userInput = true;
					userInputValueObject.selected = true;
					data.results.push(userInputValueObject);
				}
				else
					data.results[i].selected = true;
				}
			}
			dimensionValuesModel.setData(data);
		}, function(error) {

		});
		
		var oSorter1 = new sap.ui.model.Sorter(dimensionName,false,function(context) {
			
			if (context.getProperty("userInput") === true)
				return {
				key : "USER_VALUES",
				text : that.oResourceBundle.getText("VALUES_ENTERED_BY_USER")
			};
			else
				return {
				key : "SERVICE_VALUES",
				text : that.oResourceBundle.getText("VALUES_FETCHED_FROM_SERVICE")
			};
		});
		this.dimensionValueHelpDialogs = new sap.m.SelectDialog(
				{
					title : that.oResourceBundle.getText("SELECT_VALUES"),
					multiSelect : true,
					rememberSelections : true,
					items : {
						path : "/results",
						sorter : oSorter1,
						template : new sap.m.StandardListItem({
							title : "{"+dimensionName+"}",                                                                   
							selected : "{selected}"
						})
					},
					confirm : function(oEvent) {
						var selectedDimensionValues = "";
						var aContexts = oEvent.getParameter("selectedContexts");
						for ( var key in aContexts)
						{      
							if(dimensionType == "Edm.DateTime")
							{   var dateObj = new Date(aContexts[key].getProperty(that.dimensionContext.getProperty("name")));
							var month = dateObj.getMonth()+1;
							month = /^\d$/.test(month) ? "0"+ month : month;
							var date = dateObj.getDate();
							date = /^\d$/.test(date) ? "0"+ date : date;
							var hours = dateObj.getHours();
							hours = /^\d$/.test(hours) ? "0"+ hours : hours;
							var minutes = dateObj.getMinutes();
							minutes = /^\d$/.test(minutes) ? "0"+ minutes : minutes;
							var seconds = dateObj.getSeconds();
							seconds = /^\d$/.test(seconds) ? "0"+ seconds : seconds;
							selectedDimensionValues = selectedDimensionValues + dateObj.getFullYear()+"-"+ month +"-"+date+" "+hours+":"+minutes+":"+seconds+"."+dateObj.getMilliseconds()+",";     
							}
							else
								selectedDimensionValues = selectedDimensionValues + aContexts[key].getProperty(that.dimensionContext.getProperty("name")) + ",";
						}
						selectedDimensionValues = selectedDimensionValues.substring(0, selectedDimensionValues.length - 1);
						that.oModelForDimensions.setProperty(that.dimensionContext.getPath() + "/" + valueType,selectedDimensionValues);
						parentInputField.fireChange({
							value : selectedDimensionValues
						});
						that.dimensionValue[dimensionName] = that.dimensionValue[dimensionName] ? that.dimensionValue[dimensionName] : {};
						that.dimensionValue[dimensionName][valueType] = selectedDimensionValues;
					},
					liveChange : function(oEvent) {
						var searchValue = oEvent.getParameter("value");
						var oFilter = new sap.ui.model.Filter(dimensionName, sap.ui.model.FilterOperator.Contains,
								searchValue);
						var oBinding = oEvent.getSource().getBinding("items");
						oBinding.filter([oFilter]);
					}
				});
		this.dimensionValueHelpDialogs.setGrowingThreshold(100);
		this.dimensionValueHelpDialogs.setModel(dimensionValuesModel);
		
		var dimensions = this.oModelForDimensions.getData().selectedDimensions;
		var items = this.dimensionValueHelpDialogs.getItems();
		for(var i=0;i<dimensions.length;i++){
			if((dimensionName === dimensions[i].name) &&(dimensionOperator === dimensions[i].operator)){
				var value;
				if(dimensions[i].operator === "BT"){
					if(valueType === "value_1")
						value = dimensions[i].value_1.split(",");
					else
						value = dimensions[i].value_2.split(",");
				}
				else{
					value = dimensions[i].value_1.split(",");
				}
				
				for(var j=0;j<value.length;j++){
					for(var k=1;k<items.length;k++){
						if(value[j] === items[k].getTitle()){
							items[k].setSelected(true);
						}
					}
				}
			}
		}
		
		this.dimensionValueHelpDialogs.open();
		for(var i=1;i<items.length;i++){
			if(!items[i].getSelected()){
				this.dimensionValueHelpDialogs.getItems()[i].setSelected(true);
				this.dimensionValueHelpDialogs.getItems()[i].setSelected(false);
			}
		}
	},

	handleDimensionValueChange : function(oEvent) {
		this.validateValue(oEvent, "dimensionValue");
		var valueType = oEvent.getSource().getCustomData()[0].getValue(); //value_1 or value_2
		var dimensionName = oEvent.getSource().getBindingContext().getProperty("name");
		if (!this.dimensionValue[dimensionName])
			this.dimensionValue[dimensionName] = {};
		this.dimensionValue[dimensionName][valueType] = oEvent.getParameter("value");
	},

	validateValue : function(oEvent, sourceType) {
		var that = this,result;
		var dimensionName = oEvent.getSource().getBindingContext().getProperty("name");
		var valueType = oEvent.getSource().getCustomData()[0].getValue();
		var valueArray = (sourceType === "dimensionValue") ? oEvent.getParameter("value").split(",") : oEvent
				.getSource().getBindingContext().getProperty("value_1");

		//Checking if multiple values for BT
		var operator = oEvent.getSource().getBindingContext().getProperty("operator");
		if (operator === "BT") {
			if (valueArray.length > 1) {
				result = false;
				sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_MULTIPLE_VALUES_FOR_BETWEEN",dimensionName));
				var sPath = valueType === "value_1"
					? oEvent.getSource().getBindingContext().getPath() + "/error_1"
							: oEvent.getSource().getBindingContext().getPath() + "/error_2";
					oEvent.getSource().getModel().setProperty(sPath, true);
					return;
			} else {
				var sPath = valueType === "value_1"
					? oEvent.getSource().getBindingContext().getPath() + "/error_1"
							: oEvent.getSource().getBindingContext().getPath() + "/error_2";
					oEvent.getSource().getModel().setProperty(sPath, false);
			}
		}

		//Checking dimension value types are correct
		var expectedValueType = oEvent.getSource().getBindingContext().getProperty("propertyType");
		var errorMsg,pattern;
		for ( var key in valueArray) {
			result = true;
			var scriptTagPattern = /<(script)(.*)\/?>/i;
			var jsFunctionDefinitionPattern = /function\s*[^\(]*\(\s*([^\)]*)\)/;
			var jsFunctionCallPattern = /[^\(]*\(\s*([^\)]*)\)\s*{/;
			if (scriptTagPattern.test(valueArray[key]) || jsFunctionDefinitionPattern.test(valueArray[key])
					|| jsFunctionCallPattern.test(valueArray[key])) {
				result = false;
				errorMsg = that.oResourceBundle.getText("ERROR_INVALID_TEXT_FOR",dimensionName);
			}
			if(expectedValueType == "Edm.Int32" || expectedValueType == "Edm.Int16" || expectedValueType == "Edm.Int64")
			{
				pattern = /^[-+]?\d+$/;
				result = pattern.test(valueArray[key]) ? true : false;
				errorMsg = that.oResourceBundle.getText("ERROR_INVALID_ENTRY_ENTER_INTEGER",dimensionName);
			} 
			else if(expectedValueType == "Edm.Decimal")
			{
				pattern = /^[-+]?\d+(\.\d+)?$/;
				result = pattern.test(valueArray[key])?true:false;
				errorMsg = that.oResourceBundle.getText("ERROR_INVALID_ENTRY_ENTER_DECIMAL",dimensionName);
			}
			else if(expectedValueType == "Edm.DateTime")
			{
				pattern = /^[1-9][0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(\s([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-9]|[0-5][0-9])[.][0-9]+)?$/;
				result = pattern.test(valueArray[key])?true:false;
				errorMsg = that.oResourceBundle.getText("ERROR_INVALID_ENTRY_ENTER_DATE",dimensionName);
			}

			if (!result) {
				sap.suite.smartbusiness.utils.showErrorMessage(errorMsg);
				var sPath = valueType === "value_1"
					? oEvent.getSource().getBindingContext().getPath() + "/error_1"
							: oEvent.getSource().getBindingContext().getPath() + "/error_2";
					oEvent.getSource().getModel().setProperty(sPath, true);
					return;
			} else {
				var sPath = valueType === "value_1"
					? oEvent.getSource().getBindingContext().getPath() + "/error_1"
							: oEvent.getSource().getBindingContext().getPath() + "/error_2";
					oEvent.getSource().getModel().setProperty(sPath, false);
			}
		}
	},

	handleOperatorChange : function(oEvent) {
		var context = oEvent.getSource().getBindingContext();
		context.getObject().value_1 = "";
		if(this.dimensionValue){
			if(this.dimensionValue[context.getObject().name]){
				this.dimensionValue[context.getObject().name].value_1="";
			}
		}
		
		if (context.getProperty("operator") === "BT") {
			context.getObject().value_2 = "";
			if(this.dimensionValue){
				if(this.dimensionValue[context.getObject().name]){
					this.dimensionValue[context.getObject().name].value_2="";
				}
			}
		} 
		context.getModel().updateBindings();
	},

	validateDimensionsAndInputParameters : function() {
		var inputParameters = this.oModelForInputParameters.getData().inputParameters;
		var dimensions = this.oModelForDimensions.getData().selectedDimensions;
		var error = false;
		var errorType = "";
		var errorDimension = "";
		for ( var key in inputParameters) {
			if (inputParameters[key].error_1 === true || inputParameters[key].error_2 === true)
				error = true;
			if (inputParameters[key].value_1 === "") {
				error = true;
				errorType = "mandatoryFieldEmpty";
				inputParameters[key].error_1 = true;
			}
		}
		this.oModelForInputParameters.updateBindings();
		for ( var key in dimensions) {
			if (dimensions[key].error_1 === true || dimensions[key].error_2 === true){
				error = true;
				errorType = "invalidEntry";
				errorDimension = dimensions[key];
			}
			if (dimensions[key].value_1 === "") {
				error = true;
				errorType = "fieldEmpty";
				dimensions[key].error_1 = true;
			}
			if (dimensions[key].operator === "BT" && dimensions[key].value_2 === "") {
				error = true;
				errorType = "fieldEmpty";
				dimensions[key].error_2 = true;
			}
		}
		this.oModelForDimensions.updateBindings();
		return {
			error : error,
			errorType : errorType,
			errorDimension : errorDimension
		};
	},

	resetDimensionsAndInputParameters : function() {
		this.oModelForDimensions.setData({});
		this.oModelForInputParameters.setData({});
		this.dimensionDialog = null;
		this.dimensionValueHelpDialogs = {};
		this.dimensionValue = {};
		this.byId("inputParameterLayoutHeaders").setVisible(false);
		this.byId("dimensionLayoutHeaders").setVisible(false);
	},

	createTargetThresholdLayout : function() {
		var that = this;
		var trend = this.getView().getModel().getData().TREND;
		var reference_value = this.getView().getModel().getData().REFERENCE_VALUE;
		if (this.getView().getModel().getData().INDICATOR) {
			this.getView().byId('targetThresholdPanel').setVisible(true);
			this.getView().byId('targetThresholdPanel').getContent()[0].destroy();
			if(this.getView().getModel().getData().mode !== "edit"){
				delete this.getView().getModel().getData().CRITICALHIGH;
				delete this.getView().getModel().getData().WARNINGHIGH;
				delete this.getView().getModel().getData().TARGET;
				delete this.getView().getModel().getData().WARNINGLOW;
				delete this.getView().getModel().getData().CRITICALLOW;
				delete this.getView().getModel().getData().TREND;
				delete this.getView().getModel().getData().REFERENCE_VALUE;
			}
			that.getView().byId('targetThresholdPanel').addContent(new sap.ui.core.mvc.XMLView({
				viewName : "sap.suite.ui.smartbusiness.designtime.evaluation.view.createEvalTargetThresholdTrendInput",
				viewData : {controller:that}
			}));
		}
		if (!this.getView().getModel().getData().INDICATOR) {
			this.getView().byId('targetThresholdPanel').setVisible(false);
		}
		this.getView().getModel().setProperty("TREND",trend);
		this.getView().getModel().setProperty("REFERENCE_VALUE",reference_value);

	},

	addAdditionalLanguageDialog : function(){
		var that=this;
		this.additionalLanguageListModel = new sap.ui.model.json.JSONModel();
		this.additionalLanguageListModelData = jQuery.extend([], that.getView().getModel().getData().ADDITIONAL_LANGUAGE_ARRAY);
		this.getView().getModel().getData().NO_OF_ADDITIONAL_LANGUAGES = this.additionalLanguageListModelData.length;
		this.additionalLanguageListModel.setData(this.additionalLanguageListModelData);

		this.languageTextInput = new sap.m.Input({
			layoutData : new sap.ui.layout.GridData({
				span : "L8 M8 S8"
			})
		});
		this.languageDescriptionInput = new sap.m.TextArea({
			layoutData : new sap.ui.layout.GridData({
				span : "L8 M8 S8"
			})
		});
		this.languageKeySelect = new sap.m.Select({
			layoutData : new sap.ui.layout.GridData({
				span : "L6 M6 S6"
			})
		});
		this.addedLanguagesList = new sap.m.List({
			layoutData : new sap.ui.layout.GridData({
				span : "L5 M5 S5"
			}),
		});
		this.addedLanguagesList.bindItems("additionalLanguageListModel>/", new sap.m.CustomListItem({
			content : new sap.ui.layout.Grid({
				hSpacing: 1,
				vSpacing: 0,
				defaultSpan : "L12 M12 S12",
				content: [
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>TITLE}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L12 M12 S12",
				        		  vAlign : "Middle"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>DESCRIPTION}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L6 M6 S6",
				        		  vAlign : "Middle"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>LANGUAGE_KEY}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L4 M4 S4"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Button({
				        	  icon : "sap-icon://sys-cancel",
				        	  type : "Transparent",
				        	  press : function(oEvent){
				        		  var deletedIndex = oEvent.getSource().getBindingContext("additionalLanguageListModel").getPath().substr(1);
				        		  var newData = that.addedLanguagesList.getModel("additionalLanguageListModel").getData().splice(deletedIndex,1);
				        		  that.addedLanguagesList.getModel("additionalLanguageListModel").updateBindings();

				        	  },
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L2 M2 S2"
				        	  })
				          })]
			})
		}));
		this.addedLanguagesList.setModel(that.additionalLanguageListModel,"additionalLanguageListModel");

		var additionalLanguageDialog = new sap.m.Dialog({
			contentHeight : "50%",
			contentWidth : "25%",
			title : this.oApplicationFacade.getResourceBundle().getText("ADDITIONAL_LANGUAGE"),
			content :  [
			            new sap.ui.layout.Grid({
			            	hSpacing: 1,
			            	vSpacing: 4,
			            	defaultSpan : "L12 M12 S12",
			            	content: [
			            	          new sap.ui.layout.form.SimpleForm({
			            	        	  editable:true, 
			            	        	  layout:"ResponsiveGridLayout", 
			            	        	  content : [
			            	        	             new sap.m.Label({
			            	        	            	 text : that.oResourceBundle.getText("TITLE"),
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3",
			            	        	            	 })
			            	        	             }),
			            	        	             that.languageTextInput,
			            	        	             new sap.m.Label({
			            	        	            	 text : that.oResourceBundle.getText("DESCRIPTION"),
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3",
			            	        	            	 })
			            	        	             }),
			            	        	             that.languageDescriptionInput,
			            	        	             new sap.m.Label({
			            	        	            	 text : that.oResourceBundle.getText("LANGUAGE"),
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3"
			            	        	            	 })
			            	        	             }),

			            	        	             that.languageKeySelect,
			            	        	             new sap.m.Button({
			            	        	            	 icon:"sap-icon://add",
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L2 M2 S2"
			            	        	            	 }),
			            	        	            	 press : function(){
			            	        	            		 if(that.languageTextInput.getValue() || that.languageDescriptionInput.getValue()){
			            	        	            			 for(var i=0;i<that.addedLanguagesList.getModel("additionalLanguageListModel").getData().length;i++){
			            	        	            				 if(that.addedLanguagesList.getModel("additionalLanguageListModel").getData()[i].LANGUAGE_KEY === that.languageKeySelect.getSelectedItem().getKey()){
			            	        	            					 sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_LANGUAGE_EXISTS",that.languageKeySelect.getSelectedItem().getKey()));
			            	        	            					 return;
			            	        	            				 }
			            	        	            			 }
			            	        	            			 var addedLanguageObject = {
			            	        	            					 "TITLE" : that.languageTextInput.getValue(),
			            	        	            					 "DESCRIPTION" : that.languageDescriptionInput.getValue(),
			            	        	            					 "LANGUAGE_KEY" : that.languageKeySelect.getSelectedItem().getKey()
			            	        	            			 };
			            	        	            			 that.addedLanguagesList.getModel("additionalLanguageListModel").getData().push(addedLanguageObject);
			            	        	            			 that.addedLanguagesList.getModel("additionalLanguageListModel").updateBindings();
			            	        	            			 that.languageTextInput.setValue("");
			            	        	            			 that.languageDescriptionInput.setValue("");
			            	        	            		 }
			            	        	            	 }
			            	        	             })
			            	        	             ]
			            	          })

			            	          ]
			            }).addStyleClass("languageGrid"),
			            that.addedLanguagesList],
			            beginButton : new sap.m.Button({
			            	text : that.oResourceBundle.getText("OK"),
			            	press : function(){
			            		additionalLanguageDialog.close();
			            		that.getView().getModel().getData().ADDITIONAL_LANGUAGE_ARRAY = that.addedLanguagesList.getModel("additionalLanguageListModel").getData();
			            		that.getView().getModel().getData().NO_OF_ADDITIONAL_LANGUAGES = that.getView().getModel().getData().ADDITIONAL_LANGUAGE_ARRAY.length;
			            		that.getView().getModel().updateBindings();
			            	}
			            }),
			            endButton : new sap.m.Button({
			            	text : that.oResourceBundle.getText("CANCEL"),
			            	press : function(){
			            		additionalLanguageDialog.close();
			            	}
			            })
		});
		this.oDataModel.read("/LANGUAGE?$select=LAISO", null, null, false, function(data) {
			data = data.results;
			for(var i=0;i<data.length;i++){

				if((data[i].LAISO).toUpperCase() == (sap.ui.getCore().getConfiguration().getLocale().getLanguage()).toUpperCase()){
					data.splice(i,1);
				}
			}
			var oModel = new sap.ui.model.json.JSONModel();
			oModel.setData(data);
			that.languageKeySelect.setModel(oModel, "otherLanguageKey");
			that.languageKeySelect.bindItems("otherLanguageKey>/", new sap.ui.core.Item({
				text: "{otherLanguageKey>LAISO}",
				key: "{otherLanguageKey>LAISO}"
			}));
		});
		additionalLanguageDialog.open();
	},
	_cloneObj:function(ele){
		var tmp;
		if(ele instanceof Array){
			tmp=[];
			for(var i=0;i<ele.length;i++){
				tmp[i]=this._cloneObj(ele[i]);
			}
		}else if(ele instanceof Object){
			tmp={};
			for(var each in ele){
				if(ele.hasOwnProperty(each)){
					tmp[each]=this._cloneObj(ele[each]);     
				}
			}
		}else{
			tmp=ele;
		}
		return tmp;
	},
	formatLangCount : function(value){
		if(!this.getView().getModel().getData()){
			value = 0;
		}
		else
			value = this.getView().getModel().getData().NO_OF_ADDITIONAL_LANGUAGES;
		return this.oApplicationFacade.getResourceBundle().getText("ADDITIONAL_LANGUAGE")+"("+value+")";
	},
	validateEvaluationValues: function(data) {
		data = data || this.getView().getModel().getData();
		var values = [];
		var errors = [];
		var score = 0;
		var duplicates = {};
		if(data.CRITICALLOW || data.CRITICALLOW === 0) {
			values.push({key: "CL", value: data.CRITICALLOW, score: score++});
		}
		if(data.WARNINGLOW || data.WARNINGLOW === 0) {
			values.push({key: "WL", value: data.WARNINGLOW, score: score++});
		}
		if(data.TARGET || data.TARGET === 0) {
			values.push({key: "TA", value: data.TARGET, score: score++});
		}
		if(data.WARNINGHIGH || data.WARNINGHIGH === 0) {
			values.push({key: "WH", value: data.WARNINGHIGH, score: score++});
		}
		if(data.CRITICALHIGH || data.CRITICALHIGH === 0) {
			values.push({key: "CH", value: data.CRITICALHIGH, score: score++});
		}
		values.sort(function(a,b) { return (a.value - b.value)});
		for(var i=0,l=values.length; i<l; i++) {
			if(values[i].score != i) {
				errors.push(values[i].key);
			}
			if(values[i] && values[i-1]) {
				if(values[i].value == values[i-1].value) {
					duplicates[values[i-1].key] = values[i-1].value;
					duplicates[values[i].key] = values[i].value;
				}
			}
		}
		if(!(errors.length)) {
			errors = Object.keys(duplicates);
		}
		return errors;
	},
	
	resetAdditionalMeasures : function(){
		var that = this;
		if(that.getView().getModel().getData().ODATA_URL && that.getView().getModel().getData().ODATA_ENTITYSET){
			if(that.getView().byId('targetThresholdPanel').getContent()[0].getController().measuresDialog){
				var measureModel = that.getView().byId('targetThresholdPanel').getContent()[0].getController().populateMeasure(that.getView().getModel().getData().ODATA_URL,that.getView().getModel().getData().ODATA_ENTITYSET);
				that.getView().byId('targetThresholdPanel').getContent()[0].getController().measuresDialog.setModel(measureModel);
			}
			
		}
		else{
			if(that.getView().byId('targetThresholdPanel').getContent()[0].getController().measuresDialog){
				var measureModel = new sap.ui.model.json.JSONModel({});
				that.getView().byId('targetThresholdPanel').getContent()[0].getController().measuresDialog.setModel(measureModel);
			}
		}
		that.getView().byId('targetThresholdPanel').getContent()[0].byId('additionalMeasures').removeAllTokens();
	}

});
}; // end of sap/suite/ui/smartbusiness/designtime/evaluation/view/S1.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.kpi.Component') ) {
// define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.kpi.Component");
jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained


// extent of sap.ca.scfld.md.ComponentBase
sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.designtime.kpi.Component", {
	metadata : sap.ca.scfld.md.ComponentBase.createMetaData("FS", {
		"name": "Fullscreen Sample",
		"version" : "1.0.0-SNAPSHOT",
		"library" : "sap.suite.ui.smartbusiness.designtime.kpi",
		"includes" : ["../../lib/Util.js"],
		"dependencies" : {
			"libs" : ["sap.m"],
			"components" : [],
		},
		"config" : {
			"resourceBundle" : "i18n/i18n.properties",
			"titleResource" : "FULLSCREEN_TITLE",
			"icon" : "sap-icon://Fiori5/F0817",
			"favIcon" : "../../../../../../../resources/sap/ca/ui/themes/base/img/favicon/F0817_Define_New_KPI.ico",
			"homeScreenIconPhone" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0817_Define_New_KPI/57_iPhone_Desktop_Launch.png",
			"homeScreenIconPhone@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0817_Define_New_KPI/114_iPhone-Retina_Web_Clip.png",
			"homeScreenIconTablet" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0817_Define_New_KPI/72_iPad_Desktop_Launch.png",
			"homeScreenIconTablet@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0817_Define_New_KPI/144_iPad_Retina_Web_Clip.png",
			"startupImage320x460" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/320_x_460.png",
			"startupImage640x920" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_920.png",
			"startupImage640x1096" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_1096.png",
			"startupImage768x1004" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/768_x_1004.png",
			"startupImage748x1024" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/748_x_1024.png",
			"startupImage1536x2008" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1536_x_2008.png",
			"startupImage1496x2048" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1496_x_2048.png"
		},
		viewPath : "sap.suite.ui.smartbusiness.designtime.kpi.view",
		fullScreenPageRoutes : {
			// fill the routes to your full screen pages in here.
			"editKpi" : {
				"pattern" : "editKpi/{contextPath}",
				"view" : "S1"
			},
			"createKpi" : {
				"pattern" : "",
				"view" : "S1"
			},
			"editDraftKpi" : {
				"pattern" : "editDraftKpi/{contextPath}",
				"view" : "S1"
			},
			"duplicateKpi" : {
				"pattern" : "duplicateKpi/{contextPath}",
				"view" : "S1"
			}
		//	"subscreen" : {
		//		"pattern" : "second",
		//		"view" : "S2"
		//	}
		},
		
	}),	

	/**
	 * Initialize the application
	 * 
	 * @returns {sap.ui.core.Control} the content
	 */
	createContent : function() {
		var oViewData = {component: this};
		return sap.ui.view({
			viewName : "sap.suite.ui.smartbusiness.designtime.kpi.Main",
			type : sap.ui.core.mvc.ViewType.XML,
			viewData : oViewData
		});
	}
});
}; // end of sap/suite/ui/smartbusiness/designtime/kpi/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.kpi.Configuration') ) {

jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.kpi.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained


sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.designtime.kpi.Configuration", {

	oServiceParams: {
		serviceList: [
		              {
		            	  name : "SMART_BUSINESS",
		            	  masterCollection : "INDICATORS",
		            	  serviceUrl : "/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata/",
		            	  isDefault : true,
		              }
		              ]
	},

	getAppConfig: function() {
		return this.oAppConfig;
	},

	/**
	 * @inherit
	 */
	getServiceList: function () {
		return this.oServiceParams.serviceList;
	},

	getMasterKeyAttributes: function () {
		return ["Id"];
	},
	getExcludedQueryStringParameters : function() {
		return ["sap-client","sap-language"];
	},
	getHanaSystem : function() {
        var hashObj = hasher || window.hasher; 
        var hashArr = hashObj.getHashAsArray();
        if(hashArr && hashArr.length && hashArr[0]) {
               var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
               for(var i=0,l=hashParameters.length; i<l; i++) {
                     if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                            return hashParameters[i].split("=")[1]; 
                     }
               }
        }
        return "";
	},
	getServiceParams : function() {
		if(sap.ushell && sap.ushell.Container) {
			var serviceUrl = this.oServiceParams.serviceList[0].serviceUrl;
	        this.oServiceParams.serviceList[0].serviceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(serviceUrl, this.getHanaSystem());
		}
        return this.oServiceParams;
	},

});

}; // end of sap/suite/ui/smartbusiness/designtime/kpi/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.kpi.view.S1.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.kpi.view.S1.controller');
jQuery.sap.require('sap.ca.scfld.md.controller.BaseFullscreenController'); // unlisted dependency retained

jQuery.sap.includeStyleSheet("../../resources/sap/suite/ui/smartbusiness/designtime/kpi/view/KpiParametersCss.css");

sap.ca.scfld.md.controller.BaseFullscreenController.extend("sap.suite.ui.smartbusiness.designtime.kpi.view.S1", {

	onInit : function() {
		var that = this;
		this.kpiCreateModel = new sap.ui.model.json.JSONModel();
		this.oDataModel = this.oApplicationFacade.getODataModel();
		this.viewData = {};
		this.oResourceBundle = this.oApplicationFacade.getResourceBundle();
		this.oDataModel.read("/LANGUAGE?$filter=LAISO eq '"+(sap.ui.getCore().getConfiguration().getLocale().getLanguage()).toUpperCase()+"'", null, null, false, function(data) {
			that.localLanguage = data.results[0].SPRAS;
		});

		var oOptions = {
				bSuppressBookmarkButton : {},
				onBack : function(){
					that.cancel();
				},
				oEditBtn : {
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						that.save();
					}
				},
				buttonList : [{
					sI18nBtnTxt : "SAVE_ACTIVATE",
					onBtnPressed : function(evt) {
						that.saveAndActivate();
					}
				},{
					sI18nBtnTxt : "SAVE_CREATE_NEW",
					onBtnPressed : function(evt) {
						that.saveAndCreateNew();
					}
				},{
					sI18nBtnTxt : "ACTIVATE_ADD_EVAL",
					onBtnPressed : function(evt) {
						that.activateAndAddEvaluation();
					}
				},{
					sI18nBtnTxt : "CANCEL",
					onBtnPressed : function(evt) {
						that.cancel();
					}
				}]
		};
		var editOptions = {
				bSuppressBookmarkButton : {},
				sI18NFullscreenTitle : "FULLSCREEN_EDIT_TITLE",
				onBack : function(){
					that.cancel();
				},
				oEditBtn : {
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						that.save();
					}
				},
				buttonList : [{
					sI18nBtnTxt : "SAVE_ACTIVATE",
					onBtnPressed : function(evt) {
						that.saveAndActivate();
					}
				},{
					sI18nBtnTxt : "SAVE_CREATE_NEW",
					onBtnPressed : function(evt) {
						that.saveAndCreateNew();
					}
				},{
					sI18nBtnTxt : "ACTIVATE_ADD_EVAL",
					onBtnPressed : function(evt) {
						that.activateAndAddEvaluation();
					}
				},{
					sI18nBtnTxt : "CANCEL",
					onBtnPressed : function(evt) {
						that.cancel();
					}
				}]
		};

		var editDraftOptions = {
				bSuppressBookmarkButton : {},
				sI18NFullscreenTitle : "FULLSCREEN_EDIT_TITLE",
				onBack : function(){
					that.cancel();
				},
				oEditBtn : {
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						that.save();
					}
				},
				buttonList : [{
					sI18nBtnTxt : "SAVE_ACTIVATE",
					onBtnPressed : function(evt) {
						that.saveAndActivate();
					}
				}, {
					sI18nBtnTxt : "DELETE_DRAFT",
					onBtnPressed : function(evt) {
						that.deleteDraft();
					}
				}, {
					sI18nBtnTxt : "CANCEL",
					onBtnPressed : function(evt) {
						that.cancel();
					}
				}]
		};

		this.setHeaderFooterOptions(oOptions);

		this.oRouter.attachRouteMatched(function(evt){
			that.route = evt.getParameter("name");
			if(evt.getParameter("name") == "editKpi"){
				that.context = new sap.ui.model.Context(that.getView().getModel(), '/' + (evt.getParameter("arguments").contextPath));

				var id = (/ID=\'.*\'/).exec(evt.getParameter("arguments").contextPath)[0];
				var kpiId = id.slice(id.indexOf("'")+1,id.lastIndexOf("'"));

				var active = (/IS_ACTIVE=.*/).exec(evt.getParameter("arguments").contextPath)[0];
				var is_active = active.slice(active.indexOf("=")+1,active.lastIndexOf(")"));

				that.viewData = {
						mode : "EDIT",
						ID : kpiId,
						IS_ACTIVE : parseInt(is_active)
				}
				if(that.viewData.IS_ACTIVE == 1){
					that.viewData.IS_DRAFT = true;
				}
				that.setHeaderFooterOptions(editOptions);
				that._oControlStore.oTitle.setText(that.oResourceBundle.getText("FULLSCREEN_DYN_TITLE", "Edit"));
				try {
                    if(sap.ushell.services.AppConfiguration && sap.ushell.services.AppConfiguration.setWindowTitle){
                            sap.ushell.services.AppConfiguration.setWindowTitle(that.oResourceBundle.getText("FULLSCREEN_EDIT_TITLE"));
                    }
                } catch(e){
                    jQuery.sap.log.error("Error Setting Window Page Title : "+that.oResourceBundle.getText("FULLSCREEN_EDIT_TITLE"))
                }
			}
			else if(evt.getParameter("name") == "editDraftKpi"){
				that.context = new sap.ui.model.Context(that.getView().getModel(), '/' + (evt.getParameter("arguments").contextPath));

				var id = (/ID=\'.*\'/).exec(evt.getParameter("arguments").contextPath)[0];
				var kpiId = id.slice(id.indexOf("'")+1,id.lastIndexOf("'"));

				var active = (/IS_ACTIVE=.*/).exec(evt.getParameter("arguments").contextPath)[0];
				var is_active = active.slice(active.indexOf("=")+1,active.lastIndexOf(")"));

				that.viewData = {
						mode : "EDIT",
						ID : kpiId,
						IS_ACTIVE : parseInt(is_active),
						IS_DRAFT : true
				}
				that.setHeaderFooterOptions(editDraftOptions);
				that._oControlStore.oTitle.setText(that.oResourceBundle.getText("FULLSCREEN_DYN_TITLE", "Edit"));
				try {
                    if(sap.ushell.services.AppConfiguration && sap.ushell.services.AppConfiguration.setWindowTitle){
                            sap.ushell.services.AppConfiguration.setWindowTitle(that.oResourceBundle.getText("FULLSCREEN_EDIT_TITLE"));
                    }
                } catch(e){
                    jQuery.sap.log.error("Error Setting Window Page Title : "+that.oResourceBundle.getText("FULLSCREEN_EDIT_TITLE"))
                }
			}
			else if(evt.getParameter("name") == "duplicateKpi"){
				that.context = new sap.ui.model.Context(that.getView().getModel(), '/' + (evt.getParameter("arguments").contextPath));

				var id = (/ID=\'.*\'/).exec(evt.getParameter("arguments").contextPath)[0];
				var kpiId = id.slice(id.indexOf("'")+1,id.lastIndexOf("'"));

				var active = (/IS_ACTIVE=.*/).exec(evt.getParameter("arguments").contextPath)[0];
				var is_active = active.slice(active.indexOf("=")+1,active.lastIndexOf(")"));

				that.viewData = {
						mode : "DUPLICATE",
						ID : kpiId,
						IS_ACTIVE : parseInt(is_active)
				}
				that._oControlStore.oTitle.setText(that.oResourceBundle.getText("FULLSCREEN_DYN_TITLE", "Duplicate"));
			}
			else{
				that.viewData = {
						mode : "CREATE",
				}
				that._oControlStore.oTitle.setText(that.oResourceBundle.getText("FULLSCREEN_DYN_TITLE", "Create"));
			}

			if (that.viewData.mode == "CREATE") {
				var kpiModelData = {};
				kpiModelData.MODE = "CREATE";
				kpiModelData.TYPE = "KPI";
				kpiModelData.KPITYPE = true;
				kpiModelData.OPITYPE = false;
				kpiModelData.NO_OF_ADDITIONAL_LANGUAGES = 0;
				kpiModelData.ADDITIONAL_LANGUAGE_ARRAY = [];
				kpiModelData.GOAL_TYPE = "MA";

				that.kpiModelDataForDirtyBitCheck = $.extend(true,{},kpiModelData);

				that.kpiCreateModel.setData(kpiModelData);
				that.getView().setModel(that.kpiCreateModel);
			} else if (that.viewData.mode == "EDIT" || that.viewData.mode == "DUPLICATE") {

				that.oDataModel.read("/INDICATORS(ID='" + that.viewData.ID  + "',IS_ACTIVE="	+ that.viewData.IS_ACTIVE + ")", null, null, false, function(indicatorData) {
					that.indicatorPayloadForDirtyBitTest = $.extend(true,{},indicatorData);

					indicatorData.MODE = that.viewData.mode;
					if (indicatorData.TYPE == "KPI") {
						indicatorData.KPITYPE = true;
						indicatorData.OPITYPE = false;
					} else if (indicatorData.TYPE == "OPI") {
						indicatorData.KPITYPE = false;
						indicatorData.OPITYPE = true;
					}

					that.oDataModel.read("/TAGS?$filter=ID eq '" + indicatorData.ID + "' and IS_ACTIVE eq " + indicatorData.IS_ACTIVE + " and TYPE eq 'IN'", null, null, false, function(tagData) {
						tagData = tagData.results;
						var tagArray = [];
						var i;
						for(i=0;i<tagData.length;i++){
							tagArray.push(tagData[i].TAG);
						}
						indicatorData.TAGS = tagArray;
						indicatorData.TAG = indicatorData.TAGS.toString(",");
						that.OLD_TAGS = tagArray;
					},function(error){
						sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_FETCHING_TAGS"));
					});

					that.oDataModel.read("/PROPERTIES?$filter=ID eq '" + indicatorData.ID + "' and IS_ACTIVE eq " + indicatorData.IS_ACTIVE + " and TYPE eq 'IN'", null, null, false, function(propertiesData) {
						propertiesData = propertiesData.results;
						var propertiesArray = [];
						var i;
						for(i=0;i<propertiesData.length;i++){
							var propertiesObject = {};
							propertiesObject.NAME = propertiesData[i].NAME,
							propertiesObject.VALUE = propertiesData[i].VALUE

							propertiesArray.push(propertiesObject);
						}
						indicatorData.PROPERTIES = propertiesArray;
						that.OLD_PROPERTIES = $.extend(true,[], propertiesArray);
					},function(error){
						sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_FETCHING_PROPERTIES"));
					});

					that.oDataModel.read("/INDICATOR_TEXTS?$filter=ID eq '" + indicatorData.ID + "' and IS_ACTIVE eq " + indicatorData.IS_ACTIVE, null, null, false, function(languageData) {
						languageData = languageData.results;
						var additionalLanguageData = [];
						var i;
						for(i=0;i<languageData.length;i++){
							if(languageData[i].LANGUAGE != that.localLanguage){
								additionalLanguageData.push(languageData[i]);
							}
						}
						var languageArray = [];
						var i;
						for(i=0;i<additionalLanguageData.length;i++){
							var languageObject = {};
							languageObject.ADDITIONAL_LANGUAGE_TITLE = additionalLanguageData[i].TITLE;
							languageObject.ADDITIONAL_LANGUAGE_DESCRIPTION = additionalLanguageData[i].DESCRIPTION;
							languageObject.ADDITIONAL_LANGUAGE_SPRAS_KEY = additionalLanguageData[i].LANGUAGE;
							that.oDataModel.read("/LANGUAGE?$filter=SPRAS eq '"+additionalLanguageData[i].LANGUAGE+"'", null, null, false, function(data) {
								languageObject.ADDITIONAL_LANGUAGE_KEY = data.results[0].LAISO;
							});
							languageArray.push(languageObject);
						}
						indicatorData.ADDITIONAL_LANGUAGE_ARRAY = languageArray;
						indicatorData.NO_OF_ADDITIONAL_LANGUAGES = indicatorData.ADDITIONAL_LANGUAGE_ARRAY.length; 
						that.OLD_ADDITIONAL_LANGUAGE_ARRAY = languageArray;
					},function(error){
						sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_FETCHING_ADDITIONAL_LANGUAGES"));
					});

					that.kpiCreateModel.setData(indicatorData);
					that.getView().setModel(that.kpiCreateModel);

					if(indicatorData.MODE == "EDIT"){
						that.getView().byId("kpiId").setEditable(false);
					}

				},function(error){
					sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("YMSG_ERROR_RETRIEVING_DATA"));
				});
			}
			var form = that.getView().byId('kpiParameterInputForm');
			form.addContent(new sap.m.Label({
				text : that.oResourceBundle.getText("PROPERTY_NAME_VALUE")
			}));

			if (that.viewData.mode === "EDIT" || that.viewData.mode === "DUPLICATE") {
				that.byId("odataServiceInput").fireChange();
			}

			that.getView().byId("propertyNameValueBox").bindAggregation("items", "/PROPERTIES", function(a, b) {
				return new sap.ui.layout.Grid({
					content : [new sap.m.Input({
						value : "{NAME}",
						layoutData : new sap.ui.layout.GridData({
							span : "L4 M4 S4"
						})
					}), new sap.m.Input({
						value : "{VALUE}",
						layoutData : new sap.ui.layout.GridData({
							span : "L4 M4 S4"
						})
					}), new sap.m.Button({
						icon : "sap-icon://sys-cancel",
						type : "Transparent",
						layoutData : new sap.ui.layout.GridData({
							span : "L2 M2 S2"
						}),
						press : function(evt) {
							that.removeProperty(evt);
						}
					})],
					defaultSpan : "L12 M12 S12"
				}).addStyleClass("propertyEntryGrid");
			});

		});
	},

	save : function() {
		var successStatus = this.saveKpiDetails();
		if(successStatus){
			if(this.viewData.IS_DRAFT){
				sap.suite.smartbusiness.utils.appToAppNavigation({action: "SBWorkspace", route: "detail", context: "INDICATORS_MODELER(ID='"+this.getView().getModel().getData().ID+"',IS_ACTIVE=1)"});
			}
			else{
				sap.suite.smartbusiness.utils.appToAppNavigation({action: "SBWorkspace", route: "detail", context: "INDICATORS_MODELER(ID='"+this.getView().getModel().getData().ID+"',IS_ACTIVE=0)"});
			}
		}
	},

	activateAndAddEvaluation : function() {
		var that=this;
		var successStatus = false;
		var activationStatus = false;

		if (!(this.getView().getModel().getData().TITLE)) {
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_INDICATOR_TITLE"));
			successStatus = false;
			activationStatus = false;
		} 
		else{
			successStatus = this.saveKpiDetails();
			if(successStatus){
				var payload = {
						ID : this.getView().getModel().getData().ID
				};
				sap.suite.smartbusiness.utils.create(sap.suite.smartbusiness.utils.serviceUrl('ACTIVATE_INDICATOR_SERVICE_URI'),payload,null,function(data){
					if(that.getView().getModel().getData().TYPE == "KPI"){
						sap.m.MessageToast.show(that.oResourceBundle.getText("ACTIVATE_KPI_SUCCESS"));
					}
					else{
						sap.m.MessageToast.show(that.oResourceBundle.getText("ACTIVATE_OPI_SUCCESS"));
					}
					activationStatus = true;
				},function(error){
					if(that.getView().getModel().getData().TYPE == "KPI"){
						sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ACTIVATE_KPI_ERROR"));
					}
					else{
						sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ACTIVATE_OPI_ERROR"));
					}
					activationStatus = false;
				});			
			}
		}
		if(activationStatus){
			sap.suite.smartbusiness.utils.appToAppNavigation({action: "createSBKPIEvaluation", route: "addEvaluation", context: "INDICATORS_MODELER(ID='"+this.getView().getModel().getData().ID+"',IS_ACTIVE=1)"});
		}
	},

	saveAndCreateNew : function() {
		var successStatus = this.saveKpiDetails();
		if(successStatus){

			var kpiModelData = {};
			kpiModelData.MODE = "CREATE";
			kpiModelData.NO_OF_ADDITIONAL_LANGUAGES = 0;
			kpiModelData.ADDITIONAL_LANGUAGE_ARRAY = [];
			kpiModelData.GOAL_TYPE = "MA";
			kpiModelData.KPITYPE = true;
			kpiModelData.OPITYPE = false;
			kpiModelData.TYPE = "KPI";
			this.kpiCreateModel.setData(kpiModelData);

			this.getView().setModel(this.kpiCreateModel);
			this.getView().getModel().getData().KPITYPE = true;
			this.getView().getModel().getData().OPITYPE = false;
			this.getView().getModel().getData().TYPE = "KPI";
			this.getView().byId("KPI").setSelected(true);
			this.getView().byId("OPI").setSelected(false);
			this.getView().getModel().updateBindings();

			this.getView().byId('kpiId').setEditable(true);
			this.getView().byId('viewInput').fireChange();
			this.kpiModelDataForDirtyBitCheck = $.extend(true,{},kpiModelData);
			sap.suite.smartbusiness.utils.appToAppNavigation({action: "createSBKPI"});
		}
	},

	saveAndActivate : function(){
		var that=this;
		var  successStatus = false;
		var activationStatus = false;

		if (!(this.getView().getModel().getData().TITLE)) {
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_INDICATOR_TITLE"));
			activationStatus = false;
		} 
		else{
			successStatus = this.saveKpiDetails();
			if(successStatus){
				var payload = {
						ID : this.getView().getModel().getData().ID
				};

				sap.suite.smartbusiness.utils.create(sap.suite.smartbusiness.utils.serviceUrl('ACTIVATE_INDICATOR_SERVICE_URI'),payload,null,function(data){
					if(that.getView().getModel().getData().TYPE == "KPI"){
						sap.m.MessageToast.show(that.oResourceBundle.getText("ACTIVATE_KPI_SUCCESS"));
					}
					else{
						sap.m.MessageToast.show(that.oResourceBundle.getText("ACTIVATE_OPI_SUCCESS"));
					}
					activationStatus = true;
				},function(error){
					if(that.getView().getModel().getData().TYPE == "KPI"){
						sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ACTIVATE_KPI_ERROR"));
					}
					else{
						sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ACTIVATE_OPI_ERROR"));
					}
					activationStatus = false;
				});
			}
		}

		if(activationStatus){
			sap.suite.smartbusiness.utils.appToAppNavigation({action: "SBWorkspace", route: "detail", context: "INDICATORS_MODELER(ID='"+this.getView().getModel().getData().ID+"',IS_ACTIVE=1)"});
		}
	},

	deleteDraft : function(){
		var that=this;
		var backDialog = new sap.m.Dialog({
			icon:"sap-icon://warning2",
			title:that.oResourceBundle.getText("WARNING"),
			state:"Warning",
			type:"Message",
			content:[new sap.m.Text({text:that.oResourceBundle.getText("WARNING_DELETE_DRAFT_KPI_OPI")})],
			beginButton: new sap.m.Button({
				text:that.oResourceBundle.getText("OK"),
				press: function(){
					backDialog.close();
					that.callDeleteDraft();
				}
			}),
			endButton: new sap.m.Button({
				text:that.oResourceBundle.getText("CANCEL"),
				press:function(){
					backDialog.close();
				}
			})   	                                           
		});
		backDialog.open();
	},

	callDeleteDraft: function() {
		var that = this;
		var payload = {};
		payload.ID = that.viewData.ID;
		payload.IS_ACTIVE = that.viewData.IS_ACTIVE;

		sap.suite.smartbusiness.utils.remove(sap.suite.smartbusiness.utils.serviceUrl('INDICATOR_SERVICE_URI'),payload,function(data){
			if(that.getView().getModel().getData().TYPE == "KPI"){
				sap.m.MessageToast.show(that.oResourceBundle.getText("SUCCESS_KPI_DELETE"));
			}
			else{
				sap.m.MessageToast.show(that.oResourceBundle.getText("SUCCESS_OPI_DELETE"));
			}
			sap.suite.smartbusiness.utils.appToAppNavigation({action: "SBWorkspace", route: "detail", context: "INDICATORS_MODELER(ID='"+that.getView().getModel().getData().ID+"',IS_ACTIVE=1)"});

		},function(error){
			if(that.getView().getModel().getData().TYPE == "KPI"){
				sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_KPI_DELETE"));
			}
			else{
				sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_OPI_DELETE"));
			}
		});
	}, 

	cancel : function() {
		var that=this;
		var indicatorChanged = false;
		var languageChanged = false;
		var tagChanged = false;
		var propertiesChanged = false;

		if(this.route === "createKpi"){

			if(that.kpiCreateModel.getData().ADDITIONAL_LANGUAGE_ARRAY && that.kpiCreateModel.getData().ADDITIONAL_LANGUAGE_ARRAY.length){
				languageChanged = true;
			}
			if((that.kpiCreateModel.getData().TAGS && that.kpiCreateModel.getData().TAGS.length) || that.kpiCreateModel.getData().TAG){
				tagChanged = true;
			}
			if(that.kpiCreateModel.getData().PROPERTIES && that.kpiCreateModel.getData().PROPERTIES.length){
				propertiesChanged = true;
			}

			delete that.kpiModelDataForDirtyBitCheck.ADDITIONAL_LANGUAGE_ARRAY;
			delete that.kpiModelDataForDirtyBitCheck.TAG;
			delete that.kpiModelDataForDirtyBitCheck.TAGS;
			delete that.kpiModelDataForDirtyBitCheck.PROPERTIES;
			delete that.kpiCreateModel.getData().ADDITIONAL_LANGUAGE_ARRAY;
			delete that.kpiCreateModel.getData().TAG;
			delete that.kpiCreateModel.getData().TAGS;
			delete that.kpiCreateModel.getData().PROPERTIES;

			var indicatorDeltaObject = sap.suite.smartbusiness.utils.dirtyBitCheck({
				oldPayload : that.kpiModelDataForDirtyBitCheck,
				newPayload : that.kpiCreateModel.getData(),
				objectType : "INDICATORS"
			});

			if(indicatorDeltaObject && indicatorDeltaObject.updates.length){
				indicatorChanged = true;
			}

			if(indicatorChanged || languageChanged || tagChanged || propertiesChanged){

				var backDialog = new sap.m.Dialog({
					icon:"sap-icon://warning2",
					title:that.oResourceBundle.getText("WARNING"),
					state:"Warning",
					type:"Message",
					content:[new sap.m.Text({text:that.oResourceBundle.getText("WARNING_UNSAVED_MESSAGE")})],
					beginButton: new sap.m.Button({
						text:that.oResourceBundle.getText("CONTINUE"),
						press: function(){
							backDialog.close();
							window.history.back();
						}
					}),
					endButton: new sap.m.Button({
						text:that.oResourceBundle.getText("CANCEL"),
						press:function(){
							backDialog.close();
						}
					})   	                                           
				});
				backDialog.open();
			}
			else{
				window.history.back();
			}
		}

		else{

			var indicatorDelta = that.getIndicatorChanges();
			var tagDelta = that.getTagChanges();
			var propertiesDelta = that.getPropertiesChanges();
			var languageDelta = that.getLanguageChanges();

			if(indicatorDelta && (indicatorDelta.updates.length)){
				indicatorChanged = true;
			}

			if(languageDelta && (languageDelta.updates.length || languageDelta.deletes.length)){
				languageChanged = true;
			}
			if(tagDelta &&(tagDelta.updates.length || tagDelta.deletes.length)){
				tagChanged = true;
			}

			if(propertiesDelta && (propertiesDelta.updates.length || propertiesDelta.deletes.length)){
				propertiesChanged = true;
			}

			if(indicatorChanged || languageChanged || tagChanged || propertiesChanged){
				var backDialog = new sap.m.Dialog({
					icon:"sap-icon://warning2",
					title:that.oResourceBundle.getText("WARNING"),
					state:"Warning",
					type:"Message",
					content:[new sap.m.Text({text:that.oResourceBundle.getText("WARNING_UNSAVED_MESSAGE")})],
					beginButton: new sap.m.Button({
						text:that.oResourceBundle.getText("CONTINUE"),
						press: function(){
							backDialog.close();
							if(sap.suite.smartbusiness.modelerAppCache && sap.suite.smartbusiness.modelerAppCache.createSBKPI && sap.suite.smartbusiness.modelerAppCache.createSBKPI.appFromWorkspace) {
								if(that.context) {
									if(that.route == "editKpi" || that.route == "duplicateKpi") {
										sap.suite.smartbusiness.utils.appToAppNavigation({action: "SBWorkspace", route: "detail", context: that.context.sPath.substr(1).replace("INDICATORS","INDICATORS_MODELER")});
									}
									else if(that.route == "editDraftKpi") {
										sap.suite.smartbusiness.utils.appToAppNavigation({action: "SBWorkspace", route: "detail", context: that.context.sPath.substr(1).replace("INDICATORS","INDICATORS_MODELER").replace("IS_ACTIVE=0","IS_ACTIVE=1")});
									}
								}
								else {
									sap.suite.smartbusiness.utils.appToAppNavigation({action: "SBWorkspace"});
								}
							}
							else {
								sap.suite.smartbusiness.utils.appToAppNavigation({});
							}
						}
					}),
					endButton: new sap.m.Button({
						text:that.oResourceBundle.getText("CANCEL"),
						press:function(){
							backDialog.close();
						}
					})   	                                           
				});
				backDialog.open();
			}
			else{
				if(sap.suite.smartbusiness.modelerAppCache && sap.suite.smartbusiness.modelerAppCache.createSBKPI && sap.suite.smartbusiness.modelerAppCache.createSBKPI.appFromWorkspace) {
					if(that.context) {
						if(that.route == "editKpi" || that.route == "duplicateKpi") {
							sap.suite.smartbusiness.utils.appToAppNavigation({action: "SBWorkspace", route: "detail", context: that.context.sPath.substr(1).replace("INDICATORS","INDICATORS_MODELER")});
						}
						else if(that.route == "editDraftKpi") {
							sap.suite.smartbusiness.utils.appToAppNavigation({action: "SBWorkspace", route: "detail", context: that.context.sPath.substr(1).replace("INDICATORS","INDICATORS_MODELER").replace("IS_ACTIVE=0","IS_ACTIVE=1")});
						}
					}
					else {
						sap.suite.smartbusiness.utils.appToAppNavigation({action: "SBWorkspace"});
					}
				}
				else {
					sap.suite.smartbusiness.utils.appToAppNavigation({});
				}
			}
		}
	},

	saveKpiDetails : function() {

		var that = this;
		var kpiDetailsModelData = this.kpiCreateModel.getData();
		var successStatus = true;

		var indicatorPayload = {
				"ID" : 	kpiDetailsModelData.ID || "",
				"IS_ACTIVE" : 0,
				"INDICATOR":{
					"DESCRIPTION" : kpiDetailsModelData.DESCRIPTION || "",
					"GOAL_TYPE" : kpiDetailsModelData.GOAL_TYPE || "",
					"TITLE" : kpiDetailsModelData.TITLE || "",
					"TYPE" : kpiDetailsModelData.TYPE || "",
					"OWNER_E_MAIL" : kpiDetailsModelData.OWNER_E_MAIL || "",
					"OWNER_ID" : kpiDetailsModelData.OWNER_ID || "",
					"OWNER_NAME" : kpiDetailsModelData.OWNER_NAME || "",
					"COLUMN_NAME" : kpiDetailsModelData.COLUMN_NAME || "",
					"DATA_SPECIFICATION" : kpiDetailsModelData.DATA_SPECIFICATION || "",
					"ODATA_URL" : kpiDetailsModelData.ODATA_URL || "",
					"ODATA_ENTITYSET" : kpiDetailsModelData.ODATA_ENTITYSET || "",
					"VIEW_NAME" : kpiDetailsModelData.VIEW_NAME || "",
					"ENTITY_TYPE" : "",
					"SEMANTIC_OBJECT" : kpiDetailsModelData.SEMANTIC_OBJECT || "",
					"ACTION" : kpiDetailsModelData.ACTION || ""
				}
		};

		if (indicatorPayload.ID == "") {
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_INDICATOR_ID"));
			successStatus = false;
			return;
		}

		if (!(successStatus)||that.byId("kpiId").getValueState() === "Error") {
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_VALID_KPI_ID"));
			successStatus = false;
			return;
		}

		if(that.byId("kpiOwnerEmail").getValueState() === "Error"){
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_VALID_KPI_EMAIL"));
			successStatus = false;
			return;
		}

		else {
			if(this.viewData.mode == "DUPLICATE"){
				if(!this.validateKpiId()){
					return;
				}
			}
			if(that.viewData.mode == "CREATE" || that.viewData.mode == "DUPLICATE" || (that.viewData.mode == "EDIT" && this.viewData.IS_ACTIVE == 1)){
				indicatorPayload.TEXTS = [];
				indicatorPayload.TAGS = [];
				indicatorPayload.PROPERTIES = [];
				var languagePayload = that.insertLanguagePayload();
				var propertiesPayload = that.insertPropertiesPayload();
				var tagPayload = that.insertTagPayload();

				if(languagePayload.length){
					indicatorPayload.TEXTS = languagePayload;
				}
				if(propertiesPayload.length){
					indicatorPayload.PROPERTIES = 	propertiesPayload;
				}
				if(tagPayload.length){
					indicatorPayload.TAGS = tagPayload;
				}
				sap.suite.smartbusiness.utils.create(sap.suite.smartbusiness.utils.serviceUrl('INDICATOR_SERVICE_URI'),indicatorPayload,null,function(data){
					if(that.getView().getModel().getData().TYPE == "KPI"){
						sap.m.MessageToast.show(that.oResourceBundle.getText("SUCCESS_KPI_SAVE"));
					}
					else{
						sap.m.MessageToast.show(that.oResourceBundle.getText("SUCCESS_OPI_SAVE"));
					}
					successStatus = true;
				},function(error){
					if(that.getView().getModel().getData().TYPE == "KPI"){
						sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_KPI_SAVE"));
					}
					else{
						sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_OPI_SAVE"));
					}
					successStatus = false;	
				});
			}
			else if(that.viewData.mode == "EDIT"){

				indicatorPayload.TEXTS = {};
				indicatorPayload.TAGS = {};
				indicatorPayload.PROPERTIES = {};

				var indicatorChanged = false;
				var languageChanged = false;
				var tagChanged = false;
				var propertiesChanged = false;

				var indicatorDeltaObject = that.getIndicatorChanges();

				if(indicatorDeltaObject){
					if(indicatorDeltaObject.updates.length){
						indicatorChanged = true;
						indicatorPayload.INDICATOR = {};
						for(var i=0;i<indicatorDeltaObject.updates.length;i++){
							indicatorPayload.INDICATOR.update = indicatorDeltaObject.updates[i];
						}
					}
				}

				var languageDeltaObject = that.getLanguageChanges(); 
				if(languageDeltaObject){
					if(languageDeltaObject.deletes.length){
						languageChanged = true;
						for(var i=0;i<languageDeltaObject.deletes.length;i++){
							indicatorPayload.TEXTS.remove = languageDeltaObject.deletes;
						}
					}
					if(languageDeltaObject.updates.length){
						languageChanged = true;
						for(var i=0;i<languageDeltaObject.updates.length;i++){
							indicatorPayload.TEXTS.create = languageDeltaObject.updates;
						}
					}
				}

				var tagDeltaObject = that.getTagChanges();

				if(tagDeltaObject){
					if(tagDeltaObject.deletes.length){
						tagChanged = true;
						for(var i=0;i<tagDeltaObject.deletes.length;i++){
							indicatorPayload.TAGS.remove = tagDeltaObject.deletes;
						}
					}
					if(tagDeltaObject.updates.length){
						tagChanged = true;
						for(var i=0;i<tagDeltaObject.updates.length;i++){
							indicatorPayload.TAGS.create = tagDeltaObject.updates;
						}
					}
				}

				var propertiesDeltaObject = that.getPropertiesChanges();

				if(propertiesDeltaObject){
					if(propertiesDeltaObject.deletes.length){
						propertiesChanged = true;
						for(var i=0;i<propertiesDeltaObject.deletes.length;i++){
							indicatorPayload.PROPERTIES.remove = propertiesDeltaObject.deletes;
						}
					}
					if(propertiesDeltaObject.updates.length){
						propertiesChanged = true;
						for(var i=0;i<propertiesDeltaObject.updates.length;i++){
							indicatorPayload.PROPERTIES.create = propertiesDeltaObject.updates;
						}
					}
				}

				if(indicatorChanged || tagChanged || propertiesChanged || languageChanged){
					sap.suite.smartbusiness.utils.update(sap.suite.smartbusiness.utils.serviceUrl('INDICATOR_SERVICE_URI'),indicatorPayload,null,function(data){
						if(that.getView().getModel().getData().TYPE == "KPI"){
							sap.m.MessageToast.show(that.oResourceBundle.getText("SUCCESS_KPI_SAVE"));
						}
						else{
							sap.m.MessageToast.show(that.oResourceBundle.getText("SUCCESS_OPI_SAVE"));
						}
						successStatus = true;
					},function(error){
						if(that.getView().getModel().getData().TYPE == "KPI"){
							sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_KPI_SAVE"));
						}
						else{
							sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_OPI_SAVE"));
						}
						successStatus = false;	
					});
				}
			}
		}
		return successStatus;
	},

	getIndicatorChanges : function(){

		var oldIndicatorPayloadData = this.indicatorPayloadForDirtyBitTest;
		var newIndicatorPayloadData = this.kpiCreateModel.getData();

		var oldPayload = {
				"DESCRIPTION" : oldIndicatorPayloadData.DESCRIPTION || "",
				"GOAL_TYPE" : oldIndicatorPayloadData.GOAL_TYPE || "",
				"TITLE" : oldIndicatorPayloadData.TITLE || "",
				"TYPE" : oldIndicatorPayloadData.TYPE || "",
				"OWNER_E_MAIL" : oldIndicatorPayloadData.OWNER_E_MAIL || "",
				"OWNER_ID" : oldIndicatorPayloadData.OWNER_ID || "",
				"OWNER_NAME" : oldIndicatorPayloadData.OWNER_NAME || "",
				"COLUMN_NAME" : oldIndicatorPayloadData.COLUMN_NAME || "",
				"DATA_SPECIFICATION" : oldIndicatorPayloadData.DATA_SPECIFICATION || "",
				"ODATA_URL" : oldIndicatorPayloadData.ODATA_URL || "",
				"ODATA_ENTITYSET" : oldIndicatorPayloadData.ODATA_ENTITYSET || "",
				"VIEW_NAME" : oldIndicatorPayloadData.VIEW_NAME || "",
				"ENTITY_TYPE" : "",
				"SEMANTIC_OBJECT" : oldIndicatorPayloadData.SEMANTIC_OBJECT || "",
				"ACTION" : oldIndicatorPayloadData.ACTION || ""	
		};

		var newPayload = {
				"DESCRIPTION" : newIndicatorPayloadData.DESCRIPTION || "",
				"GOAL_TYPE" : newIndicatorPayloadData.GOAL_TYPE || "",
				"TITLE" : newIndicatorPayloadData.TITLE || "",
				"TYPE" : newIndicatorPayloadData.TYPE || "",
				"OWNER_E_MAIL" : newIndicatorPayloadData.OWNER_E_MAIL || "",
				"OWNER_ID" : newIndicatorPayloadData.OWNER_ID || "",
				"OWNER_NAME" : newIndicatorPayloadData.OWNER_NAME || "",
				"COLUMN_NAME" : newIndicatorPayloadData.COLUMN_NAME || "",
				"DATA_SPECIFICATION" : newIndicatorPayloadData.DATA_SPECIFICATION || "",
				"ODATA_URL" : newIndicatorPayloadData.ODATA_URL || "",
				"ODATA_ENTITYSET" : newIndicatorPayloadData.ODATA_ENTITYSET || "",
				"VIEW_NAME" : newIndicatorPayloadData.VIEW_NAME || "",
				"ENTITY_TYPE" : "",
				"SEMANTIC_OBJECT" : newIndicatorPayloadData.SEMANTIC_OBJECT || "",
				"ACTION" : newIndicatorPayloadData.ACTION || ""	
		};

		var indicatorDeltaObject = sap.suite.smartbusiness.utils.dirtyBitCheck({
			oldPayload : oldPayload,
			newPayload : newPayload,
			objectType : "INDICATORS"
		});

		return indicatorDeltaObject;
	},

	getLanguageChanges : function(){
		var that=this;
		this.languagePayloadForDirtyBitTest = [];
		var newLanguagePayload = this.insertLanguagePayload();
		for(var i=0;i<this.OLD_ADDITIONAL_LANGUAGE_ARRAY.length;i++){
			var languageObject = {};
			languageObject.LANGUAGE = this.OLD_ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_SPRAS_KEY;
			languageObject.TITLE = this.OLD_ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_TITLE;
			languageObject.DESCRIPTION = this.OLD_ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_DESCRIPTION;
			this.languagePayloadForDirtyBitTest.push(languageObject);
		}

		var languageDeltaObject = sap.suite.smartbusiness.utils.dirtyBitCheck({
			oldPayload : that.languagePayloadForDirtyBitTest,
			newPayload : newLanguagePayload,
			objectType : "INDICATOR_TEXTS"
		});

		return languageDeltaObject;
	},

	getTagChanges : function(){
		var that=this;
		this.tagPayloadForDirtyBitTest = [];
		var newTagPayload = this.insertTagPayload();
		var oldTagPayload = [];
		for(var i=0;i<that.OLD_TAGS.length;i++){
			var tagObject = {};
			tagObject.TAG = that.OLD_TAGS[i];
			tagObject.TYPE = "IN";
			this.tagPayloadForDirtyBitTest.push(tagObject);
		}

		var tagDeltaObject = sap.suite.smartbusiness.utils.dirtyBitCheck({
			oldPayload : that.tagPayloadForDirtyBitTest,
			newPayload : newTagPayload,
			objectType : "TAGS"
		});

		return tagDeltaObject;
	},

	getPropertiesChanges : function(){
		var that=this;
		this.propertiesPayloadForDirtyBitTest = [];
		var newPropertiesPayload = this.insertPropertiesPayload();
		for(var i=0;i<this.OLD_PROPERTIES.length;i++){
			var propertiesObject = {};
			propertiesObject.TYPE = "IN";
			propertiesObject.NAME = that.OLD_PROPERTIES[i].NAME;
			propertiesObject.VALUE = that.OLD_PROPERTIES[i].VALUE;
			this.propertiesPayloadForDirtyBitTest.push(propertiesObject);
		}

		var propertiesDeltaObject = sap.suite.smartbusiness.utils.dirtyBitCheck({
			oldPayload : that.propertiesPayloadForDirtyBitTest,
			newPayload : newPropertiesPayload,
			objectType : "PROPERTIES"
		});

		return propertiesDeltaObject;
	},

	insertLanguagePayload : function(){
		var kpiDetailsModelData = this.kpiCreateModel.getData();
		var languagePayload = {};
		var languagePayloadArray = [];
		if(kpiDetailsModelData.NO_OF_ADDITIONAL_LANGUAGES>0){
			var i;
			for (i = 0; i < kpiDetailsModelData.NO_OF_ADDITIONAL_LANGUAGES; i++) {
				languagePayload = {};
				languagePayload.LANGUAGE = kpiDetailsModelData.ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_SPRAS_KEY;
				languagePayload.TITLE = kpiDetailsModelData.ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_TITLE;
				languagePayload.DESCRIPTION = kpiDetailsModelData.ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_DESCRIPTION;

				languagePayloadArray.push(languagePayload);
			}
		}
		return languagePayloadArray;
	},

	insertTagPayload : function(){
		var kpiDetailsModelData = this.kpiCreateModel.getData();
		var tagPayload = {};
		var tagPayloadArray = [];
		if (kpiDetailsModelData.TAG) {
			var tagArray = kpiDetailsModelData.TAG.split(",");
			var i;
			for (i = 0; i < tagArray.length; i++) {
				tagPayload = {};
				tagPayload.TYPE = "IN";
				tagPayload.TAG = tagArray[i];

				tagPayloadArray.push(tagPayload);
			}
		}
		return tagPayloadArray;
	},

	insertPropertiesPayload : function(){
		var kpiDetailsModelData = this.kpiCreateModel.getData();
		var propertyPayload = {};
		var propertyPayloadArray = [];
		if (kpiDetailsModelData.PROPERTIES) {
			var i;
			for (i = 0; i < kpiDetailsModelData.PROPERTIES.length; i++) {
				propertyPayload = {};
				propertyPayload.TYPE = "IN";
				propertyPayload.NAME = kpiDetailsModelData.PROPERTIES[i].NAME;
				propertyPayload.VALUE = kpiDetailsModelData.PROPERTIES[i].VALUE;

				propertyPayloadArray.push(propertyPayload);
			}
		}
		return propertyPayloadArray;
	},

	addAdditionalLanguageDialog : function(){

		var that=this;
		this.additionalLanguageListModel = new sap.ui.model.json.JSONModel();
		this.additionalLanguageListModelData = $.extend([], that.getView().getModel().getData().ADDITIONAL_LANGUAGE_ARRAY);
		this.getView().getModel().getData().NO_OF_ADDITIONAL_LANGUAGES = this.additionalLanguageListModelData.length;
		this.additionalLanguageListModel.setData(this.additionalLanguageListModelData);

		this.languageTextInput = new sap.m.Input({
			layoutData : new sap.ui.layout.GridData({
				span : "L8 M8 S8"
			})
		});
		this.languageDescriptionInput = new sap.m.TextArea({
			layoutData : new sap.ui.layout.GridData({
				span : "L8 M8 S8"
			})
		});
		this.languageKeySelect = new sap.m.Select({
			layoutData : new sap.ui.layout.GridData({
				span : "L6 M6 S6"
			})
		});

		this.addedLanguagesList = new sap.m.List({
			layoutData : new sap.ui.layout.GridData({
				span : "L5 M5 S5"
			}),
		});

		this.addedLanguagesList.bindItems("additionalLanguageListModel>/", new sap.m.CustomListItem({
			content : new sap.ui.layout.Grid({
				hSpacing: 1,
				vSpacing: 0,
				defaultSpan : "L12 M12 S12",
				content: [
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>ADDITIONAL_LANGUAGE_TITLE}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L12 M12 S12",
				        		  vAlign : "Middle"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>ADDITIONAL_LANGUAGE_DESCRIPTION}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L6 M6 S6",
				        		  vAlign : "Middle"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>ADDITIONAL_LANGUAGE_KEY}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L4 M4 S4"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Button({
				        	  icon : "sap-icon://sys-cancel",
				        	  type : "Transparent",
				        	  press : function(oEvent){
				        		  var deletedIndex = oEvent.getSource().getBindingContext("additionalLanguageListModel").getPath().substr(1);
				        		  var newData = that.addedLanguagesList.getModel("additionalLanguageListModel").getData().splice(deletedIndex,1);
				        		  that.addedLanguagesList.getModel("additionalLanguageListModel").updateBindings();

				        	  },
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L2 M2 S2"
				        	  })
				          })
				          ]
			})
		}));

		this.addedLanguagesList.setModel(that.additionalLanguageListModel,"additionalLanguageListModel");

		var additionalLanguageDialog = new sap.m.Dialog({
			contentHeight : "50%",
			contentWidth : "25%",
			title : that.oResourceBundle.getText("ADDITIONAL_LANGUAGE"),
			content :  [
			            new sap.ui.layout.Grid({
			            	hSpacing: 1,
			            	vSpacing: 4,
			            	defaultSpan : "L12 M12 S12",
			            	content: [
			            	          new sap.ui.layout.form.SimpleForm({
			            	        	  editable:true, 
			            	        	  layout:"ResponsiveGridLayout", 
			            	        	  content : [
			            	        	             new sap.m.Label({
			            	        	            	 text : that.oResourceBundle.getText("TITLE"),
			            	        	            	 textAlign : "Right",
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3",
			            	        	            	 })
			            	        	             }),

			            	        	             that.languageTextInput,

			            	        	             new sap.m.Label({
			            	        	            	 text : that.oResourceBundle.getText("DESCRIPTION"),
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3",
			            	        	            	 })
			            	        	             }),

			            	        	             that.languageDescriptionInput,

			            	        	             new sap.m.Label({
			            	        	            	 text : that.oResourceBundle.getText("LANGUAGE")+":",
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3"
			            	        	            	 })
			            	        	             }),

			            	        	             that.languageKeySelect,

			            	        	             new sap.m.Button({
			            	        	            	 icon:"sap-icon://add",
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L2 M2 S2"
			            	        	            	 }),
			            	        	            	 press : function(){

			            	        	            		 if(that.languageTextInput.getValue() || that.languageDescriptionInput.getValue()){
			            	        	            			 for(var i=0;i<that.addedLanguagesList.getModel("additionalLanguageListModel").getData().length;i++){
			            	        	            				 if(that.addedLanguagesList.getModel("additionalLanguageListModel").getData()[i].ADDITIONAL_LANGUAGE_KEY === that.languageKeySelect.getSelectedItem().getText()){
			            	        	            					 sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_LANGUAGE_EXISTS",that.languageKeySelect.getSelectedItem().getText()));
			            	        	            					 return;
			            	        	            				 }
			            	        	            			 }
			            	        	            			 var addedLanguageObject = {
			            	        	            					 "ADDITIONAL_LANGUAGE_TITLE" : that.languageTextInput.getValue(),
			            	        	            					 "ADDITIONAL_LANGUAGE_DESCRIPTION" : that.languageDescriptionInput.getValue(),
			            	        	            					 "ADDITIONAL_LANGUAGE_KEY" : that.languageKeySelect.getSelectedItem().getText(),
			            	        	            					 "ADDITIONAL_LANGUAGE_SPRAS_KEY" : that.languageKeySelect.getSelectedItem().getKey()
			            	        	            			 };
			            	        	            			 that.addedLanguagesList.getModel("additionalLanguageListModel").getData().push(addedLanguageObject);
			            	        	            			 that.addedLanguagesList.getModel("additionalLanguageListModel").updateBindings();
			            	        	            			 that.languageTextInput.setValue("");
			            	        	            			 that.languageDescriptionInput.setValue("");
			            	        	            		 }
			            	        	            	 }
			            	        	             })

			            	        	             ]
			            	          })

			            	          ]
			            }).addStyleClass("languageGrid"),

			            that.addedLanguagesList

			            ],

			            beginButton : new sap.m.Button({
			            	text : that.oResourceBundle.getText("OK"),
			            	press : function(){
			            		additionalLanguageDialog.close();
			            		that.getView().getModel().getData().ADDITIONAL_LANGUAGE_ARRAY = that.addedLanguagesList.getModel("additionalLanguageListModel").getData();
			            		that.getView().getModel().getData().NO_OF_ADDITIONAL_LANGUAGES = that.getView().getModel().getData().ADDITIONAL_LANGUAGE_ARRAY.length;
			            		that.getView().getModel().updateBindings();
			            	}
			            }),
			            endButton : new sap.m.Button({
			            	text : that.oResourceBundle.getText("CANCEL"),
			            	press : function(){
			            		additionalLanguageDialog.close();
			            	}
			            })
		});

		this.oDataModel.read("/LANGUAGE?$select=LAISO,SPRAS", null, null, false, function(data) {
			data = data.results;
			var i;
			for(var i=0;i<data.length;i++){

				if((data[i].LAISO).toUpperCase() == (sap.ui.getCore().getConfiguration().getLocale().getLanguage()).toUpperCase()){
					data.splice(i,1);
				}
			}
			var oModel = new sap.ui.model.json.JSONModel();
			oModel.setData(data);
			that.languageKeySelect.setModel(oModel, "otherLanguageKey");
			that.languageKeySelect.bindItems("otherLanguageKey>/", new sap.ui.core.Item({
				text: "{otherLanguageKey>LAISO}",
				key: "{otherLanguageKey>SPRAS}"
			}));
		});

		additionalLanguageDialog.open();
	},

	addNewProperty : function() {
		var that=this;

		if (this.getView().byId("kpiPropertyName").getValue()) {
			this.getView().byId("kpiPropertyName").setValueState("None");
			if (this.getView().byId("kpiPropertyValue").getValue()) {
				this.getView().byId("kpiPropertyValue").setValueState("None");
				var propertyModel = this.getView().byId('propertyNameValueBox').getModel();
				propertyModel.getData().PROPERTIES = propertyModel.getData().PROPERTIES || [];
				for(var i=0; i<propertyModel.getData().PROPERTIES.length;i++){
					if((propertyModel.getData().PROPERTIES[i].NAME === this.getView().byId("kpiPropertyName").getValue()) && (propertyModel.getData().PROPERTIES[i].VALUE === this.getView().byId("kpiPropertyValue").getValue())){
						sap.suite.smartbusiness.utils.showErrorMessage(this.oResourceBundle.getText("ERROR_PROPERTY_VALUE_PAIR_EXISTS"));
						return;
					}
				}
				propertyModel.getData().PROPERTIES.push({
					NAME : this.getView().byId("kpiPropertyName").getValue(),
					VALUE : this.getView().byId("kpiPropertyValue").getValue()
				});
				propertyModel.updateBindings();
				this.getView().byId("kpiPropertyName").setValue("");
				this.getView().byId("kpiPropertyValue").setValue("");
			} else {
				this.getView().byId("kpiPropertyValue").setValueState("Error");
				sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ENTER_PROPERTY_VALUE"));
			}
		} else {
			this.getView().byId("kpiPropertyName").setValueState("Error");
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ENTER_PROPERTY_NAME"));
		}
	},

	removeProperty : function(evt) {
		var path = evt.getSource().getBindingContext().getPath();
		evt.getSource().getBindingContext().getModel().getData().PROPERTIES.splice(path.substring(path.lastIndexOf("/") + 1), 1);
		evt.getSource().getBindingContext().getModel().updateBindings();
	},

	kpiOpiRadioButtonChange : function(oEvent) {
		if (this.getView().byId('KPI').getSelected() == true) {
			this.getView().getModel().getData().TYPE = "KPI";
			this.getView().getModel().getData().KPITYPE = true;
			this.getView().getModel().getData().OPITYPE = false;
		}
		else{
			this.getView().getModel().getData().TYPE = "OPI";
			this.getView().getModel().getData().KPITYPE = false;
			this.getView().getModel().getData().OPITYPE = true;
		}
		if(this.getView().byId('OPI').getSelected() == true) {
			this.getView().getModel().getData().TYPE = "OPI";
			this.getView().getModel().getData().KPITYPE = false;
			this.getView().getModel().getData().OPITYPE = true;
		}
		else{
			this.getView().getModel().getData().TYPE = "KPI";
			this.getView().getModel().getData().KPITYPE = true;
			this.getView().getModel().getData().OPITYPE = false;
		}
	},

	validateKpiId : function() {
		var kpiIdField = this.getView().byId('kpiId');
		var that=this;
		var successStatus = false;

		var kpiId = kpiIdField.getValue();
		if (kpiId) {
			if (!(/^[a-zA-Z0-9.]*$/.test(kpiId))) {
				kpiIdField.setValueState("Error");
				successStatus = false;
			} else {
				kpiIdField.setValueState("None");
				this.oDataModel.read("/INDICATORS?$filter=ID eq '" + kpiId + "'", null, null, false, function(indicatorData) {
					if (indicatorData.results[0]) {
						kpiIdField.setValueState("Error");
						sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ID_ALREADY_EXISTS"));
						successStatus = false;
					} else {
						kpiIdField.setValueState("None");
						successStatus = true;
					}
				}, function() {
					kpiIdField.setValueState("None");
					successStatus = true;
				});
			}
		}
		return successStatus;
	},

	formatAdditionalLanguageLink : function(sValue){
		return this.oApplicationFacade.getResourceBundle().getText("ADDITIONAL_LANGUAGE")+"("+sValue+")";
	},

	formatSemanticActionLabel : function(sValue){
		return sValue+"/"+this.oApplicationFacade.getResourceBundle().getText("ACTION");
	},

	validateEmailAddress : function() {

		var kpiOwnerEmailField = this.getView().byId('kpiOwnerEmail');
		var kpiOwnerEmailValue = kpiOwnerEmailField.getValue();
		if (kpiOwnerEmailValue) {
			if (!(/^\w+[\w-\.]*\@\w+((-\w+)|(\w*))\.[a-z]/.test(kpiOwnerEmailValue))) {
				kpiOwnerEmailField.setValueState("Error");
			} else {
				kpiOwnerEmailField.setValueState("None");
			}
		} else {
			kpiOwnerEmailField.setValueState("None");
		}
	},

	populateRelevantEntitySet : function(dialog) {
		var that = this;
		var modelData = this.getView().getModel().getData();

		var odata_package = modelData.ODATA_URL.substr(0,modelData.ODATA_URL.lastIndexOf("/"));
		odata_package = odata_package.replace(/\//g, '.').replace(".","");

		var odata_file = modelData.ODATA_URL.substr(modelData.ODATA_URL.lastIndexOf("/") + 1);
		odata_file = odata_file.split(".")[0];

		var entity = "/ODATA_FOR_ENTITY(P_PACKAGE='"+modelData.VIEW_NAME.split("/")[0] + "',P_OBJECT='" +modelData.VIEW_NAME.split("/")[1] + "')/Results?$filter=PACKAGE eq '" + odata_package + "' and OBJECT eq '" + odata_file + "'";

		this.oApplicationFacade.getODataModel().read(entity, null, null, false, function(data) {
			if(data.results && data.results.length) {
				var cdata = data.results[0].CDATA_STR;
				dialog.open();

				// handling comments in the xsodata file
				if(cdata) {
					//handling "//"
					var eachLine = cdata.split("\n");
					for(var i=0,l=eachLine.length; i<l; i++) {
						if(eachLine[i].indexOf("//") != -1) {
							eachLine[i] = eachLine[i].substr(0, eachLine[i].indexOf("//"));
						}
					}
					cdata = eachLine.join("\n");

					//handling "/* */"
					while(cdata.indexOf("/*") != -1) {
						var start = cdata.indexOf("/*");
						var end = cdata.indexOf("*/");
						end = (end == -1) ? cdata.length : (end-2);
						cdata = cdata.substr(0,start) + cdata.substr(end);
					}
				}

				var entityDataArray = [];
				var oModel = new sap.ui.model.json.JSONModel();
				var a = cdata.split(modelData.VIEW_NAME.split("/")[0] + '::' + modelData.VIEW_NAME.split("/")[1]);
				if(a.length == 1) {
					a = cdata.split(modelData.VIEW_NAME.split("/")[0] + '/' + modelData.VIEW_NAME.split("/")[1]);
				}
				if(a.length == 1) {
					oModel = that.populateEntitySet(that.getView().byId("odataServiceInput").getValue());
					dialog.setModel(oModel);
					return;
				}
				for(var i=1,l=a.length; i<l; i++) {
					var obj = {};
					obj.entityName = a[i].split('"')[2];
					entityDataArray.push(obj);
				}
				oModel.setData({
					entitySet : entityDataArray
				});
				dialog.setModel(oModel);
				return;
			}
		}, function(err) {
		});
	},

	handleHanaViewValueHelp : function() {
		var that = this;
		var hanaViewValueHelpDialog = new sap.m.SelectDialog({
			title : that.oResourceBundle.getText("SELECT_VIEW"),
			noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
			items : {
				path : "/HANA_VIEWS",
				template : new sap.m.StandardListItem({
					title : {
						parts : [{
							path : "OBJECT",
							type : new sap.ui.model.type.String()
						}, {
							path : "PACKAGE",
							type : new sap.ui.model.type.String()
						}, {
							path : "SUFFIX",
							type : new sap.ui.model.type.String()
						}],
						formatter : function(o, p, s) {
							if (s.indexOf("view") != -1)
								return p + "/" + o;
							else
								return p + "::" + o;
						}
					},
					description : "{SUFFIX}"
				})
			},
			confirm : function(oEvent) {
				that.getView().getModel().setProperty("/VIEW_NAME", oEvent.getParameter("selectedItem").getProperty("title"));
				that.byId("viewInput").fireChange();
			},
			liveChange : function(oEvent) {
				var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
				var oFilterPackage = new sap.ui.model.Filter("tolower(PACKAGE)", sap.ui.model.FilterOperator.Contains,searchValue);
				var oFilterObject = new sap.ui.model.Filter("tolower(OBJECT)", sap.ui.model.FilterOperator.Contains,searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter(new sap.ui.model.Filter([oFilterPackage, oFilterObject], false));
			}
		});
		hanaViewValueHelpDialog.setModel(this.oDataModel);
		hanaViewValueHelpDialog.open();
	},

	handleHanaViewInputChange : function(){
		this.getView().getModel().getData().ODATA_URL = "";
		this.getView().getModel().getData().ODATA_ENTITYSET = "";
		this.getView().getModel().getData().COLUMN_NAME = "";
		this.getView().getModel().updateBindings();
	},

	handleOdataServiceValueHelp:function(){
		var that = this;
		if(!that.byId("viewInput").getValue()){
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_HANA_VIEW"));
		}
		else{
			var selectedHanaView = that.getView().getModel().getProperty("/VIEW_NAME");
			selectedHanaView = (selectedHanaView.indexOf("/") != -1 ? selectedHanaView.split("/") : selectedHanaView
					.split("::"));
			var hanaOdataServiceHelpDialog = new sap.m.SelectDialog({
				title : that.oResourceBundle.getText("SELECT_ODATA_SERVICE"),
				noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
				items : {
					path : "/ODATA_FOR_ENTITY(P_PACKAGE='" + selectedHanaView[0] + "',P_OBJECT='" + selectedHanaView[1] + "')/Results",
					template : new sap.m.StandardListItem({
						title : {
							parts : [{
								path : "PACKAGE",
								type : new sap.ui.model.type.String()
							}, {
								path : "OBJECT",
								type : new sap.ui.model.type.String()
							}],
							formatter : function(o, p, s) {
								o = o.replace(/\./g, '/');
								return "/" + o + "/" + p + ".xsodata";
							}
						},
					})
				},
				confirm : function(oEvent) {
					that.getView().getModel().setProperty("/ODATA_URL", oEvent.getParameter("selectedItem").getProperty("title"));
				},
				liveChange : function(oEvent) {
					var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
					var oFilterPackage = new sap.ui.model.Filter("tolower(PACKAGE)", sap.ui.model.FilterOperator.Contains,
							searchValue);
					var oFilterObject = new sap.ui.model.Filter("tolower(OBJECT)", sap.ui.model.FilterOperator.Contains,
							searchValue);
					var oBinding = oEvent.getSource().getBinding("items");
					oBinding.filter(new sap.ui.model.Filter([oFilterPackage, oFilterObject], false));
				}
			});
			hanaOdataServiceHelpDialog.setModel(that.oDataModel);
			hanaOdataServiceHelpDialog.open();
		}
	},
	handleEntitySetValueHelp : function(){
		var that = this;
		if(!that.byId("odataServiceInput").getValue()){
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_ODATA_SERVICE_URL"));
		}
		else{
			var that = this;
			that.oModelForEntity;

			var hanaEntitySetHelpDialog = new sap.m.SelectDialog({
				title : that.oResourceBundle.getText("SELECT_ENTITY_SET"),
				noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
				items : {
					path : "/entitySet",
					template : new sap.m.StandardListItem({
						title : {
							parts : [{
								path : "entityName",
								type : new sap.ui.model.type.String()
							}],
							formatter : function(o,s) {
								return o;
							}
						},
					})
				},
				confirm : function(oEvent) {
					that.getView().getModel().setProperty("/ODATA_ENTITYSET", oEvent.getParameter("selectedItem").getProperty("title"));
				},
				liveChange : function(oEvent) {
					var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
					var oFilterPackage = new sap.ui.model.Filter("tolower(entityName)", sap.ui.model.FilterOperator.Contains,
							searchValue);
					var oBinding = oEvent.getSource().getBinding("items");
					oBinding.filter(new sap.ui.model.Filter([oFilterPackage], false));
				}

			});

			try {
				if(that.getView().getModel().getData().VIEW_NAME)  {
					that.populateRelevantEntitySet(hanaEntitySetHelpDialog);
				}
				else {
					that.oModelForEntity = that.populateEntitySet(that.getView().byId("odataServiceInput").getValue());
					hanaEntitySetHelpDialog.setModel(that.oModelForEntity);
					hanaEntitySetHelpDialog.open();
				}
			} catch (err) {

			} 
		}
	},
	handleMeasureValueHelp : function(){
		var that = this;
		if(!that.byId("entitySetInput").getValue()){
			sap.suite.smartbusiness.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_ENTITY_SET"));		
		}
		else{
			try {
				that.oModelForMeasure = that.populateMeasure(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
			} catch (err) {
			}
			var hanaMeasureHelpDialog = new sap.m.SelectDialog({
				title : that.oResourceBundle.getText("SELECT_MEASURE"),
				noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
				items : {
					path : "/measures",
					template : new sap.m.StandardListItem({
						title : {
							parts : [{
								path : "measureName",
								type : new sap.ui.model.type.String()
							}],
							formatter : function(o,s) {
								return o;
							}
						},
					})
				},
				confirm : function(oEvent) {
					that.getView().getModel().setProperty("/COLUMN_NAME", oEvent.getParameter("selectedItem").getProperty("title"));
				},
				liveChange : function(oEvent) {
					var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
					var oFilterPackage = new sap.ui.model.Filter("tolower(measureName)", sap.ui.model.FilterOperator.Contains,searchValue);
					var oBinding = oEvent.getSource().getBinding("items");
					oBinding.filter(new sap.ui.model.Filter([oFilterPackage], false));
				}
			});
			hanaMeasureHelpDialog.setModel(that.oModelForMeasure);
			hanaMeasureHelpDialog.open();
		}
	},

	handleChangeAdditionalInfo : function(oEvent) {
		var that = this;
		that.getView().getModel().setProperty("info", that.getView().byId("additionalInfoId"));
	},


	populateEntitySet : function(dataSource) {
		var oController = this;
		var oModel = new sap.ui.model.json.JSONModel();
		var resultEntity = [], entityDataArray = [], obj = {};
		var i;
		resultEntity = sap.suite.smartbusiness.odata.getAllEntitySet(dataSource);
		for (i = 0; i < resultEntity.length; i++) {
			obj = {};
			obj.entityName = resultEntity[i];
			entityDataArray.push(obj);
		}
		oModel.setData({
			entitySet : entityDataArray
		});
		return oModel;
	},

	validateQueryServiceURI : function(dataSource) {
		dataSource = jQuery.trim(dataSource);
		if (!jQuery.sap.startsWith(dataSource, "/")) {
			dataSource = "/" + dataSource;
		}
		if (jQuery.sap.endsWith(dataSource, "/")) {
			dataSource = dataSource.substring(0, dataSource.length - 1);
		}
		return dataSource;
	},

	populateMeasure : function(dataSource, entitySet) {
		dataSource = this.validateQueryServiceURI(dataSource) + "";
		entitySet = entitySet + "";
		var measures = [], measureDataArray = [], obj = {};
		var i;
		measures = sap.suite.smartbusiness.odata.getAllMeasures(dataSource, entitySet);
		for (i = 0; i < measures.length; i++) {
			obj = {};
			obj.measureName = measures[i];
			measureDataArray.push(obj);
		}
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData({
			measures : measureDataArray
		});
		return oModel;
	},

	onODataServiceLoad : function() {
		var that = this;
		setTimeout(function() {
			that.getView().getModel().setProperty("/ODATA_URL",that.getView().byId("odataServiceSelect").getSelectedItem().getText());
			that.getView().byId("odataServiceSelect").fireChange();
		}, 0);
		this.oDataModel.detachRequestCompleted(that.onODataServiceLoad, that);
	},

	onEntitySetServiceLoad : function() {
		var that = this;

		setTimeout(function() {
			that.getView().getModel().setProperty("/ODATA_ENTITYSET",that.getView().byId("entitySetSelect").getSelectedItem().getText());
			that.getView().byId("entitySetSelect").fireChange();
		}, 0);
	},

	onMeasureServiceLoad : function() {
		var that = this;

		setTimeout(function() {
			that.getView().getModel().setProperty("/COLUMN_NAME",that.getView().byId("valueMeasureSelect").getSelectedItem().getText());
			that.getView().byId("valueMeasureSelect").fireChange();
		}, 0);
	},

	onExit: function() {
		var hashObj = hasher || window.hasher;
		if(!(hashObj.getHash())) {
			sap.suite.smartbusiness.utils.backToHome();
		}
		if(sap.suite.smartbusiness.modelerAppCache && sap.suite.smartbusiness.modelerAppCache.createSBKPI && sap.suite.smartbusiness.modelerAppCache.createSBKPI.appFromWorkspace) {
			delete sap.suite.smartbusiness.modelerAppCache.createSBKPI.appFromWorkspace;
		}
	}
});
}; // end of sap/suite/ui/smartbusiness/designtime/kpi/view/S1.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.tools.migration.Component') ) {
// define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.tools.migration.Component");
jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained


// extent of sap.ca.scfld.md.ComponentBase
sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.designtime.tools.migration.Component", {
	metadata : sap.ca.scfld.md.ComponentBase.createMetaData("FS1", {
		"name": "Fullscreen Sample",
		"version" : "1.0.0-SNAPSHOT",
		"library" : "sap.suite.ui.smartbusiness.designtime.tools.migration",
		"includes" : ["../../../lib/formatters.js","../../../lib/Util.js"],
		"dependencies" : {
			"libs" : ["sap.m", "sap.ca.ui"],
			"components" : []
		},
		"config" : {
			"resourceBundle" : "i18n/i18n.properties",
			"titleResource" : "FULLSCREEN_TITLE",
//			"icon" : "sap-icon://Fiori2/F0818",
//			"favIcon" : "./resources/sap/ca/ui/themes/base/img/favicon/F0002_My_Accounts.ico",
//			"homeScreenIconPhone" : "./resources/sap/ca/ui/themes/base/img/launchicon/F0002_My_Accounts/57_iPhone_Desktop_Launch.png",
//			"homeScreenIconPhone@2" : "./resources/sap/ca/ui/themes/base/img/launchicon/F0002_My_Accounts/114_iPhone-Retina_Web_Clip.png",
//			"homeScreenIconTablet" : "./resources/sap/ca/ui/themes/base/img/launchicon/F0002_My_Accounts/72_iPad_Desktop_Launch.png",
//			"homeScreenIconTablet@2" : "./resources/sap/ca/ui/themes/base/img/launchicon/F0002_My_Accounts/144_iPad_Retina_Web_Clip.png",
			"startupImage320x460" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/320_x_460.png",
			"startupImage640x920" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_920.png",
			"startupImage640x1096" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_1096.png",
			"startupImage768x1004" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/768_x_1004.png",
			"startupImage748x1024" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/748_x_1024.png",
			"startupImage1536x2008" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1536_x_2008.png",
			"startupImage1496x2048" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1496_x_2048.png"
		},
		viewPath : "sap.suite.ui.smartbusiness.designtime.tools.migration.view",
		fullScreenPageRoutes : {
			// fill the routes to your full screen pages in here.
			"fullscreen" : {
				"pattern" : "",
				"view" : "S1"
			}
		//	"subscreen" : {
		//		"pattern" : "second",
		//		"view" : "S2"
		//	}
		}
	}),	

	/**
	 * Initialize the application
	 * 
	 * @returns {sap.ui.core.Control} the content
	 */
	createContent : function() {
		var oViewData = {component: this};
		return sap.ui.view({
			viewName : "sap.suite.ui.smartbusiness.designtime.tools.migration.Main",
			type : sap.ui.core.mvc.ViewType.XML,
			viewData : oViewData
		});
	}
});

}; // end of sap/suite/ui/smartbusiness/designtime/tools/migration/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.tools.migration.Configuration') ) {

jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.tools.migration.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained


sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.designtime.tools.migration.Configuration", {

	oServiceParams: {
		serviceList: [
//			{
//				name: "NO_SERVICE_ENTERED",
//				 masterCollection: "ProductCollection",
//				serviceUrl: "NO_SERVICE_ENTERED",
//				isDefault: true
//			}
		]
	},

	getAppConfig: function() {
		return this.oAppConfig;
	},

	/**
	 * @inherit
	 */
	getServiceList: function () {
		return this.oServiceParams.serviceList;
	},

	getMasterKeyAttributes: function () {
		return ["Id"];
	},
	getExcludedQueryStringParameters : function() {
		return ["sap-client","sap-language"];
	},
	getHanaSystem : function() {
        var hashObj = hasher || window.hasher; 
        var hashArr = hashObj.getHashAsArray();
        if(hashArr && hashArr.length && hashArr[0]) {
               var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
               for(var i=0,l=hashParameters.length; i<l; i++) {
                     if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                            return hashParameters[i].split("=")[1]; 
                     }
               }
        }
        return "";
	},
	getServiceParams : function() {
		if(sap.ushell && sap.ushell.Container) {
			var serviceUrl = this.oServiceParams.serviceList[0].serviceUrl;
	        this.oServiceParams.serviceList[0].serviceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(serviceUrl, this.getHanaSystem());
		}
        return this.oServiceParams;
	},

});

}; // end of sap/suite/ui/smartbusiness/designtime/tools/migration/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.tools.migration.view.S1.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.tools.migration.view.S1.controller');
jQuery.sap.require('sap.ca.scfld.md.controller.BaseFullscreenController'); // unlisted dependency retained

//jQuery.sap.includeStyleSheet("sap/suite/ui/smartbusiness/designtime/kpi/view/KpiParametersCss.css");
sap.ca.scfld.md.controller.BaseFullscreenController.extend("sap.suite.ui.smartbusiness.designtime.tools.migration.view.S1", {

	onInit: function() {
		jQuery.sap.require("sap.m.MessageBox");

		var rootPath = jQuery.sap.getModulePath("sap.suite.ui.smartbusiness.designtime.tools.migration");
		var migrationController=this;
		
		var that = this;

		// set i18n model
		this.oI18nModel = new sap.ui.model.resource.ResourceModel({
			bundleName: "sap/suite/ui/smartbusiness/designtime/tools/migration/i18n/i18n"
		});
		this.getView().setModel(migrationController.oI18nModel, "i18n");



		var oOptions = {
				bSuppressBookmarkButton : {},
				oEditBtn : {
					sI18nBtnTxt : migrationController.oI18nModel.getResourceBundle().getText("BTN_MIGRATE"),
					onBtnPressed : function(evt) {
						migrationController.migrateData();
					}
				},
				buttonList : [{
					sI18nBtnTxt : migrationController.oI18nModel.getResourceBundle().getText("BTN_RESET"),
					onBtnPressed : function(evt) {
						migrationController.clearData();
					}
				}, {
					sI18nBtnTxt : migrationController.oI18nModel.getResourceBundle().getText("BTN_CANCEL"),
					onBtnPressed : function(evt) {
						migrationController.cancel();
					}
				}]
		};
		this.setHeaderFooterOptions(oOptions);

		this.newEvaluationsModel=new sap.ui.model.json.JSONModel();
		var newEvaluationsObject={EVALUATIONS:[
		                                       {
		                                    	   ID: "",
		                                    	   INDICATOR: "",
		                                    	   TITLE: "",
		                                    	   OLD_ID: "",
		                                    	   VALID_ID:""

		                                       }
		                                       ]};
		this.newEvaluationsModel.setData((newEvaluationsObject));

		this._dialog = new sap.m.BusyDialog({});

		//console.log(this.newEvaluationsModel);

		this.getView().byId("kpiInput").setValueHelpOnly(true);

	},

	showBusy: function (op) {

		var migrationController=this;
		var that = this;
		
		if(op=="L")
			this._dialog.setText(migrationController.oI18nModel.getResourceBundle().getText("LOADING_DIALOG_TEXT"));

		if(op=="M")
			this._dialog.setText(migrationController.oI18nModel.getResourceBundle().getText("MIGRATING_DIALOG_TEXT"));

		this._dialog.open();

	},

	hideBusy: function () {
		var that = this;

		this._dialog.close();

	},


	handleKpiValueHelp: function(){
		var migrationController = this;
		var that = this;
		this.selectedKPIs=[];
		this.oldModel = new sap.ui.model.odata.ODataModel("/sap/hba/apps/kpi/s/odata/modeler_services.xsodata", true);
		this.oldModelDDA=new sap.ui.model.odata.ODataModel("/sap/hba/apps/kpi/s/odata/query_view_annotation_services.xsodata", true);

		this.oldModelVariants = new sap.ui.model.odata.ODataModel("/sap/hba/apps/kpi/s/odata/variant_services.xsodata", true);
		this.newModel= new sap.ui.model.odata.ODataModel("/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata", true);


		this.kpiList=new sap.m.ObjectListItem({
			title:"{id}",
			number:"{evalCount}",
			numberUnit:"Evaluations",
			attributes: new sap.m.ObjectAttribute({text:"{text}" }),
		});


		var kPIListDialog = new sap.m.SelectDialog({
			//            contentWidth:"30%",
			title: migrationController.oI18nModel.getResourceBundle().getText("SELECT_KPI_DIALOG"),
			multiSelect:true,
			noDataText: "No data found",
			items: {
				path: "/ActiveKPIs",
				sorter: new sap.ui.model.Sorter({
					path: 'id',
					descending: false
				}),
				template: migrationController.kpiList
			},
			confirm: function(oEvent){

				//       migrationController.selectedKPIs.push(oEvent.getParameter("selectedItem").getProperty("title"));
				var context=oEvent.mParameters.selectedContexts;

				migrationController.selectedKPIs=[];     
				for(var i=0;i<context.length;i++){
					//       migrationController.selectedKPIs.push(context[i].getContent()[0].getContent()[0].getText());
					migrationController.selectedKPIs.push(context[i].sPath.split('\'')[1]);
				}


				if(migrationController.selectedKPIs.length>0){
					var temp;
					var check=0;
					var param1="";
					var j=0;
					for(var i=j;i<migrationController.selectedKPIs.length;i++){


						param1="ID eq '"+migrationController.selectedKPIs[i]+"' and IS_ACTIVE eq 1";
						temp=migrationController.serviceCallDataValidation("/INDICATORS",["$format=json","$filter="+param1],migrationController.newModel);

						if(temp.success){
							//     check=1;
							//     migrationController.selectedKPIs.splice(i, 1);
							check++;
							//     i=i-1;


						}


					}
				}
				//     console.log(migrationController.selectedKPIs);

				if(migrationController.selectedKPIs.length>0){



					if(check>0&&check!=migrationController.selectedKPIs.length){
						sap.m.MessageBox.show(
								migrationController.oI18nModel.getResourceBundle().getText("MSG_FEW_KPIs_MIGRATED"),
								sap.m.MessageBox.Icon.INFORMATION ,
								migrationController.oI18nModel.getResourceBundle().getText("INFORMATION_MSG_TITLE"),
								[sap.m.MessageBox.Action.OK],
								function(){ 
									//migrationController.getView().setBusy(true);
									migrationController.showBusy("L");

									setTimeout(function(){migrationController.bindEvaluations();},2500);}
						);
					}
					if(check==0){

						migrationController.showBusy("L");

						setTimeout(function(){migrationController.bindEvaluations();},2500);
//						sap.m.MessageBox.show(


//						migrationController.oI18nModel.getResourceBundle().getText("MSG_NO_KPIs_MIGRATED"),
//						sap.m.MessageBox.Icon.INFORMATION ,
//						migrationController.oI18nModel.getResourceBundle().getText("INFORMATION_MSG_TITLE"),
//						[sap.m.MessageBox.Action.OK],
//						function(){
//						//  migrationController.getView().setBusy(true);

//						}
//						);
					}


					if(check>0&&check==migrationController.selectedKPIs.length){

						sap.m.MessageBox.show(
								migrationController.oI18nModel.getResourceBundle().getText("MSG_ALL_KPIs_MIGRATED"),
								sap.m.MessageBox.Icon.INFORMATION ,
								migrationController.oI18nModel.getResourceBundle().getText("INFORMATION_MSG_TITLE"),
								[sap.m.MessageBox.Action.OK],
								function(){
									//  migrationController.getView().setBusy(true);
									migrationController.showBusy("L");

									setTimeout(function(){migrationController.bindEvaluations();},2500);
								}
								//      function(){migrationController.bindEvaluations}
						);
					}

				}


			},
			liveChange: function(oEvent){
				var searchValue ="'" + oEvent.getParameter("value").toLowerCase() + "'";
				var oFilter = new sap.ui.model.Filter("tolower(id)", sap.ui.model.FilterOperator.Contains, searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter([oFilter]);
			}
		});           


		kPIListDialog.setModel(migrationController.oldModel);
		kPIListDialog.open();
	},

	bindEvaluations: function(){

		var migrationController=this;
		migrationController.testVal=[];

		var that = this;


		var values=[];
		var temp={};

		var viewCount="";

		var oldEvaluationsList= this.getView().byId("oldList");
		var newEvaluationsList= this.getView().byId("newList");


		var popoverModelData={};

		popoverModelData.VIEWS=[];

		var dialogModelData={};
		dialogModelData.CONFIGURATIONS=[];




		var viewPopoverList= new sap.m.List({

		});
		var viewDialogList= new sap.m.List({

		});
		var popoverModel=new sap.ui.model.json.JSONModel();
		this.dialogModel=new sap.ui.model.json.JSONModel();

		this.newConfigurationObject=[];
		migrationController.newConfigurationObject.CONFIGURATIONS=[];

		var popoverStandardListItem=new sap.m.ObjectListItem ({
			title:"{viewName}",
		});

		var viewCustomListGrid = new sap.ui.layout.Grid({
			hSpacing: 1,
			vSpacing: 1, 
			content: [
			          new sap.m.Label({
			        	  text: "{CONFIGURATION_NAME}",
			        	  design:sap.m.LabelDesign.Bold ,
			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L12 M12 S12"
			        	  })
			          }),

			          new sap.m.Label({
			        	  text: "*View ID: ",
			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L3 M3 S3",
			        		  linebreakL: true,
			        		  linebreakM: true,
			        		  linebreakS: true
			        	  })
			          }),
			          new sap.m.Input({
			        	  type:"Text",

			        	  value:"{VALID_CONFIGURATION_ID}",

			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L8 M8 S8",

			        	  }),



			          }),
			          ]
		});


		viewPopoverList.bindItems({
			path: "/VIEWS",
			//     filters: [oFilter],
			sorter: new sap.ui.model.Sorter({
				path: 'viewName',
				descending: false,
				//  group: true
			}),
			template: popoverStandardListItem


		});


		var viewPopover = new sap.m.ResponsivePopover({
			//title: "Edit Configuration",
			//endButton:new sap.m.Button({
//			text:"Close",
//			press:function(){
//			viewPopover.close();}
//			}),
			//     content:[viewDialogList]
		});




		var viewDialogCustomList=new sap.m.CustomListItem({

			content: viewCustomListGrid,

		});


		var viewDialog = new sap.m.Dialog({
			//title: "Edit Configuration",
			endButton:new sap.m.Button({
				text:migrationController.oI18nModel.getResourceBundle().getText("BTN_SAVE_CLOSE"),
				press:function(){
					var x=this.getModel().getData().CONFIGURATIONS;

					for(var i=0;i<x.length;i++){
						for(var j=0;j<migrationController.newConfigurationObject.CONFIGURATIONS.length;j++){
							if(x[i].CONFIGURATION_NAME==migrationController.newConfigurationObject.CONFIGURATIONS[j].CONFIGURATION_NAME){
								migrationController.newConfigurationObject.CONFIGURATIONS[j].CONFIGURATION_ID=x[i].VALID_CONFIGURATION_ID;
							}
						}
					}
					
					viewDialog.close();}
			}),
			//     content:[viewDialogList]
		});

		viewDialog.addContent(viewDialogList);
		viewDialog.setModel(migrationController.dialogModel);


		viewDialogList.bindItems({
			path: "/CONFIGURATIONS",
			//     filters: [oFilter],
			sorter: new sap.ui.model.Sorter({
				path: 'CONFIGURATION_NAME',
				descending: false,
				//  group: true
			}),
			template: viewDialogCustomList


		});

		viewPopover.addContent(viewPopoverList);
		viewPopover.setModel(popoverModel);


		oldEvaluationsList.attachUpdateStarted(function(oEvent) {
			this.setBusy(true);
			this.setNoDataText(migrationController.oI18nModel.getResourceBundle().getText("LIST_LOADING"));
		});
		oldEvaluationsList.attachUpdateFinished(function(oEvent) {
			this.setBusy(false);
			this.setNoDataText("");
			//sap.m.MessageToast.show(JSON.stringify(oEvent.getParameters()))
		});

		newEvaluationsList.attachUpdateStarted(function(oEvent) {
			this.setBusy(true);
			this.setNoDataText(migrationController.oI18nModel.getResourceBundle().getText("LIST_LOADING"));
		});
		newEvaluationsList.attachUpdateFinished(function(oEvent) {
			this.setBusy(false);
			this.setNoDataText("");
			//sap.m.MessageToast.show(JSON.stringify(oEvent.getParameters()))
		});

		for(var i=0;i<migrationController.selectedKPIs.length;i++){
			temp={};  
			temp.operator="EQ";
			temp.value1=migrationController.selectedKPIs[i];
			values.push(temp);
		}

		var oFilter = new sap.ui.model.odata.Filter("objectId", values,false);


		var oldEvaluationsListGrid = new sap.ui.layout.Grid({
			hSpacing: 1,
			vSpacing: 1, 
			content: [
			          new sap.m.Label({
			        	  text: "{evaluationText}",
			        	  design:sap.m.LabelDesign.Bold ,
			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L9 M9 S9"
			        	  })
			          }).addStyleClass("listContentTop"),

			          new sap.m.Label({
			        	  text: this.oI18nModel.getResourceBundle().getText("VAR_ID"),
			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L2 M2 S3",
			        		  linebreakL: true,
			        		  linebreakM: true,
			        		  linebreakS: true
			        	  })
			          }),
			          new sap.m.Input({
			        	  type:"Text",
			        	  value:"{variantId}",

			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L8 M8 S8",
			        	  }),
			        	  editable:false


			          }),

			          new sap.m.Link({
			        	  text:{path:"/variantId",formatter:function(){
			        		  var viewCount;
			        		  var selectedKPI=this.getBindingContext().getProperty("objectId");
			        		  var selectedVariant=this.getBindingContext().getProperty("variantId");
			        		  var temp=migrationController.serviceCallDataValidation("/DDA_CONFIG_PROPERTIES",["$format=json","$filter=(objectId eq '"+selectedKPI+"' and variantId eq '"+selectedVariant+"' and property eq 'queryAnnotationDocURIs')"],migrationController.oldModel);
			        		  //console.log(temp);
			        		  if(temp.success){
			        			  viewCount=temp.data[0].value.split(",").length;
			        			  return(that.oI18nModel.getResourceBundle().getText("CONFIGURED_DD", viewCount));
			        		  }
			        		  else{
			        			  viewCount = 0;
			        			  return(that.oI18nModel.getResourceBundle().getText("CONFIGURED_DD", viewCount));
			        		  }
			        	  }},

			        	  press:function(oEvent){
			        		  //     var capturedSource=oEvent.getSource();
			        		  viewCount="";
			        		  popoverModelData.VIEWS=[];

			        		  var selectedKPI=this.getBindingContext().getProperty("objectId");
			        		  var selectedVariant=this.getBindingContext().getProperty("variantId");
			        		  var temp=migrationController.serviceCallDataValidation("/DDA_CONFIG_PROPERTIES",["$format=json","$filter=(objectId eq '"+selectedKPI+"' and variantId eq '"+selectedVariant+"' and property eq 'queryAnnotationDocURIs')"],migrationController.oldModel);
			        		  //console.log(temp);
			        		  if(temp.success){
			        			  viewCount=temp.data[0].value.split(",").length;
			        			  //viewPopoverList.setHeaderText("Configured Views("+viewCount+")");
			        			  viewPopover.setTitle(that.oI18nModel.getResourceBundle().getText("CONFIGURED_DD", viewCount));

			        			  for(var i=0;i<viewCount;i++){
			        				  var obj={};
			        				  obj.viewName=temp.data[0].value.split(",")[i];
			        				  popoverModelData.VIEWS.push(obj);
			        			  }
			        			  popoverModel.setData(popoverModelData);
//			        			  this.setModel(popoverModel);
//			        			  this.setText("Configured Views("+viewCount+")");
			        			  viewPopover.openBy(oEvent.getSource());
			        			  //     viewPopover.open();


			        		  }else{
			        			  popoverModel.setData(popoverModelData);
			        			  viewCount = 0;
			        			  viewPopover.setTitle(that.oI18nModel.getResourceBundle().getText("CONFIGURED_DD", viewCount));
//			        			  this.setModel(popoverModel);
//			        			  this.setText("Configured Views(0)");
			        			  //viewPopover.open();
//			        			  setTimeout(function()
//			        			  {
			        			  viewPopover.openBy(oEvent.getSource());
//			        			  }(capturedSource),5000);

			        		  }
			        	  },
			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L8 M8 S8",
			        		  indent:"L2 M2 S2",
			        		  linebreakL: true,
			        		  linebreakM: true,
			        		  linebreakS: true
			        	  }),
			        	  //editable:false


			          }),

			          ]
		});



		var newEvaluationsListGrid = new sap.ui.layout.Grid({
			hSpacing: 1,
			vSpacing: 1, 
			content: [
			          new sap.m.Label({
			        	  text: "{TITLE}",
			        	  design:sap.m.LabelDesign.Bold ,
			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L9 M9 S9"
			        	  })
			          }).addStyleClass("listContentTop"),

			          new sap.m.Label({
			        	  text: "*" + this.oI18nModel.getResourceBundle().getText("EVAL_ID"),
			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L3 M3 S3",
			        		  linebreakL: true,
			        		  linebreakM: true,
			        		  linebreakS: true
			        	  })
			          }),
			          new sap.m.Input({
			        	  type:"Text",

			        	  value:"{ID}",
			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L8 M8 S8",

			        		  liveChange: function(e){
			        			  //     console.log(e);
			        		  },
			        		  change: function(e){
			        			  //            console.log(e);
			        		  }
			        	  }),



			          }),


			          new sap.m.Link({
			        	  text:{path:"/variantId",formatter:function(){
			        		  var viewCount;
			        		  var selectedKPI=this.getBindingContext().getProperty("OLD_ID").split("~")[0];
			        		  var selectedVariant=this.getBindingContext().getProperty("OLD_ID").split("~")[1];
			        		  var temp=migrationController.serviceCallDataValidation("/DDA_CONFIG_PROPERTIES",["$format=json","$filter=(objectId eq '"+selectedKPI+"' and variantId eq '"+selectedVariant+"' and property eq 'queryAnnotationDocURIs')"],migrationController.oldModel);
			        		  //console.log(temp);
			        		  if(temp.success){
			        			  viewCount=temp.data[0].value.split(",").length;
			        			  return(that.oI18nModel.getResourceBundle().getText("CONFIGURED_DD", viewCount));
			        		  }
			        		  else{
			        			  viewCount = 0;
			        			  return(that.oI18nModel.getResourceBundle().getText("CONFIGURED_DD", viewCount));
			        		  }
			        	  }},
			        	  press:function(oEvent){
			        		  viewCount="";
			        		  dialogModelData.CONFIGURATIONS=[];

			        		  var selectedKPI=this.getBindingContext().getProperty("OLD_ID").split("~")[0];
			        		  var selectedVariant=this.getBindingContext().getProperty("OLD_ID").split("~")[1];
			        		  var temp=migrationController.serviceCallDataValidation("/DDA_CONFIG_PROPERTIES",["$format=json","$filter=(objectId eq '"+selectedKPI+"' and variantId eq '"+selectedVariant+"' and property eq 'queryAnnotationDocURIs')"],migrationController.oldModel);
			        		  //     console.log(temp);
			        		  if(temp.success){
			        			  viewCount=temp.data[0].value.split(",").length;
			        			  //viewPopoverList.setHeaderText("Configured Views("+viewCount+")");
			        			  
			        			  viewDialog.setTitle(this.oI18nModel.getResourceBundle().getText("CONFIGURED_DD", viewCount));


			        			  var count=0;
			        			  for(var i=0;i<viewCount;i++){
			        				  count=0;
			        				  for(var j=0;j<migrationController.newConfigurationObject.CONFIGURATIONS.length;j++){
			        					  if(migrationController.newConfigurationObject.CONFIGURATIONS[j].CONFIGURATION_NAME==temp.data[0].value.split(",")[i]){
			        						  count++;
			        						  var c = migrationController.newConfigurationObject.CONFIGURATIONS[j].VALID_CONFIGURATION_ID;
			        						  migrationController.newConfigurationObject.CONFIGURATIONS[j].VALID_CONFIGURATION_ID = migrationController.newConfigurationObject.CONFIGURATIONS[j].CONFIGURATION_ID;
			        						  migrationController.newConfigurationObject.CONFIGURATIONS[j].CONFIGURATION_ID = c;
			        						  dialogModelData.CONFIGURATIONS.push(jQuery.extend({},migrationController.newConfigurationObject.CONFIGURATIONS[j]));
			        						  
			        						  break;
			        					  }

			        				  }
			        				  if(count==0){
			        					  var obj={};
			        					  obj.CONFIGURATION_NAME=temp.data[0].value.split(",")[i];
			        					  obj.CONFIGURATION_ID=temp.data[0].objectId+"~"+temp.data[0].variantId+"_"+temp.data[0].value.split(",")[i];
			        					  obj.VALID_CONFIGURATION_ID=this.getBindingContext().getProperty("VALID_ID")+"."+temp.data[0].value.split(",")[i];
			        					  obj.EVALUATION_ID=this.getBindingContext().getProperty("OLD_ID");
			        					  dialogModelData.CONFIGURATIONS.push(obj);

			        					  migrationController.newConfigurationObject.CONFIGURATIONS.push(jQuery.extend({},obj));
			        				  }
			        			  }



			        			  migrationController.dialogModel.setData(dialogModelData);
//			        			  this.setModel(popoverModel);
//			        			  this.setText("Configured Views("+viewCount+")");
			        			  viewDialog.open();


			        		  }else{
			        			  migrationController.dialogModel.setData(dialogModelData);
			        			  viewCount = 0;
			        			  viewDialog.setTitle(that.oI18nModel.getResourceBundle().getText("CONFIGURED_DD", viewCount));
//			        			  this.setModel(popoverModel);
//			        			  this.setText("Configured Views(0)");
			        			  viewDialog.open();
			        		  }
			        	  },
			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L8 M8 S8",
			        		  indent:"L3 M3 S3",
			        		  linebreakL: true,
			        		  linebreakM: true,
			        		  linebreakS: true
			        	  }),
			          })
			          ]
		});



		var newCustomEvaluationsList=new sap.m.CustomListItem({

			content: newEvaluationsListGrid,

		});

		var customOldEvaluationList=new sap.m.CustomListItem({

			content: oldEvaluationsListGrid,


		});







		newEvaluationsList.setModel(this.newEvaluationsModel);
		//     newEvaluationsList.unbindItems();
		newEvaluationsList.bindItems({
			path: "/EVALUATIONS",
			//     filters: [oFilter],
			sorter: new sap.ui.model.Sorter({
				path: 'INDICATOR',
				descending: false,
				group: true
			}),
			template: newCustomEvaluationsList


		});


		oldEvaluationsList.setModel(migrationController.oldModel);
		//oldEvaluationsList.setModel(migrationController.oldModelDDA,"ModelDDA");


		oldEvaluationsList.bindItems({
			path:"/ActiveEvaluations",
			filters:[ oFilter],
			sorter: new sap.ui.model.Sorter({
				path: 'objectId',
				descending: false,
				group: true
			}),
			template: customOldEvaluationList
		});



		this.prepareTempDataForNewList();
	},

	prepareTempDataForNewList:function(){

		var newEvaluationsObject={};
		newEvaluationsObject.EVALUATIONS=[];

		var that = this;
		var migrationController=this;
		migrationController.objectToPush={};
		migrationController.objectToPush.INDICATORS=[];
		migrationController.objectToPush.INDICATOR_TEXTS=[];
		migrationController.objectToPush.EVALUATIONS=[];
		migrationController.objectToPush.EVALUATION_TEXTS=[];
		migrationController.objectToPush.EVALUATION_FILTERS=[];
		migrationController.objectToPush.EVALUATION_VALUES=[];
		migrationController.objectToPush.TAGS=[];

		var KPIData=[];
		var KPITextData=[];

		var noOfEvaluations=0;
		var EvaluationData=[];


		var VariantData=[];

		var KPIObjectResponse={};
		var EvaluationObjectResponse={};
		var KPITextsObjectResponse={};
		var KPIObjectParameters="";
		var EvaluationObjectParameters="";
		var KPITextsObjectParameters="";

		for(var i=0;i<migrationController.selectedKPIs.length;i++){


			if(i<(migrationController.selectedKPIs.length-1)){
				KPIObjectParameters+="id eq '"+migrationController.selectedKPIs[i]+"' or ";
				EvaluationObjectParameters+="objectId eq '"+migrationController.selectedKPIs[i]+"' or ";
			}

			else{
				KPIObjectParameters+="id eq '"+migrationController.selectedKPIs[i]+"'";
				EvaluationObjectParameters+="objectId eq '"+migrationController.selectedKPIs[i]+"'";
			}
		}

		KPIObjectResponse=migrationController.serviceCallDataValidation("/ActiveKPIs",["$format=json","$filter=("+KPIObjectParameters+")"],migrationController.oldModel);
		EvaluationObjectResponse=migrationController.serviceCallDataValidation("/ActiveEvaluations",["$format=json","$filter=("+EvaluationObjectParameters+")"],migrationController.oldModel);
		KPITextsObjectResponse=migrationController.serviceCallDataValidation("/ActiveKPIsTexts",["$format=json","$filter=("+KPIObjectParameters+")"],migrationController.oldModel);


		if(KPIObjectResponse.success){
			KPIData=KPIObjectResponse.data;
		}
		if(EvaluationObjectResponse.success){
			EvaluationData=EvaluationObjectResponse.data;
		}

		if(KPITextsObjectResponse.success){
			KPITextData=KPITextsObjectResponse.data;
		}


		if(KPIData.length>0&&KPITextData.length>0){

			for(var i=0;i<KPITextData.length;i++){

				migrationController.objectToPush.INDICATOR_TEXTS.push(migrationController.migrateIndicatorTexts(KPITextData[i]));

			}
		}


		if(KPIData.length>0){

			for(var i=0;i<KPIData.length;i++){
				var tempTags=[];
				migrationController.objectToPush.INDICATORS.push(migrationController.migrateIndicator(KPIData[i]));

				//tempIndicatorTexts=migrationController.migrateIndicatorTexts(KPIData[i]);

				tempTags=migrationController.migrateTags(KPIData[i]);
				if(tempTags.length>0){
					for(var k=0;k<tempTags.length;k++){
						migrationController.objectToPush.TAGS.push(tempTags[k]);
					}
				}

				if(EvaluationData.length>0){

					for(var j=0;j<EvaluationData.length;j++){
						if(KPIData[i].id==EvaluationData[j].objectId){
							newEvaluationsObject.EVALUATIONS.push(migrationController.migrateTempEvaluation(KPIData[i],EvaluationData[j]));

						}

					}
				}
			}

		}

		this.newEvaluationsModel.setData(newEvaluationsObject);
		migrationController.hideBusy();
		if(newEvaluationsObject.EVALUATIONS.length==0){
			sap.m.MessageBox.show(
					migrationController.oI18nModel.getResourceBundle().getText("MSG_NO_EVALUATIONS"),
					sap.m.MessageBox.Icon.INFORMATION ,
					migrationController.oI18nModel.getResourceBundle().getText("INFORMATION_MSG_TITLE"),
					[sap.m.MessageBox.Action.OK]
					//      function(){migrationController.bindEvaluations}
			);
		}
		//console.log(newEvaluationsObject);
	},




	prepareMigrationData:function(){


		var migrationController=this;

		var that = this;
		var newEvaluationsObject=this.newEvaluationsModel.getData();

		var newConfigurationObject=migrationController.newConfigurationObject.CONFIGURATIONS;


		if(migrationController.objectToPush.EVALUATIONS.length>0)
			migrationController.objectToPush.EVALUATIONS=[];

		migrationController.objectToPush.EVALUATION_TEXTS=[];
		migrationController.objectToPush.EVALUATION_FILTERS=[];
		migrationController.objectToPush.EVALUATION_VALUES=[];

		migrationController.objectToPush.DDA_MASTER=[];
		migrationController.objectToPush.DDA_CONFIG=[];
		migrationController.objectToPush.DDA_FILTERS=[];
		migrationController.objectToPush.DDA_HEADER=[];
		migrationController.objectToPush.DDA_CHART=[];
		migrationController.objectToPush.DDA_COLUMNS=[];

		migrationController.objectToPush.DDA_MASTER_TEXT=[];


		var KPIData=[];

		var noOfEvaluations=0;
		var EvaluationData=[];

		var EvaluationTextData;
		var VariantData=[];

		var KPIObjectResponse={};
		var EvaluationObjectResponse={};
		var EvaluationsTextsObjectResponse={};
		var VariantValuesObjectResponse={};
		var DDAObjectResponse={};
		var viewObjectResponse={};
		var viewPropertiesObjectResponse={};

		var KPIObjectParameters="";
		var EvaluationObjectParameters="";
		var EvaluationsTextsObjectParameters="";
		var VariantValuesObjectParameters="";
		var DDAObjectParameters="";
		var viewObjectParameters="";
		var viewPropertiesObjectParameters="";

		for(var i=0;i<migrationController.selectedKPIs.length;i++){


			if(i<(migrationController.selectedKPIs.length-1)){
				KPIObjectParameters+="id eq '"+migrationController.selectedKPIs[i]+"' or ";
				EvaluationObjectParameters+="objectId eq '"+migrationController.selectedKPIs[i]+"' or ";

			}

			else{
				KPIObjectParameters+="id eq '"+migrationController.selectedKPIs[i]+"'";
				EvaluationObjectParameters+="objectId eq '"+migrationController.selectedKPIs[i]+"'";
			}
		}



		KPIObjectResponse=migrationController.serviceCallDataValidation("/ActiveKPIs",["$format=json","$filter=("+KPIObjectParameters+")"],migrationController.oldModel);
		EvaluationObjectResponse=migrationController.serviceCallDataValidation("/ActiveEvaluations",["$format=json","$filter=("+EvaluationObjectParameters+")"],migrationController.oldModel);
		EvaluationsTextsObjectResponse=migrationController.serviceCallDataValidation("/ActiveEvaluationsTexts",["$format=json","$filter=("+EvaluationObjectParameters+")"],migrationController.oldModel);

		//=migrationController.serviceCallDataValidation("/QUERYVIEWANNOTATION",["$format=json","$filter=("+param2+")"],migrationController.oldModelDDA);



		if(KPIObjectResponse.success){
			KPIData=KPIObjectResponse.data;
		}
		if(EvaluationObjectResponse.success){
			EvaluationData=EvaluationObjectResponse.data;
		}
		if(EvaluationsTextsObjectResponse.success){
			EvaluationTextData=EvaluationsTextsObjectResponse.data;
		}

		if(EvaluationTextData&&EvaluationData){
			if(EvaluationTextData.length>0&&EvaluationData.length>0){

				for(var i=0;i<EvaluationTextData.length;i++){

					migrationController.objectToPush.EVALUATION_TEXTS.push(migrationController.migrateEvaluationTexts(EvaluationTextData[i],newEvaluationsObject.EVALUATIONS));
				}

			}
		}

		if(KPIData.length>0&&EvaluationData.length>0){

			for(var i=0;i<KPIData.length;i++){

				for(var j=0;j<EvaluationData.length;j++){
					if(KPIData[i].id==EvaluationData[j].objectId){

						var tempEvaluationValues=[];
						migrationController.objectToPush.EVALUATIONS.push(migrationController.migrateEvaluation(KPIData[i],EvaluationData[j],newEvaluationsObject.EVALUATIONS));

						tempEvaluationValues=migrationController.migrateEvaluationValues(KPIData[i],EvaluationData[j],newEvaluationsObject.EVALUATIONS);
						for(var k=0;k<tempEvaluationValues.length;k++){
							migrationController.objectToPush.EVALUATION_VALUES.push(tempEvaluationValues[k]);

						}

					}

				}

			}






			for(var j=0;j<EvaluationData.length;j++){
				VariantValuesObjectParameters="id eq '"+EvaluationData[j].variantId+"'";
				VariantValuesObjectResponse=migrationController.serviceCallDataValidation("/VARIANT_VALUES",["$format=json","$filter=("+VariantValuesObjectParameters+")"],migrationController.oldModelVariants);
				if(VariantValuesObjectResponse.success){
					var tempEvaluationFilters=[];
					tempEvaluationFilters=migrationController.migrateEvaluationFilters(EvaluationData[j],VariantValuesObjectResponse.data,newEvaluationsObject.EVALUATIONS);
					for(var k=0;k<tempEvaluationFilters.length;k++){
						migrationController.objectToPush.EVALUATION_FILTERS.push(tempEvaluationFilters[k]);

					}
				}
			}

			var viewCount="";

			for(var j=0;j<EvaluationData.length;j++){

				var temp=migrationController.serviceCallDataValidation("/DDA_CONFIG_PROPERTIES",["$format=json","$filter=(objectId eq '"+EvaluationData[j].objectId+"' and variantId eq '"+EvaluationData[j].variantId+"' and property eq 'queryAnnotationDocURIs')"],migrationController.oldModel);



				DDAObjectParameters="objectId eq '"+EvaluationData[j].objectId+"' and variantId eq '"+EvaluationData[j].variantId+"'";
				DDAObjectResponse=migrationController.serviceCallDataValidation("/DDA_CONFIG_PROPERTIES",["$format=json","$filter=("+DDAObjectParameters+")"],migrationController.oldModel);


				if(temp.success&&DDAObjectResponse.success){
					var dda={};
					var counts=0;
					var countq=0;
					var validEval="";
					var E_ID;

					var validVariant=temp.data[0].variantId.split(' ').join('');
					var variantToJoin="";

					if(validVariant.indexOf('.')>-1){
						variantToJoin=validVariant.split('.');
						validEval=E_ID||(temp.data[0].objectId + "."+variantToJoin[variantToJoin.length-1]);

					}
					else{
						validEval=E_ID||(temp.data[0].objectId + "."+validVariant);

					}
					//console.log(temp);

					viewCount=temp.data[0].value.split(",").length;

					//            if(viewCount!=newConfigurationObject.length){

					for(var s=0;s<viewCount;s++){
						countq=0;
						counts=0;
						for(var z=0;z<newConfigurationObject.length;z++){
							if(newConfigurationObject[z].CONFIGURATION_NAME==temp.data[0].value.split(",")[s])
							{counts++;
							break;


							}

						}
						if(counts==0){
							dda={};

							dda.CONFIGURATION_ID=validEval+"."+temp.data[0].value.split(",")[s];
							dda.CONFIGURATION_NAME=temp.data[0].value.split(",")[s];
							for(var q=0;q<newEvaluationsObject.EVALUATIONS.length;q++){

								if((EvaluationData[j].objectId+"~"+EvaluationData[j].variantId)==newEvaluationsObject.EVALUATIONS[q].OLD_ID)
								{
									countq++;
									dda.EVALUATION_ID=newEvaluationsObject.EVALUATIONS[q].OLD_ID;
									break;
								}
							}
							if(countq==0)
							{
								dda.EVALUATION_ID=EvaluationData[j].objectId+"~"+EvaluationData[j].variantId;
								break
							}

							newConfigurationObject.push(jQuery.extend({},dda));
						}
					}
					//     }


					viewObjectParameters="";
					for(var k=0;k<viewCount;k++){

						if(k<(viewCount-1)){
							viewObjectParameters+="queryViewAnnotationDocumentURI eq '"+temp.data[0].value.split(",")[k]+"' or ";

						}

						else{
							viewObjectParameters+="queryViewAnnotationDocumentURI eq '"+temp.data[0].value.split(",")[k]+"'";
						}

					}
					if(j==0||viewPropertiesObjectParameters=="")
						viewPropertiesObjectParameters=viewObjectParameters;
					else   
						viewPropertiesObjectParameters+=" or "+viewObjectParameters;

					if(viewObjectParameters.length>0)
					{
						viewObjectResponse=migrationController.serviceCallDataValidation("/QUERYVIEWANNOTATION",["$format=json","$expand=QUERY_VIEW_PROPERTIES&$filter=("+viewObjectParameters+")"],migrationController.oldModelDDA);



						if(viewObjectResponse.success)
							migrationController.migrateDDA(DDAObjectResponse.data,viewObjectResponse.data,newEvaluationsObject.EVALUATIONS,newConfigurationObject);
					}
//					tempEvaluationValues=migrationController.migrateEvaluationValues(KPIData[i],EvaluationData[j],newEvaluationsObject.EVALUATIONS);
//					for(var k=0;k<tempEvaluationValues.length;k++){
//					migrationController.objectToPush.EVALUATION_VALUES.push(tempEvaluationValues[k]);

//					}
				}      


			}

			//console.log(newConfigurationObject);
			if(viewPropertiesObjectParameters.length>0){
				viewPropertiesObjectResponse=migrationController.serviceCallDataValidation("/QUERYVIEWANNOTATIONTEXTS",["$format=json","$filter=("+viewPropertiesObjectParameters+")"],migrationController.oldModelDDA);
				var tempDDAText=[];
				if(viewPropertiesObjectResponse.success){
					tempDDAText=migrationController.migrateDDAText(viewPropertiesObjectResponse.data,newConfigurationObject,newEvaluationsObject.EVALUATIONS);
					for(var k=0;k<tempDDAText.length;k++){
						migrationController.objectToPush.DDA_MASTER_TEXT.push(tempDDAText[k]);

					}
				}
			}





		}




		//console.log(migrationController.objectToPush);



	},






	migrateIndicator: function(K, mode) {
		mode = mode || 1;
		var INDICATORS = {};
		INDICATORS.ID=K.id;
		INDICATORS.IS_ACTIVE=mode;
		INDICATORS.TYPE="KPI";
		INDICATORS.TITLE=K.text;
		INDICATORS.DESCRIPTION=K.description||"";
		if(Number(K.improvementDirection) == 0) {
			INDICATORS.GOAL_TYPE="RA";
		}
		else if(Number(K.improvementDirection) == 1) {
			INDICATORS.GOAL_TYPE="MA";
		}
		else {
			INDICATORS.GOAL_TYPE="MI";
		}
		INDICATORS.DATA_SPECIFICATION="";
		INDICATORS.ODATA_URL=K.queryServiceURI;
		INDICATORS.ODATA_ENTITYSET=K.queryQualifiedResultEntitySetName;
		INDICATORS.VIEW_NAME="";
		INDICATORS.COLUMN_NAME=K.queryResultMeasurePropertyName;
		INDICATORS.OWNER_NAME=K.owner||"";
		INDICATORS.OWNER_ID="";
		INDICATORS.ENTITY_TYPE="";
		INDICATORS.OWNER_E_MAIL="";

		INDICATORS.ODATA_PROPERTY="";
		INDICATORS.SEMANTIC_OBJECT=K.semanticObject;
		INDICATORS.ACTION=K.semanticObjectAlias;

		return INDICATORS;
	},

	migrateIndicatorTexts:function(K){

		var INDICATOR_TEXTS={};

		INDICATOR_TEXTS.ID=K.id;
		INDICATOR_TEXTS.IS_ACTIVE=1;
		INDICATOR_TEXTS.LANGUAGE=K.sapLanguageKey;
		INDICATOR_TEXTS.TITLE=K.text;
		INDICATOR_TEXTS.DESCRIPTION=K.description||"";


		return INDICATOR_TEXTS;

	},

	migrateTags: function(K, mode, type) {
		mode = mode || 1;
		type = type || "IN";
		var TAGS = [];
		var tags = {};

		if(K.tags)
		{
			if(K.tags.length>0){
				var tagList = K.tags.split(",");
				for(var i=0,l=tagList.length; i<l; i++) {
					tags.ID=K.id;
					tags.IS_ACTIVE=mode;
					tags.TYPE=type;
					tags.TAG=tagList[i];
					TAGS.push(tags);
					tags = {};
				}
				return TAGS;
			}
		}
		return TAGS;
	},

	migrateEvaluation: function(K, E,Etemp, mode) {
		mode = mode || 1;
		var EVALUATIONS = {};
		var E_ID;

		for(var i=0;i<Etemp.length;i++){
			if((E.objectId + "~" + E.variantId)==Etemp[i].OLD_ID)
				E_ID=Etemp[i].ID;

		}

		var variantToJoin="";
		var validVariant=E.variantId.split(' ').join('');
		if(validVariant.indexOf('.')>-1){
			variantToJoin=validVariant.split('.');
			EVALUATIONS.ID=E_ID||(E.objectId + "."+variantToJoin[variantToJoin.length-1]);

		}
		else{
			EVALUATIONS.ID=E_ID||(E.objectId + "."+validVariant);

		}


		//EVALUATIONS.ID=E_ID||(E.objectId + "~" + E.variantId);
		EVALUATIONS.IS_ACTIVE=mode;
		EVALUATIONS.INDICATOR=E.objectId;
		EVALUATIONS.INDICATOR_TYPE="KPI";
		EVALUATIONS.TITLE=E.evaluationText;
		EVALUATIONS.DESCRIPTION="";  
		EVALUATIONS.VIEW_NAME="";
		EVALUATIONS.SCALING=E.scaleFactor; 
		EVALUATIONS.ODATA_URL=K.queryServiceURI;
		EVALUATIONS.ODATA_ENTITYSET=K.queryQualifiedResultEntitySetName;
		EVALUATIONS.COLUMN_NAME=K.queryResultMeasurePropertyName;
		EVALUATIONS.OWNER_NAME=K.owner||"";
		EVALUATIONS.OWNER_ID=""
			EVALUATIONS.OWNER_E_MAIL=""
				EVALUATIONS.ENTITY_TYPE="";
		if(Number(K.improvementDirection) == 0) {
			EVALUATIONS.GOAL_TYPE="RA";
		}
		else if(Number(K.improvementDirection) == 1) {
			EVALUATIONS.GOAL_TYPE="MA";
		}
		else {
			EVALUATIONS.GOAL_TYPE="MI";
		}
		EVALUATIONS.DATA_SPECIFICATION="";
		EVALUATIONS.ODATA_PROPERTY="";
		EVALUATIONS.SEMANTIC_OBJECT=K.semanticObject;
		EVALUATIONS.ACTION=K.semanticObjectAlias;
		EVALUATIONS.VALUES_SOURCE="FIXED";

		return EVALUATIONS;
	},

	migrateEvaluationTexts:function(E,Etemp){

		var E_ID;
		var EVALUATION_TEXTS={};


		for(var i=0;i<Etemp.length;i++){
			if((E.objectId + "~" + E.variantId)==Etemp[i].OLD_ID){
				E_ID=Etemp[i].ID;
				break;
			}

		}

		var variantToJoin="";
		var validVariant=E.variantId.split(' ').join('');
		if(validVariant.indexOf('.')>-1){
			variantToJoin=validVariant.split('.');
			EVALUATION_TEXTS.ID=E_ID||(E.objectId + "."+variantToJoin[variantToJoin.length-1]);

		}
		else{
			EVALUATION_TEXTS.ID=E_ID||(E.objectId + "."+validVariant);

		}

		//            EVALUATION_TEXTS.ID=(E.objectId + "~" + E.variantId);
		EVALUATION_TEXTS.IS_ACTIVE=1;
		EVALUATION_TEXTS.LANGUAGE=E.sapLanguageKey;
		EVALUATION_TEXTS.TITLE=E.evaluationText;
		EVALUATION_TEXTS.DESCRIPTION="";


		return EVALUATION_TEXTS;

	},

	migrateTempEvaluation: function(K, E, mode) {
		mode = mode || 1;
		var EVALUATIONS = {};


		var variantToJoin="";
		var validVariant=E.variantId.split(' ').join('');
		if(validVariant.indexOf('.')>-1){
			variantToJoin=validVariant.split('.');
			EVALUATIONS.ID=E.objectId + "."+variantToJoin[variantToJoin.length-1];
			EVALUATIONS.VALID_ID=E.objectId + "." + variantToJoin[variantToJoin.length-1];
		}
		else{
			EVALUATIONS.ID=E.objectId + "."+validVariant;
			EVALUATIONS.VALID_ID=E.objectId + "." + validVariant;
		}

		EVALUATIONS.OLD_ID=E.objectId + "~" + E.variantId;
		EVALUATIONS.VARIANT_ID=validVariant;
		EVALUATIONS.INDICATOR=E.objectId;
		EVALUATIONS.TITLE=E.evaluationText;
		return EVALUATIONS;
	},


	migrateEvaluationValues: function(K, E,Etemp, mode) {
		mode = mode || 1;
		var EVALUATION_VALUES=[];
		var evaluationValues = {};

		var E_ID;
		for(var i=0;i<Etemp.length;i++){
			if((E.objectId + "~" + E.variantId)==Etemp[i].OLD_ID)
				E_ID=Etemp[i].ID;

		}

		var alterEval="";
		var variantToJoin="";
		var validVariant=E.variantId.split(' ').join('');
		if(validVariant.indexOf('.')>-1){
			variantToJoin=validVariant.split('.');
			alterEval=E_ID||(E.objectId + "."+variantToJoin[variantToJoin.length-1]);

		}
		else{
			alterEval=E_ID||(E.objectId + "."+validVariant);

		}

		//EVALUATIONS.ID=E_ID||(E.objectId + "~" + E.variantId);
		var count = 0;

		if((E.toleranceRangeHighValue == 0) || E.toleranceRangeHighValue){
			evaluationValues.ID=alterEval;
			evaluationValues.IS_ACTIVE=mode;
			evaluationValues.TYPE="WH";
			evaluationValues.FIXED=E.toleranceRangeHighValue;
			evaluationValues.COLUMN_NAME="";
			evaluationValues.ODATA_PROPERTY="";
			EVALUATION_VALUES.push(evaluationValues);
			evaluationValues = {};
		}
		if((E.deviationRangeHighValue == 0) || E.deviationRangeHighValue){   
			evaluationValues.ID=alterEval;
			evaluationValues.IS_ACTIVE=mode;
			evaluationValues.TYPE="CH";
			evaluationValues.FIXED=E.deviationRangeHighValue;
			evaluationValues.COLUMN_NAME="";
			evaluationValues.ODATA_PROPERTY="";
			EVALUATION_VALUES.push(evaluationValues);
			evaluationValues = {};
		}

		if((E.toleranceRangeLowValue == 0) || E.toleranceRangeLowValue){     
			evaluationValues.ID=alterEval;
			evaluationValues.IS_ACTIVE=mode;
			evaluationValues.TYPE="WL";
			evaluationValues.FIXED=E.toleranceRangeLowValue;
			evaluationValues.COLUMN_NAME="";
			evaluationValues.ODATA_PROPERTY="";
			EVALUATION_VALUES.push(evaluationValues);
			evaluationValues = {};
		}
		if((E.deviationRangeLowValue == 0) || E.deviationRangeLowValue){     
			evaluationValues.ID=alterEval;
			evaluationValues.IS_ACTIVE=mode;
			evaluationValues.TYPE="CL";
			evaluationValues.FIXED=E.deviationRangeLowValue;
			evaluationValues.COLUMN_NAME="";
			evaluationValues.ODATA_PROPERTY="";
			EVALUATION_VALUES.push(evaluationValues);
			evaluationValues = {};
		}
		if((E.target == 0) || E.target) {
			evaluationValues.ID=alterEval;
			evaluationValues.IS_ACTIVE=mode;
			evaluationValues.TYPE="TA";
			evaluationValues.FIXED=E.target;
			evaluationValues.COLUMN_NAME="";
			evaluationValues.ODATA_PROPERTY="";
			EVALUATION_VALUES.push(evaluationValues);
			evaluationValues = {};
		}
		return EVALUATION_VALUES;
	},


	migrateEvaluationFilters: function(E, V,Etemp, mode) {
		mode = mode || 1;
		var EVALUATION_FILTERS = [];
		var E_ID;
		for(var i=0;i<Etemp.length;i++){
			if((E.objectId + "~" + E.variantId)==Etemp[i].OLD_ID)
				E_ID=Etemp[i].ID;

		}

		var alterEval="";
		var variantToJoin="";
		var validVariant=E.variantId.split(' ').join('');
		if(validVariant.indexOf('.')>-1){
			variantToJoin=validVariant.split('.');
			alterEval=E_ID||(E.objectId + "."+variantToJoin[variantToJoin.length-1]);

		}
		else{
			alterEval=E_ID||(E.objectId + "."+validVariant);

		}

		var evaluationFilters = {};
		for(var i=0,l=V.length; i<l; i++) {
			evaluationFilters.ID=alterEval;
			evaluationFilters.IS_ACTIVE=mode;

//			if(V[i].filterPropertyName=="F")
//	evaluationFilters.NAME="FI";
//			if(V[i].filterPropertyName=="I")
//			evaluationFilters.NAME="PA";

			evaluationFilters.NAME=V[i].filterPropertyName

			evaluationFilters.VALUE_1=V[i].value;
			evaluationFilters.VALUE_2=V[i].valueTo||"";
			evaluationFilters.OPERATOR=V[i].comparator;

			if(V[i].type=="F")
				evaluationFilters.TYPE="FI";
			if(V[i].type=="I")
				evaluationFilters.TYPE="PA";

			EVALUATION_FILTERS.push(evaluationFilters);
			evaluationFilters = {};
		}
		return EVALUATION_FILTERS;
	},

	migrateDDAText:function(C,Ctemp,Etemp){

		var migrationController=this;
		var DDA_MASTER_TEXT=[];
		var DDA_TEXT={};

		var C_ID=[];
		var E_ID=[];
		for(var j=0;j<C.length;j++){
			for(var i=0;i<Ctemp.length;i++){

				if(C[j].queryViewAnnotationDocumentURI==Ctemp[i].CONFIGURATION_NAME)
				{      
					C_ID[j]=Ctemp[i].CONFIGURATION_ID;
					//E_ID[j]=Ctemp[i].EVALUATION_ID;
					for(var k=0;k<Etemp.length;k++){

						if(Ctemp[i].EVALUATION_ID==Etemp[k].OLD_ID)
						{      
							E_ID[j]=Etemp[k].ID;
							break;
							//E_ID[j]=Ctemp[i].EVALUATION_ID;
						}

					}
				}



			}


		}

		for(var i=0;i<C.length;i++){
			DDA_TEXT={};
			DDA_TEXT.CONFIGURATION_ID=C_ID[i];
			DDA_TEXT.EVALUATION_ID=E_ID[i];
			//DDA_TEXT.CONFIGURATION_ID=C[i].queryViewAnnotationDocumentURI;
			DDA_TEXT.SAP_LANGUAGE_KEY=C[i].sapLanguageKey;
			DDA_TEXT.TEXT=C[i].title;
			DDA_TEXT.IS_ACTIVE = 1;

			DDA_MASTER_TEXT.push(DDA_TEXT);
		}

		return DDA_MASTER_TEXT;

	},


	migrateDDAText:function(C,Ctemp,Etemp){

		var migrationController=this;
		var DDA_MASTER_TEXT=[];
		var DDA_TEXT={};

		var C_ID=[];
		var E_ID=[];
		for(var j=0;j<C.length;j++){
			for(var i=0;i<Ctemp.length;i++){

				if(C[j].queryViewAnnotationDocumentURI==Ctemp[i].CONFIGURATION_NAME)
				{      
					C_ID[j]=Ctemp[i].CONFIGURATION_ID;
					//E_ID[j]=Ctemp[i].EVALUATION_ID;
					for(var k=0;k<Etemp.length;k++){

						if(Ctemp[i].EVALUATION_ID==Etemp[k].OLD_ID)
						{      
							E_ID[j]=Etemp[k].ID;
							break;
							//E_ID[j]=Ctemp[i].EVALUATION_ID;
						}

					}
				}



			}


		}

		for(var i=0;i<C.length;i++){
			DDA_TEXT={};
			DDA_TEXT.CONFIGURATION_ID=C_ID[i];
			DDA_TEXT.EVALUATION_ID=E_ID[i];
			//DDA_TEXT.CONFIGURATION_ID=C[i].queryViewAnnotationDocumentURI;
			DDA_TEXT.SAP_LANGUAGE_KEY=C[i].sapLanguageKey;
			DDA_TEXT.TEXT=C[i].title;
			DDA_TEXT.IS_ACTIVE = 1;

			DDA_MASTER_TEXT.push(DDA_TEXT);
		}

		return DDA_MASTER_TEXT;

	},


	migrateDDA:function(DDA, QVA,Etemp,Ctemp) {

		var migrationController=this;
		var ddaObj = {};
		var qvaArr = [];

		var qvaObj = {};

		var E_ID;
		for(var i=0;i<Etemp.length;i++){
			if((DDA[0].objectId + "~" + DDA[0].variantId)==Etemp[i].OLD_ID)
				E_ID=Etemp[i].ID;

		}

		var alterEval="";
		var variantToJoin="";
		var validVariant=DDA[0].variantId.split(' ').join('');
		if(validVariant.indexOf('.')>-1){
			variantToJoin=validVariant.split('.');
			alterEval=E_ID||(DDA[0].objectId + "."+variantToJoin[variantToJoin.length-1]);

		}
		else{
			alterEval=E_ID||(DDA[0].objectId + "."+validVariant);

		}


		for(var i=0,l=QVA.length; i<l; i++) {
			qvaObj = QVA[i];
			var count=0;
			for(var j=0,m=QVA[i].QUERY_VIEW_PROPERTIES.length; j<m; j++) {
				qvaObj[QVA[i].QUERY_VIEW_PROPERTIES[j]["property"]] = QVA[i].QUERY_VIEW_PROPERTIES[j]["value"];
			}
			if(qvaArr.length==0)
				qvaArr.push(jQuery.extend({},qvaObj))

				else{
					for(var k=0;k<qvaArr.length;k++){
						if(qvaObj.queryViewAnnotationDocumentURI==qvaArr[k].queryViewAnnotationDocumentURI)
							count++;


					}
					if(count==0)
						qvaArr.push(jQuery.extend({},qvaObj));
				}

			delete qvaObj.QUERY_VIEW_PROPERTIES;
		}



		for(var i=0,l=DDA.length; i<l; i++) {
			if(DDA[i].property == 'queryAnnotationDocURIs') {
				ddaObj.queryAnnotationDocURIs = DDA[i].value.split(",");
			}
			else if(DDA[i].property == 'filters'){
				ddaObj.filters = DDA[i].value.split(",");
			}
			else {
				ddaObj[DDA[i].property] = DDA[i].value;
			}
		}

		/*
		 *            ADDED THE FILTERS CONFIG AND HEADERS CODE HERE MOVING THEM TO EVAL LEVEL
		 */

		// MIGRATE CONTENT FROM DDA_CONFIG_PROPERTIES TO DDA_FILTER
		ddaConfigObj = {};
		ddaConfigObj.EVALUATION_ID = alterEval;
		ddaConfigObj.CONFIGURATION_ID = "NIL";

		if(ddaObj.filters){
			for(j=0,m=ddaObj.filters.length; j<m; j++) {
				ddaConfigObj.DIMENSION = ddaObj.filters[j];                          
				ddaConfigObj.VISIBILITY = 1;
				ddaConfigObj.IS_ACTIVE = 1;
				migrationController.objectToPush.DDA_FILTERS.push(jQuery.extend({},ddaConfigObj));               
			}
		}

		// MIGRATE CONTENT FROM DDA_CONFIG_PROPERTIES TO DDA_HEADER
		ddaConfigObj = {};
		ddaConfigObj.EVALUATION_ID = alterEval;
		ddaConfigObj.CONFIGURATION_ID="NIL";

		ddaConfigObj.REFERENCE_EVALUATION_ID = ddaConfigObj.EVALUATION_ID;
		ddaConfigObj.VISUALIZATION_TYPE = 'NT';
		ddaConfigObj.VISUALIZATION_ORDER = 1;
		ddaConfigObj.VISIBILITY = 1;
		ddaConfigObj.DIMENSION = null;
		ddaConfigObj.IS_ACTIVE = 1;
		migrationController.objectToPush.DDA_HEADER.push(jQuery.extend({},ddaConfigObj));

		ddaConfigObj.VISUALIZATION_TYPE = 'AT';
		ddaConfigObj.VISUALIZATION_ORDER = 2;
		ddaConfigObj.VISIBILITY = 1;
		ddaConfigObj.DIMENSION = null;
		ddaConfigObj.IS_ACTIVE = 1;
		migrationController.objectToPush.DDA_HEADER.push(jQuery.extend({},ddaConfigObj));

		ddaConfigObj.VISUALIZATION_TYPE = 'TT';
		ddaConfigObj.VISUALIZATION_ORDER = 3;
		ddaConfigObj.VISIBILITY = 1;
		ddaConfigObj.DIMENSION = null;
		ddaConfigObj.IS_ACTIVE = 1;
		migrationController.objectToPush.DDA_HEADER.push(jQuery.extend({},ddaConfigObj));

		// MIGRATE CONTENT FROM DDA_CONFIG_PROPERTIES TO DDA_CONFIGURATION
		ddaConfigObj = {};
		ddaConfigObj.EVALUATION_ID = alterEval;
		ddaConfigObj.CONFIGURATION_ID = "NIL";

		ddaConfigObj.PROPERTY_TYPE = 'SAP_FILTER';
		ddaConfigObj.PROPERTY_VALUE = '';
		ddaConfigObj.VISIBILITY = ddaObj.isFilter || 0;
		ddaConfigObj.IS_ACTIVE = 1;
		migrationController.objectToPush.DDA_CONFIG.push(jQuery.extend({},ddaConfigObj));



		ddaConfigObj.PROPERTY_TYPE = 'SAP_AGGREGATE_VALUE';
		ddaConfigObj.PROPERTY_VALUE = '';
		ddaConfigObj.VISIBILITY = ddaObj.aggregateNumberEnabled || 0;
		ddaConfigObj.IS_ACTIVE = 1;
		migrationController.objectToPush.DDA_CONFIG.push(jQuery.extend({},ddaConfigObj));

		ddaConfigObj.PROPERTY_TYPE = 'SAP_HEADER';
		ddaConfigObj.PROPERTY_VALUE = '';
		ddaConfigObj.VISIBILITY = ddaObj.isTarget || 0;
		ddaConfigObj.IS_ACTIVE = 1;
		migrationController.objectToPush.DDA_CONFIG.push(jQuery.extend({},ddaConfigObj));

		ddaConfigObj.PROPERTY_TYPE = 'QUERY_SERVICE_URI';
		ddaConfigObj.PROPERTY_VALUE = QVA[0].queryServiceURI;
		ddaConfigObj.VISIBILITY = 1;
		ddaConfigObj.IS_ACTIVE = 1;
		migrationController.objectToPush.DDA_CONFIG.push(jQuery.extend({},ddaConfigObj));

		ddaConfigObj.PROPERTY_TYPE = 'QUERY_ENTITY_SET';
		ddaConfigObj.PROPERTY_VALUE = QVA[0].queryQualifiedResultEntitySetName;
		ddaConfigObj.VISIBILITY = 1;
		ddaConfigObj.IS_ACTIVE = 1;
		migrationController.objectToPush.DDA_CONFIG.push(jQuery.extend({},ddaConfigObj));

//		ddaConfigObj.PROPERTY_TYPE = 'THRESHOLD_MEASURE';
//		ddaConfigObj.PROPERTY_VALUE = qvaArr[i].semanticColorMeasure ? qvaArr[i].semanticColorMeasure.split(",") : null;
//		ddaConfigObj.VISIBILITY = 1;
//		ddaConfigObj.IS_ACTIVE = 1;
//		migrationController.objectToPush.DDA_CONFIG.push(jQuery.extend({},ddaConfigObj));



		for(var i=0,l=ddaObj.queryAnnotationDocURIs.length; i<l; i++) {
			var ddaConfigObj = {};
			var C_ID;

			for(var k=0;k<Ctemp.length;k++){
				if(ddaObj.queryAnnotationDocURIs[i]==Ctemp[k].CONFIGURATION_NAME)
					C_ID=Ctemp[k].CONFIGURATION_ID;

			}



			// MIGRATE CONTENT FROM DDA_CONFIG_PROPERTIES TO DDA_MASTER
			ddaConfigObj.EVALUATION_ID = alterEval;
			ddaConfigObj.CONFIGURATION_ID = C_ID||(alterEval+"."+ddaObj.queryAnnotationDocURIs[i]);
			ddaConfigObj.TEXT = qvaArr[i].title;
			ddaConfigObj.CONFIG_ORDER = i+1;
			ddaConfigObj.IS_ACTIVE = 1;
			migrationController.objectToPush.DDA_MASTER.push(jQuery.extend({},ddaConfigObj));




			/*
                            REMOVED THE FILTERS CONFIG AND HEADERS CODE FROM HERE MOVED OUTSIDE THE FOR LOOP

			 */



			ddaConfigObj = {};
			var columnOrder = 1;
			ddaConfigObj.EVALUATION_ID = alterEval;
			ddaConfigObj.CONFIGURATION_ID = C_ID||(alterEval+"."+ddaObj.queryAnnotationDocURIs[i]);

			// MIGRATE CONTENT FROM DDA_CONFIG_PROPERTIES TO DDA_COLUMNS
			var measures = qvaArr[i].measurePropertyNames.split(",");
			var dimensions = qvaArr[i].dimensionPropertyNames.split(",");
			var queryViewPropArr =qvaArr[i].QUERY_VIEW_PROPERTIES.results.filter(function(x){ return x["property"]=="dimensionPropertySortNames"});
			var sortDimVal = queryViewPropArr.length ? queryViewPropArr[0].value : null;
			var sortDimensions = sortDimVal ? sortDimVal.split(",") : null;
			queryViewPropArr =qvaArr[i].QUERY_VIEW_PROPERTIES.results.filter(function(x){ return x["property"]=="measurePropertySortNames"});
			var sortMsrVal = queryViewPropArr.length ? queryViewPropArr[0].value : null;
			var sortMeasures = sortMsrVal ? sortMsrVal.split(",") : null;
			queryViewPropArr =qvaArr[i].QUERY_VIEW_PROPERTIES.results.filter(function(x){ return x["property"]=="colorNames"});
			var colorVal = queryViewPropArr.length? queryViewPropArr[0].value : null;
			var colorNames = colorVal ? colorVal.split(",") : null;
			queryViewPropArr =qvaArr[i].QUERY_VIEW_PROPERTIES.results.filter(function(x){ return x["property"]=="colorType"}); 
			var colTypeVal = queryViewPropArr.length ? queryViewPropArr[0].value : null;
			queryViewPropArr =qvaArr[i].QUERY_VIEW_PROPERTIES.results.filter(function(x){ return x["property"]=="semanticColorMeasure"});
			var semMsrVal = queryViewPropArr.length ? queryViewPropArr[0].value : null;
			queryViewPropArr = qvaArr[i].QUERY_VIEW_PROPERTIES.results.filter(function(x){ return x["property"]=="hiddenMeasureNames"});
			var hidMsrVal = queryViewPropArr.length ? queryViewPropArr[0].value : null;
			var hidMsrArr = hidMsrVal ? hidMsrVal.split(",") : null;
			//var semanticColorMeasure = qvaArr[i].semanticColorMeasure ? qvaArr[i].semanticColorMeasure.split(",") : null;
			for(var j=0,m=dimensions.length; j<m; j++) {                                      
				ddaConfigObj.NAME = dimensions[j];
				ddaConfigObj.TYPE = 'DIMENSION';
				if(sortDimensions!=null)
				{
					if(sortDimensions.length)
					{
						ddaConfigObj.SORT_BY = (sortDimensions && sortDimensions[j]) ? sortDimensions[j] : dimensions[j];
					}
					else
						ddaConfigObj.SORT_BY =dimensions[j];
				}
				else
					ddaConfigObj.SORT_BY =dimensions[j];

//				else
//	ddaConfigObj.SORT_BY=null;
ddaConfigObj.AXIS = 1;
ddaConfigObj.STACKING = 0;
ddaConfigObj.VISIBILITY = "BOTH";
ddaConfigObj.COLOR = null;
switch(Number(qvaArr[i].orderBy)) {
case 1: ddaConfigObj.SORT_ORDER = null;
break;
case 2: ddaConfigObj.SORT_ORDER = null;
break;
case 3: ddaConfigObj.SORT_ORDER = 'asc';
break;
case 4: ddaConfigObj.SORT_ORDER = 'desc';
break;
case 0: ddaConfigObj.SORT_ORDER = null;
break;
}
ddaConfigObj.COLUMNS_ORDER = columnOrder++;
ddaConfigObj.IS_ACTIVE = 1;

migrationController.objectToPush.DDA_COLUMNS.push(jQuery.extend({},ddaConfigObj));
			}

			for(var j=0,m=measures.length; j<m; j++) {                                        
				ddaConfigObj.NAME = measures[j];
				ddaConfigObj.TYPE = 'MEASURE';
				ddaConfigObj.VISIBILITY = "BOTH";
				if(sortMeasures!=null)
				{
					if(sortMeasures.length)
					{
						ddaConfigObj.SORT_BY = (sortMeasures && sortMeasures[j]) ? sortMeasures[j] : measures[j];
					}
					else
						ddaConfigObj.SORT_BY =measures[j];
				}
				else
					ddaConfigObj.SORT_BY =measures[j];
//				if(sortMeasures.length)
//	ddaConfigObj.SORT_BY = (sortMeasures && sortMeasures[j]) ? sortMeasures[j] : measures[j];
				if(qvaArr[i].chartType && (jQuery.sap.startsWithIgnoreCase(qvaArr[i].chartType,"dual")) && (j < 2)){
					ddaConfigObj.AXIS = j+1;
				}
				else{
					ddaConfigObj.AXIS = 1;
				}
				ddaConfigObj.STACKING = 0;
				ddaConfigObj.COLOR = null;
				switch(Number(qvaArr[i].orderBy)) {
				case 1: ddaConfigObj.SORT_ORDER = 'asc';
				break;
				case 2: ddaConfigObj.SORT_ORDER = 'desc';
				break;
				case 3: ddaConfigObj.SORT_ORDER = null;
				break;
				case 4: ddaConfigObj.SORT_ORDER = null;
				break;
				case 0: ddaConfigObj.SORT_ORDER = null;
				break;
				}
				ddaConfigObj.COLUMNS_ORDER = columnOrder++;
				ddaConfigObj.IS_ACTIVE = 1;

				if(qvaArr[i].chartType && (qvaArr[i].chartType.indexOf("Stacked") > -1)) {
					ddaConfigObj.STACKING = 1;
				}
				if(hidMsrArr!=null){
					if(hidMsrArr && (hidMsrArr.indexOf(measures[j])>-1)){
						ddaConfigObj.VISIBILITY = "CHART";
					}
				}
				if(colTypeVal == 0 || colTypeVal == 2) {
					if(colorNames!=null)
						ddaConfigObj.COLOR = (colorNames && colorNames[j]) ? colorNames[j] : ""; 
						else
							ddaConfigObj.COLOR="";
				}
				else if(qvaArr[i].colorType == 1) {
					//ddaConfigObj.COLOR = semanticColorMeasure;
				} 

				migrationController.objectToPush.DDA_COLUMNS.push(jQuery.extend({},ddaConfigObj));
			}



			// MIGRATE CONTENT FROM DDA_CONFIG_PROPERTIES TO DDA_CHART
			ddaConfigObj = {};
			ddaConfigObj.EVALUATION_ID = alterEval;
			ddaConfigObj.CONFIGURATION_ID = C_ID||(alterEval+"."+ddaObj.queryAnnotationDocURIs[i]);
			ddaConfigObj.VALUE_TYPE = 'ABSOLUTE';
			ddaConfigObj.AXIS_TYPE = 'SINGLE';
			ddaConfigObj.DATA_LIMIT = qvaArr[i].top || null;
			switch(qvaArr[i].chartType) {
			case null : ddaConfigObj.CHART_TYPE = 'Table';
			break;
			case 'Select Type' : ddaConfigObj.CHART_TYPE = 'Table';
			break;
			case 'StackedColumn' : ddaConfigObj.CHART_TYPE = 'Column';
			break;
			case 'Stacked Column' : ddaConfigObj.CHART_TYPE = 'Column';
			break;
			case 'Transposed' : ddaConfigObj.CHART_TYPE = 'Column';
			break;
			case 'DualStackedBar' : ddaConfigObj.CHART_TYPE = 'Bar';
			ddaConfigObj.AXIS_TYPE = 'DUAL';
			break;
			case 'StackedBar' : ddaConfigObj.CHART_TYPE = 'Bar';                                                                
			break;
			case 'StackedColumn100' : ddaConfigObj.CHART_TYPE = 'Column';
			ddaConfigObj.VALUE_TYPE = 'PERCENTAGE';
			break; 
			case 'DualStackedColumn' : ddaConfigObj.CHART_TYPE = 'Column';
			ddaConfigObj.AXIS_TYPE = 'DUAL';
			break;
			case 'DualStackedBar100' : ddaConfigObj.CHART_TYPE = 'Bar';
			ddaConfigObj.VALUE_TYPE = 'PERCENTAGE';
			ddaConfigObj.AXIS_TYPE = 'DUAL';
			break;
			case 'DualStackedColumn100' : ddaConfigObj.CHART_TYPE = 'Column';
			ddaConfigObj.VALUE_TYPE = 'PERCENTAGE';
			ddaConfigObj.AXIS_TYPE = 'DUAL';
			break;
			default : ddaConfigObj.CHART_TYPE = qvaArr[i].chartType;
			}

			switch(colTypeVal) {
			case undefined : ddaConfigObj.COLOR_SCHEME = 'NONE';
			break;
			case null : ddaConfigObj.COLOR_SCHEME = 'NONE';
			break;
			case 0 : ddaConfigObj.COLOR_SCHEME = 'MANUAL_NON_SEMANTIC';
			break;
			case 1 : ddaConfigObj.COLOR_SCHEME = 'AUTO_SEMANTIC';
			break;
			case 2 : ddaConfigObj.COLOR_SCHEME = 'MANUAL_SEMANTIC';
			break;
			default : ddaConfigObj.COLOR_SCHEME = 'NONE';
			}
			ddaConfigObj.THRESHOLD_MEASURE=semMsrVal; 
			ddaConfigObj.IS_ACTIVE = 1;
			migrationController.objectToPush.DDA_CHART.push(jQuery.extend({},ddaConfigObj));


			// MIGRATE CONTENT FROM DDA_CONFIG_PROPERTIES TO DDA_MASTER



		}



	},

	clearData: function(){

		this.getView().byId("oldList").removeAllItems();
		this.getView().byId("newList").removeAllItems();

		this.objectToPush.INDICATORS=[];
		this.objectToPush.INDICATOR_TEXTS=[];
		this.objectToPush.EVALUATIONS=[];
		this.objectToPush.EVALUATION_TEXTS=[];
		this.objectToPush.EVALUATION_FILTERS=[];
		this.objectToPush.EVALUATION_VALUES=[];
		this.objectToPush.TAGS=[];


		this.objectToPush.DDA_MASTER=[];
		this.objectToPush.DDA_CONFIG=[];
		this.objectToPush.DDA_FILTERS=[];
		this.objectToPush.DDA_HEADER=[];
		this.objectToPush.DDA_CHART=[];
		this.objectToPush.DDA_COLUMNS=[];

		this.objectToPush.DDA_MASTER_TEXT=[];

	},
	migrateData : function(){

		var migrationController=this;
		//this.dataToMigrate=this.objectToPush;
		if((this.objectToPush!=undefined)&&(this.objectToPush.INDICATORS.length>0)){
			sap.m.MessageBox.show(
					migrationController.oI18nModel.getResourceBundle().getText("MSG_MIGRATION_BEGIN"),
					sap.m.MessageBox.Icon.INFORMATION ,
					migrationController.oI18nModel.getResourceBundle().getText("INFORMATION_MSG_TITLE"),
					[sap.m.MessageBox.Action.OK],
					function(){

						// migrationController.getView().setBusy(true);
						migrationController.showBusy("M");
						//this.getView().setBusy(true)
						setTimeout(function(){migrationController.writeData();},2500);
					}
			);

		}
		else{
			sap.m.MessageBox.show(
					migrationController.oI18nModel.getResourceBundle().getText("MSG_NO_KPI"),
					sap.m.MessageBox.Icon.INFORMATION ,
					migrationController.oI18nModel.getResourceBundle().getText("INFORMATION_MSG_TITLE"),
					[sap.m.MessageBox.Action.OK]
					//      function(){migrationController.bindEvaluations}
			);
		}
	},

	cancel : function(){
		//navigateToHomePage
		window.history.back();
	},

	writeData:function(){


		var migrationController=this;
		this.errorMessage="";

		this.prepareMigrationData();
		var data=migrationController.objectToPush;



		if(data){
			migrationController.initiateRequests();

		}


	},

	initiateRequests:function(){
		var migrationController=this;
		var uri1="/sap/hba/r/sb/core/logic/MIGRATION.xsjs";

		jQuery.ajax({
			url: "/sap/hba/r/sb/core/logic/__token.xsjs",
			async: false,
			type: "HEAD",
			headers: {"X-CSRF-Token": "Fetch"},
			success: function(d, s, x) {
				jQuery.ajax({
					type: "POST",
					url: uri1,
					cache: false,
					data: encodeURIComponent(JSON.stringify(migrationController.objectToPush)),
					headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token")},
					success: function(data){
						if(JSON.parse(data).success)
						{
							sap.m.MessageBox.show(
									migrationController.oI18nModel.getResourceBundle().getText("MSG_MIGRATION_SUCCESS"),
									sap.m.MessageBox.Icon.INFORMATION ,
									migrationController.oI18nModel.getResourceBundle().getText("INFORMATION_MSG_TITLE"),
									[sap.m.MessageBox.Action.OK],
									function(){migrationController.cancel()}
							);
						}
						else{
							sap.ca.ui.message.showMessageBox({
								type: sap.ca.ui.message.Type.ERROR,
								message: migrationController.oI18nModel.getResourceBundle().getText("MSG_MIGRATION_ERROR"),
								details: JSON.parse(data).errorMessage
							});
						}
						migrationController.hideBusy();
					},
					async: true,
					error: function (XMLHttpRequest, textStatus, errorThrown) {
						sap.ca.ui.message.showMessageBox({
							type: sap.ca.ui.message.Type.ERROR,
							message: migrationController.oI18nModel.getResourceBundle().getText("MSG_MIGRATION_ERROR"),
							details: errorThrown+"\n"+JSON.parse(XMLHttpRequest.responseText).errorMessage
						});
						migrationController.hideBusy();
					}
				});

			},
			error: function() {
				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERR_FETCH_AUTH_TOKEN"));
				$.sap.log.error("ERR_FETCH_AUTH_TOKEN");
			}
		});
	},



	serviceCreate:function(entity,payload,ODataModel)
	{
//		sap.ui.core.BusyIndicator.show();
		var result = {success:false,text: ""};
		ODataModel.create(entity,payload,null,function(data){
			result.success = true;
		},
		function(error){
			var errorText = JSON.parse(error.response.body);
			result.success = false;
			result.text =error.response.statusText+" - "+errorText.error.message.value;
		});
		return result;
	},
	serviceDelete:function(entity,id,ODataModel)
	{      
//		sap.ui.core.BusyIndicator.show();
		var result = {success:false,text: ""};
		ODataModel.remove(entity+"("+id+")",null,function(data){
			result.success = true;
		},
		function(error){
			result.success = false;
			result.text = error.response.statusText;
		},false,"",true);
		return result;
	},
	serviceCallDataValidation:function(entity, param, oDataModel)
	{      var result = {success:false,text: ""};
	oDataModel.read(entity, null, param, false,
			function(data, response)
			{      if(data.results[0])
			{      result.success = true;
			result.data = data.results;       
			}
			else
			{      result.success = false;
			result.text = "Record not found";
			}
			},
			function(data)                           
			{      result.success = false;
			result.text = data.response.statusText;
			});
	return result;
	},


	/**
	 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
	 * (NOT before the first rendering! onInit() is used for migrationController one!).
	 * @memberOf tool.Migration
	 */
//	onBeforeRendering: function() {

//	},

	/**
	 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
	 * This hook is the same one that SAPUI5 controls get after being rendered.
	 * @memberOf tool.Migration
	 */
//	onAfterRendering: function() {

//	},

	/**
	 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
	 * @memberOf tool.Migration
	 */
//	onExit: function() {

//	}

});

}; // end of sap/suite/ui/smartbusiness/designtime/tools/migration/view/S1.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.visualization.Configuration') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.visualization.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained


sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.designtime.visualization.Configuration", {
	oServiceParams: {
		serviceList: [{
			name : "SMART_BUSINESS",
			masterCollection : "EVALUATIONS",
			serviceUrl : "/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata/",
			isDefault : true,
			refreshAfterChange : true,
			useBatch : false
		}]
	},

	/**
	 * @inherit
	 */
	getServiceList : function() {
		return this.getServiceParams().serviceList;
	},

	getMasterKeyAttributes : function() {
		//return the key attribute of your master list item
		return ["Id"];
	},
	getExcludedQueryStringParameters : function() {
		return ["sap-client","sap-language"];
	},
	getHanaSystem : function() {
        var hashObj = hasher || window.hasher; 
        var hashArr = hashObj.getHashAsArray();
        if(hashArr && hashArr.length && hashArr[0]) {
               var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
               for(var i=0,l=hashParameters.length; i<l; i++) {
                     if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                            return hashParameters[i].split("=")[1]; 
                     }
               }
        }
        return "";
	},
	getServiceParams : function() {
		if(sap.ushell && sap.ushell.Container) {
			var serviceUrl = this.oServiceParams.serviceList[0].serviceUrl;
	        this.oServiceParams.serviceList[0].serviceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(serviceUrl, this.getHanaSystem());
		}
        return this.oServiceParams;
	},
});
}; // end of sap/suite/ui/smartbusiness/designtime/visualization/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.visualization.view.S2.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.visualization.view.S2.controller');
jQuery.sap.require('sap.ca.scfld.md.controller.ScfldMasterController'); // unlisted dependency retained


sap.ca.scfld.md.controller.ScfldMasterController.extend("sap.suite.ui.smartbusiness.designtime.visualization.view.S2", {

	onInit: function() {
		var that = this;
		
		that.oApplicationFacade.getODataModel().setSizeLimit(100000);
		
		if(!(that.oApplicationFacade.currentLogonHanaUser)) {
			this.oApplicationFacade.getODataModel().read("/SESSION_USER",null,null,true,function(data) {
				that.oApplicationFacade.currentLogonHanaUser = (data.results && data.results.length) ? data.results[0].LOGON_USER : null; 
			}, function(err) {
				that.oApplicationFacade.currentLogonHanaUser = null;
				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
			});
		}
		
		this.byId("list").getBinding("items").filter([new sap.ui.model.Filter("IS_ACTIVE","EQ",1)]);
		
	},
	
	createFilterOptions: function() {
		var that = this;
		var filterOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("filterOptionsDialog"),
			filterItems: [
					new sap.m.ViewSettingsFilterItem({
						text: that.oApplicationFacade.getResourceBundle().getText("ACTIVITY"),
						key: "activity",
						items: [
						         new sap.m.ViewSettingsItem({
						        	 text: that.oApplicationFacade.getResourceBundle().getText("SELF_CREATED"),
						        	 key: "self_created"
						         }),
						         new sap.m.ViewSettingsItem({
						        	 text: that.oApplicationFacade.getResourceBundle().getText("RECENTLY_WORKED_UPON"),
						        	 key: "recently_worked_upon"
						         }),
						         new sap.m.ViewSettingsItem({
						        	 text: that.oApplicationFacade.getResourceBundle().getText("FAVORITE"),
						        	 key: "favorite"
						         }),
						        ]
					})
					],
					confirm : function(evt) {
						var infoBarText = "";
						var selectedFilters = evt.getParameter("filterItems");

						that.setFiltering(evt.getParameter("filterItems"));

						if(selectedFilters && selectedFilters.length) {
							var filterObj = {};
							for(var i=0,l=selectedFilters.length; i<l; i++) {
								filterObj[selectedFilters[i].getParent().getKey()] = filterObj[selectedFilters[i].getParent().getKey()] || "";
								filterObj[selectedFilters[i].getParent().getKey()] += (filterObj[selectedFilters[i].getParent().getKey()]) ? (",") : "";
								filterObj[selectedFilters[i].getParent().getKey()] += selectedFilters[i].getText(); 
							}

							for(var filter in filterObj) {
								if(filterObj.hasOwnProperty(filter)) {
									infoBarText += (infoBarText) ? " ; " : "";
									infoBarText += filterObj[filter];
								}
							}
							that.byId("filterToolbar").setVisible(true);
							that.byId("visualizationInfo").setText(infoBarText);	
						}
						else {
							that.byId("visualizationInfo").setText("");
							that.byId("filterToolbar").setVisible(false);
						}
					}
		});
		return filterOptionsDialog;
	},
	
	createSortOptions: function() {
		var that = this;
		var sortOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("sortOptionsDialog"),
			sortItems: [
					new sap.m.ViewSettingsItem({
						text: that.oApplicationFacade.getResourceBundle().getText("CREATION_DATE"),
						key: "newest"
					}), 
					new sap.m.ViewSettingsItem({
						text: that.oApplicationFacade.getResourceBundle().getText("ALPHABETICALLY"),
						key: "alphabetically"
					}),
					new sap.m.ViewSettingsItem({
						text: that.oApplicationFacade.getResourceBundle().getText("NONE"),
						key: "none"
					})
					],
			confirm : function(evt) {
				if(evt.getParameter("sortItem")) {
					if(evt.getParameter("sortItem").getKey() == "none") {
						that.setGrouping("indicator", (evt.getParameter("groupDescending") || false));
					} 
					else {
						that.setSorting(evt.getParameter("sortItem").getKey(), evt.getParameter("sortDescending"));
					}
            	}
            	else {
            		that.setGrouping("indicator", (evt.getParameter("groupDescending") || false));
            	}
			}
		});
		return sortOptionsDialog;
	},
	
	createGroupOptions: function() {
		var that = this;
		var groupOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("groupOptionsDialog"),
			groupItems: [
					new sap.m.ViewSettingsItem({
						text: that.oApplicationFacade.getResourceBundle().getText("BY_INDICATOR"),
						key: "indicator"
					}),
					new sap.m.ViewSettingsItem({
						text: that.oApplicationFacade.getResourceBundle().getText("BY_OWNER"),
						key: "owner"
					})
					],
			confirm : function(evt) {
				if(evt.getParameter("groupItem")) {
					that.setGrouping(evt.getParameter("groupItem").getKey(), evt.getParameter("groupDescending"));
				}
				else { 
					that.setGrouping("indicator", (evt.getParameter("groupDescending") || false));
				}
			}
		});
		return groupOptionsDialog;
	},
	
	getHeaderFooterOptions : function() {
		var that = this;
		return {
			sI18NMasterTitle : "MASTER_TITLE", 
			onBack: function() {
				window.history.back();
			},
			oFilterOptions : {
				onFilterPressed: function(evt) {
					that.getView().filterOptionDialog = that.getView().filterOptionDialog || that.createFilterOptions();
					that.getView().filterOptionDialog.open();
				}
			},
			oSortOptions : {
				onSortPressed: function(evt) {
					that.getView().sortOptionDialog = that.getView().sortOptionDialog || that.createSortOptions();
					that.getView().sortOptionDialog.open();
				}
			},
			oGroupOptions : {
				onGroupPressed: function(evt) {
					that.getView().groupOptionDialog = that.getView().groupOptionDialog || that.createGroupOptions();
					that.getView().groupOptionDialog.open();
				}
			},
		};
	},
	
	formatIndicatorId: function(context) {
		return {text: ("KPI: " + context.getProperty("INDICATOR")), key: context.getProperty("INDICATOR")}; 
	},
	
	setGrouping: function(key, groupDescending) {
		var that = this;
		groupDescending = groupDescending || false;
		var list = this.getView().byId("list");
		if(key == "indicator") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("INDICATOR",groupDescending,function(context){
				return {
					key: context.getProperty("INDICATOR"),
					text: ("KPI: " + context.getProperty("INDICATOR"))
				}
			})]);
		} 
		else if(key == "owner") { 
			list.getBinding("items").sort([new sap.ui.model.Sorter("OWNER_NAME",groupDescending,function(context){
				var owner_name = context.getProperty("OWNER_NAME");
				var groupTitle = "";
				switch(owner_name) {
				case null: groupTitle = that.oApplicationFacade.getResourceBundle().getText("NO_OWNER");
				break;
				case "": groupTitle = that.oApplicationFacade.getResourceBundle().getText("NO_OWNER");
				break;
				default: groupTitle = owner_name;
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			})]);
		}
	},
	
	setFiltering: function(items) {
		var filtersArray = [];
		var list = this.getView().byId("list");
		
		var filterObject = {
			"self_created": (new sap.ui.model.Filter("CREATED_BY", sap.ui.model.FilterOperator.EQ, this.oApplicationFacade.currentLogonHanaUser)),
			"recently_worked_upon": (new sap.ui.model.Filter("MANUAL_ENTRY", sap.ui.model.FilterOperator.EQ, 0)),
			"favorite": (new sap.ui.model.Filter("MANUAL_ENTRY", sap.ui.model.FilterOperator.EQ, 1))
		};
		
		filtersArray = sap.suite.smartbusiness.utils.getFilterArray(items, filterObject);
		
		if(filtersArray.length) {
			list.getBinding("items").filter(new sap.ui.model.Filter(filtersArray,true));
		}
		else {
			list.getBinding("items").filter(filtersArray);
		}
		
	},
	
	setSorting: function(key, groupDescending) {
		groupDescending = groupDescending || false;
		var list = this.getView().byId("list");
		if(key == "newest") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("CREATED_ON",groupDescending,null)]); 
		} 
		else if(key == "alphabetically") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("TITLE",groupDescending,null)]);
		}
	},
	
	formatChipCount: function(chipCount) {
		return chipCount || 0;
	},
	
	onExit: function() {
		var hashObj = hasher || window.hasher;
		if(!(hashObj.getHash())) {
			sap.suite.smartbusiness.utils.backToHome();
		}
	}
});
}; // end of sap/suite/ui/smartbusiness/designtime/visualization/view/S2.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.visualization.view.S3.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.visualization.view.S3.controller');
jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained


sap.ca.scfld.md.controller.BaseDetailController.extend("sap.suite.ui.smartbusiness.designtime.visualization.view.S3", {

	onInit : function() {
		var that = this;
		var view = this.getView();
		this.oRouter.attachRouteMatched(function(oEvent) {
			if (oEvent.getParameter("name") === "detail") {
				that.selectedTile = undefined;
				var context = new sap.ui.model.Context(view.getModel(), '/' + oEvent.getParameter("arguments").contextPath);
				view.setBindingContext(context);
				// Make sure the master is here
			}
		}, this);
		var that = this;
		this.oHeaderFooterOptions = { 
				bSuppressBookmarkButton: {}, 
				oEditBtn : {
					sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("FULLSCREEN_TITLE"),
					onBtnPressed : function(evt) {
						sap.suite.smartbusiness.utils.replaceHash({action:"configureSBKPITile", route:"addTile", context: that.getView().getBindingContext().sPath.substr(1)});
					},
					bEnabled : false, // default true
				},
				buttonList : []            
		};
	},

	getHeaderFooterOptions : function() {
		return this.oHeaderFooterOptions;
	},

	getChipRow: function(id,context){
		var that = this;
		var tileContent;
		var tile;
		var config = JSON.parse(JSON.parse(JSON.parse(context.getObject().configuration).tileConfiguration).TILE_PROPERTIES);
		var navType = new sap.m.Text();
		
		if(config.navType == "0") {
			navType.setText(that.oApplicationFacade.getResourceBundle().getText("GENERIC_DRILLDOWN"));
		}
		else {
			navType.setText(that.oApplicationFacade.getResourceBundle().getText("OTHER_DRILLDOWN"));
		}
		
		var status = new sap.m.ObjectNumber();
		
		if(context.getObject().COUNTER == "1") {
			if(context.getObject().isActive) {
				status.setNumber(that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE"));
				status.setState("Success");
			}
			else {
				status.setNumber(that.oApplicationFacade.getResourceBundle().getText("STATUS_NEW"));
				status.setState("None");
			}
		}
		else {
			status.setNumber(that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE_DRAFT"));
			status.setState("Success");
		}
		
		var favourite;
		
		var semanticObjectVisibility;
		
		if(Number(config.navType)) {
			semanticObjectVisibility = true;
		}
		else {
			semanticObjectVisibility = false;
		}
		
		if(context.getProperty("tileType")=="NT")
			tileContent = new sap.suite.ui.commons.NumericContent({size:"S", value:"0.0", scale:"M", valueColor:"Good", unit:that.oApplicationFacade.getResourceBundle().getText("TILE_CURRENCY"), footer:that.oApplicationFacade.getResourceBundle().getText("ACTUAL")});
		else if(context.getProperty("tileType")=="CT")
			tileContent =  new sap.suite.ui.commons.ComparisonChart({
				scale: "M",
				size:"S",
				data: [new sap.suite.ui.commons.ComparisonData({title:that.oApplicationFacade.getResourceBundle().getText("VALUE_1"), value: 1550}),
				       new sap.suite.ui.commons.ComparisonData({title:that.oApplicationFacade.getResourceBundle().getText("VALUE_2"), value: 219.2}),
				       new sap.suite.ui.commons.ComparisonData({title:that.oApplicationFacade.getResourceBundle().getText("VALUE_3"), value: 66.46})]
			});
		else if(context.getProperty("tileType")=="AT")
			tileContent =  new sap.suite.ui.commons.BulletChart({
				scale: "M",
				size:"S",
				minValue: 0,
				maxvalue: 312,
				targetValue: 150,
				actual: new sap.suite.ui.commons.BulletChartData({value:312, color:"Error"}),
				thresholds: [new sap.suite.ui.commons.BulletChartData({value:312, color:"Error"}),
				             new sap.suite.ui.commons.BulletChartData({value:200, color:"Critical"})]
			});
		else if(context.getProperty("tileType")=="TT")
			tileContent = new sap.suite.ui.commons.MicroAreaChart({
				size:"S",
				width: "130px",
				height: "59px",
				minXValue: 0,
				maxXValue: 100,
				minYValue: 0,
				maxYValue: 100,
				firstXLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:"Jan 1", color:"Neutral"}),
				lastXLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:"Jan 31", color:"Neutral"}),
				firstYLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:"3 M", color:"Error"}),
				lastYLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:"23 M", color:"Good"}),
				target: new sap.suite.ui.commons.MicroAreaChartItem({
					points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:30}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:40}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:90})]
				}),
				innerMinThreshold: new sap.suite.ui.commons.MicroAreaChartItem({color:"Good"}),
				innerMaxThreshold: new sap.suite.ui.commons.MicroAreaChartItem({color:"Good"}),
				minThreshold:  new sap.suite.ui.commons.MicroAreaChartItem({
					color:"Error",
					points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:40}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:50}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:100})]
				}),
				maxThreshold:  new sap.suite.ui.commons.MicroAreaChartItem({
					color:"Error",
					points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:20}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:30}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:70})]
				}),
				chart: new sap.suite.ui.commons.MicroAreaChartItem({
					points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:40}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:50}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:100})]
				}),
			});
		else if(context.getProperty("tileType")=="CM") {
			tileContent =  new sap.suite.ui.commons.ComparisonChart({
				scale: "M",
				size:"S",
				data: [new sap.suite.ui.commons.ComparisonData({title:that.oApplicationFacade.getResourceBundle().getText("MEASURE_1"), value: 34, color: "Good"}),
				       new sap.suite.ui.commons.ComparisonData({title:that.oApplicationFacade.getResourceBundle().getText("MEASURE_2"), value: 125, color: "Error"}),
				       new sap.suite.ui.commons.ComparisonData({title:that.oApplicationFacade.getResourceBundle().getText("MEASURE_3"), value: 97, color: "Critical"})]
			});
		}

		tile = new sap.suite.ui.commons.GenericTile({
			size:"S", 
			header: context.getProperty("title"),
			subheader: context.getProperty("description"),
			customData: [new sap.ui.core.CustomData({key:"tileType",value:context.getProperty("tileType")})],
			tileContent: new sap.suite.ui.commons.TileContent({content:tileContent, size:"S",}),
			press: function(evt) {
//				var tiles = that.byId("tileGrid").getItems();
//				for(var i=0,l=tiles.length; i<l; i++) {
//					tiles[i].getCells()[0].$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
//				}
//				evt.getSource().$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiHighlight"));
			}
		}).addStyleClass("sbTile");
		
		return new sap.m.ColumnListItem({
			type: "Navigation",
		    press: function(evt) {
	        	var chipContext = this.getBindingContext().sPath;
	        	if(this.getBindingContext().getObject().isActive) {
	        		if(this.getBindingContext().getObject().COUNTER == 2) {
	        			chipContext = chipContext.replace("isActive=1","isActive=0");
	        		}
	        	}
	        	else {
	        		chipContext = chipContext.replace("isActive=1","isActive=0");
	        	}
	        	chipContext = chipContext.replace("/CHIPS_MODELER","CHIPS");
	        	sap.suite.smartbusiness.utils.replaceHash({action:"configureSBKPITile", route:"editTile", context: (that.getView().getBindingContext().sPath.substr(1) + "/" + chipContext)});
	        },
			cells: [
			        tile,
			        new sap.ui.layout.VerticalLayout({
						content: [
						        navType,
						        new sap.m.Text({text: that.oApplicationFacade.getResourceBundle().getText("SEMANTIC_OBJECT") + ': ' + config.semanticObject, visible:semanticObjectVisibility}),
						        new sap.m.Text({text: that.oApplicationFacade.getResourceBundle().getText("ACTION") + ': ' + config.semanticAction, visible:semanticObjectVisibility}),
						        ]
					}).addStyleClass("navigationVLayout"),
					status,
			        new sap.ui.layout.HorizontalLayout({
			        	content: [
//			        	          new sap.ui.core.Icon({
//			        	        	  src: "sap-icon://favorite",
//			        	        	  size: "22px",
//			        	        	  press: function(evt) {
//								
//			        	        	  }
//			        	          }),
			        	          new sap.ui.core.Icon({
			        	        	  src: "sap-icon://edit",
			        	        	  size: "22px",
			        	        	  press: function(evt) {
			        	        		  var chipContext = this.getBindingContext().sPath;
			        	        		  if(this.getBindingContext().getObject().isActive) {
			        	        			  if(this.getBindingContext().getObject().COUNTER == 2) {
			        	        				  chipContext = chipContext.replace("isActive=1","isActive=0");
			        	        			  }
			        	        		  }
			        	        		  else {
			        	        			  chipContext = chipContext.replace("isActive=1","isActive=0");
			        	        		  }
			                			  chipContext = chipContext.replace("/CHIPS_MODELER","CHIPS");
			                			  sap.suite.smartbusiness.utils.replaceHash({action:"configureSBKPITile", route:"editTile", context: (that.getView().getBindingContext().sPath.substr(1) + "/" + chipContext)});
			        	        	  }
			        	          }),
			        	          new sap.ui.core.Icon({
			        	        	  src: "sap-icon://sys-cancel",
			        	        	  size: "22px",
			        	        	  press: function(evt) {
			        	        		  that.handleDelete(this);
			        	        	  }
			        	          })
			        	          ]
			        }).addStyleClass("chipActionsHLayout")
			        ]
		});
	},

	handleDelete: function(contextObj) {
		var that = this;
		  sap.m.MessageBox.show(
				  that.oApplicationFacade.getResourceBundle().getText("WANT_TO_DELETE_SELECTED_TILE"),
				  "sap-icon://hint",
				  that.oApplicationFacade.getResourceBundle().getText("DELETE"),
				  [sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL ],
				  function(evt){
					  if(evt=="OK"){
						  //odata remove
//						  that.oApplicationFacade.getODataModel().remove(contextObj.getBindingContext().sPath.replace("CHIPS_MODELER","CHIPS"),null,function(data) {
//							  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETION_SUCCESSFUL"));
//							  that.oApplicationFacade.getODataModel().refresh();
//						  },function(err){
//							  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETION_FAILED"), err.response.body);
//						  });
						  
						  //xsjs remove
						  sap.suite.smartbusiness.utils.remove(sap.suite.smartbusiness.utils.serviceUrl("CHIP_SERVICE_URI"),{id:contextObj.getBindingContext().getObject().id, isActive:contextObj.getBindingContext().getObject().isActive},function(data) {
							  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETION_SUCCESSFUL"));
							  that.oApplicationFacade.getODataModel().refresh();
						  },function(err){
							  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETION_FAILED"), err.responseText);
						  });
					  }
					  if(evt=="CANCEL"){

					  }
				  }
		  );
	},
	
	formatChipsCount: function(count) {
		return this.oApplicationFacade.getResourceBundle().getText("TILES") + " (" + (count || 0) + ")";
	},
	
	getFooterButtons: function() {
		var that = this;
		var buttonList = [
		                  {
		                	  sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("ACTIVATE"),
		                	  onBtnPressed : function(evt) {
		                		  if(that.selectedTile) {
		                			  var data = JSON.parse(JSON.parse(JSON.parse(that.selectedTile.getBindingContext().getObject().configuration).tileConfiguration).TILE_PROPERTIES);
		                			  var evaluation = JSON.parse(JSON.parse(JSON.parse(that.selectedTile.getBindingContext().getObject().configuration).tileConfiguration).EVALUATION);
		                			  var errorLog = "";
		                			  if(!(data.semanticObject && data.semanticAction && that.selectedTile.getBindingContext().getObject().title && that.selectedTile.getBindingContext().getObject().description) || (!(data.storyId) && data.navType == 1) || (data.semanticObject.length == (data.semanticObject.split(" ").length - 1)) || (data.semanticAction.length == (data.semanticAction.split(" ").length - 1)) ) {
		                				  if(!(data.semanticObject) || (data.semanticObject.length == (data.semanticObject.split(" ").length - 1))) {
		                					  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_SEMANTIC_OBJECT") + "\n";
		                				  }
		                				  if(!(data.semanticAction) || (data.semanticAction.length == (data.semanticAction.split(" ").length - 1))) {
		                					  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_SEMANTIC_ACTION") + "\n";
		                				  }
		                				  if(!(that.selectedTile.getBindingContext().getObject().title) || (that.selectedTile.getBindingContext().getObject().title.length == (that.selectedTile.getBindingContext().getObject().title.split(" ").length - 1))) {
		                					  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_TITLE") + "\n";
		                				  }
		                				  if(!(that.selectedTile.getBindingContext().getObject().description) || (that.selectedTile.getBindingContext().getObject().description.length == (that.selectedTile.getBindingContext().getObject().description.split(" ").length - 1))) {
		                					  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_DESCRIPTION") + "\n";
		                				  }
		                				  if((!(data.storyId) && (data.navType == 1))) {
		                					  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_STORY_ID");
		                				  }
		                				  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_ERROR"), errorLog);
		                			  } 
		                			  else {
		                				  if(that.selectedTile.getBindingContext().getObject().tileType == "CM") {
		                					  if(!(evaluation) || !(evaluation.COLUMN_NAMES) || !(evaluation.COLUMN_NAMES.length)) {
		                						  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_THREE_MEASURES");
		                					  }
		                					  else {
		                						  for(var i=0,l=evaluation.COLUMN_NAMES.length; i<l; i++) {
		                							  if(!(evaluation.COLUMN_NAMES[i].COLUMN_NAME) || !(evaluation.COLUMN_NAMES[i].semanticColor)) {
		                								  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_THREE_MEASURES");
		                								  break;
		                							  }
		                						  }
		                						  if((!errorLog) && (evaluation.COLUMN_NAMES.length == 3)) {
		                							  if(evaluation.COLUMN_NAMES[0].COLUMN_NAME == evaluation.COLUMN_NAMES[1].COLUMN_NAME) {
		                								  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_MEASURE_THREE_MEASURES");
		                							  } 
		                							  else if(evaluation.COLUMN_NAMES[0].COLUMN_NAME == evaluation.COLUMN_NAMES[2].COLUMN_NAME) {
		                								  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_MEASURE_THREE_MEASURES");
		                							  }
		                							  else if(evaluation.COLUMN_NAMES[1].COLUMN_NAME == evaluation.COLUMN_NAMES[2].COLUMN_NAME) {
		                								  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_MEASURE_THREE_MEASURES");
		                							  }
		                						  }
		                					  }
		                				  }
		                				  if(errorLog) {
		                					  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_ERROR"), errorLog);
		                				  }
		                				  else {
		                					  //odata write
//		                					  that.oApplicationFacade.getODataModel().create("/ACTIVE_CHIPS",{id:that.selectedTile.getBindingContext().getObject().id},null,function(data) {
//		                						  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_SUCCESSFUL"));
//		                						  that.oApplicationFacade.getODataModel().refresh();
//		                						  that.selectedTile = undefined;
//		                						  that.updateFooterButtons();
//
//		                					  },function(err){
//		                						  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_ERROR"), err.response.body);
//		                					  });
		                					  
		                					  //xsjs write
		                					  sap.suite.smartbusiness.utils.create(sap.suite.smartbusiness.utils.serviceUrl("ACTIVATE_CHIP_SERVICE_URI"),{id:that.selectedTile.getBindingContext().getObject().id},null,function(data) {
		                						  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_SUCCESSFUL"));
		                						  that.oApplicationFacade.getODataModel().refresh();
		                						  that.selectedTile = undefined;
		                						  that.updateFooterButtons();

		                					  },function(err){
		                						  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_ERROR"), err.responseText);
		                					  });
		                				  }
		                			  }
		                		  }
		                		  else {
		                			  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("SELECT_A_TILE_TO_DELETE"));
		                		  }
		                	  },
		                  },
		                  {
		                	  sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("EDIT")+" "+that.oApplicationFacade.getResourceBundle().getText("STATUS_DRAFT"),
		                	  onBtnPressed : function(evt) {
		                		  if(that.selectedTile) {
		                			  var chipContext = that.selectedTile.getBindingContext().sPath.replace("isActive=1","isActive=0");
		                			  chipContext = chipContext.replace("/CHIPS_MODELER","CHIPS");
		                			  that.oRouter.navTo("editTile", {
		                				  contextPath : that.getView().getBindingContext().sPath.substr(1),
		                				  chipContextPath : chipContext
		                			  });
		                		  }
		                		  else {
		                			  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("SELECT_A_TILE_TO_EDIT"));
		                		  }
		                	  },
		                  }, 
		                  {
		                	  sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("EDIT"),
		                	  onBtnPressed : function(evt) {
		                		  if(that.selectedTile) {
		                			  that.oRouter.navTo("editTile", {
		                				  contextPath : that.getView().getBindingContext().sPath.substr(1),
		                				  chipContextPath : that.selectedTile.getBindingContext().sPath.replace("/CHIPS_MODELER","CHIPS")
		                			  });
		                		  }
		                		  else {
		                			  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("SELECT_A_TILE_TO_EDIT"));
		                		  }
		                	  },
		                  },                                
		                  {
		                	  sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("DELETE"),
		                	  onBtnPressed : function(evt) {
		                		  if(that.selectedTile) {

		                			  sap.m.MessageBox.show(
		                					  that.oApplicationFacade.getResourceBundle().getText("WANT_TO_DELETE_SELECTED_TILE"),
		                					  "sap-icon://hint",
		                					  that.oApplicationFacade.getResourceBundle().getText("DELETE"),
		                					  [sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL ],
		                					  function(evt){
		                						  if(evt=="OK"){
		                							  that.oApplicationFacade.getODataModel().remove(that.selectedTile.getBindingContext().sPath.replace("CHIPS_MODELER","CHIPS"),null,function(data) {
		                								  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETION_SUCCESSFUL"));
		                								  that.oApplicationFacade.getODataModel().refresh();
		                								  that.selectedTile = undefined;
		                								  that.updateFooterButtons(); 
		                							  },function(err){
		                								  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETION_FAILED"), err.response.body);
		                							  });
		                						  }
		                						  if(evt=="CANCEL"){

		                						  }
		                					  }
		                			  );
		                		  }
		                		  else {
		                			  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("SELECT_A_TILE_TO_DELETE"));
		                		  }
		                	  },
		                  }
		                  ]
		return buttonList;

	},

	setSorting: function(key, groupDescending) {
		groupDescending = groupDescending || false;
		var list = this.getView().byId("tileGrid");
		if(key == "tileType") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("tileType",groupDescending,null)]); 
		} 
		else if(key == "status") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("isActive",groupDescending,null), new sap.ui.model.Sorter("COUNTER",groupDescending,null)]);
		}
		else if(key == "none") {
			list.getBinding("items").sort([]);
		}
	},

	setFiltering: function(items) {
		var filtersArray = [];
		var list = this.getView().byId("tileGrid");

		var filterObject = {
				"NT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'NT')),
				"CT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'CT')),
				"AT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'AT')),
				"TT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'TT')),
				"CM": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'CM')),
				"new": (new sap.ui.model.Filter("isActive", sap.ui.model.FilterOperator.EQ, 0)),
				"active": (new sap.ui.model.Filter("isActive", sap.ui.model.FilterOperator.EQ, 1))
		};
		
		filtersArray = sap.suite.smartbusiness.utils.getFilterArray(items, filterObject);
		
		if(filtersArray.length) {
			list.getBinding("items").filter(new sap.ui.model.Filter(filtersArray, true));
		}
		else {
			list.getBinding("items").filter(filtersArray);
		}
		
	},
	
	handleSortPress: function() {
		var that = this;
		this.sortOptionsDialog = this.sortOptionsDialog || new sap.m.ViewSettingsDialog({
			id: this.createId("sortOptionsDialog"),
			sortItems: [
					new sap.m.ViewSettingsItem({
						text: that.oApplicationFacade.getResourceBundle().getText("TILE_TYPE"),
						key: "tileType"
					}), 
					new sap.m.ViewSettingsItem({
						text: that.oApplicationFacade.getResourceBundle().getText("STATUS"),
						key: "status"
					}),
					new sap.m.ViewSettingsItem({
						text: that.oApplicationFacade.getResourceBundle().getText("NONE"),
						key: "none"
					})
					],
			confirm : function(evt) {
				if(evt.getParameter("sortItem")) {
					that.setSorting(evt.getParameter("sortItem").getKey(), evt.getParameter("sortDescending"));
            	}
			}
		});
		this.sortOptionsDialog.open();
	},
	
	handleFilterPress: function() {
		var that = this;
		this.filterOptionsDialog = this.filterOptionsDialog || new sap.m.ViewSettingsDialog({
			id: this.createId("filterOptionsDialog"),
			filterItems: [
			              new sap.m.ViewSettingsFilterItem({
			            	  text: that.oApplicationFacade.getResourceBundle().getText("TILE_TYPE"),
			            	  key: "tileType",
			            	  items: [
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("NUMERIC_TILE"),
			            	        	  key: "NT"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("COMPARISON_TILE"),
			            	        	  key: "CT"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("TREND_TILE"),
			            	        	  key: "AT"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("ACTUAL_VS_TARGET_TILE"),
			            	        	  key: "TT"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("COMPARISON_MM_TILE"),
			            	        	  key: "CM"
			            	          })
			            	          ]
			              }),
			              new sap.m.ViewSettingsFilterItem({
			            	  text: that.oApplicationFacade.getResourceBundle().getText("STATUS"),
			            	  key: "status",
			            	  items: [
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("STATUS_NEW"),
			            	        	  key: "new"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE"),
			            	        	  key: "active"
			            	          }) 
			            	          ]
			              })
			              ],
			              confirm : function(evt) {
			            	  var infoBarText = "";
			            	  var selectedFilters = evt.getParameter("filterItems");

			            	  that.setFiltering(evt.getParameter("filterItems"));

			            	  if(selectedFilters && selectedFilters.length) {
			            		  var filterObj = {};
			            		  for(var i=0,l=selectedFilters.length; i<l; i++) {
			            			  filterObj[selectedFilters[i].getParent().getKey()] = filterObj[selectedFilters[i].getParent().getKey()] || "";
			            			  filterObj[selectedFilters[i].getParent().getKey()] += (filterObj[selectedFilters[i].getParent().getKey()]) ? (",") : "";
			            			  filterObj[selectedFilters[i].getParent().getKey()] += selectedFilters[i].getText(); 
			            		  }

			            		  for(var filter in filterObj) {
			            			  if(filterObj.hasOwnProperty(filter)) {
			            				  infoBarText += (infoBarText) ? " ; " : "";
			            				  infoBarText += filterObj[filter];
			            			  }
			            		  }
			            		  that.byId("filterToolbar").setVisible(true);
			            		  that.byId("visualizationInfo").setText(infoBarText);	
			            	  }
			            	  else {
			            		  that.byId("visualizationInfo").setText("");
			            		  that.byId("filterToolbar").setVisible(false);
			            	  }
			              }
		});
		this.filterOptionsDialog.open();
	}
});



}; // end of sap/suite/ui/smartbusiness/designtime/visualization/view/S3.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.visualization.view.S4.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.visualization.view.S4.controller');
jQuery.sap.require('sap.ca.scfld.md.controller.BaseFullscreenController'); // unlisted dependency retained


sap.ca.scfld.md.controller.BaseFullscreenController.extend("sap.suite.ui.smartbusiness.designtime.visualization.view.S4", {
	onInit : function() {
		var that = this;
		var view = this.getView();

		this.LUMIRA_SEMANTIC_OBECT = "LumiraAnalytics";
		this.LUMIRA_ACTION = "openStory";
		
		this.lumiraSemanticObject = "LumiraAnalytics";
		this.lumiraAction = "openStory";
		
		this.apfSemanticObject = "";
		this.apfAction = "";
		
		this.APF_SEMANTIC_OBECT = "";
		this.APF_ACTION = "";
		
		this.sbAction = "analyzeSBKPIDetails";
		
		if(!(that.oApplicationFacade.currentLogonHanaUser)) {
			this.oApplicationFacade.getODataModel().read("/SESSION_USER",null,null,true,function(data) {
				that.oApplicationFacade.currentLogonHanaUser = (data.results && data.results.length) ? data.results[0].LOGON_USER : null; 
			}, function(err) {
				that.oApplicationFacade.currentLogonHanaUser = null;
				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
			});
		}

		this.oRouter.attachRouteMatched(function(oEvent) {

			if(oEvent.getParameter("name") == "addTile" || oEvent.getParameter("name") == "editTile") {
				this.oApplicationFacade.getODataModel().read("/LANGUAGE?$select=LAISO,SPRAS", null, null, false, function(data) {
					data = data.results;
					if(data.length) {
						if(data.length == 1) {
							that.languagesObject = {LAISO:{},SPRAS:{}};
							that.languagesObject.LAISO[data[0]["LAISO"]] = data[0]["SPRAS"]; that.languagesObject.SPRAS[data[0]["SPRAS"]] = data[0]["LAISO"];
						}
						else {
							that.languagesObject = data.reduce(function(p,c,i,a) { that.languagesObject = that.languagesObject || {}; that.languagesObject.LAISO = that.languagesObject.LAISO || {}; that.languagesObject.SPRAS = that.languagesObject.SPRAS || {}; if(i == 1){ that.languagesObject.LAISO[a[0]["LAISO"]] = a[0]["SPRAS"]; that.languagesObject.SPRAS[a[0]["SPRAS"]] = a[0]["LAISO"]; }  that.languagesObject.LAISO[a[i]["LAISO"]] = a[i]["SPRAS"]; that.languagesObject.SPRAS[a[i]["SPRAS"]] = a[i]["LAISO"]; return that.languagesObject;});
						}
					}
					that.languagesArray = data;
				});
			}
			
			if(oEvent.getParameter("name") == "addTile") {
				this.getSelectedRadioButton(null, "GDD");
				this.byId('selectTileType').setSelectedKey('NT');
				this.selectTile('NT');
				this.getView().byId('NT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiHighlight"));
				
				this.lumiraSemanticObject = "LumiraAnalytics";
				this.lumiraAction = "openStory";
				
				this.apfSemanticObject = "";
				this.apfAction = "";
				
				this.initialAppParameters = [];

				that.oApplicationFacade.getODataModel().read(oEvent.getParameter("arguments").contextPath + "/TEXTS",null,null,true,function(languageData) {
					languageData = languageData.results;
					var additionalLanguageData = [];
					var i;
					for(i=0;i<languageData.length;i++){
						if(languageData[i].LANGUAGE != that.localLanguage){
							additionalLanguageData.push(languageData[i]);
						}
					}
					var languageArray = [];
					var i;
					for(i=0;i<additionalLanguageData.length;i++){
						var languageObject = {};
						languageObject.ADDITIONAL_LANGUAGE_TITLE = additionalLanguageData[i].TITLE;
						languageObject.ADDITIONAL_LANGUAGE_DESCRIPTION = additionalLanguageData[i].DESCRIPTION;
						languageObject.ADDITIONAL_SAP_LANGUAGE_KEY = additionalLanguageData[i].LANGUAGE;
						languageObject.ADDITIONAL_LANGUAGE_KEY = that.languagesObject.SPRAS[languageObject.ADDITIONAL_SAP_LANGUAGE_KEY]
						languageArray.push(languageObject);
					}
					that.oldLanguagePayload = $.extend(true,[],additionalLanguageData);
					that.additionalLanguageLinkModel.setProperty("/ADDITIONAL_LANGUAGE_ARRAY",languageArray);
					that.additionalLanguageLinkModel.setProperty("/NO_OF_ADDITIONAL_LANGUAGES",that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY.length);
					that.byId('additionalLanguageLink').bindProperty("text","additionalLanguageLinkModel>/NO_OF_ADDITIONAL_LANGUAGES",function(sValue){
						return that.oApplicationFacade.getResourceBundle().getText("ADDITIONAL_LANGUAGE")+"("+sValue+")";
					});

				}, function(err) {
				});

			}

			if(oEvent.getParameter("name") === "addTile" || oEvent.getParameter("name") === "editTile") {

				that.inSufficientAdditionalMeasureAlerted = false;
				that.inSufficientAdditionalMeasure = false;

				that.byId("semanticObjectText").setValueState("None");
				that.byId("selectODD").setValueState("None");
				that.byId("tileTitle").setValueState("None");
				that.byId("tileSubtitle").setValueState("None");
				that.byId("appPropertyName").setValueState("None");
				that.byId("appPropertyValue").setValueState("None");
				that.byId("selectStoryId").setValueState("None");

				this.getSelectedRadioButton(null, "GDD");

				this.appMode = oEvent.getParameter("name");

				this.context = new sap.ui.model.Context(view.getModel(), '/' + oEvent.getParameter("arguments").contextPath);
				view.setBindingContext(this.context);

				this.tileConfigurationModel = new sap.ui.model.json.JSONModel();
				this.byId("tileConfigForm").setModel(this.tileConfigurationModel,"tileConfig");
				this.tileConfigurationModel.setData({});

				this.appParametersModel = new sap.ui.model.json.JSONModel();
				this.getView().byId('propertyNameValueBox').setModel(this.appParametersModel, "appParameters");

				this.additionalLanguageLinkModel = new sap.ui.model.json.JSONModel();
				this.getView().byId('additionalLanguageLink').setModel(this.additionalLanguageLinkModel,"additionalLanguageLinkModel");

				that.localLanguage = that.languagesObject.LAISO[sap.ui.getCore().getConfiguration().getLocale().getLanguage().split("-")[0].toUpperCase()];
				
				// handling for bookmark cases
				if(this.context.getObject()) {
					this.onAfterContextData(this.context.getObject());
				}
				else {
					this.oApplicationFacade.getODataModel().read("/" + oEvent.getParameter("arguments").contextPath, null, null, true, function(data) {
						that.onAfterContextData(data);
					}, function(err){
						sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAILED_TO_READ_CHIP_INFO"), err.response.body);
					});
				}

				that.oApplicationFacade.getODataModel().read(oEvent.getParameter("arguments").contextPath + "/VALUES",null,null,false,function(data) {
					that.evaluationDetails = that.evaluationDetails || {};
					that.evaluationDetails.VALUES = [];
					var evaluationValuesObj = {};
					var obj = {};
					for(var i=0,l=data.results.length; i<l; i++) {
						obj = {};
						obj.TYPE = data.results[i].TYPE;
						obj.FIXED = data.results[i].FIXED;
						obj.COLUMN_NAME = data.results[i].COLUMN_NAME;
						obj.ODATA_PROPERTY = data.results[i].ODATA_PROPERTY;
						that.evaluationDetails.VALUES.push(obj);
						evaluationValuesObj[obj.TYPE] = obj;
					}
					var measureObj = {Measures:[]};
					if(that.evaluationObj) {
						measureObj = {Measures:[{COLUMN_NAME:that.evaluationObj.COLUMN_NAME}]};
					}
					i=0;
					while(evaluationValuesObj[((i<10) ? ("0" + i) : i)]) {
						measureObj.Measures.push({COLUMN_NAME: evaluationValuesObj[((i<10) ? ("0" + i) : i)].COLUMN_NAME});
						i++;
					}

					if(measureObj.Measures.length < 2) {
						that.inSufficientAdditionalMeasure = true;
					} 

					that.customMeasuresModel = new sap.ui.model.json.JSONModel();
					that.customMeasuresModel.setData(measureObj);
					
					var measureObjOpt = jQuery.extend(true, {}, measureObj, {});
					
					that.customMeasuresModel1 = new sap.ui.model.json.JSONModel();
					that.customMeasuresModel1.setData(measureObjOpt);

				}, function(err) {
					sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
				});

				that.oApplicationFacade.getODataModel().read(oEvent.getParameter("arguments").contextPath + "/FILTERS",null,null,true,function(data) {
					that.evaluationDetails = that.evaluationDetails || {};
					that.evaluationDetails.FILTERS = [];
					var obj = {};
					for(var i=0,l=data.results.length; i<l; i++) {
						obj = {};
						obj.TYPE = data.results[i].TYPE;
						obj.NAME = data.results[i].NAME;
						obj.VALUE_1 = data.results[i].VALUE_1;
						obj.OPERATOR = data.results[i].OPERATOR;
						obj.VALUE_2 = data.results[i].VALUE_2;
						that.evaluationDetails.FILTERS.push(obj);
					}
				}, function(err) {
					sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
				}); 
			}

			if(oEvent.getParameter("name") == "editTile") {
				this.chipContext = new sap.ui.model.Context(view.getModel(), '/' + oEvent.getParameter("arguments").chipContextPath);

				that.oApplicationFacade.getODataModel().read(oEvent.getParameter("arguments").chipContextPath + "/TEXTS",null,null,true,function(languageData) {
					languageData = languageData.results;
					var additionalLanguageData = [];
					var i;
					for(i=0;i<languageData.length;i++){
						if(languageData[i].language != that.localLanguage){
							additionalLanguageData.push(languageData[i]);
						}
					}
					var languageArray = [];
					var i;
					for(i=0;i<additionalLanguageData.length;i++){
						var languageObject = {};
						languageObject.ADDITIONAL_LANGUAGE_TITLE = additionalLanguageData[i].title;
						languageObject.ADDITIONAL_LANGUAGE_DESCRIPTION = additionalLanguageData[i].description;
						languageObject.ADDITIONAL_SAP_LANGUAGE_KEY = additionalLanguageData[i].language;
						languageObject.ADDITIONAL_LANGUAGE_KEY = that.languagesObject.SPRAS[languageObject.ADDITIONAL_SAP_LANGUAGE_KEY]
						languageArray.push(languageObject);
					}
					that.oldLanguagePayload = $.extend(true,[],additionalLanguageData);
					that.additionalLanguageLinkModel.setProperty("/ADDITIONAL_LANGUAGE_ARRAY",languageArray);
					that.additionalLanguageLinkModel.setProperty("/NO_OF_ADDITIONAL_LANGUAGES",that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY.length);
					that.byId('additionalLanguageLink').bindProperty("text","additionalLanguageLinkModel>/NO_OF_ADDITIONAL_LANGUAGES",function(sValue){
						return that.oApplicationFacade.getResourceBundle().getText("ADDITIONAL_LANGUAGE")+"("+sValue+")";
					});

				}, function(err) {
				});

				//handling for bookmark cases
				if(this.chipContext.getObject()) {
					this.onAfterChipContextData(this.chipContext.getObject());
				}
				else {
					this.oApplicationFacade.getODataModel().read(oEvent.getParameter("arguments").chipContextPath, null, null, true, function(data) {
						delete data.DDA_CONFIGURATIONS;
						delete data.EVALUATION_INFO;
						delete data.TEXTS;
						delete data.__metadata;
						that.onAfterChipContextData(data);
					}, function(err){
						sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAILED_TO_READ_CHIP_INFO"), err.response.body);
					});
				}
			}

		}, this);
	},

	getHeaderFooterOptions : function() {
		var that = this;
		this.oHeaderFooterOptions = {
				bSuppressBookmarkButton: {},
				onBack: function() {
					that.handleBackAndCancel();
				},
				oEditBtn : {
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						var configuration = that.formChipConfiguration();
						var serviceStatus = that.publishChip(configuration);
						if(serviceStatus) {
							that.oApplicationFacade.getODataModel().refresh();
							sap.suite.smartbusiness.utils.replaceHash({action:"configureSBKPITile", route:"detail", context: that.context.sPath.substr(1)});
						}
					}
				},
				buttonList : []
		};

		return this.oHeaderFooterOptions;
	},

	getSelectedRadioButton : function(oEvent, confirmationType) {
		var bindingContext = this.getView().getBindingContext();
		if((oEvent && oEvent.mParameters.selected) || confirmationType){
			this.confirmationType = (oEvent) ? oEvent.getSource().data("drilldownType") : confirmationType;
			if (this.confirmationType === 'GDD') {
				this.getView().byId('selectNavType').setVisible(false);
				this.getView().byId('selectStoryId').setVisible(false);
				this.getView().byId('semanticObjectText').setVisible(false);
				this.getView().byId('selectODD').setVisible(false);
				this.getView().byId('propertyNameValueBoxHeader').setVisible(false);
				this.getView().byId('propertyNameValueBox').setVisible(false);
				if(this.tileConfigurationModel && this.tileConfigurationModel.getData()) {
					this.tileConfigurationModel.getData().semanticObject = this.onLoadSemanticObject;
					this.tileConfigurationModel.getData().action = this.sbAction;
					this.tileConfigurationModel.getData().navType = "0";
				}
			} else if (this.confirmationType === 'ODD') {
				this.getView().byId('selectNavType').setVisible(true);
				this.getView().byId('selectStoryId').setVisible(true);
				this.getView().byId('selectODD').setVisible(true);
				this.getView().byId('semanticObjectText').setVisible(true);
				this.getView().byId('selectODD').setVisible(true);
				this.getView().byId('propertyNameValueBoxHeader').setVisible(true);
				this.getView().byId('propertyNameValueBox').setVisible(true);
				if(this.tileConfigurationModel && this.tileConfigurationModel.getData()) {
					this.tileConfigurationModel.getData().navType = (Number(this.tileConfigurationModel.getData().navType)) ? this.tileConfigurationModel.getData().navType : "1";
				}
				this.getView().byId('selectNavType').setSelectedKey(this.tileConfigurationModel.getData().navType);
				this.selectNavType(null, this.tileConfigurationModel.getData().navType);
			}
		}
	},

	selectTileType:function(oEvent){
		this.tileConfigurationModel.getData().tileType = oEvent.getSource().getSelectedKey();
		this.selectTile(oEvent.getSource().getSelectedItem().getKey());
	},

	onTileSelect: function(oEvent){
		this.tileType = oEvent.getSource().data("tileType");
		this.selectTile(this.tileType);
		this.getView().byId('selectTileType').setSelectedKey(this.tileType);
		this.tileConfigurationModel.getData().tileType = this.getView().byId('selectTileType').getSelectedKey();
	},

	selectTile: function(key){
		this.getView().byId('NT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
		this.getView().byId('CT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
		this.getView().byId('TT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
		this.getView().byId('AT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
		this.getView().byId('CM').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
		this.getView().byId(key).$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiHighlight"));
		if(key === "NT"){
			this.getView().byId('selectDimension').setVisible(false);
			this.getView().byId('selectSortOrder').setVisible(false);
			this.getView().byId('measure1Layout').setVisible(false);
			this.getView().byId('measure2Layout').setVisible(false);
			this.getView().byId('measure3Layout').setVisible(false);
		} else if(key === "CT"){
			this.getView().byId('selectDimension').setVisible(true);
			this.getView().byId('selectSortOrder').setVisible(true);
			this.getView().byId('measure1Layout').setVisible(false);
			this.getView().byId('measure2Layout').setVisible(false);
			this.getView().byId('measure3Layout').setVisible(false);
		} else if(key === "TT"){
			this.getView().byId('selectDimension').setVisible(true);
			this.getView().byId('selectSortOrder').setVisible(false);
			this.getView().byId('measure1Layout').setVisible(false);
			this.getView().byId('measure2Layout').setVisible(false);
			this.getView().byId('measure3Layout').setVisible(false);
		} else if(key === "AT") {
			this.getView().byId('selectDimension').setVisible(false);
			this.getView().byId('selectSortOrder').setVisible(false);
			this.getView().byId('measure1Layout').setVisible(false);
			this.getView().byId('measure2Layout').setVisible(false);
			this.getView().byId('measure3Layout').setVisible(false);
		}
		else if(key === "CM") {
			if(this.inSufficientAdditionalMeasure && !(this.inSufficientAdditionalMeasureAlerted)) {
				sap.m.MessageToast.show(this.oApplicationFacade.getResourceBundle().getText("INSUFFICIENT_ADDL_MEASURES"));
				this.inSufficientAdditionalMeasureAlerted = true;
			}

			this.getView().byId('selectDimension').setVisible(false);
			this.getView().byId('selectSortOrder').setVisible(false);
			this.getView().byId('measure1Layout').setVisible(true);
			this.getView().byId('measure2Layout').setVisible(true);
			this.getView().byId('measure3Layout').setVisible(true);
		}
	},

	selectSortOrder:function(oEvent){
		this.tileConfigurationModel.getData().sortOrder = oEvent.getSource().getSelectedKey();
	},

	selectNavType:function(oEvent, key){
		if(oEvent) {
			key = oEvent.getSource().getSelectedKey();
		}
		this.tileConfigurationModel.getData().navType = key;
		this.byId("selectNavType").setSelectedKey(key);

		switch(Number(key)) {
		case 1: //@Bring up Lumira Content
			this.getView().byId("selectStoryId").setVisible(true);
			this.tileConfigurationModel.getData().semanticObject = this.lumiraSemanticObject;
			this.getView().byId("semanticObjectText").setValue(this.lumiraSemanticObject);
			this.tileConfigurationModel.getData().action = this.lumiraAction;
			this.getView().byId("selectODD").setValue(this.lumiraAction);
			break;
		case 2: //@Bring up APF Content
			this.getView().byId("selectStoryId").setVisible(false);
			this.tileConfigurationModel.getData().semanticObject = this.apfSemanticObject;
			this.getView().byId("semanticObjectText").setValue(this.apfSemanticObject);
			this.tileConfigurationModel.getData().action = this.apfAction;
			this.getView().byId("selectODD").setValue(this.apfAction);
			break;
		case 3: //@Bring up CXO Content
			this.tileConfigurationModel.getData().semanticObject = this.tempSemanticObject || this.evaluationObj.semanticObject || "";
			this.getView().byId("semanticObjectText").setValue(this.tileConfigurationModel.getData().semanticObject);
			this.tileConfigurationModel.getData().action = this.tempAction || this.evaluationObj.action || "";
			this.getView().byId("selectODD").setValue(this.tileConfigurationModel.getData().action);
			break;
		case 4: //@Bring up Custom DrillDown
			this.getView().byId("selectStoryId").setVisible(false);
			this.tileConfigurationModel.getData().semanticObject = this.tempSemanticObject || this.evaluationObj.semanticObject || "";
			this.getView().byId("semanticObjectText").setValue(this.tempSemanticObject || this.evaluationObj.semanticObject || "");
			this.tileConfigurationModel.getData().action = this.tempAction || this.evaluationObj.action || "";
			this.getView().byId("selectODD").setValue(this.tempAction || this.evaluationObj.action || "");
			break;
		default: break;
		}
	},

	formChipConfiguration: function() {
		var that = this;
		var payload = {};
		var data = this.tileConfigurationModel.getData();
		var configuration = null;
		var tileConfig = {};
		var tileProperties = {};

		//chip properties
		payload.id = data.id || "";
		this.currentChipId = payload.id;
		payload.isActive = 0;
		payload.catalogId = 'HANA_CATALOG';
		payload.title = data.title;
		payload.description = data.description;
		payload.tileType = data.tileType;
		payload.evaluationId = data.evaluationId;
		payload.url = payload.url || this.getChipUrl(payload.tileType);
		payload.keywords = data.keywords;

		if(data.changedOn) {
			payload.changedOn = data.changedOn;
		}

		// TILE_PROPERTIES in configuration
		tileProperties.id = data.id || "";
		tileProperties.evaluationId = data.evaluationId; 
		tileProperties.tileType = data.tileType;
		if(data.tileType == 'CT') {
			tileProperties.dimension = data.dimension || this.byId("selectDimension").getSelectedKey();
			tileProperties.sortOrder = data.sortOrder || this.byId("selectSortOrder").getSelectedKey();
		}
		if(data.tileType == 'TT') {
			tileProperties.dimension = data.dimension || this.byId("selectDimension").getSelectedKey();
		}

		var evaluation = this.getView().getBindingContext().getObject() || this.evaluationObj;

		tileProperties.frameType = 'OneByOne';
		if(this.byId("genericDrilldown").getSelected()) { 
			tileProperties.navType = "0";
			tileProperties.semanticObject = (data.semanticObject && (data.semanticObject.length != (data.semanticObject.split(" ").length - 1))) ? data.semanticObject : evaluation.COLUMN_NAME;
			tileProperties.semanticAction = this.sbAction;
		}
		else {
			tileProperties.navType = data.navType || this.byId("selectNavType").getSelectedKey(); 
			if(tileProperties.navType == "1") {
				tileProperties.storyId = data.storyId || this.byId("selectStoryId").getValue();
			}
			else {
				delete data.storyId;
			}
			tileProperties.semanticObject = data.semanticObject || this.byId("semanticObjectText").getValue();
			tileProperties.semanticAction = data.action || this.byId("selectODD").getValue();
		}
		//tileProperties.navType = data.navType; 
		tileConfig.ADDITIONAL_APP_PARAMETERS = {};

		var appParameters = this.byId("propertyNameValueBox").getModel("appParameters").getData();
		if(appParameters.PROPERTIES && appParameters.PROPERTIES.length) {
			for(var i=0,l=appParameters.PROPERTIES.length; i<l; i++) {
				tileConfig.ADDITIONAL_APP_PARAMETERS[appParameters.PROPERTIES[i].NAME] = appParameters.PROPERTIES[i].VALUE; 
			}
		}

		tileConfig.ADDITIONAL_APP_PARAMETERS = Object.keys(tileConfig.ADDITIONAL_APP_PARAMETERS).length ? JSON.stringify(tileConfig.ADDITIONAL_APP_PARAMETERS) : JSON.stringify({});

		tileConfig.TILE_PROPERTIES = JSON.stringify(tileProperties);


		// EVALUATION_FILTERS properties in configuration
		tileConfig.EVALUATION_FILTERS =   this.evaluationDetails.FILTERS.length ? JSON.stringify(this.evaluationDetails.FILTERS) : JSON.stringify([]);

		// EVALUATION_VALUES properties in configuration
		tileConfig.EVALUATION_VALUES =    this.evaluationDetails.VALUES.length ? JSON.stringify(this.evaluationDetails.VALUES) : JSON.stringify([]);

		// EVALUATION properties in configuration
		this.evaluationDetails.EVALUATION = {};
		this.evaluationDetails.EVALUATION.ID = evaluation.ID;
		this.evaluationDetails.EVALUATION.INDICATOR = evaluation.INDICATOR;
		this.evaluationDetails.EVALUATION.INDICATOR_TYPE = evaluation.INDICATOR_TYPE;
		this.evaluationDetails.EVALUATION.INDICATOR_TITLE = evaluation.INDICATOR_TITLE;
		this.evaluationDetails.EVALUATION.GOAL_TYPE = evaluation.GOAL_TYPE;
		this.evaluationDetails.EVALUATION.TITLE = evaluation.TITLE;
		this.evaluationDetails.EVALUATION.SCALING = evaluation.SCALING;
		this.evaluationDetails.EVALUATION.ODATA_URL = evaluation.ODATA_URL;
		this.evaluationDetails.EVALUATION.ODATA_ENTITYSET = evaluation.ODATA_ENTITYSET;
		this.evaluationDetails.EVALUATION.VIEW_NAME = evaluation.VIEW_NAME;

		if(data.tileType == 'CM') {
			this.evaluationDetails.EVALUATION.COLUMN_NAMES = [];
			var customMeasures = this.getView().getModel("multiMeasures").getData();
			if(customMeasures && customMeasures.MULTI_MEASURE) {
				customMeasures = customMeasures.MULTI_MEASURE; 
			}
			this.evaluationCustomMeasureArray = [];
			for(var i=0,l=customMeasures.length; i<l; i++) {
				if(customMeasures[i].COLUMN_NAME) {
					this.evaluationDetails.EVALUATION.COLUMN_NAMES.push({COLUMN_NAME:customMeasures[i].COLUMN_NAME, semanticColor:customMeasures[i].semanticColor});
					this.evaluationCustomMeasureArray.push({COLUMN_NAME:customMeasures[i].COLUMN_NAME, semanticColor:customMeasures[i].semanticColor});
				}
				else {
					this.evaluationCustomMeasureArray.push({COLUMN_NAME:null, semanticColor:null});
				}
			}
		}
		this.evaluationDetails.EVALUATION.COLUMN_NAME = evaluation.COLUMN_NAME;
		this.evaluationDetails.EVALUATION.OWNER_NAME = evaluation.OWNER_NAME; 
		this.evaluationDetails.EVALUATION.VALUES_SOURCE = evaluation.VALUES_SOURCE;

		tileConfig.EVALUATION = this.evaluationDetails.EVALUATION ? JSON.stringify(this.evaluationDetails.EVALUATION) : JSON.stringify({});

		configuration = JSON.stringify({tileConfiguration:JSON.stringify(tileConfig), isSufficient:"1", timeStamp:Date.now().toString()});

		var tileConfigLimit = 4050;
		if(payload.id) {
			tileConfigLimit = 4096;
		}
		
		if(configuration.length > tileConfigLimit) {
			tileConfig.EVALUATION_FILTERS = JSON.stringify([]);  
			configuration = JSON.stringify({tileConfiguration:JSON.stringify(tileConfig), isSufficient:"0", timeStamp:Date.now().toString()});
			if(configuration.length > tileConfigLimit) {
				tileConfig.EVALUATION_VALUES = JSON.stringify([]);
				tileConfig.EVALUATION_FILTERS = JSON.stringify([]);
				configuration = JSON.stringify({tileConfiguration:JSON.stringify(tileConfig), isSufficient:"0", timeStamp:Date.now().toString()});
			}
		}

		payload.configuration = configuration;

		return payload;
	},

	publishChip: function(payload) {
		var serviceStatus = true;
		var that = this;
		payload.keywords = payload.keywords || "";
		delete payload.navType;
		delete payload.semanticObject;
		delete payload.action;
		this.chipTextPayload = [];
		var batchOperations = [];
		this.deleteBatch = [];
		this.createBatch = [];
		var isUpdatesSuccessful = true;

		var oDataModel = this.oApplicationFacade.getODataModel();

		if(this.appMode == "addTile") {
			//odata write
//			oDataModel.create("/CHIPS",payload, null, function(data) {
//				if(that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES) {
//					for(var i=0;i<that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES;i++){
//						var chipTextObject = {};
//						that.oApplicationFacade.getODataModel().read("/LANGUAGE?$filter=LAISO eq '" +encodeURIComponent(that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_KEY)  + "'", null, null, false, function(data){
//							chipTextObject.language = data.results[0].SPRAS;
//						});
//						chipTextObject.title = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_TITLE;
//						chipTextObject.description = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_DESCRIPTION;
//						chipTextObject.id = payload.id;
//						chipTextObject.isActive = 0;
//						that.chipTextPayload.push(chipTextObject);
//						batchOperations.push(oDataModel.createBatchOperation("/CHIP_TEXTS","POST",chipTextObject));
//					}
//					oDataModel.addBatchChangeOperations(batchOperations);
//					oDataModel.submitBatch(function(data,response,errorResponse){
//						if(errorResponse.length)
//						{       
//							isUpdatesSuccessful = false;
//							return;
//						}
//						var responses = data.__batchResponses[0].__changeResponses;
//						for(var key in responses)
//							if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200") {
//								isUpdatesSuccessful = false;      
//							}
//						if(isUpdatesSuccessful) {
//							sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_SAVED_SUCCESSFULLY"));
//						}
//					},function(error){
//						isUpdatesSuccessful = false;
//						sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.response.body);
//					},false);
//				}
//				else {
//					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_SAVED_SUCCESSFULLY"));
//				}
//
//			}, function(err) {
//				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.response.body);
//			});
			
			//xsjs write
			var finalPayload = [];
			if(that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES) {
				for(var i=0;i<that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES;i++){
					var chipTextObject = {};
					chipTextObject.title = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_TITLE;
					chipTextObject.description = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_DESCRIPTION;
					chipTextObject.id = payload.id;
					chipTextObject.language = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_SAP_LANGUAGE_KEY;
					chipTextObject.isActive = 0;
					that.chipTextPayload.push(chipTextObject);
				}
			}
			finalPayload.push({id:payload.id, isActive:payload.isActive, CHIP:payload, TEXTS:that.chipTextPayload});
			sap.suite.smartbusiness.utils.create(sap.suite.smartbusiness.utils.serviceUrl("CHIP_SERVICE_URI"),finalPayload,null,function(data) {
				serviceStatus = true;
				that.currentChipId = JSON.parse(data).response[0].id;
				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_SAVED_SUCCESSFULLY"));
			},function(err){
				serviceStatus = false;
				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.responseText);
			});
		}
		else {
			if(this.currentContextState) {
				//odata create
//				oDataModel.create("/CHIPS",payload, null,  function(data) {
//					if(that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES) {
//						for(var i=0;i<that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES;i++){
//							var chipTextObject = {};
//							that.oApplicationFacade.getODataModel().read("/LANGUAGE?$filter=LAISO eq '" +encodeURIComponent(that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_KEY)  + "'", null, null, false, function(data){
//								chipTextObject.language = data.results[0].SPRAS;
//							});
//							chipTextObject.title = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_TITLE;
//							chipTextObject.description = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_DESCRIPTION;
//							chipTextObject.id = payload.id;
//							chipTextObject.isActive = 0;
//							that.chipTextPayload.push(chipTextObject);
//							batchOperations.push(oDataModel.createBatchOperation("/CHIP_TEXTS","POST",chipTextObject));
//						}
//						oDataModel.addBatchChangeOperations(batchOperations);
//						oDataModel.submitBatch(function(data,response,errorResponse){
//							if(errorResponse.length)
//							{       
//								isUpdatesSuccessful = false;
//								return;
//							}
//							var responses = data.__batchResponses[0].__changeResponses;
//							for(var key in responses)
//								if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200") {
//									isUpdatesSuccessful = false;      
//								}
//							if(isUpdatesSuccessful) {
//								sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_EDITED_SUCCESSFULLY"));
//							}
//						},function(error){
//							isUpdatesSuccessful = false;
//							sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.response.body);
//						},false);
//					}
//					else{
//						sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_EDITED_SUCCESSFULLY"));
//					}
//				}, function(err) {
//					sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.response.body);
//				});
				
				//xsjs write
				var finalPayload = [];
				if(that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES) {
					for(var i=0;i<that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES;i++){
						var chipTextObject = {};
						chipTextObject.title = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_TITLE;
						chipTextObject.description = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_DESCRIPTION;
						chipTextObject.id = payload.id;
						chipTextObject.language = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_SAP_LANGUAGE_KEY;
						chipTextObject.isActive = 0;
						that.chipTextPayload.push(chipTextObject);
					}
				}
				finalPayload.push({id:payload.id, isActive:payload.isActive, CHIP:payload, TEXTS:that.chipTextPayload});
				sap.suite.smartbusiness.utils.create(sap.suite.smartbusiness.utils.serviceUrl("CHIP_SERVICE_URI"),finalPayload,null,function(data) {
					serviceStatus = true;
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_SAVED_SUCCESSFULLY"));
				},function(err){
					serviceStatus = false;
					sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.responseText);
				});
			}
			else {
				//odata update
//				oDataModel.update(this.chipContext.sPath,payload, null,  function(data) {
//					if(that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES || that.oldLanguagePayload) {
//						for(var i=0;i<that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES;i++){
//							var chipTextObject = {};
//							that.oApplicationFacade.getODataModel().read("/LANGUAGE?$filter=LAISO eq '" +encodeURIComponent(that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_KEY)  + "'", null, null, false, function(data){
//								chipTextObject.language = data.results[0].SPRAS;
//							});
//							chipTextObject.title = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_TITLE;
//							chipTextObject.description = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_DESCRIPTION;
//							chipTextObject.id = payload.id;
//							chipTextObject.isActive = payload.isActive;
//							that.chipTextPayload.push(chipTextObject);
//						}
//
//						that.languagePayloadForDirtyBitTest = []; 
//
//						for(var i=0;i<that.oldLanguagePayload.length;i++){
//							var textObject = {};
//							textObject.id = payload.id;
//							textObject.language = that.oldLanguagePayload[i].language;
//							textObject.isActive = that.oldLanguagePayload[i].isActive;
//							textObject.description = that.oldLanguagePayload[i].description;
//							textObject.title= that.oldLanguagePayload[i].title;
//							that.languagePayloadForDirtyBitTest.push(textObject);
//						}
//
//						var languageDeltaObject = sap.suite.smartbusiness.utils.dirtyBitCheck({
//							oldPayload : that.languagePayloadForDirtyBitTest,
//							newPayload : that.chipTextPayload,
//							objectType : "CHIP_TEXTS"
//						});
//
//						if(languageDeltaObject){
//							if(languageDeltaObject.deletes.length){
//								var i;
//								for(i=0;i<languageDeltaObject.deletes.length;i++){
//									that.deleteBatch.push(oDataModel.createBatchOperation("/CHIP_TEXTS(id='"+languageDeltaObject.deletes[i].id+"',isActive="+languageDeltaObject.deletes[i].isActive+",language='"+languageDeltaObject.deletes[i].language+"')","DELETE"));
//								}
//							}
//							if(languageDeltaObject.updates.length){
//								var i;
//								for(i=0;i<languageDeltaObject.updates.length;i++){
//									that.createBatch.push(oDataModel.createBatchOperation("/CHIP_TEXTS","POST",languageDeltaObject.updates[i]));
//								}
//							}
//
//							if(that.deleteBatch.length){
//								oDataModel.addBatchChangeOperations(that.deleteBatch);
//								oDataModel.submitBatch(function(data,response,errorResponse){
//									if(errorResponse.length)
//									{       
//										isUpdatesSuccessful = false;
//										return;
//									}
//									var responses = data.__batchResponses[0].__changeResponses;
//									for(var key in responses)
//										if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200") {
//											isUpdatesSuccessful = false;      
//										}
//									if(isUpdatesSuccessful) {
//										if(that.createBatch.length){
//											oDataModel.addBatchChangeOperations(that.createBatch);
//											oDataModel.submitBatch(function(data,response,errorResponse){
//												if(errorResponse.length)
//												{       
//													isUpdatesSuccessful = false;
//													return;
//												}
//												var responses = data.__batchResponses[0].__changeResponses;
//												for(var key in responses)
//													if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200") {
//														isUpdatesSuccessful = false;      
//													}
//												if(isUpdatesSuccessful) {
//													sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_EDITED_SUCCESSFULLY"));
//												}
//											},function(error){
//												isUpdatesSuccessful = false;
//												sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.response.body);
//											},false);
//										}
//										else{
//											sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_EDITED_SUCCESSFULLY"));
//										}
//									}
//								},function(error){
//									isUpdatesSuccessful = false;
//									sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.response.body);
//								},false);
//							}
//							else{
//								if(that.createBatch.length){
//									oDataModel.addBatchChangeOperations(that.createBatch);
//									oDataModel.submitBatch(function(data,response,errorResponse){
//										if(errorResponse.length)
//										{       
//											isUpdatesSuccessful = false;
//											return;
//										}
//										var responses = data.__batchResponses[0].__changeResponses;
//										for(var key in responses)
//											if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200") {
//												isUpdatesSuccessful = false;      
//											}
//										if(isUpdatesSuccessful) {
//											sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_EDITED_SUCCESSFULLY"));
//										}
//									},function(error){
//										isUpdatesSuccessful = false;
//										sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.response.body);
//									},false);
//								}
//
//							}
//						}
//					}
//					else{
//						sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_EDITED_SUCCESSFULLY"));
//					}
//				}, function(err) {
//					sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"),err.response.body);
//				});
				
				//xsjs update
				var finalPayload = [];
				if(that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES) {
					for(var i=0;i<that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES;i++){
						var chipTextObject = {};
						chipTextObject.title = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_TITLE;
						chipTextObject.description = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_DESCRIPTION;
						chipTextObject.id = payload.id;
						chipTextObject.language = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_SAP_LANGUAGE_KEY;
						chipTextObject.isActive = 0;
						that.chipTextPayload.push(chipTextObject);
					}
				}
				that.languagePayloadForDirtyBitTest = []; 
				for(var i=0;i<that.oldLanguagePayload.length;i++){
					var textObject = {};
					textObject.id = payload.id;
					textObject.language = that.oldLanguagePayload[i].language;
					textObject.isActive = that.oldLanguagePayload[i].isActive;
					textObject.description = that.oldLanguagePayload[i].description;
					textObject.title= that.oldLanguagePayload[i].title;
					that.languagePayloadForDirtyBitTest.push(textObject);
				}
				var languageDeltaObject = sap.suite.smartbusiness.utils.dirtyBitCheck({
					oldPayload : that.languagePayloadForDirtyBitTest,
					newPayload : that.chipTextPayload,
					objectType : "CHIP_TEXTS"
				});
				var textsUpdatePayload = {remove:[],create:[]};
				if(languageDeltaObject) {
					if(languageDeltaObject.deletes.length){
						for(var i=0;i<languageDeltaObject.deletes.length;i++){
							textsUpdatePayload.remove.push(languageDeltaObject.deletes[i]);
						}
					}
					if(languageDeltaObject.updates.length){
						for(var i=0;i<languageDeltaObject.updates.length;i++){
							that.createBatch.push(oDataModel.createBatchOperation("/CHIP_TEXTS","POST",languageDeltaObject.updates[i]));
							textsUpdatePayload.create.push(languageDeltaObject.updates[i]);
						}
					}
				}
				finalPayload.push({id:payload.id, isActive:payload.isActive, CHIP:{update:payload}, TEXTS:textsUpdatePayload});
				sap.suite.smartbusiness.utils.update(sap.suite.smartbusiness.utils.serviceUrl("CHIP_SERVICE_URI"),finalPayload,null,function(data) {
					serviceStatus = true;
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_SAVED_SUCCESSFULLY"));
				},function(err){
					serviceStatus = false;
					sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.responseText);
				}); 
			}
		}
		return serviceStatus;
	},

	getChipUrl: function(tileType) {
		var chipUrls = {
				"NT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatornumeric/NumericTileChip.xml",
				"CT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorcontribution/ContributionTileChip.xml",
				"TT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorArea/AreaChartTileChip.xml",
				"AT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatordeviation/DeviationTileChip.xml",
				"CM" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorcomparison/ComparisonTileChip.xml"
		}
		return chipUrls[tileType];
	},

	populateDimension : function(dataSource, entitySet) {
		dataSource = this.validateQueryServiceURI(dataSource) + "";
		entitySet = entitySet + "";
		var dimensions = [], dimensionDataArray = [], obj = {};
		var i;
		dimensions = sap.suite.smartbusiness.odata.getAllDimensions(dataSource, entitySet);
		for (i = 0; i < dimensions.length; i++) {
			obj = {};
			obj.dimensionName = dimensions[i];
			dimensionDataArray.push(obj);
		}
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData({
			dimensions : dimensionDataArray
		});
		return oModel;
	},

	validateQueryServiceURI : function(dataSource) {
		dataSource = jQuery.trim(dataSource);
		if (!jQuery.sap.startsWith(dataSource, "/")) {
			dataSource = "/" + dataSource;
		}
		if (jQuery.sap.endsWith(dataSource, "/")) {
			dataSource = dataSource.substring(0, dataSource.length - 1);
		}
		return dataSource;
	},

	handleDimensionSelectionChange: function(evt) {
		this.tileConfigurationModel.getData().dimension = evt.getSource().getSelectedItem().getKey();
	},

	setGenericDrillDown: function(navType) {
		return (navType == 0) ? true : false;
	},

	setOtherDrillDown: function(navType) {
		if(navType > 0) {
			this.getView().byId('selectODD').setVisible(true);
		} 
		else {
			this.getView().byId('selectODD').setVisible(false);
		}
		return (navType > 0) ? true : false;
	},

	onAfterContextData: function(contextObj) {
		var that = this; 
		this.evaluationObj = contextObj;

		if(this.customMeasuresModel && this.customMeasuresModel.getData()) {
			var customMeasures = this.customMeasuresModel.getData();
			customMeasures.Measures.unshift({COLUMN_NAME: this.evaluationObj.COLUMN_NAME});
			this.customMeasuresModel.setData(customMeasures);
		}
		
		if(this.customMeasuresModel1 && this.customMeasuresModel1.getData()) {
			var customMeasures1 = this.customMeasuresModel1.getData();
			customMeasures1.Measures.unshift({COLUMN_NAME: this.evaluationObj.COLUMN_NAME});
			this.customMeasuresModel1.setData(customMeasures1);
		}

		try {
			this.oModelForEntity = this.populateDimension(contextObj.ODATA_URL, contextObj.ODATA_ENTITYSET);
			this.tileConfigurationModel.getData().dimension = this.oModelForEntity.getData().dimensions[0].dimensionName;
			this.initialData = jQuery.extend(true, {}, this.tileConfigurationModel.getData(), {});
		} catch (err) {

		} finally {
			if (this.oModelForEntity.getData().dimensions.length) {
				this.getView().byId("selectDimension").setModel(this.oModelForEntity, "populateDimension");
			} else {
				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("UNABLE_TO_FETCH_NAVIG"));
			}
		}

		if(this.appMode == "addTile") {
			that.selectTile('NT');
			that.getView().byId('NT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiHighlight"));
			
			that.currentLocaleLanguage = that.languagesObject.LAISO[sap.ui.getCore().getConfiguration().getLanguage().split("-")[0].toUpperCase()];

			var texts_entity = "/EVALUATIONS_CHIP_TEXTS?$filter=ID eq '" + contextObj.ID + "' and IS_ACTIVE eq 1"; 

			that.oApplicationFacade.getODataModel().read(texts_entity,null,null,true,function(data) {
				that.evaluationDetails = that.evaluationDetails || {};
				that.evaluationDetails.TEXTS = [];
				var obj = {};
				for(var i=0,l=data.results.length; i<l; i++) {
					obj = {};
					obj.language = data.results[i].LANGUAGE;
					obj.title = data.results[i].TITLE;
					obj.description = data.results[i].DESCRIPTION;
					that.evaluationDetails.TEXTS.push(obj);
				}
			}, function(err) {
				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
			});

			this.updateFooterButtons(null);   
			this.tileConfigurationModel.setData({evaluationId:contextObj.ID,title:contextObj.INDICATOR_TITLE,description:contextObj.TITLE,semanticObject:(contextObj.SEMANTIC_OBJECT || ''),action:(contextObj.ACTION || ''),storyId:'',tileType:'NT',navType:0});
			this.initialData = jQuery.extend(true, {}, this.tileConfigurationModel.getData(), {});
			
			this.tempSemanticObject = contextObj.SEMANTIC_OBJECT || "";
			this.onLoadSemanticObject = this.tempSemanticObject;
			this.tempAction = contextObj.ACTION || "";
			
			var multiMeasureModel = new sap.ui.model.json.JSONModel();
			multiMeasureModel.setData({MULTI_MEASURE:[{COLUMN_NAME:that.evaluationObj.COLUMN_NAME,semanticColor:"Error"},{COLUMN_NAME:"",semanticColor:"Critical"},{COLUMN_NAME:"",semanticColor:"Good"}]});
			this.getView().setModel(multiMeasureModel,"multiMeasures");

		}
	},

	onAfterChipContextData: function(contextObj) {
		var that = this;
		this.currentContextState = contextObj.isActive;
		this.currentChipId = contextObj.id;

		this.updateFooterButtons(contextObj);
		if(this.appMode == "editTile") {
			var configuration = JSON.parse(contextObj.configuration);
			var appParameters = [];
			if(JSON.parse(configuration.tileConfiguration).ADDITIONAL_APP_PARAMETERS) {
				appParameters = JSON.parse(JSON.parse(configuration.tileConfiguration).ADDITIONAL_APP_PARAMETERS);
			}

			var evaluation = {};
			var multiMeasures = {MULTI_MEASURE:[]}
			if(JSON.parse(configuration.tileConfiguration).EVALUATION) {
				evaluation = JSON.parse(JSON.parse(configuration.tileConfiguration).EVALUATION);
				var multiMeasureModel = new sap.ui.model.json.JSONModel();
				if(evaluation.COLUMN_NAMES && evaluation.COLUMN_NAMES.length) {
					for(var i=0,l=evaluation.COLUMN_NAMES.length; i<l; i++) {
						multiMeasures.MULTI_MEASURE.push({COLUMN_NAME:evaluation.COLUMN_NAMES[i].COLUMN_NAME, semanticColor:evaluation.COLUMN_NAMES[i].semanticColor});
					}
					if(multiMeasures.MULTI_MEASURE && multiMeasures.MULTI_MEASURE.length == 2) {
						multiMeasures.MULTI_MEASURE.push({COLUMN_NAME:"", semanticColor:"Good"});
					}
					multiMeasureModel.setData(multiMeasures);
					this.getView().setModel(multiMeasureModel,"multiMeasures");
				}
				else {
					multiMeasureModel.setData({MULTI_MEASURE:[{COLUMN_NAME:that.evaluationObj.COLUMN_NAME,semanticColor:"Error"},{COLUMN_NAME:"",semanticColor:"Critical"},{COLUMN_NAME:"",semanticColor:"Good"}]});
					this.getView().setModel(multiMeasureModel,"multiMeasures");
				}

			}

			var tileProperties = JSON.parse(JSON.parse(configuration.tileConfiguration).TILE_PROPERTIES); 

			contextObj.semanticObject = tileProperties.semanticObject;
			that.onLoadSemanticObject = contextObj.semanticObject;
			contextObj.action = tileProperties.semanticAction;
			
			this.tempSemanticObject = contextObj.semanticObject || "";
			this.tempAction = contextObj.action || "";
			
			contextObj.navType = tileProperties.navType || "0";
			contextObj.sortOrder = tileProperties.sortOrder || undefined;
			contextObj.dimension = tileProperties.dimension || undefined;
			
			if(contextObj.navType.toString() == "1") {
				this.lumiraSemanticObject = contextObj.semanticObject;
				this.lumiraAction = contextObj.action;
				this.apfSemanticObject = this.APF_SEMANTIC_OBECT;
				this.apfAction = this.APF_ACTION;
			}
			else if(contextObj.navType.toString() == "2") {
				this.apfSemanticObject = contextObj.semanticObject;
				this.apfAction = contextObj.action;
				this.lumiraSemanticObject = this.LUMIRA_SEMANTIC_OBECT;
				this.lumiraAction = this.LUMIRA_ACTION;
			}
			else {
				this.apfSemanticObject = this.APF_SEMANTIC_OBECT;
				this.apfAction = this.APF_ACTION;
				this.lumiraSemanticObject = this.LUMIRA_SEMANTIC_OBECT;
				this.lumiraAction = this.LUMIRA_ACTION;
			}

			this.byId('selectTileType').setSelectedKey(contextObj.tileType);
			this.selectTile(contextObj.tileType);

			if(Number(contextObj.navType) == 1) {
				contextObj.storyId = tileProperties.storyId;
			}
			else {
				contextObj.storyId = "";
			}

			this.tileConfigurationModel.setData(contextObj);
			this.initialData = jQuery.extend(true, {}, this.tileConfigurationModel.getData(), {});

			if(Number(contextObj.navType)) {
				this.byId("selectNavType").setSelectedKey(contextObj.navType);
				this.getSelectedRadioButton(null,"ODD");
			}
			else {
				this.getSelectedRadioButton(null,"GDD");
			}

			//this.handleSemanticObjectChange(null, contextObj.semanticObject);

			var parametersJson = [];

			if(appParameters && Object.keys(appParameters).length) {
				for(var key in appParameters) {
					if(appParameters.hasOwnProperty(key)) {
						parametersJson.push({NAME:key, VALUE:appParameters[key]});
					}
				}
			}
			this.byId("propertyNameValueBox").getModel("appParameters").setData({PROPERTIES:parametersJson});
			this.initialAppParameters = jQuery.extend(true, [], (this.appParametersModel.getData().PROPERTIES || []));
		}
	},

	addNewProperty : function() {
		var that = this;
		if (this.getView().byId("appPropertyName").getValue()) {
			this.getView().byId("appPropertyName").setValueState("None");
			if (this.getView().byId("appPropertyValue").getValue()) {
				this.getView().byId("appPropertyValue").setValueState("None");
				var propertyModel = this.getView().byId('propertyNameValueBox').getModel("appParameters");
				propertyModel.getData().PROPERTIES = propertyModel.getData().PROPERTIES || [];
				if(this.checkForDuplicateProperty()) {
					propertyModel.getData().PROPERTIES.push({
						NAME : this.getView().byId("appPropertyName").getValue(),
						VALUE : this.getView().byId("appPropertyValue").getValue()
					});
					propertyModel.updateBindings();
					this.getView().byId("appPropertyName").setValue("");
					this.getView().byId("appPropertyValue").setValue("");
				}
			} else {
				this.getView().byId("appPropertyValue").setValueState("Error");
				this.getView().byId("appPropertyValue").setValueStateText(this.oApplicationFacade.getResourceBundle().getText("ENTER_PROPERTY_VALUE"));
				sap.m.MessageToast.show(this.oApplicationFacade.getResourceBundle().getText("ENTER_PROPERTY_VALUE"));
			}
		} else {
			this.getView().byId("appPropertyName").setValueState("Error");
			this.getView().byId("appPropertyName").setValueStateText(this.oApplicationFacade.getResourceBundle().getText("ENTER_PROPERTY_NAME"));
			sap.m.MessageToast.show(this.oApplicationFacade.getResourceBundle().getText("ENTER_PROPERTY_NAME"));
		}
	},

	removeProperty : function(evt) { 
		var path = evt.getSource().getBindingContext("appParameters").getPath();
		evt.getSource().getBindingContext("appParameters").getModel().getData().PROPERTIES.splice(path.substring(path.lastIndexOf("/") + 1), 1);
		evt.getSource().getBindingContext("appParameters").getModel().updateBindings();
	},

	getAllFooterButtons: function() {
		var that = this;
		var buttonsList = [
		                   {
		                	   sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("DELETE_DRAFT"),
		                	   onBtnPressed : function(evt) {
		                		   sap.m.MessageBox.show(
		                				   that.oApplicationFacade.getResourceBundle().getText("WANT_TO_DELETE_SELECTED_TILE"),
		                				   "sap-icon://hint",
		                				   that.oApplicationFacade.getResourceBundle().getText("DELETE"),
		                				   [sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL ],
		                				   function(evt){
		                					   if(evt=="OK"){
		                						   //odata remove
//		                						   that.oApplicationFacade.getODataModel().remove(that.chipContext.sPath,null,function(data) {
//		                							   sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETION_SUCCESSFUL"));
//		                							   that.oApplicationFacade.getODataModel().refresh();
//		                							   that.oRouter.navTo("detail",{
//		                								   contextPath: that.context.sPath.substr(1)
//		                							   });
//		                						   },function(err){
//		                							   sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETION_FAILED"), err.response.body);
//		                						   });
		                						   
		                						   //xsjs remove
		                						   sap.suite.smartbusiness.utils.remove(sap.suite.smartbusiness.utils.serviceUrl("CHIP_SERVICE_URI"),{id:that.currentChipId,isActive:that.currentContextState},function(data) {
		                							   sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETION_SUCCESSFUL"));
		                							   that.oApplicationFacade.getODataModel().refresh();
		                							   sap.suite.smartbusiness.utils.replaceHash({action:"configureSBKPITile", route:"detail", context: that.context.sPath.substr(1)});
		                						   },function(err){
		                							   sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETION_FAILED"), err.response.body);
		                						   });
		                					   }
		                					   if(evt=="CANCEL"){

		                					   }
		                				   }
		                		   );
		                	   },
		                   }, {
		                	   sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("SAVE") + ' and ' + that.oApplicationFacade.getResourceBundle().getText("ACTIVATE"),
		                	   onBtnPressed : function(evt) {
		                		   var data = that.tileConfigurationModel.getData();
		                		   var errorLog = "";
		                		   var configuration = null;

		                		   if((!(data.semanticObject) && Number(data.navType) != 0) || ((data.semanticObject.length == (data.semanticObject.split(" ").length - 1)) && Number(data.navType) != 0)  || (!(data.action) && Number(data.navType) != 0)   || ((data.action.length == (data.action.split(" ").length - 1)) && Number(data.navType) != 0) || !(data.title) || !(data.description) || (!(data.storyId) && Number(data.navType) == 1) || ((data.storyId.length == (data.storyId.split(" ").length - 1)) && Number(data.navType) == 1) || (data.title.length == (data.title.split(" ").length - 1)) || (data.description.length == (data.description.split(" ").length - 1))) {

		                			   if(((!(data.semanticObject) || (data.semanticObject.length == (data.semanticObject.split(" ").length - 1))) && (Number(data.navType) != 0))) {
		                				   errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_SEMANTIC_OBJECT") + "\n";
		                				   that.byId("semanticObjectText").setValueState("Error");
		                				   that.byId("semanticObjectText").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_SEMANTIC_OBJECT"));
		                			   }
		                			   if(((!(data.action) || (data.action.length == (data.action.split(" ").length - 1))) && (Number(data.navType) != 0))) {
		                				   errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_SEMANTIC_ACTION") + "\n";
		                				   that.byId("selectODD").setValueState("Error");
		                				   that.byId("selectODD").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_SEMANTIC_ACTION"));
		                			   }
		                			   if(((!(data.storyId) || (data.storyId.length == (data.storyId.split(" ").length - 1))) && (Number(data.navType) == 1))) {
		                				   errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_STORY_ID") + "\n";
		                				   that.byId("selectStoryId").setValueState("Error");
		                				   that.byId("selectStoryId").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_STORY_ID"));
		                			   }
		                			   if(!(data.title) || (data.title.length == (data.title.split(" ").length - 1))) {
		                				   errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_TITLE") + "\n";
		                				   that.byId("tileTitle").setValueState("Error");
		                				   that.byId("tileTitle").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_TITLE"));
		                			   }
		                			   if(!(data.description) || (data.description.length == (data.description.split(" ").length - 1))) {
		                				   errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_DESCRIPTION");
		                				   that.byId("tileSubtitle").setValueState("Error");
		                				   that.byId("tileSubtitle").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_DESCRIPTION"));
		                			   } 
		                			   sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_ERROR"), errorLog);
		                		   }
		                		   else {
		                			   configuration = that.formChipConfiguration();
		                			   if(data.tileType == "CM") {
		                				   var evaluation = JSON.parse(JSON.parse(JSON.parse(configuration.configuration).tileConfiguration).EVALUATION);
		                				   if(!(that.evaluationCustomMeasureArray) || !(that.evaluationCustomMeasureArray.length)) {
		                					   errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_THREE_MEASURES");
		                				   }
		                				   else {
		                					   for(var i=0,l=2; i<l; i++) {
		                						   if(!(that.evaluationCustomMeasureArray[i].COLUMN_NAME) || !(that.evaluationCustomMeasureArray[i].semanticColor)) {
		                							   errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_THREE_MEASURES");
		                							   break;
		                						   }
		                					   }
		                					   if((!errorLog) && (that.evaluationCustomMeasureArray.length == 3)) {
		                						   if(that.evaluationCustomMeasureArray[2].COLUMN_NAME && that.evaluationCustomMeasureArray[2].semanticColor) {
		                							   if(evaluation.COLUMN_NAMES[0].COLUMN_NAME == evaluation.COLUMN_NAMES[1].COLUMN_NAME) {
			                							   errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_MEASURE_THREE_MEASURES");
			                						   } 
			                						   else if(that.evaluationCustomMeasureArray[0].COLUMN_NAME == that.evaluationCustomMeasureArray[2].COLUMN_NAME) {
			                							   errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_MEASURE_THREE_MEASURES");
			                						   }
			                						   else if(that.evaluationCustomMeasureArray[1].COLUMN_NAME == that.evaluationCustomMeasureArray[2].COLUMN_NAME) {
			                							   errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_MEASURE_THREE_MEASURES");
			                						   }
		                						   }
		                						   else {
		                							   that.evaluationCustomMeasureArray.pop();
		                							   if(that.evaluationCustomMeasureArray[0].COLUMN_NAME == that.evaluationCustomMeasureArray[1].COLUMN_NAME) {
			                							   errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_MEASURE_THREE_MEASURES");
			                						   }
		                						   }
		                					   }

		                				   }
		                			   }
		                			   if(errorLog) {
		                				   sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_ERROR"), errorLog);
		                			   }
		                			   else {
		                				   var serviceStatus = that.publishChip(configuration);
		                				   //odata write
//		                				   that.oApplicationFacade.getODataModel().create("/ACTIVE_CHIPS",{id:that.currentChipId},null,function(data) {
//		                					   sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_SUCCESSFUL"));
//		                					   that.oApplicationFacade.getODataModel().refresh();
//		                					   that.oRouter.navTo("detail",{
//		                						   contextPath: that.context.sPath.substr(1)
//		                					   });
//		                				   },function(err){
//		                					   sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_ERROR"), err.response.body);
//		                				   });
		                				   
		                				   //xsjs create
		                				   if(serviceStatus) {
		                					   sap.suite.smartbusiness.utils.create(sap.suite.smartbusiness.utils.serviceUrl("ACTIVATE_CHIP_SERVICE_URI"),{id:that.currentChipId},null,function(data) {
		                						   sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_SUCCESSFUL"));
		                						   that.oApplicationFacade.getODataModel().refresh();
		                						   sap.suite.smartbusiness.utils.replaceHash({action:"configureSBKPITile", route:"detail", context: that.context.sPath.substr(1)});
		                					   },function(err){
		                						   sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_ERROR"), err.responseText);
		                					   });
		                				   }
		                				   
		                			   }
		                		   }
		                	   },
		                   },{
		                	   sI18nBtnTxt : "CONFIG_DRILLDOWN",
		                	   onBtnPressed : function(evt) {
		                		   sap.suite.smartbusiness.utils.appToAppNavigation({action: "configureSBKPIDrilldown", route: "detail", context: ("EVALUATIONS_DDA('"+that.getView().getBindingContext().getProperty("ID")+"')")});
		                	   }
		                   }, {
		                	   sI18nBtnTxt : "SAVE_CREATE_NEW",
		                	   onBtnPressed : function(evt) {
		                		   var configuration = that.formChipConfiguration();
		                		   var serviceStatus = that.publishChip(configuration);

		                		   if(serviceStatus) {
		                			   if(that.appMode == "addTile") {
			                			   var hashObj = hasher || window.hasher;
			                			   var currentHash = hasher.getHash();
			                			   //sap.suite.smartbusiness.utils.hashChange({hash: "#FioriApplication-configureSBKPITile"});
			                			   sap.suite.smartbusiness.utils.appToAppNavigation({action: "configureSBKPITile"});
			                			   setTimeout(function(){
			                				   sap.suite.smartbusiness.utils.hashChange({hash: currentHash});
			                			   },0);
			                		   }
			                		   else {
			                			   sap.suite.smartbusiness.utils.replaceHash({action:"configureSBKPITile", route:"addTile", context: that.context.sPath.substr(1)});
			                		   }
		                		   }
		                	   }
		                   }, {
		                	   sI18nBtnTxt : "CANCEL",
		                	   onBtnPressed : function(evt) {
		                		   that.handleBackAndCancel();
		                	   }
		                   }

		                   ];
		return buttonsList;

	},

	updateFooterButtons: function(chipObj) {
		var buttonsList = this.getAllFooterButtons();
		this.oHeaderFooterOptions.buttonList = [];

		if(chipObj) {
			if((!(chipObj.isActive)) && (this.appMode == "editTile")) {
				this.oHeaderFooterOptions.buttonList.push(buttonsList[0]);
			}
		}
		for(var i=1,l=buttonsList.length; i<l; i++) {
			if(i==2) {
				if(chipObj && (chipObj.isActive == 1)) {
					this.oHeaderFooterOptions.buttonList.push(buttonsList[i]);
				}
			}
			else {
				this.oHeaderFooterOptions.buttonList.push(buttonsList[i]);
			}

		}

		this.setHeaderFooterOptions(this.oHeaderFooterOptions);
	},

	checkForDuplicateProperty: function() {
		var that = this;
		var properties = this.getView().byId('propertyNameValueBox').getModel("appParameters").getData().PROPERTIES;
		var property = this.getView().byId("appPropertyName").getValue();
		var value = this.getView().byId("appPropertyValue").getValue();
		if(!isNaN(Number(property))) {
			this.getView().byId("appPropertyName").setValueState("Error");
			this.getView().byId("appPropertyName").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_PROPERTY_NOT_STRING"));
			sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ERROR_PROPERTY_NOT_STRING"));
			return false;
		}
		for(var i=0,l=properties.length; i<l; i++) {
			if((properties[i].NAME == property)) {
				if(properties[i].NAME == property) {
					this.getView().byId("appPropertyName").setValueState("Error");
					this.getView().byId("appPropertyName").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_MULTIPLE_VALUES_FOR_PROPERTY"));
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ERROR_MULTIPLE_VALUES_FOR_PROPERTY"));
				}
				return false;
			} 
		}
		return true;
	},

	inputNameChange: function(evt) {
		var that = this;
		var property = evt.getSource().getValue();
		var index = Number(evt.getSource().getBindingContext("appParameters").sPath[evt.getSource().getBindingContext("appParameters").sPath.length - 1]);
		var properties = this.getView().byId('propertyNameValueBox').getModel("appParameters").getData().PROPERTIES;
		for(var i=0,l=properties.length; i<l; i++) {
			if(i == index) {
				continue;
			}
			if(properties[i].NAME == property) {
				evt.getSource().setValueState("Error");
				evt.getSource().setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_MULTIPLE_VALUES_FOR_PROPERTY"));
				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ERROR_MULTIPLE_VALUES_FOR_PROPERTY"));
				return;
			}
		}
		evt.getSource().setValueState("None");
	},

	inputValueChange: function(evt) {
		var that = this;
		var value = evt.getSource().getValue();
		var property = evt.getSource().getBindingContext("appParameters").getObject().NAME;
		var index = Number(evt.getSource().getBindingContext("appParameters").sPath[evt.getSource().getBindingContext("appParameters").sPath.length - 1]);
		var properties = this.getView().byId('propertyNameValueBox').getModel("appParameters").getData().PROPERTIES;
		for(var i=0,l=properties.length; i<l; i++) {
			if(i == index) {
				continue;
			}
			if(properties[i].NAME == property && properties[i].VALUE == value) {
				evt.getSource().setValueState("Error");
				evt.getSource().setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_PROPERTY_VALUE"));
				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_PROPERTY_VALUE"));
			}
		}
	},

	onAfterRendering: function() {
		var that = this;
		if(this.appMode == "addTile") {
			this.getView().byId('NT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiHighlight"));
		}
		this.initialData = jQuery.extend(true, {}, this.tileConfigurationModel.getData(), {});
	},

	handleSemanticObjectChange: function(evt) {
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
		this.tempSemanticObject = evt.getSource().getValue();
		if(this.tileConfigurationModel.getData().navType.toString() == "2") {
			this.apfSemanticObject = evt.getSource().getValue();
		}
		if(this.tileConfigurationModel.getData().navType.toString() == "1") {
			this.lumiraSemanticObject = evt.getSource().getValue();
		}
		if(this.tileConfigurationModel.getData().navType.toString() == "0" || this.tileConfigurationModel.getData().navType.toString() == "4") {
			this.onLoadSemanticObject = evt.getSource().getValue();
		}
	},

	setSemanticAction: function(evt) {
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
		this.tempAction = evt.getSource().getValue();
		if(this.tileConfigurationModel.getData().navType.toString() == "2") {
			this.apfAction = evt.getSource().getValue();
		}
		if(this.tileConfigurationModel.getData().navType.toString() == "1") {
			this.lumiraAction = evt.getSource().getValue();
		}
	},

	subTitleChange: function(evt) {
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
	},

	titleChange: function(evt) {
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
	},

	appPropertyNameChange: function(evt) {
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
	},

	appPropertyValueChange: function(evt) {
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
	},

	setStoryId: function(evt) {
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
	},

	handleStoryIdValueHelp: function() {
		var that = this;
		var storyIdValueHelpDialog = new sap.m.SelectDialog({
			title : that.oApplicationFacade.getResourceBundle().getText("STORY_ID"),
			noDataText : that.oApplicationFacade.getResourceBundle().getText("NO_DATA_FOUND"),
			items : {
				path : "/Stories",
				template : new sap.m.StandardListItem({
					title : "{NAME}",
					description : "{UUID}"
				})
			},
			confirm : function(oEvent) {
				that.tileConfigurationModel.getData().storyId = oEvent.getParameter("selectedItem").getProperty("description");
				that.byId("selectStoryId").setValue(that.tileConfigurationModel.getData().storyId);
			},
			liveChange : function(oEvent) {
				var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
				var oFilterPackage = new sap.ui.model.Filter("tolower(NAME)", sap.ui.model.FilterOperator.Contains,searchValue);
				var oFilterObject = new sap.ui.model.Filter("tolower(UUID)", sap.ui.model.FilterOperator.Contains,searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter(new sap.ui.model.Filter([oFilterPackage, oFilterObject], false));
			}
		});
		storyIdValueHelpDialog.open();
		var oDataStoryIdModel = new sap.ui.model.odata.ODataModel("/sap/bi/launchpad/integration/smb.xsodata",true);
		storyIdValueHelpDialog.setModel(oDataStoryIdModel);
		if(this.evaluationObj.VIEW_NAME) {
			storyIdValueHelpDialog.getBinding("items").filter([new sap.ui.model.Filter("VIEW_NAME","EQ",this.evaluationObj.VIEW_NAME)]);
		}
	},

	handleCustomMeasure: function(evt) {
		var that = this;
		var currentInput = evt.getSource();
		this.customMeasuresDialog = new sap.m.SelectDialog({
			title : that.oApplicationFacade.getResourceBundle().getText("CHOOSE_ADDL_MEASURE"),
			noDataText : that.oApplicationFacade.getResourceBundle().getText("NO_DATA_FOUND"),
			items : {
				path : "additionalMeasures>/Measures",
				template : new sap.m.StandardListItem({
					title : "{additionalMeasures>COLUMN_NAME}"
				})
			},
			confirm : function(oEvent) {
				var value = oEvent.getParameter("selectedItem").getProperty("title");
				currentInput.setValue(value);
			},
			liveChange : function(oEvent) {
				var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
				var oFilterPackage = new sap.ui.model.Filter("tolower(COLUMN_NAME)", sap.ui.model.FilterOperator.Contains,searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter(new sap.ui.model.Filter([oFilterPackage], false));
			}
		});
		this.customMeasuresDialog.open();
		this.customMeasuresDialog.setModel(this.customMeasuresModel, "additionalMeasures");
	},
	handleCustomMeasure1: function(evt) {
		var that = this;
		var currentInput = evt.getSource();
		this.customMeasuresDialog1 = new sap.m.SelectDialog({
			title : that.oApplicationFacade.getResourceBundle().getText("CHOOSE_ADDL_MEASURE"),
			noDataText : that.oApplicationFacade.getResourceBundle().getText("NO_DATA_FOUND"),
			items : {
				path : "additionalMeasures1>/Measures",
				template : new sap.m.StandardListItem({
					title : "{additionalMeasures1>COLUMN_NAME}"
				})
			},
			confirm : function(oEvent) {
				var value = oEvent.getParameter("selectedItem").getProperty("title");
				currentInput.setValue(value);
			},
			liveChange : function(oEvent) {
				var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
				var oFilterPackage = new sap.ui.model.Filter("tolower(COLUMN_NAME)", sap.ui.model.FilterOperator.Contains,searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter(new sap.ui.model.Filter([oFilterPackage], false));
			}
		});
		this.customMeasuresDialog1.open();
		var modelData = this.customMeasuresModel1.getData();
		if(modelData.Measures[0].COLUMN_NAME !== "") {
			modelData.Measures.unshift({COLUMN_NAME:""})
		}
		this.customMeasuresModel1.setData(modelData);
		this.customMeasuresDialog1.setModel(this.customMeasuresModel1, "additionalMeasures1");
	},
	addAdditionalLanguageDialog : function(){

		var that=this;

		this.additionalLanguageListModel = new sap.ui.model.json.JSONModel();
		this.additionalLanguageListModelData = $.extend(true,{},this.additionalLanguageLinkModel.getData());
		this.additionalLanguageListModel.setData(that.additionalLanguageListModelData);

		this.languageTextInput = new sap.m.Input({
			layoutData : new sap.ui.layout.GridData({
				span : "L8 M8 S8"
			})
		});
		this.languageDescriptionInput = new sap.m.Input({
			layoutData : new sap.ui.layout.GridData({
				span : "L8 M8 S8"
			})
		});
		this.languageKeySelect = new sap.m.Select({
			layoutData : new sap.ui.layout.GridData({
				span : "L6 M6 S6"
			})
		});
		this.addedLanguagesList = new sap.m.List({
			layoutData : new sap.ui.layout.GridData({
				span : "L5 M5 S5"
			}),
		}).setModel(that.additionalLanguageListModel,"additionalLanguageListModel");

		this.addedLanguagesList.bindItems("additionalLanguageListModel>/ADDITIONAL_LANGUAGE_ARRAY", new sap.m.CustomListItem({
			content : new sap.ui.layout.Grid({
				hSpacing: 1,
				vSpacing: 0,
				defaultSpan : "L12 M12 S12",
				content: [
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>ADDITIONAL_LANGUAGE_TITLE}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L12 M12 S12",
				        		  vAlign : "Middle"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>ADDITIONAL_LANGUAGE_DESCRIPTION}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L6 M6 S6",
				        		  vAlign : "Middle"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>ADDITIONAL_LANGUAGE_KEY}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L4 M4 S4"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Button({
				        	  icon : "sap-icon://sys-cancel",
				        	  type : "Transparent",
				        	  press : function(oEvent){
				        		  var deletedIndex = oEvent.getSource().getBindingContext("additionalLanguageListModel").getPath().substr(1);
				        		  var newData = that.addedLanguagesList.getModel("additionalLanguageListModel").getData().ADDITIONAL_LANGUAGE_ARRAY.splice(deletedIndex,1);
				        		  that.addedLanguagesList.getModel("additionalLanguageListModel").getData().NO_OF_ADDITIONAL_LANGUAGES = that.addedLanguagesList.getModel("additionalLanguageListModel").getData().ADDITIONAL_LANGUAGE_ARRAY.length;
				        		  that.addedLanguagesList.getModel("additionalLanguageListModel").updateBindings();
				        	  },
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L2 M2 S2"
				        	  })
				          })
				          ]
			})
		}));

		var additionalLanguageDialog = new sap.m.Dialog({
			contentHeight : "50%",
			contentWidth : "25%",
			title : that.oApplicationFacade.getResourceBundle().getText("ADDITIONAL_LANGUAGE"),
			content :  [
			            new sap.ui.layout.Grid({
			            	hSpacing: 1,
			            	vSpacing: 4,
			            	defaultSpan : "L12 M12 S12",
			            	content: [
			            	          new sap.ui.layout.form.SimpleForm({
			            	        	  editable:true, 
			            	        	  layout:"ResponsiveGridLayout", 
			            	        	  content : [
			            	        	             new sap.m.Label({
			            	        	            	 text : that.oApplicationFacade.getResourceBundle().getText("TITLE"),
			            	        	            	 textAlign : "Right",
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3",
			            	        	            	 })
			            	        	             }),

			            	        	             that.languageTextInput,

			            	        	             new sap.m.Label({
			            	        	            	 text : that.oApplicationFacade.getResourceBundle().getText("SUB_TITLE"),
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3",
			            	        	            	 })
			            	        	             }),

			            	        	             that.languageDescriptionInput,

			            	        	             new sap.m.Label({
			            	        	            	 text : that.oApplicationFacade.getResourceBundle().getText("LANGUAGE")+":",
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3"
			            	        	            	 })
			            	        	             }),

			            	        	             that.languageKeySelect,

			            	        	             new sap.m.Button({
			            	        	            	 icon:"sap-icon://add",
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L2 M2 S2"
			            	        	            	 }),
			            	        	            	 press : function(){

			            	        	            		 if(that.languageTextInput.getValue() || that.languageDescriptionInput.getValue()){
			            	        	            			 for(var i=0;i<that.addedLanguagesList.getModel("additionalLanguageListModel").getData().ADDITIONAL_LANGUAGE_ARRAY.length;i++){
			            	        	            				 if(that.addedLanguagesList.getModel("additionalLanguageListModel").getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_KEY === that.languageKeySelect.getSelectedItem().getText()){
			            	        	            					 sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_LANGUAGE_EXISTS",that.languageKeySelect.getSelectedItem().getText()));
			            	        	            					 return;
			            	        	            				 }
			            	        	            			 }
			            	        	            			 var addedLanguageObject = {
			            	        	            					 "ADDITIONAL_LANGUAGE_TITLE" : that.languageTextInput.getValue(),
			            	        	            					 "ADDITIONAL_LANGUAGE_DESCRIPTION" : that.languageDescriptionInput.getValue(),
			            	        	            					 "ADDITIONAL_LANGUAGE_KEY" : that.languageKeySelect.getSelectedItem().getText(),
			            	        	            					 "ADDITIONAL_SAP_LANGUAGE_KEY" : that.languageKeySelect.getSelectedKey()
			            	        	            			 };
			            	        	            			 that.addedLanguagesList.getModel("additionalLanguageListModel").getData().ADDITIONAL_LANGUAGE_ARRAY.push(addedLanguageObject);
			            	        	            			 that.addedLanguagesList.getModel("additionalLanguageListModel").getData().NO_OF_ADDITIONAL_LANGUAGES = that.addedLanguagesList.getModel("additionalLanguageListModel").getData().ADDITIONAL_LANGUAGE_ARRAY.length;
			            	        	            			 that.addedLanguagesList.getModel("additionalLanguageListModel").updateBindings();
			            	        	            			 that.languageTextInput.setValue("");
			            	        	            			 that.languageDescriptionInput.setValue("");
			            	        	            		 }
			            	        	            	 }
			            	        	             })
			            	        	             ]
			            	          })
			            	          ]
			            }).addStyleClass("languageGrid"),

			            that.addedLanguagesList
			            ],

			            beginButton : new sap.m.Button({
			            	text : that.oApplicationFacade.getResourceBundle().getText("OK"),
			            	press : function(){
			            		that.additionalLanguageLinkModel.setData(that.additionalLanguageListModel.getData());
			            		that.additionalLanguageLinkModel.updateBindings();
			            		additionalLanguageDialog.close();
			            	}
			            }),
			            endButton : new sap.m.Button({
			            	text : that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
			            	press : function(){
			            		additionalLanguageDialog.close();
			            	}
			            })
		});

		var data = this.languagesArray;
		
		for(var i=0;i<data.length;i++){
			if((data[i].LAISO).toUpperCase() == (sap.ui.getCore().getConfiguration().getLocale().getLanguage()).toUpperCase()){
				data.splice(i,1);
			}
		}
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData(data);
		that.languageKeySelect.setModel(oModel, "otherLanguageKey");
		that.languageKeySelect.bindItems("otherLanguageKey>/", new sap.ui.core.Item({
			text: "{otherLanguageKey>LAISO}",
			key: "{otherLanguageKey>SPRAS}"
		}));

		additionalLanguageDialog.open();
	},
	
	handleBackAndCancel: function() {
		var that = this;
		var obj = {};
		obj.oldPayload = that.initialData;
		obj.newPayload = that.tileConfigurationModel.getData();
		obj.objectType = "Chips";
		obj = sap.suite.smartbusiness.utils.dirtyBitCheck(obj);
		that.chipTextPayload = [];
		if(that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES) {
			for(var i=0;i<that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES;i++){
				var chipTextObject = {};
				chipTextObject.title = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_TITLE;
				chipTextObject.description = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_DESCRIPTION;
				chipTextObject.language = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_SAP_LANGUAGE_KEY;
				that.chipTextPayload.push(chipTextObject);
			}
		}
		that.languagePayloadForDirtyBitTest = []; 
		for(var i=0;i<that.oldLanguagePayload.length;i++){
			var textObject = {};
			textObject.language = that.oldLanguagePayload[i].language;
			textObject.description = that.oldLanguagePayload[i].description;
			textObject.title= that.oldLanguagePayload[i].title;
			that.languagePayloadForDirtyBitTest.push(textObject);
		}
		var languageDeltaObject = sap.suite.smartbusiness.utils.dirtyBitCheck({
			oldPayload : that.languagePayloadForDirtyBitTest,
			newPayload : that.chipTextPayload,
			objectType : "CHIP_TEXTS"
		});
		
		var appParameters = sap.suite.smartbusiness.utils.dirtyBitCheck({
			oldPayload : that.initialAppParameters,
			newPayload : that.appParametersModel.getData().PROPERTIES || [],
			objectType : "APP_PARAMETERS"
		});
		
		if(obj.updates.length || languageDeltaObject.deletes.length || languageDeltaObject.updates.length || appParameters.deletes.length || appParameters.updates.length) {
			var backDialog = new sap.m.Dialog({
				icon:"sap-icon://warning2",
				title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
				state:"Error",
				type:"Message",
				content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("ON_BACK_WARNING")})],
				beginButton: new sap.m.Button({
					text:that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
					press: function(){
						sap.suite.smartbusiness.utils.replaceHash({action:"configureSBKPITile", route:"detail", context: that.context.sPath.substr(1)});
					}
				}),
				endButton: new sap.m.Button({
					text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
					press:function(){backDialog.close();}
				})                                              
			});
			backDialog.open();
		}
		else {
			sap.suite.smartbusiness.utils.replaceHash({action:"configureSBKPITile", route:"detail", context: that.context.sPath.substr(1)});
		}
	}
});


}; // end of sap/suite/ui/smartbusiness/designtime/visualization/view/S4.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.workspace.Configuration') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.workspace.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained


sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.designtime.workspace.Configuration", {
	oServiceParams: {
		serviceList: [{
			name : "SMART_BUSINESS",
			masterCollection : "INDICATORS_MODELER",
			serviceUrl : "/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata/",
			isDefault : true,
			mockedDataSource : "",
			useBatch : false
		}]
	},

	/**
	 * @inherit
	 */
	getServiceList : function() {
		return this.getServiceParams().serviceList;
	},

	getMasterKeyAttributes : function() {
		//return the key attribute of your master list item
		return ["Id"];
	},
	getExcludedQueryStringParameters : function() {
		return ["sap-client","sap-language"];
	},
	getHanaSystem : function() {
        var hashObj = hasher || window.hasher; 
        var hashArr = hashObj.getHashAsArray();
        if(hashArr && hashArr.length && hashArr[0]) {
               var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
               for(var i=0,l=hashParameters.length; i<l; i++) {
                     if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                            return hashParameters[i].split("=")[1]; 
                     }
               }
        }
        return "";
	},
	getServiceParams : function() {
		if(sap.ushell && sap.ushell.Container) {
			var serviceUrl = this.oServiceParams.serviceList[0].serviceUrl;
	        this.oServiceParams.serviceList[0].serviceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(serviceUrl, this.getHanaSystem());
		}
        return this.oServiceParams;
	},
});
}; // end of sap/suite/ui/smartbusiness/designtime/workspace/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.workspace.view.S2.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.workspace.view.S2.controller');
jQuery.sap.require('sap.ca.scfld.md.controller.ScfldMasterController'); // unlisted dependency retained


sap.ca.scfld.md.controller.ScfldMasterController.extend("sap.suite.ui.smartbusiness.designtime.workspace.view.S2", {

	onInit: function() {
		var that = this;
		that.oApplicationFacade.getODataModel().setSizeLimit(100000); 
		if(!(that.oApplicationFacade.currentLogonHanaUser)) {
			this.oApplicationFacade.getODataModel().read("/SESSION_USER",null,null,true,function(data) {
				that.oApplicationFacade.currentLogonHanaUser = (data.results && data.results.length) ? data.results[0].LOGON_USER : null; 
			}, function(err) {
				that.oApplicationFacade.currentLogonHanaUser = null;
				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
			});
		}

		this.defaultHeaderFooterOptions = {
				sI18NMasterTitle : "MASTER_TITLE",
				sI18NSearchFieldPlaceholder : "SEARCHFIELD_PLACEHOLDER",
				onBack: function() {
					window.history.back();
				},
				onEditPress : function(isMultiSelect) {
					that.toggleListSelection(isMultiSelect);
				},
				oFilterOptions : {
					onFilterPressed: function(evt) {
						that.getView().filterOptionDialog = that.getView().filterOptionDialog || that.createFilterOptions();
						that.getView().filterOptionDialog.open();
					}
				},
				oSortOptions : {
					onSortPressed: function(evt) {
						that.getView().sortOptionDialog = that.getView().sortOptionDialog || that.createSortOptions();
						that.getView().sortOptionDialog.open();
					}
				},
				oGroupOptions : {
					onGroupPressed: function(evt) {
						that.getView().groupOptionDialog = that.getView().groupOptionDialog || that.createGroupOptions();
						that.getView().groupOptionDialog.open();
					}
				},
				onAddPress : function(evt) {
					sap.suite.smartbusiness = sap.suite.smartbusiness || {};
					sap.suite.smartbusiness.modelerAppCache = sap.suite.smartbusiness.modelerAppCache || {};
					sap.suite.smartbusiness.modelerAppCache.createSBKPI  = sap.suite.smartbusiness.modelerAppCache.createSBKPI || {};
					sap.suite.smartbusiness.modelerAppCache.createSBKPI.appFromWorkspace = true;
					sap.suite.smartbusiness.utils.appToAppNavigation({action:"createSBKPI"});
				}
		};

		this.multiSelectHeaderFooterOptions = {
				bSuppressBookmarkButton: {},
				onBack: function() {
					sap.suite.smartbusiness.utils.appToAppNavigation({});
				},
				onEditPress : function(isMultiSelect) {
					that.toggleListSelection(isMultiSelect);
				},
				buttonList : [{
					sId: "favouriteButton",
					sI18nBtnTxt : "FAVOURITE_BUTTON_TEXT",
					onBtnPressed : function(evt) { 
						if(that.byId("list").getSelectedContexts().length) {
							var selectedContexts = that.byId("list").getSelectedContexts();
							var payload = {};
							var batchOperations = [];
							var path = null;
							var isFavouritesSuccessful = true;
							var oDataModel = that.oApplicationFacade.getODataModel();
							//odata update
//							for(var i=0,l=selectedContexts.length; i<l; i++) {
//							payload = {ID:selectedContexts[i].getProperty("ID"), TYPE:selectedContexts[i].getProperty("ENTITY_TYPE"), USER_ID:that.oApplicationFacade.currentLogonHanaUser, MANUAL_ENTRY:1, LAST_WORKED_ON:null};
//							if(selectedContexts[i].getProperty("MANUAL_ENTRY") == null) {
//							// DO POST
//							batchOperations.push(oDataModel.createBatchOperation("/FAVOURITES","POST",payload));
//							}
//							else if(selectedContexts[i].getProperty("MANUAL_ENTRY") == 0) {
//							// DO PUT
//							path = "(ID='" + selectedContexts[i].getProperty("ID") + "',TYPE='" + selectedContexts[i].getProperty("ENTITY_TYPE") + "',USER_ID='" + that.oApplicationFacade.currentLogonHanaUser + "')"; 
//							batchOperations.push(oDataModel.createBatchOperation(("/FAVOURITES" + path),"PUT",payload));
//							}
//							else {
//							// DO NOTHING
//							}
//							}
//							oDataModel.addBatchChangeOperations(batchOperations);
//							oDataModel.submitBatch(function(data,response,errorResponse){
//							if(errorResponse.length)
//							{      isFavouritesSuccessful = false;
//							return;
//							}
//							var responses = data.__batchResponses[0].__changeResponses;
//							for(var key in responses)
//							if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200") {
//							isFavouritesSuccessful = false;   
//							}
//							},function(err){
//							isFavouritesSuccessful = false;
//							},false);

//							if(!isFavouritesSuccessful) {      
//							sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_BATCH_SAVE_ERROR_KPI_OPI"));
//							}
//							else {
//							sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_BATCH_SAVE_SUCCESS_KPI_OPI"));
//							oDataModel.refresh();
//							}

							//xsjs update
							var payloads = [];
							for(var i=0,l=selectedContexts.length; i<l; i++) {
								if(!(selectedContexts[i].getProperty("MANUAL_ENTRY"))) {
									payloads.push({ID:selectedContexts[i].getProperty("ID"), TYPE:selectedContexts[i].getProperty("ENTITY_TYPE"), USER_ID:that.oApplicationFacade.currentLogonHanaUser, MANUAL_ENTRY:1, LAST_WORKED_ON:null});
								}
							}
							if(payloads.length) {
								sap.suite.smartbusiness.utils.update(sap.suite.smartbusiness.utils.serviceUrl("INDICATOR_FAVOURITE_SERVICE_URI"),payloads,null,function(data) {
									sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_SUCCESS_KPI_OPI"));
									oDataModel.refresh();
								}, function(err) {
									sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_KPI_OPI_ERROR"));
								});
							}
							else {
								
							}
						}
						else {
							sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("NO_KPI_OPI_SELECTED"));
						}
					}
				}, {
					sId: "removeFavouriteButton",
					sI18nBtnTxt : "REMOVE_FAV_BUTTON_TEXT",
					onBtnPressed : function(evt) { 
						if(that.byId("list").getSelectedContexts().length) {
							var selectedContexts = that.byId("list").getSelectedContexts();
							var batchOperations = [];
							var path = null;
							var isFavouritesSuccessful = true;
							var oDataModel = that.oApplicationFacade.getODataModel();
							//odata remove
//							for(var i=0,l=selectedContexts.length; i<l; i++) {
//								if(selectedContexts[i].getProperty("MANUAL_ENTRY") == null) {
//									// DO NOTHING
//								}
//								else if(selectedContexts[i].getProperty("MANUAL_ENTRY") == 0) {
//									// DO NOTHING
//								}
//								else {
//									// DO DELETE
//									path = "(ID='" + selectedContexts[i].getProperty("ID") + "',TYPE='" + selectedContexts[i].getProperty("ENTITY_TYPE") + "',USER_ID='" + that.oApplicationFacade.currentLogonHanaUser + "')"; 
//									batchOperations.push(oDataModel.createBatchOperation(("/FAVOURITES" + path),"DELETE"));
//								}
//							}
//							oDataModel.addBatchChangeOperations(batchOperations);
//							oDataModel.submitBatch(function(data,response,errorResponse){
//								if(errorResponse.length)
//								{      isFavouritesSuccessful = false;
//								return;
//								}
//								var responses = data.__batchResponses[0].__changeResponses;
//								for(var key in responses)
//									if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200") {
//										isFavouritesSuccessful = false;   
//									}
//							},function(error){
//								isFavouritesSuccessful = false;
//							},false);
//
//							if(!isFavouritesSuccessful) {      
//								sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_BATCH_SAVE_ERROR_KPI_OPI"));
//							}
//							else {
//								sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("REM_FAVOURITE_BATCH_SAVE_SUCCESS_KPI_OPI"));
//								oDataModel.refresh();
//							}
							
							//xsjs remove
							var payloads = [];
							for(var i=0,l=selectedContexts.length; i<l; i++) {
								if(selectedContexts[i].getProperty("MANUAL_ENTRY")) {
									payloads.push({ID:selectedContexts[i].getProperty("ID"), TYPE:selectedContexts[i].getProperty("ENTITY_TYPE"), USER_ID:that.oApplicationFacade.currentLogonHanaUser, MANUAL_ENTRY:1, LAST_WORKED_ON:null});
								}
							}
							if(payloads.length) {
								sap.suite.smartbusiness.utils.remove(sap.suite.smartbusiness.utils.serviceUrl("INDICATOR_FAVOURITE_SERVICE_URI"),payloads,function(data) {
									sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("REM_FAVOURITE_BATCH_SAVE_SUCCESS_KPI_OPI"));
									oDataModel.refresh();
								}, function(err) {
									sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_BATCH_SAVE_ERROR_KPI_OPI"));
								});
							}
							else {
								
							}
						}
						else {
							sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("NO_KPI_OPI_SELECTED"));
						}
					}
				}, {
					sId: "deleteButton",
					sI18nBtnTxt : "DELETE_BUTTON_TEXT",
					onBtnPressed : function(evt) {
						if(that.byId("list").getSelectedContexts().length) {
							sap.m.MessageBox.show(
									that.oApplicationFacade.getResourceBundle().getText("WARNING_INDICATOR_DELETE_KPI_OPI"),
									"sap-icon://hint",
									that.oApplicationFacade.getResourceBundle().getText("INDICATOR_DELETE_ALERT_TITLE"),
									[sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL ],
									function(evt){
										if(evt=="OK"){
											var selectedContexts = that.byId("list").getSelectedContexts();
											var payload = {};
											var batchOperations = [];
											var isDeletesSuccessful = true;
											var oDataModel = that.oApplicationFacade.getODataModel();
											//odata remove
//											for(var i=0,l=selectedContexts.length; i<l; i++) {
//												if(selectedContexts[i].getProperty("IS_ACTIVE") == 1) {
//													// DO ACTIVE DELETE
//
//													path = selectedContexts[i].sPath.replace("INDICATORS_MODELER","INDICATORS");
//													batchOperations.push(oDataModel.createBatchOperation(path,"DELETE"));
//
//												}
//												else if(selectedContexts[i].getProperty("IS_ACTIVE") == 0) {
//													// DO INACTIVE DELETE
//													path = selectedContexts[i].sPath.replace("INDICATORS_MODELER","INDICATORS");
//													batchOperations.push(oDataModel.createBatchOperation(path,"DELETE"));
//												}
//												else {
//													// DO NOTHING
//												}
//											}
//
//											oDataModel.addBatchChangeOperations(batchOperations);
//											oDataModel.submitBatch(function(data,response,errorResponse){
//												if(errorResponse.length)
//												{       isDeletesSuccessful = false;
//												return;
//												}
//												var responses = data.__batchResponses[0].__changeResponses;
//												for(var key in responses)
//													if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200") {
//														isDeletesSuccessful = false;      
//													}
//
//											},function(error){
//												isDeletesSuccessful = false;
//											},false);
//
//											if(!isDeletesSuccessful) { 
//												sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETE_BATCH_SAVE_ERROR_KPI_OPI"));
//											}
//											else {
//												sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETE_BATCH_SAVE_SUCCESS_KPI_OPI"));
//												oDataModel.refresh();
//											}
											
											//xsjs remove
											var payloads = [];
											for(var i=0,l=selectedContexts.length; i<l; i++) {
												payloads.push({ID:selectedContexts[i].getProperty("ID"),IS_ACTIVE:selectedContexts[i].getProperty("IS_ACTIVE")});
											}
											if(payloads.length) {
												sap.suite.smartbusiness.utils.remove(sap.suite.smartbusiness.utils.serviceUrl("INDICATOR_SERVICE_URI"),payloads,function(data){
													sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETE_BATCH_SAVE_SUCCESS_KPI_OPI"));
													oDataModel.refresh();
												},
												function(err){
													sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETE_BATCH_SAVE_ERROR_KPI_OPI"));
												});
											}
											else {
												
											}
										}
										if(evt=="CANCEL"){

										}
									}
							);
						}
						else {
							sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("NO_KPI_OPI_SELECTED"));
						}
					}
				}]
		};

		if(jQuery.sap.getUriParameters().get("sap-sb-enable-export") == "true") {
			var exportButton = {
					sI18nBtnTxt : "EXPORT_INDICATORS_KPI_OPI",
					onBtnPressed : function(evt) {
						if(that.byId("list").getSelectedContexts().length) {
							that.exportIndicators();
						}
						else {
							sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("NO_KPI_OPI_SELECTED"));
						}
					}
			}

			this.multiSelectHeaderFooterOptions.buttonList.unshift(exportButton);
		}  

		this.currentHeaderFooterOptions = this.defaultHeaderFooterOptions;
	},

	createFilterOptions: function() {
		var that = this;
		var filterOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("filterOptionsDialog"),
			filterItems: [
			              new sap.m.ViewSettingsFilterItem({
			            	  text: that.oApplicationFacade.getResourceBundle().getText("BY_STATUS"),
			            	  key: "status",
			            	  items: [
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("DRAFTS"),
			            	        	  key: "drafts"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("ACTIVATED"),
			            	        	  key: "activated"
			            	          }),
			            	          ]
			              }), 
			              new sap.m.ViewSettingsFilterItem({
			            	  text: that.oApplicationFacade.getResourceBundle().getText("ACTIVITY"),
			            	  key: "activity",
			            	  items: [
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("SELF_CREATED"),
			            	        	  key: "self_created"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("RECENTLY_WORKED_UPON"),
			            	        	  key: "recently_worked_upon"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("FAVOURITE"),
			            	        	  key: "favorite"
			            	          }),
			            	          ]
			              })
			              ],
			              confirm : function(evt) {
			            	  var infoBarText = "";
			            	  var selectedFilters = evt.getParameter("filterItems");

			            	  that.setFiltering(evt.getParameter("filterItems"));

			            	  if(selectedFilters && selectedFilters.length) {
			            		  var filterObj = {};
			            		  for(var i=0,l=selectedFilters.length; i<l; i++) {
			            			  filterObj[selectedFilters[i].getParent().getKey()] = filterObj[selectedFilters[i].getParent().getKey()] || "";
			            			  filterObj[selectedFilters[i].getParent().getKey()] += (filterObj[selectedFilters[i].getParent().getKey()]) ? (",") : "";
			            			  filterObj[selectedFilters[i].getParent().getKey()] += selectedFilters[i].getText(); 
			            		  }

			            		  for(var filter in filterObj) {
			            			  if(filterObj.hasOwnProperty(filter)) {
			            				  infoBarText += (infoBarText) ? " ; " : "";
			            				  infoBarText += filterObj[filter];
			            			  }
			            		  }
			            		  that.byId("filterToolbar").setVisible(true);
			            		  that.byId("workspaceInfo").setText(infoBarText);	
			            	  }
			            	  else {
			            		  that.byId("workspaceInfo").setText("");
			            		  that.byId("filterToolbar").setVisible(false);
			            	  }
			              }
		});
		return filterOptionsDialog;
	},

	createSortOptions: function() {
		var that = this;
		var sortOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("sortOptionsDialog"),
			sortItems: [
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_NEWEST"),
			            	key: "newest"
			            }), 
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_OLDEST"),
			            	key: "oldest"
			            }),
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_TYPE"),
			            	key: "type"
			            }),
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("ALPHABETICALLY"),
			            	key: "alphabetically"
			            })
			            ],
			            confirm : function(evt) {
			            	if(evt.getParameter("sortItem")) {
			            		that.setSorting(evt.getParameter("sortItem").getKey(), evt.getParameter("sortDescending"));
			            	}
			            	else {
			            		that.setGrouping("workspace", true);
			            	}
			            }
		});
		return sortOptionsDialog;
	},

	createGroupOptions: function() {
		var that = this;
		var groupOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("groupOptionsDialog"),
			groupItems: [
			             new sap.m.ViewSettingsItem({
			            	 text: that.oApplicationFacade.getResourceBundle().getText("BY_WORKSPACE"),
			            	 key: "workspace"
			             }), 
			             new sap.m.ViewSettingsItem({
			            	 text: that.oApplicationFacade.getResourceBundle().getText("BY_TYPE"),
			            	 key: "type"
			             }),
			             new sap.m.ViewSettingsItem({
			            	 text: that.oApplicationFacade.getResourceBundle().getText("BY_STATUS"),
			            	 key: "status"
			             }),
			             new sap.m.ViewSettingsItem({
			            	 text: that.oApplicationFacade.getResourceBundle().getText("BY_OWNER"),
			            	 key: "owner"
			             })
			             ],
			             confirm : function(evt) {
			            	 if(evt.getParameter("groupItem")) {
			            		 that.setGrouping(evt.getParameter("groupItem").getKey(), evt.getParameter("groupDescending"));
			            	 }
			            	 else {
			            		 that.setGrouping("none");
			            	 }
			             }
		});
		groupOptionsDialog.setSelectedGroupItem("workspace");
		groupOptionsDialog.setGroupDescending(true);
		return groupOptionsDialog;
	},

	getHeaderFooterOptions : function() {
		var that = this;
		return this.currentHeaderFooterOptions;
	},

	formatTitle: function(title) {
		return (title || "");
	},

	formatEvaluationCount: function(evalCount) {
		return (evalCount || 0);
	},

	formatID: function(id) {
		var that = this;
		return (that.oApplicationFacade.getResourceBundle().getText("KPI_MASTER_ID_TEXT") + ": " + (id || ""));
	},

	formatGroupName: function(context) {
		var that = this;
		var indicator_type = context.getProperty("MANUAL_ENTRY");
		var groupTitle = "";
		switch(indicator_type) {
		case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
		break;
		case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
		break;
		default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_KPI_OPI");
		}
		return {
			key: groupTitle,
			text: groupTitle
		}
	},

	setGrouping: function(key, groupDescending) {
		var that = this;
		groupDescending = groupDescending || false;
		var list = that.getView().byId("list");
		if(key == "type") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("TYPE",groupDescending,function(context){
				return {
					key: context.getProperty("TYPE"),
					text: (context.getProperty("TYPE") + "S")
				}
			})]);
		} 
		else if(key == "status") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("IS_ACTIVE",groupDescending,function(context){
				return {
					key: context.getProperty("IS_ACTIVE") ? that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE") : that.oApplicationFacade.getResourceBundle().getText("STATUS_DRAFT"),
							text: context.getProperty("IS_ACTIVE") ? that.oApplicationFacade.getResourceBundle().getText("ACTIVE_KPI_OPI") : that.oApplicationFacade.getResourceBundle().getText("DRAFT_KPI_OPI"),
				}
			})]);
		}
		else if(key == "owner") { 
			list.getBinding("items").sort([new sap.ui.model.Sorter("OWNER_NAME",groupDescending,function(context){
				var owner_name = context.getProperty("OWNER_NAME");
				var groupTitle = "";
				switch(owner_name) {
				case null: groupTitle = that.oApplicationFacade.getResourceBundle().getText("NO_OWNER");
				break;
				case "": groupTitle = that.oApplicationFacade.getResourceBundle().getText("NO_OWNER");
				break;
				default: groupTitle = owner_name;
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			})]);
		}
		else if(key == "workspace") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("MANUAL_ENTRY",groupDescending,function(context){
				var indicator_type = context.getProperty("MANUAL_ENTRY");
				var groupTitle = "";
				switch(indicator_type) {
				case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
				break;
				case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
				break;
				default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_KPI_OPI");
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			})]);
		}
		else if(key == "none") {
			list.getBinding("items").sort([]);
		}
	},

	setFiltering: function(items) {
		var that = this;
		var filtersArray = [];
		var list = that.getView().byId("list");

		var filterObject = {
				"drafts": (new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ, 0)),
				"activated": (new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ, 1)),
				"self_created": (new sap.ui.model.Filter("CREATED_BY", sap.ui.model.FilterOperator.EQ, that.oApplicationFacade.currentLogonHanaUser)),
				"recently_worked_upon": (new sap.ui.model.Filter("MANUAL_ENTRY", sap.ui.model.FilterOperator.EQ, 0)),
				"favorite": (new sap.ui.model.Filter("MANUAL_ENTRY", sap.ui.model.FilterOperator.EQ, 1))
		};

		filtersArray = sap.suite.smartbusiness.utils.getFilterArray(items, filterObject);

		if(filtersArray.length) {
			list.getBinding("items").filter(new sap.ui.model.Filter(filtersArray,true));
		}
		else {
			list.getBinding("items").filter(filtersArray);
		}
	},

	setSorting: function(key, groupDescending) {
		var that = this;
		groupDescending = groupDescending || false;
		var list = that.getView().byId("list");
		if(key == "newest") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("CREATED_ON",true,null)]); 
		} 
		else if(key == "oldest") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("CREATED_ON",false,null)]);
		}
		else if(key == "type") { 
			list.getBinding("items").sort([new sap.ui.model.Sorter("TYPE",groupDescending,null)]);
		}
		else if(key == "alphabetically") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("TITLE",groupDescending,null)]);
		}
	},

	toggleListSelection: function(isMultiSelect) {

		if(isMultiSelect) {
			this.byId("list").detachSelectionChange(this._handleSelect,this);
			this.byId("list").setMode("MultiSelect");
			this.currentHeaderFooterOptions = this.multiSelectHeaderFooterOptions;
			this.refreshHeaderFooterForEditToggle();
			this.oRouter.navTo("multiSelect",{});
			this.showEmptyView("DETAIL_TITLE",sap.ui.getCore().getConfiguration().getLanguage()," ");
		}
		else {
			this.byId("list").attachSelectionChange(this._handleSelect,this);
			this.byId("list").setMode("SingleSelectMaster");
			this.currentHeaderFooterOptions = this.defaultHeaderFooterOptions;
			this.refreshHeaderFooterForEditToggle();
			this.oRouter.navTo("detail",{
				contextPath: this.oApplicationFacade.currentContextPath
			});
		}
	},

	exportIndicators: function() { 
		var that = this;
		var dialogForHanaPackages = new sap.m.SelectDialog({
			title : that.oApplicationFacade.getResourceBundle().getText("SELECT_PACKAGES"),
			items : {
				path : "/HANA_PACKAGES",
				template : new sap.m.StandardListItem({
					title : "{OBJECT}"
				})
			},
			confirm : function(oEvent) {
				var package_name = oEvent.getParameter("selectedItem").getProperty("title");

				if(package_name) {
					var payload = that.getExportObject();
					payload = payload.replace("<Hana Package Here>", oEvent.getParameter("selectedItem").getProperty("title"));
					var selectedContexts = that.byId("list").getSelectedContexts();
					var indicatorsString = "";
					var inactiveIndicatorsList = [];
					var inactiveIndicatorsText = "";
					for(var i=0,l=selectedContexts.length; i<l; i++) {
						if(selectedContexts[i].getProperty("IS_ACTIVE") == 1) {
							indicatorsString += (indicatorsString) ? ',' : ''; 
							indicatorsString += '{"value":"' + selectedContexts[i].getProperty("ID") + '","operator":"="}';
						}
						else {
							inactiveIndicatorsText += (inactiveIndicatorsText) ? ' , ' : '';
							inactiveIndicatorsText += '"' + selectedContexts[i].getProperty("TITLE") + '"';
							inactiveIndicatorsList.push(selectedContexts[i]);
						}
					}

					payload = payload.replace(/"<Indicators Here>"/g, indicatorsString);

					if(indicatorsString) {
						if(inactiveIndicatorsList.length) {
							sap.m.MessageBox.show(
									inactiveIndicatorsText + " " +that.oApplicationFacade.getResourceBundle().getText("INACTIVE_KPI_OPI_FOR_EXPORT"),
									"sap-icon://hint",
									that.oApplicationFacade.getResourceBundle().getText("EXPORT_ALERT_TITLE"),
									[sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL ], 
									function(evt) {
										if(evt=="OK") {
											that.callExportService(payload);
										}
										else {
										}
									});
						}
						else {
							that.callExportService(payload);
						}
					}
					else {
						sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("NO_KPI_OPI_FOR_EXPORT"))
					}
				}
				else {
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("NO_HANA_PACKAGE_SELECTED"));
				}
			},
			liveChange : function(oEvent) {
				var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
				var oFilterObject = new sap.ui.model.Filter("tolower(OBJECT)", sap.ui.model.FilterOperator.Contains,
						searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter(new sap.ui.model.Filter([oFilterObject], false));
			}
		});

		dialogForHanaPackages.setModel(this.oApplicationFacade.getODataModel());
		dialogForHanaPackages.open(); 
	},

	getExportObject : function() { 
		var expObj = {"data":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentOn":[],"keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["ID"]},{"tableName":"sap.hba.r.sb.core.db::INDICATOR_TEXTS","schema":"SAP_HBA","keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["ID"],"dependentOn":[]},{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","customKeys":["ID"],"keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentOn":[],"keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"INDICATOR","mappingKey":"ID"}]},{"tableName":"sap.hba.r.sb.core.db::EVALUATION_TEXTS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentOn":[],"dependentKey":"INDICATOR","mappingKey":"ID","keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]}}],"keys":{},"dependentKey":"ID","mappingKey":"ID"}]},{"tableName":"sap.hba.r.sb.core.db::EVALUATION_VALUES","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentOn":[],"dependentKey":"INDICATOR","mappingKey":"ID","keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]}}],"keys":{},"dependentKey":"ID","mappingKey":"ID"}]},{"tableName":"sap.hba.r.sb.core.db::EVALUATION_FILTERS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentOn":[],"dependentKey":"INDICATOR","mappingKey":"ID","keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]}}],"keys":{},"dependentKey":"ID","mappingKey":"ID"}]},{"tableName":"sap.hba.r.sb.core.db::PROPERTIES","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"TYPE":[{"value":"IN","operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"ID","mappingKey":"ID","dependentOn":[],"keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]}}],"customKeys":["ID","TYPE"]},{"tableName":"sap.hba.r.sb.core.db::PROPERTIES","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"TYPE":[{"value":"EV","operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentOn":[],"mappingKey":"ID","dependentKey":"INDICATOR","keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]}}],"dependentKey":"ID","mappingKey":"ID"}],"customKeys":["ID","TYPE"]},{"tableName":"sap.hba.r.sb.core.db::TAGS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"TYPE":[{"value":"IN","operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"ID","mappingKey":"ID","dependentOn":[],"keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]}}],"customKeys":["ID","TYPE"]},{"tableName":"sap.hba.r.sb.core.db::TAGS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"TYPE":[{"value":"EV","operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentOn":[],"mappingKey":"ID","dependentKey":"INDICATOR","keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]}}],"dependentKey":"ID","mappingKey":"ID"}],"customKeys":["ID","TYPE"]},{"tableName":"sap.hba.r.sb.core.db::ASSOCIATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"SOURCE_INDICATOR","mappingKey":"ID","dependentOn":[],"keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]}}],"customKeys":["SOURCE_INDICATOR"]},{"tableName":"sap.hba.r.sb.core.db::ASSOCIATION_PROPERTIES","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"SOURCE_INDICATOR","mappingKey":"ID","dependentOn":[],"keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]}}],"customKeys":["SOURCE_INDICATOR"]},{"tableName":"sap.hba.r.sb.core.db::DDA_MASTER","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["EVALUATION_ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"EVALUATION_ID","mappingKey":"ID","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"INDICATOR","mappingKey":"ID","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"ID":["<Indicators Here>"]},"dependentOn":[]}]}]},{"tableName":"sap.hba.r.sb.core.db::DDA_MASTER_TEXT","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["EVALUATION_ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"EVALUATION_ID","mappingKey":"ID","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"INDICATOR","mappingKey":"ID","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"ID":["<Indicators Here>"]},"dependentOn":[]}]}]},{"tableName":"sap.hba.r.sb.core.db::DDA_FILTERS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["EVALUATION_ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"EVALUATION_ID","mappingKey":"ID","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"INDICATOR","mappingKey":"ID","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"ID":["<Indicators Here>"]},"dependentOn":[]}]}]},{"tableName":"sap.hba.r.sb.core.db::DDA_HEADER","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["EVALUATION_ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"EVALUATION_ID","mappingKey":"ID","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"INDICATOR","mappingKey":"ID","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"ID":["<Indicators Here>"]},"dependentOn":[]}]}]},{"tableName":"sap.hba.r.sb.core.db::DDA_COLUMNS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["EVALUATION_ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"EVALUATION_ID","mappingKey":"ID","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"INDICATOR","mappingKey":"ID","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"ID":["<Indicators Here>"]},"dependentOn":[]}]}]},{"tableName":"sap.hba.r.sb.core.db::DDA_CHART","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["EVALUATION_ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"EVALUATION_ID","mappingKey":"ID","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"INDICATOR","mappingKey":"ID","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"ID":["<Indicators Here>"]},"dependentOn":[]}]}]},{"tableName":"sap.hba.r.sb.core.db::DDA_CONFIGURATION","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["EVALUATION_ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"EVALUATION_ID","mappingKey":"ID","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"INDICATOR","mappingKey":"ID","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"ID":["<Indicators Here>"]},"dependentOn":[]}]}]},{"tableName":"sap.hba.r.sb.core.db::CHIPS","schema":"SAP_HBA","keys":{"isActive":[{"value":1,"operator":"="}]},"customKeys":["id"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"evaluationId","mappingKey":"ID","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"INDICATOR","mappingKey":"ID","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"ID":["<Indicators Here>"]},"dependentOn":[]}]}]},{"tableName":"sap.hba.r.sb.core.db::CHIP_TEXTS","schema":"SAP_HBA","keys":{"isActive":[{"operator":"=","value":1}]},"customKeys":["id"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::CHIPS","schema":"SAP_HBA","keys":{"isActive":[{"value":1,"operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"evaluationId","mappingKey":"ID","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"INDICATOR","mappingKey":"ID","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"ID":["<Indicators Here>"]},"dependentOn":[]}]}],"mappingKey":"id","dependentKey":"id"}]}],"file":{"package_name":"<Hana Package Here>"}};
		return JSON.stringify(expObj); 
	},

	callExportService: function(payload) {
		var that = this;

		jQuery.ajax({
			type: "HEAD",
			async: false,
			dataType: "json",
			url: "/sap/hba/r/sb/core/logic/__token.xsjs",
			headers: {"X-CSRF-Token": "Fetch"},
			success: function(d, s, x) {
				that.exportBusyDialog = that.exportBusyDialog || new sap.m.BusyDialog({text:that.oApplicationFacade.getResourceBundle().getText("EXPORT_KPI_OPI_BUSY_DIALOG_TEXT"), title:that.oApplicationFacade.getResourceBundle().getText("EXPORT_KPI_OPI_BUSY_DIALOG_TITLE")})
				that.exportBusyDialog.open();
				jQuery.ajax({
					url: "/sap/hba/r/sb/core/logic/transferToHanaRepo.xsjs",
					type: "POST",
					data: payload,
					headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token")},
					async: true,
					success: function(d) {
						that.exportBusyDialog.close();
						sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("EXPORT_SUCCESS"));
					},
					error: function(e) {
						that.exportBusyDialog.close();
						sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("EXPORT_ERROR"));
					}});

			},
			error: function() {
				sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERR_FETCH_AUTH_TOKEN"));
				$.sap.log.error("ERR_FETCH_AUTH_TOKEN");
			}
		});
	},

	onExit: function() {
		var hashObj = hasher || window.hasher;
		if(!(hashObj.getHash())) {
			sap.suite.smartbusiness.utils.backToHome();
		}
	},

	applySearchPatternToListItem : function(oItem, sFilterPattern) {
		if(sap.ca.scfld.md.controller.ScfldMasterController.prototype.applySearchPatternToListItem.apply(this, arguments)) {
			return true;
		}
		else {
			// extra source of data "the tags"
			var dependents = oItem.getDependents() || [];
			for(var i=0,l=dependents.length; i<l; i++) {
				if(dependents[i].getText().toLowerCase().indexOf(sFilterPattern) != -1) {
					return true;
				}
			}
		}
		return false;
	}

});


}; // end of sap/suite/ui/smartbusiness/designtime/workspace/view/S2.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.workspace.view.S3.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.workspace.view.S3.controller');
jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained


sap.ca.scfld.md.controller.BaseDetailController.extend("sap.suite.ui.smartbusiness.designtime.workspace.view.S3", {

	onInit : function() {
		var that = this;
		var view = this.getView();

		this.oRouter.attachRouteMatched(function(evt) {
			if(evt.getParameter("name") === "multiSelect") {
				var pageContent = this.getView().getContent()[0].getContent();
				for(var i=0,l=pageContent.length; i<l; i++) {
					pageContent[i].setVisible(false);
				}
				this.oApplicationFacade.multiSelectMode = true;
			}
			else if (evt.getParameter("name") === "detail") {

				if(this.oApplicationFacade.multiSelectMode) {
					var pageContent = this.getView().getContent()[0].getContent();
					for(var i=0,l=pageContent.length; i<l; i++) {
						pageContent[i].setVisible(true);
					}
					this.oApplicationFacade.multiSelectMode = undefined;
				}

				this.oApplicationFacade.currentContextPath = evt.getParameter("arguments").contextPath;

				var context = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").contextPath));
				view.setBindingContext(context);
				view.contextPath = evt.getParameter("arguments").contextPath;

				//*******************************************************************************************
				that.contextIndicatorId = view.getBindingContext().getProperty("ID") || evt.getParameter("arguments").contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');

				var model = new sap.ui.model.json.JSONModel();
				that.getView().byId("kpiAssociationTable").getBinding("items").filter(new sap.ui.model.Filter([new sap.ui.model.Filter("SOURCE_INDICATOR", sap.ui.model.FilterOperator.EQ, that.contextIndicatorId) , new sap.ui.model.Filter("TARGET_INDICATOR", sap.ui.model.FilterOperator.EQ, that.contextIndicatorId)],false));

				that.byId("kpiAssociationTable").getBinding("items").attachDataReceived(function(data){
					that.getView().byId("associationIconTab").setCount(that.getView().byId("kpiAssociationTable").getItems().length);
				});
				//*******************************************************************************************

				if(view.getBindingContext().getObject()) {
					this.onAfterIndicatorContext(view.getBindingContext().getObject());
					this.contextIndicatorId = view.getBindingContext().getProperty("ID");
				} 
				else {
					this.oApplicationFacade.getODataModel().read(view.contextPath, null, null, true, function(data) {
						that.onAfterIndicatorContext(data);
						that.currentContextDataForBookmark = data;
						that.contextIndicatorId = data.ID;
					}, function(err) {
						that.contextIndicatorId = evt.getParameter("arguments").contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');
						sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
					});
				}

				that.byId("evaluationTable").getBinding("items").attachDataReceived(function(data){
					that.oApplicationFacade.evaluationContexts = [];
					var tableItems = that.byId("evaluationTable").getItems();
					for(var i=0;i<tableItems.length;i++){
						that.oApplicationFacade.evaluationContexts[i] = tableItems[i].getBindingContext().getPath();
					}
				});

			}
		}, this);

		this.oHeaderFooterOptions =
		{
				bSuppressBookmarkButton: {},
				buttonList : []
		};
		that.byId("directionArrowAssociation").setColor(sap.ui.core.theming.Parameters.get("sapUiLightText"));
	},

	getHeaderFooterOptions : function() {
		return this.oHeaderFooterOptions;
	},

	onAfterRendering: function() {

	},

	formatOwner: function(owner) {
		return (owner || "");
	},

	formatStatus: function(status) {
		return ((status) ? (this.oApplicationFacade.getResourceBundle().getText("ACTIVE")) : this.oApplicationFacade.getResourceBundle().getText("DRAFT"));
	},

	formatGoalType: function(goalType) {
		var that = this;
		var goalTypeText = null;
		switch(goalType) {
		case 'MA': goalTypeText = that.oApplicationFacade.getResourceBundle().getText("MAXIMIZING"); break;
		case 'MI': goalTypeText = that.oApplicationFacade.getResourceBundle().getText("MINIMIZING"); break;
		case 'RA': goalTypeText = that.oApplicationFacade.getResourceBundle().getText("RANGE"); break;
		default : goalTypeText = that.oApplicationFacade.getResourceBundle().getText("NONE");
		}
		return goalTypeText;
	},

	formatEvaluationCount: function(evalCount) {
		return (evalCount || 0);
	},

	formatFavoriteMark: function(favMark) {
		return ((favMark) ? true : false);
	},

	formatTags: function(tag) { 
		return ((this.getView().byId("tags").getItems().length > 1) ? (', ' + tag) : (tag));
	},

	formatAssociationCount: function(sourceCount,targetCount) {
		var that = this;
		if(sourceCount==null && targetCount==null){
			return that.oApplicationFacade.getResourceBundle().getText("ASSOCIATIONS")+"(0)";
		}
		if(sourceCount==null){
			return that.oApplicationFacade.getResourceBundle().getText("ASSOCIATIONS")+"("+targetCount+")";
		}
		if(targetCount==null){
			return that.oApplicationFacade.getResourceBundle().getText("ASSOCIATIONS")+"("+sourceCount+")";
		}
		var count = (parseInt(sourceCount)+parseInt(targetCount));
		return that.oApplicationFacade.getResourceBundle().getText("ASSOCIATIONS")+"("+count.toString()+")";
	},


	formatProperties: function(name, value)  {
		var prop = ((this.getView().byId("assoProperties").getItems().length > 1) ? (", " + name + " : " + value) : (name + " : " + value+","));
		return prop;
	},

	formatArrowDirection: function(source_indicator) {
		return ((source_indicator == this.contextIndicatorId) ? ("sap-icon://arrow-right") : ("sap-icon://arrow-left"));  
	},
	formatAssociationType: function(associationType){
		if(associationType=="SUPPORTING"){
			return this.oApplicationFacade.getResourceBundle().getText("SUPPORTING");
		}
		else{
			return this.oApplicationFacade.getResourceBundle().getText("CONFLICTING");
		}
	},
	formatTargetIndicatorText: function(sourceIndicator, targetIndicator, sourceIndicatorTitle, targetIndicatorTitle) { 
		var indicatorText = null;
		if(targetIndicator == this.contextIndicatorId) {
			indicatorText = sourceIndicatorTitle;
		}
		else {
			indicatorText = targetIndicatorTitle;
		}
		return indicatorText;
	},

	formatStatusOfAssociation: function(is_active,counter){
		var that = this;
		if(counter=="2"){
			var str = that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE")+","+that.oApplicationFacade.getResourceBundle().getText("STATUS_DRAFT");
			return str;
		}
		if(is_active==0){
			return that.oApplicationFacade.getResourceBundle().getText("STATUS_NEW");
		}
		if(is_active==1){
			return that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE");
		}
	},

	formatKpiStatus: function(state, count) {
		var that = this;
		var isActive = "";
		if(count > 1) {
			isActive = (that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE") + "," + that.oApplicationFacade.getResourceBundle().getText("STATUS_DRAFT"));
		}
		else if(state){
			isActive = that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE");
		}
		else {
			isActive = that.oApplicationFacade.getResourceBundle().getText("STATUS_NEW");
		}
		return isActive;
	},

	handleEvaluationSelect: function(evt) {
		var that = this;
		for(var i=0;i<this.oApplicationFacade.evaluationContexts.length;i++){
			if(evt.getParameter("listItem").getBindingContext().sPath === this.oApplicationFacade.evaluationContexts[i]){
				this.oApplicationFacade.evaluationIndex = i;
				break;
			}
		}
		sap.suite.smartbusiness.utils.replaceHash({action:"SBWorkspace", route:"evalDetail", context:(this.getView().contextPath + "/" + evt.getParameter("listItem").getBindingContext().sPath.substring(1))});
	},

	onAfterIndicatorContext: function(contextObj) {
		var that = this;
		that.updateFooterButtons(contextObj);
	},

	getAllFooterButtons: function() {
		var that = this;
		var buttonList = [
		                  {
		                	  id: "addEval",
		                	  sId: "addEvaluationButton",
		                	  sI18nBtnTxt : "ADD_EVALUATION",
		                	  onBtnPressed : function(evt) {
		                		  sap.suite.smartbusiness = sap.suite.smartbusiness || {};
		                		  sap.suite.smartbusiness.modelerAppCache = sap.suite.smartbusiness.modelerAppCache || {};
		                		  sap.suite.smartbusiness.modelerAppCache.createSBKPIEvaluation  = sap.suite.smartbusiness.modelerAppCache.createSBKPIEvaluation || {};
		                		  sap.suite.smartbusiness.modelerAppCache.createSBKPIEvaluation.appFromWorkspace = true;
		                		  sap.suite.smartbusiness.utils.appToAppNavigation({action:"createSBKPIEvaluation", route:"addEvaluation", context:(that.getView().getBindingContext().getPath())});
		                	  },
		                  }, {
		                	  sId: "favouriteToggleButton",
		                	  sI18nBtnTxt : "ADD_FAVOURITE",
		                	  onBtnPressed : function(evt) {
		                		  var path = "/FAVOURITES";
		                		  var contextObj = that.getView().getBindingContext().getObject();
		                		  var oDataModel = that.oApplicationFacade.getODataModel(); 
		                		  var payload = {ID:contextObj.ID, TYPE:contextObj.ENTITY_TYPE, USER_ID:that.oApplicationFacade.currentLogonHanaUser, MANUAL_ENTRY:1, LAST_WORKED_ON:null};
		                		  if(contextObj.MANUAL_ENTRY) {
		                			  //odata remove
//		                			  path += "(ID='" + contextObj.ID + "',TYPE='" + contextObj.ENTITY_TYPE + "',USER_ID='" + that.oApplicationFacade.currentLogonHanaUser + "')";
//		                			  oDataModel.remove(path,null,function(data) {
//		                				  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_DELETE_SUCCESS_KPI_OPI"));
//		                				  oDataModel.refresh();
//		                				  contextObj.MANUAL_ENTRY = 0;
//		                				  that.updateFooterButtons(contextObj);
//		                			  }, function(err) {
//		                				  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_DELETE_ERROR_KPI_OPI"), err.response.body);
//		                			  });

		                			  //xsjs remove
		                			  sap.suite.smartbusiness.utils.remove(sap.suite.smartbusiness.utils.serviceUrl("INDICATOR_FAVOURITE_SERVICE_URI"),payload,function(data) {
		                				  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_DELETE_SUCCESS_KPI_OPI"));
		                				  oDataModel.refresh();
		                				  contextObj.MANUAL_ENTRY = 0;
		                				  that.updateFooterButtons(contextObj);
		                			  }, function(err) {
		                				  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_DELETE_ERROR_KPI_OPI"), err.responseText);
		                			  });
		                		  }
		                		  else if(contextObj.MANUAL_ENTRY == 0) {
		                			  //odata update
//		                			  path += "(ID='" + contextObj.ID + "',TYPE='" + contextObj.ENTITY_TYPE + "',USER_ID='" + that.oApplicationFacade.currentLogonHanaUser + "')";
//		                			  oDataModel.update(path,payload,null,function(data) {
//		                				  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_SUCCESS_KPI_OPI"));
//		                				  oDataModel.refresh();
//		                				  contextObj.MANUAL_ENTRY = 1;
//		                				  that.updateFooterButtons(contextObj);
//		                			  }, function(err) {
//		                				  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_KPI_OPI_ERROR"), err.response.body);
//		                			  });
		                			  
		                			  //xsjs update
		                			  sap.suite.smartbusiness.utils.update(sap.suite.smartbusiness.utils.serviceUrl("INDICATOR_FAVOURITE_SERVICE_URI"),payload,null,function(data) {
		                				  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_SUCCESS_KPI_OPI"));
		                				  oDataModel.refresh();
		                				  contextObj.MANUAL_ENTRY = 1;
		                				  that.updateFooterButtons(contextObj);
		                			  }, function(err) {
		                				  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_KPI_OPI_ERROR"), err.responseText);
		                			  });
		                		  }
		                		  else if(contextObj.MANUAL_ENTRY == null) {
		                			  //odata create
//		                			  oDataModel.create(path,payload,null,function(data) {
//		                				  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_SUCCESS_KPI_OPI"));
//		                				  oDataModel.refresh();
//		                				  contextObj.MANUAL_ENTRY = 1;
//		                				  that.updateFooterButtons(contextObj);
//		                			  }, function(err) {
//		                				  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_KPI_OPI_ERROR"), err.response.body);
//		                			  });
		                			  
		                			  //xsjs create
		                			  sap.suite.smartbusiness.utils.create(sap.suite.smartbusiness.utils.serviceUrl("INDICATOR_FAVOURITE_SERVICE_URI"),payload,null,function(data) {
		                				  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_SUCCESS_KPI_OPI"));
		                				  oDataModel.refresh();
		                				  contextObj.MANUAL_ENTRY = 1;
		                				  that.updateFooterButtons(contextObj);
		                			  }, function(err) {
		                				  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_KPI_OPI_ERROR"), err.responseText);
		                			  });
		                		  }
		                	  }
		                  }, {
		                	  sId: "activateButton",
		                	  sI18nBtnTxt : "ACTIVATE",
		                	  onBtnPressed : function(evt) {
		                		  var entity = "ACTIVE_INDICATORS";
		                		  var payload = {};
		                		  var payloads = [];
		                		  var sPath = that.getView().getBindingContext().sPath;
		                		  payload.ID = sPath.substring((sPath.indexOf("'")+1),sPath.lastIndexOf("'"));
		                		  payloads.push(payload);

		                		  that.oApplicationFacade.getODataModel().read(("/INDICATOR_TEXTS?$filter=ID eq '"+that.contextIndicatorId + "' and IS_ACTIVE eq 0 and TITLE ne ''"), null, null, false, function(data) {
		                			  if(data && data.results && data.results.length) {
		                				  var ODataModel = that.oApplicationFacade.getODataModel();
		                				  // odata write
//		                				  ODataModel.create(entity,payload,null,function(data){
//		                					  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_KPI_OPI_SUCCESS"));
//		                					  sap.suite.smartbusiness.utils.hashChange({hash:window.location.hash.replace("IS_ACTIVE=0","IS_ACTIVE=1")});
//		                					  ODataModel.refresh(); 
//		                				  },
//		                				  function(err){
//		                					  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_KPI_OPI_ERROR"), err.response.body);
//		                				  });

		                				  //xsjs write
		                				  sap.suite.smartbusiness.utils.create(sap.suite.smartbusiness.utils.serviceUrl("ACTIVATE_INDICATOR_SERVICE_URI"), payloads , null, function(data){
	                						  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_KPI_OPI_SUCCESS"));
	                						  sap.suite.smartbusiness.utils.replaceHash({hash:window.location.hash.replace("IS_ACTIVE=0","IS_ACTIVE=1")}, true);
	                						  ODataModel.refresh(); 
	                					  },
	                					  function(err){
	                						  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_KPI_OPI_ERROR"), err.responseText);
	                					  });
		                			  }
		                			  else {
		                				  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_KPI_OPI_TITLE"));
		                			  }
		                		  }, function() {

		                		  });
		                	  }
		                  }, {
		                	  id: "editBut",
		                	  sId: "editButton",
		                	  sI18nBtnTxt : "EDIT",
		                	  onBtnPressed : function(evt) {
		                		  var contextPath = that.getView().getBindingContext().getPath();
		                		  contextPath = (that.getView().getBindingContext().getObject().COUNTER == 2) ? contextPath.replace("IS_ACTIVE=1","IS_ACTIVE=0") : contextPath;
		                		  contextPath = contextPath.replace("INDICATORS_MODELER","INDICATORS");
		                		  sap.suite.smartbusiness = sap.suite.smartbusiness || {};
		                		  sap.suite.smartbusiness.modelerAppCache = sap.suite.smartbusiness.modelerAppCache || {};
		                		  sap.suite.smartbusiness.modelerAppCache.createSBKPI  = sap.suite.smartbusiness.modelerAppCache.createSBKPI || {};
		                		  sap.suite.smartbusiness.modelerAppCache.createSBKPI.appFromWorkspace = true;
		                		  if(that.getView().getBindingContext().getObject().COUNTER == 2){
		                			  sap.suite.smartbusiness.utils.appToAppNavigation({action:"createSBKPI", route:"editDraftKpi", context:(contextPath)});
		                		  }
		                		  else if(that.getView().getBindingContext().getObject().COUNTER == 1){
		                			  sap.suite.smartbusiness.utils.appToAppNavigation({action:"createSBKPI", route:"editKpi", context:(contextPath)});
		                		  }
		                	  }
		                  }, {
		                	  sId: "deleteButton",
		                	  sI18nBtnTxt : "DELETE_BUTTON_TEXT",
		                	  onBtnPressed : function(evt) {
		                		  if(!(sap.m.MessageBox)) {
		                			  jQuery.sap.require("sap.m.MessageBox");
		                		  }	
		                		  sap.m.MessageBox.show(
		                				  that.oApplicationFacade.getResourceBundle().getText("WARNING_SINGLE_INDICATOR_DELETE_KPI_OPI"),
		                				  "sap-icon://hint",
		                				  that.oApplicationFacade.getResourceBundle().getText("DELETE_BUTTON_TEXT"),
		                				  [sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL ],
		                				  function(evt){
		                					  if(evt=="OK"){
		                						  var entity = that.getView().getBindingContext().sPath.substring(1).replace("INDICATORS_MODELER","INDICATORS");
		                						  var payloads = [];
		                						  payloads.push({ID:that.getView().getBindingContext().getObject().ID,IS_ACTIVE:that.getView().getBindingContext().getObject().IS_ACTIVE});
		                						  var ODataModel = that.oApplicationFacade.getODataModel();
		                						  //odata remove
//		                						  ODataModel.remove(entity,null,function(data){
//	                								  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETE_KPI_OPI_SUCCESS"));
//	                								  ODataModel.refresh();
//	                								  sap.suite.smartbusiness.utils.hashChange({hash:window.location.hash.substr(0,window.location.hash.indexOf("&/"))});
//	                							  },
//	                							  function(err){
//	                								  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETE_KPI_OPI_ERROR"), err.response.body);
//	                							  });
		                						  
		                						  //xsjs remove
		                						  sap.suite.smartbusiness.utils.remove(sap.suite.smartbusiness.utils.serviceUrl("INDICATOR_SERVICE_URI"),payloads,function(data){
		                							  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETE_KPI_OPI_SUCCESS"));
		                							  ODataModel.refresh();
		                							  sap.suite.smartbusiness.utils.replaceHash({hash:window.location.hash.substr(0,window.location.hash.indexOf("&/"))}, true);
		                						  },
		                						  function(err){
		                							  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETE_KPI_OPI_ERROR"), err.responseText);
		                						  });
		                					  }
		                					  if(evt=="CANCEL"){

		                					  }
		                				  }
		                		  );
		                	  }
		                  },
		                  {
		                	  sId: "duplicateButton",
		                	  sI18nBtnTxt : "DUPLICATE",
		                	  onBtnPressed : function(evt) {
		                		  sap.suite.smartbusiness = sap.suite.smartbusiness || {};
		                		  sap.suite.smartbusiness.modelerAppCache = sap.suite.smartbusiness.modelerAppCache || {};
		                		  sap.suite.smartbusiness.modelerAppCache.createSBKPI  = sap.suite.smartbusiness.modelerAppCache.createSBKPI || {};
		                		  sap.suite.smartbusiness.modelerAppCache.createSBKPI.appFromWorkspace = true;
		                		  sap.suite.smartbusiness.utils.appToAppNavigation({action:"createSBKPI", route:"duplicateKpi", context:(that.getView().getBindingContext().getPath().replace("INDICATORS_MODELER","INDICATORS"))});
		                	  }
		                  }
		                  ];

		return buttonList;
	},

	updateFooterButtons: function(indicatorObj) {
		indicatorObj = indicatorObj || this.getView().getBindingContext().getObject();
		var footerAllButtons = this.getAllFooterButtons();

		this.oHeaderFooterOptions.buttonList = [];

		if((indicatorObj.COUNTER == 2) || (indicatorObj.IS_ACTIVE)) {
			this.oHeaderFooterOptions.oEditBtn = footerAllButtons[0];
		}

		if(indicatorObj.MANUAL_ENTRY) {
			footerAllButtons[1].sI18nBtnTxt = this.oApplicationFacade.getResourceBundle().getText("REMOVE_FAVOURITE");
		}
		else {
			footerAllButtons[1].sI18nBtnTxt = this.oApplicationFacade.getResourceBundle().getText("ADD_FAVOURITE"); 
		}
		this.oHeaderFooterOptions.buttonList.push(footerAllButtons[1]);

		if(!(indicatorObj.IS_ACTIVE)) {
			this.oHeaderFooterOptions.oEditBtn = footerAllButtons[2];
		}

		this.oHeaderFooterOptions.buttonList.push(footerAllButtons[5]);

		if(indicatorObj.COUNTER == 2) {
			footerAllButtons[3].sI18nBtnTxt = this.oApplicationFacade.getResourceBundle().getText("EDIT_DRAFT");
		}
		else {
			footerAllButtons[3].sI18nBtnTxt = this.oApplicationFacade.getResourceBundle().getText("EDIT"); 
		}
		this.oHeaderFooterOptions.buttonList.push(footerAllButtons[3]);

		this.oHeaderFooterOptions.buttonList.push(footerAllButtons[4]);

		this.setHeaderFooterOptions(this.oHeaderFooterOptions);
	}


});


}; // end of sap/suite/ui/smartbusiness/designtime/workspace/view/S3.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.workspace.view.S4.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.workspace.view.S4.controller');
jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained

jQuery.sap.includeStyleSheet("../../resources/sap/suite/ui/smartbusiness/designtime/workspace/view/workspaceStyling.css");
sap.ca.scfld.md.controller.BaseDetailController.extend("sap.suite.ui.smartbusiness.designtime.workspace.view.S4", {
       
       onInit : function() {
          var that = this;
          var view = this.getView();

          this.oRouter.attachRouteMatched(function(evt) {
                 if (evt.getParameter("name") === "evalDetail") {

                        var context = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").contextPath));
                        var evalContext = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").evalPath));

                        this.evalPath = evt.getParameter("arguments").evalPath;
                        this.contextPath = evt.getParameter("arguments").contextPath;

                        //For binding trend *********************************************************************************
                        that.context = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").contextPath));
                        that.evalContext = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").evalPath));

                        that.evalPath = evt.getParameter("arguments").evalPath;
                        that.contextPath = evt.getParameter("arguments").contextPath;

                       if(that.evalContext.getObject()) {
                              that.onAfterEvaluationContext(that.context.getObject(), that.evalContext.getObject());
                              view.setBindingContext(evalContext);
                        }
                        else {
                              that.oApplicationFacade.getODataModel().read(("/" + evt.getParameter("arguments").evalPath), null, null, true, function(data) {
                                     that.onAfterEvaluationContext(null, data);
                              });
                        }

                        //Fetching Filters and Input Parameters
                        that.oApplicationFacade.getODataModel().read((that.evalPath+"/FILTERS"),null,null,true,function(FilterValues){
                              var objectForFilters;
                              that.evaluationDetails = that.evaluationDetails || {};
                              that.evaluationDetails.EVALUATION_FILTERS = FilterValues.results;
                              objectForFilters = that.formObjectForInputParametersAndFilters(FilterValues);
                              that.modelForFiltersAndIp = new sap.ui.model.json.JSONModel();
                              that.modelForFiltersAndIp.setData(objectForFilters);
                              that.getView().byId("filterInputParameterTable").setModel(that.modelForFiltersAndIp,"filterInput");
                        },function(err){
                              sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
                        });

                        if(that.context.getObject()) {
                              this.onAfterIndicatorContext();
                        }
                        else {
                              this.oApplicationFacade.getODataModel().read(this.contextPath, null, null, true, function(data) {
                                     that.oApplicationFacade.getODataModel().oData[that.contextPath] = data;
                                     that.onAfterIndicatorContext();
                              }, function(err) {
                                     sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
                              });
                        }
                 }
          }, this);

       },
       
       formObjectForTrendThreshold : function(kpiContextObj, evaluationContextObj, evaluationValues){
          var obj = {TA:null, TC:null, RE:null, CL:null, CH:null, WL:null, WH:null};
          evaluationValues = (evaluationValues && evaluationValues.results) ? evaluationValues.results : [];
          for(var i=0,l=evaluationValues.length; i<l; i++) {
                 if((evaluationContextObj.VALUES_SOURCE == "FIXED") || (!(evaluationContextObj.VALUES_SOURCE))) {
                        obj[evaluationValues[i]["TYPE"]] = evaluationValues[i]["FIXED"];
                 }
                 else if(evaluationContextObj.VALUES_SOURCE == "MEASURE") {
                        obj[evaluationValues[i]["TYPE"]] = evaluationValues[i]["COLUMN_NAME"];
                 }
          }
          if(kpiContextObj) {
                 obj.GOAL_TYPE = kpiContextObj.GOAL_TYPE;
          }
          else {
                 obj.GOAL_TYPE = null;
          }

          obj.VALUES_SOURCE = evaluationContextObj.VALUES_SOURCE || "FIXED";
          return obj;
       },
       
       formObjectForInputParametersAndFilters: function(listOfFilters){
          var obj = {EVALUATION_FILTERS:[]}, flag=0, isBetween=0;
           var i, valuesStr = '', tempObj={};
           var tempName = (listOfFilters.results && listOfFilters.results.length) ? listOfFilters.results[0].NAME : "";
           for(i=0;i<listOfFilters.results.length;i++){
                  if(listOfFilters.results[i].NAME == tempName && (listOfFilters.results[i].OPERATOR == "EQ" || listOfFilters.results[i].OPERATOR == "GT" || listOfFilters.results[i].OPERATOR == "LT" || listOfFilters.results[i].OPERATOR == "NE")){
                         tempObj = {};
                         valuesStr += listOfFilters.results[i].VALUE_1 + ",";
                         tempObj = {"ID":listOfFilters.results[i].ID, "IS_ACTIVE":listOfFilters.results[i].IS_ACTIVE, "NAME":listOfFilters.results[i].NAME, "OPERATOR":listOfFilters.results[i].OPERATOR, "TYPE":listOfFilters.results[i].TYPE, "VALUES":valuesStr, "VALUE_2":null}

                         tempName = listOfFilters.results[i].NAME;
                         flag = 0;
                  }
                  if(listOfFilters.results[i].NAME != tempName && (listOfFilters.results[i].OPERATOR == "EQ" || listOfFilters.results[i].OPERATOR == "GT" || listOfFilters.results[i].OPERATOR == "LT" || listOfFilters.results[i].OPERATOR == "NE")){
                         if(tempObj.VALUES){
                        	 tempObj.VALUES = tempObj.VALUES.substring(0,tempObj.VALUES.length-1);  //Remove the last comma
                        	 obj.EVALUATION_FILTERS.push(tempObj);
                         }
                         valuesStr = '';
                         valuesStr = valuesStr + listOfFilters.results[i].VALUE_1 + ",";
                         tempObj = {"ID":listOfFilters.results[i].ID, "IS_ACTIVE":listOfFilters.results[i].IS_ACTIVE, "NAME":listOfFilters.results[i].NAME, "OPERATOR":listOfFilters.results[i].OPERATOR, "TYPE":listOfFilters.results[i].TYPE, "VALUES":valuesStr, "VALUE_2":null}

                         tempName = listOfFilters.results[i].NAME;
                         flag = 0;
                  }
                  if(listOfFilters.results[i].OPERATOR == "BT"){
                         if(tempObj.VALUES){
                               tempObj.VALUES = tempObj.VALUES.substring(0,tempObj.VALUES.length-1);  //Remove the last comma
                               obj.EVALUATION_FILTERS.push(tempObj);
                               tempObj = {};
                         }
                         tempObj = {"ID":listOfFilters.results[i].ID, "IS_ACTIVE":listOfFilters.results[i].IS_ACTIVE, "NAME":listOfFilters.results[i].NAME, "OPERATOR":listOfFilters.results[i].OPERATOR, "TYPE":listOfFilters.results[i].TYPE, "VALUES":listOfFilters.results[i].VALUE_1, "VALUE_2":listOfFilters.results[i].VALUE_2}
                         obj.EVALUATION_FILTERS.push(tempObj);
                         flag = 1;
                         tempName = listOfFilters.results[i].NAME;
                         tempObj = {};
                  }
           }
           if(flag==0){
                  tempObj.VALUES = (tempObj.VALUES) ? tempObj.VALUES.substring(0,tempObj.VALUES.length-1) : tempObj.VALUES;  //Remove the last comma
                  obj.EVALUATION_FILTERS.push(tempObj);
           }
           return obj;
       },
       
       formatOwnerName: function(ownerName){
    	   var that = this;
    	   if(ownerName==null || ownerName==""){
    		   return "";
    	   }
    	   else{
    		   return sap.suite.smartbusiness.formatters.getBundleText(undefined, "OWNER", ownerName);
    	   }
       },
       
       formatGoalType: function(goalType) {
          var that = this;
          var goalTypeText = null;
          switch(goalType) {
          case 'MA': goalTypeText = that.oApplicationFacade.getResourceBundle().getText("MAXIMIZING"); break;
          case 'MI': goalTypeText = that.oApplicationFacade.getResourceBundle().getText("MINIMIZING"); break;
          case 'RA': goalTypeText = that.oApplicationFacade.getResourceBundle().getText("RANGE"); break;
          default : goalTypeText = that.oApplicationFacade.getResourceBundle().getText("NONE");
          }
          return goalTypeText;
       },
       formatThresholdCriticalHigh: function(goalType){
    	   var that = this;
    	   var thresholdText = null;
//         var context = new sap.ui.model.Context(that.getView().getModel(), '/' + (that.evalPath));
           if(that.evalContext!=null)
               goalType = that.evalContext.getObject().GOAL_TYPE;
           switch(goalType) {
           case 'MI': thresholdText = that.oApplicationFacade.getResourceBundle().getText("CRITICAL"); break;
           case 'RA': thresholdText = that.oApplicationFacade.getResourceBundle().getText("CRITICAL_HIGH"); break;
           default : thresholdText = "";
           }
           return thresholdText;
       },
       formatThresholdWarningHigh: function(goalType){
    	   var that = this;
    	   var thresholdText = null;
//         var context = new sap.ui.model.Context(that.getView().getModel(), '/' + (that.evalPath));
           if(that.evalContext!=null)
               goalType = that.evalContext.getObject().GOAL_TYPE;
           switch(goalType) {
           case 'MI': thresholdText = that.oApplicationFacade.getResourceBundle().getText("WARNING"); break;
           case 'RA': thresholdText = that.oApplicationFacade.getResourceBundle().getText("WARNING_HIGH"); break;
           default : thresholdText = "";
           }
           return thresholdText;
       },
       formatThresholdWarningLow: function(goalType){
    	   var that = this;
    	   var thresholdText = null;
//         var context = new sap.ui.model.Context(that.getView().getModel(), '/' + (that.evalPath));
           if(that.evalContext!=null)
               goalType = that.evalContext.getObject().GOAL_TYPE;
           switch(goalType) {
           case 'MA': thresholdText = that.oApplicationFacade.getResourceBundle().getText("WARNING"); break;
           case 'RA': thresholdText = that.oApplicationFacade.getResourceBundle().getText("WARNING_LOW"); break;
           default : thresholdText = "";
           }
           return thresholdText;
       },
       formatThresholdCriticalLow: function(goalType){
    	   var that = this;
    	   var thresholdText = null;
//         var context = new sap.ui.model.Context(that.getView().getModel(), '/' + (that.evalPath));
           if(that.evalContext!=null)
               goalType = that.evalContext.getObject().GOAL_TYPE;
           switch(goalType) {
           case 'MA': thresholdText = that.oApplicationFacade.getResourceBundle().getText("CRITICAL"); break;
           case 'RA': thresholdText = that.oApplicationFacade.getResourceBundle().getText("CRITICAL_LOW"); break;
           default : thresholdText = "";
           }
           return thresholdText;
       },

       formatProperties: function(name, value) {
                     return ((this.getView().byId("properties").getItems().length > 1) ? (', ' + name + ' : ' + value) : (name + ' : ' + value));
              },
              
              formatOperator: function(operatorType) {
                     var that = this;
                     var operatorTypeText = null;
                     switch(operatorType) {
                     case 'EQ' : operatorTypeText = that.oApplicationFacade.getResourceBundle().getText("EQUAL_TO"); break;
                     case 'GT' : operatorTypeText = that.oApplicationFacade.getResourceBundle().getText("GREATER_THAN"); break;
                     case 'LT' : operatorTypeText = that.oApplicationFacade.getResourceBundle().getText("LESS_THAN"); break;
                     case 'NE' : operatorTypeText = that.oApplicationFacade.getResourceBundle().getText("NOT_EQUAL_TO"); break;
                     case 'BT' : operatorTypeText = that.oApplicationFacade.getResourceBundle().getText("BETWEEN"); break;
                     case undefined : operatorTypeText = null; break;
                     default : operatorTypeText = that.oApplicationFacade.getResourceBundle().getText("NONE");
                     }
                     return operatorTypeText;
              },
              
              formatTypeOfFilter: function(inputType) {
                     var that = this;
                     var parameterTypeText = null;
                     switch(inputType) {
                     case 'FI' : parameterTypeText = that.oApplicationFacade.getResourceBundle().getText("FILTER"); break;
                     case 'PA' : parameterTypeText = that.oApplicationFacade.getResourceBundle().getText("INPUT_PARAMETER"); break;
                     case undefined : operatorTypeText = null; break;
                     default : parameterTypeText = that.oApplicationFacade.getResourceBundle().getText("NONE");
                     }
                     return parameterTypeText;
              },
              
              getHeaderFooterOptions : function() {
                     var that = this;
                     this.oHeaderFooterOptions = {
                                  bSuppressBookmarkButton: {},
                                  onBack: function(){
                                	  var hash = window.location.hash.replace("evalDetail","detail");
                                	  sap.suite.smartbusiness.utils.replaceHash({hash:hash.substr(0,hash.lastIndexOf("/"))}, true);
                                	  //window.location.hash = hash.substr(0,hash.lastIndexOf("/"));
                                  },
                                  oUpDownOptions : {
                                         sI18NDetailTitle: "ITEM_DETAIL_HEADER",
                                         iPosition : 0,
                                         iCount : 0,
                                         fSetPosition : function (iNewPosition) {
                                                that.oApplicationFacade.evaluationIndex = iNewPosition;
                                                var nextEvalContextPath = that.oApplicationFacade.evaluationContexts[that.oApplicationFacade.evaluationIndex].substring(1);
                                                var view = that.getView();

                                                that.oHeaderFooterOptions.oUpDownOptions.iPosition = that.oApplicationFacade.evaluationIndex;
                                                that.oHeaderFooterOptions.oUpDownOptions.iCount = that.oApplicationFacade.evaluationContexts.length;
                                                that.setHeaderFooterOptions(that.oHeaderFooterOptions);
                                                that.getHeaderFooterOptions();

                                                sap.suite.smartbusiness.utils.replaceHash({action: "SBWorkspace", route: "evalDetail", context: (that.contextPath + "/" + nextEvalContextPath)});
                                         }
                                  },
                                  buttonList : that.getAllFooterButtons()
                     };

                     if(that.oApplicationFacade.evaluationIndex && that.oApplicationFacade.evaluationContexts) {
                            that.onAfterAllEvaluationContexts();
                            if(that.bookmark == false) {
                            that.updateFooterButtons();
                            }
                     }
                     else {
                            that.oApplicationFacade.evaluationContexts = [];
                            that.oApplicationFacade.getODataModel().read((that.contextPath + "/EVALUATIONS"), null, null, true, function(data) {
                                  for(var i=0,l=data.results.length; i<l; i++) {
                                         that.oApplicationFacade.evaluationContexts[i] = ("/" + data.results[i].__metadata.uri.split("/")[data.results[i].__metadata.uri.split("/").length - 1]);
                                         that.oApplicationFacade.getODataModel().oData[that.oApplicationFacade.evaluationContexts[i].substr(1)] = data.results[i]; 
                                         if(that.oApplicationFacade.evaluationContexts[i] == ('/' + (that.evalPath))) {
                                                that.oApplicationFacade.evaluationIndex = i;
                                                var evalContext = new sap.ui.model.Context(that.getView().getModel(), '/' + (that.evalPath));
                                                that.getView().setBindingContext(evalContext);
                                         }
                                  }
                                   that.onAfterAllEvaluationContexts(that.oApplicationFacade.evaluationIndex, that.oApplicationFacade.evaluationContexts);
                            }, function(err) {
                                   sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
                            });
                     }
                     
                     return this.oHeaderFooterOptions;
              },

              formatEvalStatus: function(state, count) {
                     var that = this;
                     var isActive = "";
                     if(count > 1) {
                            isActive = (that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE") + "," + that.oApplicationFacade.getResourceBundle().getText("STATUS_DRAFT"));
                     }
                     else if(state){
                            isActive = that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE");
                     }
                     else {
                            isActive = that.oApplicationFacade.getResourceBundle().getText("STATUS_NEW");
                     }
                     return isActive;
              }, 
       
     //Binding of Evaluation values
       hideShow: function(goalType){
           var that = this;
           if(goalType=="MA"){
                  that.byId("CHlabel").setVisible(false);
                  that.byId("CHinput").setVisible(false);
                  
                  that.byId("WHlabel").setVisible(false);
                  that.byId("WHinput").setVisible(false);  
                  
                  that.byId("WLlabel").setVisible(true);
                  that.byId("WLinput").setVisible(true);
                  
                  that.byId("CLlabel").setVisible(true);
                  that.byId("CLinput").setVisible(true);
           }
           else if(goalType=="MI"){
                  that.byId("WLlabel").setVisible(false);
                  that.byId("WLinput").setVisible(false);
                  
                  that.byId("CLlabel").setVisible(false);
                  that.byId("CLinput").setVisible(false);
                  
                  that.byId("CHlabel").setVisible(true);
                  that.byId("CHinput").setVisible(true);

                  that.byId("WHlabel").setVisible(true);
                  that.byId("WHinput").setVisible(true);  
           }
           else if(goalType=="RA"){
        	   	  that.byId("WLlabel").setVisible(true);
        	      that.byId("WLinput").setVisible(true);

        	      that.byId("CLlabel").setVisible(true);
        	      that.byId("CLinput").setVisible(true);

            	  that.byId("CHlabel").setVisible(true);
        	      that.byId("CHinput").setVisible(true);

        	      that.byId("WHlabel").setVisible(true);
        	      that.byId("WHinput").setVisible(true);
        }
        else if(goalType==null){
	              that.byId("WLlabel").setVisible(false);
	              that.byId("WLinput").setVisible(false);
	            
	              that.byId("CLlabel").setVisible(false);
	              that.byId("CLinput").setVisible(false);
	            
	              that.byId("CHlabel").setVisible(false);
	              that.byId("CHinput").setVisible(false);
	            
	              that.byId("WHlabel").setVisible(false);
	              that.byId("WHinput").setVisible(false);
        }
     },

       
       onAfterAllEvaluationContexts: function() {
          var that = this;
          that.oHeaderFooterOptions.oUpDownOptions.iPosition = that.oApplicationFacade.evaluationIndex;
          that.oHeaderFooterOptions.oUpDownOptions.iCount = that.oApplicationFacade.evaluationContexts.length;
          that.setHeaderFooterOptions(that.oHeaderFooterOptions);
          that.updateFooterButtons(that.evalContext.getObject());
       },

       onAfterIndicatorContext: function(){
          var that = this;
//          var context = new sap.ui.model.Context(that.getView().getModel(), '/' + (that.contextPath));
//          that.getView().setBindingContext(context,"indicator");
//          this.currentIndicatorObj = context.getObject();
       },
       
       formatFavoriteMark: function(favMark) {
          return ((favMark) ? true : false);
       },

       onAfterEvaluationContext: function(indicatorObj, evaluationObj) {
         var that = this;
         //Binding the Eval Properties
         that.hideShow(evaluationObj.GOAL_TYPE);
         that.byId("goalType").setText(that.formatGoalType(evaluationObj.GOAL_TYPE));
         //Fetching trend values
         that.oApplicationFacade.getODataModel().read((that.evalPath+"/VALUES"),null,null,true,function(evaluationValues){
                 var objForTrend = {};
                 that.evaluationDetails = that.evaluationDetails || {};
                 that.evaluationDetails.EVALUATION_VALUES = evaluationValues.results;
                 objForTrend = that.formObjectForTrendThreshold(indicatorObj, evaluationObj, evaluationValues);
                 that.modelForTarget = new sap.ui.model.json.JSONModel();
                 that.byId("thresholdTrendId").setModel(that.modelForTarget);
                 that.modelForTarget.setData(objForTrend);

          },function(err){
                 sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
          });
          if(that.oHeaderFooterOptions) {
                 that.updateFooterButtons(evaluationObj);
          }
          else {
                 that.bookmark = false;
          }
          that.evaluationDetails = that.evaluationDetails || {};
                 that.evaluationDetails.EVALUATIONS = evaluationObj;
          that.currentEvaluationObj = evaluationObj;
       },
       
       getAllFooterButtons : function() {
          var that = this;
          return [{
                 sId: "activateButton",
                 sI18nBtnTxt : "ACTIVATE",
                 onBtnPressed : function(evt) {
                        var log = that.checkForMandatoryParametersForEvaluation();
                        
                        that.oApplicationFacade.getODataModel().read(("/EVALUATION_TEXTS?$filter=ID eq '"+that.currentEvaluationObj.ID + "' and IS_ACTIVE eq 0 and TITLE ne ''"), null, null, false, function(data) {
                     	   if(!(data && data.results && data.results.length)) {
                     		   log.error.push(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_EVALUATION_TITLE"));
                     	   }
                        }, function(err) {
                        	sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
                        });
                        
                        if(log.error.length) {
                              var errMsg = "";
                              for(var i=0,l=log.error.length; i<l; i++) {
                                     errMsg += errMsg ? "\n" : "";
                                     errMsg += that.oApplicationFacade.getResourceBundle().getText(log.error[i]);
                              }
                              sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_EV_ERROR"), errMsg);
                        }
                        else {
                        	  if(log.warning.length) {
                        		  var warnMsg = "";
                                  for(var i=0,l=log.warning.length; i<l; i++) {
                                         warnMsg += warnMsg ? "\n" : "";
                                         warnMsg += that.oApplicationFacade.getResourceBundle().getText(log.warning[i]);
                                  }
                                  
                                  var backDialog = new sap.m.Dialog({
              						icon:"sap-icon://warning2",
              						title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
              						state:"Warning",
              						type:"Message",
              						content:[new sap.m.Text({text:warnMsg + "\n\n" + that.oApplicationFacade.getResourceBundle().getText("WARNING_EV_ACTIVATE")})],
              						beginButton: new sap.m.Button({
              							text:that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
              							press: function(){
              								backDialog.close();
              								that.activateEvaluation();
              							}
              						}),
              						endButton: new sap.m.Button({
              							text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
              							press:function(){
              								backDialog.close();
              							}
              						})   	                                           
              					});
              					backDialog.open();
                        	  }	
                        	  else {
                        		  that.activateEvaluation(); 
                        	  }
                        }
                 }
          }, {
                 sId: "favouriteToggleButton",
                 sI18nBtnTxt : "ADD_FAVOURITE",
                 onBtnPressed : function(evt) {
                        var path = "/FAVOURITES";
                        var contextObj = that.getView().getBindingContext().getObject();
                        var oDataModel = that.oApplicationFacade.getODataModel(); 
                        var payload = {ID:contextObj.ID, TYPE:contextObj.ENTITY_TYPE, USER_ID:that.oApplicationFacade.currentLogonHanaUser, MANUAL_ENTRY:1, LAST_WORKED_ON:null};
                        if(contextObj.MANUAL_ENTRY) {
                        	//odata remove
//                              path += "(ID='" + contextObj.ID + "',TYPE='" + contextObj.ENTITY_TYPE + "',USER_ID='" + that.oApplicationFacade.currentLogonHanaUser + "')";
//                              oDataModel.remove(path,null,function(data) {
//                                     sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_DELETE_SUCCESS"));
//                                     oDataModel.refresh();
//                                     contextObj.MANUAL_ENTRY = 0;
//                                     that.updateFooterButtons(contextObj);
//                              }, function(err) {
//                                     sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_DELETE_ERROR"), err.response.body);
//                              });
                        	
                        	//xsjs remove
                        	sap.suite.smartbusiness.utils.remove(sap.suite.smartbusiness.utils.serviceUrl("EVALUATION_FAVOURITE_SERVICE_URI"),payload,function(data) {
                        		sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_DELETE_SUCCESS"));
                        		contextObj.MANUAL_ENTRY = null;
                           		that.updateFooterButtons(contextObj);
                        		oDataModel.refresh();
                        		that.setBtnText("favouriteToggleButton",that.oApplicationFacade.getResourceBundle().getText("ADD_FAVOURITE"));
                        	}, function(err) {
                        		sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_DELETE_ERROR"), err.responseText);
                        	});
                        }
                        else if(contextObj.MANUAL_ENTRY == 0) {
                        	// odata update
//                              path += "(ID='" + contextObj.ID + "',TYPE='" + contextObj.ENTITY_TYPE + "',USER_ID='" + that.oApplicationFacade.currentLogonHanaUser + "')";
//                              oDataModel.update(path,payload,null,function(data) {
//                                     sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_SUCCESS"));
//                                     oDataModel.refresh();
//                                     contextObj.MANUAL_ENTRY = 1;
//                                     that.updateFooterButtons(contextObj);
//                              }, function(err) {
//                                     sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_DELETE_ERROR"), err.response.body);
//                              });
                        	
                        	//xsjs update
                        	sap.suite.smartbusiness.utils.update(sap.suite.smartbusiness.utils.serviceUrl("EVALUATION_FAVOURITE_SERVICE_URI"),payload,null,function(data) {
                        		sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_SUCCESS"));
                        		contextObj.MANUAL_ENTRY = 1;
                        		that.updateFooterButtons(contextObj);
                        		oDataModel.refresh();
                        		that.setBtnText("favouriteToggleButton",that.oApplicationFacade.getResourceBundle().getText("REMOVE_FAVOURITE"));
                        	}, function(err) {
                        		sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_DELETE_ERROR"), err.responseText);
                        	});
                        }
                        else if(contextObj.MANUAL_ENTRY == null) {
                        	//odata create
//                              oDataModel.create(path,payload,null,function(data) {
//                                     sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_SUCCESS"));
//                                     oDataModel.refresh();
//                                     contextObj.MANUAL_ENTRY = 1;
//                                     that.updateFooterButtons(contextObj);
//                              }, function(err) {
//                                     sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_ERROR"), err.response.body);
//                              });
                        	
                        	//xsjs create
                        	sap.suite.smartbusiness.utils.update(sap.suite.smartbusiness.utils.serviceUrl("EVALUATION_FAVOURITE_SERVICE_URI"),payload,null,function(data) {
                        		sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_SUCCESS"));
                        		contextObj.MANUAL_ENTRY = 1;
                        		that.updateFooterButtons(contextObj);
                        		oDataModel.refresh();
                        		that.setBtnText("favouriteToggleButton",that.oApplicationFacade.getResourceBundle().getText("REMOVE_FAVOURITE"));
                        	}, function(err) {
                        		sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_ERROR"), err.responseText);
                        	});
                        }
                        contextObj.MANUAL_ENTRY ? evt.getSource().setText(that.oApplicationFacade.getResourceBundle().getText("REMOVE_FAVOURITE"))
                                     : evt.getSource().setText(that.oApplicationFacade.getResourceBundle().getText("ADD_FAVOURITE"));
                 }             
          }, {
                 sId: "editButton",
                 sI18nBtnTxt : "EDIT",
                 onBtnPressed : function(evt) {
                	 var evalPath = that.getView().getBindingContext().getPath();
                	 evalPath = (that.currentEvaluationObj.COUNTER == 2) ? evalPath.replace("IS_ACTIVE=1","IS_ACTIVE=0") : evalPath;
                	 sap.suite.smartbusiness = sap.suite.smartbusiness || {};
                	 sap.suite.smartbusiness.modelerAppCache = sap.suite.smartbusiness.modelerAppCache || {};
                	 sap.suite.smartbusiness.modelerAppCache.createSBKPIEvaluation  = sap.suite.smartbusiness.modelerAppCache.createSBKPIEvaluation || {};
                	 sap.suite.smartbusiness.modelerAppCache.createSBKPIEvaluation.appFromWorkspace = true;
                	 if(that.getView().getBindingContext().getObject().COUNTER == 2){
                		 sap.suite.smartbusiness.utils.appToAppNavigation({action: "createSBKPIEvaluation", route: "editEvaluationDraft", context: ("/"+that.contextPath.replace("INDICATORS_MODELER","INDICATORS") + evalPath.replace("EVALUATIONS_MODELER","EVALUATIONS"))});
                	 }
                	 else if(that.getView().getBindingContext().getObject().COUNTER == 1){
                		 sap.suite.smartbusiness.utils.appToAppNavigation({action: "createSBKPIEvaluation", route: "editEvaluation", context: ("/"+that.contextPath.replace("INDICATORS_MODELER","INDICATORS") + evalPath.replace("EVALUATIONS_MODELER","EVALUATIONS"))});
                	 }
                 }
          }, {
                 sId: "deleteButton",
                 sI18nBtnTxt : "DELETE_BUTTON_TEXT",
                 onBtnPressed : function(evt) {
                	 	if(!(sap.m.MessageBox)) {
                	 		jQuery.sap.require("sap.m.MessageBox");
                	 	}
                        sap.m.MessageBox.show(
                                     that.oApplicationFacade.getResourceBundle().getText("WARNING_SINGLE_EVALUATION_DELETE"),
                                     "sap-icon://hint",
                                     that.oApplicationFacade.getResourceBundle().getText("DELETE_BUTTON_TEXT"),
                                     [sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL ],
                                     function(evt){
                                            if(evt=="OK"){
                                            	var ODataModel = that.oApplicationFacade.getODataModel();
                                            	var payloads = [];
                                            	payloads.push({ID:that.getView().getBindingContext().getObject().ID,IS_ACTIVE:that.getView().getBindingContext().getObject().IS_ACTIVE});
                                            	//odata remove
//                                            	var entity = "EVALUATIONS" + that.getView().getBindingContext().sPath.substr(1).substr(that.getView().getBindingContext().sPath.substr(1).indexOf("("));
//                                            	ODataModel.remove(entity,null,function(data){
//                                            		sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETE_EV_SUCCESS"));
//                                            		ODataModel.refresh();
//                                            		window.history.back();
//                                            	},
//                                            	function(err){
//                                            		sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETE_EV_ERROR"), err.response.body);
//                                            	});
                                            	
                                            	//xsjs remove
                                            	sap.suite.smartbusiness.utils.remove(sap.suite.smartbusiness.utils.serviceUrl("EVALUATION_SERVICE_URI"),payloads,function(data){
                                            		sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETE_EV_SUCCESS"));
                                            		ODataModel.refresh();
                                            		var hash = window.location.hash.replace("evalDetail","detail");
                                            		sap.suite.smartbusiness.utils.replaceHash({hash:hash.substr(0,hash.lastIndexOf("/"))}, true);
                                            	},
                                            	function(err){
                                            		sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETE_EV_ERROR"), err.responseText);
                                            	});
                                            }
                                            if(evt=="CANCEL"){
                                                   
                                            }

                                     });
                 }
          }, {
                sId: "duplicateButton",
                sI18nBtnTxt : "DUPLICATE",
                onBtnPressed : function(evt) {
                	sap.suite.smartbusiness = sap.suite.smartbusiness || {};
                	sap.suite.smartbusiness.modelerAppCache = sap.suite.smartbusiness.modelerAppCache || {};
                	sap.suite.smartbusiness.modelerAppCache.createSBKPIEvaluation  = sap.suite.smartbusiness.modelerAppCache.createSBKPIEvaluation || {};
                	sap.suite.smartbusiness.modelerAppCache.createSBKPIEvaluation.appFromWorkspace = true;
                	sap.suite.smartbusiness.utils.appToAppNavigation({action: "createSBKPIEvaluation", route: "duplicateEvaluation", context: ("/"+that.contextPath.replace("INDICATORS_MODELER","INDICATORS")+"/" + that.evalPath.replace("EVALUATIONS_MODELER","EVALUATIONS"))});
                }
           }, {
                 sId: "addTileButton",
                 sI18nBtnTxt : "ADD_TILE",
                 onBtnPressed : function(evt){ 
                	 sap.suite.smartbusiness = sap.suite.smartbusiness || {};
                	 sap.suite.smartbusiness.modelerAppCache = sap.suite.smartbusiness.modelerAppCache || {};
                	 sap.suite.smartbusiness.modelerAppCache.configureSBKPITile  = sap.suite.smartbusiness.modelerAppCache.configureSBKPITile || {};
                	 sap.suite.smartbusiness.modelerAppCache.configureSBKPITile.appFromWorkspace = true;
                	 sap.suite.smartbusiness.utils.appToAppNavigation({action: "configureSBKPITile", route: "detail", context: ("EVALUATIONS_CHIP" + that.evalPath.substr(that.evalPath.indexOf("(")))});
                 }
          }, {
                 sId: "drilldownButton",
                 sI18nBtnTxt : "DRILLDOWN_CONFIG",
                 onBtnPressed : function(evt) {
                	 sap.suite.smartbusiness = sap.suite.smartbusiness || {};
                	 sap.suite.smartbusiness.modelerAppCache = sap.suite.smartbusiness.modelerAppCache || {};
                	 sap.suite.smartbusiness.modelerAppCache.configureSBKPIDrilldown  = sap.suite.smartbusiness.modelerAppCache.configureSBKPIDrilldown || {};
                	 sap.suite.smartbusiness.modelerAppCache.configureSBKPIDrilldown.appFromWorkspace = true;
                	 sap.suite.smartbusiness.utils.appToAppNavigation({action: "configureSBKPIDrilldown", route: "detail", context: ("EVALUATIONS_DDA('" + that.evalContext.getProperty("ID") + "')")});
                 }
          }, {
                 sId: "authUsersButton",
                 sI18nBtnTxt : "AUTH_USERS",
                 onBtnPressed : function(evt) {
                	 sap.suite.smartbusiness = sap.suite.smartbusiness || {};
                	 sap.suite.smartbusiness.modelerAppCache = sap.suite.smartbusiness.modelerAppCache || {};
                	 sap.suite.smartbusiness.modelerAppCache.authorizeSBEvaluation  = sap.suite.smartbusiness.modelerAppCache.authorizeSBEvaluation || {};
                	 sap.suite.smartbusiness.modelerAppCache.authorizeSBEvaluation.appFromWorkspace = true;
                	 sap.suite.smartbusiness.utils.appToAppNavigation({action: "authorizeSBEvaluation", route: "detail", context: (that.evalPath)});
                 }
          }];
       },
       
       updateFooterButtons: function(evaluationObj) {
    	   evaluationObj = evaluationObj || this.getView().getModel("evaluation").getData().EVALUATION;
    	   var footerAllButtons = this.getAllFooterButtons();

    	   this.oHeaderFooterOptions.buttonList = [];


    	   if(evaluationObj.IS_ACTIVE) {
    		   this.oHeaderFooterOptions.oEditBtn = footerAllButtons[5];
    		   this.oHeaderFooterOptions.buttonList.push(footerAllButtons[6]);
    		   this.oHeaderFooterOptions.buttonList.push(footerAllButtons[7]);
    	   }
    	   else {
    		   this.oHeaderFooterOptions.oEditBtn = footerAllButtons[0];
    	   }

    	   if(evaluationObj.MANUAL_ENTRY) {
    		   footerAllButtons[1].sI18nBtnTxt = this.oApplicationFacade.getResourceBundle().getText("REMOVE_FAVOURITE");
    	   }
    	   else {
    		   footerAllButtons[1].sI18nBtnTxt = this.oApplicationFacade.getResourceBundle().getText("ADD_FAVOURITE"); 
    	   }
    	   this.oHeaderFooterOptions.buttonList.push(footerAllButtons[1]);

    	   this.oHeaderFooterOptions.buttonList.push(footerAllButtons[4]);

    	   if(evaluationObj.COUNTER == 2) {
    		   footerAllButtons[2].sI18nBtnTxt = this.oApplicationFacade.getResourceBundle().getText("EDIT_DRAFT");
    	   }
    	   else {
    		   footerAllButtons[2].sI18nBtnTxt = this.oApplicationFacade.getResourceBundle().getText("EDIT"); 
    	   }
    	   this.oHeaderFooterOptions.buttonList.push(footerAllButtons[2]);

    	   this.oHeaderFooterOptions.buttonList.push(footerAllButtons[3]);

    	   this.setHeaderFooterOptions(this.oHeaderFooterOptions);
       },
       
       checkForMandatoryParametersForEvaluation: function() {
          var that = this;
          var evaluationObj = that.evalContext.getObject();
          var errorLog = [];
          var warningLog = [];
          var inputParameters = {};
          var evaluationFilters = this.evaluationDetails.EVALUATION_FILTERS;
          var evaluationValues = this.evaluationDetails.EVALUATION_VALUES;
          var isTarget = false;
          
          evaluationObj.ODATA_URL ? true : errorLog.push("ERROR_ENTER_ODATA_URL");
          evaluationObj.ODATA_ENTITYSET ? true : errorLog.push("ERROR_ENTER_ENTITY_SET");
          evaluationObj.COLUMN_NAME ? true : errorLog.push("ERROR_ENTER_MEASURE");

          if(evaluationObj.ODATA_URL && evaluationObj.ODATA_ENTITYSET) {
                 this.oData4SAPAnalyticsModel = new sap.suite.smartbusiness.odata4analytics.Model(new sap.suite.smartbusiness.odata4analytics.Model.ReferenceByURI(evaluationObj.ODATA_URL), null);
                 this.queryResultObj = this.oData4SAPAnalyticsModel.findQueryResultByName(evaluationObj.ODATA_ENTITYSET);
                 if(this.queryResultObj.getParameterization()) {
                        inputParameters = this.queryResultObj.getParameterization().getAllParameters();
                 }

                 for(var i=0,l=evaluationValues.length; i<l; i++) {
                	 if(evaluationValues[i].TYPE == "TA") {
                		 isTarget = true;
                	 }
                	 else if(evaluationValues[i].TYPE && (evaluationValues[i].TYPE.toString().search(/^\d\d$/) == 0)) {
                		 if(evaluationValues[i].COLUMN_NAME == evaluationObj.COLUMN_NAME) {
                			 errorLog.push("ADDI_MEASURE_HAS_MAIN_MEASURE");
                		 }
                	 }
                 }

                 if(!isTarget) {
                	 warningLog.push("ERROR_ENTER_TARGET");
                 }

                 for(var i=0,l=evaluationFilters.length; i<l; i++) {
                        if(evaluationFilters[i].TYPE == 'PA') {
                              if(inputParameters[evaluationFilters[i].NAME] && (evaluationFilters[i].VALUE_1) && (evaluationFilters[i].VALUE_1 != 0)) {
                                     delete inputParameters[evaluationFilters[i].NAME];
                              }
                        }
                 }
                 if(Object.keys(inputParameters).length) {
                        errorLog.push("ERROR_ENTER_ALL_INPUT_PARAMETERS");
                 }
          }
          return {error:errorLog, warning:warningLog};
       },
       formatFilterValue: function(value){
    	   if(!value)
    		   return value;
    	   var valueArray = value.split(",");
    	   pattern =/^[1-9][0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([0-1][0-9]|2[0-3])(:[0-5][0-9]){2}[.][0-9]{3}Z$/;
           if(!pattern.test(valueArray[0]))
	    		return value;
    	   var dateArray = [];
    	   for(var key in valueArray)
    		   dateArray.push(new Date(valueArray[key]).toString());
    	   return dateArray.join(",");
       },
       
       activateEvaluation: function() {
    	   var that = this;
    	   var payload = {};
    	   var entity = "ACTIVE_EVALUATIONS";
    	   var sPath = that.getView().getBindingContext().sPath;
           var isFav = that.getView().getBindingContext().getProperty("MANUAL_ENTRY");
           payload.ID = sPath.substring((sPath.indexOf("'")+1),sPath.lastIndexOf("'"));
           var ODataModel = that.oApplicationFacade.getODataModel();
           //odata write
//           ODataModel.create(entity,payload,null,function(data){
//                  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_EV_SUCCESS"));
//                  ODataModel.refresh();
//                  sap.suite.smartbusiness.utils.hashChange({hash:window.location.hash.replace("IS_ACTIVE=0","IS_ACTIVE=1")});
//                  that.byId("evalStatus").setText(that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE"));
//                  that.byId("evalStatus").setState(sap.ui.core.ValueState.Success); 
//                  that.setHeaderFooterOptions(that.oHeaderFooterOptions);
//           },
//           function(err){
//                  sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_EV_ERROR"), err.response.body);
//           });
           
           //xsjs write
           sap.suite.smartbusiness.utils.create(sap.suite.smartbusiness.utils.serviceUrl("ACTIVATE_EVALUATION_SERVICE_URI"),payload,null,function(data){
        	   sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_EV_SUCCESS"));
        	   ODataModel.refresh();
        	   sap.suite.smartbusiness.utils.replaceHash({hash:window.location.hash.replace("IS_ACTIVE=0","IS_ACTIVE=1")}, true);
        	   that.byId("evalStatus").setText(that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE"));
        	   that.byId("evalStatus").setState(sap.ui.core.ValueState.Success); 
        	   that.setHeaderFooterOptions(that.oHeaderFooterOptions);
           },
           function(err){
        	   sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_EV_ERROR"), err.responseText);
           });
           
           
       }

});


}; // end of sap/suite/ui/smartbusiness/designtime/workspace/view/S4.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.Component') ) {
// define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.suite.ui.smartbusiness.drilldown.Component");
jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained


// new Component
sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.drilldown.Component", {
    metadata : sap.ca.scfld.md.ComponentBase.createMetaData("FS", 
            {
        "name" : "Smart Business Generic Drilldown",
        "version" : "1.0.0",
        "library" : "sap.suite.ui.smartbusiness.drilldown",
        "includes" : ["lib/AllLibrary.js"],
        "dependencies" : {
            "libs" : ["sap.m", "sap.ca.ui"],
            "components" : []
        },
        config : {
            resourceBundle : "i18n/i18n.properties",
            titleResource : "SAP Smart Business",
            fullWidth : true
        },
        viewPath : "sap.suite.ui.smartbusiness.drilldown.view",
        fullScreenPageRoutes : {
            // fill the routes to your full screen pages in here.
            "fullscreen" : {
                "pattern" : ":all*:",
                "view" : "Drilldown"
            }
        },
    }),
    /**
     * Initialize the application
     * 
     * @returns {sap.ui.core.Control} the content
     */
    createContent : function() {
        var modulePath = jQuery.sap.getModulePath("sap.suite.ui.smartbusiness.drilldown");
        jQuery.sap.require("sap.ca.ui.utils.Lessifier");
        sap.ca.ui.utils.Lessifier.lessifyCSS("sap.suite.ui.smartbusiness.drilldown", "css/colors.css"); 
    	jQuery.sap.includeStyleSheet(modulePath + "/css/override.css");
        try {
            var oViewData = this.getComponentData().startupParameters;
            oViewData.component = this;
        } catch(e) {
            oViewData = {};
            oViewData.component=this;
            jQuery.sap.log.error("Startup Parameters not found!!");  
        }
        return sap.ui.view({
            viewName : "sap.suite.ui.smartbusiness.drilldown.view.Main",
            type : sap.ui.core.mvc.ViewType.XML,
            viewData : oViewData
        });
    }
});

}; // end of sap/suite/ui/smartbusiness/drilldown/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.Configuration') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.drilldown.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained

sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.drilldown.Configuration", {
    getServiceParams : function() {
        return [];
    },
    /**
     * @inherit
     */
    getServiceList : function() {
        return [];
    }
});
}; // end of sap/suite/ui/smartbusiness/drilldown/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.lib.Configuration') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.drilldown.lib.Configuration");

/**
 * NamesSpace for DDA Configuration API
 */
sap.suite = sap.suite || {};
sap.suite.smartbusiness = sap.suite.smartbusiness || {};
sap.suite.smartbusiness.drilldown = (function(){
    var _cache = {};
    var _encodeUrl = function(uRi) {
        return jQuery.sap.encodeURL(uRi);
    };
    var trim = function(str) {
    	if(str) {
    		return str.trim();
    	}
    	return str;
    };
    var Header =  function(oHeader) {
        this.oHeader = oHeader;
        this.oHeader.CONFIGURATION = trim(this.oHeader.CONFIGURATION);
        if(this.oHeader.CONFIGURATION) {
        	var temp = this.oHeader.CONFIGURATION;
        	try {
        		tempObject = JSON.parse(temp);
        		for(var each in tempObject) {
        			tempObject[each]  = JSON.parse(tempObject[each]);
        		}
        		this.oHeader.PARSED_CONFIGURATION = tempObject;
        	} catch(e) {
        		jQuery.sap.log.error("Error Parsing Drilldown Header Configuration");
        		this.oHeader.PARSED_CONFIGURATION = null;
        	}
        } else {
        	this.oHeader.PARSED_CONFIGURATION = null;
        }
    };
    Header.prototype = {
            getVisualizationType : function() {
                return this.oHeader.VISUALIZATION_TYPE;
            },
            getReferenceEvaluationId : function() {
                return this.oHeader.REFERENCE_EVALUATION_ID;
            },
            getConfigurationId : function() {
                return this.oHeader.CONFIGURATION_ID;
            },
            getEvaluationId : function() {
                return this.oHeader.EVALUATION_ID;
            },
            getVisualizationOrder : function() {
                return this.oHeader.VISUALIZATION_ORDER;
            },
            isVisible : function() {
                return this.oHeader.VISIBILITY == 1;
            },
            isAssociated : function() {
                if(this.getReferenceEvaluationId()) {
                    if(this.getReferenceEvaluationId()!== this.getEvaluationId()) {
                        return true;
                    }
                }
                return false;
            },
            isDimensionRequired : function() {
                return this.getVisualizationType() == "TREND" || this.getVisualizationType() == "COMPARISION";
            },
            getDimension : function() {
                return this.oHeader.DIMENSION;
            },
            getTileConfiguration : function() {
            	return this.oHeader.PARSED_CONFIGURATION;
            },
            getVisibility : function() {
                return this.oHeader.VISIBILITY;
            }
    };

    /**
     * 
     * @param oChart
     * @returns {Chart}
     */
    var Chart = function(oChart) {
        this.oChart = oChart;
    };
    Chart.prototype = {
            getValueType : function() {
                return this.oChart.VALUE_TYPE; //Possible Values Absolute/Percentage
            },
            getAxisType : function() {
                return this.oChart.AXIS_TYPE; //Possible Values Single/Dual
            },
            getChartType : function() {
                var _this = this;
                return  {
                    isBar : function() {
                        return _this.oChart.CHART_TYPE.toUpperCase() == "BAR"; 
                    },
                    isColumn : function() {
                        return _this.oChart.CHART_TYPE.toUpperCase() == "COLUMN"; 
                    },
                    isLine : function() {
                        return _this.oChart.CHART_TYPE.toUpperCase() == "LINE"; 
                    },
                    isCombination : function() {
                        return _this.oChart.CHART_TYPE.toUpperCase() == "COMBINATION"; 
                    },
                    isTable : function() {
                        return _this.oChart.CHART_TYPE.toUpperCase() == "TABLE"; 
                    },
                    isBubble : function() {
                        return _this.oChart.CHART_TYPE.toUpperCase() == "BUBBLE"; 
                    },
                    getText : function() {
                        return _this.oChart.CHART_TYPE;
                    }
                };
            },
            getColorScheme : function() {
                var that = this;
                return {
                    getText : function() {
                        return that.oChart.COLOR_SCHEME;
                    },
                    isManual : function() {
                        return that.oChart.COLOR_SCHEME == "MANUAL_NON_SEMANTIC" || that.oChart.COLOR_SCHEME == "MANUAL_SEMANTIC";
                    },
                    isManualSemantic : function() {
                        return that.oChart.COLOR_SCHEME == "MANUAL_SEMANTIC";
                    },
                    isManualNonSematic : function() {
                        return that.oChart.COLOR_SCHEME == "MANUAL_NON_SEMANTIC";
                    },
                    isAutoSemantic : function() {
                        return that.oChart.COLOR_SCHEME == 'AUTO_SEMANTIC';
                    }
                };
            },
            getThresholdMeasure : function() {
                return this.oChart.THRESHOLD_MEASURE;
            },
            getDataLimit : function() {
                return this.oChart.DATA_LIMIT;
            },
            isAbsoluteValue : function() {
                return this.getValueType() == "ABSOLUTE";
            },
            isPercentageValue : function() {
                return this.getValueType() == "PERCENTAGE";
            },
            isSingleAxis : function() {
                return this.getAxisType() == "SINGLE";
            },
            isDualAxis : function() {
                return this.getAxisType() == "DUAL";
            },
            isStackingEnabled : function(viewConfiguration) {
                var flag = false;
                var columns = viewConfiguration.getColumns();
                columns.forEach(function(column) {
                    var oColumn  = viewConfiguration.findColumnByName(column);
                    if(oColumn.isStacked()) {
                        flag = true;
                        return false;
                    }
                });
                return flag;
            }

            /*Chart Types*/
    };

    /**
     * 
     * @returns {Column}
     */
    var Column = function() {
    };
    Column.prototype = {
            getName  : function() {
                return this.oParam.NAME;
            },
            getSortBy : function() {
                return this.oParam.SORT_BY;
            },
            getSortOrder : function() {
                return this.oParam.SORT_ORDER;  
            },
            getType : function() {
                return this.oParam.TYPE;
            },
            getVisibility : function() {
                return this.oParam.VISIBILITY;
            },
            isVisibleInChart : function() {
                return this.oParam.VISIBILITY == "BOTH" || this.oParam.VISIBILITY == "CHART";
            },
            isVisibleInTable : function() {
                return this.oParam.VISIBILITY == "BOTH" || this.oParam.VISIBILITY == "TABLE";
            },
            getColor : function() {
                return this.oParam.COLOR;
            },
            isStacked : function() {
                return this.oParam.STACKING == 1;
            },
            getStacking : function() {
                return this.oParam.STACKING;  
            },
            isDimension : function() {
                return this.getType().toUpperCase() == "DIMENSION";
            },
            isMeasure : function() {
                return this.getType().toUpperCase() == "MEASURE";
            },
            getAxis : function() {
                return this.oParam.AXIS;
            }
    };

    /**
     * 
     * @param oParam
     * @returns {Dimension}
     */
    var Dimension = function(oParam) {
        this.oParam = oParam;
    };
    Dimension.prototype = new Column();

    /**
     * 
     * @param oParam
     * @returns {Measure}
     */
    var Measure = function(oParam) {
        this.oParam = oParam;
    };
    Measure.prototype = new Column();


    /**
     * 
     * @param oParam
     * @returns {Filter}
     */
    var Filter = function(oParam) {
        this.oFilter = oParam;
    };
    Filter.prototype = {
            getName : function() {
                return this.oFilter.DIMENSION;
            },
            isVisible  : function() {
                return this.oFilter.VISIBILITY == 1;
            }
    };
    var View = function(oParam) {
        this._viewId = oParam.CONFIGURATION_ID;
        this._evaluationId = oParam.EVALUATION_ID;
        this._title  = oParam.TEXT;
        this._order = oParam.CONFIG_ORDER;
        this._columns = [];this._dimensions = []; this._measures = []; 
        this._dimensionMap = {}; this._measureMap = {};
        this._chartConfig = [];
    };
    View.prototype = {
            getTitle : function() {
                return this._title;
            },
            getId : function() {
                return this._viewId;
            },
            getEvaluationId : function() {
                return this._evaluationId;  
            },
            getViewOrder : function() {
                return this._order;
            },
            getColumns  : function() {
                return this._columns;
            },
            getDimensions : function () {
                return this._dimensions;  
            },
            getDimensionCount : function() {
                return this._dimensions.length;
            },
            getMeasures : function() {
                return this._measures;  
            },
            getMeasureCount : function() {
                return this._measures.length;
            },
            findDimensionByName : function (dimensionName) {
                if(this._dimensionMap[dimensionName]) {
                    return this._dimensionMap[dimensionName];
                } else {
                    throw new Error("Invalid Dimension Name : "+dimensionName);
                }

            },
            findMeasureByName : function (measureName) {
                if(this._measureMap[measureName]) {
                    return this._measureMap[measureName];
                } else {
                    throw new Error("Invalid Dimension Name : "+measureName);
                }

            },
            findColumnByName : function(columnName) {
                if(this._dimensionMap[columnName]) {
                    return this._dimensionMap[columnName];
                } else if(this._measureMap[columnName]) {
                    return this._measureMap[columnName];
                } else {
                    throw new Error("Invalid Column Name : "+columnName);
                }
            },
            getChartConfiguration : function() {
                return this._chartConfig;
            }
    };
    var Configuration = function(evaluationId, batchResponse) {
        this.evaluationId = evaluationId;
        this._batchResponse = batchResponse;
        var defautView = null;
        var viewMap = {};
        var viewIdArray = [];
        var _index = -1;
        this._filters = []; this._filterMap = {};
        this._headers = [];
        var init = function(oMaster, oConfig, oHeader, oFilter, oColumns, oChart) {
            oMaster.forEach(function(v,i,a) {
                var viewId = v.CONFIGURATION_ID;
                if(viewId) {
                    _index++;
                    viewIdArray.push(viewId);
                    var vObject = new View(v);
                    viewMap[viewId] = vObject;
                    if(_index == 0) {
                        defautView = viewId;
                    }
                    View.setDimensionAndMeasures(oColumns, vObject);
                    View.setChart(oChart, vObject);
                }
            });
            var Segments = Configuration.Constants;
            for(var eachSegment in Segments) {
                var func = Segments[eachSegment].func;
                if(jQuery.sap.startsWith(func,"is")) {
                    Configuration.prototype[func] = function() {
                        return true;  
                    };
                } else {
                    Configuration.prototype[func] = function() {
                        return null;  
                    };
                }
            }
            oConfig.forEach(function(oValue, index, aArray) {
                var tempObject = Segments[oValue.PROPERTY_TYPE];
                if(tempObject) {
                    var func = tempObject.func;
                    if(jQuery.sap.startsWith(func,"is")) {
                        Configuration.prototype[func] = function() {
                            return oValue.VISIBILITY == 1;  
                        };
                    } else {
                        Configuration.prototype[func] = function() {
                            return oValue.PROPERTY_VALUE;  
                        };
                    }
                } else {
                    jQuery.sap.log.error("Unknown Property_Name : " + oValue.PROPERTY_TYPE);
                }
            },this);
            if(oFilter.length) {
                oFilter.forEach(function(oValue, index, aArray){
                    this._filters.push(oValue.DIMENSION);
                    this._filterMap[oValue.DIMENSION] = new Filter(oValue);
                }, this);
            }
            if(oHeader.length) {
                oHeader.forEach(function(oValue, index, array) {
                    this.getHeaders().push(new Header(oValue));
                }, this);
            }
        };
        this.getFilters = function() {
            return this._filters;
        };
        this.getHeaders = function() {
            return this._headers;
        };
        this.getMaxViewOrder = function() {
            var max_order = 0;
            for (var view in viewMap) {
                max_order = Math.max(max_order, viewMap[view].getViewOrder());
            }
            return max_order;
        };
        this.findViewById  = function(vId) {
            if(viewMap[vId]) {
                return viewMap[vId];
            }
            return null;
        },
        this.getDefaultViewId = function() {
            return defautView;  
        },
        this.getDefaultView = function() {
            if(defautView) {
                return viewMap[defautView];
            }
            return null;
        };
        this.removeViewById=function(viewId){
            delete viewMap[viewId];
        };
        this.getAllViews = function() {
            var views = [];
            viewIdArray.forEach(function(viewId) {
                views.push({
                    ID : viewId,
                    TITLE : this.findViewById(viewId).getTitle() || "-NA- ("+viewId+")"
                })
            }, this);
            return views;
        };
        init.call(this, this._batchResponse[0].data.results,
                this._batchResponse[1].data.results,
                this._batchResponse[2].data.results,
                this._batchResponse[3].data.results,
                this._batchResponse[4].data.results,
                this._batchResponse[5].data.results);
    };
    Configuration.Constants = {
            SAP_FILTER : {
                desc : "Flag whether filter is enabled",
                func : "isFilterEnabled"
            },
            SAP_HEADER : {
                desc : "Flag whether header is enabled",
                func : "isHeaderEnabled"
            },
            SAP_AGGREGATE_VALUE : {
                desc : "Flag whether aggregate kpi value is enabled",
                func : "isAggregateValueEnabled"
            },
            QUERY_SERVICE_URI : {
                desc : "Evaluation Query Service Uri",
                func : "getQueryServiceUri"
            },
            QUERY_ENTITY_SET : {
                desc : "Result path for the query service uri",
                func : "getEntitySet"
            }
    };
    View.setDimensionAndMeasures = function(oColumns, oThis) {
        oColumns.forEach(function(oValue, index, aArray) {
            if(oValue.CONFIGURATION_ID == this.getId()) {
                this._columns.push(oValue.NAME);
                if(oValue.TYPE.toUpperCase() == "MEASURE") {
                    this._measureMap[oValue.NAME] = new Measure(oValue);
                    this._measures.push(oValue.NAME);
                } else if(oValue.TYPE.toUpperCase() == "DIMENSION") {
                    this._dimensionMap[oValue.NAME] = new Dimension(oValue);
                    this._dimensions.push(oValue.NAME);
                }
            }
        }, oThis);
    };
    View.setChart = function(oChart, oThis) {
        if(oChart.length) {
            oChart.forEach(function(oValue, index, array) {
                if(this.getId() == oValue.CONFIGURATION_ID) {
                    this.getChartConfiguration().push(new Chart(oValue));
                }
            }, oThis);
        }
    };
    var ConfigurationTree = function(eTitle) {
        var TILE_MAPPING = {
                TT : "Area Chart Tile",
                CT  : "Comparison Tile",
                NT  :"Numeric Tile",
                AT  : "Bullet Tile"
        };
        var tree= {name : eTitle, children : []};
        var allViews = this.getAllViews();
        for(var each in allViews) {
            var eachView = {
                    name : allViews[each].TITLE || "NA",
                    children : []
            };

            var view = this.findViewById(allViews[each].ID);

            /**
             * Configuration
             * 
             */
            var config = {
                    name : "*Configuration",
                    children : []
            };
            eachView.children.push(config);

            config.children.push({
                name : "Filter Enabled : "+this.isFilterEnabled()
            });
            config.children.push({
                name : "Kpi Aggregate Value Enabled: "+this.isAggregateValueEnabled()
            });
            config.children.push({
                name : "Header Enabled : "+this.isHeaderEnabled()
            });
            config.children.push({
                name : "OData Service Uri : "+this.getQueryServiceUri()
            });
            config.children.push({
                name : "Entity Set : "+this.getEntitySet()
            });

            /**
             * Filters
             */
            var filters = this.getFilters();
            var filter = {
                    name : "*Filters("+filters.length+")",
                    children : []
            };
            eachView.children.push(filter);
            filters.forEach(function(eachFilter){
                filter.children.push({
                    name : eachFilter
                });
            });

            /**
             * Chart Configuration
             * 
             */
            var chartConfig = view.getChartConfiguration().length ? view.getChartConfiguration()[0] : null;
            var chart = {
                    name : "*Chart",
                    children : []
            }
            eachView.children.push(chart);
            if(chartConfig) {
                chart.children.push({
                    name : "Type : "+chartConfig.getChartType().getText()
                });
                chart.children.push({
                    name : "Color Scheme : "+chartConfig.getColorScheme().getText()
                });
                chart.children.push({
                    name : "Value Type : "+chartConfig.getValueType()
                });
                chart.children.push({
                    name : "Axis Type : "+chartConfig.getAxisType()
                });
                chart.children.push({
                    name : "Data Limit : "+(chartConfig.getDataLimit() || "NA")
                });
                chart.children.push({
                    name : "Stacking Enabled : "+chartConfig.isStackingEnabled(view)
                });
                chart.children.push({
                    name : "Threshold Measure : "+chartConfig.getThresholdMeasure()
                });


            } else {
                chart.children.push({
                    name : "Oops!!!NO Chart Configuration"
                });
            }
            /**
             * Measure
             */
            var measures = view.getMeasures();
            var measure = {
                    name : "*Measures("+measures.length+")",
                    children : []
            };
            eachView.children.push(measure);
            measures.forEach(function(value, index, array) {
                var tempMeasure = {
                        name : value,
                        children : []
                };
                measure.children.push(tempMeasure);
                var oMeasure = view.findMeasureByName(value);
                tempMeasure.children.push({
                    name : "Color : "+(oMeasure.getColor() || "NA")
                });
                tempMeasure.children.push({
                    name : "Sort By : "+oMeasure.getSortBy()
                });
                tempMeasure.children.push({
                    name : "Sort Order : "+oMeasure.getSortOrder()
                });
                tempMeasure.children.push({
                    name : "Visible in Table : "+oMeasure.isVisibleInTable()
                });
                tempMeasure.children.push({
                    name : "Axis : "+oMeasure.getAxis()
                });
                tempMeasure.children.push({
                    name : "Is Stacked :" +oMeasure.isStacked()
                });

            }, this);

            /**
             * Dimension
             */
            var dimensions = view.getDimensions();
            var dimension = {
                    name : "*Dimensions("+dimensions.length+")",
                    children : []
            };
            eachView.children.push(dimension);
            dimensions.forEach(function(value, index, array) {
                var tempDimension = {
                        name : value,
                        children : []
                };
                dimension.children.push(tempDimension);
                var oDimension = view.findDimensionByName(value);
                tempDimension.children.push({
                    name : "Sort By : " +oDimension.getSortBy()
                });
                tempDimension.children.push({
                    name : "Sort Order : " +oDimension.getSortOrder()
                });
                tempDimension.children.push({
                    name : "Visible in Table : " + oDimension.isVisibleInTable()
                });
                tempDimension.children.push({
                    name : "Axis :" +oDimension.getAxis()
                });
                tempDimension.children.push({
                    name : "Is Stacked :" +oDimension.isStacked()
                });

            }, this);


            /**
             * Header
             */
            var headers = this.getHeaders();
            var header = {
                    name : "*Kpi_Headers("+headers.length+")",
                    children : []
            };
            eachView.children.push(header);
            headers.forEach(function(each, index) {
                var firstHeader = {
                        name : index+1+"",
                        children : []
                };
                header.children.push(firstHeader);

                firstHeader.children.push({
                    name : "Type : "+TILE_MAPPING[each.getVisualizationType()],
                });
                firstHeader.children.push({
                    name : "Reference Evaluation : "+each.getReferenceEvaluationId(),
                });
                firstHeader.children.push({
                    name : "Dimension : "+(each.getDimension() || "NA"),
                });
                firstHeader.children.push({
                    name : "isAssociatedOrOtherEvaluation : "+each.isAssociated(),
                });
            });
            tree.children.push(eachView);
        }
        return tree;
    };
    var getCacheKey = function(oParam) {
        var key = oParam.id;
        return key;
    };

    var formatEvaluation = function(evalData){
        var evaluationList=[];
        var filterList=[];
        var valueList=[];
        var filterCount1=parseInt(evalData.results[0].FILTERS_COUNT) || 1;
        var valueCount=parseInt(evalData.results[0].VALUES_COUNT) || 1;
        var totalCount=filterCount1*valueCount;
        for(var i=0;i<evalData.results.length;i+=totalCount){
            var filterCount=parseInt(evalData.results[i].FILTERS_COUNT) || 1;
            var valueCount=parseInt(evalData.results[i].VALUES_COUNT) || 1;
            var totalCount=filterCount*valueCount;
            var evalList={};
            evalList.keys={};

            evalList.keys.VALUES={};
            evalList.keys.VALUES.results = [];
            evalList.keys.FILTERS={};
            evalList.keys.FILTERS.results = [];
            evalList.keys.ID=evalData.results[i].ID;
            evalList.keys.DESCRIPTION =evalData.results[i].DESCRIPTION;
            evalList.keys.ACTION = evalData.results[i].ACTION;
            evalList.keys.INDICATOR = evalData.results[i].INDICATOR;
            evalList.keys.INDICATOR_TITLE = evalData.results[i].INDICATOR_TITLE;
            evalList.keys.TITLE = evalData.results[i].TITLE;
            evalList.keys.NAME = evalData.results[i].NAME;
            evalList.keys.SCALING=evalData.results[i].SCALING;
            evalList.keys.ODATA_URL=evalData.results[i].ODATA_URL;
            evalList.keys.ODATA_ENTITYSET=evalData.results[i].ODATA_ENTITYSET;
            evalList.keys.VIEW_NAME=evalData.results[i].VIEW_NAME;
            evalList.keys.COLUMN_NAME=evalData.results[i].COLUMN_NAME;
            evalList.keys.OWNER_NAME=evalData.results[i].OWNER_NAME;
            evalList.keys.OWNER_E_MAIL=evalData.results[i].OWNER_E_MAIL;
            evalList.keys.OWNER_ID=evalData.results[i].OWNER_ID;           
            evalList.keys.PROPERTIES = evalData.results[i].PROPERTIES||{};
            evalList.keys.ODATA_PROPERTY=evalData.results[i].ODATA_PROPERTY;
            evalList.keys.SEMANTIC_OBJECT=evalData.results[i].SEMANTIC_OBJECT;
            evalList.keys.VALUES_SOURCE=evalData.results[i].VALUES_SOURCE;
            evalList.keys.INDICATOR_TYPE=evalData.results[i].INDICATOR_TYPE;            
            evalList.keys.GOAL_TYPE=evalData.results[i].GOAL_TYPE;

            for(var j=i;j<valueCount+i;j++){
                if(parseInt(evalData.results[i].VALUES_COUNT)){
                    var value={};
                    value.TYPE=evalData.results[j].TYPE;
                    value.FIXED=evalData.results[j].FIXED;
                    value.COLUMN_NAME=evalData.results[j].COLUMN_NAME_1;
                    value.ODATA_PROPERTY=evalData.results[j].ODATA_PROPERTY_1;
                    value.ID = evalData.results[j].ID;
                    evalList.keys.VALUES.results.push(value);
                }
            }
            for(var k=i;k<totalCount+i;k+=valueCount){
                if(parseInt(evalData.results[i].FILTERS_COUNT)){
                    var filter={};
                    filter.ID = evalData.results[k].ID;
                    filter.NAME=evalData.results[k].NAME;
                    filter.OPERATOR=evalData.results[k].OPERATOR;
                    filter.TYPE=evalData.results[k].TYPE_1;                
                    filter.VALUE_1=evalData.results[k].VALUE_1;
                    filter.VALUE_2=evalData.results[k].VALUE_2;
                    evalList.keys.FILTERS.results.push(filter);
                }
            }
            evaluationList.push(evalList.keys);
        }

        return evaluationList;
    };
    var _appendSapSystemToUri = function(serviceUri, sapSystem) {
        if(sap.ushell && sap.ushell.Container && sap.ushell.Container.getService) {
            var urlParsingService = sap.ushell.Container.getService("URLParsing");
            serviceUri = urlParsingService.addSystemToServiceUrl(serviceUri, sapSystem);
        }
        return serviceUri;
    };
    return  {
        getConfigurationTree : function(evaluationId, sCallback, fCallback) {
            this.loadConfiguration({
                evaluationId : evaluationId,
                cache : true,
                success : function(batchResponse) {
                    var Configuration = this.parse(evaluationId, batchResponse);
                    sCallback.call(null, ConfigurationTree.apply(Configuration,["Evaluation"]));
                },
                error : function(errorMessage) {
                    jQuery.sap.log.error("Error Fetching Drilldown Configuration")
                },
                context : this
            });
        },
        parse : function(evaluationId, batchResponse) {
            return new Configuration(evaluationId, batchResponse);
        },
        getConfigurationFromCache : function(evalId) {
        	return _cache[evalId];
        },
        loadConfiguration : function(oParam) {
            var evaluationId = oParam.evaluationId;
            var cache = !!oParam.cache;
            if(_cache[evaluationId] && cache) {
                oParam.success.call(oParam.context || null, _cache[evaluationId]);
            } else {
                var oDataModel = null;
                var serviceUri = "/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata";
                serviceUri = _appendSapSystemToUri(serviceUri, oParam.sapSystem);
                if(sap.suite.smartbusiness.odata) {
                    oDataModel = sap.suite.smartbusiness.odata.getModelByServiceUri(serviceUri);
                } else {
                    oDataModel = new sap.ui.model.odata.ODataModel(serviceUri, true);
                }
                oDataModel.setTokenHandlingEnabled(false);
                var masterUri = "/DDA_MASTER?$filter="+_encodeUrl("EVALUATION_ID eq '"+evaluationId+"'")+"&$orderby=CONFIG_ORDER";
                var configUri = "/DDA_CONFIG?$filter="+_encodeUrl("EVALUATION_ID eq '"+evaluationId+"'");
                var headerUri = "/DDA_HEADER?$filter="+_encodeUrl("EVALUATION_ID eq '"+evaluationId+"'")+"&$orderby=VISUALIZATION_ORDER";
                var filtersUri = "/DDA_FILTERS?$filter="+_encodeUrl("EVALUATION_ID eq '"+evaluationId+"'");
                var columnsUri = "/DDA_COLUMNS?$filter="+_encodeUrl("EVALUATION_ID eq '"+evaluationId+"'")+"&$orderby=COLUMNS_ORDER";
                var chartUri = "/DDA_CHART?$filter="+_encodeUrl("EVALUATION_ID eq '"+evaluationId+"'");
                var request1 = oDataModel.createBatchOperation(masterUri,"GET");
                var request2 = oDataModel.createBatchOperation(configUri,"GET");
                var request3 = oDataModel.createBatchOperation(headerUri,"GET");
                var request4 = oDataModel.createBatchOperation(filtersUri,"GET");
                var request5 = oDataModel.createBatchOperation(columnsUri,"GET");
                var request6 = oDataModel.createBatchOperation(chartUri,"GET");
                oDataModel.addBatchReadOperations([request1, request2, request3, request4, request5, request6]);
                var oDataCallReference = oDataModel.submitBatch(function(data, response) {
                    var batchResponse = data.__batchResponses;
                    _cache[evaluationId] = batchResponse;
                    oParam.success.call(oParam.context || null, batchResponse);
                    //oParam.success.call(null,A[0].data.results,A[1].data.results,A[2].data.results,A[3].data.results,A[4].data.results,A[5].data.results,A[6].data.results);
                }, function(errorObject){
                    jQuery.sap.log.error("Failed to fetch DDA Configuration");
                    if(oParam.error) {
                        oParam.error.call(oParam.context || null, errorObject);
                    }
                }, true);
                return oDataCallReference
            }
        },
        setEvaluationsCache : function(oParam, callback) {
            var that = this;
            if(!oParam.evalIdArray) {
                throw new Error("Evaluation Id Not Found")
            }
            var cache_key = getCacheKey(oParam);
            var model =null;
            var urlParsingService = sap.ushell.Container.getService("URLParsing");
            var serviceUri = urlParsingService.addSystemToServiceUrl("/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata", oParam.sapSystem);
            if(sap.suite.smartbusiness.odata) {
                model = sap.suite.smartbusiness.odata.getModelByServiceUri(serviceUri);
            } else {
                model = new sap.ui.model.odata.ODataModel(serviceUri, true);
            }
            var filterValue = ""
                oParam.evalIdArray.forEach(function(currentEvaluationId) {
                    var cache_key = currentEvaluationId;
                    var evaluationObject = sap.suite.smartbusiness.cache.getEvaluationById(cache_key);
                    if(!evaluationObject) 
                        filterValue += "ID eq '#EVALUATION_ID' or ".replace("#EVALUATION_ID",cache_key);
                });
            if(filterValue){
                filterValue = filterValue.slice(0,-4);
                var oDataParamObject = {};
                oDataParamObject["$filter"] = filterValue;
                oDataParamObject["$orderby"] = "ID,NAME";
                var callRef = model.read("/EVALUATIONS_CORE", null, oDataParamObject, true, function(data) {
                    if(data.results && data.results.length) {
                        var evalList = formatEvaluation(data);
                        for(var i=0; i<evalList.length; i++)                            
                            sap.suite.smartbusiness.cache.setEvaluationById(evalList[i].ID, evalList[i]);
                        oParam.success.call(oParam.context || null);
                    } else {
                        jQuery.sap.log.error("Empty Evaluation returned");
                        oParam.success.call(oParam.context || null);
                    }
                }, function(){
                    jQuery.sap.log.error("Error fetching Evaluations");
                    oParam.success.call(oParam.context || null);
                });
                return callRef;
            }
            else{
                oParam.success.call(oParam.context || null);
                return null;
            }
        },       
        getEvaluationById : function(oParam) {
            if(!oParam.id) {
                throw new Error("Evaluation Id Not Found")
            }
            var cache_key = getCacheKey(oParam);
            if(oParam.cache) {
                var evaluationObject = sap.suite.smartbusiness.cache.getEvaluationById(cache_key);
                if(evaluationObject) {
                    if(oParam.success) {
                        oParam.success.call(oParam.context || null, evaluationObject);
                        return null;
                    }
                }
            }
            var model =null;
            var urlParsingService = sap.ushell.Container.getService("URLParsing");
            var serviceUri = urlParsingService.addSystemToServiceUrl("/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata", oParam.sapSystem);
            if(sap.suite.smartbusiness.odata) {
                model = sap.suite.smartbusiness.odata.getModelByServiceUri(serviceUri);
            } else {
                model = new sap.ui.model.odata.ODataModel(serviceUri, true);
            }
            var filterValue = "ID eq '#EVALUATION_ID'".replace("#EVALUATION_ID",oParam.id);
            var evalData = null;
            var oDataParamObject = {};
            oDataParamObject["$filter"] = filterValue;
            var expandParams = "";
            if(oParam.filters) {
                expandParams += "FILTERS,";
            }
            if(oParam.thresholds) {
                expandParams += "VALUES,";
            }
            if(expandParams) {
                oDataParamObject["$expand"] = expandParams.substring(0,expandParams.length-1);
            }
            var callRef = model.read("/EVALUATIONS", null, oDataParamObject, true, function(data) {
                if(data.results && data.results.length) {
                    evalData = data.results[0];
                    sap.suite.smartbusiness.cache.setEvaluationById(cache_key, evalData);
                    oParam.success.call(oParam.context || null, evalData);
                } else {
                    oParam.error.call(oParam.context || null, "Empty Results with EvaluationID : "+oParam.id);
                }
            }, function(){
                jQuery.sap.log.error("Error fetching Evaluation : ",oParam.id);
                if(oParam.error) {
                    oParam.error.apply(oParam.context || null, arguments);
                }
            });
            return callRef;
        }
    };
})(); 
}; // end of sap/suite/ui/smartbusiness/drilldown/lib/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.lib.CustomTable') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.drilldown.lib.CustomTable");
sap.m.Table.extend("sap.suite.ui.smartbusiness.drilldown.lib.CustomTable", {
       metadata : {
              properties : {
                     actionItems : {
                            type : "any", multiple : true
                     }
              }
       },
       renderer  : {}
});

sap.suite.ui.smartbusiness.drilldown.lib.CustomTable.prototype.init = function() {
       sap.m.Table.prototype.init.apply(this);
       this._selectedContext = [];
       var oCustomHeader = new sap.m.Bar({
           contentMiddle:[ new sap.m.Label({
               text:"{i18n>TABLE_POPOVER_HEADING}"
           })],
           contentRight:(jQuery.device.is.phone) ? [] :
               [new sap.m.Button({
                   icon:"sap-icon://decline",
                   width : "2.375rem",
                   press:jQuery.proxy(this._closePopover, this)
               })]
       });
       this._popOver = new sap.m.ResponsivePopover({
           modal:false,
           enableScrolling:true,
           verticalScrolling:true,
           horizontalScrolling:false,
           placement:sap.m.PlacementType.Auto,
           contentWidth:"18rem",
           customHeader:oCustomHeader
       });
    var oStaticArea = sap.ui.getCore().getUIArea(sap.ui.getCore().getStaticAreaRef());
    oStaticArea.addContent(this._popOver, true);
};

sap.suite.ui.smartbusiness.drilldown.lib.CustomTable.prototype._closePopover = function() {
       if(this._popOver.isOpen()) {
              this._popOver.close();
       }
};
sap.suite.ui.smartbusiness.drilldown.lib.CustomTable.prototype.setPopoverFooter = function(oContent) {
    this._popOver.removeAllContent();
    this._popOver.addContent(oContent);
};
sap.suite.ui.smartbusiness.drilldown.lib.CustomTable.prototype.onBeforeRendering = function() {
       this._popOver.getCustomHeader().getContentMiddle()[0].setText(this.getModel("i18n").getProperty("TABLE_POPOVER_HEADING"));
       this.attachSelectionChange(function(oEvent) {
    	   	  var a = oEvent.getParameters().listItems[0];
    	   	  this.popoverOpenAt = a;
              var selectedItems=[];
              var items = this.getSelectedItems();
              var columns = this.getColumns();
              if(items.length) {
                     var item = items[0];
                     var bindingData = item.getBindingContext().getObject();
                     var obj=  {};
                     for(var each in bindingData) {
                         obj[each] = bindingData[each];
                     }
                     selectedItems.push(obj);
                     this.setSelectedContext(selectedItems);
                     if(true || this._notEmpty()) {
                         this._popOver.openBy(a.getCells()[parseInt(a.getCells().length/2) || 0],false);
                     }
              } else {
                 this._closePopover();
              }
       });
};
sap.suite.ui.smartbusiness.drilldown.lib.CustomTable.prototype._notEmpty = function() {
    var content = this._popOver.getContent()
    var notEmpty = false;
    if(content && content.length > 0) {
        var vBox = content[0];
        var listItems = vBox.getItems();
        listItems.forEach(function(list){
            if(list.getItems().length > 0) {
                notEmpty = true;
                return false;
            }
        });
    } 
    return notEmpty;
};
sap.suite.ui.smartbusiness.drilldown.lib.CustomTable.prototype.setSelectedContext = function(aSelected) {
       this._selectedContext = aSelected;
};
sap.suite.ui.smartbusiness.drilldown.lib.CustomTable.prototype.getSelectedContext = function(aSelected) {
       return this._selectedContext;
};
}; // end of sap/suite/ui/smartbusiness/drilldown/lib/CustomTable.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.lib.Hash') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.drilldown.lib.Hash");
sap.suite = sap.suite || {};
sap.suite.smartbusiness = sap.suite.smartbusiness || {};
sap.suite.smartbusiness.url = sap.suite.smartbusiness.url || {};
sap.suite.smartbusiness.url.hash = (function() {
	var oldHash = null;
	var newHash = null;
	var semanticObject=null,action=null,startupParams=null,applicationParams=null;
	var HASH=null;
	var delimiter="|^",escapedDelimiter=/\|\^/g;
	function reset() {
		semanticObject = null,action=null,startupParams=null,applicationParams=null;
		HASH = null;
	}
	function getApplicationParams(paramsStr) {
		var obj= {};
		if(paramsStr) {
			var slashSplits = paramsStr.split("/");
			for(var i = 1;i < slashSplits.length;i++) {
				var each = slashSplits[i];
				var keyValue = each.split("=");
				if(obj[keyValue[0]]) {
				} else {
					obj[keyValue[0]] = [];
				}
				if(keyValue[1]) {
					var values = decodeURIComponent(keyValue[1]).split(",");
					var arrays = obj[keyValue[0]];
					for(var j=0;j<values.length;j++) {
						if(arrays.indexOf(values[j]) == -1) {
							values[j]=values[j].replace(escapedDelimiter,",");
							arrays.push(values[j]);
						}
					}
				}
			}
		}
		return obj;
	}
	function getStartupParams(paramsStr) {
		var obj= {};
		if(paramsStr) {
			var splits = paramsStr.split("&");
			for(var i = 0;i < splits.length;i++) {
				var each = splits[i];
				var keyValue = each.split("=");
				if(obj[keyValue[0]]) {
				} else {
					obj[keyValue[0]] = [];
				}
				var arrays = obj[keyValue[0]];
				if(arrays.indexOf(keyValue[1])==-1) {
					arrays.push(keyValue[1]);
				}
			}
		}
		return obj;
	}
	function parseHash(newHash) {
		newHash = newHash || window.location.hash;
		if(newHash) {
			var regex = /^(?:#|)([\S\s]*?)(&\/[\S\s]*)?$/;
			var parts = regex.exec(newHash);
			var part1 = parts[1];
			var part2  = parts[2];
			var regex2 = /^([A-Za-z0-9_]+)-([A-Za-z0-9_]+)[\?]?(.*)/;
			if(part1) {
				var semanticParts = regex2.exec(part1);
				semanticObject = semanticParts[1];
				action = semanticParts[2];
				startupParams = getStartupParams(semanticParts[3]);
			}
			applicationParams = getApplicationParams(part2);
		}
	}
	function __checkAndUpdateHash() {

	};
	if(window.addEventListener) {
//		window.addEventListener("hashchange", function(oEvent) {
//			oldHash = "#"+oEvent.oldURL.split("#")[1];
//			newHash = window.location.hash;
//			reset();
//			parseHash(newHash);
//		});
	}
	function prepareHash() {
		var str = "";
		if(semanticObject) {
			str+=semanticObject;
		}
		if(action && semanticObject) {
			str+="-"+action;
		}
		if(startupParams) {
			str+="?";
			for(var each in startupParams) {
				var params = startupParams[each];
				for(var i=0;i<params.length;i++) {
					str+=each+"="+params[i]+"&";
				}
			}
			str=str.substring(0,str.length-1);
		}
		if(applicationParams) {
			var params = "";
			for(var each in applicationParams) {
				if(applicationParams[each] instanceof Array){
					applicationParams[each].forEach(function(s,i,a){
						a[i]=(s+"").replace(/,/g,delimiter);
					});
				}
				params+=each+"="+encodeURIComponent(applicationParams[each])+"/";
			}
			if(params.length) {
				params = params.substring(0,params.length-1);
				params = "&/"+params;
			}
			str+=params;
		}
		return str;
	};
	function getHash() {
	    return prepareHash();
	};
	function updateHash() {
		var str = prepareHash();
		window.location.hash = str;
		HASH = str;
		parseHash();
	}
	parseHash();
	function updateSemanticObject(sObject, bUpdateUrl) {
		if(typeof bUpdateUrl=='undefined') {
			bUpdateUrl = true;
		}
		bUpdateUrl = !!bUpdateUrl;
		semanticObject = sObject;
		if(bUpdateUrl) {
			updateHash();
		}
	}
	function updateAction(actionStr, bUpdateUrl) {
		if(typeof bUpdateUrl=='undefined') {
			bUpdateUrl = true;
		}
		bUpdateUrl = !!bUpdateUrl;
		action = actionStr;
		if(bUpdateUrl) {
			updateHash();
		}
	}
	function setStartupParameters(params, bUpdateUrl) {
		if(typeof bUpdateUrl=='undefined') {
			bUpdateUrl = true;
		}
		bUpdateUrl = !!bUpdateUrl;
		startupParams = params;
		if(bUpdateUrl) {
			updateHash();
		}
	}
	function removeStartupParameter(paramName, bUpdateUrl) {
		if(typeof bUpdateUrl=='undefined') {
			bUpdateUrl = true;
		}
		if(startupParams && startupParams[paramName]) {
			startupParams[paramName] = null;
			delete startupParams[paramName];
		}
		if(bUpdateUrl) {
			updateHash();
		}
	}
	function setApplicationParameters(params, bUpdateUrl) {
		if(typeof bUpdateUrl=='undefined') {
			bUpdateUrl = true;
		}
		bUpdateUrl = !!bUpdateUrl;
		applicationParams = params;
		if(bUpdateUrl) {
			updateHash();
		}
	}
	function removeApplicationParameter(paramName, bUpdateUrl) {
		if(typeof bUpdateUrl=='undefined') {
			bUpdateUrl = true;
		}
		if(applicationParams && applicationParams[paramName]) {
			applicationParams[paramName] = null;
			delete applicationParams[paramName];
		}
		if(bUpdateUrl) {
			updateHash();
		}
	}
	function updateStartupParameters(params, bUpdateUrl) {
		if(typeof bUpdateUrl=='undefined') {
			bUpdateUrl = true;
		}
		bUpdateUrl = !!bUpdateUrl;
		if(!startupParams) {
			startupParams= params;
		}  else {
			for(var each in params) {
				var values = params[each];
				if(!startupParams[each]) {
					startupParams[each] = [];
				}
				var arrays = startupParams[each];
				for(var j=0;j<values.length;j++) {
					if(arrays.indexOf(values[j]+"")==-1) {
						arrays.push(values[j]+"");
					}
				}
			}
		}
		if(bUpdateUrl) {
			updateHash();
		}
	}
	function updateApplicationParameters(params, bUpdateUrl) {
		if(typeof bUpdateUrl=='undefined') {
			bUpdateUrl = true;
		}
		bUpdateUrl = !!bUpdateUrl;
		if(!applicationParams) {
			applicationParams= params;
		}  else {
			for(var each in params) {
				var values = params[each];
				if(!jQuery.isArray(values)) {
					values = [values];
				}
				if(!applicationParams[each]) {
					applicationParams[each] = [];
				}
				var arrays = applicationParams[each];
				for(var j=0;j<values.length;j++) {
					if(arrays.indexOf(values[j]+"")==-1) {
						arrays.push(values[j]+"");
					}
				}
			}
		}
		if(bUpdateUrl) {
			updateHash();
		}
	}
	return {
		getSemanticObject : function() {
            reset();
            parseHash(window.location.hash);
			return semanticObject;
		},
		getAction : function() {
            reset();
            parseHash(window.location.hash);
			return action;
		},
		getStartupParameters : function() {
            reset();
            parseHash(window.location.hash);
			return startupParams;
		},
		getApplicationParameters : function(excludeParamsArray /*Array*/) {
			reset();
			parseHash(window.location.hash);
			if(excludeParamsArray && excludeParamsArray.length) {
			    excludeParamsArray.forEach(function(excludeParam){
			        delete applicationParams[excludeParam];
			    });
			}
			return applicationParams;
			
		},
		setSemanticObject : function(sObject, bUpdateUrl) {
			updateSemanticObject(sObject, bUpdateUrl);
			return this;
		},
		setAction : function(action, bUpdateUrl) {
			updateAction(action, bUpdateUrl);
			return this;
		},
		setStartupParameters : function(params, bUpdateUrl) {
			setStartupParameters(params, bUpdateUrl);
			return this;
		},
		updateStartupParameters : function(params, bUpdateUrl) {
			updateStartupParameters(params, bUpdateUrl);
			return this;
		},
		removeStartupParameter : function(paramName, bUpdateUrl) {
			removeStartupParameter(paramName, bUpdateUrl);
			return this;
		},
		setApplicationParameters : function(params, bUpdateUrl) {
			setApplicationParameters(params, bUpdateUrl);
			return this;
		},
		updateApplicationParameters : function(params, bUpdateUrl) {
			updateApplicationParameters(params, bUpdateUrl);
			return this;
		},
		removeApplicationParameter : function(param, bUpdateUrl) {
			removeApplicationParameter(param, bUpdateUrl);
			return this;
		},
		getUrlParameters : function() {
			return jQuery.sap.getUriParameters();
		},
		updateHash : function() {
			updateHash();
		},
		getHash : function() {
			return getHash();
		}
	};
})();
}; // end of sap/suite/ui/smartbusiness/drilldown/lib/Hash.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.lib.MiniChartManager') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.drilldown.lib.MiniChartManager");
sap.suite = sap.suite || {};
sap.suite.smartbusiness = sap.suite.smartbusiness || {};
sap.suite.smartbusiness.miniChartManager = (function() {
    "use strict";
    var headerMiniCharts = [];
    var VISUALIZATION_TYPE = {
            NT: "Numeric",
            CT: "Comparison",
            AT: "Bullet",
            TT : "AreaChart",
            CM : "MeasureComparison"
    };
    var VisualizationTypeWeight = {
            "NT" : 4,
            "AT" : 3,
            "CT" : 2,
            "TT" : 1,
            "CM" : 0
    };
    var urlParsingService = sap.ushell.Container.getService("URLParsing");
    /*
     * utility function which returns relevant 
     */
    var getRelevantFilter = function(oParam, obj) {
        var evalId = "";
        if(obj.isAssociated())
            evalId = obj.getReferenceEvaluationId();
        else
            evalId = obj.getReferenceEvaluationId();

        var retFilter = [];
		var oDataUri = "";
		if(sap.suite.smartbusiness.cache.getEvaluationById(evalId))
			oDataUri = sap.suite.smartbusiness.cache.getEvaluationById(evalId).ODATA_URL;
		if(oDataUri){
			var sUri = urlParsingService.addSystemToServiceUrl(
					sap.suite.smartbusiness.cache.getEvaluationById(evalId).ODATA_URL,
					oParam.sapSystem);
			var entitySet = sap.suite.smartbusiness.cache.getEvaluationById(evalId).ODATA_ENTITYSET;
			var allDimensions = sap.suite.smartbusiness.odata.getAllDimensions(sUri,entitySet);

			for(var i = 0; i < oParam.urlFilters.length; i++){
				if(allDimensions.indexOf(oParam.urlFilters[i].NAME) != -1)
					retFilter.push(oParam.urlFilters[i]);
			}
		}
		return retFilter;
    };

    return {
        renderHeaders : function(oParam){
            if(oParam.allTiles.length){
                var headers = oParam.allTiles;
                headerMiniCharts = [];
                headers.forEach(function(obj){
                    var tileType = obj.getVisualizationType();
                    if(VISUALIZATION_TYPE[tileType]) {
                        var tileControlName = VISUALIZATION_TYPE[tileType];
                        jQuery.sap.require("sap.suite.ui.smartbusiness.tiles."+tileControlName);
                        if(sap.suite.ui.smartbusiness.tiles[tileControlName]) {
                            var filters = getRelevantFilter(oParam,obj);
                            var tile = new sap.suite.ui.smartbusiness.tiles[tileControlName]({
                                dimension : obj.getDimension(),
                                evaluationId : obj.getEvaluationId(),
                                associationEvaluationId : obj.getReferenceEvaluationId(),
                                sapSystem : oParam.sapSystem,
                                additionalFilters : filters,
                                tileConfiguration : obj.getTileConfiguration()
                            }).addStyleClass("drilldownKpiTiles");
                            headerMiniCharts.push(tile);
                            var headerItem = new sap.suite.ui.commons.HeaderCellItem();
                            var headerCell = new sap.suite.ui.commons.HeaderCell();
                            oParam.headerContainer.addItem(tile);
                            if(oParam.urlFilters.length){
                                if(filters && filters.length){}
                                else{
                                    tile.setVisible(false);
                                    tile.setClick(false);
                                }
                            }
                        } else {
                            jQuery.sap.log.error("Ignoring the tile "+tileControlName +" : Not Implemented Yet");
                        }
                    } else {
                        jQuery.sap.log.error("No Tile Mapping  for Visualisation Type : "+tileType);
                    }
                });
            }
        },

        hashChangeListner : function(oParam){
            if(oParam.firstTimeFlag){
                var affectedTiles = [];
                var headers = oParam.allTiles;
                for(var i = 0; i <headers.length; i++){
                    var oDataModel = null;
                    var obj = headers[i];
                    var curTile = headerMiniCharts[i];
                    curTile.abortODataCalls();
                    var filter = getRelevantFilter(oParam, obj);
                    if(oParam.urlFilters.length){
                        if(filter && filter.length){
                            curTile.$().css("opacity","1");
                            //curTile.setVisible(true);
                            curTile.setAdditionalFilters(filter);   
                            curTile.$().off("click");   //restore tilePresssed event(remove override click)
                        }
                        else {
                            //curTile.setVisible(false);
                            curTile.$().css("opacity","0.2");
                            curTile.$().click(function(){
                                return false;   //disable tile click event
                            });
                        }
                    }
                    else{
                        //curTile.setVisible(true);
                        curTile.$().css("opacity","1");
                        curTile.setAdditionalFilters(filter);
                        curTile.$().off("click");
                    }
                }
            }
        },
    }
})();
}; // end of sap/suite/ui/smartbusiness/drilldown/lib/MiniChartManager.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.lib.Navigation') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.drilldown.lib.Navigation");

sap.suite = sap.suite || {};
sap.suite.smartbusiness = sap.suite.smartbusiness || {};
sap.suite.smartbusiness.navigation = (function() {
	var allLinks={};
	var _cache={};
	function _getUriForFetchingLinks(so, arr, businessParamMap/*Key value Pair*/){
		var strSemanticObjectLink = "/GetLinksForSemanticObject?semanticObject='"+so+"'";
		var strBusinessParams="";
		if(businessParamMap && Object.keys(businessParamMap).length) {
		    var strBusinessParams = "";
		    for(var key in businessParamMap) {
		        strBusinessParams += key+"="+businessParamMap[key]+"&";
		    }
		    strBusinessParams = encodeURIComponent(strBusinessParams.substring(0, strBusinessParams.length-1));
		    strBusinessParams = "&businessParams='" + strBusinessParams + "'";
		} else if(arr && arr.length) {
            for(var i=0;i<arr.length;i++){
                strBusinessParams += arr[i]+"=1&";
            }   
            strBusinessParams=encodeURIComponent(strBusinessParams.replace(/&$/g,""));
            strBusinessParams="&businessParams='"+strBusinessParams+"'";
		}
		return strSemanticObjectLink + strBusinessParams;
	}
    return  {
        /**
         * oParam = {
         *      semanticObject : 'so',
         *      success : function(){} //callback 
         *      error : function() {} //callback
         *      context : oContext // value of 'this' in callback functions
         * }
         */
        getLinksBySemanticObject : function(oParam) {
        	var that=this;
            var oDataModel = new sap.ui.model.odata.ODataModel("/sap/opu/odata/UI2/INTEROP",true);
            var serviceUri = _getUriForFetchingLinks(oParam.semanticObject,oParam.dimensions, oParam.businessParam);
            var callReference = oDataModel.read(serviceUri,null, null, true, function(data) {
            	oParam.success.call(oParam.context || null, data.results);
            	/**
            	 * Array of 
            	 * {
            	 *     id   : so-action~asd
            	 *     text : '',
            	 *     applicationAlias : action,
            	 *     applicationType : "URL"
            	 * }
            	 */
            }, function() {
                jQuery.sap.log.error("Error fetching getLinksBySemanticObject : "+oParam.semanticObject);
                oParam.success.call(oParam.context || null, []);
            }, !!oParam.async);
            return callReference ;
        },
    	getLinksByContext:function(oParam) {
    	    var aODataCallReference = [];
    	    if(oParam.viewId && _cache[oParam.viewId]) {
    			oParam.success.call(oParam.context || null,_cache[oParam.viewId]);
    		} else {	
        		var soArray=[oParam.semanticObject],links=[];
        		oParam.dimensions=oParam.dimensions||[];
        		soArray=soArray.concat(oParam.dimensions);
        		var semaphore=soArray.length;
        		if(semaphore){
        			for(var i=0;i<soArray.length;i++){
        				var callReference = this.getLinksBySemanticObject({
        				    async : true,
        				    semanticObject : soArray[i],
        				    dimensions : oParam.dimensions,
        				    success : function(data) {
            					links = links.concat(data);
            					if(--semaphore == 0){
            						_cache[oParam.viewId]=links;
            						oParam.success.call(oParam.context || null, links);
            					}
        				    },error:function() {
        				        if(--semaphore == 0){
        						_cache[oParam.viewId] = links;
        						oParam.success.call(oParam.context || null, links);
        				        }
        				    }
        				});
        				aODataCallReference.push(callReference);
        				
        			}
        		}else{
        			oParam.success.call(oParam.context || null,[]);
        		}
    		}
    	    return aODataCallReference;
    	}
    };
})();



}; // end of sap/suite/ui/smartbusiness/drilldown/lib/Navigation.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.lib.Performance') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.drilldown.lib.Performance");
sap.suite.ui.smartbusiness.drilldown.lib.Performance = function(oParam) {
    this.oParam = oParam;
    this._init();
};
sap.suite.ui.smartbusiness.drilldown.lib.Performance.prototype = {
        _processData : function(junkData) {
            var data = [];
            for(var each in junkData) {
                var oData = junkData[each];
                data.push({
                    "TimeTaken" : (oData.time)/1000,
                    "Call" : oData.title
                });
            }
            return data;
        },
        _init : function() {
            var that = this;
            this._dataSet = new sap.viz.ui5.data.FlattenedDataset({
                data : {
                    path : "/"
                }
            });
            var dimensions = ["Call"];
            var measures = ["TimeTaken"];
            dimensions.forEach(function(sDimension) {
                var dimDefinition = new sap.viz.ui5.data.DimensionDefinition({
                    name : sDimension,
                    axis : 1,
                    value : {
                        path : sDimension
                    }
                });
                this._dataSet.addDimension(dimDefinition);
            }, this);
            measures.forEach(function(sMeasure) {
                var measureDefinition = new sap.viz.ui5.data.MeasureDefinition({
                    name : sMeasure,
                    value : {
                        path : sMeasure
                    }
                });
                this._dataSet.addMeasure(measureDefinition);
            }, this);
            this._oChart = new sap.viz.ui5.Bar({
                dataset : this._dataSet,
                width : "750px",
                height : "380px"
            });
            this._oChart.setModel(new sap.ui.model.json.JSONModel());
            this._oDialog = new sap.m.Dialog({
                title : "Performance Check",
                contentWidth : "800px",
                contentHeight : "400px",
                endButton : new sap.m.Button({
                    text : "Close",
                    press : function() {
                        that._oDialog.close();
                        
                    }
                })
            });
            this._oDialog.addContent(this._oChart);
        },
        start : function(data, bCompactMode) {
            var processedData = this._processData(data);
            this._oChart.getModel().setData(processedData);
            var that = this;
            if(!this._oDialog.isOpen()) {
                if(bCompactMode) {
                    this._oDialog.addStyleClass("sapUiSizeCompact");
                } else {
                    this._oDialog.removeStyleClass("sapUiSizeCompact"); 
                }
                this._oDialog.open();
                setTimeout(function() {
                    that._oChart.rerender();
                },200);
            }
        }
};
}; // end of sap/suite/ui/smartbusiness/drilldown/lib/Performance.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.view.Drilldown.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.drilldown.view.Drilldown.controller');
jQuery.sap.require('sap.ca.scfld.md.controller.BaseFullscreenController'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained

sap.ca.scfld.md.controller.BaseFullscreenController.extend("sap.suite.ui.smartbusiness.drilldown.view.Drilldown", {
    _getEvaluationId : function() {
        try {
            var startupParameters = this.oConnectionManager.getComponent().oComponentData.startupParameters;
            return startupParameters["evaluationId"][0];
        }catch(e) {
            return sap.suite.smartbusiness.url.hash.getStartupParameters().evaluationId[0];
        }
    },
    _getDataFromUrl : function() {
        try {
            var startupParameters = this.oConnectionManager.getComponent().oComponentData.startupParameters;
            this.TILE_TYPE='';
            this.DIMENSION='';
            if(startupParameters["tileType"]) {
                this.TILE_TYPE = startupParameters["tileType"][0];
            }
            if(startupParameters["dimension"]) {
                this.DIMENSION = startupParameters["dimension"][0];
            }
            if(startupParameters["sap-system"]) {
                this.SAP_SYSTEM = startupParameters["sap-system"][0];
            }
            if(startupParameters["chipId"]) {
                this.CHIP_ID = startupParameters["chipId"][0];
            }
        }catch(e) {
            var sParams = sap.suite.smartbusiness.url.hash.getStartupParameters();
            if(sParams) {
                if(sParams.tileType) {
                    this.TILE_TYPE = sParams.tileType[0];
                }
                if(sParams.dimension) {
                    this.DIMENSION = sParams.dimension[0];
                }
                if(sParams["sap-system"]) {
                    this.SAP_SYSTEM = sParams["sap-system"][0];
                }
                if(sParams["chipId"]) {
                    this.CHIP_ID = sParams["chipId"][0];
                }
            }
        }
    },
    fetchAllEvaluations : function(oParam){
        var headerEvalArray = [this._getEvaluationId()];
        var oHeaders = this.CONFIGURATION.getHeaders();
        oHeaders.forEach(function(curHeader) {
            if(curHeader.isAssociated()) {
                if(headerEvalArray.indexOf(curHeader.getReferenceEvaluationId()) == -1) {
                    headerEvalArray.push(curHeader.getReferenceEvaluationId());
                }
                if(headerEvalArray.indexOf(curHeader.getEvaluationId()) == -1) {
                    headerEvalArray.push(curHeader.getEvaluationId());
                }
            }
        });
        this._bundled_evaluations_call_ref = sap.suite.smartbusiness.drilldown.setEvaluationsCache({
            evalIdArray : headerEvalArray,
            sapSystem : this.SAP_SYSTEM,
            success: oParam.success,
            context: oParam.context
        });
    }, 
    onAfterRendering : function() {
        var EVAL_ID = this._getEvaluationId();
        this._EVALUATION_ID = EVAL_ID;
        this.firstTimeFlag = false;
        this._getDataFromUrl();
        if(!this._proxyHashChangeListener) {
            this._proxyHashChangeListener = jQuery.proxy(this.hashChangeListener, this);
            this._attachHashChangeEvent();
        }
        this._busyDialog.open();
        var startTimeConfigFetch = new Date().getTime();
        this.DDA_CONFIG_ODATA_CALL_REF = sap.suite.smartbusiness.drilldown.loadConfiguration({
           evaluationId : EVAL_ID,
           cache : true,
           success : function(batchResponse) {
               var endTimeConfigFetch = new Date().getTime();
               this._requestTimeLog["DDA_CONFIG_FETCH"] = {
                       title : "Configuration",
                       time : endTimeConfigFetch - startTimeConfigFetch
               };
               this.CONFIGURATION = sap.suite.smartbusiness.drilldown.parse(EVAL_ID, batchResponse);
               var that=this;
               if( this.CONFIGURATION.getAllViews().length==0){
            	   jQuery.sap.log.error("drilldown not configured");
            	   var oI18nModel = that.getView().getModel("i18n");
            	   sap.m.MessageBox.alert(oI18nModel.getResourceBundle().getText("DDA_NOT_CONFIGURED"), function () {
            		   window.location.hash = "";
            		   that._busyDialog.close();
            	   });
            	   return;
               }

               var startTimeBundledEvaluationFetch = new Date().getTime();
               this.fetchAllEvaluations({
                   success: function() {
                       var endTimeBundledEvaluationFetch = new Date().getTime();
                       this._requestTimeLog["BUNDLED_EVALUATIONS_FETCH"] = {
                               title : "Evaluations",
                               time : endTimeBundledEvaluationFetch - startTimeBundledEvaluationFetch
                       };
                       this.EVALUATION_ODATA_CALL_REF = sap.suite.smartbusiness.drilldown.getEvaluationById({
                           id : EVAL_ID,
                           cache : true,
                           filters : true,
                           thresholds : true,
                           success : function(evalData) {
                               this._busyDialog.close();
                               this.EVALUATION = sap.suite.smartbusiness.kpi.parseEvaluation(evalData);
                               this._initialize();
                           },
                           error : function() {
                               this._busyDialog.close();
                               throw new Error("Evaluation Details Not Found with ID : "+EVAL_ID);
                           },
                           context : this,
                           sapSystem : this.SAP_SYSTEM
                       });
                   },
                   context : this,
               });
           },
           error : function() {
               jQuery.sap.log.error("Drilldown Configuration Fetching Failed");
               this._busyDialog.close();
           },
           context : this,
           sapSystem : this.SAP_SYSTEM
        });
        
    },
    onInit : function() {
        // invalidating cache on page load
        sap.suite.smartbusiness.cache.invalidateKpiDetailsCache();
    	this._requestTimeLog = {};
        this._busyDialog = new sap.m.BusyDialog();
        sap.sb_drilldown_app = this;
        this.EVALUATION = null;
        this.CONFIGURATION = null;
        this.SELECTED_VIEW = null;
        this.POPOVER_VIEW_NAVIGATION_MODEL = new sap.ui.model.json.JSONModel({"VIEW_NAVIGATION":[]});
        this.POPOVER_EXTERNAL_APP_NAVIGATION_MODEL = new sap.ui.model.json.JSONModel({"APP_NAVIGATION":[]});
        this.SEMANTIC_OBJECT = sap.suite.smartbusiness.url.hash.getSemanticObject();
        this.ACTION = sap.suite.smartbusiness.url.hash.getAction();
        var locale = new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
        
        this.VALUE_FORMATTER = sap.ca.ui.model.format.NumberFormat.getInstance({
            style: "standard"
        },locale);
        this.urlParsingService = sap.ushell.Container.getService("URLParsing");
        this.addExportMethodToTable();
        this._hideOrShowFacetFilterIfRequired();//Show Facet Filter if some filters has been applied 
    },
    _hideOrShowFacetFilterIfRequired : function() {
    	/**
    	 * Show the Filters if View switched from Chart/Table Context
    	 */
        var filter = this.getUIComponents().getFilter();
        var filterObj = sap.suite.smartbusiness.url.hash.getApplicationParameters(["viewId"]);
        if(jQuery.isEmptyObject(filterObj) == false) {
        	filter.setVisible(true);
	    }
    },
    onBeforeRendering : function() {
    	
    },
    _initialize : function() {
    	this.setHeaderFooterOptions(this.getHeaderFooterOptions());
        //Set Window Page Title
        this._initExternalNavigationLinks();  
        var windowPageTitle = this.EVALUATION.getKpiName()+" - "+this.EVALUATION.getTitle();
        try {
            if(sap.ushell.services.AppConfiguration && sap.ushell.services.AppConfiguration.setWindowTitle){
                sap.ushell.services.AppConfiguration.setWindowTitle(windowPageTitle);
            }
        } catch(e){
            jQuery.sap.log.error("Error Setting Window Page Title : "+windowPageTitle)
        }
        /*Prepare OData MetaData like Label, Text Property, UnitProperty*/
        var mProperties = sap.suite.smartbusiness.odata.properties(this.urlParsingService.addSystemToServiceUrl(this.EVALUATION.getODataUrl(),this.SAP_SYSTEM),this.EVALUATION.getEntitySet());
        this.COLUMN_LABEL_MAPPING = mProperties.getLabelMappingObject();
        this.DIMENSION_TEXT_PROPERTY_MAPPING = mProperties.getTextPropertyMappingObject();
        this.MEASURE_UNIT_PROPERTY_MAPPING = mProperties.getUnitPropertyMappingObject();
        
        /**
         * Prepare Add To Home Dialog
         */
        this._initAddToHomeDialogBox();
        
        var viewListModel = new sap.ui.model.json.JSONModel();
        viewListModel.setData(this.CONFIGURATION.getAllViews());
        var UIComponents = this.getUIComponents();
        UIComponents.getChartToolbar().setModel(viewListModel,"VIEW_SWITCH");
        //model for chart
        this.chartModel = new sap.ui.model.json.JSONModel();
        var chartModelSize = 9999;
        this.chartModel.setSizeLimit(chartModelSize);
        UIComponents.getChartToolbar().setModel(this.chartModel);
        //model for aggregate Number, unit etc
        this.EvaluationHeaderModel = new sap.ui.model.json.JSONModel();
        UIComponents.getHeader().setModel(this.EvaluationHeaderModel);
        //model of title lable
        this.titleModel = new sap.ui.model.json.JSONModel();
        UIComponents.getPage().getCustomHeader().getContentMiddle()[0].setModel(this.titleModel);
        
        
        this.renderDrilldownHeader();
        //act according to hash
        this._initRequestTimeLogChart();
        this.hashChangeListener();
    },
    switchedToTableView : function() {
        if(this.getUIComponents().getChart()) {
            this.setChartSelectionContextObject(null);
        }
    },
    switchedToChartView : function() {
        this.getUIComponents().getTable().setSelectedContext(null);
    },
    renderDrilldownHeader : function() {
        var aFilters = this.CONFIGURATION.getFilters();
        this.renderFilters(aFilters);
        var aHeaders = this.CONFIGURATION.getHeaders();
        this.renderKpiHeaders(aHeaders);
        this.renderTitle();
        this.renderEvaluationHeader();
    },
    renderTitle: function() {
        var title_label = this.getUIComponents().getPage().getCustomHeader().getContentMiddle()[0];
        if(title_label) {
            title_label.setText(this.EVALUATION.getKpiName());
        }
    },
    renderFilters: function(filters) {
        var facetFilter = this.getUIComponents().getFilter();
        facetFilter.setEvaluationData(this.EVALUATION);
        facetFilter.setEvaluationId(this.EVALUATION.getId());
        facetFilter.setDimensions(filters);
        facetFilter.setSapSystem(this.SAP_SYSTEM);
    },
    renderKpiHeaders: function(headers) {
        var self = this;
        var header_container = this.getUIComponents().getTileContainer();
        header_container.removeAllItems();
        this.miniChartManager = sap.suite.smartbusiness.miniChartManager.renderHeaders({
            allTiles : headers,
            headerContainer : header_container,
            sapSystem : this.SAP_SYSTEM,
            urlFilters : this.getUrlFilters()
        });
    },
    renderView: function(currentView) {
        this.table = null;
        this.chart = null;
        this._addUIComponents(currentView); //based on configuration
        
        var chartColumns = currentView.getColumns()
        var chartConfig = currentView.getChartConfiguration();
        this.renderTable(chartColumns, chartConfig[0].getColorScheme());
        if(this.chart) {
            //first element passed since getChartConfiguration() returns an array
            this.renderChart(currentView, chartConfig[0], chartColumns);
        }
    },
    
    /**
     * @desc fetches Evaluation data and binds value to aggregate number
     * @param [filters] - null if only evaluation filters are to be considered
     */
    renderEvaluationHeader : function() {
        var objectHeader = this.getUIComponents().getHeader(), that = this;
        objectHeader.setTitle(this.EVALUATION.getTitle());
        if(this.EVALUATION.getDescription()) {
            objectHeader.removeAllAttributes();
            objectHeader.addAttribute(new sap.m.ObjectAttribute({
                text : this.EVALUATION.getDescription()
            }));
        }
        var kpiMeasure = this.EVALUATION.getKpiMeasureName();
        
        /* 
         * Just in case the odata service provides a formatted measure value
         *  as sap:text, use it. Else fallback to measure value 
         */
        var formatted_kpiMeasure = kpiMeasure;
        if(this.DIMENSION_TEXT_PROPERTY_MAPPING[kpiMeasure]) {
        	formatted_kpiMeasure = this.DIMENSION_TEXT_PROPERTY_MAPPING[kpiMeasure];
        }
        
        var kpiMeasureUnitProperty = this.MEASURE_UNIT_PROPERTY_MAPPING[kpiMeasure];
        
        /*
         * Bypass ca formatter when using formatted kpi measure value 
         * returned by odata source
         */
        objectHeader.bindProperty("number", "/data/" + formatted_kpiMeasure, 
        		formatted_kpiMeasure != kpiMeasure ? 
        				function(v){return v} : 
        				function(value) {
				            if(value) {
				                if(that.EVALUATION.getScaling() == -2) {
				                    return (that.VALUE_FORMATTER.format(value*100) + "%");
				                }
				                else {
				                    return that.VALUE_FORMATTER.format(value);
				                }
				            }
				            return value;
				        });
        if(kpiMeasureUnitProperty) {
            objectHeader.bindProperty("numberUnit", "/data/" + kpiMeasureUnitProperty);
        }
    },
    fetchKpiValue: function() {
        if(!this.CONFIGURATION.isAggregateValueEnabled()) {
            return;
        }
        var that = this;
        var oUriObject = sap.suite.smartbusiness.odata.getUri({
            serviceUri : this.urlParsingService.addSystemToServiceUrl(this.EVALUATION.getODataUrl(), this.SAP_SYSTEM),
            entitySet : this.EVALUATION.getEntitySet(),
            measure: this._getEvaluationThresholdMeasures(),
            filter : this.getAllFilters()
        });
        var startTimeFetchKpiValue = new Date().getTime();
        var evaluationId = this._getEvaluationId();
        this.FETCH_AGREGATION_VALUE_ODATA_CALL_REF_SUCCESS = function(data) {
            var endTimeFetchKpiValue = new Date().getTime();
            that._requestTimeLog["KPI_VALUE"] = {
                 title : "Kpi Value",
                 time : endTimeFetchKpiValue - startTimeFetchKpiValue
            };
            if(data && data.results.length) {
                that.EvaluationHeaderModel.setData({data:data.results[0]});
                sap.suite.smartbusiness.cache.setKpiDetailsById(evaluationId,data);
                // removing from current_calls 
                if(sap.suite.smartbusiness.cache.current_calls[evaluationId]) {
                    var x = sap.suite.smartbusiness.cache.current_calls[evaluationId];
                    delete sap.suite.smartbusiness.cache.current_calls[evaluationId];
                    x.resolve();
                }
            } else {
                jQuery.sap.log.error("Couldn't fetch Aggregate Value. Response was "+data+" for uri : "+oUriObject.uri);
                that.EvaluationHeaderModel.setData({data:{}});
            }
        };
        this.FETCH_AGREGATION_VALUE_ODATA_CALL_REF_FAIL = function(err) {
            jQuery.sap.log.error(err);
            that.EvaluationHeaderModel.setData({data:{}});
            if(sap.suite.smartbusiness.cache.current_calls[evaluationId]){
                sap.suite.smartbusiness.cache.current_calls[evaluationId].reject();
            }
        };
        var fromCache = sap.suite.smartbusiness.cache.getKpiDetailsById(evaluationId);
        if(fromCache) {
            this.FETCH_AGREGATION_VALUE_ODATA_CALL_REF_SUCCESS(fromCache);
        }
        //if the call is currently in progress
        else if(sap.suite.smartbusiness.cache.current_calls[evaluationId]){
            jQuery.when(sap.suite.smartbusiness.cache.current_calls[evaluationId]).then(function() {
                var data = sap.suite.smartbusiness.cache.getKpiDetailsById(evaluationId);
                that.FETCH_AGREGATION_VALUE_ODATA_CALL_REF_SUCCESS(data);
            },function(errorMessage){that.logError(errorMessage)});
        }
        else {
            sap.suite.smartbusiness.cache.current_calls[evaluationId] = jQuery.Deferred();
            this.FETCH_AGREGATION_VALUE_ODATA_CALL_REF = oUriObject.model.read(oUriObject.uri, null, null, true,this.FETCH_AGREGATION_VALUE_ODATA_CALL_REF_SUCCESS ,this.FETCH_AGREGATION_VALUE_ODATA_CALL_REF_FAIL);
        }
    },
    _addPopoverContent : function(oControl, bIsTable) {
        var listOfViews = new sap.m.List({
            visible : {
                path : "/VIEW_NAVIGATION",
                formatter : function(oArray) {
                    if(oArray && oArray.length >0) {
                        return true;
                    }
                    return false;
                }
            }
        });
        listOfViews.bindItems("/VIEW_NAVIGATION", new sap.m.StandardListItem({
            title : "{TITLE}",
            type : sap.m.ListType.Navigation,
            customData : new sap.ui.core.CustomData({
                key : "{ID}",
                value : "{ID}"
            }),
            press : jQuery.proxy(this._onViewSelection,this,{publishContext : true, isTable : !!bIsTable})
        }).setTooltip("{TITLE}"));
        var allViews = this._getListOfViewsForPopover(this.CONFIGURATION.getAllViews(), this.SELECTED_VIEW.getId()); 
        listOfViews.setModel(this.POPOVER_VIEW_NAVIGATION_MODEL);
        
        var listOfNavigations = new sap.m.List({
            /*
            visible : {
                path : "/APP_NAVIGATION",
                formatter : function(oArray) {
                    if(oArray && oArray.length >0) {
                        return true;
                    }
                    return false;
                }
            }*/
        });
        this._popoverNavigationListReferences.push(listOfNavigations);
        listOfNavigations.bindItems("/APP_NAVIGATION", new sap.m.StandardListItem({
            title : "{text}",
            type : sap.m.ListType.Navigation,
            customData : new sap.ui.core.CustomData({
                key : "{id}",
                value : "{applicationAlias}"
            }),
            press : jQuery.proxy(this._onAppSelection,this,{publishContext : true, isTable : !!bIsTable})
        }).setTooltip("{text}"));
        listOfNavigations.setModel(this.POPOVER_EXTERNAL_APP_NAVIGATION_MODEL);
        
        var popoverContent = new sap.m.VBox({
            items : [listOfViews, listOfNavigations],
            width : "99%"
        });
        oControl.setPopoverFooter(popoverContent);
    },
    _addUIComponents : function(viewConfiguration) {
        this.table = null;
        this.chart = null;
        var chartToolbarRef = this.getUIComponents().getChartToolbar();
        chartToolbarRef.removeAllCharts();
        var chartConfiguration = viewConfiguration.getChartConfiguration()[0];
        if(chartConfiguration) {
            var that = this;
            this._popoverNavigationListReferences =  [];
             this.table = new sap.suite.ui.smartbusiness.drilldown.lib.CustomTable({
                 mode : sap.m.ListMode.SingleSelectMaster
             }).addStyleClass("smartBusinessDrilldownTable");
             this.table.attachSelectionChange(function() {
                that._onTableRowSelected(); 
             });
             this.table.addEventDelegate({
                 onAfterRendering : function() {
                     that.switchedToTableView();
                 }
             });
             this.table.setModel(this.getView().getModel("i18n"), "i18n");
             this._addPopoverContent(this.table, true);
             if(chartConfiguration.getChartType().isTable()) {
                 chartToolbarRef.addChart(this.table);
             } else {
                 this.chart = new sap.ca.ui.charts.Chart({
                     showPopover : true,
                     chartType : "Bar"
                 });
                 this.chart.setAdvancedChartSettings({
                     plotArea : {
                         animation : {
                             dataLoading : false,
                             dataUpdating : false,
                             resizing : false
                         }
                     },
                     legend : {
                         title : {
                             visible : false
                         }
                     },
                     yAxis : {
                         title : {
                             visible : true
                         }
                     },
                     xAxis : {
                         title : {
                             visible : true
                         }
                     }
                 });
                 this.chart.addEventDelegate({
                     onAfterRendering : function() {
                         that.switchedToChartView();
                     }
                 })
                 chartToolbarRef.addChart(this.chart);
                 chartToolbarRef.addChart(this.table);
                 this._addPopoverContent(this.chart, false);
             }
        } else {
            jQuery.sap.log.error("NO Chart Configuration found!! ");
        }
        
    },
    _setNoDataText : function(sPropertyKey) {
        this.table.setNoDataText(this.getView().getModel("i18n").getProperty(sPropertyKey));
        if(this.chart) {
            this.chart.setNoData(new sap.m.Label({
                text : this.getView().getModel("i18n").getProperty(sPropertyKey)
            }));
        }
    },
    fetchDataForChart : function() {
        var chartToolbarRef = this.getUIComponents().getChartToolbar();
        var VIEW = this.SELECTED_VIEW;
        var that = this;
        try {
            this.chartModel.setData({data:[]});
            chartToolbarRef.setBusy(true);
            var dimensions = [].concat(this.SELECTED_VIEW.getDimensions());
            dimensions.forEach(function(sDimensionName) {
                var oDimension = VIEW.findDimensionByName(sDimensionName);
                var sortByDimension = oDimension.getSortBy();
                if((dimensions.indexOf(sortByDimension) == -1)) {
                    if(oDimension.getSortOrder() == "asc" || oDimension.getSortOrder() == "desc") {
                        dimensions.push(sortByDimension);
                    }
                }
            });
            var measures = this.SELECTED_VIEW.getMeasures();
            var sortingToBeApplied = null;
            if(this.TABLE_SORTING && this.TABLE_SORTING.length) {
                sortingToBeApplied = this.TABLE_SORTING;
            } else if(this.COLUMNS_SORT && this.COLUMNS_SORT.length) {
                sortingToBeApplied = this.COLUMNS_SORT;
            }
            var dataLimit = null;
            try {
                var iDataLimit = window.parseInt(this.SELECTED_VIEW.getChartConfiguration()[0].getDataLimit());
                if(isNaN(iDataLimit)) {
                    jQuery.sap.log.error("Invalid Data Limit Value : "+dataLimit);
                } else {
                    if(iDataLimit!=-1) {
                        dataLimit = iDataLimit;
                    }
                }
            }catch(e) {
                jQuery.sap.log.error("Error parsing Data Limit Value")
            }
            var oUriObject = sap.suite.smartbusiness.odata.getUri({
                serviceUri : this.urlParsingService.addSystemToServiceUrl(this.EVALUATION.getODataUrl(), this.SAP_SYSTEM),
                entitySet : this.EVALUATION.getEntitySet(),
                dimension : dimensions,
                measure : measures,
                filter : this.getAllFilters(),
                sort : sortingToBeApplied,
                dataLimit : dataLimit
            });
            //Set NoData Text for Chart and Table
            this._setNoDataText("DATA_LOADING");
            var startTimeChartDataFetch = new Date().getTime();
            this.CHART_TABLE_DATA_ODATA_CALL_REF = oUriObject.model.read(oUriObject.uri, null, null, true, function(data) {
                var endTimeChartDataFetch = new Date().getTime();
                that._requestTimeLog["CHART_TABLE_DATA"] = {
                        title : "Chart/Table Data",
                        time : endTimeChartDataFetch - startTimeChartDataFetch
                };
                if(data.results.length === 0) {
                    that._setNoDataText("DATA_NODATA");
                }
                that.chartModel.setData({data:data.results});
                chartToolbarRef.setBusy(false);
                if(that.getUIComponents().getChart()) {
                    var popoverFormatter=that.getChartPopoverFormatter();
                    that.getUIComponents().getChart().setPopoverFormatter(popoverFormatter);
                }
                if(data.results.length) {
                    that._appendUOMToTableHeader(data.results[0]);
                    that._appendUOMToChartAxis(data.results[0]);
                }
            }, function() {
                jQuery.sap.log.error("Error fetching data : "+oUriObject.uri);
                that._setNoDataText("DATA_LOADING_FAILED");
                that.chartModel.setData({data:[]});
                chartToolbarRef.setBusy(false);
                that.chartModel.setData({data:[]});
            });
        } catch(e) {
            that._setNoDataText("DATA_LOADING_FAILED");
            jQuery.sap.log.error(e);
            chartToolbarRef.setBusy(false);
            this.chartModel.setData({data:[]});
        }
    },
    _getTableContextParameters : function(dimensionsArray) {
        var extraFilters = {};
        var tableSelectedContext =  this.getUIComponents().getTable().getSelectedContext();
        if(tableSelectedContext && tableSelectedContext.length) {
            tableSelectedContext.forEach(function(eachContext) {
                dimensionsArray.forEach(function(eachDimension){
                    var dimensionValue = eachContext[eachDimension];
                    if(dimensionValue) {
                        if(dimensionValue.getTime) {
                            dimensionValue = dimensionValue.getTime();
                        }
                        if(extraFilters[eachDimension]) {
                            extraFilters[eachDimension].push(dimensionValue);
                        } else {
                            extraFilters[eachDimension] = [];
                            extraFilters[eachDimension].push(dimensionValue);
                        }
                    }
                 });
            });
        }
        return extraFilters;
    },
    _getChartContextParameters : function(dimensionsArray) {
        var extraFilters, chartContexts;
        chartContexts = this.getChartSelectionContextObject();
        extraFilters = {};
        if(chartContexts) {
            var dataSet = this.getUIComponents().getChart().getDataset();
            for(var each in chartContexts) {
                var context = chartContexts[each];
                var cObject = dataSet.findContext(context).getObject();
                dimensionsArray.forEach(function(eachDimension){
                   var dimensionValue = cObject[eachDimension];
                   if(dimensionValue) {
                       if(dimensionValue.getTime) {
                           dimensionValue = dimensionValue.getTime();
                       }
                       if(extraFilters[eachDimension]) {
                           extraFilters[eachDimension].push(dimensionValue);
                       } else {
                           extraFilters[eachDimension] = [];
                           extraFilters[eachDimension].push(dimensionValue);
                       }
                   }
                });
            }
        }
        return extraFilters;
    },
    _onViewSelection : function(customParam, oEvent) {
        var viewId = oEvent.getSource().getCustomData()[0].getKey();
        var parameters = sap.suite.smartbusiness.url.hash.getApplicationParameters();
        parameters["viewId"] = viewId;
        sap.suite.smartbusiness.url.hash.setApplicationParameters(parameters, false);
        var extraFilters = {};
        var dimensionsArray = this.SELECTED_VIEW.getDimensions();
        if(customParam.isTable) {
            extraFilters = this._getTableContextParameters(dimensionsArray);
            sap.suite.smartbusiness.url.hash.updateApplicationParameters(extraFilters, false);
            this.getUIComponents().getTable().setSelectedContext(null);
        } else {
            extraFilters = this._getChartContextParameters(dimensionsArray);
            sap.suite.smartbusiness.url.hash.updateApplicationParameters(extraFilters, false);
            this.setChartSelectionContextObject(null);
        }
        sap.suite.smartbusiness.url.hash.updateHash();
        this._hideOrShowFacetFilterIfRequired();
    },
    getChartSelectionContextObject : function() {
        return this._chartPopoverContext;  
    },
    setChartSelectionContextObject : function(oValue) {
        this._chartPopoverContext = oValue;
    },
    _detachHashChangeListener : function() {
        try {
            this.hashChanger.detachEvent("hashChanged", this._proxyHashChangeListener); 
            this._proxyHashChangeListener = null;
        } catch(e) {
            jQuery.sap.log.error("Error Detaching hashChanged Event");
        }
    },
    _onAppSelection : function(customParam, oEvent) {
        var extraFilters, navId = oEvent.getSource().getCustomData()[0].getKey();
        var soAction = navId.split("~")[0];
        var splits = soAction.split("-");
        var so = splits[0];
        var action = splits[1];
        var appParameters = sap.suite.smartbusiness.url.hash.getApplicationParameters(["viewId"]);
        if(so == "AdhocAnalysis") {
        	appParameters = sap.suite.smartbusiness.url.hash.getApplicationParameters();
        }
        sap.suite.smartbusiness.url.hash.setSemanticObject(so, false);
        sap.suite.smartbusiness.url.hash.setAction(action, false);
        sap.suite.smartbusiness.url.hash.setApplicationParameters(null, false);
        sap.suite.smartbusiness.url.hash.updateStartupParameters(appParameters, false);
        var dimensionsArray = this.SELECTED_VIEW.getDimensions();
        if(customParam.isFromOpenIn) {
            //Navigation Link Clicked from OpenIn
            extraFilters = this._getTableContextParameters(dimensionsArray);
            sap.suite.smartbusiness.url.hash.updateStartupParameters(extraFilters, false);
            extraFilters = this._getChartContextParameters(dimensionsArray);
            sap.suite.smartbusiness.url.hash.updateStartupParameters(extraFilters, false);
        } else {
            if(customParam.isTable) {
                extraFilters = this._getTableContextParameters(dimensionsArray);
                sap.suite.smartbusiness.url.hash.updateStartupParameters(extraFilters, false);
                //Navigation Link Clicked from Table Popover
            } else {
                extraFilters = this._getChartContextParameters(dimensionsArray);
                sap.suite.smartbusiness.url.hash.updateStartupParameters(extraFilters, false);
                //Navigation Link Clicked From Chart Popover
            }
        }
        this._detachHashChangeListener();
        sap.suite.smartbusiness.url.hash.updateHash();
    },
    _fillChartTablePopoverContent : function() {
        var aViews = this._getListOfViewsForPopover(this.CONFIGURATION.getAllViews(), this.SELECTED_VIEW.getId());
        this.POPOVER_VIEW_NAVIGATION_MODEL.setData({
            VIEW_NAVIGATION : aViews
        });
        this.POPOVER_EXTERNAL_APP_NAVIGATION_MODEL.setData({
            APP_NAVIGATION : []
        });
        if(this._popoverNavigationListReferences && this._popoverNavigationListReferences.length) {
            this._popoverNavigationListReferences.forEach(function(oNavigationList) {
                oNavigationList.setNoDataText(" ");
                oNavigationList.setBusy(true);
            }, this);
        }
        this.SEMANTIC_OBJECT_BY_CONTEXT_LINKS_ODATA_CALL_REF = sap.suite.smartbusiness.navigation.getLinksByContext({
            semanticObject : this.SEMANTIC_OBJECT,
            dimensions : this.SELECTED_VIEW.getDimensions(),
            context : this,
            viewId : this.EVALUATION.getId() + "_" + this.SELECTED_VIEW.getId(),
            success : function(links) {
                var OPEN_IN_LINKS = jQuery.extend({}, this._OPEN_IN_LINKS);
                var uniqueLinks = this._getUniqueNavLinks(links, OPEN_IN_LINKS);
                if(uniqueLinks.length) {
                    this.POPOVER_EXTERNAL_APP_NAVIGATION_MODEL.setData({
                        APP_NAVIGATION : uniqueLinks
                    });
                }
                if(this._popoverNavigationListReferences && this._popoverNavigationListReferences.length) {
                    this._popoverNavigationListReferences.forEach(function(oNavigationList) {
                        oNavigationList.setBusy(false);
                        oNavigationList.setNoDataText("-");
                    }, this);
                }
            }
        });
    },    
    _getListOfViewsForPopover : function(allViews, excludeThisViewId) {
        var array = [];
        allViews.forEach(function(view){
            if(view.ID !== excludeThisViewId) {
                array.push(jQuery.extend(false, {}, view));
            }
        });
        return array;
    },
    _onTableRowSelected : function() {
        this._fillChartTablePopoverContent();
    },
    _onChartDataPointSelection : function(oEvent) {
        var srcEvent = oEvent.getParameter("srcEvent");
        var contextPath = srcEvent.getParameter("data")[0].data[0].ctx.path;
        this._chartPopoverContext = this._chartPopoverContext || {};
        var generateUniqueKey = function(ctxPath) {
            var keys = Object.keys(ctxPath).sort();
            var str="";
            keys.forEach(function(k) {
                str+= k+"#"+ctxPath[k]+"#";
            }); 
            return str;
        };
        var _key = generateUniqueKey(contextPath);
        if(this._chartPopoverContext[_key]) {
            delete this._chartPopoverContext[_key];
        } else {
            this._chartPopoverContext[_key] = contextPath;
        }
        if(this._chartPopoverContext) {
            var _length = Object.keys(this._chartPopoverContext).length;
            if(_length !== this.chart.getInternalVizChart().getVIZInstance().selection().length) {
                this._chartPopoverContext = {};
                this._chartPopoverContext[_key] = contextPath;
            }    
            
        }
        if(this.chart.getInternalVizChart().getVIZInstance().selection().length == 0) {
            this._chartPopoverContext = {};
        }
        this._fillChartTablePopoverContent();
    },
    _getStacking : function(chartColumns) {
        var stacking = {
                stacking : false,
                dimensionStacked : false,
                measureStacked : false,
                stackedDimensionName : null
        };
        var currentView  = this.SELECTED_VIEW;
        chartColumns.forEach(function(eachColumn) {
            var oColumn = currentView.findColumnByName(eachColumn);
            if(oColumn.isMeasure()) {
                if(oColumn.isStacked()) {
                    stacking.stacking = true;
                    stacking.measureStacked = true;
                    return false;
                }
            }
        });
        if(!stacking.stacking) {
            chartColumns.forEach(function(eachColumn) {
                var oColumn = currentView.findColumnByName(eachColumn);
                if(oColumn.isDimension()) {
                    if(oColumn.isStacked()) {
                        stacking.stacking = true;
                        stacking.dimensionStacked = true;
                        if(oColumn.getAxis() == 2) {
                            stacking.stackedDimensionName = oColumn.getName()
                            return false;
                        }
                    }
                }
            });
        }
        return stacking;
    },
    _getEvaluationThresholdMeasures : function(){
        var thresholdMeasuresArray = [];
        thresholdMeasuresArray.push(this.EVALUATION.getKpiMeasureName());
        if(this.EVALUATION.getThresholdValueType() === "MEASURE") {
            var thresholdObjArray = this.EVALUATION.getValues().results ;
            if(thresholdObjArray && thresholdObjArray.length) {
                for(var i=0;i<thresholdObjArray.length;i++) {
                    if((thresholdObjArray[i]).COLUMN_NAME && !((thresholdObjArray[i]).FIXED)) {
                        thresholdMeasuresArray.push((thresholdObjArray[i]).COLUMN_NAME);
                    }
                }
            }
        }
        return thresholdMeasuresArray;
    },
    _addDimensionAndMeasureToDataset : function(oChart, oDataset, oChartConfig, aColumns) {
        this.thresholdMeasuresArray = this._getEvaluationThresholdMeasures();
        var oStacking = this._getStacking(aColumns);
        var VIEW = this.SELECTED_VIEW;
        //Adding Dimension to DataSet
        var oChartType = oChartConfig.getChartType();
        if((oChartType.isBar() || oChartType.isColumn()) && oStacking.dimensionStacked) {
            aColumns.forEach(function(sColumn) {
                var oColumn = VIEW.findColumnByName(sColumn);
                if(oColumn.isDimension()) {
                    var iAxis = 1;
                    if(oColumn.getName() == oStacking.stackedDimensionName && VIEW.getDimensionCount() > 1) {
                        iAxis = 2;
                        oChart.setStackedChartWidthEnhancer(true);
                    }
                    var oDimensionDefinition = new sap.viz.ui5.data.DimensionDefinition({
                        name : this.COLUMN_LABEL_MAPPING[oColumn.getName()],
                        axis : iAxis,
                        value : {
                            path : this.DIMENSION_TEXT_PROPERTY_MAPPING[oColumn.getName()],
                            formatter : this.getColumnValueFormatter(this.DIMENSION_TEXT_PROPERTY_MAPPING[oColumn.getName()], true)
                        }
                    });
                    oDimensionDefinition.column_name = oColumn.getName();
                    oDataset.addDimension(oDimensionDefinition);
                }
            }, this);
        } else {
            aColumns.forEach(function(sColumn) {
                var oColumn = VIEW.findColumnByName(sColumn);
                if(oColumn.isDimension()) {
                    var oDimensionDefinition = new sap.viz.ui5.data.DimensionDefinition({
                        name : this.COLUMN_LABEL_MAPPING[oColumn.getName()],
                        axis : 1,
                        value : {
                            path : this.DIMENSION_TEXT_PROPERTY_MAPPING[oColumn.getName()],
                            formatter : this.getColumnValueFormatter(this.DIMENSION_TEXT_PROPERTY_MAPPING[oColumn.getName()], true)
                        }
                    });
                    oDimensionDefinition.column_name = oColumn.getName();
                    oDataset.addDimension(oDimensionDefinition);
                }
            }, this);
        } 
        
        //Adding Measure to Dataset
        if(oChartType.isLine() || oChartType.isCombination()) {
            aColumns.forEach(function(sColumn) {
                var oColumn = VIEW.findColumnByName(sColumn);
                if(oColumn.isMeasure()) {
                    var oMeasureDefinition = new sap.viz.ui5.data.MeasureDefinition({
                        name : this.COLUMN_LABEL_MAPPING[oColumn.getName()],
                        value : {
                            path : oColumn.getName()
                        }
                    });
                    oMeasureDefinition.column_name = oColumn.getName();
                    oDataset.addMeasure(oMeasureDefinition);
                }
            }, this);
        } else if(oChartType.isBubble()) {
            var _index = 0;
            aColumns.forEach(function(sColumn, index) {
                var oColumn = VIEW.findColumnByName(sColumn);
                if(oColumn.isMeasure()) {
                    ++_index;
                    var oMeasureDefinition = new sap.viz.ui5.data.MeasureDefinition({
                        name : this.COLUMN_LABEL_MAPPING[oColumn.getName()],
                        group : _index,
                        value : {
                            path : oColumn.getName()
                        }
                    });
                    oMeasureDefinition.column_name = oColumn.getName();
                    oDataset.addMeasure(oMeasureDefinition);
                }
            }, this);
        } else if(oChartType.isBar() || oChartType.isColumn()) {
            if(oChartConfig.isSingleAxis()) {
                aColumns.forEach(function(sColumn) {
                    var oColumn = VIEW.findColumnByName(sColumn);
                    if(oColumn.isMeasure()) {
                        var oMeasureDefinition = new sap.viz.ui5.data.MeasureDefinition({
                            name : this.COLUMN_LABEL_MAPPING[oColumn.getName()],
                            value : {
                                path : oColumn.getName()
                            }
                        });
                        oMeasureDefinition.column_name = oColumn.getName();
                        oDataset.addMeasure(oMeasureDefinition);
                    }
                }, this);
            } else if(oChartConfig.isDualAxis()) {
                aColumns.forEach(function(sColumn) {
                    var oColumn = VIEW.findColumnByName(sColumn);
                    if(oColumn.isMeasure()) {
                        var oMeasureDefinition = new sap.viz.ui5.data.MeasureDefinition({
                            group : oColumn.getAxis(),
                            name : this.COLUMN_LABEL_MAPPING[oColumn.getName()],
                            value : {
                                path : oColumn.getName()
                            }
                        });
                        oMeasureDefinition.column_name = oColumn.getName();
                        oDataset.addMeasure(oMeasureDefinition);
                    }
                }, this);
            }
        }
    },
    _appendUOMToChartAxis : function(data) {
        var oChart, aMeasures, chartAdvancedSetting, UOMS, uomFlag, uomPropertyName, uomValue, chartConfig, chartType;
        var getUomAsString = function (oUoms) {
            var aUoms = [];
            for(var each in oUoms) {
                aUoms.push(oUoms[each]);
            }
            return aUoms.join(" & ");
        };
        var getAxisObject = function (sAxisLabel) {
            return {
                title : {
                    visible : true,
                    text : sAxisLabel
                }
            };
        }; 
        oChart = this.getUIComponents().getChart();
        if(!oChart) {
            return;
        }
        aMeasures = this.SELECTED_VIEW.getMeasures();
        chartAdvancedSetting = oChart.getAdvancedChartSettings() || {};
        UOMS = {};
        uomFlag = false;
        if(aMeasures.length == 1 && aMeasures[0] == this.EVALUATION.getKpiMeasureName()) {
            var sMeasure = aMeasures[0];
            uomPropertyName = this.MEASURE_UNIT_PROPERTY_MAPPING[sMeasure];
            if(uomPropertyName) {
                uomValue = data[uomPropertyName];
                if(uomValue) {
                    UOMS[sMeasure] = uomValue;
                    uomFlag = true;
                } else {
                    UOMS[sMeasure] = this.COLUMN_LABEL_MAPPING[sMeasure];
                }
            } else {
                UOMS[sMeasure] = this.COLUMN_LABEL_MAPPING[sMeasure];
            }
        } else {
            aMeasures.forEach(function(sMeasure) {
                uomPropertyName = this.MEASURE_UNIT_PROPERTY_MAPPING[sMeasure];
                if(uomPropertyName) {
                    uomValue = data[uomPropertyName];
                    if(uomValue) {
                        UOMS[sMeasure] = this.COLUMN_LABEL_MAPPING[sMeasure] +" ("+uomValue+")";
                        uomFlag = true;
                    } else {
                        UOMS[sMeasure] = this.COLUMN_LABEL_MAPPING[sMeasure];
                    }
                } else {
                    UOMS[sMeasure] = this.COLUMN_LABEL_MAPPING[sMeasure];
                }
            }, this);
        }
        chartConfig = this.SELECTED_VIEW.getChartConfiguration()[0];
        chartType = chartConfig.getChartType();
        if(uomFlag) {
            if(chartType.isColumn() || chartType.isBar()) {
//                if(chartConfig.isAbsoluteValue()) {
                    if(chartConfig.isSingleAxis()) {
                        if(chartType.isBar()) {
                            chartAdvancedSetting.xAxis = getAxisObject(getUomAsString(UOMS));
                        } else {
                            chartAdvancedSetting.yAxis = getAxisObject(getUomAsString(UOMS));
                        }
                    } else {
                        var x1Axis = {}, x2Axis = {};
                        aMeasures.forEach(function(sMeasure) {
                             var oMeasure = this.SELECTED_VIEW.findMeasureByName(sMeasure);
                             if(oMeasure.getAxis() == 1) {
                                 x1Axis[sMeasure] = UOMS[sMeasure];
                             } else if(oMeasure.getAxis() == 2) {
                                 x2Axis[sMeasure] = UOMS[sMeasure];
                             }
                        }, this);
                        if(chartType.isBar()) {
                            chartAdvancedSetting.xAxis = getAxisObject(getUomAsString(x2Axis));
                            chartAdvancedSetting.xAxis2 = getAxisObject(getUomAsString(x1Axis));
                        } else {
                            chartAdvancedSetting.yAxis = getAxisObject(getUomAsString(x1Axis));
                            chartAdvancedSetting.yAxis2 = getAxisObject(getUomAsString(x2Axis));
                        }
                    }
//                }
            } else if(chartType.isBubble()) {
                var aDatasetMeasures = oChart.getDataset().getMeasures();
                aDatasetMeasures.forEach(function(oDatasetMeasure) {
                    var sMeasureName = oDatasetMeasure.column_name;
                    var sLabel = UOMS[sMeasureName];
                    if(oDatasetMeasure.getGroup() == 1) {
                        chartAdvancedSetting.xAxis = getAxisObject(sLabel);
                    } else if(oDatasetMeasure.getGroup() == 2) {
                        chartAdvancedSetting.yAxis = getAxisObject(sLabel);
                    }
                }, this);
            } else if (chartType.isTable()){
                //Nothing to do
            } else {
                chartAdvancedSetting.yAxis = getAxisObject(getUomAsString(UOMS));
            }
        }
    },
    _updateAxisLabelIfRequired : function(oChart, oDataset, oChartConfig, aColumns) {
        var oChartType = oChartConfig.getChartType();
        var VIEW = this.SELECTED_VIEW;
        var chartAdvancedSetting = oChart.getAdvancedChartSettings() || {};
        var IN_PERCENTAGE_VALUE = "("+this.getView().getModel("i18n").getProperty("IN_PERCENTAGE")+")";
        var getAxisObject = function(sLabel) {
            return {
                    title : {
                        visible : true,
                        text : sLabel
                    }
            };
        };
        if(oChartConfig.isPercentageValue()) {
            if(oChartType.isBar() || oChartType.isColumn()) {
                var aMeasures = VIEW.getMeasures();
                if(oChartConfig.isSingleAxis()) {
                    var aMeasuresLabel = [];
                    aMeasures.forEach(function(sMeasure) {
                        aMeasuresLabel.push(this.COLUMN_LABEL_MAPPING[sMeasure]);
                    }, this);
                    var strMeasuresLabel = aMeasuresLabel.join(" & ") + IN_PERCENTAGE_VALUE;
                    if(oChartType.isColumn()) {
                        chartAdvancedSetting.yAxis = getAxisObject(strMeasuresLabel);
                    } else {
                        chartAdvancedSetting.xAxis = getAxisObject(strMeasuresLabel);
                    }
                } else {
                    var aFirstAxisMeasures = [];
                    var aSecondAxisMeasures = [];
                    aMeasures.forEach(function(sMeasure) {
                        var oColumn = VIEW.findMeasureByName(sMeasure);
                        if(oColumn.getAxis() == 1) {
                            aFirstAxisMeasures.push(this.COLUMN_LABEL_MAPPING[sMeasure]);
                        } else if(oColumn.getAxis() == 2) {
                            aSecondAxisMeasures.push(this.COLUMN_LABEL_MAPPING[sMeasure]);
                        }
                    }, this);
                    var strFirstAxisLabel = aFirstAxisMeasures.join(" & ")+IN_PERCENTAGE_VALUE;
                    var strSecondAxisLabel = aSecondAxisMeasures.join(" & ")+IN_PERCENTAGE_VALUE;
                    if(oChartType.isColumn()) {
                        chartAdvancedSetting.yAxis = getAxisObject(strFirstAxisLabel);
                        chartAdvancedSetting.yAxis2 = getAxisObject(strSecondAxisLabel);
                    } else {
                        chartAdvancedSetting.xAxis2 = getAxisObject(strFirstAxisLabel);
                        chartAdvancedSetting.xAxis = getAxisObject(strSecondAxisLabel);
                    }
                }
            }
        }
    },
    renderChart: function(viewConfiguration, chartConfig, chartColumns) {
        var chart = this.getUIComponents().getChart();
        chart.attachSelectDataPoint(jQuery.proxy(this._onChartDataPointSelection, this));      
        if(!chartConfig || !chartColumns.length)
            return;
        var dataSet = new sap.viz.core.FlattenedDataset({
           data : {
               path : "/data"
           }
        });
        chart.setStackedChartWidthEnhancer(false);
        this._addDimensionAndMeasureToDataset(chart, dataSet, chartConfig, chartColumns);
        //this._updateAxisLabelIfRequired(chart, dataSet, chartConfig, chartColumns);
        chart.setChartType(this.getCAChartType(chartConfig, viewConfiguration));
        chart.setDataset(dataSet);
        this.setChartLabelFormatters(chart, chartConfig, this.SELECTED_VIEW);
        this._overrideChartAxisLabelFormatters(chart, chartConfig);
        if((this.EVALUATION.getScaling() == -2) && (chartConfig.isDualAxis()) && (chartConfig.isAbsoluteValue()) && (chartConfig.getChartType().isBar() || chartConfig.getChartType().isColumn())) {
        	this._handleDualAxisWhenPercentScale(chart,chartConfig.getChartType());
        }
        this.applyColorToChart(chart, chartConfig);
        this._showChartLegendIfApplicable(chartConfig,chartColumns);
    },
    _showChartLegendIfApplicable : function(oChartConfig, aColumns) {
        var otoolbar = this.getUIComponents().getChartToolbar() ;
        var oStacking = this._getStacking(aColumns);
        var VIEW = this.SELECTED_VIEW;
        var oChartType = oChartConfig.getChartType();
        var isStackApplied = ((oChartType.isBar() || oChartType.isColumn()) && oStacking.dimensionStacked && oStacking.stackedDimensionName && (VIEW.getDimensionCount() > 1)) ? true : false ;        
        
        if((VIEW.getMeasures().length > 1) || (isStackApplied)) {             //  || ((VIEW.getMeasures()).indexOf(this.EVALUATION.getKpiMeasureName()) == -1)
        	otoolbar.setShowLegend(true);
        } else {
        	otoolbar.setShowLegend(false);
        }
    },
    _overrideChartAxisLabelFormatters : function(oChart, oChartConfig) {
    	var locale=new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
    	var percentFormatter = sap.ca.ui.model.format.NumberFormat.getInstance({},locale);
        if(oChartConfig.isPercentageValue()) {
            var oChartType =  oChartConfig.getChartType();
            if(oChartType.isBar()) {
                oChart.setXAxisLabelFormatter(function(rawValue){return percentFormatter.format_percentage(rawValue);});
                oChart.setYAxisLabelFormatter(function(rawValue){return rawValue;});
                if(oChartConfig.isDualAxis()) {
                    oChart.setXAxis2LabelFormatter(function(rawValue){return percentFormatter.format_percentage(rawValue);});
                }
            } else if(oChartType.isColumn()) {
                oChart.setYAxisLabelFormatter(function(rawValue){return percentFormatter.format_percentage(rawValue);});
                oChart.setXAxisLabelFormatter(function(rawValue){return rawValue;});
                if(oChartConfig.isDualAxis()) {
                    oChart.setYAxis2LabelFormatter(function(rawValue){return percentFormatter.format_percentage(rawValue);});
                }
            }
        }
    },
    _handleDualAxisWhenPercentScale: function(chart,chartType) {
    	var that = this;
    	var VIEW = this.SELECTED_VIEW;
    	var measures = VIEW.getMeasures() ;
    	var axisMeasures = this._getMeasuresByAxis();
    	var isAxis1Scaled = this._isMeasureSetPercentScaled(axisMeasures.axis1Msr);
    	var isAxis2Scaled = this._isMeasureSetPercentScaled(axisMeasures.axis2Msr);
    	    	
    	// chart label
    	var labelFormatter = [[],[]];
    	if(isAxis1Scaled)
    		labelFormatter[0].push(that._getChartPercentFormatter());
    	else
    		labelFormatter[0].push(that._getChartNumberFormatter());
    	if(isAxis2Scaled)
    		labelFormatter[1].push(that._getChartPercentFormatter());
    	else
    		labelFormatter[1].push(that._getChartNumberFormatter());    	
    	chart.setDataLabelFormatter(labelFormatter);
    	
    	// chart axis
    	if(chartType.isBar()) {
	    	chart.setXAxisLabelFormatter(isAxis1Scaled?that._getChartPercentFormatter():that._getChartNumberFormatter());
			chart.setYAxisLabelFormatter(that._pseudoChartFormatter);
	    	chart.setXAxis2LabelFormatter(isAxis2Scaled?that._getChartPercentFormatter():that._getChartNumberFormatter());
			chart.setYAxis2LabelFormatter(that._pseudoChartFormatter); 
    	} else if(chartType.isColumn()) {
    		chart.setXAxisLabelFormatter(that._pseudoChartFormatter);
			chart.setYAxisLabelFormatter(isAxis1Scaled?that._getChartPercentFormatter():that._getChartNumberFormatter());
	    	chart.setXAxis2LabelFormatter(that._pseudoChartFormatter);
			chart.setYAxis2LabelFormatter(isAxis2Scaled?that._getChartPercentFormatter():that._getChartNumberFormatter());
    	}
    	
    	// chart popover
    	// --------------- implemented in getChartPopoverFormatter() function . -------------------------
    },
    _isEvaluationThresholdMeasure: function(oMsr) {
    	if(this.thresholdMeasuresArray && this.thresholdMeasuresArray.length) {
    		var thresholdMsrsArray = this.thresholdMeasuresArray;
    	} else {
    		var thresholdMsrsArray = this._getEvaluationThresholdMeasures();
    	}
    	if(thresholdMsrsArray && thresholdMsrsArray.length) {
			if(thresholdMsrsArray.indexOf(oMsr) != -1) {
					return true;					
			} 
		}
    	return false;
    },
    _getMeasuresByAxis: function() {
    	var that = this;
    	var VIEW = this.SELECTED_VIEW;
    	var measures = VIEW.getMeasures() ;
    	var axis1Msrs = [], axis2Msrs = [] ;
    	for(var i=0;i<measures.length;i++) {
    		var oColumn = VIEW.findColumnByName(measures[i]);
    		if(oColumn.isMeasure() && (oColumn.getAxis() == 1)) {
    			axis1Msrs.push(measures[i]);
    		} else if(oColumn.isMeasure() && (oColumn.getAxis() == 2)) {
    			axis2Msrs.push(measures[i]);
    		}
    	}
    	return {
    				axis1Msr:axis1Msrs,
    				axis2Msr:axis2Msrs 
    			}
    },
    _isMeasureSetPercentScaled: function(oMsrs) {
    	if(this.thresholdMeasuresArray && this.thresholdMeasuresArray.length) {
    		var thresholdMsrsArray = this.thresholdMeasuresArray;
    	} else {
    		var thresholdMsrsArray = this._getEvaluationThresholdMeasures();
    	}
    	if(thresholdMsrsArray && thresholdMsrsArray.length && oMsrs && oMsrs.length) {
    		for(var i=0;i<oMsrs.length;i++) {
				if(thresholdMsrsArray.indexOf(oMsrs[i]) != -1) {
						return true;					
				} 
    		}
		}
    	return false;
    },
    setChartLabelFormatters:function(chart,o,v){		
		var isPercentScaled = this._isMeasureSetPercentScaled(this.SELECTED_VIEW.getMeasures());
						
		if((this.EVALUATION.getScaling() == -2) && !((o.isPercentageValue()) && (o.getChartType().isBar() || o.getChartType().isColumn())) && isPercentScaled) {
			var formatter=this.getChartLabelFormatter(o,v,true);
	    	chart.setXAxisLabelFormatter(formatter.x1);
			chart.setYAxisLabelFormatter(formatter.y1);
	    	chart.setXAxis2LabelFormatter(formatter.x2);
			chart.setYAxis2LabelFormatter(formatter.y2);
			chart.setDataLabelFormatter(formatter.dataLabel);
		} else {
			var formatter=this.getChartLabelFormatter(o,v);
	    	chart.setXAxisLabelFormatter(formatter.x1);
			chart.setYAxisLabelFormatter(formatter.y1);
	    	chart.setXAxis2LabelFormatter(formatter.x2);
			chart.setYAxis2LabelFormatter(formatter.y2);
			chart.setDataLabelFormatter(formatter.dataLabel);
		}
    },
    _pseudoChartFormatter:function(s){
    	return s;
    },
    _getChartNumberFormatter:function(isStandard){
		var locale=new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
		function isNumber(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}
		var formatterConstructor={style:isStandard?'standard':'short'};
		//if(dec||dec==0){formatterConstructor["shortDecimals"]=dec;}
		var chartFormatter=sap.ca.ui.model.format.NumberFormat.getInstance(formatterConstructor,locale);
		return function(s){
			return isNumber(s)?chartFormatter.format(s):s;
		};
    },
    _getChartPercentFormatter:function(isStandard){
		var locale=new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
		function isNumber(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}
		var formatterConstructor={style:isStandard?'standard':'short'};
		//if(dec||dec==0){formatterConstructor["shortDecimals"]=dec;}
		var chartFormatter=sap.ca.ui.model.format.NumberFormat.getInstance(formatterConstructor,locale);
		return function(s){
			return isNumber(s)?chartFormatter.format_percentage(s):s;
		};
    },
    getChartLabelFormatter:function(oChartConfig,viewConfig,isPercentScaled){
    	jQuery.sap.require("sap.ca.ui.model.format.NumberFormat");
    	if(isPercentScaled) {
    		var formatter={ x1:this._pseudoChartFormatter,
    				y1:this._getChartPercentFormatter(),
    				x2:this._pseudoChartFormatter,
    				y2:this._pseudoChartFormatter,
    				dataLabel:[[this._getChartPercentFormatter()],[this._getChartPercentFormatter()],[this._getChartPercentFormatter()]]
			};
    	} else {
    		var formatter={ x1:this._pseudoChartFormatter,
		    				y1:this._getChartNumberFormatter(),
		    				x2:this._pseudoChartFormatter,
		    				y2:this._pseudoChartFormatter,
		    				dataLabel:[[this._getChartNumberFormatter()]]
    				};
    	}
    	if(oChartConfig.getChartType().isBubble()||(oChartConfig.getChartType().isBar()&& oChartConfig.isAbsoluteValue())){
    		if(isPercentScaled)
    			formatter.x1=this._getChartPercentFormatter();
    		else
    			formatter.x1=this._getChartNumberFormatter();
    	}
    	if(oChartConfig.getChartType().isBar()||(oChartConfig.getChartType().isColumn()&& oChartConfig.isStackingEnabled(viewConfig) && oChartConfig.isPercentageValue())){
    		formatter.y1=this._pseudoChartFormatter;
    	}
    	if(oChartConfig.getChartType().isBar() && oChartConfig.isDualAxis() && oChartConfig.isStackingEnabled(viewConfig)){
    		if(isPercentScaled)
    			formatter.x2=this._getChartPercentFormatter();
    		else
    			formatter.x2=this._getChartNumberFormatter();
    	}
    	if(oChartConfig.getChartType().isColumn() && oChartConfig.isStackingEnabled(viewConfig) && oChartConfig.isDualAxis()){
    		if(isPercentScaled)
    			formatter.y2=this._getChartPercentFormatter();
    		else
    			formatter.y2=this._getChartNumberFormatter();
    	}	
    	return formatter;
    },
    getColumnValueFormatter:function(sName,bIsDimension,isPercentScaled,axisScaled){
    	var that = this;
    	var VIEW = this.SELECTED_VIEW;    	
    	var oConfig = (VIEW.getChartConfiguration())[0];
    	var formatter;
    	if(bIsDimension){
    		formatter=function (s) {return s==0?s+"":s;}
    	}else{
    		if(isPercentScaled) {
    			if(oConfig.getChartType().isTable()) {
    				if(that._isEvaluationThresholdMeasure(sName))
    					formatter=this._getChartPercentFormatter(true);
    				else
    					formatter=this._getChartNumberFormatter(true);
    			} else if((oConfig.isDualAxis()) && (oConfig.isAbsoluteValue()) && (oConfig.getChartType().isBar() || oConfig.getChartType().isColumn())) {
    				var oColumn = VIEW.findColumnByName(sName);
    				if(axisScaled[(oColumn.getAxis())-1])
    					formatter=this._getChartPercentFormatter(true);
    				else
    					formatter=this._getChartNumberFormatter(true);
    			} else {
    				formatter=this._getChartPercentFormatter(true);
    			}
    		}
    		else	
    			formatter=this._getChartNumberFormatter(true);
    	}
    	var sUri =this.urlParsingService.addSystemToServiceUrl(this.EVALUATION.getODataUrl(), this.SAP_SYSTEM);
    	var oMetaData=sap.suite.smartbusiness.odata.getEdmType(sUri,sName,true);
    	var sType=oMetaData.type;
    	var sFormat=oMetaData.format;
    	sFormat = sFormat.toUpperCase();
    	if(sType=='Edm.DateTime'){
    		if(!sap.suite.smartbusiness.odata.isTimeZoneIndependent(sUri,this.EVALUATION.getEntitySet())){
        		var style;
        		if(sFormat=="DATE"){
        			style="daysAgo";
        		}else if(sFormat=="DATETIME"){
        			style="short";
        		}else if(sFormat=="NONE"){
        			style="daysAgo";
        		}
        		if(style){
    				var oF=new sap.ca.ui.model.type.Date({
    					style: style
    				});
    				formatter=function(s){
    					return oF.formatValue(s,"string");
    				}
        		}
    		}else{
        		formatter=function(ts){
        			if(ts && ts.getMinutes){
            			ts.setMinutes( ts.getMinutes() + ts.getTimezoneOffset());
            			var instanceType=(sFormat=="DATE")?"getDateInstance":"getDateTimeInstance";
            			return sap.ui.core.format.DateFormat[instanceType]().format(ts);
        			}
        			return ts;
        		}
    		}
    	}
    	return formatter;
	},
    getChartPopoverFormatter:function(){
    	var oChartConfig= this.SELECTED_VIEW.getChartConfiguration()[0];
		var formatterArray=[[],[],[]] ;
		var that=this;
		var VIEW = this.SELECTED_VIEW;
		var measures=this.SELECTED_VIEW.getMeasures();
        var uom = this.MEASURE_UNIT_PROPERTY_MAPPING;
        var oChartType = oChartConfig.getChartType() ;
		var locale=new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
		var chartPopoverFormatter = sap.ca.ui.model.format.NumberFormat.getInstance({
			style: 'Standard'
		},locale);
		
		var isPercentScaled = this._isMeasureSetPercentScaled(measures);
		
		function _getFormatter(sMeasure) {
			return function(val) {
			    var unit = "";
				var data=that.getUIComponents().getChart().getModel().getData().data;
				if(data && data.length) {
	                unit=(data && data[0])?data[0][uom[sMeasure]]?" "+data[0][uom[sMeasure]]:"":"";
	                data[0][uom[sMeasure]]
				}
                return chartPopoverFormatter.format_standard(val)+unit ;
			} 
		}
		function _getPercentFormatter(sMeasure) {
			return function(val) {
			    return chartPopoverFormatter.format_percentage(val) ;
			} 
		}
		
		if(oChartConfig.isPercentageValue()){
			for(var k=0;k<measures.length;k++){
				formatterArray[0].push(function(val) {
					return chartPopoverFormatter.format_percentage(val) ;
				});
				formatterArray[1].push(function(val) {
					return chartPopoverFormatter.format_percentage(val) ;
				});
			}
		}else{
			if(this.EVALUATION.getScaling() == -2 && isPercentScaled) {
				if((oChartConfig.isDualAxis()) && (oChartConfig.isAbsoluteValue()) && (oChartConfig.getChartType().isBar() || oChartConfig.getChartType().isColumn())) {
					var axisMeasures = this._getMeasuresByAxis();
			    	var isAxis1Scaled = this._isMeasureSetPercentScaled(axisMeasures.axis1Msr);
			    	var isAxis2Scaled = this._isMeasureSetPercentScaled(axisMeasures.axis2Msr);
			    	if(isAxis1Scaled) {
			    		for(var k=0;k<axisMeasures.axis1Msr.length;k++){
							formatterArray[0].push(_getPercentFormatter((axisMeasures.axis1Msr)[k]));
						}
			    	} else {
			    		for(var k=0;k<axisMeasures.axis1Msr.length;k++){
							formatterArray[0].push(_getFormatter((axisMeasures.axis1Msr)[k]));
						}
			    	}
			    	if(isAxis2Scaled) {
			    		for(var k=0;k<axisMeasures.axis2Msr.length;k++){
							formatterArray[1].push(_getPercentFormatter((axisMeasures.axis2Msr)[k]));
						}
			    	} else {
			    		for(var k=0;k<axisMeasures.axis2Msr.length;k++){
							formatterArray[1].push(_getFormatter((axisMeasures.axis2Msr)[k]));
						}
			    	}
			    	
				} else {
					for(var k=0;k<measures.length;k++){
						formatterArray[0].push(_getPercentFormatter(measures[k]));
						formatterArray[1].push(_getPercentFormatter(measures[k]));
						formatterArray[2].push(_getPercentFormatter(measures[k]));
					}
				}
			}
			else {
				for(var k=0;k<measures.length;k++){
					formatterArray[0].push(_getFormatter(measures[k]));
					formatterArray[1].push(_getFormatter(measures[k]));
				}
			}
		}
		return formatterArray;

	
    },
    applyColorToChart : function(chart, chartConfig) {
        var thresholdMeasure = chartConfig.getThresholdMeasure();
        var oController = this;
        var colorScheme = chartConfig.getColorScheme();
        if(!colorScheme.getText()) {
            JQuery.sap.log.error("Color Scheme Value Missing");
            return;
        }
        var measures = chart.getDataset().getMeasures();
        if(colorScheme.isManual()) {
            measures.forEach(function(oMeasure, index, oMeasures) {
                var _color = this.SELECTED_VIEW.findMeasureByName(oMeasure.column_name).getColor();
                if(!_color) {
                    if(colorScheme.isManualSemantic()) {
                        jQuery.sap.log.warning("Semantic Color NOT found for measure name : " + oMeasure.getName() +", assigning default to 'Neutral Light'");
                        _color= "sapCaUiChartSemanticColor-Neutral-Light";
                    } else {
                        jQuery.sap.log.warning("Color NOT found for measure name : " + oMeasure.getName() +", assigning default color");
                        _color = "";
                    }
                }
                oMeasure.addCustomData(new sap.ui.core.CustomData({
                    key : "fillColor",
                    value : _color
                }));
            }, this);
        } else if(colorScheme.isAutoSemantic() && !this.EVALUATION.isTargetKpi()) {
            if(thresholdMeasure) {
                measures.forEach(function(oMeasure, index, oMeasures) {
                    if(oMeasure.getName() ==  thresholdMeasure) {
                        oMeasure.addCustomData(new sap.ui.core.CustomData({
                            key : "fillColor",
                            value : sap.ca.ui.charts.ChartSemanticColor.Neutral
                        }));
                    } else {
                        oMeasure.addCustomData(new sap.ui.core.CustomData({
                            key : "fillColor",
                            value : sap.ca.ui.charts.ChartSemanticColor.Good
                        }));
                    }
                
                }, this);
                chart.setChartSemanticColorFormatter(function(oContext) {
                    var data = chart.getModel().getData().data;
                    var bindingContext = oContext.ctx.path.dii_a1;
                    var bindingData = data[bindingContext];
                    var referenceMeasureValue = bindingData[thresholdMeasure];
                    if(referenceMeasureValue!=null && typeof referenceMeasureValue!='undefined') {
                        if(oController.EVALUATION.isTargetKpi()) {
                            if(oContext.val == referenceMeasureValue) {
                                return sap.ca.ui.charts.ChartSemanticColor.Neutral;
                            }
                            return sap.ca.ui.charts.ChartSemanticColor.NeutralLight;
                        } else {
                            if(oContext.val > referenceMeasureValue) {
                                if(oController.EVALUATION.isMaximizingKpi()) {
                                    return sap.ca.ui.charts.ChartSemanticColor.Good;
                                }
                                return sap.ca.ui.charts.ChartSemanticColor.Bad;
                            } else if(oContext.val < referenceMeasureValue) {
                                if(oController.EVALUATION.isMinimizingKpi()) {
                                    return sap.ca.ui.charts.ChartSemanticColor.Good
                                }
                                return sap.ca.ui.charts.ChartSemanticColor.Bad;
                            } else {
                                return sap.ca.ui.charts.ChartSemanticColor.Neutral;
                            }
                        }
                    } else {
                        jQuery.sap.log.error("Threshold Measure:'"+thresholdMeasure+"'  not in Dataset. Error Applying Semantic Color");
                        return sap.ca.ui.charts.ChartSemanticColor.NeutralLight;
                    }
                });
            } else {
                jQuery.sap.log.error("Chart Color Scheme is Auto-Semantic but no threshold measure Configured!!!");
            }
        } else {
            jQuery.sap.log.debug("Color Scheme is None: Default Color will be used by CA Chart");
        }
        
        if(colorScheme.isAutoSemantic()) {
            if(this.EVALUATION.isTargetKpi()) {
                jQuery.sap.log.error("Auto Semantic Coloring can not be applied on target type KPI");
            }
        }
    },
    getCAChartType : function(chartConfig, viewConfiguration) {
        if(chartConfig.getChartType().isBar()) {
            if(chartConfig.isSingleAxis()) {
                if(chartConfig.isAbsoluteValue()) {
                    if(chartConfig.isStackingEnabled(viewConfiguration)) {
                        return sap.ca.ui.charts.ChartType.StackedBar;
                    } else {
                        return sap.ca.ui.charts.ChartType.Bar;
                    }
                } else {
                    return sap.ca.ui.charts.ChartType.StackedBar100;
                }
            } else if(chartConfig.isDualAxis()) {
                if(chartConfig.isAbsoluteValue()) {
                    return sap.ca.ui.charts.ChartType.DualStackedBar;
                } else {
                    return sap.ca.ui.charts.ChartType.DualStackedBar100;
                }
            }
        } else if(chartConfig.getChartType().isColumn()) {
            if(chartConfig.isSingleAxis()) {
                if(chartConfig.isAbsoluteValue()) {
                    if(chartConfig.isStackingEnabled(viewConfiguration)) {
                        return sap.ca.ui.charts.ChartType.StackedColumn;
                    } else {
                        return sap.ca.ui.charts.ChartType.Column;
                    }
                } else {
                    return sap.ca.ui.charts.ChartType.StackedColumn100;
                }
            } else if(chartConfig.isDualAxis()) {
                if(chartConfig.isAbsoluteValue()) {
                    return sap.ca.ui.charts.ChartType.DualStackedColumn;
                } else {
                    return sap.ca.ui.charts.ChartType.DualStackedColumn100;
                }
            }
        } else {
            return chartConfig.getChartType().getText();
        }
    },
    
    /* TABLE Related Methods Start Here*/
    _getVisibleColumns : function(defaultColumns) {
        var visibleColumns = [];
        defaultColumns.forEach(function(column, index, array) {
            var oColumn = this.SELECTED_VIEW.findColumnByName(column);
            if(oColumn.isVisibleInTable()) {
                visibleColumns.push(column);
            }
        },this);
        return visibleColumns;
    },
    _getValueState : function(actualValue, thresholdValue) {
        if(!this.EVALUATION.isTargetKpi()) {
            if(actualValue < thresholdValue) {
                return this.EVALUATION.isMaximizingKpi() ? sap.ui.core.ValueState.Error : sap.ui.core.ValueState.Success;
            } else if (actualValue == thresholdValue) {
                return sap.ui.core.ValueState.None;
            } else {
                return this.EVALUATION.isMaximizingKpi() ? sap.ui.core.ValueState.Success : sap.ui.core.ValueState.Error;
            }
        } else {
            return sap.ui.core.ValueState.None;
        }
    },
    _getTableCell : function(originalMeasure, colorScheme, isPercentScaled, axisScale) {
        var thresholdMeasure = this.SELECTED_VIEW.getChartConfiguration()[0] && this.SELECTED_VIEW.getChartConfiguration()[0].getThresholdMeasure();
        var that = this;
        // && (originalMeasure !== thresholdMeasure) put this condition if required
        if(this.EVALUATION.isTargetKpi()) {
            return new sap.m.Label({
                text : {
                    path : originalMeasure,
                    formatter:this.getColumnValueFormatter(originalMeasure,false,isPercentScaled,axisScale)
                }
            });
        } else {
            if(colorScheme.isAutoSemantic() && thresholdMeasure) {
                return new sap.m.ObjectNumber({
                    number: {
                        path: originalMeasure,
                        formatter:this.getColumnValueFormatter(originalMeasure,false,isPercentScaled,axisScale)
                    },
                    state : {
                        parts : [
                                 {path : originalMeasure},
                                 {path : thresholdMeasure}
                        ],
                        formatter : function(oMeasureValue, tMeasureValue) {
                            try {
                                oMeasureValue = window.parseFloat(oMeasureValue);
                                tMeasureValue = window.parseFloat(tMeasureValue);
                                return that._getValueState(oMeasureValue, tMeasureValue);
                            }catch(e) {
                                return sap.ui.core.ValueState.None;
                            }
                        }
                    }
                });
            } else {
                return new sap.m.Label({
                    text : {
                        path : originalMeasure,
                        formatter:this.getColumnValueFormatter(originalMeasure,false,isPercentScaled,axisScale)
                    }
                });
            }
        }
    },
    _sortTableByColumnName : function(oColumnHeader) {
        var iconMapping = {
            "asc" : String.fromCharCode(0xe1e1),
            "desc" : String.fromCharCode(0xe1e2)
        };
        var sortOrder = null;
        if(oColumnHeader.sort_by === void (0)) {
            sortOrder = "desc";
        } else {
            sortOrder = oColumnHeader.sort_by =="asc" ? "desc" : "asc";
        }
        oColumnHeader.sort_by = sortOrder;
        var allColumns = this.getUIComponents().getTable().getColumns();
        allColumns.forEach(function(oColumn) {
           var header = oColumn.getHeader();
           header.setText(header.dimension_label+(header.UOM?" ("+header.UOM+")":""));
        });
        
        oColumnHeader.setText(iconMapping[sortOrder]+" "+oColumnHeader.dimension_label+(oColumnHeader.UOM?" ("+oColumnHeader.UOM+")":""));
        
        var oColumn = this.SELECTED_VIEW.findColumnByName(oColumnHeader.dimension_key);
        var actualSortBy = oColumn.getSortBy();
        
        this.TABLE_SORTING = [{
                name : actualSortBy,
                order : sortOrder
        }];
        this.fetchDataForChart();
        
    },
    _appendUOMToTableHeader : function(result) {
        if(this.UOM_APPENDED_TO_HEADER) {
            return;
        }
        var columns = this.getUIComponents().getTable().getColumns();
        columns.forEach(function(oColumn) {
            var columnHeaderText = oColumn.getHeader().getText();
            var columnName = oColumn.column_name;
            var oColumnObject = this.SELECTED_VIEW.findColumnByName(columnName);
            if(oColumnObject.isMeasure()) {
                var uomProperty = this.MEASURE_UNIT_PROPERTY_MAPPING[columnName];
                if(uomProperty!==columnName) {
                    var uomValue = result[uomProperty];
                    if(uomValue) {
                        oColumn.getHeader().UOM = uomValue;
                        oColumn.getHeader().setText(columnHeaderText+" ("+uomValue+")");
                    }
                }
            }
        },this);
        this.UOM_APPENDED_TO_HEADER = true;
    },
    renderTable: function(tableColumns, colorScheme) {
        var that = this;
        var table = this.getUIComponents().getTable();
        var oConfig = (this.SELECTED_VIEW.getChartConfiguration())[0];
        table.removeAllColumns();
        var SELECTED_VIEW = this.SELECTED_VIEW;
        var visibleColumns = this._getVisibleColumns(tableColumns);
        this.COLUMNS_SORT = [];
        tableColumns.forEach(function(sColumn, index, allColumns) {
            var oColumn = this.SELECTED_VIEW.findColumnByName(sColumn);
            if(oColumn.getSortBy() && oColumn.getSortOrder()) {
                /*TO be on safer side.. Checking the sort order value */
                if(oColumn.getSortOrder() == "asc" || oColumn.getSortOrder() == "desc") {
                    this.COLUMNS_SORT.push({
                        name : oColumn.getSortBy(),
                        order : oColumn.getSortOrder()
                    });
                }
            }
        }, this);
        
        var isPercentScaled = false ;
        if((this.EVALUATION.getScaling() == -2) && !((oConfig.isPercentageValue()) && (oConfig.getChartType().isBar() || oConfig.getChartType().isColumn()))) {
        	isPercentScaled = this._isMeasureSetPercentScaled(this.SELECTED_VIEW.getMeasures());			 
        }
        
        var axisScale = [] ;
        if(isPercentScaled) {
	        if((oConfig.isDualAxis()) && (oConfig.isAbsoluteValue()) && (oConfig.getChartType().isBar() || oConfig.getChartType().isColumn())) {
	        	var axisMeasures = this._getMeasuresByAxis();
	        	axisScale.push(this._isMeasureSetPercentScaled(axisMeasures.axis1Msr));
	        	axisScale.push(this._isMeasureSetPercentScaled(axisMeasures.axis2Msr));
	        }
        }
        
        var template =  new sap.m.ColumnListItem();
        for (var i = 0, l= visibleColumns.length ; i < l; i++) {
            var oColumn = this.SELECTED_VIEW.findColumnByName(visibleColumns[i]);
            var Label = new sap.m.Label({
                text: this.COLUMN_LABEL_MAPPING[visibleColumns[i]] //Use the Label instead of Technical Column Name
            }).addStyleClass("tableColumnHeader");
            Label.dimension_key = visibleColumns[i];
            Label.dimension_label = this.COLUMN_LABEL_MAPPING[visibleColumns[i]];
            Label.attachBrowserEvent("click", function() {
                that._sortTableByColumnName(this);
            });
            var columns = new sap.m.Column({
                hAlign: oColumn.isMeasure() ? "Right" : "Left",
                styleClass: "qty",
                header: Label,
                minScreenWidth: "Tablet",
                demandPopin: true,
            });
            columns.column_name = visibleColumns[i];
            if(oColumn.isMeasure()) {
                //Dynamically get oCell object based on Threshold Measure
                var oCell = this._getTableCell(visibleColumns[i], colorScheme, isPercentScaled, axisScale);
                template.addCell(oCell);
            } else {
                var oCell = new sap.m.Label({
                    text: {
                        path: this.DIMENSION_TEXT_PROPERTY_MAPPING[visibleColumns[i]],
                        formatter:this.getColumnValueFormatter(this.DIMENSION_TEXT_PROPERTY_MAPPING[visibleColumns[i]],true)
                    }
                });
                template.addCell(oCell);
            }
            table.addColumn(columns);
        }
        table.bindAggregation("items", "/data", template);
    },
    /* TABLE Related Methods End Here*/
    
    
    
    /*
     * EVENT-HANDLERS :: BEGIN
     */
    
    _abortPendingODataCalls : function() {
        var abort = function(oDataCallRef) {
            try {
                if(oDataCallRef) {
                    oDataCallRef.abort();
                }
            }catch(e) {}
        };
        var abortArray = function(aODataCallRef) {
            if(aODataCallRef && aODataCallRef.length) {
                aODataCallRef.forEach(function(odataCallRef) {
                    abort(odataCallRef);
                });
            }
        };
        abort(this.DDA_CONFIG_ODATA_CALL_REF);
        abort(this._bundled_evaluations_call_ref);
        abort(this.EVALUATION_ODATA_CALL_REF);
        abort(this.SEMANTIC_OBJECT_LINKS_ODATA_CALL_REF);
        abortArray(this.SEMANTIC_OBJECT_BY_CONTEXT_LINKS_ODATA_CALL_REF);
        abort(this.CHART_TABLE_DATA_ODATA_CALL_REF);
        abort(this.FETCH_AGREGATION_VALUE_ODATA_CALL_REF);
    },
    onBack: function(evt) {
        this._abortPendingODataCalls();
        window.history.back();
        
    },
    _resetConfigurations : function() {
        this.TABLE_SORTING = null;
        this.UOM_APPENDED_TO_HEADER = null;
        this.setChartSelectionContextObject(null);
    },
    onViewChange: function(evt) {
        //Reseting something that needs to be reset  
        this._resetConfigurations();
        var selectedViewId = evt.getParameters()["selectedKey"];
        /* Old Code - reseting all filters
        sap.suite.smartbusiness.url.hash.setApplicationParameters({
            viewId : [selectedViewId]
        });
        */
        
        /**
         * New Code - Do not reset filters on view change
         */
        var AppParameters = sap.suite.smartbusiness.url.hash.getApplicationParameters();
        AppParameters["viewId"] = [selectedViewId];
        sap.suite.smartbusiness.url.hash.setApplicationParameters(AppParameters);
        
    },
    _attachHashChangeEvent: function () {
        this.hashChanger = this.oRouter.oHashChanger;
        var that = this;
        if (this.hashChanger) {
            try {
                if (!that.hashChangerAttached) {
                    this.hashChanger.attachEvent("hashChanged", this._proxyHashChangeListener);
                    this.hashChanger.viewRef = this;
                }
                that.hashChangerAttached = true;
            } catch (e) {
                jQuery.sap.log.error("Couldn't Attach HashChange Event");
            }
        } else {
            
            jQuery.sap.log.error("Router HashChanger Object Found NULL");
        }
    },
    getUrlFilters : function() {
        var params = sap.suite.smartbusiness.url.hash.getApplicationParameters(["viewId"]/*Excludes array keys*/);
        var urlFilters = [];
        for (var key in params) {
            var aFilterValues = params[key];
            if(aFilterValues && aFilterValues.length) {
                aFilterValues.forEach(function(sFilterValue) {
                    var Obj = {};
                    Obj["NAME"] = key;
                    Obj["OPERATOR"] = "EQ";
                    Obj["VALUE_1"] = sFilterValue;
                    Obj["VALUE_2"] = "";
                    Obj["TYPE"] = "FI";
                    urlFilters.push(Obj);
                });
            }
        }
        return urlFilters;
    },
    getAllFilters : function() {
        var evaluationFilters = this.EVALUATION.getFilters()["results"] || [];
        return evaluationFilters.concat(this.getUrlFilters());
    },
    getAdditionFiltersForChipConfiguration : function() {
        var params = sap.suite.smartbusiness.url.hash.getApplicationParameters(["viewId"]/*Excludes array keys*/);
        var urlFilters = [];
        if(params) {
            for (var key in params) {
                var filterValues = params[key];
                if(filterValues && filterValues.length) {
                    filterValues.forEach(function(eachFilterValue) {
                        var tempArray = [];
                        tempArray[0] = key;
                        tempArray[1] = "EQ";
                        tempArray[2] = eachFilterValue;
                        tempArray[3] = "";
                        urlFilters.push(tempArray);
                    });
                }
            }
        }
        return urlFilters;
    },
    _hideKpiHeaderIfRequired : function() {
        return;
        
        if(this.CONFIGURATION.getHeaders().length == 0) {
            return;
        }
        try {
            var appParameters = sap.suite.smartbusiness.url.hash.getApplicationParameters(["viewId"]);
            if(appParameters) {
                if(Object.keys(appParameters).length) {
                    this.getUIComponents().getTileContainer().$().css("overflow","hidden");
                    this.getUIComponents().getTileContainer().$().animate({
                        height : "0px"
                    });
                    return;
                }
            }
            this.getUIComponents().getTileContainer().$().animate({
                height : "156px"
            });
        } catch(e) {
            jQuery.sap.log.error("Failed to Hide KPI Header : "+e);
        }
    },
    hashChangeListener: function (hashChangeEvent) {
        this.NEW_HASH = hashChangeEvent ? hashChangeEvent.getParameter("newHash") : "";
        this.OLD_HASH = hashChangeEvent ? hashChangeEvent.getParameter("oldHash") : "";        
        var AppParameters = sap.suite.smartbusiness.url.hash.getApplicationParameters();
        var Key_ViewId = "viewId";
        //when no specific view specified - take default view (default mode)
        if(!AppParameters[Key_ViewId]) {
            this.SELECTED_VIEW = this.CONFIGURATION.getDefaultView();
            if (this.SELECTED_VIEW) {
                this.renderView(this.SELECTED_VIEW);
                AppParameters.viewId = [this.SELECTED_VIEW.getId()];
                sap.suite.smartbusiness.url.hash.setApplicationParameters(AppParameters, false);
                var hash = sap.suite.smartbusiness.url.hash.getHash();
                window.location.replace("#"+hash);
            } else {
                jQuery.sap.log.error("Evaluation does not have any views configured");
            }
        }
        //when application starts with a specific viewId/filter in the hash (bookmark mode)
        else if(!this.SELECTED_VIEW) {
            this.firstTimeFlag = true;
            this.SELECTED_VIEW = this.CONFIGURATION.findViewById(AppParameters[Key_ViewId][0]);
            if (this.SELECTED_VIEW) {
                this._resetConfigurations();
                this.renderView(this.SELECTED_VIEW);
                //accessing internal property _oFirstDimensionSelect to set selected View.
                //It doesn't fire the change automatically; so done manually
                this._hideKpiHeaderIfRequired();
                this._setViewComboBoxSelectedIndex();
                this.fetchKpiValue();
                this.fetchDataForChart();
                this._fixFacetListSelection();
            } else {
                jQuery.sap.log.error("The view with viewId : "+ AppParameters[Key_ViewId][0]  + " does not exist");
            }
        }
        //when viewId gets changed in the hash (viewswitch mode)
        else if(this.SELECTED_VIEW && AppParameters[Key_ViewId][0] != this.SELECTED_VIEW.getId()) {
            this.SELECTED_VIEW = this.CONFIGURATION.findViewById(AppParameters[Key_ViewId][0]);
            if(this.firstTimeFlag) {
                sap.suite.smartbusiness.cache.invalidateKpiDetailsCache();
            }
            this._setViewComboBoxSelectedIndex();
            this._resetConfigurations();
            this.renderView(this.SELECTED_VIEW);
            this.fetchKpiValue();
            this.fetchDataForChart();
            this._hideKpiHeaderIfRequired();
            this._fixFacetListSelection();
            this._refreshKpiHeaderTiles();
        }
        //when filters/view change in the hash
        else {
         // invalidating cache on change of filters
            if(this.firstTimeFlag) {
                sap.suite.smartbusiness.cache.invalidateKpiDetailsCache();
            }
            this._setViewComboBoxSelectedIndex();
            this._hideKpiHeaderIfRequired();
            this.fetchKpiValue();
            this.fetchDataForChart();
            this._fixFacetListSelection();
            this._refreshKpiHeaderTiles();
        }
        this.getUIComponents().getFilter().refreshFilter();
    },
    _refreshKpiHeaderTiles : function() {
        var header_container = this.getUIComponents().getTileContainer();
        sap.suite.smartbusiness.miniChartManager.hashChangeListner({
            allTiles : this.CONFIGURATION.getHeaders(),
            headerContainer : header_container,
            sapSystem : this.SAP_SYSTEM,
            urlFilters : this.getUrlFilters(),
            firstTimeFlag : this.firstTimeFlag
        });
        this.firstTimeFlag = true;
    },
    _setViewComboBoxSelectedIndex : function() {
        try {
            this.getUIComponents().getChartToolbar()._oFirstDimensionSelect.setSelectedKey(this.SELECTED_VIEW.getId());
        }catch(e) {
            jQuery.sap.log.error("Failed to Set Selected Index of View ComboBox");
        }
    }, 
    //Experimental
    _fixFacetListSelection : function() {
        try {
            var filter = this.getUIComponents().getFilter();
            var facetFilter = filter.getFacetFilterReference();
            var urlParameters = sap.suite.smartbusiness.url.hash.getApplicationParameters(["viewId"]);
            var facetLists = facetFilter.getLists();
            if(facetLists.length) {
                facetLists.forEach(function(facetList) {
                    var dimensionName = facetList._techName;
                    if(urlParameters[dimensionName]) {
                        var aFilterValue = urlParameters[dimensionName];
                        var items = facetList.getItems();
                        if(items.length) {
                            items.forEach(function(item) {
                            	var curKey=item.getBindingContext().getObject()[facetList._techName]||"";
                            	curKey=curKey.getTime?curKey.getTime()+"":curKey+"";
                                if(aFilterValue.indexOf(curKey) > -1) {
                                    item.setSelected(true);
                                } else {
                                    item.setSelected(false);
                                }
                            });
                        }
                    } else {
                        var items = facetList.getItems();
                        if(items.length) {
                            items.forEach(function(item) {
                                item.setSelected(false);
                            });
                        }
                    }
                }, this);
            }
        } catch(e) {
        }
    },
    /*
     * EVENT-HANDLERS :: END
     */
    _getUniqueNavLinks : function(results, existingLinks) {
        var uniqueLinks=[];
        var curApp = sap.suite.smartbusiness.url.hash.getSemanticObject()+"-"+sap.suite.smartbusiness.url.hash.getAction();
        results.forEach(function(s){
            var t=s.id.match(/-([^?~])*~([^?])*/g);
            t=t?t.toString():"";
            if(t) {
                if(!existingLinks[t]) {
                    existingLinks[t] = t;
                    if(s.id.indexOf(curApp) == -1) {
                        uniqueLinks.push(s);
                    }
                }
            }
        });
        return uniqueLinks;
    },
    _initExternalNavigationLinks : function() {
        this._OPEN_IN_LINKS = {};
        var so = sap.suite.smartbusiness.url.hash.getSemanticObject();
        this._oExternalNavLinksSOPopover = new sap.m.ResponsivePopover({
           modal:false,
           showHeader : false,
           enableScrolling:true,
           verticalScrolling:true,
           horizontalScrolling:false,
           placement:sap.m.PlacementType.Top,
           contentWidth:"18rem",
        });
        var startTimeFetchSOLinks = new Date().getTime();
        var businessParamsMap = {};
        if(this.CHIP_ID) {
            businessParamsMap["chipId"] = this.CHIP_ID;
        }
        if(this._EVALUATION_ID) {
            businessParamsMap["evaluationId"] = this._EVALUATION_ID;
        }
        this.SEMANTIC_OBJECT_LINKS_ODATA_CALL_REF = sap.suite.smartbusiness.navigation.getLinksBySemanticObject({
            success : function(results) {
                var endTimeFetchSOLinks = new Date().getTime();
                this._requestTimeLog["SEMANTIC_OBJECT_LINKS"] = {
                    title : "Semantic Object Links",
                    time : endTimeFetchSOLinks - startTimeFetchSOLinks
                };
                results = this._getUniqueNavLinks(results, this._OPEN_IN_LINKS);
                if(results.length) {
                    var model = new sap.ui.model.json.JSONModel({"EXTERNAL_APP_LINKS" : results});
                    var listOfLinks = new sap.m.List({
                        
                    });
                    listOfLinks.bindItems("/EXTERNAL_APP_LINKS", new sap.m.StandardListItem({
                        title : "{text}",
                        customData : new sap.ui.core.CustomData({
                            key : "{id}",
                            value : "{applicationAlias}"
                        }),
                        type : sap.m.ListType.Navigation,
                        press : jQuery.proxy(this._onAppSelection,this,{publishContext : true,isFromOpenIn : true})
                    })).setModel(model);
                    this._oExternalNavLinksSOPopover.removeAllContent();
                    this._oExternalNavLinksSOPopover.addContent(listOfLinks);
                } else {
                    this.setHeaderFooterOptionsWithoutOpenInButton();
                }
            },
            async : false,
            error : function(error) {
                jQuery.sap.log.error("Error fetching navigation links by semantic object : "+so);
                this.setHeaderFooterOptionsWithoutOpenInButton();
            },
            semanticObject : so,
            businessParam : businessParamsMap,
            context : this
        });
    },
    _showExternalNavigationLinks : function(srcControl) {
        if(!this._oExternalNavLinksSOPopover.isOpen()) {
            this._oExternalNavLinksSOPopover.openBy(srcControl); 
        }
    },
    _toggleFilter : function() {
    	var oController = this;
        var filter = this.getUIComponents().getFilter();
        if(!filter.getSelectedItems())
        	{
             filter.setVisible(!filter.getVisible());
        	}else
        if(filter.getSelectedItems() && filter.getVisible()==true){
        	
        	this.oI18nModel = oController.getView().getModel("i18n");
        	sap.m.MessageBox.alert(oController.oI18nModel.getResourceBundle().getText("Do_you_really_want_to_reset_the_filters?"),{onClose:function(oEvent){
        		if(oEvent=="OK"){
        		 filter.resetFilter();
        		 filter.setVisible(false);
        		}else if(oEvent=="CANCEL"){
        			 filter.setVisible(true);
        		}
        	},
        			title:oController.oI18nModel.getResourceBundle().getText("Reset_Filters"),
        			actions: [sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL]
        	});

       	
 
        }
    },
    setHeaderFooterOptionsWithoutOpenInButton : function() {
        var options = this.getHeaderFooterOptions();
        options.buttonList = [];
        this.setHeaderFooterOptions(options);
        /*
         * On Setting Header and Footer Again,the page title is Lost 
         */
        this.renderTitle();
    },
    getHeaderFooterOptions : function() {
        var options = this._getHeaderFooterOptions();
        var oController = this;
        var oI18nModel = oController.getView().getModel("i18n");
        var os = sap.ui.Device.os.name;
        if(os && os != sap.ui.Device.os.OS.IOS) {
        	options.additionalShareButtonList.push({
                sBtnTxt: oI18nModel.getResourceBundle().getText("EXPORT_AS_EXCEL"),
                sIcon: "sap-icon://excel-attachment",
                onBtnPressed: function (oEvent) {
                    oController._exportAsExcel();
                }
            });
        	
        }
        if((window.location.hostname =="localhost") || (jQuery.sap.getUriParameters().get("sbcmode") == "99")) {
            options.additionalShareButtonList.push({
                sBtnTxt: "Enable Compact Mode",
                sIcon: "sap-icon://resize",
                onBtnPressed: function (oEvent) {
                    if(oController._compactMode) {
                        oController.getView().removeStyleClass("sapUiSizeCompact");
                        oController._compactMode = false;
                        oEvent.getSource().setText("Enable Compact Mode");
                    } else {
                        oController.getView().addStyleClass("sapUiSizeCompact");
                        oController._compactMode = true;
                        oEvent.getSource().setText("Disable Compact Mode");
                    }
                    jQuery(window).trigger("resize");
                }
            });
        }
        if((window.location.hostname =="localhost") || (jQuery.sap.getUriParameters().get("sbrequestlog") == "99")) {
            options.additionalShareButtonList.push({
                sBtnTxt: "Request-Time Log",
                sIcon: "sap-icon://time-entry-request",
                onBtnPressed: function (oEvent) {
                    oController._performance.start(oController._requestTimeLog, oController._compactMode);
                }
            });
        }
        var ELIGIBLE_TILES_TO_ENABLE_ADD_TO_HOME = ["NT","AT","TT"];
        if(ELIGIBLE_TILES_TO_ENABLE_ADD_TO_HOME.indexOf(this.TILE_TYPE) > -1) {
            options.additionalShareButtonList.push({
                sBtnTxt: oI18nModel.getResourceBundle().getText("SAVE_AS_TILE"),
                sIcon: "sap-icon://add-favorite",
                onBtnPressed: function (oEvent) {
                    oController._openAddToHomeDialogBox();
                }
            });
        }
        return options;
    },
    _getHeaderFooterOptions : function () {
        var oController = this;
        var oI18nModel = oController.getView().getModel("i18n");
        this.oListItem = new sap.m.ObjectListItem();
        var add2HomeIcon = String.fromCharCode(0xe078);
        var oOptions = {
                onBack: function () {
                    oController._abortPendingODataCalls();
                    window.history.back();
                },
                sFullscreenTitle: "",
                onFacetFilter: function() {
                    oController._toggleFilter();
                    $(window).trigger('resize');
                },
                buttonList : [{
                    sBtnTxt : oI18nModel.getResourceBundle().getText("OPEN_IN_LABEL"),
                    onBtnPressed: function (oEvent) {
                        oController._showExternalNavigationLinks(oEvent.getSource());
                    }
                }],
                bSuppressBookmarkButton: true,
                oJamOptions: {
                    fGetShareSettings: function () {
                        var oHeader = oController.getView().byId("header-ribbon");
                        // Create object List Item for shareToJam
                        var oListItem = new sap.m.ObjectListItem();
                        oListItem.setTitle(oHeader.getTitle());
                        oListItem.setNumber(oHeader.getNumber());
                        oListItem.setNumberUnit(oHeader.getNumberUnit());
                        var oShareSettings = {
                                object: {
                                    id: window.location.href,
                                    display: oListItem,
                                    share: "SAP Smart Business" //TODO
                                }
                        };
                        return oShareSettings;
                    },
                },additionalShareButtonList : [],
                oEmailSettings: {
                    fGetMailBody: function () {
                        var oHeader = oController.getView().byId("header-ribbon");
                       if(oHeader.getNumberUnit()){
                        return "(" + oController.EVALUATION.getKpiName().trim() + "/" + oHeader.getTitle().trim() + ": " + oHeader.getNumber() +" "+ (oHeader.getNumberUnit()) +")" + "\n" + window.location.href;
                        }
                        else{
                        	return "(" + oController.EVALUATION.getKpiName().trim() + "/" + oHeader.getTitle().trim() + ": " + oHeader.getNumber()  +")" + "\n" + window.location.href;	
                        }
                    }
                },
        };
        return oOptions;
    },
    _initRequestTimeLogChart : function() {
        if((window.location.hostname =="localhost") || (jQuery.sap.getUriParameters().get("sbrequestlog") == "99")) {
            jQuery.sap.require("sap.suite.ui.smartbusiness.drilldown.lib.Performance");
            this._performance = new sap.suite.ui.smartbusiness.drilldown.lib.Performance();
        }
    },
    
    addExportMethodToTable : function() {
        
        var that = this;
        sap.m.Table.prototype.exportData = sap.m.Table.prototype.exportData || function (mSettings) {
               
               jQuery.sap.require("sap.ui.core.util.Export");
               mSettings = mSettings || {};
               if (!mSettings.rows) {
                      mSettings.rows = {
                            path: "/data"
                      };
               }
               /*if (mSettings.columns) {
                      var column = [];
                      var tempCol = [];
                      tempCol = Object.keys(that.getUIComponents().getTable().getModel().getData().data[0]);
                      tempCol.shift();
                      jQuery.each(tempCol, function(iIndex, oColumn) {
                                   column.push(mSettings.columns[tempCol.indexOf(oColumn)]);
                      });
                      mSettings.columns = column;
               }*/
               var oExport = new sap.ui.core.util.Export(mSettings);
               this.addDependent(oExport);
               return oExport;
        }
     },
     
     _exportAsExcel : function() {
    	 var that = this;
        jQuery.sap.require("sap.ui.core.util.ExportTypeCSV");
        var columnNames = [];
        var configuredColumns = [];
        configuredColumns = this.SELECTED_VIEW.getColumns();
        for(var i=0;i<configuredColumns.length; i++) {
            columnNames.push(configuredColumns[i]);
            var textMappingProperty = this.DIMENSION_TEXT_PROPERTY_MAPPING[configuredColumns[i]];
            var uomProperty = this.MEASURE_UNIT_PROPERTY_MAPPING[configuredColumns[i]]
            if(textMappingProperty && textMappingProperty!=configuredColumns[i]) {
                columnNames.push(textMappingProperty);
            }
            if(uomProperty) {
                columnNames.push(uomProperty);
            }
        }

//        jQuery.each(selectedColumns, function(iIndex, oColumn){
//        	columnNames.push(oColumn);
//        	if(that.DIMENSION_TEXT_PROPERTY_MAPPING[oColumn])
//        		columnNames.push(that.DIMENSION_TEXT_PROPERTY_MAPPING[oColumn]);
//        });
//        columnNames = Object.keys(this.getUIComponents().getTable().getModel().getData().data[0]);
//        columnNames.shift();
        var column = jQuery.map(columnNames, function(colName){
               return {
            	   	  name : that.COLUMN_LABEL_MAPPING[colName] || colName,
                      template : {
                            content : {
                                   path: colName,
                            }
                      }
               };
        });
        
        this.getUIComponents().getTable().exportData({
               exportType : new sap.ui.core.util.ExportTypeCSV({separatorChar : ";"}),
               columns : column
        }).saveFile().always(function() {
               this.destroy();
        });    
        
     },

    
    _openAddToHomeDialogBox : function() {
        this.oATHDialog.setModel(this.getView().getModel("i18n"), "i18n");
        this._compactMode ? this.oATHDialog.addStyleClass("sapUiSizeCompact") : this.oATHDialog.removeStyleClass("sapUiSizeCompact");
        this.oATHDialog.open();
    },
    _initAddToHomeDialogBox  : function() {
        var oController = this;
        this.oATHDialogContent = new sap.ui.view({
            type : "XML",
            viewName : "sap.suite.ui.smartbusiness.drilldown.view.AddToHome",
            viewData : this
        });
        this.oATHDialog = new sap.m.Dialog({
            title : "{i18n>SAVE_AS_TILE_DIALOG_TITLE}",
            content : [
                   this.oATHDialogContent  
            ],
            beginButton : new sap.m.Button({
                text : "{i18n>OK_BUTTON}",
                press : function() {
                    oController.oATHDialogContent.getController().publishTile(function(){
                        oController.oATHDialog.close();
                    });
                }
            }), 
            endButton : new sap.m.Button({
                text : "{i18n>CANCEL_BUTTON}",
                press : function() {
                    oController.oATHDialog.close();
                }
            })
        });
        this.oATHDialog.addStyleClass("sbAddToHomeDialogBox");
        this.getView().addDependent(this.oATHDialog);
    },
    getUIComponents : function() {
        var page = this.getView().byId("smartbusiness_drilldown_page");
        var chartToolbar = this.getView().byId("chartToolbar");
        var header = this.getView().byId("header-ribbon");
        var tilesContainer = this.getView().byId("header-container");
        var facetFilter = this.getView().byId("facetFilter");
        var that = this;
        
        return {
            getChart : function() {
                return that.chart;
            },
            getTable : function() {
                return that.table;
            },
            getChartToolbar : function() {
                return chartToolbar;
            },
            getFilter : function() {
                return facetFilter;
            },
            getHeader : function() {
                return header;
            },
            getTileContainer : function() {
                return tilesContainer;
            },
            getPage : function() {
                return page;
            }
        };
    },
    onExit : function() {
        this._abortPendingODataCalls();
        this._detachHashChangeListener();
    }
});

}; // end of sap/suite/ui/smartbusiness/drilldown/view/Drilldown.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.DrilldownConfiguration') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.DrilldownConfiguration");

/**
 * NamesSpace for DDA Configuration API
 */
sap.suite = sap.suite || {};
sap.suite.smartbusiness = sap.suite.smartbusiness || {};
sap.suite.smartbusiness.ddaconfig = sap.suite.smartbusiness.ddaconfig || {};

/**
 * 
 * @param oHeader
 * @returns {sap.suite.smartbusiness.ddaconfig.Header}
 */
sap.suite.smartbusiness.ddaconfig.Header =  function(oHeader) {
    this.oHeader = oHeader;
};
sap.suite.smartbusiness.ddaconfig.Header.prototype = {
    getVisualizationType : function() {
        return this.oHeader.VISUALIZATION_TYPE;
    },
    getReferenceEvaluationId : function() {
        return this.oHeader.REFERENCE_EVALUATION_ID;
    },
    getConfigurationId : function() {
        return this.oHeader.CONFIGURATION_ID;
    },
    getEvaluationId : function() {
        return this.oHeader.EVALUATION_ID;
    },
    getVisualizationOrder : function() {
        return this.oHeader.VISUALIZATION_ORDER;
    },
    isVisible : function() {
        return this.oHeader.VISIBILITY == 1;
    },
    getEvaluation: function() {
    	var that = this;
    	var DATA = this.oHeader.REFERENCE_EVALUATION_INFO;
    	return {
    		getTitle : function() {
    			if(DATA && DATA.TITLE){
    				return DATA.TITLE;
    			}
    			else{
    				return "";
    			}
    		},
    		getSubtitle: function() {
    			if(DATA && DATA.INDICATOR_TITLE){
    				return DATA.INDICATOR_TITLE;
    			}
    			else{
    				return "";
    			}
    		}
    	};	
    },
    isAssociated : function() {
        if(this.getReferenceEvaluationId()) {
            if(this.getReferenceEvaluationId()!== this.getEvaluationId()) {
                return true;
            }
        }
        return false;
    },
    isDimensionRequired : function() {
        return this.getVisualizationType() == "TREND" || this.getVisualizationType() == "COMPARISION";
    },
    getDimension : function() {
        return this.oHeader.DIMENSION;
    },
    getMeasure : function() {
        return this.oHeader.MEASURE;
    },
    getVisibility : function() {
        return this.oHeader.VISIBILITY;
    },
    getConfiguration:function(){
    	var defaultMeasures=[{name:"",color:"Good"},{name:"",color:"Critical"},{name:"",color:"Error"}];
    	var defaultSorting={order : "desc",by : "M"	};
    	var data={
				MEASURES:defaultMeasures,
    			SORTING : defaultSorting
    	};
    	if(this.oHeader.CONFIGURATION){
    		try{
        		data=JSON.parse(this.oHeader.CONFIGURATION);
        		data.MEASURES=data.MEASURES?JSON.parse(data.MEASURES):defaultMeasures;
        		data.SORTING=data.SORTING?JSON.parse(data.SORTING):defaultSorting;	
    		}catch(e){};
    	}
    	return data;
    }
};

/**
 * 
 * @param oChart
 * @returns {sap.suite.smartbusiness.ddaconfig.Chart}
 */
sap.suite.smartbusiness.ddaconfig.Chart = function(oChart) {
    this.oChart = oChart;  
};
sap.suite.smartbusiness.ddaconfig.Chart.prototype = {
    getValueType : function() {
        return this.oChart.VALUE_TYPE; //Possible Values Absolute/Percentage
    },
    getAxisType : function() {
        return this.oChart.AXIS_TYPE; //Possible Values Single/Dual
    },
    getThresholdMeasure : function() {
        return this.oChart.THRESHOLD_MEASURE;
    },
    getChartType : function() {
        var _this = this;
        return  {
            isBar : function() {
                return _this.oChart.CHART_TYPE.toUpperCase() == "BAR"; 
             },
             isColumn : function() {
                 return _this.oChart.CHART_TYPE.toUpperCase() == "COLUMN"; 
             },
             isLine : function() {
                 return _this.oChart.CHART_TYPE.toUpperCase() == "LINE"; 
             },
             isCombinationChart : function() {
                 return _this.oChart.CHART_TYPE.toUpperCase() == "COMBINATION"; 
             },
             isTable : function() {
                 return _this.oChart.CHART_TYPE.toUpperCase() == "TABLE"; 
             },
             isBubble : function() {
                 return _this.oChart.CHART_TYPE.toUpperCase() == "BUBBLE"; 
             },
             getText : function() {
                 return _this.oChart.CHART_TYPE;
             }
        };
    },
    getColorScheme : function() {
        var that = this;
        return {
            getText : function() {
                return that.oChart.COLOR_SCHEME;
            },
            isManual : function() {
                return that.oChart.COLOR_SCHEME == "MANUAL_NON_SEMANTIC" || that.oChart.COLOR_SCHEME == "MANUAL_SEMANTIC";
            },
            isManualSemantic : function() {
                return that.oChart.COLOR_SCHEME == "MANUAL_SEMANTIC";
            },
            isManualNonSematic : function() {
                return that.oChart.COLOR_SCHEME == "MANUAL_NON_SEMANTIC";
            },
            isAutoSemantic : function() {
                return that.oChart.COLOR_SCHEME == 'AUTO_SEMANTIC';
            }
        };
    },
    getDataLimit : function() {
       return this.oChart.DATA_LIMIT;
    },
    isAbsoluteValue : function() {
        return this.getValueType() == "ABSOLUTE";
    },
    isPercentageValue : function() {
        return this.getValueType() == "PERCENTAGE";
    },
    isSingleAxis : function() {
        return this.getAxisType() == "SINGLE";
    },
    isDualAxis : function() {
        return this.getAxisType() == "DUAL";
    },
    isStackingEnabled : function() {
        //TODO
        return false;
    }
    
    /*Chart Types*/
};

/**
 * 
 * @returns {sap.suite.smartbusiness.ddaconfig.Column}
 */
sap.suite.smartbusiness.ddaconfig.Column = function() {
};
sap.suite.smartbusiness.ddaconfig.Column.prototype = {
    getName  : function() {
        return this.oParam.NAME;
    },
    getSortBy : function() {
        return this.oParam.SORT_BY;
    },
    getSortOrder : function() {
      return this.oParam.SORT_ORDER;  
    },
    getType : function() {
        return this.oParam.TYPE;
    },
    getVisibility : function() {
        return this.oParam.VISIBILITY;
    },
    isVisibleInChart : function() {
        return this.oParam.VISIBILITY == "BOTH" || this.oParam.VISIBILITY == "CHART";
    },
    isVisibleInTable : function() {
        return this.oParam.VISIBILITY == "BOTH" || this.oParam.VISIBILITY == "TABLE";
    },
    getColor : function() {
        return this.oParam.COLOR;
    },
    isStacked : function() {
        return this.oParam.STACKING == 1;
    },
    getStacking : function() {
      return this.oParam.STACKING;  
    },
    isDimension : function() {
        return this.getType().toUpperCase() == "DIMENSION";
    },
    isMeasure : function() {
        return this.getType().toUpperCase() == "MEASURE";
    },
    getAxis : function() {
        return this.oParam.AXIS;
    }
};

/**
 * 
 * @param oParam
 * @returns {sap.suite.smartbusiness.ddaconfig.Dimension}
 */
sap.suite.smartbusiness.ddaconfig.Dimension = function(oParam) {
    this.oParam = oParam;
};
sap.suite.smartbusiness.ddaconfig.Dimension.prototype = new sap.suite.smartbusiness.ddaconfig.Column();

/**
 * 
 * @param oParam
 * @returns {sap.suite.smartbusiness.ddaconfig.Measure}
 */
sap.suite.smartbusiness.ddaconfig.Measure = function(oParam) {
    this.oParam = oParam;
};
sap.suite.smartbusiness.ddaconfig.Measure.prototype = new sap.suite.smartbusiness.ddaconfig.Column();


/**
 * 
 * @param oParam
 * @returns {sap.suite.smartbusiness.ddaconfig.Filter}
 */
sap.suite.smartbusiness.ddaconfig.Filter = function(oParam) {
    this.oFilter = oParam;
};
sap.suite.smartbusiness.ddaconfig.Filter.prototype = {
    getName : function() {
        return this.oFilter.DIMENSION;
    },
    isVisible  : function() {
        return this.oFilter.VISIBILITY == 1;
    }
};


/**
 * 
 * @param oParam
 * @returns {sap.suite.smartbusiness.ddaconfig.View}
 */
sap.suite.smartbusiness.ddaconfig.View = function(oParam) {
    this._viewId = oParam.CONFIGURATION_ID;
    this._evaluationId = oParam.EVALUATION_ID;
    this._title  = oParam.TEXT;
    this._order = oParam.CONFIG_ORDER;
    this._columns = [];this._dimensions = []; this._measures = []; this._filters = [];
    this._dimensionMap = {}; this._measureMap = {}; this._filterMap = {};
    this._headers  = [], this._chartConfig = [];
    this._additionalLanguageTitles = [];
};
sap.suite.smartbusiness.ddaconfig.View.prototype = {
    getTitle : function() {
        return this._title;
    },
    getId : function() {
        return this._viewId;
    },
    getEvaluationId : function() {
      return this._evaluationId;  
    },
    getViewOrder : function() {
        return this._order;
    },
    getFilters : function() {
        return this._filters;
    },
    getColumns  : function() {
        return this._columns;
    },
    getDimensions : function () {
        return this._dimensions;  
    },
    getMeasures : function() {
      return this._measures;  
    },
    findDimensionByName : function (dimensionName) {
        if(this._dimensionMap[dimensionName]) {
            return this._dimensionMap[dimensionName];
        } else {
            throw new Error("Invalid Dimension Name : "+dimensionName);
        }
        
    },
    findMeasureByName : function (measureName) {
        if(this._measureMap[measureName]) {
            return this._measureMap[measureName];
        } else {
            throw new Error("Invalid Dimension Name : "+measureName);
        }
        
    },
    findColumnByName : function(columnName) {
        if(this._dimensionMap[columnName]) {
            return this._dimensionMap[columnName];
        } else if(this._measureMap[columnName]) {
            return this._measureMap[columnName];
        } else {
            throw new Error("Invalid Column Name : "+columnName);
        }
    },
    getHeaders : function() {
        return this._headers;
    },
    getChartConfiguration : function() {
        return this._chartConfig;
    },
    getAdditionalLanguageTitles: function() {
        return this._additionalLanguageTitles;
    }
};

/*
 * Static functions to read entire configuration and associate it to VIEW; 
 */
sap.suite.smartbusiness.ddaconfig.View.setDimensionAndMeasures = function(oColumns, oThis) {
    oColumns.forEach(function(oValue, index, aArray) {
        if(oValue.CONFIGURATION_ID == this.getId()) {
            this._columns.push(oValue.NAME);
            if(oValue.TYPE.toUpperCase() == "MEASURE") {
                this._measureMap[oValue.NAME] = new sap.suite.smartbusiness.ddaconfig.Measure(oValue);
                this._measures.push(oValue.NAME);
            } else if(oValue.TYPE.toUpperCase() == "DIMENSION") {
                this._dimensionMap[oValue.NAME] = new sap.suite.smartbusiness.ddaconfig.Dimension(oValue);
                this._dimensions.push(oValue.NAME);
            }
        }
    }, oThis);
};
sap.suite.smartbusiness.ddaconfig.View.setFilters = function(oFilters, oThis) {
    oFilters.forEach(function(oValue, index, aArray){
        this._filters.push(oValue.DIMENSION);
        this._filterMap[oValue.DIMENSION] = new sap.suite.smartbusiness.ddaconfig.Filter(oValue);
    
    }, oThis);
};
sap.suite.smartbusiness.ddaconfig.View.setConfig = function(oConfig, oThis) {
    var Segments = sap.suite.smartbusiness.ddaconfig.Configuration.Constants;
    for(var eachSegment in Segments) {
        var func = Segments[eachSegment].func;
        if(jQuery.sap.startsWith(func,"is")) {
            sap.suite.smartbusiness.ddaconfig.View.prototype[func] = function() {
              return true;  
            };
        } else {
            sap.suite.smartbusiness.ddaconfig.View.prototype[func] = function() {
              return null;  
            };
        }
    }
    oConfig.forEach(function(oValue, index, aArray) {
        var tempObject = Segments[oValue.PROPERTY_TYPE];
        if(tempObject) {
            var func = tempObject.func;
            if(jQuery.sap.startsWith(func,"is")) {
                sap.suite.smartbusiness.ddaconfig.View.prototype[func] = function() {
                  return oValue.VISIBILITY == 1;  
                };
            } else {
                sap.suite.smartbusiness.ddaconfig.View.prototype[func] = function() {
                  return oValue.PROPERTY_VALUE;  
                };
            }
        } else {
            jQuery.sap.log.error("Unknown Property_Name : " + oValue.PROPERTY_TYPE);
        }
    
    },oThis);
};

sap.suite.smartbusiness.ddaconfig.View.setHeader = function(oHeader, oThis) {
    if(oHeader.length) {
        oHeader.forEach(function(oValue, index, array) {
            this.getHeaders().push(new sap.suite.smartbusiness.ddaconfig.Header(oValue));
        
        }, oThis);
        oThis.getHeaders().sort(function(o1, o2) {
            if(o1.VISUALIZATION_ORDER > o2.VISUALIZTION_ORDER) {
                return 1;
            } 
            return -1;
        });
    }
};
sap.suite.smartbusiness.ddaconfig.View.setChart = function(oChart, oThis) {
    if(oChart.length) {
        oChart.forEach(function(oValue, index, array) {
            if(this.getId() == oValue.CONFIGURATION_ID) {
                this.getChartConfiguration().push(new sap.suite.smartbusiness.ddaconfig.Chart(oValue));
            }
        }, oThis);
    }
};

sap.suite.smartbusiness.ddaconfig.View.setAdditionalLanguageTitles = function(oMasterText, oThis) {
    if(oMasterText.length) {
        oMasterText.forEach(function(oValue, index, array) {
            if(this.getId() == oValue.CONFIGURATION_ID) {
                this.getAdditionalLanguageTitles().push(oValue);
            }
        }, oThis);
    }
};

/**
 * 
 * @param evaluationId
 * @returns {sap.suite.smartbusiness.ddaconfig.Configuration}
 */
sap.suite.smartbusiness.ddaconfig.Configuration = function(evaluationId, MODE) {
    this.evaluationId = evaluationId;
    var defautView = null;
    this.MODE = !!MODE;
    var viewMap = {};
    var _notConfigured = true;
    var debugMode  = jQuery.sap.getUriParameters().get("debug_ddaconfig") == "true";
    var _index = -1;
    var init = function(oMaster, oConfig, oHeader, oFilter, oColumns, oChart, oMasterText) {
        oMaster.forEach(function(v,i,a) {
            var viewId = v.CONFIGURATION_ID;
            if(viewId) {
                _index++;
                var vObject = new sap.suite.smartbusiness.ddaconfig.View(v);
                viewMap[viewId] = vObject;
                if(_index == 0) {
                    defautView = viewId;
                }
                sap.suite.smartbusiness.ddaconfig.View.setConfig(oConfig, vObject);
                sap.suite.smartbusiness.ddaconfig.View.setDimensionAndMeasures(oColumns, vObject);
                sap.suite.smartbusiness.ddaconfig.View.setFilters(oFilter, vObject);
                sap.suite.smartbusiness.ddaconfig.View.setHeader(oHeader, vObject);
                sap.suite.smartbusiness.ddaconfig.View.setChart(oChart, vObject);
                sap.suite.smartbusiness.ddaconfig.View.setAdditionalLanguageTitles(oMasterText, vObject);
                _notConfigured= false;
            }
        });
        
    };
    this.getMaxViewOrder = function() {
    	var max_order = 0;
    	for (var view in viewMap) {
    		max_order = Math.max(max_order, viewMap[view].getViewOrder());
    	}
    	return max_order;
    };
    this.hasNoConfiguration = function() {
        return _notConfigured;
    };
    this.findViewById  = function(vId) {
        if(viewMap[vId]) {
            return viewMap[vId];
        }
        return null;
    },
    this.getDefaultViewId = function() {
      return defautView;  
    },
    this.getDefaultView = function() {
      if(defautView) {
          return viewMap[defautView];
      }
      return null;
    };
    this.removeViewById=function(viewId){
        delete viewMap[viewId];
    };
    this.removeAllViews=function(viewId){
        viewMap = {};
    };
    this.getAllViews = function() {
        var views = [];
        for(var each in viewMap) {
            var tempObj = {};
            tempObj["ID"] = each;
            tempObj["TITLE"] = viewMap[each].getTitle() || "-NA- ("+each+")";
            views.push(tempObj);
        }
        return views;
    };
    this.getTree = function() {
        var tree= {name : "Evaluation", children : []};
        var allViews = this.getAllViews();
        for(var each in allViews) {
            var eachView = {
                    name : allViews[each].TITLE || "NA",
                    children : []
            };
            
            var view = this.findViewById(allViews[each].ID);

            var measures = view.getMeasures();
            var measure = {
                    name : "measures",
                    children : []
             };
            eachView.children.push(measure);
            measures.forEach(function(value, index, array) {
                measure.children.push({
                    name : value,
                    children :[]
                });
            }, this);

            
            var dimensions = view.getDimensions();
            var dimension = {
                    name : "dimensions",
                    children : []
             };
            eachView.children.push(dimension);
            dimensions.forEach(function(value, index, array) {
                dimension.children.push({
                    name : value,
                    children :[]
                });
            }, this);
            
            var headers = view.getHeaders();
            var header = {
                    name : "header",
                    children : []
            };
            eachView.children.push(header);
            headers.forEach(function(each) {
                
                var firstHeader = {
                        name : "1",
                        children : []
                };
                header.children.push(firstHeader);
                
                firstHeader.children.push({
                    name : "Visualization Type = "+each.getVisualizationType(),
                    children : []
                 });
                firstHeader.children.push({
                    name : "Reference Evaluation = "+each.getReferenceEvaluationId(),
                    children : []
                 });
            });
            tree.children.push(eachView);
        }
        return tree;
    };
    
    var _encodeUrl = function(uRi) {
        return jQuery.sap.encodeURL(uRi);
    };
    var _fetchConfiguration = function() {
        var that = this;
        var oDataModel = null;
        var serviceUri = "/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata";
        if(sap.suite.smartbusiness.odata) {
            oDataModel = sap.suite.smartbusiness.odata.getModelByServiceUri(serviceUri);
        } else {
            oDataModel = new sap.ui.model.odata.ODataModel(serviceUri, true);
        }
        var masterUri = "/DDA_MASTER?$filter="+_encodeUrl("EVALUATION_ID eq '"+this.evaluationId+"'")+"&$orderby=CONFIG_ORDER";
        var configUri = "/DDA_CONFIG?$filter="+_encodeUrl("EVALUATION_ID eq '"+this.evaluationId+"'");
        var headerUri = "/DDA_HEADER?$expand=REFERENCE_EVALUATION_INFO&$filter="+_encodeUrl("EVALUATION_ID eq '"+this.evaluationId+"'");
        var filtersUri = "/DDA_FILTERS?$filter="+_encodeUrl("EVALUATION_ID eq '"+this.evaluationId+"'");
        var columnsUri = "/DDA_COLUMNS?$filter="+_encodeUrl("EVALUATION_ID eq '"+this.evaluationId+"'")+"&$orderby=COLUMNS_ORDER";
        var chartUri = "/DDA_CHART?$filter="+_encodeUrl("EVALUATION_ID eq '"+this.evaluationId+"'");
        var masterTextUri = "/DDA_MASTER_TEXT?$filter="+_encodeUrl("EVALUATION_ID eq '"+this.evaluationId+"'");
        var request1 = oDataModel.createBatchOperation(masterUri,"GET");
        var request2 = oDataModel.createBatchOperation(configUri,"GET");
        var request3 = oDataModel.createBatchOperation(headerUri,"GET");
        var request4 = oDataModel.createBatchOperation(filtersUri,"GET");
        var request5 = oDataModel.createBatchOperation(columnsUri,"GET");
        var request6 = oDataModel.createBatchOperation(chartUri,"GET");
        var request7 = oDataModel.createBatchOperation(masterTextUri,"GET");
        oDataModel.addBatchReadOperations([request1, request2, request3, request4, request5, request6, request7]);
        oDataModel.submitBatch(function(data, response) {
            var A = data.__batchResponses;
            if(debugMode) {
                jQuery.sap.log.info("DDA-MASTER : ",JSON.stringify(A[0]));
                jQuery.sap.log.info("DDA-CONFIG : ",JSON.stringify(A[1]));
                jQuery.sap.log.info("DDA-HEADER : ",JSON.stringify(A[2]));
                jQuery.sap.log.info("DDA-FILTERS : ",JSON.stringify(A[3]));
                jQuery.sap.log.info("DDA-COLUMNS : ",JSON.stringify(A[4]));
                jQuery.sap.log.info("DDA-CHART : ",JSON.stringify(A[5]));
                jQuery.sap.log.info("DDA-MASTER-TEXT : ",JSON.stringify(A[6]));
            }
            
            sap.suite.smartbusiness.ddaconfig.MasterData = {};
            sap.suite.smartbusiness.ddaconfig.MasterData.MASTER = A[0].data.results;
            sap.suite.smartbusiness.ddaconfig.MasterData.CONFIG = A[1].data.results;
            sap.suite.smartbusiness.ddaconfig.MasterData.HEADER = A[2].data.results;
            sap.suite.smartbusiness.ddaconfig.MasterData.FILTERS = A[3].data.results;
            sap.suite.smartbusiness.ddaconfig.MasterData.COLUMNS = A[4].data.results;
            sap.suite.smartbusiness.ddaconfig.MasterData.CHART = A[5].data.results;
            
            init.call(that,A[0].data.results,A[1].data.results,A[2].data.results,A[3].data.results,A[4].data.results,A[5].data.results,A[6].data.results);
        }, function(errorObject){
            throw new Error("Failed to fetch DDA Configuration");
        },false);
    };
    _fetchConfiguration.call(this);
};

/**
 * Constants Defined for All Segment Types
 */
sap.suite.smartbusiness.ddaconfig.Configuration.Constants = {
    SAP_FILTER : {
        desc : "Flag whether filter is enabled",
        func : "isFilterEnabled"
    },
    SAP_HEADER : {
        desc : "Flag whether header is enabled",
        func : "isHeaderEnabled"
    },
    SAP_AGGREGATE_VALUE : {
        desc : "Flag whether aggregate kpi value is enabled",
        func : "isAggregateValueEnabled"
    },
    QUERY_SERVICE_URI : {
        desc : "Evaluation Query Service Uri",
        func : "getQueryServiceUri"
    },
    QUERY_ENTITY_SET : {
        desc : "Result path for the query service uri",
        func : "getEntitySet"
    }
};


sap.suite.smartbusiness.ddaconfig.writeservices = (function() {
    var _instance = null;
    return {
        getInstance : function(bForce) {
            jQuery.sap.require("sap.suite.ui.smartbusiness.lib.DrilldownWriteService");
            if(_instance && !bForce) {
                return _instance;
            } else {
                _instance = new sap.suite.smartbusiness.ddaconfig.DrilldownWriteService();
            }
            return _instance;
        }
    }
})();
}; // end of sap/suite/ui/smartbusiness/lib/DrilldownConfiguration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.DrilldownModel') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.DrilldownModel");


/**
 * NamesSpace for DDA Configuration API
 */
sap.suite = sap.suite || {};
sap.suite.smartbusiness = sap.suite.smartbusiness || {};
sap.suite.smartbusiness.ddaconfig = sap.suite.smartbusiness.ddaconfig || {};

sap.suite.smartbusiness.ddaconfig.Model = function(evaluationId, viewId, i18n) {
    this.ddaConfigurator = null;
    this.viewId = viewId;
    this.selectedView = null;
    this.i18nModel=i18n;
    this.evaluationId = evaluationId;
    if(this.evaluationId) {
        this._init();
    }
};
sap.suite.smartbusiness.ddaconfig.Model._instances = {};
sap.suite.smartbusiness.ddaconfig.Model.languageTexts={
		ALL_LANGUAGES:[],
		CURRENT_LANGUAGE:[],
		isLoaded:false
};
sap.suite.smartbusiness.ddaconfig.Model.getInstance = function(evaluationId, bForce, i18n) {
    function getInstance(eId) {
        var modelInstance = new sap.suite.smartbusiness.ddaconfig.Model(eId,null,i18n);
        sap.suite.smartbusiness.ddaconfig.Model._instances[eId] = modelInstance;
        return sap.suite.smartbusiness.ddaconfig.Model._instances[eId];
    }
    if(bForce) {
        return getInstance(evaluationId,null,i18n);
    }
    if(sap.suite.smartbusiness.ddaconfig.Model._instances[evaluationId]) {
        return sap.suite.smartbusiness.ddaconfig.Model._instances[evaluationId];  
    } else {
        return getInstance(evaluationId,null,i18n);
    }
};
sap.suite.smartbusiness.ddaconfig.Model.prototype = {
    _init : function(evaluationId) {
        this.ddaConfigurator = new sap.suite.smartbusiness.ddaconfig.Configuration(this.evaluationId);
        this.EVALUATION_DATA = sap.suite.smartbusiness.kpi.getEvaluationById({
           id : this.evaluationId,
           cache : true,
           filters:true,
           thresholds:true
        });
        this._setModel();
    },
    NEW_VIEWID:"~NA~",
    _setModel : function() {
    	this._oModel=new sap.ui.model.json.JSONModel(this.getModelDataForDDAConfiguration());
    	try{
    		this._oModel.setSizeLimit(9999);
    	}catch(e){	
    	}
    },
    removeAllViews:function(){
    	this.getConfigurator().removeAllViews();
    	this._oModel.setData(this.getModelDataForDDAConfiguration());
    },
    bindModel:function(oControl,sName){
    	if(sName){
    		oControl.setModel(this._oModel,sName);
    	}else{
    		oControl.setModel(this._oModel);
    	}
    	this._oModel.refresh();
    },
    getConfigurator : function() {
        return this.ddaConfigurator;
    },
    setEvaluationId : function(evaluationId) {
        this.evaluationId = evaluationId;
        this._init()
    },
    setViewId : function(viewId) {
        this.viewId = viewId;
        this.selectedView = this.ddaConfigurator.findViewById(this.viewId);
        this._setModel();
    },
    fetchLanguageData:function(sName,fnS){
    	if(sap.suite.smartbusiness.ddaconfig.Model.languageTexts.isLoaded){
    		fnS({
    			ALL_LANGUAGES:sap.suite.smartbusiness.ddaconfig.Model.languageTexts.ALL_LANGUAGES,
    			CURRENT_LANGUAGE:sap.suite.smartbusiness.ddaconfig.Model.languageTexts.CURRENT_LANGUAGE
    		});
    	}else{
    		var locale_language = sap.ui.getCore().getConfiguration().getLocale().getLanguage().toUpperCase();
    		new sap.ui.model.odata.ODataModel("/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata", true)
    								.read("/LANGUAGE?$select=SPRAS,LAISO", null, null, true, 
    										function(data) {
    										sap.suite.smartbusiness.ddaconfig.Model.languageTexts.isLoaded=true;
    										var lang={ALL_LANGUAGES:[],CURRENT_LANGUAGE:[]};
    											for(var i = 0; i < data.results.length; ++i) {
    												if(data.results[i]["LAISO"] == locale_language) {
    													lang["CURRENT_LANGUAGE"] = data.results[i]["SPRAS"];
    													//remove current language from the list of addnl languages
    													data.results.splice(i, 1);
    													break;
    												}
    											}
    										lang["ALL_LANGUAGES"] = data.results;
    							    		sap.suite.smartbusiness.ddaconfig.Model.languageTexts.ALL_LANGUAGES=lang["ALL_LANGUAGES"];
    							    		sap.suite.smartbusiness.ddaconfig.Model.languageTexts.CURRENT_LANGUAGE=lang["CURRENT_LANGUAGE"];
    										fnS(lang);
    											
    										});
    	
    	}
    },
    _getEvalData:function(sId){
		try{
    		var evalData=sap.suite.smartbusiness.kpi.getEvaluationById({
 	           id : sId, cache : true, filters:false, thresholds:false, getDDAEvaluation:true
 	        });
    		return evalData;
		}catch(e){
			return {};
		}
    },
    getDefaultModelData:function(){
    	var that=this;
    	try{
    		var dimensions=sap.suite.smartbusiness.odata.getAllDimensions(this.EVALUATION_DATA.ODATA_URL,this.EVALUATION_DATA.ODATA_ENTITYSET);
    		var measures=sap.suite.smartbusiness.odata.getAllMeasures(this.EVALUATION_DATA.ODATA_URL,this.EVALUATION_DATA.ODATA_ENTITYSET);
            var mProperties = sap.suite.smartbusiness.odata.properties(this.EVALUATION_DATA.ODATA_URL,this.EVALUATION_DATA.ODATA_ENTITYSET);
            var COLUMN_LABEL_MAPPING = mProperties.getLabelMappingObject();
    	}catch(e){
    		var dimensions=[];
    		var measures=[];
    	}
    	function _getEvaluationTitle(sId){
    		return that._getEvalData(sId).INDICATOR_TITLE;
    	}
    	function _getEvaluationSubTitle(sId){
    		return that._getEvalData(sId).TITLE;
    	}
    	function _getEvaluationIndicator(sId){
    		return that._getEvalData(sId).INDICATOR;
    	}
    	function getMeasureWithLabels(){
    		
    		var msrLabel=[];
    		for(var i=0;i<measures.length;i++){
    			msrLabel.push({
    				NAME:measures[i],
    				LABEL:COLUMN_LABEL_MAPPING[measures[i]]
    			})
    			
    		}
    		//msrLabel.unshift(this.i18nModel.getProperty("SELECT_NONE"));
    		return msrLabel;
    		
    	}
        var modelData =  {
        		CONFIG:{
        			SAP_AGGREGATE_VALUE:true
        		},
            	ID_EDITABLE:true,
            	INDICATOR:this.EVALUATION_DATA.INDICATOR,
            	ID : "",
            	TITLE : "",
            	EVALUATION_TITLE:this.EVALUATION_DATA.TITLE,
                QUERY_SERVICE_URI : this.EVALUATION_DATA.ODATA_URL,
                QUERY_ENTITY_SET : this.EVALUATION_DATA.ODATA_ENTITYSET,
            	TEXT:"", 
            	MAIN_MEASURE:"",
            	THRESHOLD_MEASURE:"",
                ALL_DIMENSIONS:dimensions,
                ALL_MEASURES:measures,
                ALL_MEASURES_LABELS:getMeasureWithLabels(),
                VALUE_TYPES : [
                       {key : "ABSOLUTE", text : this.i18nModel.getProperty("ABSOLUTE_VALUES")},           
                       {key : "PERCENTAGE", text : this.i18nModel.getProperty("PERCENTAGE_VALUES")}           
                ],
                AXIS_TYPES : [
                       {key : "SINGLE", text : this.i18nModel.getProperty("SINGLE_AXIS")},           
                       {key : "DUAL", text : this.i18nModel.getProperty("DUAL_AXIS")}           
                ],
                AXIS_TYPE : "SINGLE",
                VALUE_TYPE : "ABSOLUTE",
                CHART_TYPE: "Column",
                CHART_TYPES : [
                                   {key : "Bar", text : this.i18nModel.getProperty("BARS")},
                                   {key : "Column", text :this.i18nModel.getProperty("COLUMNS")},
                                   {key : "Line", text : this.i18nModel.getProperty("LINES")},
                                   {key : "Combination", text : this.i18nModel.getProperty("COLUMNS_AND_LINES")},
                                   {key : "Bubble", text : this.i18nModel.getProperty("BUBBLES")},
                                   {key : "Table", text : this.i18nModel.getProperty("TABLE")}
                               ],
                DATA_MODES :[
                             {key : "DUMMY", text : this.i18nModel.getProperty("DUMMY_DATA")},
                             {key : "RUNTIME", text : this.i18nModel.getProperty("ACTUAL_BACKEND_DATA")}
                             
                ],
                DATA_MODE:"DUMMY",
                DATA_LIMIT :  200,
                DATA_LIMITATIONS :false,
                COLOR_SCHEME : "NONE",
                COLOR_SCHEMES : [
                                 
                                 {key : "AUTO_SEMANTIC", text :this.i18nModel.getProperty("AUTO_SEMANTIC_COLORS")},
                                 {key : "MANUAL_SEMANTIC", text : this.i18nModel.getProperty("MANUAL_SEMANTIC_COLORS")},
                                 {key : "MANUAL_NON_SEMANTIC", text : this.i18nModel.getProperty("MANUAL_COLORS")},
                                 {key : "NONE", text : this.i18nModel.getProperty("DEFAULT_COLORS")}
                    ],
            	"MANUAL_NON_SEMANTIC":	[ 	
    			                  	  	{color:sap.ca.ui.charts.ChartColor.sapUiChart1,index:0},
    			                  	  	{color:sap.ca.ui.charts.ChartColor.sapUiChart2,index:1},
    			                  	  	{color:sap.ca.ui.charts.ChartColor.sapUiChart3,index:2},
    			                  	  	{color:sap.ca.ui.charts.ChartColor.sapUiChart4,index:3},
    			                  	  	{color:sap.ca.ui.charts.ChartColor.sapUiChart5,index:4},
    			                  	  	{color:sap.ca.ui.charts.ChartColor.sapUiChart6,index:5},
    			                  	  	{color:sap.ca.ui.charts.ChartColor.sapUiChart7,index:6},
    			                  	  	{color:sap.ca.ui.charts.ChartColor.sapUiChart8,index:7},
    			                  	  	{color:sap.ca.ui.charts.ChartColor.sapUiChart9,index:8},
    			                  	  	{color:sap.ca.ui.charts.ChartColor.sapUiChart10,index:9},
    			                  	  	{color:sap.ca.ui.charts.ChartColor.sapUiChart11,index:10}
    			                  	 ],
              	"MANUAL_SEMANTIC": [	 
              	                  	 {color:"sapCaUiChartSemanticColor-Neutral-Dark",index:0},
              	                  	 {color:"sapCaUiChartSemanticColor-Neutral",index:1},
              	                  	 {color:"sapCaUiChartSemanticColor-Neutral-Light",index:2},
              	                  	 {color:"sapCaUiChartSemanticColor-Good-Dark",index:3},
              	                  	 {color:"sapCaUiChartSemanticColor-Good",index:4},
              	                  	 {color:"sapCaUiChartSemanticColor-Good-Light",index:5},
              	                  	 {color:"sapCaUiChartSemanticColor-Critical-Dark" ,index:6},
              	                  	 {color:"sapCaUiChartSemanticColor-Critical",index:7},
              	                  	 {color:"sapCaUiChartSemanticColor-Critical-Light",index:8},
              	                  	 {color:"sapCaUiChartSemanticColor-Bad-Dark",index:9},
              	                  	 {color:"sapCaUiChartSemanticColor-Bad",index:10},
              	                  	 {color:"sapCaUiChartSemanticColor-Bad-Light",index:11}
              	                  ],
                COLUMNS : [

                ],
                SIBLING_EVALUATIONS:[
                 ],
                ASSOCIATED_EVALUATIONS:[
                ],
                ADDITIONAL_LANGUAGE_TITLES: [],
                FILTERS : [],
                HEADER_EVALUATIONID:{},
                HEADERS_VISIBLE:[
                                 /*
                                 {
                                     EVALUATION_ID : this.evaluationId,
                                     CONFIGURATION_ID : this.NEW_VIEWID,
                                     REFERENCE_EVALUATION_ID : this.evaluationId,
                                     VISUALIZATION_TYPE : 'NT',
                                     VISUALIZATION_ORDER : 1,
                                     DIMENSION : dimensions[0],
                                     SORT_BY:"",
                                     SORT_ORDER:"MD",
                                     ALL_MEASURES:measures,
                                     VISIBILITY : 1,
                                     ALL_DIMENSIONS:dimensions,
                                     visible : true,
                                     TITLE : _getEvaluationTitle(this.evaluationId),
                                     SUBTITLE : _getEvaluationSubTitle(this.evaluationId),
                                     INDICATOR:_getEvaluationIndicator(this.evaluationId)
                                 }*/
                                 ],
                HEADERS : [
                           {
                               EVALUATION_ID : this.evaluationId,
                               CONFIGURATION_ID : this.NEW_VIEWID,
                               REFERENCE_EVALUATION_ID : this.evaluationId,
                               VISUALIZATION_TYPE : 'NT',
                               VISUALIZATION_TYPE_INDEX:0,
                               VISUALIZATION_ORDER : 1,
                               DIMENSION : dimensions[0],
                               SORT_BY:"",
                               SORT_ORDER:"MD",
                               ALL_MEASURES:measures,
                               VISIBILITY : 1,
                               ALL_DIMENSIONS:dimensions,
                               visible : true,
                               TITLE : _getEvaluationTitle(this.evaluationId),
                               SUBTITLE : _getEvaluationSubTitle(this.evaluationId),
                               GROUPING_TITLE:"",
                               INDICATOR:_getEvaluationIndicator(this.evaluationId)
                           },
                           {
                               EVALUATION_ID : this.evaluationId,
                               CONFIGURATION_ID : this.NEW_VIEWID,
                               REFERENCE_EVALUATION_ID : this.evaluationId,
                               VISUALIZATION_TYPE : 'AT',
                               VISUALIZATION_TYPE_INDEX:1,
                               VISUALIZATION_ORDER : 1,
                               DIMENSION :  dimensions[0],
                               SORT_BY:"",
                               SORT_ORDER:"MD",
                               ALL_MEASURES:measures,
                               ALL_DIMENSIONS:dimensions,
                               VISIBILITY : 1,
                               visible : false,
                               TITLE : _getEvaluationTitle(this.evaluationId),
                               SUBTITLE : _getEvaluationSubTitle(this.evaluationId),
                               GROUPING_TITLE:"",
                               INDICATOR:_getEvaluationIndicator(this.evaluationId)
                           },
                           {
                               EVALUATION_ID : this.evaluationId,
                               CONFIGURATION_ID : this.NEW_VIEWID,
                               REFERENCE_EVALUATION_ID : this.evaluationId,
                               VISUALIZATION_TYPE : 'CT',
                               VISUALIZATION_TYPE_INDEX:2,
                               VISUALIZATION_ORDER : 1,
                               DIMENSION :  dimensions[0],
                               SORT_BY:"",
                               SORT_ORDER:"MD",
                               ALL_MEASURES:measures,
                               ALL_DIMENSIONS:dimensions,
                               VISIBILITY : 1,
                               visible : false,
                               TITLE : _getEvaluationTitle(this.evaluationId),
                               SUBTITLE : _getEvaluationSubTitle(this.evaluationId),
                               GROUPING_TITLE:"",
                               INDICATOR:_getEvaluationIndicator(this.evaluationId)
                           },
                           {
                               EVALUATION_ID : this.evaluationId,
                               CONFIGURATION_ID : this.NEW_VIEWID,
                               REFERENCE_EVALUATION_ID : this.evaluationId,
                               VISUALIZATION_TYPE : 'TT',
                               VISUALIZATION_TYPE_INDEX:3,
                               VISUALIZATION_ORDER : 1,
                               DIMENSION :  dimensions[0],
                               SORT_BY:"",
                               SORT_ORDER:"MD",
                               ALL_MEASURES:measures,
                               ALL_DIMENSIONS:dimensions,
                               VISIBILITY : 1,
                               visible : false,
                               TITLE : _getEvaluationTitle(this.evaluationId),
                               SUBTITLE : _getEvaluationSubTitle(this.evaluationId),
                               GROUPING_TITLE:"",
                               INDICATOR:_getEvaluationIndicator(this.evaluationId)
                           },
                           {
                               EVALUATION_ID : this.evaluationId,
                               CONFIGURATION_ID : this.NEW_VIEWID,
                               REFERENCE_EVALUATION_ID : this.evaluationId,
                               VISUALIZATION_TYPE : 'CM',
                               VISUALIZATION_TYPE_INDEX:4,
                               VISUALIZATION_ORDER : 1,
                               DIMENSION :  dimensions[0],
                               SORT_BY:"",
                               SORT_ORDER:"MD",
                               MEASURE1:measures[0],
                               MEASURE2:measures[1]||measures[0],
                               MEASURE3:"",
                               COLOR1:"Good",
                               COLOR2:"Critical",
                               COLOR3:"Error",
                               ALL_MEASURES:measures,
                               ALL_DIMENSIONS:dimensions,
                               VISIBILITY : 1,
                               visible : false,
                               TITLE : _getEvaluationTitle(this.evaluationId),
                               SUBTITLE : _getEvaluationSubTitle(this.evaluationId),
                               GROUPING_TITLE:_getEvaluationTitle(this.evaluationId)+" "+_getEvaluationSubTitle(this.evaluationId),
                               INDICATOR:_getEvaluationIndicator(this.evaluationId)
                           }
                           
                ],
                SELECTED_VIEW : "",
                ALL_VIEWS : this.ddaConfigurator.getAllViews(),
                ALL_LANGUAGES: [],
                CURRENT_LANGUAGE: "E"
            };
            modelData.HEADER_EVALUATIONID[this.evaluationId]=true;
            //modelData.TITLE=this.EVALUATION_DATA.TITLE;
            this.fetchLanguageData("SB_DDACONFIG_LANG",function(o){
            	modelData.ALL_LANGUAGES=o.ALL_LANGUAGES;
            	modelData.CURRENT_LANGUAGE=o.CURRENT_LANGUAGE;
            });
            return modelData;
    },
    getModelDataForDDAConfiguration : function() {
    	var that=this;
        var tileTypes=["NT","AT","CT","TT","CM"];
    	function getDataLimit(n){
    		return (n==-1 || !n)?200:n;
    	}
    	function _getAllDimensionsForEval(sId){
    		try{
        		var evalData=sap.suite.smartbusiness.kpi.getEvaluationById({
     	           id : sId,cache : true, filters:true,thresholds:true
     	        });
        		return sap.suite.smartbusiness.odata.getAllDimensions(evalData.ODATA_URL,evalData.ODATA_ENTITYSET);
    		}catch(e){
    			return [];
    		}
    	}
    	function _getAllMeasuresForEval(sId){
    		try{
        		var evalData=sap.suite.smartbusiness.kpi.getEvaluationById({
     	           id : sId,cache : true, filters:true,thresholds:true
     	        });
        		return sap.suite.smartbusiness.odata.getAllMeasures(evalData.ODATA_URL,evalData.ODATA_ENTITYSET);
    		}catch(e){
    			return [];
    		}
    	}
    	var measures=sap.suite.smartbusiness.odata.getAllMeasures(this.EVALUATION_DATA.ODATA_URL,this.EVALUATION_DATA.ODATA_ENTITYSET);
    	function _getEvaluationTitle(sId){
    		var evaluationData = that._getEvalData(sId);
    		return (evaluationData && evaluationData.INDICATOR_TITLE) ? evaluationData.INDICATOR_TITLE : "";
    	}
    	function _getEvaluationSubTitle(sId){
    		var evaluationData = that._getEvalData(sId);
    		return (evaluationData && evaluationData.TITLE) ? evaluationData.TITLE : "";
    	}
    	function _getEvaluationIndicator(sId){
    		var evaluationData = that._getEvalData(sId);
    		return (evaluationData && evaluationData.INDICATOR) ? evaluationData.INDICATOR : "";
    	}
    	var modelData=this.getDefaultModelData();
        if(this.selectedView) {
            /**
             * Filling ALL Views Array
             */
        		var that=this;
            modelData.ALL_VIEWS = this.ddaConfigurator.getAllViews();
            modelData.SELECTED_VIEW = this.selectedView.getId();
            modelData.ID = this.selectedView.getId();
            modelData.TITLE = this.selectedView.getTitle();
            modelData.ADDITIONAL_LANGUAGE_TITLES = this.selectedView.getAdditionalLanguageTitles();
            modelData.ID_EDITABLE = false;
            var chartConfiguration=this.selectedView.getChartConfiguration()[0];
            modelData.THRESHOLD_MEASURE = chartConfiguration?chartConfiguration.getThresholdMeasure():"";
            modelData.AXIS_TYPE = chartConfiguration?chartConfiguration.getAxisType():"SINGLE";
            modelData.VALUE_TYPE = chartConfiguration?chartConfiguration.getValueType():"ABSOLUTE";
            modelData.CHART_TYPE = chartConfiguration?chartConfiguration.getChartType().getText():"Bar";
            modelData.DATA_LIMIT = chartConfiguration?getDataLimit(chartConfiguration.getDataLimit()):200;
            modelData.DATA_LIMITATIONS=this.getDataLimitations();
            modelData.CONFIG.SAP_AGGREGATE_VALUE=this.selectedView.isAggregateValueEnabled();
            modelData.COLOR_SCHEME = chartConfiguration?chartConfiguration.getColorScheme().getText():"AUTO_SEMANTIC";
            if(this.selectedView.getHeaders().length){
            	var headers = this.selectedView.getHeaders();
            	modelData.HEADERS = [];
            	modelData.HEADERS_VISIBLE=[];
            	var headerTileRegister={};
                modelData.HEADER_EVALUATIONID={};
                headers.forEach(function(oHeader) {
                	modelData.HEADER_EVALUATIONID[oHeader.getReferenceEvaluationId()]=true;
                	headerTileRegister[oHeader.getReferenceEvaluationId()]=headerTileRegister[oHeader.getReferenceEvaluationId()]||{};
                    var measures=_getAllMeasuresForEval(oHeader.getReferenceEvaluationId());
                    var dimensions=_getAllDimensionsForEval(oHeader.getReferenceEvaluationId());
                    var headerConfig=oHeader.getConfiguration();
                	modelData.HEADERS_VISIBLE.push({
                        EVALUATION_ID : that.evaluationId,
                        CONFIGURATION_ID : modelData.SELECTED_VIEW,
                        REFERENCE_EVALUATION_ID : oHeader.getReferenceEvaluationId(),
                        VISUALIZATION_TYPE : oHeader.getVisualizationType(),
                        VISUALIZATION_ORDER : oHeader.getVisualizationOrder(),
                        DIMENSION : oHeader.getDimension()||dimensions[0],
                        SORT_BY:"",
                        SORT_ORDER	:headerConfig.SORTING.by+(headerConfig.SORTING.order=="desc"?+"D":"A"),
                        MEASURE1	:headerConfig.MEASURES[0].name||measures[0],
                        MEASURE2	:headerConfig.MEASURES[1].name||measures[1]||measures[0],
                        MEASURE3	:headerConfig.MEASURES[2]?headerConfig.MEASURES[2].name:"",
                        COLOR1:headerConfig.MEASURES[0].color||"Neutral",
                        COLOR2:headerConfig.MEASURES[1].color||"Neutral",
                        COLOR3:headerConfig.MEASURES[2]?headerConfig.MEASURES[2].color:"Neutral",
                        ALL_MEASURES:measures,
                        ALL_DIMENSIONS:dimensions,
                        VISIBILITY : oHeader.getVisibility(),
                        visible : true,
                        TITLE : _getEvaluationTitle(oHeader.getReferenceEvaluationId()),
                        SUBTITLE : _getEvaluationSubTitle(oHeader.getReferenceEvaluationId()),
                        INDICATOR:_getEvaluationIndicator(oHeader.getReferenceEvaluationId())
                    });
                	//headerTileRegister[oHeader.getReferenceEvaluationId()][oHeader.getVisualizationType()]=true;
                });
                modelData.HEADERS_VISIBLE.sort(function(a,b){
                	return a.VISUALIZATION_ORDER > b.VISUALIZATION_ORDER?1:-1;
                });
                modelData.HEADER_EVALUATIONID[this.evaluationId]=true;
                headerTileRegister[this.evaluationId]=headerTileRegister[this.evaluationId]||{};
                var that=this;
                
                for(var each in headerTileRegister){     
                	var measures=_getAllMeasuresForEval(each);
                	var dimensions=_getAllDimensionsForEval(each);
                	tileTypes.forEach(function(s){
                        modelData.HEADERS.push({
                            EVALUATION_ID : that.evaluationId,
                            CONFIGURATION_ID : modelData.SELECTED_VIEW,
                            REFERENCE_EVALUATION_ID : each,
                            VISUALIZATION_TYPE : s,
                            VISUALIZATION_TYPE_INDEX:tileTypes.indexOf(s),
                            VISUALIZATION_ORDER : 1,
                            DIMENSION : dimensions[0],
                            SORT_BY:"",
                            SORT_ORDER:"MD",
                            MEASURE1	:measures[0],
                            MEASURE2	:measures[1]||measures[0],
                            MEASURE3	:"",
                            COLOR1:"Good",
                            COLOR2:"Critical",
                            COLOR3:"Error",
                            ALL_MEASURES:measures,
                            ALL_DIMENSIONS:_getAllDimensionsForEval(each),
                            VISIBILITY : 1,
                            visible : false,
                            TITLE: _getEvaluationTitle(each),
                        	SUBTITLE: _getEvaluationSubTitle(each),
                        	GROUPING_TITLE:_getEvaluationTitle(each)+" "+_getEvaluationSubTitle(each),
                            INDICATOR:_getEvaluationIndicator(each)
                        });
                	});
                }
            }
            //modelData.HEADERS = [];
            

            var columns  = this.selectedView.getColumns();
            for(var i=0;i<columns.length;i++) {
                var column = this.selectedView.findColumnByName(columns[i]);
                modelData.COLUMNS.push({
                    NAME : column.getName(),
                    TYPE : column.getType(),
                    COLOR1 : modelData.COLOR_SCHEME=="MANUAL_NON_SEMANTIC"?column. getColor():"",
                    COLOR2 : modelData.COLOR_SCHEME=="MANUAL_SEMANTIC"?column. getColor():"",
                    AXIS : column.getAxis(),
                    SORT_ORDER : column.getSortOrder(),
                    SORT_BY : column.getSortBy(),
                    VISIBILITY : column.getVisibility(),
                    STACKING : column.getStacking()
                });
            }
            var filters = this.selectedView.getFilters();
            for(var i=0; i<filters.length;i++) {
                var filter = filters[i];
                modelData.FILTERS.push({
                    name : filter
                });
            }
        }
        return modelData;
    },

    getDataLimitations:function(){
    	var chartConfiguration=this.selectedView.getChartConfiguration()[0];
       	if(chartConfiguration && chartConfiguration.getDataLimit()!= -1){
       		return true;
       	}else if(chartConfiguration && chartConfiguration.getDataLimit()== -1){
       		return false;
       		
       	}
       }
      
};

}; // end of sap/suite/ui/smartbusiness/lib/DrilldownModel.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.DrilldownSaveService') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.DrilldownSaveService");
sap.suite = sap.suite || {};
sap.suite.smartbusiness = sap.suite.smartbusiness || {};
sap.suite.smartbusiness.ddaconfig = sap.suite.smartbusiness.ddaconfig || {};
sap.suite.smartbusiness.ddaconfig.DrilldownSaveService={
		fetchXSRFToken:function(fnS,fnE){
			jQuery.ajax({
      		  type: "HEAD",
      		  async: false,
      		  dataType: "json",
      		  url: "/sap/hba/r/sb/core/logic/__token.xsjs",
      		  headers: {"X-CSRF-Token": "Fetch"},
      		  success: function(d, s, x) {
      			  if(fnS)fnS(d,s,x);
      		  },
      		  error: function() {
      			  if(fnE)fnE(d,s,x);
      		  }
      	  });
		},
		constants:{
			"write":{fn:"getWritePayload"},
			"delete":{fn:"getDeletePayload"},
			"update":{fn:"getUpdatePayload"},
			"viewServiceUrl":"/sap/hba/r/sb/core/logic/ddaViewConfiguration_cud.xsjs",
			"evalServiceUrl":"/sap/hba/r/sb/core/logic/ddaEvaluation_cud.xsjs"
		},
        doUpdate:function(oConfig){
            var that=this;
            this.fetchXSRFToken(function(d,s,x){
                  jQuery.ajax({
                         url:sap.suite.smartbusiness.utils.appendUrlParameters(oConfig.url),
                         type:"PUT",
                         headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language": sap.suite.smartbusiness.utils.getLocaleLanguage()},
                         data:JSON.stringify(oConfig.payload)
                  }).done(oConfig.success||function(){}).fail(oConfig.error||function(){});
            },oConfig.error);
        },
        doWrite:function(oConfig){
            var that=this;
            this.fetchXSRFToken(function(d,s,x){
                  jQuery.ajax({
                         url:sap.suite.smartbusiness.utils.appendUrlParameters(oConfig.url),
                         type:"POST",
                         headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language": sap.suite.smartbusiness.utils.getLocaleLanguage()},
                         data:JSON.stringify(oConfig.payload)
                  }).done(oConfig.success||function(){}).fail(oConfig.error||function(){});
            },oConfig.error);
        },
        doDelete:function(oConfig){
            var that=this;
            this.fetchXSRFToken(function(d,s,x){
                  jQuery.ajax({
                         url:sap.suite.smartbusiness.utils.appendUrlParameters(oConfig.url),
                         type:"DELETE",
                         headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language": sap.suite.smartbusiness.utils.getLocaleLanguage()},
                         data:JSON.stringify(oConfig.payload)
                   }).done(oConfig.success||function(){}).fail(oConfig.error||function(){});
            },oConfig.error);
            
        },
        doServiceCall:function(oConfig){
            var that=this;
            if(oConfig.type=="POST"){
                  this.doWrite(oConfig);
            }else if(oConfig.type=="PUT"){
                  this.doUpdate(oConfig);
            }else if(oConfig.type="DELETE"){
                  this.doDelete(oConfig);
            }
        },

        saveEvalConfiguration:function(evalId,data,action,fnS,fnE){
            var type = (action=="delete"?"DELETE":(action=="update"?"PUT":"POST"));
            if(this.constants[action]){
                  this.doServiceCall({
                         type:type,
                         payload:this[this.constants[action].fn](evalId,data),
                         url:this.constants.evalServiceUrl,
                         success:fnS,
                         error:fnE
                  });    
            }else{
                  fnE("Service Failed. Unrecognized action "+action);
            }
        },
        saveViewConfiguration:function(evalId,data,action,fnS,fnE){
            action=data.ID_EDITABLE?"write":action;
            var type = (action=="delete"?"DELETE":(action=="update"?"PUT":"POST"));
            if(this.constants[action]){
                  this.doServiceCall({
                         type:type,
                         payload:this[this.constants[action].fn](evalId,data,true),
                         url:this.constants.viewServiceUrl,
                         success:fnS,
                         error:fnE
                  });    
            }else{
                  fnE("Service Failed. Unrecognized action "+action);
            }
        },
		getUpdatePayload:function(evalId,data,isView){
			return {
				payload:this.getWritePayload(evalId,data,isView),
				keys:this.getDeletePayload(evalId,data,isView)
			};
		},
		getWritePayload:function(evalId,data,isView){
			var configId=data.ID,oReturn;
			if(isView){
				oReturn={
						DDA_COLUMNS:this.getColumnsPayload(data,evalId,configId),
						DDA_CHART:this.getChartPayload(data,evalId,configId),
						DDA_MASTER_TEXT:this.getViewTextPayload(data,evalId,configId)
				};
				if(data.ID_EDITABLE){
					oReturn.DDA_MASTER=this.getNewViewPayload(data.ALL_VIEWS,evalId,configId);
				}
			}else{
				oReturn={
						DDA_FILTERS:this.getFilterPayload(data.CURRENT_FILTERS,evalId,configId),
						DDA_HEADER:this.getHeaderPayload(data.HEADERS_VISIBLE,evalId,configId),
						DDA_CONFIGURATION:this.getConfigurationPayload(data,evalId,configId)						
				};
				var viewOrderPayload=this.getViewOrderPayload(data.ALL_VIEWS,evalId,configId);
				if(viewOrderPayload.length){
					oReturn.DDA_MASTER=viewOrderPayload;
				}
			}
			return oReturn;
		},
		getDeletePayload:function(evalId,data,isView){
			return {"EVALUATION_ID":evalId,"CONFIGURATION_ID":data.ID};
		},
		getViewTextPayload:function(data,evalId,configId){
			var viewTexts=[];
			var curL=data.CURRENT_LANGUAGE,viewText=data.TITLE;
			data=data.ADDITIONAL_LANGUAGE_TITLES||[];
			for(var i=0;i<data.length;i++){
				if(data[i].SAP_LANGUAGE_KEY==curL)
					continue;
				viewTexts.push({
					"CONFIGURATION_ID":configId,
					"EVALUATION_ID":evalId,
     				"SAP_LANGUAGE_KEY": data[i].SAP_LANGUAGE_KEY,
     				"TEXT": data[i].TEXT,
					"IS_ACTIVE":1
				});
			}
			viewTexts.push({
				"CONFIGURATION_ID":configId,
				"EVALUATION_ID":evalId,
 				"SAP_LANGUAGE_KEY": curL,
 				"TEXT": viewText,
				"IS_ACTIVE":1
			});
			return viewTexts;
		},
		getChartPayload:function(data,evalId,configId){
			return [{
				"EVALUATION_ID":evalId,
				"CONFIGURATION_ID":configId,
				"VALUE_TYPE":data.VALUE_TYPE,
				"AXIS_TYPE":data.AXIS_TYPE,
				"CHART_TYPE":data.CHART_TYPE,	
				"DATA_LIMIT":data.DATA_LIMITATIONS?data.DATA_LIMIT:-1,		
				"COLOR_SCHEME":data.COLOR_SCHEME,
				"IS_ACTIVE":1,
				"THRESHOLD_MEASURE":data.THRESHOLD_MEASURE
			}];
		},
		getColumnsPayload:function(data,evalId,configId){
			var columns=[];
			var colorScheme=data.COLOR_SCHEME;
			data=data.items||[];
			for(var i=0;i<data.length;i++){
				if(data[i].SELECTED)
				columns.push({
					"EVALUATION_ID":evalId,
					"CONFIGURATION_ID":configId,
					"NAME":data[i].NAME,	
					"TYPE":data[i].TYPE.toUpperCase(),
					"SORT_BY":data[i].SORT_BY,
					"VISIBILITY":data[i].VISIBILITY,
					"COLOR":(colorScheme=="MANUAL_NON_SEMANTIC"? data[i].COLOR1:colorScheme=="MANUAL_SEMANTIC"?data[i].COLOR2:"")||"",
					"STACKING":data[i].STACKING,		
					"AXIS":data[i].AXIS,
					"SORT_ORDER":data[i].SORT_ORDER,	
					"COLUMNS_ORDER":i,
					"IS_ACTIVE":1
				});
			}
			return columns;
		},
		getFilterPayload:function(data,evalId,configId){
			var filters=[];
			data=data||[];
			for(var i=0;i<data.length;i++){
				filters.push({
					"EVALUATION_ID":evalId,
					"CONFIGURATION_ID":configId,
					"DIMENSION":data[i],	
					"VISIBILITY":1,
					"IS_ACTIVE":1
				});
			}
			return filters;
		},
		_getHeaderConfiguration:function(header){
			var data;
			switch (header.VISUALIZATION_TYPE) {
			    case "CM":
			        data = [{
			            name: header.MEASURE1,
			            color: header.COLOR1
			        }, {
			            name: header.MEASURE2,
			            color: header.COLOR2
			        }];
			        (header.MEASURE3 && header.MEASURE3!="_none^") ? data.push({

			            name: header.MEASURE3,
			            color: header.COLOR3
			        }) : "";
			        data = JSON.stringify({MEASURES: JSON.stringify(data)});
			        break;
			    case "CT":
			        data = {
			            order: header.SORT_ORDER[1] == "D" ? "desc" : "asc",
			            by: header.SORT_ORDER[0]
			        };
			        data = JSON.stringify({SORTING: JSON.stringify(data)});
			        break;
			}
			return data;
		},
		getHeaderPayload:function(data,evalId,configId){
			var headers=[];
			data=data||[];
			for(var i=0;i<data.length;i++){
				if(data[i])//.visible)
				headers.push({
					"CONFIGURATION_ID":configId,
					"EVALUATION_ID":evalId,
					"VISUALIZATION_TYPE":data[i].VISUALIZATION_TYPE,
					"VISIBILITY":1,
					"REFERENCE_EVALUATION_ID":data[i].REFERENCE_EVALUATION_ID,
					"VISUALIZATION_ORDER":i,
					"DIMENSION":data[i].DIMENSION,
					"IS_ACTIVE":1,
					"CONFIGURATION":this._getHeaderConfiguration(data[i])
				});
			}
			return headers;			
		},
		getConfigurationPayload:function(data,evalId,configId){
			var config={
					"SAP_FILTER":{value:"",visibility:1},
					"SAP_AGGREGATE_VALUE":{value:"",visibility:(data.CONFIG.SAP_AGGREGATE_VALUE?1:0)},
					"SAP_HEADER":{value:"",visibility:1},
					"QUERY_SERVICE_URI":{value:data.QUERY_SERVICE_URI,visibility:1},
					"QUERY_ENTITY_SET":{value:data.QUERY_ENTITY_SET,visibility:1},
			};
			var configs=[];
			for(var each in config){
				configs.push({
					"EVALUATION_ID":evalId,
					"CONFIGURATION_ID":configId,
					"PROPERTY_TYPE":each,
					"PROPERTY_VALUE":config[each].value,		
					"VISIBILITY":config[each].visibility,
					"IS_ACTIVE":1
				});
			}
			return configs;
		},
		getNewViewPayload:function(data,evalId,configId){
			return [{
				"CONFIGURATION_ID":configId,
				"EVALUATION_ID":evalId,
				"CONFIG_ORDER":(data.length+1),
				"IS_ACTIVE":1
			}];
		},
		getViewOrderPayload:function(data,evalId,configId){
			var configOrder=[];
			data=data||[];
			for(var i=0;i<data.length;i++){
				configOrder.push({
					"CONFIGURATION_ID":data[i].ID,
					"EVALUATION_ID":evalId,
					"CONFIG_ORDER":i,
					"IS_ACTIVE":1
				});
			}
			return configOrder;	
		}

};

}; // end of sap/suite/ui/smartbusiness/lib/DrilldownSaveService.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.DrilldownWriteService') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.DrilldownWriteService");
sap.suite = sap.suite || {};
sap.suite.smartbusiness = sap.suite.smartbusiness || {};
sap.suite.smartbusiness.ddaconfig = sap.suite.smartbusiness.ddaconfig || {};

sap.suite.smartbusiness.ddaconfig.DrilldownWriteService = function() {
    var oDataModel = null;
    var serviceUri = "/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata";
    if(sap.suite.smartbusiness.odata) {
        oDataModel = sap.suite.smartbusiness.odata.getModelByServiceUri(serviceUri);
    } else {
        oDataModel = new sap.ui.model.odata.ODataModel(serviceUri, true);
    }
    this.getODataModel = function() {
       return oDataModel;
    };
    this.getEntitySet = function() {
       var Entities = {
              CHART_CONFIGURATION : "/DDA_CHART",
            MASTER_CONFIGURATION : "/DDA_MASTER",
            COLUMNS_CONFIGURATION : "/DDA_COLUMNS",
            HEADER_CONFIGURATION : "/DDA_HEADER",
            FILTER_CONFIGURATION : "/DDA_FILTERS",
            DDA_CONFIGURATION : "/DDA_CONFIG",
            DDA_MASTER_TEXT_CONFIGURATION : "/DDA_MASTER_TEXT"
       };
       return  {
              getChartEntity : function() {
                     return Entities.CHART_CONFIGURATION;
              },
            getMasterEntity : function() {
                return Entities.MASTER_CONFIGURATION;
            },
            getColumnEntity : function() {
                return Entities.COLUMNS_CONFIGURATION;
            },
            getHeaderEntity : function() {
              return Entities.HEADER_CONFIGURATION;
            },
            getFilterEntity : function() {
              return Entities.FILTER_CONFIGURATION;
            },
            getConfigEntity : function() {
              return Entities.DDA_CONFIGURATION;
            },
            getMasterTextEntity : function() {
              return Entities.DDA_MASTER_TEXT_CONFIGURATION;
            }
       };
    };
};

sap.suite.smartbusiness.ddaconfig.DrilldownWriteService.prototype = {
		_executeBatch  : function(entitySet, payLoads, httpMethod, sCallback, fCallback) {
			var requests= [];
			for(var i=0, l= payLoads.length; i< l ;i++) {
				var payload = payLoads[i];
				if(httpMethod == "POST"){
					requests.push(this.getODataModel().createBatchOperation(entitySet, httpMethod, payload));
				} else if(httpMethod == "DELETE"){
					requests.push(this.getODataModel().createBatchOperation(payload, httpMethod));
				} else if(httpMethod == "PUT"){
					requests.push(this.getODataModel().createBatchOperation(entitySet[i], httpMethod, payload));         
				}

			}
			this.getODataModel().addBatchChangeOperations(requests);
			this.getODataModel().submitBatch(function(data, response){
				if(sCallback) {
					sCallback.call(null, data, response);
				}
			},function() {
				if(fCallback) {
					fCallback.apply(null, arguments);
				}
			}, true);
		},
    
    /**
     * Write Services
     */
    createMasterEntry : function(payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getMasterEntity(), payLoads, "POST", sCallback, fCallback);
    },
    createConfig : function(payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getConfigEntity(), payLoads, "POST", sCallback, fCallback);        
    },
    createFilters : function(payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getFilterEntity(), payLoads, "POST", sCallback, fCallback);
    },
    createHeader : function(payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getHeaderEntity(), payLoads, "POST", sCallback, fCallback);
    },
    createColumns : function(payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getColumnEntity(), payLoads, "POST", sCallback, fCallback);
    },
       createChartConfiguration : function(payLoads, sCallback, fCallback) {
           this._executeBatch(this.getEntitySet().getChartEntity(), payLoads, "POST", sCallback, fCallback);
       },
       createMasterTextEntry : function(payLoads, sCallback, fCallback) {
              this._executeBatch(this.getEntitySet().getMasterTextEntity(), payLoads, "POST", sCallback, fCallback);
       },
       
       /**
       * Update Services
       */
    updateMasterEntry : function(payLoads, sCallback, fCallback) {
    	   var entities = [];
    	   for(var i=0;i<payLoads.length;i++){
    		   entities.push(this.getEntitySet().getMasterEntity()+"(EVALUATION_ID='"+payLoads[i].EVALUATION_ID+"',CONFIGURATION_ID='"+payLoads[i].CONFIGURATION_ID+"',IS_ACTIVE="+payLoads[i].IS_ACTIVE+")");
    	   }
    	   this._executeBatch(entities, payLoads, "PUT", sCallback, fCallback);
       },
    updateConfig : function(id, payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getConfigEntity()+"("+this.formId(id)+")", payLoads, "PUT", sCallback, fCallback);        
    },
    updateFilters : function(id, payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getFilterEntity()+"("+this.formId(id)+")", payLoads, "PUT", sCallback, fCallback);
    },
    updateHeader : function(id, payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getHeaderEntity()+"("+this.formId(id)+")", payLoads, "PUT", sCallback, fCallback);
    },
    updateColumns : function(id, payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getColumnEntity()+"("+this.formId(id)+")", payLoads, "PUT", sCallback, fCallback);
    },
    updateChartConfiguration : function(id, payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getChartEntity()+"("+this.formId(id)+")", payLoads, "PUT", sCallback, fCallback);
    },
    updateMasterTextEntry : function(id, payLoads, sCallback, fCallback) {
       this._executeBatch(this.getEntitySet().getMasterTextEntity()+"("+this.formId(id)+")", payLoads, "PUT", sCallback, fCallback);
    },
       
       /**
       * Delete Services
       */
    deleteMasterEntry : function(id, sCallback, fCallback) {
       var entities = [];
       for(var i=0;i<id.length;i++){
              entities.push(this.getEntitySet().getMasterEntity()+"(EVALUATION_ID='"+id[i].EVALUATION_ID+"',CONFIGURATION_ID='"+id[i].CONFIGURATION_ID+"',IS_ACTIVE="+id[i].IS_ACTIVE+")");
       }
        this._executeBatch( null, entities, "DELETE", sCallback, fCallback);
    },
    deleteMasterEntry_Eval : function(id, sCallback, fCallback) {
        var entities = [];
        for(var i=0;i<id.length;i++){
               entities.push("DDA_DEL_EVAL_LEVEL(EVALUATION_ID='"+id[i].EVALUATION_ID+"',IS_ACTIVE="+id[i].IS_ACTIVE+")");
        }
         this._executeBatch( null, entities, "DELETE", sCallback, fCallback);
    },
    deleteConfig : function(id, sCallback, fCallback) {
       var entities = [];
       for(var i=0;i<id.length;i++){
              entities.push("DDA_CONFIG_DEL(EVALUATION_ID='"+id[i].EVALUATION_ID+"',IS_ACTIVE="+id[i].IS_ACTIVE+")");
       }
        this._executeBatch(null, entities,  "DELETE", sCallback, fCallback);        
    },
    deleteFilters : function(id, sCallback, fCallback) {
       var entities = [];
       for(var i=0;i<id.length;i++){
              entities.push("DDA_FILTERS_DEL(EVALUATION_ID='"+id[i].EVALUATION_ID+"',IS_ACTIVE="+id[i].IS_ACTIVE+")");
       }
        this._executeBatch(null, entities, "DELETE", sCallback, fCallback);
    },
    deleteHeader : function(id, sCallback, fCallback) {
       var entities = [];
       for(var i=0;i<id.length;i++){
              entities.push("DDA_HEADER_DEL(EVALUATION_ID='"+id[i].EVALUATION_ID+"',IS_ACTIVE="+id[i].IS_ACTIVE+")");
       }
       this._executeBatch(null, entities, "DELETE", sCallback, fCallback);
    },
    deleteColumns : function(id, sCallback, fCallback) {
       var entities = [];
       for(var i=0;i<id.length;i++){
              entities.push("DDA_COLUMNS_DEL(EVALUATION_ID='"+id[i].EVALUATION_ID+"',CONFIGURATION_ID='"+id[i].CONFIGURATION_ID+"',IS_ACTIVE="+id[i].IS_ACTIVE+")");
       }
        this._executeBatch(null, entities, "DELETE", sCallback, fCallback);
    },
    deleteChartConfiguration : function(id, sCallback, fCallback) {
       var entities = [];
       for(var i=0;i<id.length;i++){
              entities.push(this.getEntitySet().getChartEntity()+"(EVALUATION_ID='"+id[i].EVALUATION_ID+"',CONFIGURATION_ID='"+id[i].CONFIGURATION_ID+"',IS_ACTIVE="+id[i].IS_ACTIVE+")");
       }
        this._executeBatch(null, entities, "DELETE", sCallback, fCallback);
    },
    deleteMasterTextEntry : function(id, sCallback, fCallback) {
       var entities = [];
       for(var i=0;i<id.length;i++){
              entities.push("DDA_MASTEXT_DEL(EVALUATION_ID='"+id[i].EVALUATION_ID+"',CONFIGURATION_ID='"+id[i].CONFIGURATION_ID+"',IS_ACTIVE="+id[i].IS_ACTIVE+")");
       }
       this._executeBatch(null, entities, "DELETE", sCallback, fCallback);
    },
    
    /**
     * id={EVALUATION_ID : 'x', CONFIGURATION_ID :'y'}
     * formId loops through the object id and returns key value pairs as string
     */
    formId : function(id){
       var tempId = '';
       for(each in id){
              if(isNaN(id[each])){
              tempId = tempId+(each+"='"+id[each]+"',");
              } else {
                     tempId = tempId+(each+"="+id[each]+","); 
              }
       }
       return tempId.substring(0,tempId.length-1);
    },
    
    
   
    
    /**
     * Master Write Service. In one Batch Call, Save Everything
     * @param : oParam
     * {
     *      masterPayload : {EVALUATION_ID :'', CONFIGURATION_ID:'', CONFIG_ORDER : 1, TEXT : ''},
     *      configPayload :[
     *          {EVALUATION_ID :'', CONFIGURATION_ID:'', PROPERTY_NAME : 'SAP_FILTER', PROPERTY_VALUE:'', VISIBILITY : 1},
     *          {EVALUATION_ID :'', CONFIGURATION_ID:'', PROPERTY_NAME : 'SAP_HEADER', PROPERTY_VALUE:'', VISIBILITY : 1},
     *          {EVALUATION_ID :'', CONFIGURATION_ID:'', PROPERTY_NAME : 'SAP_AGGREGATE_VALUE', PROPERTY_VALUE:'', VISIBILITY : 1},
     *          {EVALUATION_ID :'', CONFIGURATION_ID:'', PROPERTY_NAME : 'QUERY_SERVICE_URI', PROPERTY_VALUE:'/a/b.xsodata', VISIBILITY : 1},
     *          {EVALUATION_ID :'', CONFIGURATION_ID:'', PROPERTY_NAME : 'QUERY_ENTITY_SET', PROPERTY_VALUE:'XYZ', VISIBILITY : 1}
     *      ],
     *      columnsPayload : [
     *          {
     *              EVALUATION_ID :'', 
     *              CONFIGURATION_ID:'',
     *              NAME:'COUNTRY', 
     *              TYPE:'DIMENSION', 
     *              SORT_BY:'COUNTRY', 
     *              SORT_ORDER : 'asc',
     *              COLOR : '',
     *              STACKING : 1, //tiny int
     *              AXIS : 1 //integer
     *          }
     *          //Multiple Columns
     *      ],
     *      chartPayload : {
     *          EVALUATION_ID :'', 
                CONFIGURATION_ID:'',
     *          CHART_TYPE : 'TABLE',
     *          AXIS_TYPE : 'DUAL', //SINGLE/DUAL
     *          VALUE_TYPE : 'PERCENTAGE', //PERCENTAGE/ABSOLUTE,
     *          COLOR_SCHEME : 'AUTO_SEMANTIC',
     *          DATA_LIMIT : 0 //Integer ; 0 means no limit
     *      },
     *      filterPayload : [
     *          {
     *              EVALUATION_ID :'',
     *              CONFIGURATION_ID:'',
     *              DIMENSION :''
     *          }
     *          //Multiple Filters
     *      ],
     *      headerPayload : [
     *          {
     *              EVALUATION_ID :'',
     *              CONFIGURATION_ID:'',
     *              
     *          }
     *      ]
     * }
     */
    saveDDAConfiguration : function(oParams) {
        
    },
    
};

}; // end of sap/suite/ui/smartbusiness/lib/DrilldownWriteService.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.Filter') ) {


jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.Filter");
sap.ui.core.Control.extend("sap.suite.ui.smartbusiness.lib.Filter", {
	metadata : {
		properties : {
			evaluationId:"string",
			dimensions : {
				type : "any",
				defaultValue : []
			},
			visible:{
				type:"boolean",
				defaultValue:true
			},
			advancedSetting : {
				type : "object",
				defaultValue : {}
			},
			mode:{
				type:"string",
				defaultValue:"Runtime"
			},
			suppressAction:{
				type:"boolean",
				defaultValue:false
			},
			sapSystem : {
				type : "string",
				defaultValue : null
			}
		},
		aggregations : {
			"_filter" : {
				type : "sap.ui.core.Control",
				multiple : false,
				visibility : "hidden"
			},
			"_popover":{
				type:"sap.m.Popover",
				multiple:false,
				visibility:"hidden"
			}
		},
		events : {
			filterChange : {}
		}
	},
	renderer : function(oRm, oControl) {
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("SmartBusinessFilter");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oControl.getAggregation("_filter"));
		oRm.write("</div>");
	}
});
sap.suite.ui.smartbusiness.lib.Filter.prototype.init  = function() {
	this._filterObj={};
	if(sap.ushell && sap.ushell.Container) {
		this.urlParsingService = sap.ushell.Container.getService("URLParsing");
	}
	else {
		this.urlParsingService = undefined;
	}
	//this.urlParsingService = sap.ushell.Container.getService("URLParsing");
};
sap.suite.ui.smartbusiness.lib.Filter.prototype.onBeforeRendering = function() {
	if(this.getEvaluationId()){
		try{
			this._updateOdataProperties();
			this._facetListsReference={};
			var childControl=this._getChildControl();
			childControl.setVisible(this.getVisible());
			this.setAggregation("_filter",childControl );
			this._initModel();
			if(this.getMode()=="Runtime"){
				this._addDimensions(this.getDimensions());
			}else{
				this._addDimensionsDesignTime(this.getDimensions());
			}
		}catch(e){}
	}
};
sap.suite.ui.smartbusiness.lib.Filter.prototype.onAfterRendering = function() {
	this.refreshFilter(true);
};
sap.suite.ui.smartbusiness.lib.Filter.prototype.getFacetFilterReference  = function() {
	return this.getAggregation("_filter");
};
sap.suite.ui.smartbusiness.lib.Filter.prototype.getSelectedItems  = function() {
	var filter= this.getAggregation("_filter");
	var list= filter.getLists();
	var c=0;
	for(var i=0;i<list.length;i++){
		if(list[i].getSelectedItems().length>0){
			c++;
		}
	}
	if(c>0)
	{
		return true;
	}else{
		return false;
	}

};
//sap.suite.ui.smartbusiness.lib.Filter.prototype.setVisible=function(visibility){
//if(visibility){
//this.$().show();
//}else{
//this.$().hide();
//}
//}
sap.suite.ui.smartbusiness.lib.Filter.prototype._updateOdataProperties=function(){
	if(this.urlParsingService) {
		this._serviceUri = this.urlParsingService.addSystemToServiceUrl(this.EVALUATION.getODataUrl(), this.getSapSystem());	
	}
	else {
		this._serviceUri = this.EVALUATION.getODataUrl();
	}
	//this._serviceUri = this.urlParsingService.addSystemToServiceUrl(this.EVALUATION.getODataUrl(), this.getSapSystem());
	this._entitySet = this.EVALUATION.getEntitySet();
};
sap.suite.ui.smartbusiness.lib.Filter.prototype._getChildControl=function(){
	var control,that=this;
	function _getInHBoxWrapper(oControl, width){
		return new sap.m.HBox({
			items:oControl,
			width:width
		})
	}
	if(this.getMode()=="Runtime"){
		control= new sap.m.FacetFilter({
			showReset:true,
			showPersonalization:true,
			reset:jQuery.proxy(function(){
				that.resetFilter.call(this);
			},this)
		});
	}else{ 
		this._facetContainer=new sap.m.ScrollContainer({
			vertical:false,
			horizontal:true,
		}).addStyleClass("facetFilterContainer");
		control= new sap.m.HBox({
			justifyContent:"SpaceBetween",
			alignItems:"Center",
			items:[   _getInHBoxWrapper([this._facetContainer]),
			          _getInHBoxWrapper([new sap.m.Button({
			        	  icon:"sap-icon://undo",
			        	  type:"Transparent",
			        	  press:function(){
			        		  if(!that.getSuppressAction()){ that.rerender();}
			        	  }
			          }),
			          new sap.m.Button({
			        	  icon:"sap-icon://add-filter",
			        	  type:"Transparent",
			        	  press:function(){
			        		  if(!that.getSuppressAction()){
			        			  that._popover.openBy(this);
			        		  }    
			        	  }
			          })])]
		});
	}
	return control;
};
sap.suite.ui.smartbusiness.lib.Filter.prototype.resetFilter=function(){
	this._filterObj=sap.suite.smartbusiness.url.hash.getApplicationParameters();
	var viewId=sap.suite.smartbusiness.url.hash.getApplicationParameters().viewId[0];
	var newUrlParams={viewId:[viewId]};
	var that=this;
	var dimensions= sap.suite.smartbusiness.odata.getAllDimensions(this._serviceUri,this._entitySet);
	dimensions.forEach(function(s){
		delete that._filterObj[s];
	});
	for(var each in this._filterObj){
		newUrlParams[each]=this._filterObj[each];
	}
	sap.suite.smartbusiness.url.hash.setApplicationParameters(newUrlParams);
	this.rerender();
};
sap.suite.ui.smartbusiness.lib.Filter.prototype._addDimensions = function(dimensions) {
	var allDimensions=[];
	if(dimensions && dimensions.length) {
		if(typeof dimensions == 'string') {
			dimensions = dimensions.split(",");
		}
	}
	if(this.getEvaluationId()){
		var deltaDimensions=sap.suite.smartbusiness.odata.getAllDimensions(this._serviceUri,this._entitySet);
	}
	for(var i=0;i<dimensions.length;i++){
		allDimensions.push({name:dimensions[i],isDelta:false});
	}
	for(var i=0;i<deltaDimensions.length;i++){
		if(dimensions.indexOf(deltaDimensions[i])==-1)
			allDimensions.push({name:deltaDimensions[i],isDelta:true});
	}
	var mProperties=sap.suite.smartbusiness.odata.properties(this._serviceUri,this._entitySet);
	var COLUMN_LABEL_MAPPING = mProperties.getLabelMappingObject();
	try{
		allDimensions.sort(function(a,b){return COLUMN_LABEL_MAPPING[a.name]>COLUMN_LABEL_MAPPING[b.name]?1:-1;});
	}catch(e){jQuery.sap.log.error(e);}
	
	for(var i = 0; i < allDimensions.length ; i++) {
		this.addFacetList(allDimensions[i].name,allDimensions[i].isDelta);
	}
	
};
sap.suite.ui.smartbusiness.lib.Filter.prototype.facetListClosed = function(oEvent) {
	this.fireFilterChange(oEvent);
};
sap.suite.ui.smartbusiness.lib.Filter.prototype.setEvaluationData = function(evaluation) {
	this.EVALUATION = evaluation;
};

sap.suite.ui.smartbusiness.lib.Filter.prototype.getSelectedKeys=function(oList){
	var selectedKeys=[];
	if(oList.getActive()){
		var items=oList.getItems();
		for(var i=0;i<items.length;i++){
			if(items[i].getSelected()){
				var val=items[i].getBindingContext().getObject()[oList._techName];
				var selection=(val||val==0)?val:"";
				selection=selection.getTime?selection.getTime():selection;
				selectedKeys.push(selection+"");
			}
		}
	}
	return selectedKeys;
};

sap.suite.ui.smartbusiness.lib.Filter.prototype.addFacetList = function(facetListName,isDelta) {
	var that = this;
	var facetFilter = this.getAggregation("_filter");
	var mProperties=sap.suite.smartbusiness.odata.properties(this._serviceUri,this._entitySet);
	var COLUMN_LABEL_MAPPING = mProperties.getLabelMappingObject();
	var TEXT_PROPERTY_MAPPING=mProperties.getTextPropertyMappingObject();
	var facetList = new sap.m.FacetFilterList({
		key : facetListName,
		title : COLUMN_LABEL_MAPPING[facetListName],
		displaySecondaryValues: true,
		growingThreshold:999,
		active:!isDelta,
		listOpen:function(){
			that._fetchListData(this);
		}
	});
	this._facetListsReference[facetListName]=facetList;
	facetList._techName=facetListName;
	facetList._isDelta=isDelta;
	facetList._isFilterDirty=true;
	facetList._prevSelectedKeys=[];
	if(this.getMode()=="Runtime"){
		facetList.attachListClose(function() {
			var prevFilters=sap.suite.smartbusiness.url.hash.getApplicationParameters(['viewId']);
			this._prevSelectedKeys = prevFilters[this._techName]||[];              
			if(JSON.stringify(this._prevSelectedKeys)!=JSON.stringify(that.getSelectedKeys(this))){
				this._prevSelectedKeys=that.getSelectedKeys(this);
				that._setFilterDirty(this.getKey());
				that._updateFilter(this.getKey(),this._prevSelectedKeys);          
			}
			if(!this.getActive()){
				this._isFilterDirty=true
			}
		});
	}
	facetList.bindAggregation("items", "/",new sap.m.FacetFilterItem({
		key : {
			path : facetListName
		},

		text : {
			formatter: that._getColumnValueFormatter(TEXT_PROPERTY_MAPPING[facetListName]), 
			path : TEXT_PROPERTY_MAPPING[facetListName]
		}
	})).setModel(new sap.ui.model.json.JSONModel());
	facetFilter.addList(facetList);
};
sap.suite.ui.smartbusiness.lib.Filter.prototype.refreshFilter=function(bNoRerender){
	if(this.getVisible()){
		var prevFilter=this._filterObj||{};
		try {
			var facetLists=this._facetListsReference;
			if(facetLists && this.getMode() == "Runtime") {
				this._filterObj=sap.suite.smartbusiness.url.hash.getApplicationParameters(["viewId"]);
				for(var each in this._filterObj){
					if((prevFilter[each]+"")!=(this._filterObj[each]+"")){
						facetLists[each].setActive(true);
						facetLists[each].setVisible(true);
						facetLists[each]._isSelectionChanged=true;
					}
				}
				for(var each in prevFilter){
					if((prevFilter[each]+"")!=(this._filterObj[each]+"")){
						facetLists[each].setActive(true);
						facetLists[each].setVisible(true);
						facetLists[each]._isSelectionChanged=true;
					}
				}
				bNoRerender = !!bNoRerender;
				if(this.getAggregation("_filter") && !bNoRerender) {
					//this.getAggregation("_filter").rerender();
				}
			}

			var filter=this.getAggregation("_filter");
			if(filter){
				var list= filter.getLists();
				var filterObj=sap.suite.smartbusiness.url.hash.getApplicationParameters(["viewId"]);
				for(var each in filterObj){
					for(var i=0;i<list.length;i++){
						if(list[i].getKey()==each){
							this.updateSelections(list[i],filterObj[each])
						}
					}
				}
			}
		} catch(e) {

		}
	}
};
sap.suite.ui.smartbusiness.lib.Filter.prototype.updateSelections= function(facetList, selectedKeys){
	var facetData=facetList.getModel().getData();
	if(!(facetData instanceof Array) || !facetData.length) {
		if(selectedKeys.length==1){
			facetList._isFilterDirty=true;
			this._fetchListData(facetList); 
		}else{
			this._fetchPseudoListData(facetList,selectedKeys);
			facetList._isFilterDirty=true;
		}
	}else{
		this._retainListSelections(facetList);
	}

	
	
}
sap.suite.ui.smartbusiness.lib.Filter.prototype._updateFilter=function(sDimensionName,oFilters){
	this._filterObj=sap.suite.smartbusiness.url.hash.getApplicationParameters();
	var viewId=sap.suite.smartbusiness.url.hash.getApplicationParameters().viewId[0];
	var newUrlParams={viewId:[viewId]};
	if(oFilters.length) {
		this._filterObj[sDimensionName]=oFilters;
	} else {
		delete this._filterObj[sDimensionName];
	}
	for(var each in this._filterObj){
		newUrlParams[each]=this._filterObj[each];
	}
	sap.suite.smartbusiness.url.hash.setApplicationParameters(newUrlParams);
};
sap.suite.ui.smartbusiness.lib.Filter.prototype._getValidFilters=function(sDimensionName){
	var obj=[];
	
	var filterObj=sap.suite.smartbusiness.url.hash.getApplicationParameters(["viewId", sDimensionName]);
	for(var each in filterObj) {
		var filterValues = filterObj[each];
		if(filterValues && filterValues.length) {
			filterValues.forEach(function(sFilterValue) {
				obj.push({
					NAME : each,
					VALUE_1 : sFilterValue,
					VALUE_2 : "",
					TYPE : "FI",
					OPERATOR : "EQ"
				});
			});
		}
	}
	return obj;
};

sap.suite.ui.smartbusiness.lib.Filter.prototype.getActiveDimensions=function(){
	var tmp=[];
	if(this.getMode()=="RunTime"){
		var filterLists=this.getAggregation("_filter").getLists();
		filterLists.forEach(function(s){
			if(s.getActive()){
				tmp.push(s._techName);
			}         
		});
	}else{
		var listData=this._designTimeModel.getProperty("/");
		listData.forEach(function(s){
			if(s.selected){tmp.push(s.name);}
		});
	}
	return tmp;
};
sap.suite.ui.smartbusiness.lib.Filter.prototype._retainListSelections=function(oList){
	if(this.getMode()=="Runtime"){
		this._filterObj=sap.suite.smartbusiness.url.hash.getApplicationParameters(["viewId"]);
		var curFilterObj=this._filterObj[oList.getKey()]||[];
		for(var i=0,items=oList.getItems();i<items.length;i++){
			var curKey=items[i].getBindingContext().getObject()[oList._techName]||"";
			curKey=curKey.getTime?curKey.getTime()+"":curKey+"";
			items[i].setSelected(curFilterObj.indexOf(curKey)!=-1);
		}
		oList._isSelectionChanged=false;
	}
};
sap.suite.ui.smartbusiness.lib.Filter.prototype._getFilterString=function(sDim,obj) {
	return sap.suite.smartbusiness.odata.getUri({
		entitySet:this._entitySet,
		serviceUri:this._serviceUri,
		dimension:sDim,
		filter :obj.concat(this.EVALUATION.getFilters().results)
	}).uri;
};

sap.suite.ui.smartbusiness.lib.Filter.prototype._setFilterDirty=function(excludableListKey){
	var facetFilter=this.getAggregation("_filter");
	for(var i=0,lists=facetFilter.getLists();i<lists.length;i++){
		if(lists[i].getKey()!=excludableListKey){
			lists[i]._isFilterDirty=true;
		}
	}
};
sap.suite.ui.smartbusiness.lib.Filter.prototype._onAfterListDataFetch=function(oList,data){
	oList.getModel().setData(data);
	this._retainListSelections(oList);
	oList._isFilterDirty=false;
	oList.setBusy(false);
};
sap.suite.ui.smartbusiness.lib.Filter.prototype._fetchPseudoListData=function(oList,pseudoValues){
	var dummyData=[];
	var a=oList.getKey();
	for(var each in pseudoValues){
		var obj={};
		obj[a]=pseudoValues[each];
		dummyData.push(obj);
	}
	this._onAfterListDataFetch(oList,dummyData);
	// 
};
sap.suite.ui.smartbusiness.lib.Filter.prototype._fetchListData=function(oList,oFilter){
	if(oList._isFilterDirty){
		var that=this;
		if(this.getMode()=="Runtime"){
			oList.setBusy(true);
			this.oDataModel.read(this._getFilterString(oList.getKey(),this._getValidFilters(oList.getKey())),
					null, null, true, function(data) {
				that._onAfterListDataFetch(oList,data.results);
				
			},function(){

			});
		}
	}else if(oList._isSelectionChanged) {
		this._retainListSelections(oList);
	}
};
sap.suite.ui.smartbusiness.lib.Filter.prototype._initModel = function() {
	if(this.getEvaluationId()) {
		if(sap.suite.smartbusiness.odata) {
			this.oDataModel = sap.suite.smartbusiness.odata.getModelByServiceUri(this._serviceUri);
		} else {
			this.oDataModel=  new sap.ui.model.odata.ODataModel(this._serviceUri, true);
		}
	}
};





sap.suite.ui.smartbusiness.lib.Filter.prototype._getColumnValueFormatter=function(sName){
	var formatter=function (s) {return s==0?s+"":s;}
	var oMetaData=sap.suite.smartbusiness.odata.getEdmType(this._serviceUri,sName,true);
	var sType=oMetaData.type;
	var sFormat=oMetaData.format.toUpperCase();
	if(sType=='Edm.DateTime'){
		if(!sap.suite.smartbusiness.odata.isTimeZoneIndependent(this._serviceUri,this._entitySet)){
    		var style;
    		if(sFormat=="DATE"){
    			style="daysAgo";
    		}else if(sFormat=="DATETIME"){
    			style="short";
    		}else if(sFormat=="NONE"){
    			style="daysAgo";
    		}
    		if(style){
				var oF=new sap.ca.ui.model.type.Date({
					style: style
				});
				formatter=function(s){
					return oF.formatValue(s,"string");
				}
    		}
		}else{
    		formatter=function(ts){
    			if(ts && ts.getMinutes){
    				ts= new Date(ts.getTime());
        			ts.setMinutes( ts.getMinutes() + ts.getTimezoneOffset());
        			var instanceType=(sFormat=="DATE")?"getDateInstance":"getDateTimeInstance";
        			return sap.ui.core.format.DateFormat[instanceType]().format(ts);
    			}
    			return ts;
    		}
		}
	}
	return formatter;

};
/**
 * DesignTime Related Methods
 */
sap.suite.ui.smartbusiness.lib.Filter.prototype._getDesignTimeModel=function(dimensions){
	var d=[];
	dimensions=dimensions||[];
	var mProperties=sap.suite.smartbusiness.odata.properties(this._serviceUri,this._entitySet);
	var COLUMN_LABEL_MAPPING = mProperties.getLabelMappingObject();
	var allDimensions=sap.suite.smartbusiness.odata.getAllDimensions(this._serviceUri,this._entitySet);
	if(dimensions && dimensions.length) {
		if(typeof dimensions == 'string') {
			dimensions = dimensions.split(",");
		}
	}
	allDimensions.forEach(function(s){
		d.push({name:s,label:COLUMN_LABEL_MAPPING[s],selected:dimensions.indexOf(s)!=-1});
	});
	return new sap.ui.model.json.JSONModel(d);
};


sap.suite.ui.smartbusiness.lib.Filter.prototype._addDimensionsDesignTime=function(dimensions){
	function onDimensionSearch(oEvent){
		var filter = [];
		var sQuery = oEvent.getSource().getValue();
		var binding = popoverList.getBinding("items");
		if (sQuery && sQuery.length > 0) {
			filter= [new sap.ui.model.Filter("label", sap.ui.model.FilterOperator.Contains, sQuery)] 
		}
		binding.filter(filter);
	}

	this._designTimeModel=this._getDesignTimeModel(dimensions);
	this._designTimeModel.setSizeLimit(999);
	this._facetContainer.setModel(this._designTimeModel);
	var popoverList= new sap.m.List({
		mode:"MultiSelect"
	});
	var searchField= new sap.m.SearchField({
		width:"100%",
		liveChange:jQuery.proxy(onDimensionSearch,this)
	});  
	this._popover= new sap.m.Popover({
		customHeader:searchField,
		content:[popoverList],
		showHeader:false,
		placement:"Bottom"
	});
	this._popover.setModel(this._designTimeModel);
	var sorter=new sap.ui.model.Sorter('label',false);
	popoverList.bindAggregation("items",{
		path:"/",
		template:new sap.m.StandardListItem({
			title:"{label}",
			selected:"{selected}"
		}),
		sorter:sorter
	});
	var facetListTemplate=new sap.m.HBox({
		visible:"{selected}",
		justifyContent:"SpaceBetween",
		items:[new sap.m.Label({
			text:"{label}"
		}).addStyleClass("dimensionName"),new sap.ui.core.Icon({
			src:"sap-icon://sys-cancel",
			visible:!this.getSuppressAction(),
			press:function(){
				this.getParent().setVisible(false);
			}
		})]
	}).addStyleClass("facetFilterDimension");
	var facetListContainer= new sap.m.HBox();
	facetListContainer.bindAggregation("items","/",facetListTemplate);
	this._facetContainer.addContent(facetListContainer);    
};


}; // end of sap/suite/ui/smartbusiness/lib/Filter.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.ListPersona') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.ListPersona");
/**
 * 
 * @param oParam
 * @returns {sap.suite.ui.smartbusiness.lib.ListPersona}
 * 
 * oParam should be an Object with following Properties
 * {
 *   title:'', //Title of Dialog Box
 *   namedModel : "DDA", //Named model name, if any("optional")
 *   context : "/CHART_TYPES",  context path of list binded.('Absolute Path')
 *   view : this.getView(),// view reference, using this the controller will get the reference of Model Data,
 *                          view.getModel().getData();   
 *   listItemContext : 'key' //  dialogbox  will use this context to bind each list item of LIST.  (Relative to 'context')  
 *   filter : { //if list if filtered, pass the filter property and filter value ("OPTIONAL")
 *      property : '',
 *      value ; ''
 *   }
 *   
 * }
 * 
 */

sap.suite.ui.smartbusiness.lib.ListPersona = function(oParam) {
    this.oParam = oParam;
    this.init();
};
sap.suite.ui.smartbusiness.lib.ListPersona.prototype = {
   init : function() {
       this.CHANGE_STATE = false;
       this.oContext = this.oParam.context;
       if(jQuery.sap.startsWith(this.oContext,"/")) {
           this.oContext = this.oContext.substring(1);
       }
       this.oView = this.oParam.view;
       this.namedModel = this.oParam.namedModel;
       this.oModel = this.oView.getModel();
       if(this.namedModel) {
           this.oModel = this.oView.getModel(this.namedModel);
       }
       
       var viewDataRef = this.oModel.getContext("/"+this.oContext).getObject();
       this.oData = [];
       this.oBackupData = [];
       jQuery.extend(true, this.oData, viewDataRef);
       jQuery.extend(true, this.oBackupData, viewDataRef);
       this.iLength = this.oData.length;
       if(this.oParam.filter) {
           this.iLength = this._getArrayIndex(this.oData.length-1) + 1;
       }
       this.oTempModel = new sap.ui.model.json.JSONModel({data : this.oData});
       this._initializeDialogView();
       this.oDialog.setModel(this.oTempModel);
       if(this.oParam.filter) {
           this.oList.getBinding("items").filter(new sap.ui.model.Filter(this.oParam.filter.property,sap.ui.model.FilterOperator.EQ,this.oParam.filter.value));
       }
   },
   _getArrayIndex : function(sIndex) {
       var aIndex = -1;
       for(var i=0;i<=sIndex;i++) {
           var eachRecord = this.oData[i];
           if(eachRecord[this.oParam.filter.property] == this.oParam.filter.value) {
               aIndex++;
           }
       }
       return aIndex;
   },
   handleListSelection : function(oEvent) {
       if(this.iLength > 1) {
           this._oSelectedItemIndex = +((oEvent.getParameter("listItem").getBindingContext().getPath()).split('/').pop());
           var sIndex = this._oSelectedItemIndex;
           if(this.oParam.filter) {
               sIndex = this._getArrayIndex(this._oSelectedItemIndex);
           }
           this.setSelectedIndex(sIndex);
       }
   },
   setSelectedIndex : function(sIndex, bChangeListSelection) {
       this.selectedIndex = sIndex;
       if(this.selectedIndex == 0) {
           this.moveDownButton.setEnabled(true);
           this.moveUpButton.setEnabled(false);
       } else if(this.selectedIndex > 0 && this.selectedIndex < this.iLength-1) {
           this.moveDownButton.setEnabled(true);
           this.moveUpButton.setEnabled(true);
       } else if(this.selectedIndex == this.iLength -1) {
           this.moveDownButton.setEnabled(false);
           this.moveUpButton.setEnabled(true);
       } else {
           jQuery.sap.log.error("Invalid Selected Index");
       }
       if(bChangeListSelection) {
           this.oList.setSelectedItem(this.oList.getItems()[this.selectedIndex], true);
       }
   },
   _getPreviousIndex : function(sIndex) {
       var rIndex = -1;
       for(var i=0;i<sIndex;i++) {
           var eachRecord = this.oData[i];
           if(eachRecord[this.oParam.filter.property] == this.oParam.filter.value) {
               rIndex = i;
           }
       }
       return rIndex;
   },
   _getNextIndex : function(sIndex) {
       var rIndex = -1;
       for(var i=this.oData.length-1;i>sIndex;i--) {
           var eachRecord = this.oData[i];
           if(eachRecord[this.oParam.filter.property] == this.oParam.filter.value) {
               rIndex = i;
           }
       }
       return rIndex;
   },
   moveItemUp : function() {
       var temp = this.oData[this._oSelectedItemIndex];
       var previousIndex = this._oSelectedItemIndex -1;
       if(this.oParam.filter) {
           previousIndex = this._getPreviousIndex(this._oSelectedItemIndex);
       }
       this.oData[this._oSelectedItemIndex] = this.oData[previousIndex];
       this.oData[previousIndex] = temp;
       this.oTempModel.updateBindings();
       this.setSelectedIndex(this.selectedIndex-1, true);
       this.CHANGE_STATE = true;
       this._oSelectedItemIndex = previousIndex;
   },
   moveItemDown : function() {
       var temp = this.oData[this._oSelectedItemIndex];
       var nextIndex = this._oSelectedItemIndex + 1;
       if(this.oParam.filter) {
           nextIndex = this._getNextIndex(this._oSelectedItemIndex);
       }
       this.oData[this._oSelectedItemIndex] = this.oData[nextIndex];
       this.oData[nextIndex] = temp;
       this.oTempModel.updateBindings();
       this.setSelectedIndex(this.selectedIndex+1, true);
       this.CHANGE_STATE = true;
       this._oSelectedItemIndex = nextIndex;
   },
   resetEverything : function() {
       if(this.CHANGE_STATE) {
           this.oData = [];
           jQuery.extend(true, this.oData, this.oBackupData);
           this.oList.removeSelections();
           this.oTempModel = new sap.ui.model.json.JSONModel({data : this.oData});
           this.oDialog.setModel(this.oTempModel);
           this.oTempModel.updateBindings();
           if(this.oParam.filter) {
               this.oList.getBinding("items").filter(new sap.ui.model.Filter(this.oParam.filter.property,sap.ui.model.FilterOperator.EQ,this.oParam.filter.value));
           }
           this.moveDownButton.setEnabled(false);
           this.moveUpButton.setEnabled(false);
           this.CHANGE_STATE = false;
       }
   },
   _initializeDialogView : function() {
	
       var that = this;
       this.oList = new sap.m.List({
           mode : "SingleSelectMaster",
           selectionChange : jQuery.proxy(this.handleListSelection, this)
       }).bindAggregation("items", "/data", new sap.m.StandardListItem({
           title : {
               path : this.oParam.listItemContext
           }
       }));
       this.moveUpButton = new sap.m.Button({
           icon :"sap-icon://arrow-top",
           enabled : false,
           press : function() {
               that.moveItemUp();
           }
       });
       this.moveDownButton = new sap.m.Button({
           icon : "sap-icon://arrow-bottom",
           enabled : false,
           press : function() {
               that.moveItemDown();
           }
       });
       this.undoButton = new sap.m.Button({
           icon : "sap-icon://undo",
           press : function() {
               that.resetEverything();
           }
       });
       this.oDialog =  new sap.m.Dialog({
           title : this.oParam.title || "Change Order of List Item",
           content :[
                     this.oList,
                     new sap.m.Bar({
                         design : "Header",
                         contentLeft : [
                                        this.moveUpButton,
                                        this.moveDownButton
                         ],
                         contentRight : [
                                         this.undoButton
                         ]
                     })
           ],
           beginButton : new sap.m.Button({
               text : this.oView.getModel("i18n").getProperty("OK"),
               press : jQuery.proxy(this.okDialog,this)
           }),
           endButton : new sap.m.Button({
               text : this.oView.getModel("i18n").getProperty("CANCEL"),
               press : jQuery.proxy(this.closeDialog,this)
           })
       });
   },
   start : function() {
       this.oDialog.open();
   },
   closeDialog : function() {
       this.oDialog.close();
   },
   okDialog : function() {
       if(this.CHANGE_STATE) {
           this.oModel.getData()[this.oContext] = this.oData;
           this.oModel.updateBindings();
       }
       this.oDialog.close();
       if(this.oParam.callback) {
           this.oParam.callback.call(null);
       }
   }
};
}; // end of sap/suite/ui/smartbusiness/lib/ListPersona.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.formatters') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.formatters");

sap.suite = sap.suite || {};
sap.suite.smartbusiness = sap.suite.smartbusiness || {};

sap.suite.smartbusiness.formatters = {
		getBundleText : function(oController, iText, iPlaceholder1, iPlaceholder2) {
			var oBundle;

			if (oController === undefined) {
				var oApplicationFacade = sap.ca.scfld.md.app.Application.getImpl().oConfiguration.oApplicationFacade;
				oBundle = oApplicationFacade.getResourceBundle();
			} else {
				oBundle = oController.oApplicationFacade.getResourceBundle();
			}

			var sText = oBundle.getText(iText, [iPlaceholder1, iPlaceholder2]);
			return sText;
		},
		
		kpiStatus : function(state) {
			return (state ? sap.suite.smartbusiness.formatters.getBundleText(undefined, "STATUS", sap.suite.smartbusiness.formatters.getBundleText(undefined, "STATUS_ACTIVE")) : sap.suite.smartbusiness.formatters.getBundleText(undefined, "STATUS", sap.suite.smartbusiness.formatters.getBundleText(undefined, "STATUS_DRAFT")));
		},
		kpiStatusText : function(state) {
			return (state ? sap.suite.smartbusiness.formatters.getBundleText(undefined, "STATUS_ACTIVE") : sap.suite.smartbusiness.formatters.getBundleText(undefined, "STATUS_DRAFT"));
		},
		kpiStatusState : function(state) {
			return (state ? sap.ui.core.ValueState.Success : sap.ui.core.ValueState.None);
		},
		kpiOwner : function(owner) {
			if(owner)
				return sap.suite.smartbusiness.formatters.getBundleText(undefined, "ADDED_BY", owner);
			return;
		},
		kpiOwnerInOH : function(owner) {
			if(owner)
				return sap.suite.smartbusiness.formatters.getBundleText(undefined, "OWNER", owner);
			return;
		},
		kpiID : function(id, type) {
			if(id) {
				if(type && type == "KPI") {
					return sap.suite.smartbusiness.formatters.getBundleText(undefined, "KPI", id);
				}
				else {
					return sap.suite.smartbusiness.formatters.getBundleText(undefined, ("OPI: " + id));
				}
			}
			return;
		},
		kpiIDInOH : function(id, type) {
			if(id) {
				if(type && type == "KPI") {
					return sap.suite.smartbusiness.formatters.getBundleText(undefined, "KPI", id);
				}
				else {
					return sap.suite.smartbusiness.formatters.getBundleText(undefined, ("OPI: " + id));
				}
			}
			return;
		},
		evalStatus : function(status) {
			try {
				if(status)
					return "Success";
				return "None";
			} catch (e) {
				return;
			}
		},
};


}; // end of sap/suite/ui/smartbusiness/lib/formatters.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.oData4Analytics') ) {
/**
 * @fileOverview API for analytical extensions in OData service metadata.
 * 
 * <a href="../sap-odata-analytics.jpg">Overview class diagram.</a><p/> At the
 * current stage, the API is purely experimental, not yet functionally complete
 * and not meant for productive usage. At present, its only purpose is to
 * demonstrate how easy analytical extensions of OData4SAP can be consumed. <p/>
 * <em>USE OBJECTS VIA METHODS ONLY - DO NOT ACCESS JAVASCRIPT OBJECT PROPERTIES
 * DIRECTLY !</em>
 * Lazy initialization of attributes will cause unexpected values when you
 * access object attributes directly. <p/> PI BIT Consumption and Collaboration
 * <p/> Main contact: Gerald Krause
 * 
 * 
 */

// Module declaration
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.oData4Analytics");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained


/*
 * try { if (typeof sap.ui.model.odata.ODataModel === "undefined") throw "SAP
 * UI5 library not present. Load it beforehand to avoid this error"; } catch
 * (error) { throw "SAP UI5 library not present. Load it beforehand to avoid
 * this error"; }
 */

/**
 * Namespace
 */


/**
 * @namespace SAP namespace
 */
sap.suite = sap.suite || {};
sap.suite.smartbusiness = sap.suite.smartbusiness || {};

/**
 * @namespace Library for working with OData for SAP Analytics resources
 */
sap.suite.smartbusiness.odata4analytics = sap.suite.smartbusiness.odata4analytics || {};

sap.suite.smartbusiness.odata4analytics.constants = {};
sap.suite.smartbusiness.odata4analytics.constants["SAP_NAMESPACE"] = "http://www.sap.com/Protocols/SAPData";
sap.suite.smartbusiness.odata4analytics.constants["VERSION"] = "0.7";

sap.suite.smartbusiness.odata4analytics.helper = {
    renderPropertyKeyValue : function(sFilterValue, sPropertyEDMTypeName) {
        if (sFilterValue.charAt(0) == "'")
            throw "Illegal property value starting with a quote";
        switch (sPropertyEDMTypeName) {
        case 'Edm.String':
            return "'" + sFilterValue + "'";
        case 'Edm.DateTime':
            return "datetime'" + sFilterValue + "'";
        case 'Edm.Guid':
            return "guid'" + sFilterValue + "'";
        case 'Edm.Time':
            return "time'" + sFilterValue + "'";
        case 'Edm.DateTimeOffset':
            return "datetimeoffset'" + sFilterValue + "'";
        case 'Edm.Decimal':
            return sFilterValue + "m";
        case 'Edm.Double':
            return sFilterValue + "d";
        case 'Edm.Single':
            return sFilterValue + "f";            
        default:
            return sFilterValue;
        }
    },
    renderPropertyFilterValue : function(sFilterValue, sPropertyEDMTypeName) {
        if (sFilterValue.charAt(0) == "'")
            throw "Illegal property value starting with a quote";
        switch (sPropertyEDMTypeName) {
        case 'Edm.String':
            return "'" + sFilterValue + "'";
        case 'Edm.DateTime':
            return "datetime'" + sFilterValue + "'";
        case 'Edm.Guid':
            return "guid'" + sFilterValue + "'";
        case 'Edm.Time':
            return "time'" + sFilterValue + "'";
        case 'Edm.DateTimeOffset':
            return "datetimeoffset'" + sFilterValue + "'";
        case 'Edm.Decimal':
            return sFilterValue + "m";
        case 'Edm.Double':
            return sFilterValue + "d";
        case 'Edm.Single':
            return sFilterValue + "f";            
        default:
            return sFilterValue;
        }
    },
    tokenizeNametoLabelText : function(sName) {
        var sLabel = "";

        // split UpperCamelCase in words (treat numbers and _ as upper case)
        sLabel = sName.replace(/([^A-Z0-9_]+)([A-Z0-9_])/g, "$1 $2");
        // split acronyms in words
        sLabel = sLabel.replace(/([A-Z0-9_]{2,})([A-Z0-9_])([^A-Z0-9_]+)/g, "$1 $2$3");
        // remove trailing _E
        sLabel = sLabel.replace(/(.*) _E$/, "$1");
        // remove underscores that were identified as upper case
        sLabel = sLabel.replace(/(.*) _(.*)/g, "$1 $2");
        return sLabel;
    }
};

/**
 * Create a representation of the analytical semantics of OData service metadata
 * 
 * @param {object}
 *            oModelReference An instance of ReferenceByURI, ReferenceByModel or
 *            ReferenceWithWorkaround for locating the OData service.
 * @param {string}
 *            sAnnotationJSONDoc A JSON document providing extra annotations to
 *            the elements of the structure of the given service
 * @constructor
 * 
 * @class Representation of an OData model with analytical annotations defined
 *        by OData4SAP.
 * 
 */

sap.suite.smartbusiness.odata4analytics.Model = function(oModelReference, sAnnotationJSONDoc) {
    this._init(oModelReference, sAnnotationJSONDoc);
};

/**
 * Create a reference to an OData model by the URI of the related OData service.
 * 
 * @param {string}
 *            sURI holding the URI.
 * @constructor
 * 
 * @class Handle to an OData model by the URI pointing to it.
 */
sap.suite.smartbusiness.odata4analytics.Model.ReferenceByURI = function(sURI) {
    return {
        sServiceURI : sURI
    };
};

/**
 * Create a reference to an OData model already loaded elsewhere with the help
 * of SAP UI5.
 * 
 * @param {object}
 *            oModel holding the OData model.
 * @constructor
 * 
 * @class Handle to an already instantiated SAP UI5 OData model.
 */
sap.suite.smartbusiness.odata4analytics.Model.ReferenceByModel = function(oModel) {
    return {
        oModel : oModel
    };
};

/**
 * Create a reference to an OData model having certain workarounds activated. A
 * workaround is an implementation that changes the standard behavior of the API
 * to overcome some gap or limitation in the OData provider. The workaround
 * implementation can be conditionally activated by passing the identifier in
 * the contructor.
 * 
 * Known workaround identifiers are:
 * 
 * <li>"CreateLabelsFromTechnicalNames" - If a property has no label text, it
 * gets generated from the property name.</li>
 * 
 * <li>"IdentifyTextPropertiesByName" -If a dimension property has no text and
 * another property with the same name and an appended "Name", "Text" etc. exists, they are linked via annotation.</li>
 * 
 * 
 * @param {object}
 *            oModelReference holding a reference to the OData model, obtained
 *            by sap.suite.smartbusiness.odata4analytics.Model.ReferenceByModel or by
 *            sap.odata4analytics.Model.ReferenceByURI.
 * @param {array(string)}
 *            aWorkaroundID listing all workarounds to be applied.
 * @constructor
 * 
 * @class Handle to an already instantiated SAP UI5 OData model.
 */
sap.suite.smartbusiness.odata4analytics.Model.ReferenceWithWorkaround = function(oModel, aWorkaroundID) {
    return {
        oModelReference : oModel,
        aWorkaroundID : aWorkaroundID
    };
};

sap.suite.smartbusiness.odata4analytics.Model.prototype = {

    /**
     * initialize a new object
     * 
     * @private
     */
    _init : function(oModelReference, sAnnotationJSONDoc) {

        /*
         * get access to OData model
         */

        this._oActivatedWorkarounds = new Object();

        if (oModelReference && oModelReference.aWorkaroundID) {
            for ( var i = -1, sID; sID = oModelReference.aWorkaroundID[++i];) {
                this._oActivatedWorkarounds[sID] = true;
            }
            oModelReference = oModelReference.oModelReference;
        }

        // check proper usage
        if (!oModelReference || (!oModelReference.sServiceURI && !oModelReference.oModel)) {
            throw "Usage with oModelReference being an instance of Model.ReferenceByURI or Model.ReferenceByModel";
        }

        if (oModelReference.oModel)
            this._oModel = oModelReference.oModel;
        else
            this._oModel = new sap.ui.model.odata.ODataModel(oModelReference.sServiceURI);

        if (this._oModel.getServiceMetadata() == undefined || this._oModel.getServiceMetadata().dataServices == undefined) {
            throw "Model could not be loaded";
        }

        /*
         * add extra annotations if provided
         */
        this.mergeV2Annotations(sAnnotationJSONDoc);

        /*
         * parse OData model for analytic queries
         */

        this._oQueryResultSet = new Object();
        this._oParameterizationSet = new Object();
        this._oEntityTypeSet = new Object();
        this._oEntitySetSet = new Object();
        this._oEntityTypeNameToEntitySetMap = new Object();

        // loop over all schemas and entity containers
        // TODO: extend this implementation to support many schemas
        var oSchema = this._oModel.getServiceMetadata().dataServices.schema[0];

        // remember default container
        for ( var i = -1, oContainer; oContainer = oSchema.entityContainer[++i];) {
            if (oContainer.isDefaultEntityContainer == "true") {
                this._oDefaultEntityContainer = oContainer;
                break;
            }
        }

        var aEntityType = oSchema.entityType;

        // A. preparation

        // A.1 collect all relevant OData entity types representing query
        // results,
        // parameters
        var aQueryResultEntityTypes = [], aParameterEntityTypes = [], aUnsortedEntityTypes = [];

        for ( var i = -1, oType; oType = aEntityType[++i];) {
            var bProcessed = false;

            if (oType.extensions != undefined) {
                for ( var j = -1, oExtension; oExtension = oType.extensions[++j];) {
                    if (oExtension.namespace == sap.suite.smartbusiness.odata4analytics.constants.SAP_NAMESPACE
                            && oExtension.name == "semantics") {
                        bProcessed = true;
                        switch (oExtension.value) {
                        case "aggregate":
                            aQueryResultEntityTypes.push(oType);
                            break;
                        case "parameters":
                            aParameterEntityTypes.push(oType);
                            break;
                        default:
                            aUnsortedEntityTypes.push(oType);
                        }
                    }
                    if (bProcessed)
                        continue;
                }
                if (!bProcessed)
                    aUnsortedEntityTypes.push(oType);
            } else
                aUnsortedEntityTypes.push(oType);
        }
        // A.2 create entity type representations for the unsorted types
        for ( var i = -1, oType; oType = aUnsortedEntityTypes[++i];) {
            var oEntityType = new sap.suite.smartbusiness.odata4analytics.EntityType(this._oModel
                    .getServiceMetadata(), oSchema, oType);
            this._oEntityTypeSet[oEntityType.getQName()] = oEntityType;
            var aEntitySet = this._getEntitySetsOfType(oSchema, oEntityType.getQName());
            if (aEntitySet.length == 0)
                throw "Invalid consumption model: No entity set for entity type annotated with parameters semantics";
            if (aEntitySet.length > 1)
                throw "Unsupported consumption model: More than one entity set for entity type annotated with parameters semantics";
            var oEntitySet = new sap.suite.smartbusiness.odata4analytics.EntitySet(this._oModel
                    .getServiceMetadata(), oSchema, aEntitySet[0][0], aEntitySet[0][1]);
            this._oEntitySetSet[oEntitySet.getQName()] = oEntitySet;
            this._oEntityTypeNameToEntitySetMap[oEntityType.getQName()] = oEntitySet;
        }

        // B. create objects for the analytical extensions of these entity types
        // B.1 create parameters

        // temporary storage for lookup of entity *types* annotated with
        // parameters semantics
        var oParameterizationEntityTypeSet = {};

        for ( var i = -1, oType; oType = aParameterEntityTypes[++i];) {
            // B.1.1 create object for OData entity type
            var oEntityType = new sap.suite.smartbusiness.odata4analytics.EntityType(this._oModel
                    .getServiceMetadata(), oSchema, oType);
            this._oEntityTypeSet[oEntityType.getQName()] = oEntityType;
            // B.1.2 get sets with this type
            var aEntitySet = this._getEntitySetsOfType(oSchema, oEntityType.getQName());
            if (aEntitySet.length == 0)
                throw "Invalid consumption model: No entity set for entity type annotated with parameters semantics";
            if (aEntitySet.length > 1)
                throw "Unsupported consumption model: More than one entity set for entity type annotated with parameters semantics";

            // B.1.3 create object for OData entity set
            var oEntitySet = new sap.suite.smartbusiness.odata4analytics.EntitySet(this._oModel
                    .getServiceMetadata(), oSchema, aEntitySet[0][0], aEntitySet[0][1]);
            this._oEntitySetSet[oEntitySet.getQName()] = oEntitySet;
            this._oEntityTypeNameToEntitySetMap[oEntityType.getQName()] = oEntitySet;

            // B.1.4 create object for parameters and related OData entity
            var oParameterization = new sap.suite.smartbusiness.odata4analytics.Parameterization(oEntityType,
                    oEntitySet);
            this._oParameterizationSet[oParameterization.getName()] = oParameterization;
            oParameterizationEntityTypeSet[oEntityType.getQName()] = oParameterization;

            // B.1.5 recognize all available parameter value helps
            var sParameterizationEntityTypeQTypeName = oEntityType.getQName();

            if (oSchema.association != undefined) {
                for ( var j = -1, oAssoc; oAssoc = oSchema.association[++j];) {
                    // value help always established by a referential constraint
                    // on an association
                    if (oAssoc.referentialConstraint == undefined)
                        continue;

                    var sParameterValueHelpEntityTypeQTypeName = null;

                    // B.1.5.1 relevant only if one end has same type as the
                    // given parameterization entity type
                    if (oAssoc.end[0].type == sParameterizationEntityTypeQTypeName
                            && oAssoc.end[0].multiplicity == "*"
                            && oAssoc.end[1].multiplicity == "1") {
                        sParameterValueHelpEntityTypeQTypeName = oAssoc.end[1].type;

                    } else if (oAssoc.end[1].type == sParameterizationEntityTypeQTypeName
                            && oAssoc.end[1].multiplicity == "*"
                            && oAssoc.end[0].multiplicity == "1") {
                        sParameterValueHelpEntityTypeQTypeName = oAssoc.end[0].type;
                    }
                    if (!sParameterValueHelpEntityTypeQTypeName)
                        continue;

                    // B.1.5.2 check if the referential constraint declares a
                    // parameter property as dependent
                    if (oAssoc.referentialConstraint.dependent.propertyRef.length != 1)
                        continue;
                    var oParameter = oParameterization
                            .findParameterByName(oAssoc.referentialConstraint.dependent.propertyRef[0].name);
                    if (oParameter == null)
                        continue;

                    // B.1.5.3 Register the recognized parameter value help
                    // entity type and set and link it to the parameter
                    var oValueListEntityType = this._oEntityTypeSet[sParameterValueHelpEntityTypeQTypeName];
                    var oValueListEntitySet = this._oEntityTypeNameToEntitySetMap[sParameterValueHelpEntityTypeQTypeName];
                    oParameter.setValueSetEntity(oValueListEntityType, oValueListEntitySet);
                }
            }
        }

        // B.2
        // B.2 create analytic queries
        for ( var i = -1, oType; oType = aQueryResultEntityTypes[++i];) {

            // B.2.1 create object for OData entity
            var oEntityType = new sap.suite.smartbusiness.odata4analytics.EntityType(this._oModel
                    .getServiceMetadata(), oSchema, oType);
            this._oEntityTypeSet[oEntityType.getQName()] = oEntityType;
            var sQueryResultEntityTypeQTypeName = oEntityType.getQName();

            // B.2.2 find assocs to parameter entity types
            var oParameterization = null;
            var oAssocFromParamsToResult = null;

            if (oSchema.association != undefined) {
                for ( var j = -1, oAssoc; oAssoc = oSchema.association[++j];) {
                    var sParameterEntityTypeQTypeName = null;
                    if (oAssoc.end[0].type == sQueryResultEntityTypeQTypeName)
                        sParameterEntityTypeQTypeName = oAssoc.end[1].type;
                    else if (oAssoc.end[1].type == sQueryResultEntityTypeQTypeName)
                        sParameterEntityTypeQTypeName = oAssoc.end[0].type;
                    else
                        continue;

                    // B.2.2.2 fetch Parameterization object if any
                    var oMatchingParameterization = null;

                    oMatchingParameterization = oParameterizationEntityTypeSet[sParameterEntityTypeQTypeName];
                    if (oMatchingParameterization != null)
                        if (oParameterization != null) {
                            // TODO: extend this implementation to support more
                            // than
                            // one related parameter entity type
                            throw "LIMITATION: Unable to handle multiple parameter entity types of query entity "
                                    + oEntityType.name;
                        } else {
                            oParameterization = oMatchingParameterization;
                            oAssocFromParamsToResult = oAssoc;
                        }
                }
            }

            // B.2.3 get sets with this type
            var aEntitySet = this._getEntitySetsOfType(oSchema, oEntityType.getQName());
            if (aEntitySet.length != 1)
                throw "Invalid consumption model: There must be exactly one entity set for an entity type annotated with aggregating semantics";

            // B.2.4 create object for OData entity set of analytic query result
            var oEntitySet = new sap.suite.smartbusiness.odata4analytics.EntitySet(this._oModel
                    .getServiceMetadata(), oSchema, aEntitySet[0][0], aEntitySet[0][1]);
            this._oEntitySetSet[oEntitySet.getQName()] = oEntitySet;
            this._oEntityTypeNameToEntitySetMap[oEntityType.getQName()] = oEntitySet;

            // B.2.5 create object for analytic query result, related OData
            // entity type and set and
            // (if any) related parameters object
            var oQueryResult = new sap.suite.smartbusiness.odata4analytics.QueryResult(this, oEntityType,
                    oEntitySet, oParameterization);
            this._oQueryResultSet[oQueryResult.getName()] = oQueryResult;

            // B.2.6 set target result for found parameterization
            if (oParameterization)
                oParameterization.setTargetQueryResult(oQueryResult, oAssocFromParamsToResult);

        }

    },

    /*
     * Control data for adding extra annotations to service metadata
     * 
     * @private
     */
    oUI5ODataModelAnnotatableObject : {
        objectName : "schema",
        keyPropName : "namespace",
        extensions : true,
        aSubObject : [ {
            objectName : "entityType",
            keyPropName : "name",
            extensions : true,
            aSubObject : [ {
                objectName : "property",
                keyPropName : "name",
                aSubObject : [],
                extensions : true,
            } ]
        }, {
            objectName : "entityContainer",
            keyPropName : "name",
            extensions : false,
            aSubObject : [ {
                objectName : "entitySet",
                keyPropName : "name",
                extensions : true,
                aSubObject : [],
            } ],
        } ]
    },

    /*
     * merging extra annotations with provided service metadata
     * 
     * @private
     */
    mergeV2Annotations : function(sAnnotationJSONDoc) {
        try {
            var oAnnotation = JSON.parse(sAnnotationJSONDoc);
        } catch (exception) {
            return;
        }

        var oMetadata;
        try {
            oMetadata = this._oModel.getServiceMetadata().dataServices;
        } catch (exception) {
            return;
        }

        // find "schema" entry in annotation document
        for ( var propName in oAnnotation) {
            if (!(this.oUI5ODataModelAnnotatableObject.objectName == propName))
                continue;
            if (!(oAnnotation[propName] instanceof Array)) {
                continue;
            }
            this.mergeV2AnnotationLevel(oMetadata[this.oUI5ODataModelAnnotatableObject.objectName],
                    oAnnotation[this.oUI5ODataModelAnnotatableObject.objectName],
                    this.oUI5ODataModelAnnotatableObject);
            break;
        }

        return;
    },

    /*
     * merging extra annotations with agiven service metadata object
     * 
     * @private
     */

    mergeV2AnnotationLevel : function(aMetadata, aAnnotation, oUI5ODataModelAnnotatableObject) {

        for ( var i = -1, oAnnotation; oAnnotation = aAnnotation[++i];) {
            for ( var j = -1, oMetadata; oMetadata = aMetadata[++j];) {

                if (!(oAnnotation[oUI5ODataModelAnnotatableObject.keyPropName] == oMetadata[oUI5ODataModelAnnotatableObject.keyPropName]))
                    continue;
                // found match:
                // apply extensions from oAnnotation object to oMetadata object
                if (oAnnotation["extensions"] != undefined) {
                    if (oMetadata["extensions"] == undefined)
                        oMetadata["extensions"] = new Array();

                    for ( var l = -1, oAnnotationExtension; oAnnotationExtension = oAnnotation["extensions"][++l];) {
                        var bFound = false;
                        for ( var m = -1, oMetadataExtension; oMetadataExtension = oMetadata["extensions"][++m];) {
                            if (oAnnotationExtension.name == oMetadataExtension.name
                                    && oAnnotationExtension.namespace == oMetadataExtension.namespace) {
                                oMetadataExtension.value = oAnnotationExtension.value;
                                bFound = true;
                                break;
                            }
                        }
                        if (!bFound)
                            oMetadata["extensions"].push(oAnnotationExtension);
                    }
                }
                // walk down to sub objects
                for ( var k = -1, oUI5ODataModelAnnotatableSubObject; oUI5ODataModelAnnotatableSubObject = oUI5ODataModelAnnotatableObject.aSubObject[++k];) {

                    for ( var propName in oAnnotation) {
                        if (!(oUI5ODataModelAnnotatableSubObject.objectName == propName))
                            continue;
                        if (!(oAnnotation[oUI5ODataModelAnnotatableSubObject.objectName] instanceof Array))
                            continue;
                        if ((oMetadata[oUI5ODataModelAnnotatableSubObject.objectName] == undefined)
                                || (!(oMetadata[oUI5ODataModelAnnotatableSubObject.objectName] instanceof Array)))
                            continue;
                        this.mergeV2AnnotationLevel(
                                oMetadata[oUI5ODataModelAnnotatableSubObject.objectName],
                                oAnnotation[oUI5ODataModelAnnotatableSubObject.objectName],
                                oUI5ODataModelAnnotatableSubObject);
                        break;
                    }
                }
            }
        }
        return;
    },

    /**
     * Find analytic query result by name
     * 
     * @param {string}
     *            sName Fully qualified name of query result entity set
     * @returns {sap.suite.smartbusiness.odata4analytics.QueryResult} The query result object
     *          with this name or null if it does not exist
     */
    findQueryResultByName : function(sName) {
        var oQueryResult = this._oQueryResultSet[sName];

        // Everybody should have a second chance:
        // If the name was not fully qualified, check if it is in the default
        // container
        if (!oQueryResult && this._oDefaultEntityContainer) {
            var sQName = this._oDefaultEntityContainer.name + "." + sName;

            oQueryResult = this._oQueryResultSet[sQName];
        }
        return oQueryResult;
    },

    /**
     * Get the names of all query results (entity sets) offered by the model
     * 
     * @returns {array(string)} List of all query result names
     */
    getAllQueryResultNames : function() {
        if (this._aQueryResultNames)
            return this._aQueryResultNames;

        this._aQueryResultNames = new Array(0);

        for ( var sName in this._oQueryResultSet)
            this._aQueryResultNames.push(this._oQueryResultSet[sName].getName());

        return this._aQueryResultNames;
    },

    /**
     * Get all query results offered by the model
     * 
     * @returns {object} An object with individual JS properties for each query
     *          result included in the model. The JS object properties all are
     *          objects of type sap.suite.smartbusiness.odata4analytics.QueryResult. The names
     *          of the JS object properties are given by the entity set names
     *          representing the query results.
     */
    getAllQueryResults : function() {
        return this._oQueryResultSet;
    },

    /**
     * Get underlying OData model provided by SAP UI5
     * 
     * @returns {object} The SAP UI5 representation of the model.
     */
    getODataModel : function() {
        return this._oModel;
    },
    /**
     * Private methods
     */

    /**
     * Find entity sets of a given type
     * 
     * @private
     */
    _getEntitySetsOfType : function(oSchema, sQTypeName) {
        var aEntitySet = [];

        for ( var i = -1, oEntityContainer; oEntityContainer = oSchema.entityContainer[++i];) {
            for ( var j = -1, oEntitySet; oEntitySet = oEntityContainer.entitySet[++j];) {
                if (oEntitySet.entityType == sQTypeName)
                    aEntitySet.push([ oEntityContainer, oEntitySet ]);
            }
        }

        return aEntitySet;
    },

    /**
     * Private member attributes
     */
    _oModel : null,
    _oDefaultEntityContainer : null,

    _aQueryResultNames : null,
    _oQueryResultSet : null,
    _oParameterizationSet : null,
    _oEntityTypeSet : null,
    _oEntitySetSet : null,
    _oEntityTypeNameToEntitySetMap : null,

    _oActivatedWorkarounds : null,
};

/** ******************************************************************** */

/**
 * Create a representation of an analytic query
 * 
 * @param {sap.suite.smartbusiness.odata4analytics.Model}
 *            oModel The analytical model containing this query result entity
 *            set
 * @param {sap.suite.smartbusiness.odata4analytics.EntityType}
 *            oEntityType The OData entity type for this query
 * @param {sap.suite.smartbusiness.odata4analytics.EntitySet}
 *            oEntitySet The OData entity set for this query offered by the
 *            OData service
 * @param {sap.suite.smartbusiness.odata4analytics.Parameterization}
 *            oParameterization The parameterization of this query, if any
 * 
 * @constructor
 * @this (QueryResult)
 * 
 * 
 * @class Representation of an entity type annotated with
 *        sap:semantics="aggregate".
 * 
 */
sap.suite.smartbusiness.odata4analytics.QueryResult = function(oModel, oEntityType, oEntitySet, oParameterization) {
    this._init(oModel, oEntityType, oEntitySet, oParameterization);
};

sap.suite.smartbusiness.odata4analytics.QueryResult.prototype = {

    /**
     * initialize new object
     * 
     * @private
     */
    _init : function(oModel, oEntityType, oEntitySet, oParameterization, oAssocFromParamsToResult) {
        this._oModel = oModel;
        this._oEntityType = oEntityType;
        this._oEntitySet = oEntitySet;
        this._oParameterization = oParameterization;

        this._oDimensionSet = new Object();
        this._oMeasureSet = new Object();

        // parse entity type for analytic semantics described by annotations
        var aProperty = oEntityType.getTypeDescription().property;
        var oAttributeForPropertySet = {};
        for ( var i = -1, oProperty; oProperty = aProperty[++i];) {
            if (oProperty.extensions == undefined)
                continue;
            for ( var j = -1, oExtension; oExtension = oProperty.extensions[++j];) {

                if (!oExtension.namespace == sap.suite.smartbusiness.odata4analytics.constants.SAP_NAMESPACE)
                    continue;

                switch (oExtension.name) {
                case "aggregation-role":
                    switch (oExtension.value) {
                    case "dimension":
                        var oDimension = new sap.suite.smartbusiness.odata4analytics.Dimension(this, oProperty);
                        this._oDimensionSet[oDimension.getName()] = oDimension;
                        break;
                    case "measure":
                        var oMeasure = new sap.suite.smartbusiness.odata4analytics.Measure(this, oProperty);
                        this._oMeasureSet[oMeasure.getName()] = oMeasure;
                        break;
                    case "totaled-properties-list":
                        this._oTotaledPropertyListProperty = oProperty;
                        break;
                    }
                    break;
                case "attribute-for":
                    var oDimensionAttribute = new sap.suite.smartbusiness.odata4analytics.DimensionAttribute(this,
                            oProperty);
                    oAttributeForPropertySet[oDimensionAttribute.getKeyProperty()] = oDimensionAttribute;
                    break;
                }
            }
        }

        // assign dimension attributes to the respective dimension objects
        for ( var sDimensionAttributeName in oAttributeForPropertySet) {
            var oDimensionAttribute = oAttributeForPropertySet[sDimensionAttributeName];
            oDimensionAttribute.getDimension().addAttribute(oDimensionAttribute);
        }

        // apply workaround for missing text properties if requested
        if (oModel._oActivatedWorkarounds.IdentifyTextPropertiesByName) {
            var aMatchedTextPropertyName = new Array();
            for ( var oDimName in this._oDimensionSet) {
                var oDimension = this._oDimensionSet[oDimName];
                if (!oDimension.getTextProperty()) {
                    var oTextProperty = null; // order of matching is
                                                // significant!
                    oTextProperty = oEntityType.findPropertyByName(oDimName + "Name");
                    if (!oTextProperty)
                        oTextProperty = oEntityType.findPropertyByName(oDimName + "Text");
                    if (!oTextProperty)
                        oTextProperty = oEntityType.findPropertyByName(oDimName + "Desc");
                    if (!oTextProperty)
                        oTextProperty = oEntityType.findPropertyByName(oDimName + "Description");
                    if (oTextProperty) { // any match?
                        oDimension.setTextProperty(oTextProperty); // link
                                                                    // dimension
                                                                    // with text
                                                                    // property
                        aMatchedTextPropertyName.push(oTextProperty.name);
                    }
                }
            }
            // make sure that any matched text property is not exposed as
            // dimension (according to spec)
            for ( var i = -1, sPropertyName; sPropertyName = aMatchedTextPropertyName[++i];) {
                delete this._oDimensionSet[sPropertyName];
            }
        }
    },

    /**
     * Get the name of the query result
     * 
     * @returns {string} The fully qualified name of the parameter
     */
    getName : function() {
        return this.getEntitySet().getQName();
    },

    /**
     * Get the parameterization of this query result
     * 
     * @returns {sap.suite.smartbusiness.odata4analytics.Parameterization} The object for the
     *          parameterization or null if the query result is not
     *          parameterized
     */
    getParameterization : function() {
        return this._oParameterization;
    },

    /**
     * Get the names of all dimensions included in the query result
     * 
     * @returns {array(string)} List of all dimension names
     */
    getAllDimensionNames : function() {
        if (this._aDimensionNames)
            return this._aDimensionNames;

        this._aDimensionNames = [];

        for ( var sName in this._oDimensionSet)
            this._aDimensionNames.push(this._oDimensionSet[sName].getName());

        return this._aDimensionNames;
    },

    /**
     * Get all dimensions included in this query result
     * 
     * @returns {object} An object with individual JS properties for each
     *          dimension included in the query result. The JS object properties
     *          all are objects of type sap.suite.smartbusiness.odata4analytics.Dimension. The
     *          names of the JS object properties are given by the OData entity
     *          type property names representing the dimension keys.
     */
    getAllDimensions : function() {
        return this._oDimensionSet;
    },

    /**
     * Get the names of all measures included in the query result
     * 
     * @returns {array(string)} List of all measure names
     */
    getAllMeasureNames : function() {
        if (this._aMeasureNames)
            return this._aMeasureNames;

        this._aMeasureNames = [];

        for ( var sName in this._oMeasureSet)
            this._aMeasureNames.push(this._oMeasureSet[sName].getName());

        return this._aMeasureNames;
    },

    /**
     * Get all measures included in this query result
     * 
     * @returns {object} An object with individual JS properties for each
     *          measure included in the query result. The JS object properties
     *          all are objects of type sap.suite.smartbusiness.odata4analytics.Measure. The
     *          names of the JS object properties are given by the OData entity
     *          type property names representing the measure raw values.
     */
    getAllMeasures : function() {
        return this._oMeasureSet;
    },

    /**
     * Find dimension by name
     * 
     * @param {string}
     *            sName Dimension name
     * @returns {sap.suite.smartbusiness.odata4analytics.Dimension} The dimension object with
     *          this name or null if it does not exist
     */
    findDimensionByName : function(sName) {
        return this._oDimensionSet[sName];
    },

    /**
     * Get property holding the totaled property list
     * 
     * @returns {object} The DataJS object representing this property
     */
    getTotaledPropertiesListProperty : function() {
        return this._oTotaledPropertyListProperty;
    },

    /**
     * Find measure by name
     * 
     * @param {string}
     *            sName Measure name
     * @returns {sap.suite.smartbusiness.odata4analytics.Dimension} The measure object with this
     *          name or null if it does not exist
     */
    findMeasureByName : function(sName) {
        return this._oMeasureSet[sName];
    },

    /**
     * Get the analytical model containing the entity set for this query result
     * 
     * @returns {object} The analytical representation of the OData model
     */
    getModel : function() {
        return this._oModel;
    },

    getEntityType : function() {
        return this._oEntityType;
    },

    getEntitySet : function() {
        return this._oEntitySet;
    },

    /**
     * Private member attributes
     */

    _oModel : null,
    _oEntityType : null,
    _oEntitySet : null,
    _oParameterization : null,
    _aDimensionNames : null,
    _oDimensionSet : null,
    _aMeasureNames : null,
    _oMeasureSet : null,
    _oTotaledPropertyListProperty : null
};

/** ******************************************************************** */

/**
 * Create a representation of a parameterization for an analytic query
 * 
 * @param {sap.suite.smartbusiness.odata4analytics.EntityType}
 *            oEntityType The OData entity type for this parameterization
 * @param {sap.suite.smartbusiness.odata4analytics.EntitySet}
 *            oEntitySet The OData entity set for this parameterization offered
 *            by the OData service
 * 
 * @class Representation of an entity type annotated with
 *        sap:semantics="parameters".
 */
sap.suite.smartbusiness.odata4analytics.Parameterization = function(oEntityType, oEntitySet) {
    this._init(oEntityType, oEntitySet);
};

sap.suite.smartbusiness.odata4analytics.Parameterization.prototype = {
    /**
     * @private
     */
    _init : function(oEntityType, oEntitySet) {
        this._oEntityType = oEntityType;
        this._oEntitySet = oEntitySet;

        this._oParameterSet = new Object();

        // parse entity type for analytic semantics described by annotations
        var aProperty = oEntityType.getTypeDescription().property;
        for ( var i = -1, oProperty; oProperty = aProperty[++i];) {
            if (oProperty.extensions == undefined)
                continue;

            for ( var j = -1, oExtension; oExtension = oProperty.extensions[++j];) {

                if (!oExtension.namespace == sap.suite.smartbusiness.odata4analytics.constants.SAP_NAMESPACE)
                    continue;

                switch (oExtension.name) {
                // process parameter semantics
                case "parameter":
                    var oParameter = new sap.suite.smartbusiness.odata4analytics.Parameter(this, oProperty);
                    this._oParameterSet[oParameter.getName()] = oParameter;

                    break;
                }
            }
        }

    },

    // to be called only by Model objects
    setTargetQueryResult : function(oQueryResult, oAssociation) {
        this._oQueryResult = oQueryResult;
        var sQAssocName = this._oEntityType.getSchema().namespace + "." + oAssociation.name;
        var aNavProp = this._oEntityType.getTypeDescription().navigationProperty;
        if (!aNavProp)
            throw "Invalid consumption model: Parameters entity type lacks navigation property for association to query result entity type";
        for ( var i = -1, oNavProp; oNavProp = aNavProp[++i];) {
            if (oNavProp.relationship == sQAssocName)
                this._oNavPropToQueryResult = oNavProp.name;
        }
        if (!this._oNavPropToQueryResult)
            throw "Invalid consumption model: Parameters entity type lacks navigation property for association to query result entity type";
    },

    /**
     * Get the name of the parameter
     * 
     * @returns {string} The name of the parameter
     */
    getName : function() {
        return this.getEntitySet().getQName();
    },

    /**
     * Get the names of all parameters part of the parameterization
     * 
     * @returns {array(string)} List of all parameter names
     */
    getAllParameterNames : function() {
        if (this._aParameterNames)
            return this._aParameterNames;

        this._aParameterNames = [];

        for ( var sName in this._oParameterSet)
            this._aParameterNames.push(this._oParameterSet[sName].getName());

        return this._aParameterNames;
    },

    /**
     * Get all parameters included in this parameterization
     * 
     * @returns {object} An object with individual JS properties for each
     *          parameter included in the query result. The JS object properties
     *          all are objects of type sap.suite.smartbusiness.odata4analytics.Parameter. The
     *          names of the JS object properties are given by the OData entity
     *          type property names representing the parameter keys.
     */
    getAllParameters : function() {
        return this._oParameterSet;
    },

    /**
     * Find parameter by name
     * 
     * @param {string}
     *            sName Parameter name
     * @returns {sap.suite.smartbusiness.odata4analytics.Parameter} The parameter object with
     *          this name or null if it does not exist
     */
    findParameterByName : function(sName) {
        return this._oParameterSet[sName];
    },

    /**
     * Get navigation property to query result
     * 
     * @returns {sap.suite.smartbusiness.odata4analytics.QueryResult} The parameter object with
     *          this name or null if it does not exist
     */
    getNavigationPropertyToQueryResult : function() {
        return this._oNavPropToQueryResult;
    },

    getEntityType : function() {
        return this._oEntityType;
    },

    getEntitySet : function() {
        return this._oEntitySet;
    },

    /**
     * Private member attributes
     */
    _oEntityType : null,
    _oEntitySet : null,
    _oQueryResult : null,
    _oNavPropToQueryResult : null,
    _aParameterNames : null,
    _oParameterSet : null,
};

/** ******************************************************************** */

/**
 * Create a representation of a single parameter contained in a parameterization
 * 
 * @param {sap.suite.smartbusiness.odata4analytics.Parameterization}
 *            oParameterization The parameterization containing this parameter
 * @param {object}
 *            oProperty The DataJS object object representing the text property
 * 
 * @constructor
 * 
 * @class Representation of a property annotated with sap:parameter.
 */
sap.suite.smartbusiness.odata4analytics.Parameter = function(oParameterization, oProperty) {
    this._init(oParameterization, oProperty);
};

sap.suite.smartbusiness.odata4analytics.Parameter.prototype = {
    /**
     * @private
     */
    _init : function(oParameterization, oProperty) {
        this._oParameterization = oParameterization;
        this._oProperty = oProperty;

        var oEntityType = oParameterization.getEntityType();

        if (oProperty.extensions != undefined) {
            for ( var i = -1, oExtension; oExtension = oProperty.extensions[++i];) {

                if (!oExtension.namespace == sap.suite.smartbusiness.odata4analytics.constants.SAP_NAMESPACE)
                    continue;

                switch (oExtension.name) {
                case "parameter":
                    switch (oExtension.value) {
                    case "mandatory":
                        this._bRequired = true;
                        break;
                    case "optional":
                        this._bRequired = false;
                        break;
                    default:
                        throw "Invalid annotation value for parameter property";
                    }
                    break;
                case "label":
                    this._sLabelText = oExtension.value;
                    break;
                case "text":
                    this._oTextProperty = oEntityType.findPropertyByName(oExtension.value);
                    break;
                case "upper-boundary":
                    this._bIntervalBoundaryParameter = true;
                    this._oUpperIntervalBoundaryParameterProperty = oEntityType
                            .findPropertyByName(oExtension.value);
                    break;
                case "lower-boundary":
                    this._bIntervalBoundaryParameter = true;
                    this._oLowerIntervalBoundaryParameterProperty = oEntityType
                            .findPropertyByName(oExtension.value);
                    break;
                }
            }
        }
        if (!this._sLabelText)
            this._sLabelText = "";
    },

    // to be called only by Model objects
    setValueSetEntity : function(oEntityType, oEntitySet) {
        this._oValueSetEntityType = oEntityType;
        this._oValueSetEntitySet = oEntitySet;
    },

    /**
     * Get text property related to this parameter
     * 
     * @returns {object} The DataJS object representing the text property or
     *          null if it does not exist
     */
    getTextProperty : function() {
        return this._oTextProperty;
    },

    /**
     * Get label
     * 
     * @returns {string} The (possibly language-dependent) label text for this
     *          parameter
     */
    getLabelText : function() {
        if (!this._sLabelText
                && this._oQueryResult._oModel._oActivatedWorkarounds.CreateLabelsFromTechnicalNames)
            this._sLabelText = sap.suite.smartbusiness.odata4analytics.helper.tokenizeNametoLabelText(this
                    .getName());
        return this._sLabelText;
    },

    /**
     * Get indicator whether or not the parameter is optional
     * 
     * @returns {boolean} True iff the parameter is optional
     */
    isOptional : function() {
        return (!this._bRequired);
    },

    /**
     * Get indicator if the parameter represents an interval boundary
     * 
     * @returns {boolean} True iff it represents an interval boundary, otherwise
     *          false
     */
    isIntervalBoundary : function() {
        return this._bIntervalBoundaryParameter;
    },

    /**
     * Get indicator if the parameter represents the lower boundary of an
     * interval
     * 
     * @returns {boolean} True iff it represents the lower boundary of an
     *          interval, otherwise false
     */
    isLowerIntervalBoundary : function() {
        return (this._oUpperIntervalBoundaryParameterProperty ? true : false);
    },

    /**
     * Get property for the parameter representing the peer boundary of the same
     * interval
     * 
     * @returns {sap.suite.smartbusiness.odata4analytics.Parameter} The parameter representing
     *          the peer boundary of the same interval. This means that if
     *          *this* parameter is a lower boundary, the returned object
     */
    getPeerIntervalBoundaryParameter : function() {
        var sPeerParamPropName = null;
        if (this._oLowerIntervalBoundaryParameterProperty)
            sPeerParamPropName = this._oLowerIntervalBoundaryParameterProperty.name;
        else
            sPeerParamPropName = this._oUpperIntervalBoundaryParameterProperty.name;
        if (!sPeerParamPropName)
            throw "Parameter is not an interval boundary";
        return this._oParameterization.findParameterByName(sPeerParamPropName);
    },

    /**
     * Get indicator if a set of values is available for this parameter.
     * Typically, this is true for parameters with a finite set of known values
     * such as products, business partners in different roles, organization
     * units, and false for integer or date parameters
     * 
     * @returns {boolean} True iff a value set is available, otherwise false
     */
    isValueSetAvailable : function() {
        return (this._oValueSetEntityType ? true : false);
    },

    /**
     * Get the name of the parameter
     * 
     * @returns {string} The name of the parameter
     */
    getName : function() {
        return this._oProperty.name;
    },

    /**
     * Get property
     * 
     * @returns {object} The DataJS object representing the property of this
     *          parameter
     */
    getProperty : function() {
        return this._oProperty;
    },

    /**
     * Get parameterization containing this parameter
     * 
     * @return {sap.suite.smartbusiness.odata4analytics.Parameterization} The parameterization
     *         object
     */
    getContainingParameterization : function() {
        return this._oParameterization;
    },

    /**
     * Get the URI to locate the entity set holding the value set, if it is
     * available.
     * 
     * @param {String}
     *            sServiceRootURI (optional) Identifies the root of the OData
     *            service
     * @returns The resource path of the URI pointing to the entity set. It is a
     *          relative URI unless a service root is given, which would then
     *          prefixed in order to return a complete URL.
     */
    getURIToValueEntitySet : function(sServiceRootURI) {
        var sURI = null;
        sURI = (sServiceRootURI ? sServiceRootURI : "") + "/" + this._oValueSetEntitySet.getQName();
        return sURI;
    },

    /**
     * Private member attributes
     */
    _oParameterization : null,
    _oProperty : null,
    _sLabelText : null,
    _oTextProperty : null,
    _bRequired : false,
    _bIntervalBoundaryParameter : false,
    _oLowerIntervalBoundaryParameterProperty : null,
    _oUpperIntervalBoundaryParameterProperty : null,

    _oValueSetEntityType : null,
    _oValueSetEntitySet : null,
};

/** ******************************************************************** */

/**
 * Create a representation of a dimension provided by an analytic query
 * 
 * @param {sap.suite.smartbusiness.odata4analytics.QueryResult}
 *            oQueryResult The query result containing this dimension
 * @param {object}
 *            oProperty The DataJS object object representing the dimension
 * 
 * @constructor
 * 
 * @class Representation of a property annotated with
 *        sap:aggregation-role="dimension".
 */
sap.suite.smartbusiness.odata4analytics.Dimension = function(oQueryResult, oProperty) {
    this._init(oQueryResult, oProperty);
};

sap.suite.smartbusiness.odata4analytics.Dimension.prototype = {
    _init : function(oQueryResult, oProperty) {
        this._oQueryResult = oQueryResult;
        this._oProperty = oProperty;

        this._oAttributeSet = new Object();

        if (oProperty.extensions != undefined) {

            for ( var i = -1, oExtension; oExtension = oProperty.extensions[++i];) {

                if (!oExtension.namespace == sap.suite.smartbusiness.odata4analytics.constants.SAP_NAMESPACE)
                    continue;

                switch (oExtension.name) {
                case "label":
                    this._sLabelText = oExtension.value;
                    break;
                case "text":
                    this._oTextProperty = oQueryResult.getEntityType().findPropertyByName(
                            oExtension.value);
                    break;
                case "super-ordinate":
                    this._sSuperOrdinatePropertyName = oExtension.value;
                    break;
                }
            }
        }
        if (!this._sLabelText)
            this._sLabelText = "";
    },

    /**
     * Get the name of the dimension
     * 
     * @returns {string} The name of this dimension
     */
    getName : function() {
        return this._oProperty.name;
    },

    /**
     * Get the key property
     * 
     * @returns {object} The DataJS object representing the property for the
     *          dimension key
     */
    getKeyProperty : function() {
        return this._oProperty;
    },

    /**
     * Get text property related to this dimension
     * 
     * @returns {object} The DataJS object representing the text property or
     *          null if it does not exist
     */
    getTextProperty : function() {
        return this._oTextProperty;
    },

    /**
     * Set text property Relevant for workaround w/ID
     * IdentifyTextPropertiesByName
     * 
     * @private
     */
    setTextProperty : function(oTextProperty) {
        this._oTextProperty = oTextProperty;
    },

    /**
     * Get label
     * 
     * @returns {string} The (possibly language-dependent) label text for this
     *          dimension
     */
    getLabelText : function() {
        if (!this._sLabelText
                && this._oQueryResult._oModel._oActivatedWorkarounds.CreateLabelsFromTechnicalNames)
            this._sLabelText = sap.suite.smartbusiness.odata4analytics.helper.tokenizeNametoLabelText(this
                    .getName());
        return this._sLabelText;
    },

    /**
     * Get super-ordinate dimension
     * 
     * @returns {object} The super-ordinate dimension or null if there is none
     */
    getSuperOrdinateDimension : function() {
        if (!this._sSuperOrdinatePropertyName)
            return null;
        return this._oQueryResult.findDimensionByName(this._sSuperOrdinatePropertyName);
    },

    /**
     * Get associated hierarchy
     * 
     * @returns {object} The hierarchy object or null if there is none. It can
     *          be an instance of class
     *          sap.suite.smartbusiness.odata4analytics.RecursiveHierarchy (TODO later: or a
     *          leveled hierarchy). Use methods isLeveledHierarchy and
     *          isRecursiveHierarchy to determine object type.
     */
    getHierarchy : function() {
        // set associated hierarchy if any
        if (!this._oHierarchy)
            this._oHierarchy = this._oQueryResult.getEntityType()
                    .getHierarchy(this._oProperty.name);

        return this._oHierarchy;
    },

    /**
     * Get the names of all dimensions included in the query result
     * 
     * @returns {array(string)} List of all dimension names
     */
    getAllAttributeNames : function() {
        if (this._aAttributeNames)
            return this._aAttributeNames;

        this._aAttributeNames = [];

        for ( var sName in this._oAttributeSet)
            this._aAttributeNames.push(this._oAttributeSet[sName].getName());

        return this._aAttributeNames;
    },

    /**
     * Get all attributes of this dimensions
     * 
     * @returns {object} An object with individual JS properties for each
     *          attribute of this dimension. The JS object properties all are
     *          objects of type sap.suite.smartbusiness.odata4analytics.DimensionAttribute. The
     *          names of the JS object properties are given by the OData entity
     *          type property names representing the dimension attribute keys.
     */
    getAllAttributes : function() {
        return this._oAttributeSet;
    },

    /**
     * Find attribute by name
     * 
     * @param {string}
     *            sName Attribute name
     * @returns {sap.suite.smartbusiness.odata4analytics.Dimension} The dimension attribute
     *          object with this name or null if it does not exist
     */
    findAttributeByName : function(sName) {
        return this._oAttributeSet[sName];
    },

    // to be called only by QueryResult objects
    addAttribute : function(oDimensionAttribute) {
        this._oAttributeSet[oDimensionAttribute.getName()] = oDimensionAttribute;
    },

    /**
     * Get query result containing this parameter
     * 
     * @return {sap.suite.smartbusiness.odata4analytics.QueryResult} The query result object
     */
    getContainingQueryResult : function() {
        return this._oQueryResult;
    },

    /**
     * Private member attributes
     */
    _oQueryResult : null,
    _oProperty : null,

    _oTextProperty : null,
    _sLabelText : null,
    _sSuperOrdinatePropertyName : null,
    _aAttributeNames : null,
    _oAttributeSet : null,

    _oHierarchy : null,
};

/** ******************************************************************** */

/**
 * Create a representation of a dimension attribute provided by an analytic
 * query
 * 
 * @param {sap.suite.smartbusiness.odata4analytics.QueryResult}
 *            oQueryResult The query result containing this dimension attribute
 * @param {object}
 *            oProperty The DataJS object object representing the dimension
 *            attribute
 * 
 * @constructor
 * 
 * @class Representation of a dimension attribute.
 */
sap.suite.smartbusiness.odata4analytics.DimensionAttribute = function(oQueryResult, oProperty) {
    this._init(oQueryResult, oProperty);
};

sap.suite.smartbusiness.odata4analytics.DimensionAttribute.prototype = {
    /**
     * @private
     */
    _init : function(oQueryResult, oProperty) {
        this._oQueryResult = oQueryResult;
        this._oProperty = oProperty;

        if (oProperty.extensions != undefined) {

            for ( var i = -1, oExtension; oExtension = oProperty.extensions[++i];) {

                if (!oExtension.namespace == sap.suite.smartbusiness.odata4analytics.constants.SAP_NAMESPACE)
                    continue;

                switch (oExtension.name) {
                case "attribute-for":
                    this._sDimensionName = oExtension.value;
                    break;
                case "label":
                    this._sLabelText = oExtension.value;
                    break;
                case "text":
                    this._oTextProperty = oQueryResult.getEntityType().findPropertyByName(
                            oExtension.value);
                    break;
                }
            }
        }
    },

    /**
     * Get the name of the dimension attribute
     * 
     * @returns {string} The name of the dimension attribute
     */
    getName : function() {
        return this._oProperty.name;
    },

    /**
     * Get the key property
     * 
     * @returns {object} The DataJS object representing the property for the key
     *          of this dimension attribute
     */
    getKeyProperty : function() {
        return this._oProperty;
    },

    /**
     * Get text property related to this dimension attribute
     * 
     * @returns {object} The DataJS object representing the text property or
     *          null if it does not exist
     */
    getTextProperty : function() {
        return this._oTextProperty;
    },

    /**
     * Get label
     * 
     * @returns {string} The (possibly language-dependent) label text for this
     *          dimension attribute
     */
    getLabelText : function() {
        return this._sLabelText;
    },

    /**
     * Get dimension
     * 
     * @returns {sap.suite.smartbusiness.odata4analytics.Dimension} The dimension object
     *          containing this attribute
     */
    getDimension : function() {
        return this._oQueryResult.findDimensionByName(this._sDimensionName);
    },

    /**
     * Private member attributes
     */
    _oQueryResult : null,
    _oProperty : null,

    _oTextProperty : null,
    _sLabelText : null,
    _sDimensionName : null,
};

/** ******************************************************************** */

/**
 * Create a representation of a measure provided by an analytic query
 * 
 * @param {sap.suite.smartbusiness.odata4analytics.QueryResult}
 *            oQueryResult The query result containing this measure
 * @param {object}
 *            oProperty The DataJS object object representing the measure
 * 
 * @constructor
 * 
 * @class Representation of a property annotated with
 *        sap:aggregation-role="measure".
 */
sap.suite.smartbusiness.odata4analytics.Measure = function(oQueryResult, oProperty) {
    this._init(oQueryResult, oProperty);
};

sap.suite.smartbusiness.odata4analytics.Measure.prototype = {
    /**
     * @private
     */
    _init : function(oQueryResult, oProperty) {
        this._oQueryResult = oQueryResult;
        this._oProperty = oProperty;

        if (oProperty.extensions != undefined) {

            for ( var i = -1, oExtension; oExtension = oProperty.extensions[++i];) {

                if (!oExtension.namespace == sap.suite.smartbusiness.odata4analytics.constants.SAP_NAMESPACE)
                    continue;

                switch (oExtension.name) {
                case "label":
                    this._sLabelText = oExtension.value;
                    break;
                case "text":
                    this._oTextProperty = oQueryResult.getEntityType().findPropertyByName(
                            oExtension.value);
                    break;
                case "unit":
                    this._oUnitProperty = oQueryResult.getEntityType().findPropertyByName(
                            oExtension.value);
                    break;
                }
            }
        }
        if (!this._sLabelText)
            this._sLabelText = "";
    },

    /**
     * Get the name of the measure
     * 
     * @returns {string} The name of the measure
     */
    getName : function() {
        return this._oProperty.name;
    },

    /**
     * Get the raw value property
     * 
     * @returns {object} The DataJS object representing the property holding the
     *          raw value of this measure
     */
    getRawValueProperty : function() {
        return this._oProperty;
    },

    /**
     * Get the text property associated to the raw value property holding the
     * formatted value related to this measure
     * 
     * @returns {object} The DataJS object representing the property holding the
     *          formatted value text of this measure or null if this measure
     *          does not have a unit
     */
    getFormattedValueProperty : function() {
        return this._oTextProperty;
    },

    /**
     * Get the unit property related to this dimension
     * 
     * @returns {object} The DataJS object representing the unit property or
     *          null if this measure does not have a unit
     */
    getUnitProperty : function() {
        return this._oUnitProperty;
    },

    /**
     * Get label
     * 
     * @returns {string} The (possibly language-dependent) label text for this
     *          measure
     */
    getLabelText : function() {
        return this._sLabelText;
    },

    /**
     * Private member attributes
     */
    _oQueryResult : null,
    _oProperty : null,

    _oTextProperty : null,
    _sLabelText : null,
    _oUnitProperty : null
};

/** ******************************************************************** */

/**
 * Create a representation of an OData entity set in the context of an analytic
 * query
 * 
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity
 *            set
 * @param {object}
 *            oSchema DataJS object for the schema surrounding the container of
 *            this entity set
 * @param {object}
 *            oContainer DataJS object for the container holding this entity set
 * @param {object}
 *            oEntitySet DataJS object for the entity set
 * 
 * @constructor
 * 
 * @class Representation of a OData entity set.
 */
sap.suite.smartbusiness.odata4analytics.EntitySet = function(oModel, oSchema, oContainer, oEntitySet) {
    this._init(oModel, oSchema, oContainer, oEntitySet);
};

sap.suite.smartbusiness.odata4analytics.EntitySet.prototype = {
    /**
     * @private
     */
    _init : function(oModel, oSchema, oContainer, oEntitySet) {
        this._oEntitySet = oEntitySet;
        this._oContainer = oContainer;
        this._oSchema = oSchema;
        this._oModel = oModel;

        if (oSchema.entityContainer.length > 1)
            this._sQName = oContainer.name + "." + oEntitySet.name;
        else
            // no need to disambiguate this for the simple case
            this._sQName = oEntitySet.name;
    },

    /**
     * Get the fully qualified name for this entity type
     * 
     * @returns {string} The fully qualified name
     */
    getQName : function() {
        return this._sQName;
    },

    /**
     * Get full description for this entity set
     * 
     * @returns {object} The DataJS object representing the entity set
     */
    getSetDescription : function() {
        return this._oEntitySet;
    },

    getSchema : function() {
        return this._oSchema;
    },

    getModel : function() {
        return this._oModel;
    },

    /**
     * Private member attributes
     */

    _oEntitySet : null,
    _oContainer : null,
    _oSchema : null,
    _oModel : null,
    _sQName : null,

};

/** ******************************************************************** */

/**
 * Create a representation of an OData entity type in the context of an analytic
 * query
 * 
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity
 *            type
 * @param {object}
 *            oSchema DataJS object for the schema containing this entity type
 * @param {object}
 *            oEntityType DataJS object for the entity type
 * 
 * @constructor
 * 
 * @class Representation of a OData entity type.
 */
sap.suite.smartbusiness.odata4analytics.EntityType = function(oModel, oSchema, oEntityType) {
    this._init(oModel, oSchema, oEntityType);
};

sap.suite.smartbusiness.odata4analytics.EntityType.prototype = {
    /**
     * @private
     */
    _init : function(oModel, oSchema, oEntityType) {
        this._oEntityType = oEntityType;
        this._oSchema = oSchema;
        this._oModel = oModel;

        this._oPropertySet = new Object();
        this._aFilterablePropertyNames = [];
        this._aSortablePropertyNames = [];
        this._aRequiredFilterPropertyNames = [];

        this._sQName = oSchema.namespace + "." + oEntityType.name;

        /*
         * collect all hierarchies defined in this entity type
         */
        var oRecursiveHierarchies = {}; // temp for collecting all properties
        // participating in hierarchies
        var oRecursiveHierarchy = null;

        for ( var i = -1, oProperty; oProperty = oEntityType.property[++i];) {
        	
        	//fix for picking up properties for non sap specific annotations
        	this._oPropertySet[oProperty.name] = oProperty;
            // by default, every property can be filtered
            this._aFilterablePropertyNames.push(oProperty.name);

            // by default, every property can be sorted
            this._aSortablePropertyNames.push(oProperty.name);

            if (oProperty.extensions == undefined)
                continue;
            for ( var j = -1, oExtension; oExtension = oProperty.extensions[++j];) {

                if (!oExtension.namespace == sap.suite.smartbusiness.odata4analytics.constants.SAP_NAMESPACE)
                    continue;

                switch (oExtension.name) {
                case "filterable":
                    if (oExtension.value == "false")
                        this._aFilterablePropertyNames.pop(oProperty.name);
                    break;
                case "sortable":
                    if (oExtension.value == "false")
                        this._aSortablePropertyNames.pop(oProperty.name);
                    break;
                case "required-filter":
                    if (oExtension.value == "true")
                        this._aRequiredFilterPropertyNames.push(oProperty.name);
                    break;

                // hierarchy annotations: build temporary set of
                // hierarchy-node-id properties with relevant attributes
                case "hierarchy-node-for":
                    if (!(oRecursiveHierarchy = oRecursiveHierarchies[oProperty.name]))
                        oRecursiveHierarchy = oRecursiveHierarchies[oProperty.name] = new Object();
                    oRecursiveHierarchy.dimensionName = oExtension.value;
                    break;
                case "hierarchy-parent-node-for":
                case "hierarchy-parent-nod": // TODO workaround for GW bug
                    if (!(oRecursiveHierarchy = oRecursiveHierarchies[oExtension.value]))
                        oRecursiveHierarchy = oRecursiveHierarchies[oExtension.value] = new Object();
                    oRecursiveHierarchy.parentNodeIDProperty = oProperty;
                    break;
                case "hierarchy-level-for":
                    if (!(oRecursiveHierarchy = oRecursiveHierarchies[oExtension.value]))
                        oRecursiveHierarchy = oRecursiveHierarchies[oExtension.value] = new Object();
                    oRecursiveHierarchy.levelProperty = oProperty;
                    break;
                case "hierarchy-drill-state-for":
                case "hierarchy-drill-stat": // TODO workaround for GW bug
                    if (!(oRecursiveHierarchy = oRecursiveHierarchies[oExtension.value]))
                        oRecursiveHierarchy = oRecursiveHierarchies[oExtension.value] = new Object();
                    oRecursiveHierarchy.drillStateProperty = oProperty;
                    break;

                }

            }

            // store property references for faster lookup
            //this._oPropertySet[oProperty.name] = oProperty;
        }

        // post processing: set up hierarchy objects
        this._oRecursiveHierarchySet = new Object();
        for ( var hierNodeIDPropertyName in oRecursiveHierarchies) {
            var oHierarchy = oRecursiveHierarchies[hierNodeIDPropertyName];
            var oHierarchyNodeIDProperty = this._oPropertySet[hierNodeIDPropertyName];
            var oDimensionProperty = this._oPropertySet[oHierarchy.dimensionName];
            if (oDimensionProperty == null) {
                // TODO temporary workaround for BW provider, which does not
                // return it
                // let dimension coincide with hierarchy node ID
                oDimensionProperty = oHierarchyNodeIDProperty;
            }
            this._oRecursiveHierarchySet[oDimensionProperty.name] = new sap.suite.smartbusiness.odata4analytics.RecursiveHierarchy(
                    oEntityType, oHierarchyNodeIDProperty, oHierarchy.parentNodeIDProperty,
                    oHierarchy.levelProperty, oDimensionProperty);
        }

    },

    /**
     * Find property by name
     * 
     * @param {string}
     *            sName Property name
     * @returns {object} The DataJS object representing the property or null if
     *          it does not exist
     */
    findPropertyByName : function(sName) {
        return this._oPropertySet[sName];
    },

    /**
     * Get names of properties that can be filtered, that is they can be used in
     * $filter expressions
     * 
     * @returns {array(string)} Array with names of properties that can be
     *          filtered.
     */
    getFilterablePropertyNames : function() {
        return this._aFilterablePropertyNames;
    },

    /**
     * Get names of properties that can be sorted, that is they can be used in
     * $orderby expressions
     * 
     * @returns {array(string)} Array with names of properties that can be
     *          sorted.
     */
    getSortablePropertyNames : function() {
        return this._aSortablePropertyNames;
    },

    /**
     * Get names of properties that must be filtered, that is they must appear
     * in every $filter expression
     * 
     * @returns {array(string)} Array with names of properties that must be
     *          filtered.
     */
    getRequiredFilterPropertyNames : function() {
        return this._aRequiredFilterPropertyNames;
    },

    /**
     * Get the names of all properties with an associated hierarchy
     * 
     * @returns {array(string)} List of all property names
     */
    getAllHierarchyPropertyNames : function() {
        if (this._aHierarchyPropertyNames)
            return this._aHierarchyPropertyNames;

        this._aHierarchyPropertyNames = [];

        for ( var sName in this._oRecursiveHierarchySet)
            this._aHierarchyPropertyNames.push(this._oRecursiveHierarchySet[sName]
                    .getNodeValueProperty().name);

        return this._aHierarchyPropertyNames;
    },

    /**
     * Get the hierarchy associated to a given property Based on the current
     * specification, hierarchies are always recursive. TODO: Extend behavior
     * when leveled hierarchies get in scope
     * 
     * @param {string}
     *            sName Parameter name
     * @returns {sap.suite.smartbusiness.odata4analytics.RecursiveHierarchy} The hierarchy
     *          object or null if it does not exist
     */
    getHierarchy : function(sName) {
        if (this._oRecursiveHierarchySet[sName] == undefined)
            return null;
        return this._oRecursiveHierarchySet[sName];
    },

    /**
     * Get the fully qualified name for this entity type
     * 
     * @returns {string} The fully qualified name
     */
    getQName : function() {
        return this._sQName;
    },

    /**
     * Get full description for this entity type
     * 
     * @returns {object} The DataJS object representing the entity type
     */
    getTypeDescription : function() {
        return this._oEntityType;
    },

    getSchema : function() {
        return this._oSchema;
    },

    getModel : function() {
        return this._oModel;
    },

    /**
     * Private member attributes
     */

    _oEntityType : null,
    _oSchema : null,
    _oModel : null,
    _sQName : null,

    _oPropertySet : null,
    _aFilterablePropertyNames : null,
    _aRequiredFilterPropertyNames : null,

    _aHierarchyPropertyNames : null,
    _oRecursiveHierarchySet : null,
};

/** ******************************************************************** */

/**
 * Create a representation of a recursive hierarchy defined on one multiple
 * properties in an OData entity type query
 * 
 * @param {EntityType}
 *            oEntityType object for the entity type
 * @param {object}
 *            oNodeIDProperty DataJS object for the property holding the
 *            hierarchy node ID identifying the hierarchy node to which the
 *            OData entry belongs
 * @param {object}
 *            oParentNodeIDProperty DataJS object for the property holding the
 *            node ID of the parent of the hierarchy node pointed to by the
 *            value of oNodeIDProperty
 * @param {object}
 *            oNodeLevelProperty DataJS object for the property holding the
 *            level number for the of the hierarchy node pointed to by the value
 *            of oNodeIDProperty
 * @param {object}
 *            oNodeValueProperty DataJS object for the property holding the data
 *            value for the of the hierarchy node pointed to by the value of
 *            oNodeIDProperty
 * 
 * @constructor
 * 
 * @class Representation of a recursive hierarchy.
 */
sap.suite.smartbusiness.odata4analytics.RecursiveHierarchy = function(oEntityType, oNodeIDProperty,
        oParentNodeIDProperty, oNodeLevelProperty, oNodeValueProperty) {
    this._init(oEntityType, oNodeIDProperty, oParentNodeIDProperty, oNodeLevelProperty,
            oNodeValueProperty);
};

sap.suite.smartbusiness.odata4analytics.RecursiveHierarchy.prototype = {
    /**
     * @private
     */
    _init : function(oEntityType, oNodeIDProperty, oParentNodeIDProperty, oNodeLevelProperty,
            oNodeValueProperty) {
        this._oEntityType = oEntityType;

        this._oNodeIDProperty = oNodeIDProperty;
        this._oParentNodeIDProperty = oParentNodeIDProperty;
        this._oNodeLevelProperty = oNodeLevelProperty;
        this._oNodeValueProperty = oNodeValueProperty;

    },

    /**
     * Get indicator if this is a recursive hierarchy
     * 
     * @returns {boolean} True
     */
    isRecursiveHierarchy : function() {
        return true;
    },

    /**
     * Get indicator if this is a leveled hierarchy
     * 
     * @returns {boolean} False
     */
    isLeveledHierarchy : function() {
        return false;
    },

    /**
     * Get the property holding the node ID of the hierarchy node
     * 
     * @returns {object} The DataJS object representing this property
     */
    getNodeIDProperty : function() {
        return this._oNodeIDProperty;
    },

    /**
     * Get the property holding the parent node ID of the hierarchy node
     * 
     * @returns {object} The DataJS object representing this property
     */
    getParentNodeIDProperty : function() {
        return this._oParentNodeIDProperty;
    },

    /**
     * Get the property holding the level of the hierarchy node
     * 
     * @returns {object} The DataJS object representing this property
     */
    getNodeLevelProperty : function() {
        return this._oNodeLevelProperty;
    },

    /**
     * Get the property holding the value that is structurally organized by the
     * hierarchy
     * 
     * @returns {object} The DataJS object representing this property
     */
    getNodeValueProperty : function() {
        return this._oNodeValueProperty;
    },

    /**
     * Private member attributes
     */

    _oNodeIDProperty : null,
    _oParentNodeIDProperty : null,
    _oNodeLevelProperty : null,
    _oNodeValueProperty : null,

};

/** ******************************************************************** */

/**
 * Create a representation of a filter expression for a given entity type. It
 * can be rendered as value for the $filter system query option.
 * 
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity
 *            type
 * @param {object}
 *            oSchema DataJS object for the schema containing this entity type
 * @param {sap.suite.smartbusiness.odata4analytics.EntityType}
 *            oEntityType object for the entity type
 * 
 * @constructor
 * 
 * @class Representation of a $filter expression for an OData entity type.
 */
sap.suite.smartbusiness.odata4analytics.FilterExpression = function(oModel, oSchema, oEntityType) {
    this._init(oModel, oSchema, oEntityType);
};

sap.suite.smartbusiness.odata4analytics.FilterExpression.prototype = {
    /**
     * @private
     */
    _init : function(oModel, oSchema, oEntityType) {
        this._oEntityType = oEntityType;
        this._oSchema = oSchema;
        this._oModel = oModel;

        this._aFilterCondition = new Array();
    },

    /**
     * Clear expression from any conditions that may have been set previously
     * 
     */
    clear : function() {
        this._aFilterCondition = new Array();
    },

    /**
     * Add a condition to the filter expression.
     * 
     * Multiple conditions on the same property are combined with a logical OR
     * first, and in a second step conditions for different properties are
     * combined with a logical AND.
     * 
     * @param {string}
     *            sPropertyName The name of the property bound in the condition
     * @param {sap.ui.model.FilterOperator}
     *            sOperator operator used for the condition
     * @param {object}
     *            oValue value to be used for this condition
     * @param {object}
     *            oValue2 (optional) as second value to be used for this
     *            condition
     * @throws Exception
     *             if the property is unknown or not filterable
     * @returns {sap.suite.smartbusiness.odata4analytics.FilterExpression} This object for
     *          method chaining
     */
    addCondition : function(sPropertyName, sOperator, oValue, oValue2) {
        var oProperty = this._oEntityType.findPropertyByName(sPropertyName);
        if (oProperty == null) {
            throw "Cannot add filter condition for unknown property name " + sPropertyName; // TODO
        }
        var aFilterablePropertyNames = this._oEntityType.getFilterablePropertyNames();
        if (aFilterablePropertyNames.indexOf(sPropertyName) === -1) {
            throw "Cannot add filter condition for not filterable property name " + sPropertyName; // TODO
        }
        this._aFilterCondition.push({
            property : oProperty,
            op : sOperator,
            val1 : oValue,
            val2 : oValue2
        });
        return this._aFilterablePropertyNames;
    },

    /**
     * Add a set condition to the filter expression.
     * 
     * A set condition tests if the value of a property is included in a set of
     * given values. It is a convenience method for this particular use case
     * eliminating the need for multiple API calls.
     * 
     * @param {string}
     *            sPropertyName The name of the property bound in the condition
     * @param {array}
     *            aValues values defining the set
     * @throws Exception
     *             if the property is unknown or not filterable
     * @returns {sap.suite.smartbusiness.odata4analytics.FilterExpression} This object for
     *          method chaining
     */
    addSetCondition : function(sPropertyName, aValues) {
        var oProperty = this._oEntityType.findPropertyByName(sPropertyName);
        if (oProperty == null) {
            throw "Cannot add filter condition for unknown property name " + sPropertyName; // TODO
        }
        var aFilterablePropertyNames = this._oEntityType.getFilterablePropertyNames();
        if (aFilterablePropertyNames.indexOf(sPropertyName) === -1) {
            throw "Cannot add filter condition for not filterable property name " + sPropertyName; // TODO
        }
        for ( var i = -1, oValue; oValue = aValues[++i];) {
            this._aFilterCondition.push({
                property : oProperty,
                op : sap.ui.model.FilterOperator.EQ,
                val1 : oValue
            });
        }
        return this._aFilterablePropertyNames;
    },

    /**
     * Get an array of SAPUI5 Filter objects corresponding to this expression.
     * 
     * @returns {array(sap.ui.model.Filter)} List of filter objects representing
     *          this expression
     */
    getExpressionAsUI5FilterArray : function() {
        var aFilterObjects = new Array();

        for ( var i = -1, oCondition; oCondition = this._aFilterCondition[++i];) {
            aFilterObjects.push(new sap.ui.model.Filter(oCondition.property.name, oCondition.op,
                    oCondition.val1, oCondition.val2));
        }
        return aFilterObjects;
    },

    /**
     * Get the value for the OData system query option $filter corresponding to
     * this expression.
     * 
     * @returns {string} The $filter value for the filter expression
     */
    getURIFilterOptionValue : function() {

        if (this._aFilterCondition.length == 0)
            return "";

        this._aFilterCondition.sort(function(a, b) {
            if (a.property.name == b.property.name)
                return 0;
            if (a.property.name > b.property.name)
                return 1;
            else
                return -1;
        });

        var sPropertyName = this._aFilterCondition[0].property.name;
        var sOptionString = "";
        var sSubExpression = "";
        for ( var i = -1, oCondition; oCondition = this._aFilterCondition[++i];) {
            if (sPropertyName != oCondition.property.name) {
                sOptionString += (sOptionString == "" ? "" : " and ") + "(" + sSubExpression + ")";
                sSubExpression = "";
                sPropertyName = oCondition.property.name;
            }

            switch (oCondition.op) {
            case sap.ui.model.FilterOperator.BT:
                sSubExpression += (sSubExpression == "" ? "" : " or ")
                        + "("
                        + oCondition.property.name
                        + " "
                        + sap.ui.model.FilterOperator.GE.toLowerCase()
                        + " "
                        + sap.suite.smartbusiness.odata4analytics.helper.renderPropertyFilterValue(oCondition.val1,
                                oCondition.property.type)
                        + " and "
                        + oCondition.property.name
                        + " "
                        + sap.ui.model.FilterOperator.LE.toLowerCase()
                        + " "
                        + sap.suite.smartbusiness.odata4analytics.helper.renderPropertyFilterValue(oCondition.val2,
                                oCondition.property.type) + ")";
                break;
            default:
                sSubExpression += (sSubExpression == "" ? "" : " or ")
                        + "("
                        + oCondition.property.name
                        + " "
                        + oCondition.op.toLowerCase()
                        + " "
                        + sap.suite.smartbusiness.odata4analytics.helper.renderPropertyFilterValue(oCondition.val1,
                                oCondition.property.type) + ")";
            }
        }
        sOptionString += (sOptionString == "" ? "" : " and ") + "(" + sSubExpression + ")";

        return sOptionString;
    },

    /**
     * Get description for this entity type
     * 
     * @returns {sap.suite.smartbusiness.odata4analytics.EntityType} The object representing the
     *          entity type
     */
    getEntityType : function() {
        return this._oEntityType;
    },

    getSchema : function() {
        return this._oSchema;
    },

    getModel : function() {
        return this._oModel;
    },

    /**
     * Private member attributes
     */

    _oEntityType : null,
    _oSchema : null,
    _oModel : null,

    _aFilterCondition : null,
};

/** ******************************************************************** */

/**
 * @class Sort order of a property
 * 
 * @static
 * @public
 */
sap.suite.smartbusiness.odata4analytics.SortOrder = {

    /**
     * Sort Order: ascending.
     * 
     * @public
     */
    Ascending : "asc",

    /**
     * Sort Order: descending.
     * 
     * @public
     */
    Descending : "desc"

};

/** ******************************************************************** */

/**
 * Create a representation of an order by expression for a given entity type. It
 * can be rendered as value for the $orderby system query option.
 * 
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity
 *            type
 * @param {object}
 *            oSchema DataJS object for the schema containing this entity type
 * @param {sap.suite.smartbusiness.odata4analytics.EntityType}
 *            oEntityType object for the entity type
 * 
 * @constructor
 * 
 * @class Representation of a $orderby expression for an OData entity type.
 */
sap.suite.smartbusiness.odata4analytics.SortExpression = function(oModel, oSchema, oEntityType) {
    this._init(oModel, oSchema, oEntityType);
};

sap.suite.smartbusiness.odata4analytics.SortExpression.prototype = {
    /**
     * @private
     */
    _init : function(oModel, oSchema, oEntityType) {
        this._oEntityType = oEntityType;
        this._oSchema = oSchema;
        this._oModel = oModel;

        this._aSortCondition = [];
    },

    /**
     * Checks if an order by expression for the given property is already
     * defined and returns a reference to an object with property sorter and
     * index of the object or null if the property is not yet defined in an
     * order by expression.
     * 
     * @private
     */
    _containsSorter : function(sPropertyName) {
        var oResult = null;
        for ( var i = -1, oCurrentSorter; oCurrentSorter = this._aSortCondition[++i];) {
            if (oCurrentSorter.property.name === sPropertyName) {
                oResult = {
                    sorter : oCurrentSorter,
                    index : i
                };
                break;
            }
        }
        return oResult;
    },

    /**
     * TODO helper method to remove elements from array
     * 
     * @private
     */
    _removeFromArray : function(array, from, to) {
        var rest = array.slice((to || from) + 1 || array.length);
        array.length = from < 0 ? array.length + from : from;
        return array.push.apply(array, rest);
    },

    /**
     * Clear expression from any sort conditions that may have been set
     * previously
     */
    clear : function() {
        this._aSortCondition = [];
    },

    /**
     * Add a condition to the order by expression. Multiple conditions on the
     * same property will throw an exception, e.g. you cannot order by ascending
     * and descending at the same time on the same property.
     * 
     * @param {string}
     *            sPropertyName The name of the property bound in the condition
     * @param {sap.suite.smartbusiness.odata4analytics.SortOrder}
     *            sSortOrder sorting order used for the condition
     * @throws Exception
     *             if the property is unknown, not sortable or already added as
     *             sorter
     * @returns {sap.suite.smartbusiness.odata4analytics.SortExpression} This object for method
     *          chaining
     */
    addSorter : function(sPropertyName, sSortOrder) {
        var oProperty = this._oEntityType.findPropertyByName(sPropertyName);
        if (oProperty == null) {
            throw "Cannot add sort condition for unknown property name " + sPropertyName; // TODO
        }
        if (this._containsSorter(sPropertyName) != null) {
            throw "Sort condition for this property name is already defined " + sPropertyName; // TODO
        }
        var aSortablePropertyNames = this._oEntityType.getSortablePropertyNames();
        if (aSortablePropertyNames.indexOf(sPropertyName) === -1) {
            throw "Cannot add sort condition for not sortable property name " + sPropertyName; // TODO
        }

        this._aSortCondition.push({
            property : oProperty,
            order : sSortOrder
        });
        return this;
    },

    /**
     * Removes the order by expression for the given property name from the list
     * of order by expression. If no order by expression with this property name
     * exists the method does nothing.
     * 
     * @param {string}
     *            sPropertyName The name of the property to be removed from the
     *            condition
     */
    removeSorter : function(sPropertyName) {
        if (!sPropertyName)
            return;

        var oSorter = this._containsSorter(sPropertyName);
        if (oSorter) {
            this._removeFromArray(this._aSortCondition, oSorter.index);
        }
    },

    /**
     * Get an array of SAPUI5 Sorter objects corresponding to this expression.
     * 
     * @returns {array(sap.ui.model.Sorter)} List of sorter objects representing
     *          this expression
     */
    getExpressionsAsUI5SorterArray : function() {
        var aSorterObjects = [];

        for ( var i = -1, oCondition; oCondition = this._aSortCondition[++i];) {
            aSorterObjects.push(new sap.ui.model.Sorter(oCondition.property.name,
                    oCondition.order == sap.suite.smartbusiness.odata4analytics.SortOrder.Descending));
        }

        return aSorterObjects;
    },

    /**
     * Get the first SAPUI5 Sorter object.
     * 
     * @returns {sap.ui.model.Sorter} first sorter object or null if empty
     */
    getExpressionAsUI5Sorter : function() {
        var aSortArray = this.getExpressionsAsUI5SorterArray();
        if (aSortArray.length == 0) {
            return null;
        } else {
            return aSortArray[0];
        }
    },

    /**
     * Get the value for the OData system query option $orderby corresponding to
     * this expression.
     * 
     * @returns {string} The $orderby value for the sort expressions
     */
    getURIOrderByOptionValue : function() {
        if (this._aSortCondition.length == 0)
            return "";

        var sOrderByOptionString = "";
        for ( var i = -1, oCondition; oCondition = this._aSortCondition[++i];) {
            sOrderByOptionString += oCondition.property.name + " " + oCondition.order;
            if (i < this._aSortCondition.length - 1) {
                sOrderByOptionString += ", ";
            }
        }

        return sOrderByOptionString;
    },

    /**
     * Get description for this entity type
     * 
     * @returns {sap.suite.smartbusiness.odata4analytics.EntityType} The object representing the
     *          entity type
     */
    getEntityType : function() {
        return this._oEntityType;
    },

    getSchema : function() {
        return this._oSchema;
    },

    getModel : function() {
        return this._oModel;
    },

    /**
     * Private member attributes
     */

    _oEntityType : null,
    _oSchema : null,
    _oModel : null,

    _aSortCondition : null,
};

/** ******************************************************************** */

/**
 * Create a request object for interaction with a query parameterization.
 * 
 * @param {sap.suite.smartbusiness.odata4analytics.Parameterization}
 *            oParameterization Description of a query parameterization
 * 
 * @constructor
 * 
 * @class Creation of URIs for query parameterizations.
 */
sap.suite.smartbusiness.odata4analytics.ParameterizationRequest = function(oParameterization) {
    this._init(oParameterization);
};

sap.suite.smartbusiness.odata4analytics.ParameterizationRequest.prototype = {
    /**
     * @private
     */
    _init : function(oParameterization) {
        if (!oParameterization)
            throw "No parameterization given"; // TODO
        this._oParameterization = oParameterization;
        this._oParameterValueAssignment = new Array();
    },

    /**
     * Get the description of the parameterization on which this request
     * operates on
     * 
     * @returns {sap.suite.smartbusiness.odata4analytics.Parameterization} Description of a
     *          query parameterization
     */
    getParameterization : function() {
        return this._oParameterization;
    },

    /**
     * Assign a value to a parameter
     * 
     * @param {String}
     *            sParameterName Name of the parameter. In case of a range
     *            value, provide the name of the lower boundary parameter.
     * @param {String}
     *            sValue Assigned value. Pass null to remove a value assignment.
     * @param {String}
     *            sToValue Omit it or set it to null for single values. If set,
     *            it will be assigned to the upper boundary parameter
     */
    setParameterValue : function(sParameterName, sValue, sToValue) {
        var oParameter = this._oParameterization.findParameterByName(sParameterName);
        if (!oParameter)
            throw "Invalid parameter name " + sParameterName; // TODO improve
        // error handling
        if (sToValue != null) {
            if (!oParameter.isIntervalBoundary())
                // TODO improve error handling
                throw "Range value cannot be applied to parameter " + sParameterName
                        + " accepting only single values"; // TODO
            if (!oParameter.isLowerIntervalBoundary())
                // TODO improve error handling
                throw "Range value given, but parameter " + sParameterName
                        + " does not hold the lower boundary"; // TODO
        }
        if (!oParameter.isIntervalBoundary()) {
            if (sValue == null)
                delete this._oParameterValueAssignment[sParameterName];
            else
                this._oParameterValueAssignment[sParameterName] = sValue;
        } else {
            if (sValue == null && sToValue != null)
                throw "Parameter " + sParameterName
                        + ": An upper boundary cannot be given without the lower boundary"; // TODO
            if (sValue == null) {
                delete this._oParameterValueAssignment[sParameterName];
                sToValue = null;
            } else
                this._oParameterValueAssignment[sParameterName] = sValue;
            var oUpperBoundaryParameter = oParameter.getPeerIntervalBoundaryParameter();
            if (sToValue == null)
                sToValue = sValue;
            if (sValue == null)
                delete this._oParameterValueAssignment[oUpperBoundaryParameter.getName()];
            else
                this._oParameterValueAssignment[oUpperBoundaryParameter.getName()] = sToValue;
        }
        return;
    },

    /**
     * Get the URI to locate the entity set for the query parameterization.
     * 
     * @param {String}
     *            sServiceRootURI (optional) Identifies the root of the OData
     *            service
     * @returns The resource path of the URI pointing to the entity set. It is a
     *          relative URI unless a service root is given, which would then
     *          prefixed in order to return a complete URL.
     */
    getURIToParameterizationEntitySet : function(sServiceRootURI) {
        return (sServiceRootURI ? sServiceRootURI : "") + "/"
                + this._oParameterization.getEntitySet().getQName();
    },

    /**
     * Get the URI to locate the parameterization entity for the values assigned
     * to all parameters beforehand. Notice that a value must be supplied for
     * every parameter including those marked as optional. For optional
     * parameters, assign the special value that the service provider uses as an
     * "omitted" value. For example, for services based on BW Easy Queries, this
     * would be an empty string.
     * 
     * @param {String}
     *            sServiceRootURI (optional) Identifies the root of the OData
     *            service
     * @returns The resource path of the URI pointing to the entity set. It is a
     *          relative URI unless a service root is given, which would then
     *          prefixed in order to return a complete URL.
     */
    getURIToParameterizationEntry : function(sServiceRootURI) {
        var oDefinedParameters = this._oParameterization.getAllParameters();
        for ( var sDefinedParameterName in oDefinedParameters) {
            // check that all parameters have a value assigned. This is also
            // true for those marked as optional, because the omitted value is
            // conveyed by some default value, e.g. as empty string.
            if (this._oParameterValueAssignment[sDefinedParameterName] == undefined)
                throw "Parameter " + sDefinedParameterName + " has no value assigned"; // TODO
        }
        var sKeyIdentification = "", bFirst = true;
        for ( var sParameterName in this._oParameterValueAssignment) {
            sKeyIdentification += (bFirst ? "" : ",")
                    + sParameterName
                    + "="
                    + sap.suite.smartbusiness.odata4analytics.helper.renderPropertyKeyValue(
                            this._oParameterValueAssignment[sParameterName],
                            oDefinedParameters[sParameterName].getProperty().type);
            bFirst = false;
        }

        return (sServiceRootURI ? sServiceRootURI : "") + "/"
                + this._oParameterization.getEntitySet().getQName() + "(" + sKeyIdentification
                + ")";
    },

    /**
     * Private member attributes
     */
    _oParameterization : null,
    _oParameterValueAssignment : null,

};

/** ******************************************************************** */

/**
 * Create a request object for interaction with a query result.
 * 
 * @param {sap.suite.smartbusiness.odata4analytics.QueryResult}
 *            oParameterization Description of a query parameterization
 * @param {sap.suite.smartbusiness.odata4analytics.ParameterizationRequest}
 *            oParameterizationRequest (optional) Request object for
 *            interactions with the parameterization of this query. Only
 *            required if the query service includes parameters.
 * 
 * @constructor
 * 
 * @class Creation of URIs for fetching query results.
 */
sap.suite.smartbusiness.odata4analytics.QueryResultRequest = function(oQueryResult, oParameterizationRequest) {
    this._init(oQueryResult);
};

sap.suite.smartbusiness.odata4analytics.QueryResultRequest.prototype = {
    /**
     * @private
     */
    _init : function(oQueryResult, oParameterizationRequest) {
        this._oQueryResult = oQueryResult;
        this._oParameterizationRequest = oParameterizationRequest;
        this._oAggregationLevel = new Object();
        this._oMeasures = new Object();
        this._bIncludeEntityKey = false;
        this._oFilterExpression = null;
    },

    /**
     * Set the parameterization request required for interactions with the query
     * result of parameterized queries
     * 
     * @param oParameterizationRequest
     *            Request object for interactions with the parameterization of
     *            this query
     */
    setParameterizationRequest : function(oParameterizationRequest) {
        this._oParameterizationRequest = oParameterizationRequest;
    },

    /**
     * Get the description of the query result on which this request operates on
     * 
     * @returns {sap.suite.smartbusiness.odata4analytics.QueryResult} Description of a query
     *          result
     */
    getQueryResult : function() {
        return this._oQueryResult;
    },

    /**
     * Set the aggregation level for the query result request. By default, the
     * query result will include the properties holding the keys of the given
     * dimensions. This setting can be changed using
     * includeDimensionKeyTextAttributes.
     * 
     * @param aDimensionName
     *            Array of dimension names to be part of the aggregation level.
     *            If null, the aggregation level includes all dimensions, if
     *            empty, no dimension is included.
     * 
     */
    setAggregationLevel : function(aDimensionName) {
        this._oAggregationLevel = new Object();
        if (!aDimensionName) {
            aDimensionName = this._oQueryResult.getAllDimensionNames();
        }
        this.addToAggregationLevel(aDimensionName);
    },

    /**
     * Add one or more dimensions to the aggregation level
     * 
     * @param aDimensionName
     *            Array of dimension names to be added to the already defined
     *            aggregation level.
     * 
     */
    addToAggregationLevel : function(aDimensionName) {
        if (!aDimensionName)
            return;

        for ( var i = -1, sDimName; sDimName = aDimensionName[++i];) {
            if (!this._oQueryResult.findDimensionByName(sDimName))
                throw sDimName + " is not a valid dimension name"; // TODO
            this._oAggregationLevel[sDimName] = {
                key : true,
                text : false,
                attributes : null
            };
        }
    },

    /**
     * Remove one or more dimensions from the aggregation level. The method also
     * removed a potential sort expression on the dimension.
     * 
     * @param aDimensionName
     *            Array of dimension names to be removed from the already
     *            defined aggregation level.
     */
    removeFromAggregationLevel : function(aDimensionName) {
        if (!aDimensionName) {
            return;
        }
        for ( var i = -1, sDimName; sDimName = aDimensionName[++i];) {
            if (!this._oQueryResult.findDimensionByName(sDimName)) {
                throw sDimName + " is not a valid dimension name"; // TODO
            }
            if (this._oAggregationLevel[sDimName] != undefined) {
                delete this._oAggregationLevel[sDimName];

                // remove potential sort expression on this dimension
                this.getSortExpression().removeSorter(sDimName);
            }
        }
    },

    /**
     * Get the names of the dimensions included in the aggregation level
     * 
     * @returns {Array} The dimension names included in the aggregation level
     */
    getAggregationLevel : function() {
        var aDimName = new Array();
        for ( var sDimName in this._oAggregationLevel) {
            aDimName.push(sDimName);
        }
        return aDimName;
    },

    /**
     * Get details about a dimensions included in the aggregation level
     * 
     * @param sDImensionName
     *            Name of a dimension included in the aggregation level of this
     *            request, for which details shall be returned
     * 
     * @returns {object} An object with three properties named key and text,
     *          both with Boolean values indicating whether the key and text of
     *          this dimension are included in this request. The third property
     *          named attributes is an array of attribute names of this
     *          dimension included in this request, or null, if there are none.
     */
    getAggregationLevelDetails : function(sDimensionName) {
        if (this._oAggregationLevel[sDimensionName] == undefined)
            throw "Aggregation level does not include dimension " + sDimensionName;
        return this._oAggregationLevel[sDimensionName];
    },

    /**
     * Set the measures to be included in the query result request. By default,
     * the query result will include the properties holding the raw values of
     * the given measures. This setting can be changed using
     * includeMeasureRawFormattedValueUnit.
     * 
     * @param aMeasureName
     *            Array of measure names to be part of the query result request.
     *            If null, the request includes all measures, if empty, no
     *            measure is included.
     */
    setMeasures : function(aMeasureName) {
        if (!aMeasureName) {
            aMeasureName = this._oQueryResult.getAllMeasureNames();
        }
        this._oMeasures = new Object();
        for ( var i = -1, sMeasName; sMeasName = aMeasureName[++i];) {
            if (!this._oQueryResult.findMeasureByName(sMeasName))
                throw sMeasName + " is not a valid measure name"; // TODO

            this._oMeasures[sMeasName] = {
                value : true,
                text : false,
                unit : false,
            };
        }
    },

    /**
     * Get the names of the measures included in the query result request
     * 
     * @returns {Array} The measure names included in the query result request
     */
    getMeasureNames : function() {
        var aMeasName = new Array();
        for ( var sMeasName in this._oMeasures) {
            aMeasName.push(sMeasName);
        }
        return aMeasName;
    },

    /**
     * Specify which dimension components shall be included in the query result.
     * The settings get applied to the currently defined aggregation level.
     * 
     * @param sDimensionName
     *            Name of the dimension for which the settings get applied.
     *            Specify null to apply the settings to all dimensions in the
     *            aggregation level.
     * @param bIncludeKey
     *            Indicator whether or not to include the dimension key in the
     *            query result. Pass null to keep current setting.
     * @param bIncludeText
     *            Indicator whether or not to include the dimension text (if
     *            available) in the query result. Pass null to keep current
     *            setting.
     * @param aAttributeName
     *            Array of dimension attribute names to be included in the
     *            result. Pass null to keep current setting. This argument is
     *            ignored if sDimensionName is null.
     */
    includeDimensionKeyTextAttributes : function(sDimensionName, bIncludeKey, bIncludeText,
            aAttributeName) {
        var aDimName = new Array();
        if (sDimensionName) {
            if (this._oAggregationLevel[sDimensionName] == undefined)
                throw sDimensionName + " is not included in the aggregation level";
            aDimName.push(sDimensionName);
        } else {
            for ( var sName in this._oAggregationLevel) {
                aDimName.push(sName);
            }
            aAttributeName = null;
        }
        for ( var i = -1, sDimName; sDimName = aDimName[++i];) {
            if (bIncludeKey != null)
                this._oAggregationLevel[sDimName].key = bIncludeKey;
            if (bIncludeText != null)
                this._oAggregationLevel[sDimName].text = bIncludeText;
            if (aAttributeName != null)
                this._oAggregationLevel[sDimName].attributes = aAttributeName;
        }
    },

    /**
     * Specify which measure components shall be included in the query result.
     * The settings get applied to the currently set measures.
     * 
     * @param sMeasureName
     *            Name of the measure for which the settings get applied.
     *            Specify null to apply the settings to all currently set
     *            measures.
     * @param bIncludeRawValue
     *            Indicator whether or not to include the raw value in the query
     *            result. Pass null to keep current setting.
     * @param bIncludeFormattedValue
     *            Indicator whether or not to include the formatted value (if
     *            available) in the query result. Pass null to keep current
     *            setting.
     * @param bIncludeUnit
     *            Indicator whether or not to include the unit (if available) in
     *            the query result. Pass null to keep current setting.
     */
    includeMeasureRawFormattedValueUnit : function(sMeasureName, bIncludeRawValue,
            bIncludeFormattedValue, bIncludeUnit) {
        var aMeasName = new Array();
        if (sMeasureName) {
            if (this._oMeasures[sMeasureName] == undefined)
                throw sMeasureName + " is not part of the query result";
            aMeasName.push(sMeasureName);
        } else {
            for ( var sName in this._oMeasures) {
                aMeasName.push(sName);
            }
        }
        for ( var i = -1, sMeasName; sMeasName = aMeasName[++i];) {
            if (bIncludeRawValue != null)
                this._oMeasures[sMeasName].value = bIncludeRawValue;
            if (bIncludeFormattedValue != null)
                this._oMeasures[sMeasName].text = bIncludeFormattedValue;
            if (bIncludeUnit != null)
                this._oMeasures[sMeasName].unit = bIncludeUnit;
        }
    },

    /**
     * Get the filter expression for this request.
     * 
     * Expressions are represented by separate objects. If none exists so far, a
     * new expression object gets created.
     * 
     * @returns {sap.suite.smartbusiness.odata4analytics.FilterExpression} The filter object
     *          associated to this request.
     */
    getFilterExpression : function() {
        if (this._oFilterExpression == null) {
            var oEntityType = this._oQueryResult.getEntityType();
            this._oFilterExpression = new sap.suite.smartbusiness.odata4analytics.FilterExpression(oEntityType
                    .getModel(), oEntityType.getSchema(), oEntityType);
        }
        return this._oFilterExpression;
    },

    /**
     * Set the filter expression for this request.
     * 
     * Expressions are represented by separate objects. Calling this method
     * replaces the filter object maintained by this request.
     * 
     * @param {sap.suite.smartbusiness.odata4analytics.FilterExpression}
     *            oFilter The filter object to be associated with this request.
     */
    setFilterExpression : function(oFilter) {
        this._oFilterExpression = oFilter;
    },

    /**
     * Get the sort expression for this request.
     * 
     * Expressions are represented by separate objects. If none exists so far, a
     * new expression object gets created.
     * 
     * @returns {sap.suite.smartbusiness.odata4analytics.SortExpression} The sort object
     *          associated to this request.
     */
    getSortExpression : function() {
        if (this._oSortExpression == null) {
            var oEntityType = this._oQueryResult.getEntityType();
            this._oSortExpression = new sap.suite.smartbusiness.odata4analytics.SortExpression(oEntityType
                    .getModel(), oEntityType.getSchema(), oEntityType);
        }
        return this._oSortExpression;
    },

    /**
     * Set the sort expression for this request.
     * 
     * Expressions are represented by separate objects. Calling this method
     * replaces the sort object maintained by this request.
     * 
     * @param {sap.suite.smartbusiness.odata4analytics.SortExpression}
     *            oSorter The sort object to be associated with this request.
     */
    setSortExpression : function(oSorter) {
        this._oSortExpression = oSorter;
    },

    /**
     * Set further options to be applied for the OData request to fetch the
     * query result
     * 
     * @param {Boolean}
     *            bIncludeEntityKey Indicates whether or not the entity key
     *            should be returned for every entry in the query result.
     *            Default is not to include it. Pass null to keep current
     *            setting.
     * @param {Boolean}
     *            bIncludeCount Indicates whether or not the result shall
     *            include a count for the returned entities. Default is not to
     *            include it. Pass null to keep current setting.
     */
    setRequestOptions : function(bIncludeEntityKey, bIncludeCount) {
        if (bIncludeEntityKey)
            this._bIncludeEntityKey = bIncludeEntityKey;
        if (bIncludeCount)
            this._bIncludeCount = bIncludeCount;
    },

    /**
     * Specify that only a page of the query result shall be returned. A page is
     * described by its boundaries, that are row numbers for the first and last
     * rows in the query result to be returned.
     * 
     * @param {Number}
     *            start The first row of the query result to be returned.
     *            Numbering starts at 1. Passing null is equivalent to start
     *            with the first row.
     * @param {Number}
     *            end The last row of the query result to be returned. Passing
     *            null is equivalent to get all rows up to the end of the query
     *            result.
     */
    setResultPageBoundaries : function(start, end) {
        if (start != null && typeof start !== "number") {
            throw "Start value must be null or numeric"; // TODO
        }
        if (end !== null && typeof end !== "number") {
            throw "End value must be null or numeric"; // TODO
        }

        if (start == null)
            start = 1;

        if (start < 1 || start > (end == null ? start : end)) {
            throw "Invalid values for requested page boundaries"; // TODO
        }

        this._iSkipRequestOption = (start > 1) ? start : null;
        this._iTopRequestOption = (end != null) ? (end - start + 1) : null;
    },

    /**
     * Returns the current page boundaries as object with properties
     * <code>start</code> and <code>end</code>. If the end of the page is
     * unbounded, <code>end</code> is null.
     * 
     * @returns {Object} the current page boundaries as object
     */
    getResultPageBoundaries : function() {
        return {
            start : (this._iSkipRequestOption == null) ? 1 : this._iSkipRequestOption,
            end : (this._iTopRequestOption != null) ? (this._iSkipRequestOption == null) ? 1
                    : this._iSkipRequestOption + this._iTopRequestOption : null
        };
    },

    /**
     * Get the URI to locate the entity set for the query result.
     * 
     * @param {String}
     *            sServiceRootURI (optional) Identifies the root of the OData
     *            service
     * @returns {String} The resource path of the URI pointing to the entity
     *          set. It is a relative URI unless a service root is given, which
     *          would then prefixed in order to return a complete URL.
     */
    getURIToQueryResultEntitySet : function(sServiceRootURI) {
        var sURI = null;
        if (this._oQueryResult.getParameterization()) {
            if (!this._oParameterizationRequest)
                throw "Missing parameterization request";
            else
                sURI = this._oParameterizationRequest
                        .getURIToParameterizationEntry(sServiceRootURI)
                        + "/"
                        + this._oQueryResult.getParameterization()
                                .getNavigationPropertyToQueryResult();
        } else
            sURI = (sServiceRootURI ? sServiceRootURI : "") + "/"
                    + this._oQueryResult.getEntitySet().getQName();
        return sURI;
    },

    /**
     * Get the value of an query option for the OData request URI corresponding
     * to this request.
     * 
     * @param {String}
     *            sQueryOptionName Identifies the query option: $select,
     *            $filter,$orderby ... or any custom query option
     * 
     * @returns {String} The value of the requested query option or null, if
     *          this option is not used for the OData request.
     */
    getURIQueryOptionValue : function(sQueryOptionName) {
        var sQueryOptionValue = null;

        switch (sQueryOptionName) {
        case "$select": {
            var sSelectOption = "";
            for ( var sDimName in this._oAggregationLevel) {
                var oDim = this._oQueryResult.findDimensionByName(sDimName);
                var oDimSelect = this._oAggregationLevel[sDimName];
                if (oDimSelect.key == true)
                    sSelectOption += (sSelectOption == "" ? "" : ",") + oDim.getKeyProperty().name;
                if (oDimSelect.text == true && oDim.getTextProperty())
                    sSelectOption += (sSelectOption == "" ? "" : ",") + oDim.getTextProperty().name;
                if (oDimSelect.attributes) {
                    for ( var i = -1, sAttrName; sAttrName = oDimSelect.attributes[++i];) {
                        sSelectOption += (sSelectOption == "" ? "" : ",")
                                + oDim.findAttributeByName(sAttrName).getName();
                    }
                }
            }

            for ( var sMeasName in this._oMeasures) {
                var oMeas = this._oQueryResult.findMeasureByName(sMeasName);
                var oMeasSelect = this._oMeasures[sMeasName];
                if (oMeasSelect.value == true)
                    sSelectOption += (sSelectOption == "" ? "" : ",")
                            + oMeas.getRawValueProperty().name;
                if (oMeasSelect.text == true && oMeas.getFormattedValueProperty())
                    sSelectOption += (sSelectOption == "" ? "" : ",")
                            + oMeas.getFormattedValueProperty().name;
                if (oMeasSelect.unit == true && oMeas.getUnitProperty())
                    sSelectOption += (sSelectOption == "" ? "" : ",")
                            + oMeas.getUnitProperty().name;
            }

            if (this._bIncludeEntityKey) {
                var aKeyPropRef = this._oQueryResult.getEntityType().getTypeDescription().key.propertyRef;
                for ( var i = -1, oKeyProp; oKeyProp = aKeyPropRef[++i];) {
                    sSelectOption += (sSelectOption == "" ? "" : ",") + oKeyProp.name;
                }
            }
            sQueryOptionValue = (sSelectOption ? sSelectOption : null);
            break;
        }
        case "$filter": {
            var sFilterOption = null;
            if (this._oFilterExpression)
                sFilterOption = this._oFilterExpression.getURIFilterOptionValue();
            sQueryOptionValue = (sFilterOption ? sFilterOption : null);
            break;
        }
        case "$orderby": {
            var sSortOption = null;
            if (this._oSortExpression)
                sSortOption = this._oSortExpression.getURIOrderByOptionValue();
            sQueryOptionValue = (sSortOption ? sSortOption : null);
            break;
        }
        case "$top": {
            if (this._iTopRequestOption !== null) {
                sQueryOptionValue = this._iTopRequestOption;
            }
            break;
        }
        case "$skip": {
            sQueryOptionValue = this._iSkipRequestOption;
            break;
        }
        default:
            break;
        }
        return sQueryOptionValue;
    },

    /**
     * Get the unescaped URI to fetch the query result.
     * 
     * @param {String}
     *            sServiceRootURI (optional) Identifies the root of the OData
     *            service
     * 
     * @returns {String} The unescaped URI that contains the OData resource path
     *          and OData system query options to express the aggregation level,
     *          filter expression and further options.
     */
    getURIToQueryResultEntries : function(sServiceRootURI) {

        // construct resource path
        var sResourcePath = this.getURIToQueryResultEntitySet(sServiceRootURI);

        // construct $select
        var sSelectOption = this.getURIQueryOptionValue("$select");
        var sFilterOption = this.getURIQueryOptionValue("$filter");
        var sSortOption = this.getURIQueryOptionValue("$orderby");
        var sTopOption = this.getURIQueryOptionValue("$top");
        var sSkipOption = this.getURIQueryOptionValue("$skip");

        var sURI = sResourcePath;
        var bQuestionmark = false;

        if (sSelectOption) {
            sURI += "?$select=" + sSelectOption;
            bQuestionmark = true;
        }
        if (this._oFilterExpression && sFilterOption) {
            if (!bQuestionmark) {
                sURI += "?";
                bQuestionmark = true;
            } else {
                sURI += "&";
            }
            sURI += "$filter=" + sFilterOption;
        }
        if (this._oSortExpression && sSortOption) {
            if (!bQuestionmark) {
                sURI += "?";
                bQuestionmark = true;
            } else {
                sURI += "&";
            }
            sURI += "$orderby=" + sSortOption;
        }

        if (this._iTopRequestOption && sTopOption) {
            if (!bQuestionmark) {
                sURI += "?";
                bQuestionmark = true;
            } else {
                sURI += "&";
            }
            sURI += "$top=" + sTopOption;
        }
        if (this._iSkipRequestOption && sSkipOption) {
            if (!bQuestionmark) {
                sURI += "?";
                bQuestionmark = true;
            } else {
                sURI += "&";
            }
            sURI += "$skip=" + sSkipOption;
        }
        if (this._bIncludeCount) {
            if (!bQuestionmark) {
                sURI += "?";
                bQuestionmark = true;
            } else {
                sURI += "&";
            }
            sURI += "$inlinecount=allpages";
        }
        return sURI;
    },

    /**
     * Private member attributes
     */
    _oQueryResult : null,
    _oParameterizationRequest : null,
    _oAggregationLevel : null,
    _oMeasures : null,
    _bIncludeEntityKey : null,
    _bIncludeCount : null,
    _oFilterExpression : null,
    _oSortExpression : null,
    _iSkipRequestOption : 0,
    _iTopRequestOption : null
};

/** ******************************************************************** */

/**
 * Create a request object for interaction with a query parameter value help.
 * 
 * @param {sap.suite.smartbusiness.odata4analytics.Parameter}
 *            oParameter Description of a query parameter
 * 
 * @constructor
 * 
 * @class Creation of URIs for fetching a query parameter value set.
 */
sap.suite.smartbusiness.odata4analytics.ParameterValueSetRequest = function(oParameter) {
    this._init(oParameter);
};

sap.suite.smartbusiness.odata4analytics.ParameterValueSetRequest.prototype = {
    /**
     * @private
     */
    _init : function(oParameter) {
        this._oParameter = oParameter;
        this._oValueSetResult = new Object();
        this._oFilterExpression = null;
        this._oSortExpression = null;
    },

    /**
     * Specify which components of the parameter shall be included in the value
     * set.
     * 
     * @param bIncludeText
     *            Indicator whether or not to include the parameter text (if
     *            available) in the value set. Pass null to keep current
     *            setting.
     */
    includeParameterText : function(bIncludeText) {
        if (bIncludeText != null)
            this._oValueSetResult.text = bIncludeText;
    },

    /**
     * Get the filter expression for this request.
     * 
     * Expressions are represented by separate objects. If none exists so far, a
     * new expression object gets created.
     * 
     * @returns {sap.suite.smartbusiness.odata4analytics.FilterExpression} The filter object
     *          associated to this request.
     */
    getFilterExpression : function() {
        if (this._oFilterExpression == null) {
            var oEntityType = this._oParameter.getContainingParameterization().getEntityType();
            this._oFilterExpression = new sap.suite.smartbusiness.odata4analytics.FilterExpression(oEntityType
                    .getModel(), oEntityType.getSchema(), oEntityType);
        }
        return this._oFilterExpression;
    },

    /**
     * Set the filter expression for this request.
     * 
     * Expressions are represented by separate objects. Calling this method
     * replaces the filter object maintained by this request.
     * 
     * @param {sap.suite.smartbusiness.odata4analytics.FilterExpression}
     *            oFilter The filter object to be associated with this request.
     */
    setFilterExpression : function(oFilter) {
        this._oFilterExpression = oFilter;
    },

    /**
     * Get the sort expression for this request.
     * 
     * Expressions are represented by separate objects. If none exists so far, a
     * new expression object gets created.
     * 
     * @returns {sap.suite.smartbusiness.odata4analytics.SortExpression} The sort object
     *          associated to this request.
     */
    getSortExpression : function() {
        if (this._oSortExpression == null) {
            var oEntityType = this._oQueryResult.getEntityType();
            this._oSortExpression = new sap.suite.smartbusiness.odata4analytics.SortExpression(oEntityType
                    .getModel(), oEntityType.getSchema(), oEntityType);
        }
        return this._oSortExpression;
    },

    /**
     * Set the sort expression for this request.
     * 
     * Expressions are represented by separate objects. Calling this method
     * replaces the sort object maintained by this request.
     * 
     * @param {sap.suite.smartbusiness.odata4analytics.SortExpression}
     *            oSorter The sort object to be associated with this request.
     */
    setSortExpression : function(oSorter) {
        this._oSortExpression = oSorter;
    },

    /**
     * Get the value of an query option for the OData request URI corresponding
     * to this request.
     * 
     * @param {String}
     *            sQueryOptionName Identifies the query option: $select,
     *            $filter,... or any custom query option
     * 
     * @returns {String} The value of the requested query option or null, if
     *          this option is not used for the OData request.
     */
    getURIQueryOptionValue : function(sQueryOptionName) {
        var sQueryOptionValue = null;

        switch (sQueryOptionName) {
        case "$select": {
            var sSelectOption = "";
            sSelectOption += (sSelectOption == "" ? "" : ",") + this._oParameter.getProperty().name;
            if (this._oValueSetResult.text == true && this._oParameter.getTextProperty())
                sSelectOption += (sSelectOption == "" ? "" : ",")
                        + this._oParameter.getTextProperty().name;
            sQueryOptionValue = (sSelectOption ? sSelectOption : null);
            break;
        }
        case "$filter": {
            var sFilterOption = null;
            if (this._oFilterExpression)
                sFilterOption = this._oFilterExpression.getURIFilterOptionValue();
            sQueryOptionValue = (sFilterOption ? sFilterOption : null);
            break;
        }
        case "$orderby": {
            var sSortOption = null;
            if (this._oSortExpression)
                sSortOption = this._oSortExpression.getURIOrderByOptionValue();
            sQueryOptionValue = (sSortOption ? sSortOption : null);
            break;
        }
        default:
            break;
        }

        return sQueryOptionValue;
    },

    /**
     * Get the unescaped URI to fetch the parameter value set.
     * 
     * @param {String}
     *            sServiceRootURI (optional) Identifies the root of the OData
     *            service
     * @returns {String} The unescaped URI that contains the OData resource path
     *          and OData system query options to express the request for the
     *          parameter value set..
     */
    getURIToParameterValueSetEntries : function(sServiceRootURI) {

        // construct resource path
        var sResourcePath = null;

        sResourcePath = (sServiceRootURI ? sServiceRootURI : "") + "/"
                + this._oParameter.getContainingParameterization().getEntitySet().getQName();

        // construct query options
        var sSelectOption = this.getURIQueryOptionValue("$select");
        var sFilterOption = this.getURIQueryOptionValue("$filter");
        var sSortOption = this.getURIQueryOptionValue("$orderby");

        var sURI = sResourcePath;
        var bQuestionmark = false;

        if (sSelectOption) {
            sURI += "?$select=" + sSelectOption;
            bQuestionmark = true;
        }
        if (this._oFilterExpression && sFilterOption) {
            if (!bQuestionmark) {
                sURI += "?";
                bQuestionmark = true;
            } else
                sURI += "&";
            sURI += "$filter=" + sFilterOption;
        }
        if (this._oSortExpression && sSortOption) {
            if (!bQuestionmark) {
                sURI += "?";
                bQuestionmark = true;
            } else
                sURI += "&";
            sURI += "$orderby=" + sSortOption;
        }
        return sURI;
    },

    /**
     * Private member attributes
     */
    _oParameter : null,
    _oFilterExpression : null,
    _oSortExpression : null,
    _oValueSetResult : null
};

/** ******************************************************************** */

/**
 * Create a request object for interaction with a dimension value help.
 * 
 * @param {sap.suite.smartbusiness.odata4analytics.Dimension}
 *            oDimension Description of a dimension
 * @param {sap.suite.smartbusiness.odata4analytics.ParameterizationRequest}
 *            oParameterizationRequest (optional) Request object for
 *            interactions with the parameterization of this query. Only
 *            required if the query service includes parameters.
 * 
 * @constructor
 * 
 * @class Creation of URIs for fetching a query dimension value set.
 */
sap.suite.smartbusiness.odata4analytics.DimensionMemberSetRequest = function(oDimension, oParameterizationRequest) {
    this._init(oDimension, oParameterizationRequest);
};

sap.suite.smartbusiness.odata4analytics.DimensionMemberSetRequest.prototype = {
    /**
     * @private
     */
    _init : function(oDimension, oParameterizationRequest) {
        this._oDimension = oDimension;
        this._oParameterizationRequest = oParameterizationRequest;
        this._oValueSetResult = new Object();
        this._oFilterExpression = null;
        this._oSortExpression = null;
    },

    /**
     * Set the parameterization request required for retrieving dimension
     * members of a parameterized query
     * 
     * @param oParameterizationRequest
     *            Request object for interactions with the parameterization of
     *            this query
     */
    setParameterizationRequest : function(oParameterizationRequest) {
        this._oParameterizationRequest = oParameterizationRequest;
    },

    /**
     * Specify which components of the dimension shall be included in the value
     * set.
     * 
     * @param bIncludeText
     *            Indicator whether or not to include the parameter text (if
     *            available) in the value set. Pass null to keep current
     *            setting.
     * @param aAttributeName
     *            Array of dimension attribute names to be included in the
     *            result. Pass null to keep current setting.
     */
    includeDimensionTextAttributes : function(bIncludeText, aAttributeName) {
        if (bIncludeText != null)
            this._oValueSetResult.text = bIncludeText;
        if (aAttributeName != null)
            this._oValueSetResult.attributes = aAttributeName;
    },

    /**
     * Get the filter expression for this request.
     * 
     * Expressions are represented by separate objects. If none exists so far, a
     * new expression object gets created.
     * 
     * @returns {sap.suite.smartbusiness.odata4analytics.FilterExpression} The filter object
     *          associated to this request.
     */
    getFilterExpression : function() {
        if (this._oFilterExpression == null) {
            var oEntityType = this._oDimension.getContainingQueryResult().getEntityType();
            this._oFilterExpression = new sap.suite.smartbusiness.odata4analytics.FilterExpression(oEntityType
                    .getModel(), oEntityType.getSchema(), oEntityType);
        }
        return this._oFilterExpression;
    },

    /**
     * Set the filter expression for this request.
     * 
     * Expressions are represented by separate objects. Calling this method
     * replaces the filter object maintained by this request.
     * 
     * @param {sap.suite.smartbusiness.odata4analytics.FilterExpression}
     *            oFilter The filter object to be associated with this request.
     */
    setFilterExpression : function(oFilter) {
        this._oFilterExpression = oFilter;
    },

    /**
     * Get the sort expression for this request.
     * 
     * Expressions are represented by separate objects. If none exists so far, a
     * new expression object gets created.
     * 
     * @returns {sap.suite.smartbusiness.odata4analytics.SortExpression} The sort object
     *          associated to this request.
     */
    getSortExpression : function() {
        if (this._oSortExpression == null) {
            var oEntityType = this._oQueryResult.getEntityType();
            this._oSortExpression = new sap.suite.smartbusiness.odata4analytics.SortExpression(oEntityType
                    .getModel(), oEntityType.getSchema(), oEntityType);
        }
        return this._oSortExpression;
    },

    /**
     * Set the sort expression for this request.
     * 
     * Expressions are represented by separate objects. Calling this method
     * replaces the sort object maintained by this request.
     * 
     * @param {sap.suite.smartbusiness.odata4analytics.SortExpression}
     *            oSorter The sort object to be associated with this request.
     */
    setSortExpression : function(oSorter) {
        this._oSortExpression = oSorter;
    },

    /**
     * Get indicator whether or not master data are available for this dimension
     * 
     * @returns {boolean} True iff the master data are available
     */
    hasMasterDataAvailable : function() {
        return false; // TODO support to be added
    },

    /**
     * Get the value of an query option for the OData request URI corresponding
     * to this request.
     * 
     * @param {String}
     *            sQueryOptionName Identifies the query option: $select,
     *            $filter,... or any custom query option
     * 
     * @returns {String} The value of the requested query option or null, if
     *          this option is not used for the OData request.
     */
    getURIQueryOptionValue : function(sQueryOptionName) {
        var sQueryOptionValue = null;

        switch (sQueryOptionName) {
        case "$select": {
            var sSelectOption = "";
            sSelectOption += (sSelectOption == "" ? "" : ",")
                    + this._oDimension.getKeyProperty().name;
            if (this._oValueSetResult.text == true && this._oDimension.getTextProperty())
                sSelectOption += (sSelectOption == "" ? "" : ",")
                        + this._oDimension.getTextProperty().name;
            if (this._oValueSetResult.attributes) {
                for ( var i = -1, sAttrName; sAttrName = this._oValueSetResult.attributes[++i];) {
                    sSelectOption += (sSelectOption == "" ? "" : ",")
                            + this._oDimension.findAttributeByName(sAttrName).getName();
                }
            }
            sQueryOptionValue = (sSelectOption ? sSelectOption : null);
            break;
        }
        case "$filter": {
            var sFilterOption = null;
            if (this._oFilterExpression)
                sFilterOption = this._oFilterExpression.getURIFilterOptionValue();
            sQueryOptionValue = (sFilterOption ? sFilterOption : null);
            break;
        }
        case "$orderby": {
            var sSortOption = null;
            if (this._oSortExpression)
                sSortOption = this._oSortExpression.getURIOrderByOptionValue();
            sQueryOptionValue = (sSortOption ? sSortOption : null);
            break;
        }
        default:
            break;
        }

        return sQueryOptionValue;
    },

    /**
     * Get the unescaped URI to fetch the dimension members, optionally
     * augmented by text and attributes.
     * 
     * @param {String}
     *            sServiceRootURI (optional) Identifies the root of the OData
     *            service
     * @returns {String} The unescaped URI that contains the OData resource path
     *          and OData system query options to express the request for the
     *          parameter value set..
     */
    getURIToDimensionMemberEntries : function(sServiceRootURI) {

        // construct resource path
        var sResourcePath = null;
        if (this._oDimension.getContainingQueryResult().getParameterization()) {
            if (!this._oParameterizationRequest)
                throw "Missing parameterization request";
            else
                sResourcePath = this._oParameterizationRequest
                        .getURIToParameterizationEntry(sServiceRootURI)
                        + "/"
                        + this._oDimension.getContainingQueryResult().getParameterization()
                                .getNavigationPropertyToQueryResult();
        } else
            sResourcePath = (sServiceRootURI ? sServiceRootURI : "") + "/"
                    + this._oDimension.getContainingQueryResult().getEntitySet().getQName();

        // construct query options
        var sSelectOption = this.getURIQueryOptionValue("$select");
        var sFilterOption = this.getURIQueryOptionValue("$filter");
        var sSortOption = this.getURIQueryOptionValue("$orderby");

        var sURI = sResourcePath;
        var bQuestionmark = false;

        if (sSelectOption) {
            sURI += "?$select=" + sSelectOption;
            bQuestionmark = true;
        }
        if (this._oFilterExpression && sFilterOption) {
            if (!bQuestionmark) {
                sURI += "?";
                bQuestionmark = true;
            } else
                sURI += "&";
            sURI += "$filter=" + sFilterOption;
        }
        if (this._oSortExpression && sSortOption) {
            if (!bQuestionmark) {
                sURI += "?";
                bQuestionmark = true;
            } else
                sURI += "&";
            sURI += "$orderby=" + sSortOption;
        }
        return sURI;
    },

    /**
     * Private member attributes
     */
    _oDimension : null,
    _oParameterizationRequest : null,
    _oFilterExpression : null,
    _oSortExpression : null,
    _oValueSetResult : null
};

//
// Desirable extensions:
//
// - Another class for representing value help entities to
// specifiy text properties, attribute properties (with association to
// sap.suite.smartbusiness.odata4analytics.Parameter and sap.suite.smartbusiness.odata4analytics.Dimension)
// 
// - ParameterValueSetRequest: Add option to read values from separate entity
// set (sap.suite.smartbusiness.odata4analytics.ParameterValueSetRequest)
// 
// - DimensionMemberSetRequest: Add option to read values from separate master
// data entity
// set (sap.suite.smartbusiness.odata4analytics.DimensionMemberSetRequest)
//
// DONE - value rendering: Add support for types other than string
// (sap.suite.smartbusiness.odata4analytics.helper.renderPropertyKeyValue)
//
// - filter expressions are validated against filter restriction annotations
// (sap.suite.smartbusiness.odata4analytics.FilterExpression)
//
// - Implemenentation of filter expressions shall use SAPUI5 class
// sap.ui.model.Filter. Problem:
// This class does not provide accessor methods for object attributes.
// (sap.suite.smartbusiness.odata4analytics.FilterExpression)
//
// - Shield API implementation from direct access to object properties.
// Introduce closures for this purpose.
/*
 * Pattern: sap.suite.smartbusiness.odata4analytics.QueryResult = (function ($){ var _init =
 * func
 * 
 * var class = function(oEntityType, oEntitySet, oParameterization) {
 * _init(oEntityType, oEntitySet, oParameterization); }; }; return class;
 * })(jQuery);
 * 
 */
}; // end of sap/suite/ui/smartbusiness/lib/oData4Analytics.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.suite.ui.smartbusiness (1.24.3)
 */
jQuery.sap.declare("sap.suite.ui.smartbusiness.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAP UI library: sap.suite.ui.smartbusiness
 *
 * @namespace
 * @name sap.suite.ui.smartbusiness
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.m.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.suite.ui.smartbusiness",
  dependencies : ["sap.ui.core","sap.m"],
  types: [],
  interfaces: [],
  controls: [],
  elements: [],
  noLibraryCSS: true,
  version: "1.24.3"});


}; // end of sap/suite/ui/smartbusiness/library.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.association.Component') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
*/
//define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.association.Component");

jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained


sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.designtime.association.Component", {
	metadata : sap.ca.scfld.md.ComponentBase.createMetaData("MD", {
		"name" : "Master Detail Sample",
		"version" : "1.0.0-SNAPSHOT",
		"library" : "sap.suite.ui.smartbusiness.designtime.association",
		"includes" : ["../../lib/formatters.js","../../lib/Util.js"],
		"dependencies" : {
			"libs" : ["sap.m"],
			"components" : []
		},
		"config" : {
			"resourceBundle" : "i18n/i18n.properties",
			"titleResource" : "SHELL_TITLE",
			"icon" : "sap-icon://Fiori5/F0821",
			"favIcon" : "../../../../../../../resources/sap/ca/ui/themes/base/img/favicon/F0821_Edit_KPI_Relationships.ico",
			"homeScreenIconPhone" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0821_Edit_KPI_Relationships/57_iPhone_Desktop_Launch.png",
			"homeScreenIconPhone@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0821_Edit_KPI_Relationships/114_iPhone-Retina_Web_Clip.png",
			"homeScreenIconTablet" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0821_Edit_KPI_Relationships/72_iPad_Desktop_Launch.png",
			"homeScreenIconTablet@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0821_Edit_KPI_Relationships/144_iPad_Retina_Web_Clip.png",
			"startupImage320x460" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/320_x_460.png",
			"startupImage640x920" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_920.png",
			"startupImage640x1096" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_1096.png",
			"startupImage768x1004" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/768_x_1004.png",
			"startupImage748x1024" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/748_x_1024.png",
			"startupImage1536x2008" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1536_x_2008.png",
			"startupImage1496x2048" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1496_x_2048.png"
	},
	viewPath : "sap.suite.ui.smartbusiness.designtime.association.view",
	
	// masterPageRoutes : {
	// // fill the routes to your master pages in here. The application will start with a navigation to route "master"
	// leading to master screen S2.
	// // If this is not desired please define your own route "master"
	// },
	 detailPageRoutes : {
	 //fill the routes to your detail pages in here. The application will navigate from the master page to route
	 //"detail" leading to detail screen S3.
		//If this is not desired please define your own route "detail"
			"associationCreate" : {
				"pattern" : "associationCreate/{contextPath}", 
				"view" : "S4"
			},
			"associationEdit" : {
				"pattern" : "associationEdit/{contextPath}/{associationPath}", 
				"view" : "S4"
			}
	}
	//fullScreenPageRoutes : {
	//	// fill the routes to your full screen pages in here.
	//	"subDetail" : {
	//		"pattern" : "subDetail/{contextPath}",
	//		"view" : "S4",
	//	}
	//}
}),

/**
 * Initialize the application
 *
 * @returns {sap.ui.core.Control} the content
 */
createContent : function() {

	var oViewData = {
		component : this
	};
	return sap.ui.view({
		viewName : "sap.suite.ui.smartbusiness.designtime.association.Main",
		type : sap.ui.core.mvc.ViewType.XML,
		viewData : oViewData
	});
}
});
}; // end of sap/suite/ui/smartbusiness/designtime/association/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.authorization.Component') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
*/
// define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.authorization.Component");

jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained


sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.designtime.authorization.Component", {
	metadata : sap.ca.scfld.md.ComponentBase.createMetaData("MD", {
		"name" : "Master Detail Sample",
		"version" : "1.0.0-SNAPSHOT",
		"library" : "sap.suite.ui.smartbusiness.designtime.authorization",
		"includes" : ["../../lib/formatters.js","../../lib/Util.js"],
			"dependencies" : {
			"libs" : ["sap.m"],
		"components" : []
		},
		"config" : {
			"resourceBundle" : "i18n/i18n.properties",
			"titleResource" : "SHELL_TITLE",
			"icon" : "sap-icon://Fiori5/F0816",
			"favIcon" : "../../../../../../../resources/sap/ca/ui/themes/base/img/favicon/F0816_Manage_Authorizations.ico",
			"homeScreenIconPhone" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0816_Manage_Authorizations/57_iPhone_Desktop_Launch.png",
			"homeScreenIconPhone@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0816_Manage_Authorizations/114_iPhone-Retina_Web_Clip.png",
			"homeScreenIconTablet" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0816_Manage_Authorizations/72_iPad_Desktop_Launch.png",
			"homeScreenIconTablet@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0816_Manage_Authorizations/144_iPad_Retina_Web_Clip.png",
			"startupImage320x460" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/320_x_460.png",
			"startupImage640x920" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_920.png",
			"startupImage640x1096" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_1096.png",
			"startupImage768x1004" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/768_x_1004.png",
			"startupImage748x1024" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/748_x_1024.png",
			"startupImage1536x2008" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1536_x_2008.png",
			"startupImage1496x2048" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1496_x_2048.png"
	},
	viewPath : "sap.suite.ui.smartbusiness.designtime.authorization.view",
	
	// masterPageRoutes : {
	// // fill the routes to your master pages in here. The application will start with a navigation to route "master"
	// leading to master screen S2.
	// // If this is not desired please define your own route "master"
	// },
	// detailPageRoutes : {
	// //fill the routes to your detail pages in here. The application will navigate from the master page to route
	// //"detail" leading to detail screen S3.
	// If this is not desired please define your own route "detail"
	//		"toS5" : {
	//			"pattern" : "toS5",
	//			"view" : "S5",
	//		}
	//},
	fullScreenPageRoutes : {
		// fill the routes to your full screen pages in here.
		"subDetail" : {
			"pattern" : "subDetail/{contextPath}",
			"view" : "S4",
		}
	}
}),

/**
 * Initialize the application
 *
 * @returns {sap.ui.core.Control} the content
 */
createContent : function() {

	var oViewData = {
		component : this
	};
	return sap.ui.view({
		viewName : "sap.suite.ui.smartbusiness.designtime.authorization.Main",
		type : sap.ui.core.mvc.ViewType.XML,
		viewData : oViewData
	});
}
});
}; // end of sap/suite/ui/smartbusiness/designtime/authorization/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.drilldown.Component') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.drilldown.Component");

jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained


sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.designtime.drilldown.Component", {
		metadata : sap.ca.scfld.md.ComponentBase.createMetaData("MD", {
			"name" : "Master Detail Sample",
			"version" : "1.1.0-SNAPSHOT",
			"library" : "sap.suite.ui.smartbusiness.designtime.drilldown",
			"includes" : ["css/style.css","../../lib/Util.js","../../lib/DrilldownModel.js","../../lib/DrilldownWriteService.js","../../lib/ListPersona.js",
			              "../../lib/DrilldownSaveService.js"],
				"dependencies" : {
				"libs" : ["sap.m"],
			"components" : []
			},
			"config" : {
				"resourceBundle" : "i18n/i18n.properties",
				"titleResource" : "SHELL_TITLE",
				"icon" : "sap-icon://Fiori5/F0819",
				"favIcon" : "../../../../../../../resources/sap/ca/ui/themes/base/img/favicon/F0819_Edit_Drill_Down_Confs.ico",
				"homeScreenIconPhone" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0819_Edit_DrillDown_Configs/57_iPhone_Desktop_Launch.png",
				"homeScreenIconPhone@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0819_Edit_DrillDown_Configs/114_iPhone-Retina_Web_Clip.png",
				"homeScreenIconTablet" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0819_Edit_DrillDown_Configs/72_iPad_Desktop_Launch.png",
				"homeScreenIconTablet@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0819_Edit_DrillDown_Configs/144_iPad_Retina_Web_Clip.png",
				"startupImage320x460" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/320_x_460.png",
				"startupImage640x920" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_920.png",
				"startupImage640x1096" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_1096.png",
				"startupImage768x1004" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/768_x_1004.png",
				"startupImage748x1024" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/748_x_1024.png",
				"startupImage1536x2008" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1536_x_2008.png",
				"startupImage1496x2048" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1496_x_2048.png"
		},
		viewPath : "sap.suite.ui.smartbusiness.designtime.drilldown.view",
		
		// masterPageRoutes : {
		// // fill the routes to your master pages in here. The application will start with a navigation to route "master"
		// leading to master screen S2.
		// // If this is not desired please define your own route "master"
		// },
		// detailPageRoutes : {
		//		"S3" : {
		//			"pattern" : "toS5",
		//			"view" : "S5",
		//		}
		// },
		fullScreenPageRoutes : [
			//fill the routes to your full screen pages in here.
			{
				"pattern" : "configureChart/{evaluationId}/{viewId}",
				"view" : "configureNewView",
				"name": "configureChart"
			},
			{
				"pattern" : "configurator/{evaluationId}/{viewId}",
				"view" : "configurator",
				"name": "configurator"
			}
		]
	}),
	
	/**
	 * Initialize the application
	 *
	 * @returns {sap.ui.core.Control} the content
	 */
	createContent : function() {

		var oViewData = {
			component : this
		};
		if(jQuery.browser.msie) {
			if(jQuery.browser.fVersion == "9") {

				jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath("sap.suite.ui.smartbusiness.designtime.drilldown/css")+"/ie9.css");
			}
		}
		return sap.ui.view({
			viewName : "sap.suite.ui.smartbusiness.designtime.drilldown.Main",
			type : sap.ui.core.mvc.ViewType.XML,
			viewData : oViewData
		});
	}
});


}; // end of sap/suite/ui/smartbusiness/designtime/drilldown/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.visualization.Component') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
*/
// define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.visualization.Component");

jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained

//jQuery.sap.require("sap.ushell.Container");

sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.designtime.visualization.Component", {
	metadata : sap.ca.scfld.md.ComponentBase.createMetaData("MD", {
		"name" : "Master Detail Sample",
		"version" : "1.0.0-SNAPSHOT",
		"library" : "sap.suite.ui.smartbusiness.designtime.visualization",
		"includes" : ["../../lib/Util.js", "themes/visualization.css"],
			"dependencies" : {
			"libs" : ["sap.m","sap.suite.ui.commons"],
		"components" : []
		},
		"config" : {
			"resourceBundle" : "i18n/i18n.properties",
			"titleResource" : "SHELL_TITLE",
			"icon" : "sap-icon://Fiori5/F0820",
			"favIcon" : "../../../../../../../resources/sap/ca/ui/themes/base/img/favicon/F0820_Edit_Tiles.ico",
			"homeScreenIconPhone" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0820_Edit_Tiles/57_iPhone_Desktop_Launch.png",
			"homeScreenIconPhone@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0820_Edit_Tiles/114_iPhone-Retina_Web_Clip.png",
			"homeScreenIconTablet" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0820_Edit_Tiles/72_iPad_Desktop_Launch.png",
			"homeScreenIconTablet@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0820_Edit_Tiles/144_iPad_Retina_Web_Clip.png",
			"startupImage320x460" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/320_x_460.png",
			"startupImage640x920" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_920.png",
			"startupImage640x1096" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_1096.png",
			"startupImage768x1004" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/768_x_1004.png",
			"startupImage748x1024" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/748_x_1024.png",
			"startupImage1536x2008" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1536_x_2008.png",
			"startupImage1496x2048" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1496_x_2048.png"
	},
	viewPath : "sap.suite.ui.smartbusiness.designtime.visualization.view",
	
	// masterPageRoutes : {
	// // fill the routes to your master pages in here. The application will start with a navigation to route "master"
	// leading to master screen S2.
	// // If this is not desired please define your own route "master"
	// },
	// detailPageRoutes : {
	// //fill the routes to your detail pages in here. The application will navigate from the master page to route
	// //"detail" leading to detail screen S3.
	// If this is not desired please define your own route "detail"
	//		"toS5" : {
	//			"pattern" : "toS5",
	//			"view" : "S5",
	//		}
	//},
	fullScreenPageRoutes : {
		// fill the routes to your full screen pages in here.
		"addTile" : {
			"pattern" : "addTile/{contextPath}",
			"view" : "S4",
		},
		"editTile" : {
			"pattern" : "editTile/{contextPath}/{chipContextPath}",
			"view" : "S4",
		},
	}
}),

/**
 * Initialize the application
 *
 * @returns {sap.ui.core.Control} the content
 */
createContent : function() {

	var oViewData = {
		component : this
	};
	return sap.ui.view({
		viewName : "sap.suite.ui.smartbusiness.designtime.visualization.Main",
		type : sap.ui.core.mvc.ViewType.XML,
		viewData : oViewData
	});
}
});
}; // end of sap/suite/ui/smartbusiness/designtime/visualization/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.workspace.Component') ) {
// define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.workspace.Component");

jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained


sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.designtime.workspace.Component", {
	metadata : sap.ca.scfld.md.ComponentBase.createMetaData("MD", {
		"name" : "Master Detail Sample",
		"version" : "1.0.0-SNAPSHOT",
		"library" : "sap.suite.ui.smartbusiness.designtime.workspace",
		"includes" : ["../../lib/formatters.js","../../lib/Util.js"],
			"dependencies" : {
			"libs" : ["sap.m"],
		"components" : []
		},
		"config" : {
			"resourceBundle" : "i18n/i18n.properties",
			"titleResource" : "SHELL_TITLE",
			"icon" : "sap-icon://Fiori5/F0818",
			"favIcon" : "../../../../../../../resources/sap/ca/ui/themes/base/img/favicon/F0818_KPI_Workspace.ico",
			"homeScreenIconPhone" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0818_KPI_Workspace/57_iPhone_Desktop_Launch.png",
			"homeScreenIconPhone@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0818_KPI_Workspace/114_iPhone-Retina_Web_Clip.png",
			"homeScreenIconTablet" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0818_KPI_Workspace/72_iPad_Desktop_Launch.png",
			"homeScreenIconTablet@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0818_KPI_Workspace/144_iPad_Retina_Web_Clip.png",
			"startupImage320x460" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/320_x_460.png",
			"startupImage640x920" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_920.png",
			"startupImage640x1096" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_1096.png",
			"startupImage768x1004" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/768_x_1004.png",
			"startupImage748x1024" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/748_x_1024.png",
			"startupImage1536x2008" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1536_x_2008.png",
			"startupImage1496x2048" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1496_x_2048.png"
	},
	viewPath : "sap.suite.ui.smartbusiness.designtime.workspace.view",
	
	// masterPageRoutes : {
	// // fill the routes to your master pages in here. The application will start with a navigation to route "master"
	// leading to master screen S2.
	// // If this is not desired please define your own route "master"
	// },
	 detailPageRoutes : {
	 //fill the routes to your detail pages in here. The application will navigate from the master page to route
	 //"detail" leading to detail screen S3.
	 //If this is not desired please define your own route "detail"
			"evalDetail" : {
				"pattern" : "evalDetail/{contextPath}/{evalPath}",
				"view" : "S4"
			},
			"multiSelect" : {
				"pattern" : "multiSelect",
				"view" : "S3"
			},
			"detail" : {
				"pattern" : "detail/{contextPath}",
				"view" : "S3"
			}
	},
	//fullScreenPageRoutes : {
	//	// fill the routes to your full screen pages in here.
	//	"subDetail" : {
	//		"pattern" : "subDetail/{contextPath}",
	//		"view" : "S4",
	//	}
	//}
}),

/**
 * Initialize the application
 *
 * @returns {sap.ui.core.Control} the content
 */
createContent : function() {

	var oViewData = {
		component : this
	};
	return sap.ui.view({
		viewName : "sap.suite.ui.smartbusiness.designtime.workspace.Main",
		type : sap.ui.core.mvc.ViewType.XML,
		viewData : oViewData
	});
}
});
}; // end of sap/suite/ui/smartbusiness/designtime/workspace/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.Util') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.Util");

sap.suite = sap.suite || {};
sap.suite.smartbusiness = sap.suite.smartbusiness || {};
sap.suite.smartbusiness.odata = (function() {
    var modelCache  = {};
    function getOD4AObject(oModel) {
        var O4A = new sap.suite.smartbusiness.odata4analytics.Model(sap.suite.smartbusiness.odata4analytics.Model.ReferenceByModel(oModel));
        return O4A;
    };
    return {
        getModelByServiceUri : function(sServiceUri,useCache) {
            if(typeof sServiceUri == 'string') {
                if(!modelCache[sServiceUri]) {
                    var oModel = new sap.ui.model.odata.ODataModel(sServiceUri,true);
                    modelCache[sServiceUri] = oModel;
                }
                return modelCache[sServiceUri];
            }
            return sServiceUri;
        },
        getUri : function(params) {
            /*
             * params will be an object
             * { 
             *    oDataModel : "String Relative Uri" OR sap.ui.model.odata.ODataModel Object,
             *    serviceUri : "string"
             *    entitySet : "string",
             *    filter : [] //array of {NAME : 'x', VALUE_1 : 'val', VALUE_2 : 'val2', OPERATOR : 'BT/EQ', TYPE:'FI/PA'}
             *    dimension : ["A","B"] OR "A" OR "A,B"
             *    measure :   array of String OR one String OR comma separated String
             *    dataLimit : intervalue value to limit number of records;
             *    includeDimensionKeyTextAttribute : true/false, default true
             *    includeMeasureRawFormattedValueUnit : true/false, default True,
             *    sort : [{name:'DIm1',order:'asc'},{name:'Msr2',order:desc}]
             * } 
             */
            function _replaceSingleQuoteWithDoubleSingleQuote(str) {
                return str.replace(/'/g,"''");
            }
            try {
                var O4A = getOD4AObject(this.getModelByServiceUri(params.oDataModel || params.serviceUri));
                var oQueryResult = O4A.findQueryResultByName(params.entitySet);
                var oQueryResultRequest = new sap.suite.smartbusiness.odata4analytics.QueryResultRequest(oQueryResult);
                
                /* Adding Measures */
                var measures = params.measure;
                if(measures) {
                    if(typeof measures == 'string') {
                        measures = measures.split(",");
                    }
                    oQueryResultRequest.setMeasures(measures);
                    if(typeof params.includeMeasureRawFormattedValueUnit == 'undefined') {
                        params.includeMeasureRawFormattedValueUnit = true;
                    }
                    if(params.includeMeasureRawFormattedValueUnit) {
                        oQueryResultRequest.includeMeasureRawFormattedValueUnit(null, true, true, true);
                    }
                }
                
                /* Adding Dimensions*/
                var dimensions = params.dimension;
                if(dimensions) {
                    if(typeof dimensions == 'string') {
                        dimensions = dimensions.split(",");
                    }
                    oQueryResultRequest.addToAggregationLevel(dimensions);
                    if(typeof params.includeDimensionKeyTextAttribute == 'undefined') {
                        params.includeDimensionKeyTextAttribute = true;
                    }
                    if(params.includeDimensionKeyTextAttribute) {
                        oQueryResultRequest.includeDimensionKeyTextAttributes(null, true, true, null);
                    }
                }
                /*Adding Input Params And Filters*/
                if(params.filter && params.filter.length) {
                    var variants = params.filter;
                    var filterVariants = new Array();
                    var inputParamsVariants = new Array();
                    for(var i=0, l = variants.length; i<l; i++) {
                        var each = variants[i];
                        if(each.TYPE === "PA") {
                            inputParamsVariants.push(each);
                        } else if(each.TYPE === "FI") {
                            filterVariants.push(each);
                        }
                    }
                    function changeToYYYYMMDDHHMMSS(odate){ 
                        var dateStr = odate.toJSON();
                        var lastChar = dateStr.charAt(dateStr.length-1).toUpperCase();
                        if(lastChar.charCodeAt(0) >= 65 && lastChar.charCodeAt(0) <= 90) {
                            dateStr = dateStr.slice(0,-1);
                        }
                        return dateStr;
                    }
                    function _processODataDateTime(junkValue) {
                        if(junkValue) {
                            try {
                                if(junkValue == +junkValue) {
                                    junkValue = window.parseInt(junkValue);
                                }
                                var date = new Date(junkValue);
                                var time = date.getTime();
                                if(isNaN(time)) {
                                    return junkValue;
                                } else {
                                    return changeToYYYYMMDDHHMMSS(date);
                                }
                            }catch(e) {

                            }
                        }
                        return junkValue;
                    }
                    if(filterVariants.length) {
                        var oFilterExpression = oQueryResultRequest.getFilterExpression();
                        for(var i=0, l=filterVariants.length; i<l; i++) {
                            var each = filterVariants[i];
                            if(this.getEdmType(params.serviceUri, each.NAME) == "Edm.DateTime") {
                                each.VALUE_1 = _processODataDateTime(each.VALUE_1);
                                each.VALUE_2 = _processODataDateTime(each.VALUE_2);
                            }
                            if(each.OPERATOR == sap.ui.model.FilterOperator.BT) {
                                oFilterExpression.addCondition(each.NAME,each.OPERATOR,window.encodeURIComponent(_replaceSingleQuoteWithDoubleSingleQuote(each.VALUE_1)),window.encodeURIComponent(each.VALUE_2));
                            } else {
                                oFilterExpression.addCondition(each.NAME, each.OPERATOR, window.encodeURIComponent(_replaceSingleQuoteWithDoubleSingleQuote(each.VALUE_1.replace(/\|\^/g,","))), null);
                            }

                        }
                    }
                    if(inputParamsVariants.length) {
                        if(oQueryResult.getParameterization()) {
                            var oParamRequest = new sap.suite.smartbusiness.odata4analytics.ParameterizationRequest(oQueryResult.getParameterization());
                            for(var y=0, z = inputParamsVariants.length; y<z ; y++) {
                                var eachInputParam = inputParamsVariants[y];
                                oParamRequest.setParameterValue(eachInputParam.NAME,window.encodeURIComponent(_replaceSingleQuoteWithDoubleSingleQuote(eachInputParam.VALUE_1)));
                            }
                            oQueryResultRequest.setParameterizationRequest(oParamRequest);
                        }
                    }
                }
                var finalUri = oQueryResultRequest.getURIToQueryResultEntries();
                if(params.sort && params.sort.length) {
                    var _sortClause = "&$orderby=";
                    params.sort.forEach(function(oSort){
                        _sortClause += oSort.name+" "+oSort.order+","
                    });
                    _sortClause = _sortClause.substring(0, _sortClause.length-1);
                    finalUri = finalUri + _sortClause;
                }
                
                if(params.dataLimit) {
                    finalUri = finalUri + "&$top="+params.dataLimit;
                }
                return {uri : finalUri, model: O4A.getODataModel()};
            } catch(e) {
                jQuery.sap.log.error("Error Preparing Query Service Uri using OData4Analytics Library : "+e.toString());
                return null;
            }
        },
        getEdmType : function(sUri, propertyName,displayFormatRequired) {
        	function _getDisplayFormat(prop){
        		var format="None";
        		var extensions=prop.extensions||[];
        		for(var i=0;i<extensions.length;i++){
        			if(extensions[i].name=="display-format"){
        				format=extensions[i].value.toUpperCase();
        				break;
        			}
        		}
        		return format;
        	}
            var oDataModel = null;
            var returnValue=null;
            if(sUri instanceof sap.ui.model.odata.ODataModel) {
                oDataModel = sUri;
            } else  {
                oDataModel = this.getModelByServiceUri(sUri);
            }
            if(oDataModel && oDataModel.getServiceMetadata()) {
                var serviceMetaData = oDataModel.getServiceMetadata();
                var entitySets = serviceMetaData.dataServices.schema[0].entityType;
                if(entitySets) {
                    for(var i = 0; i<entitySets.length;i++) {
                        var entity = entitySets[i];
                        var properties = entity.property;
                        for(var j=0;j<properties.length;j++) {
                            var property=  properties[j];
                            if(property.name == propertyName) {
                            	if(displayFormatRequired){
                            		returnValue={type:property.type,format:_getDisplayFormat(property)};
                            	}else{
                            		returnValue=property.type;
                            	}
                            }
                        }
                    }
                }
            }
            return returnValue;
        },
        getAllEntitySet : function(sUri) {
            var entitySets = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                entitySets = o4a.getAllQueryResultNames();
            } catch(e) {
                jQuery.sap.log.error("Error fetching Enity Set : "+e.toString());
            }
            return entitySets;

        },
        measures : function(sUri, entitySet) {
            var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
            var queryResult = o4a.findQueryResultByName(entitySet);
            var measureNames = queryResult.getAllMeasureNames();
            return  {
              getAsStringArray : function() {
                  return measureNames;
              },
              getAsObjectArray : function(sKey) {
                  sKey = sKey || "name";
                  var measures = [];
                  measureNames.forEach(function(sMeasure){
                      var obj = {};
                      obj[sKey] = sMeasure;
                      measures.push(obj);
                  });
                  return measures;
              },
              getAsObjectArrayWithLabel : function(sOriginalKey, sLabelKey) {
                  sOriginalKey = sOriginalKey || "name";
                  sLabelKey = sLabelKey || "label";
                  var measures = [];
                  measureNames.forEach(function(sMeasure){
                      var oMeasure = queryResult.findMeasureByName(sMeasure);
                      var obj = {};
                      obj[sOriginalKey] = sMeasure;
                      obj[sLabelKey] = oMeasure.getLabelText() || sMeasure;
                      measures.push(obj);
                  });
                  return measures;
              },
              getUnitProperty : function(measureName) {
                  var oMeasure = queryResult.findMeasureByName(measureName);
                  if(oMeasure.getUnitProperty()) {
                      return oMeasure.getUnitProperty().name;
                  }
                  return null;
              }
            };
        },
        properties : function(sUri, entitySet) {
            var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
            var queryResult = o4a.findQueryResultByName(entitySet);
            var dimensionNames = queryResult.getAllDimensionNames();
            var measureNames = queryResult.getAllMeasureNames();
            return {
                getLabelMappingObject : function(aProperties) {
                    var mapping = {};
                    if(aProperties && aProperties.length) {
                        aProperties.forEach(function(property, index, array){
                            try {
                                var oDimension = queryResult.findDimensionByName(property);
                                mapping[property] = oDimension.getLabelText() || property;
                            } catch(e) {
                                var oMeasure = queryResult.findMeasureByName(property);
                                mapping[property] = oMeasure.getLabelText() || property;
                            }
                        });
                        return mapping;
                    } else {
                        dimensionNames.forEach(function(sDimension){
                            var oDimension = queryResult.findDimensionByName(sDimension);
                            mapping[sDimension] = oDimension.getLabelText() || sDimension;
                        });
                        measureNames.forEach(function(sMeasure){
                            var oMeasure = queryResult.findMeasureByName(sMeasure);
                            mapping[sMeasure] = oMeasure.getLabelText() || sMeasure;
                        });
                        return mapping;
                    }
                },
                getTextPropertyMappingObject : function(aProperties) {
                    var mapping = {};
                    if(aProperties && aProperties.length) {
                        aProperties.forEach(function(property, index, array){
                            try {
                                var oDimension = queryResult.findDimensionByName(property);
                                if(oDimension.getTextProperty()) {
                                    mapping[property] = oDimension.getTextProperty().name || property;
                                } else {
                                    mapping[property] = property;
                                }
                            } catch(e) {
                                jQuery.sap.log.error("Invalid Dimension Name : "+property);
                            }
                        });
                    } else {
                        dimensionNames.forEach(function(sDimension){
                            var oDimension = queryResult.findDimensionByName(sDimension);
                            if(oDimension.getTextProperty()) {
                                mapping[sDimension] = oDimension.getTextProperty().name || sDimension;
                            } else {
                                mapping[sDimension] = sDimension;
                            }
                        });
                        measureNames.forEach(function(sMeasure) {
                            var oMeasure = queryResult.findMeasureByName(sMeasure);
                            if(oMeasure.getFormattedValueProperty && oMeasure.getFormattedValueProperty()) {
                                mapping[sMeasure] = oMeasure.getFormattedValueProperty().name;
                            } else {
                                mapping[sMeasure] = null;
                            }
                        });
                    }
                    return mapping;
                },
                getUnitPropertyMappingObject : function() {
                    var mapping = {};
                    measureNames.forEach(function(sMeasure) {
                       var oMeasure = queryResult.findMeasureByName(sMeasure);
                       if(oMeasure.getUnitProperty()) {
                           mapping[sMeasure] = oMeasure.getUnitProperty().name;
                       } else {
                           mapping[sMeasure] = null;
                       }
                    });
                    return mapping;
                }                
            };
        },
        dimensions : function(sUri, entitySet) {
            var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
            var queryResult = o4a.findQueryResultByName(entitySet);
            var dimensionNames = queryResult.getAllDimensionNames();
            return {
                getAsStringArray : function() {
                    var entityType= queryResult.getEntityType();
                    return dimensionNames;
                },
                getAsObjectArray : function(sKey) {
                    sKey = sKey || "name";
                    var dimensions = [];
                    dimensionNames.forEach(function(sDimension){
                        var obj = {};
                        obj[sKey] = sDimension;
                        dimensions.push(obj);
                    });
                    return dimensions;
                },
                getAsObjectArrayWithLabel : function(sOriginalKey, sLabelKey) {
                    sOriginalKey = sOriginalKey || "name";
                    sLabelKey = sLabelKey || "label";
                    var dimensions = [];
                    dimensionNames.forEach(function(sDimension){
                        var oDimension = queryResult.findDimensionByName(sDimension);
                        var obj = {};
                        obj[sOriginalKey] = sDimension;
                        obj[sLabelKey] = oDimension.getLabelText() || sDimension;
                        dimensions.push(obj);
                    });
                    return dimensions;
                },
                getTextProperty : function(dimensionName) {
                    var oDimension = queryResult.findDimensionByName(dimensionName);
                    if(oDimension.getTextProperty()) {
                        return oDimension.getTextProperty().name;
                    }
                    return null;
                }
            }
        },
        getAllMeasures : function(sUri, entitySet) {
            var measures = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                measures = queryResult.getAllMeasureNames();
            } catch(e) {
                jQuery.sap.log.error("Error Fetching All Measures : "+e.toString());
            }
            return measures;
        },
        getAllMeasuresWithLabelText : function(sUri, entitySet) {
            var measures = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                var measureNames = queryResult.getAllMeasureNames();
                for(var i=0; i<measureNames.length; i++) {
                    var each = measureNames[i];
                    var oMeasure = queryResult.findMeasureByName(each);
                    measures.push({
                        key : each,
                        value : oMeasure.getLabelText()
                    });
                }
            } catch(e) {
                jQuery.sap.log.error("Error Fetching All Measures : "+e.toString());
            }
            return measures;
        },
        isTimeZoneIndependent:function(sUri,entitySet){
        	var isTimeZoneInDependent=false;
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                var entityType= queryResult.getEntityType();
                var allProperties=entityType._oPropertySet;
                for(var each in allProperties){
                	if(each.match(/TimeZone$/gi)){
                		isTimeZoneInDependent=true;
                		//break;
                	}
                }
            } catch(e) {
                jQuery.sap.log.error("TimeZone dependency check failed : "+e.toString());
            }
            return isTimeZoneInDependent;
        },
        getAllDimensions : function(sUri, entitySet) {
            function intersectionOfArray(array1, array2) {
                var ai=0, bi=0;
                var result = new Array();
                while( ai < array1.length && bi < array2.length )
                {
                    if      (array1[ai] < array2[bi] ){ ai++; }
                    else if (array1[ai] > array2[bi] ){ bi++; }
                    else /* they're equal */
                    {
                        result.push(array1[ai]);
                        ai++;
                        bi++;
                    }
                }
                return result;
            }
            var dimensions = new Array();
            var aFilterablePropertyNames = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                var entityType= queryResult.getEntityType();
                aFilterablePropertyNames = entityType.getFilterablePropertyNames();
                dimensions = queryResult.getAllDimensionNames();
                if(aFilterablePropertyNames && aFilterablePropertyNames.length) {
                    dimensions = intersectionOfArray(aFilterablePropertyNames.sort(),dimensions.sort());
                }
            } catch(e) {
                jQuery.sap.log.error("Error Fetching All Dimesions : "+e.toString());
            }
            return dimensions;
        },
        getAllDimensionsWithLabelText : function(sUri, entitySet) {
            var dimensions = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                var dimensionNames = queryResult.getAllDimensionNames();
                for(var i=0; i<dimensionNames.length ;i++) {
                    var each = dimensionNames[i];
                    var oDimension = queryResult.findDimensionByName(each);
                    var textProperty = null;
                    if(oDimension.getTextProperty() != null)textProperty = oDimension.getTextProperty().name;
                    dimensions.push({
                        key : each,
                        value : oDimension.getLabelText(),
                        textProperty: textProperty
                    });
                }
            } catch(e) {
                jQuery.sap.log.error("Error Fetching All Dimesions : "+e.toString());
            }
            return dimensions;
        },
        getAllInputParams : function(sUri, entitySet) {
            var inputParams = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                if(queryResult.getParameterization()) {
                    var oParams = queryResult.getParameterization();
                    inputParams = oParams.getAllParameterNames();
                }
            } catch(e) {
                jQuery.sap.log.error("Error Fetching Input Params : "+e.toString());
           }
            return inputParams;
        },
        getAllInputParamsWithFlag : function(sUri, entitySet) {
            var inputParams = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                if(queryResult.getParameterization()) {
                    var oParams = queryResult.getParameterization();
                    var inputParamsArray = oParams.getAllParameterNames();
                    for(var i=0; i<inputParamsArray.length; i++) {
                        var each = inputParamsArray[i];
                        var paramObject  = oParams.findParameterByName(each);
                        inputParams.push({
                            name : each,
                            optional : paramObject.isOptional()
                        });
                    }
                }
            } catch(e) {
                jQuery.sap.log.error("Error Fetching Input Params : "+e.toString());
            }
            return inputParams;
        },
        formatOdataEdmTimeToString : function (value){
            if(value && value.constructor.name == "Object"){
                if(value.__edmType=="Edm.Time"){
                    var milliseconds = value.ms;
                    var seconds = Math.floor((milliseconds / 1000) % 60 );
                    var minutes = Math.floor((milliseconds / 60000) % 60);
                    var hours   = Math.floor((milliseconds / 3600000) % 24);
                    return hours+"H"+minutes+"M"+seconds+"S";
                }
            }
            return value;
        },
        formatValue : function (val,scaleFactor,precision,MAX_LEN) {            
            MAX_LEN= MAX_LEN || 4;
            var unit={3:"K",6:"M",9:"B",12:"T",0:""};
            var temp,pre,suff;
            temp=Number(val).toPrecision(MAX_LEN);
            pre=Number(temp.split("e")[0]);
            suff=Number(temp.split("e")[1])||0;
            if(!val && val!=0)
                return {value:"",unitPrefix:""};

                if(suff%3!=0){
                    if(suff%3==2){
                        if(suff+1==scaleFactor){
                            suff=suff+1;
                            pre=pre/10;
                        }
                        else{
                            suff=suff-2;
                            pre=pre*100;
                        }
                    }
                    else{
                        if(suff+2==scaleFactor){
                            suff=suff+2;
                            pre=pre/100;

                        }
                        else{
                            suff--;
                            pre=pre*10;
                        }
                    }
                }

                else if(suff==15){
                    pre=pre*1000;
                    suff=12;
                }
                pre+="";

                if((pre).indexOf(".")<MAX_LEN){
                    pre=Number(pre).toPrecision(MAX_LEN);
                    var currPrec=pre.split(".")[1]?pre.split(".")[1].length:0;
                    if((precision || precision==0)&& precision<currPrec){
                        pre=Number(pre).toFixed(precision);
                    }


                }
                else
                    pre=Number(pre).toPrecision(MAX_LEN);
                return {value:Number(pre),unitPrefix:unit[suff]};
                }

    };
})();

sap.suite.smartbusiness.cache = (function() {
    var BIGMAP = {};
    var DATAMAP = {};
    return {
        getEvaluationById : function(key) {
            if(BIGMAP[key]) {
                return BIGMAP[key];
            } 
            return null; 
        },
        setEvaluationById : function(key, data) {
            BIGMAP[key] = data;
        },
        getKpiDetailsById : function(key) {
            if(DATAMAP[key]) {
                return DATAMAP[key];
            } 
            return null; 
        },
        setKpiDetailsById : function(key, data) {
            DATAMAP[key] = data;
        },
        invalidateKpiDetailsCache : function(){
            DATAMAP = {};
        },
        current_calls : {}
    }
})();
/**
* Show error message
*/
sap.suite.smartbusiness.utils = (function(){
       return {
               //Code Copied from Shell
               addSystemToServiceUrl : function(sServiceUrl, sSystem) {
                   if(sSystem) {
                       if (sServiceUrl.indexOf('/') !== 0 || sServiceUrl.indexOf('//') === 0) {
                           throw new Error("addSystemToServiceUrl: Invalid URL: " + sServiceUrl,"sap.suite.smartbusiness.utils");
                         }
                         //sSystem = sSystem || this.getSystemAlias();
                         if (/^[^?]*(;o=([\/;?]|$))/.test(sServiceUrl)) { // URL with ";o=" *not* followed by system
                           return sServiceUrl.replace(/;o=([\/;?]|$)/, (sSystem ? ";o=" + sSystem : "") + "$1");
                         }
                         if (/^[^?]*;o=/.test(sServiceUrl)) { // URL with ";o=" followed by system
                           return sServiceUrl;
                         }
                         if (sSystem) { // there is no marker for system in the URL so add system to last segment
                           return sServiceUrl.replace(/(\/[^?]*?)(\/$|$|(\/?\?.*))/, "$1;o=" + sSystem + "$2");
                         }
                   } else {
                       jQuery.sap.log.warning("Not adding System to Service URL : "+sServiceUrl);
                   }
                   return sServiceUrl;
               },
              showErrorMessage: function(errorMessage, detailErrorMessage){
                     if(detailErrorMessage==null || detailErrorMessage==''){
                           sap.ca.ui.message.showMessageBox({
                             type: sap.ca.ui.message.Type.ERROR,
                             message: errorMessage
                         });
                     }
                     else{
                           sap.ca.ui.message.showMessageBox({
                             type: sap.ca.ui.message.Type.ERROR,
                             message: errorMessage,
                             details: detailErrorMessage
                         });
                     }
              },
              getMantissaLength : function(num){
                  var sNum = num.toString();
                  var initPos = 0;
                  if(num < 0){
                      initPos = 1;
                  }
                  return (sNum.indexOf('.') === -1 ) ? (num < 0 ? sNum.length -1:sNum.length):  
                          sNum.substring(initPos, sNum.indexOf('.')).length;
              },
              getLocaleFormattedValue: function(num, oScale){
                  if(oScale == -2){
                      var fNum;
                      if(num > 9999)
                          fNum = "????";
                      else if(num < 0.001)
                          fNum = "0";
                      else
                          if(num.toString().indexOf('.') != -1)
                              fNum = Number(num).toFixed(4-num.toString().indexOf('.'));
                          else
                              fNum = Number(num);
                  }
                  else{
                      var sD = 2;
                      var mantissaLength  = this.getMantissaLength(num)
                      if(!(mantissaLength % 6))
                          sD = 1;
                      if(Math.abs(num) % Math.pow(10, mantissaLength-1) == 0){
                          sD = 0;
                      }
                      else if((Math.abs(num) % Math.pow(10, mantissaLength-1)) < 6*Math.pow(10, mantissaLength - 4)){
                          sD = 0;
                      }
                      var locale = new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage())
                      var valFormatter = sap.ca.ui.model.format.NumberFormat.getInstance({ style: "short" , shortDecimals:sD}, locale);
                      var fNum = valFormatter.format(num);
                  }
                  return fNum;
              },
              getRandomNumber:function(max){
            	 return Math.floor(Math.random() * 10000) % max;
              },
              getObjectOrder:function (object_type) {
                     var dictionary = {
                            TAGS : ["ID","IS_ACTIVE","TYPE","TAG"],
                            PROPERTIES : ["ID","IS_ACTIVE","TYPE","NAME","VALUE"],
                            EVALUATION_TEXTS : ["ID","IS_ACTIVE","LANGUAGE","TITLE","DESCRIPTION"],
                            INDICATOR_TEXTS : ["ID","IS_ACTIVE","LANGUAGE","TITLE","DESCRIPTION"],
                            CHIP_TEXTS : ["id","isActive","language","title","description"],
                            EVALUATION_VALUES : ["ID","IS_ACTIVE","TYPE","FIXED","COLUMN_NAME","ODATA_PROPERTY"],
                            EVALUATION_FILTERS : ["ID","IS_ACTIVE","TYPE","NAME","VALUE_1","OPERATOR","VALUE_2"],
                            ASSOCIATION_PROPERTIES : ["TYPE","SOURCE_INDICATOR","TARGET_INDICATOR","IS_ACTIVE","NAME","VALUE"],
                            APP_PARAMETERS: ["NAME","VALUE"],
                            AUTHORIZATION: ["NAME","TYPE"]
                     };
                     return dictionary[object_type];
              },

              getFilterArray: function(items, filterObject) {
            	  var filtersArray = [];
            	  var filters = {};
            	  for(var i=0,l=items.length; i<l; i++) {
            		  filters[items[i].getParent().getKey()] = filters[items[i].getParent().getKey()] || [];
            		  filters[items[i].getParent().getKey()].push(filterObject[items[i].getKey()]);
            	  } 

            	  for(var filter in filters) {
            		  filtersArray.push(new sap.ui.model.Filter(filters[filter], false));
            	  }
            	  return filtersArray;
              },

              dirtyBitCheck:function(obj)  {
                  var oldPayload = obj.oldPayload;
                  var newPayload = obj.newPayload;
                  var type = obj.objectType;
                  if((oldPayload instanceof Array) && (newPayload instanceof Array)) {
                         var o = {};
                         var n = {};
                         var updateArr = [];
                         var deleteArr = [];
                         o = this.arrayToObject(oldPayload, type);
                         n = this.arrayToObject(newPayload, type);
                         
                         for(var obj in n) {
                                if(!(o[obj])) {
                                      updateArr.push(n[obj]);
                                }
                                else {
                                      delete o[obj];
                                }
                         }
                         
                         for(var obj in o) {
                                deleteArr.push(o[obj]);
                         }
                         
                         return {
                                updates : updateArr,
                                deletes : deleteArr
                        };
                  }
                  else if((oldPayload instanceof Object) && (newPayload instanceof Object)) {
                        var updateObject = {};
                         for(var key in newPayload) {
                                if(newPayload.hasOwnProperty(key)) {
                                      if(newPayload[key] != oldPayload[key]) {
                                             updateObject = newPayload;
                                             if(type == "ASSOCIATIONS") {
                                                    return {updates : [updateObject], deletes : [oldPayload]};
                                             }
                                             return {updates : [updateObject]};
                                      }
                                }
                         }
                         return {updates : []};
                  }
           },
           
           updateChips: function (obj, model) {
               var indicators = null;
               var evaluations = null;
               
               model = model || new sap.ui.model.odata.ODataModel("/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata", true);
               
               if(obj.INDICATORS) {
                     indicators = obj.INDICATORS; 
               }
               else if(obj.EVALUATIONS) {
                     evaluations = obj.EVALUATIONS; 
               }
               
               if(indicators && indicators.length) {
                     for(var i=0,l=indicators.length; i<l; i++) {
                            
                     }
               }
               
               if(evaluations && evaluations.length) {
                     for(var i=0,l=evaluations.length; i<l; i++) {
                            model.read(("/CHIPS?$filter=evaluationId eq '" + evaluations[i].EVALUATIONS.ID + "' and isActive eq 1"), null, null, false, function(data) {
                                   if(data.results && data.results.length) {
                                          var chips = data.results;
                                          var updateBatch = [];
                                          var values = [];
                                          var filters = [];
                                          var isUpdatesSuccessful = true;
                                          var obj = {};
                                          for(var j=0,m=chips.length; j<m; j++) {
                                                 var configuration = JSON.parse(chips[j].configuration);
                                                 var tileConfiguration = JSON.parse(configuration.tileConfiguration); 
                                                 
                                                 for(var k=0,n=evaluations[i].EVALUATION_VALUES.length; k<n; k++) {
                                                        obj = {};
                                                        obj.TYPE = evaluations[i].EVALUATION_VALUES[k].TYPE;
                                                        obj.FIXED = evaluations[i].EVALUATION_VALUES[k].FIXED;
                                                        obj.COLUMN_NAME = evaluations[i].EVALUATION_VALUES[k].COLUMN_NAME;
                                                        obj.ODATA_PROPERTY = evaluations[i].EVALUATION_VALUES[k].ODATA_PROPERTY;
                                                        values.push(obj);
                                                 }
                                                 
                                                 for(var k=0,n=evaluations[i].EVALUATION_FILTERS.length; k<n; k++) {
                                                        obj = {};
                                                        obj.TYPE = evaluations[i].EVALUATION_FILTERS[k].TYPE;
                                                        obj.NAME = evaluations[i].EVALUATION_FILTERS[k].NAME;
                                                        obj.VALUE_1 = evaluations[i].EVALUATION_FILTERS[k].VALUE_1;
                                                        obj.OPERATOR = evaluations[i].EVALUATION_FILTERS[k].OPERATOR;
                                                        obj.VALUE_2 = evaluations[i].EVALUATION_FILTERS[k].VALUE_2;
                                                        filters.push(obj);
                                                 }
                                                 
                                                 tileConfiguration.EVALUATION = JSON.stringify(evaluations[i].EVALUATIONS);
                                                 tileConfiguration.EVALUATION_VALUES = JSON.stringify(values);
                                                 tileConfiguration.EVALUATION_FILTERS = JSON.stringify(filters);
                                                 
                                                 configuration.tileConfiguration = JSON.stringify(tileConfiguration);
                                                 configuration.timeStamp = Date.now().toString();
                                                 
                                                 configuration = JSON.stringify(configuration);
                                                 
                                                 if (configuration.length > 4096) {
                                                	 tileConfiguration.EVALUATION_FILTERS = JSON.stringify([]);
                                                     configuration = JSON.stringify({tileConfiguration: JSON.stringify(tileConfiguration),isSufficient: "0"});
                                                 }
                                                 
                                                 for(var ele in data.results[j]) {
                                                	if(data.results[j].hasOwnProperty(ele)) {
                                                		if((data.results[j][ele] instanceof Object) && !(data.results[j][ele] instanceof Array) && !(data.results[j][ele] instanceof Date)) {
                                                			delete data.results[j][ele];
                                                		}
                                                	} 
                                                 }
                                                 
                                                 data.results[j].configuration = configuration;
                                                 var entity = "CHIPS(id='" + data.results[j].id + "',isActive=1)";
                                                 updateBatch.push(model.createBatchOperation(entity,"PUT",data.results[j]));
                                          }
                                          
                                          model.addBatchChangeOperations(updateBatch); 
                                          model.submitBatch(function(data,response,errorResponse){
                                                               if(errorResponse.length)
                                                               {       isUpdatesSuccessful = false;
                                                               return;
                                                               }
                                                               var responses = data.__batchResponses[0].__changeResponses;
                                                               for(var key in responses)
                                                                     if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200") {
                                                                            isUpdatesSuccessful = false;      
                                                                      }

                                                        },function(err){
                                                               isUpdatesSuccessful = false;
                                                        },false);
                                          
                                          if(!isUpdatesSuccessful) {
                                                 //sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"));
                                          }
                                   }      
                            }, function(err) {
                                   //sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
                            });
                     }
               }
           },

              arrayToObject:function(arr, type) {
                     var order = this.getObjectOrder(type);
                     var obj = {};
                     var key = "";
                     for(var i=0,l=arr.length; i<l; i++) {
                            if(!(arr[i] instanceof Array) && (arr[i] instanceof Object)) {
                                   key = "";
                                   for(var j=0,m=order.length; j<m; j++) {
                                         key += (j) ? "^|" : "";
                                         key += arr[i][order[j]];
                                   }
                                   obj[key] = arr[i];
                            }
                     }
                     return obj;
              },
              appToAppNavigation:function(obj) {
                  var hash = "#";
                  var hashArr = window.hasher.getHashAsArray();
                  var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?"));
                  if(hashParameters && (hashParameters.charAt(hashParameters.length - 1) == "&")) {
                         hashParameters = hashParameters.substr(0,hashParameters.length - 1);
                  } 
                  if(obj.action) {
                         if(obj.context || obj.route) {
                               if(obj.context.charAt(0) == "/") {
                                      obj.context = obj.context.substr(1);
                               }
                               obj.context = "&/" + ((obj.route + "/") || "") + (obj.context || ""); 
                         }
                         hash += (obj.semanticObject || "FioriApplication-") + obj.action + hashParameters + (obj.context || "");
                  }
                  if(!(sap.ui.core.routing)) {
                         jQuery.sap.require("sap.ui.core.routing");
                  }
                  var hashChanger = new sap.ui.core.routing.HashChanger();
                  sap.suite.smartbusiness.utils.setPrevAppHash();
                  hashChanger.setHash(hash);
                },
                
                hashChange:function(obj) {
                  if(!(sap.ui.core.routing)) {
                         jQuery.sap.require("sap.ui.core.routing");
                  }
                  var hashChanger = new sap.ui.core.routing.HashChanger();
                  hashChanger.setHash(obj.hash || "#");
                },
                
                replaceHash:function(obj, isHash) {
                	if(isHash) {
                		window.location.replace(obj.hash);
                	}
                	else {
                		var hash = "#";
                		var hashArr = window.hasher.getHashAsArray();
                        var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?"));
                        if(hashParameters && (hashParameters.charAt(hashParameters.length - 1) == "&")) {
                               hashParameters = hashParameters.substr(0,hashParameters.length - 1);
                        } 
                        if(obj.action) {
                               if(obj.context || obj.route) {
                                     if(obj.context.charAt(0) == "/") {
                                            obj.context = obj.context.substr(1);
                                     }
                                     obj.context = "&/" + ((obj.route + "/") || "") + (obj.context || ""); 
                               }
                               hash += (obj.semanticObject || "FioriApplication-") + obj.action + hashParameters + (obj.context || "");
                        }
                        window.location.replace(hash);
                	}
                },
                
                setPrevAppHash: function() {
                	  hasher = hasher || window.hasher;
                	  sap.suite.smartbusiness = sap.suite.smartbusiness || {};
                	  sap.suite.smartbusiness.modelerAppCache = sap.suite.smartbusiness.modelerAppCache || {};
                	  sap.suite.smartbusiness.modelerAppCache.prevApp = sap.suite.smartbusiness.modelerAppCache.prevApp || {};
                	  sap.suite.smartbusiness.modelerAppCache.prevApp.prevAppHash = hasher.getHash();
                	  sap.suite.smartbusiness.modelerAppCache.prevApp.prevAppHashAsArray = hasher.getHashAsArray();
                  },
                  
                  backToHome: function() {
                  	sap.suite.smartbusiness = sap.suite.smartbusiness || {};
                  	sap.suite.smartbusiness.modelerAppCache = sap.suite.smartbusiness.modelerAppCache || {};
                  	if(sap.suite.smartbusiness.modelerAppCache.prevApp) {
                  		delete sap.suite.smartbusiness.modelerAppCache.prevApp;
                  	}
                  	sap.suite.smartbusiness.modelerAppCache.SBWorkspace = {};
                  	sap.suite.smartbusiness.modelerAppCache.createSBKPI = {};
                  	sap.suite.smartbusiness.modelerAppCache.createSBKPIEvaluation = {};
                  	sap.suite.smartbusiness.modelerAppCache.configureSBKPITile = {};
                  	sap.suite.smartbusiness.modelerAppCache.manageSBKPIAssociation = {};
                  	sap.suite.smartbusiness.modelerAppCache.configureSBKPIDrilldown = {};
                  	sap.suite.smartbusiness.modelerAppCache.authorizeSBEvaluation = {};
                  },
                  
                  isHanaViewValid: function(obj) {
                	  sap.suite.smartbusiness = sap.suite.smartbusiness || {};
                	  sap.suite.smartbusiness.modelerAppCache = sap.suite.smartbusiness.modelerAppCache || {};
                	  sap.suite.smartbusiness.modelerAppCache[obj.app] = sap.suite.smartbusiness.modelerAppCache[obj.app] || {};
                	  if(!(obj.VIEW_NAME)) {
                		  return false;
                	  }
                	  if(obj.cache && obj.app && (sap.suite.smartbusiness.modelerAppCache[obj.app].hanaViewValid !== undefined)) {
                		  return sap.suite.smartbusiness.modelerAppCache[obj.app].hanaViewValid;
                	  }
                	  else {
                		  var flag = false;
                		  var entity = "/HANA_VIEWS" + "?$filter=" + "PACKAGE eq " + "'" + obj.VIEW_NAME.substr(0, obj.VIEW_NAME.indexOf("/")) + "'" + " and " + "OBJECT eq " + "'" +  obj.VIEW_NAME.substr(obj.VIEW_NAME.indexOf("/") + 1) + "'";   
                		  obj.model = obj.model || new sap.ui.model.odata.ODataModel("/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata", true);
                		  obj.model.read(entity, null, null, false, function(data) {
                			  if(data.results.length) {
                				  flag = true;
                			  }
                			  else {
                				  flag = false;
                			  }
                		  }, function() {
                			  flag = true;
                		  });
                		  if(obj.app) {
                			  sap.suite.smartbusiness.modelerAppCache[obj.app].hanaViewValid = flag;
                		  }
                		  return flag;
                	  }
                  },

                  isHanaViewFormatValid: function(obj) {
                	  sap.suite.smartbusiness = sap.suite.smartbusiness || {};
                	  sap.suite.smartbusiness.modelerAppCache = sap.suite.smartbusiness.modelerAppCache || {};
                	  sap.suite.smartbusiness.modelerAppCache[obj.app] = sap.suite.smartbusiness.modelerAppCache[obj.app] || {};
                	  if(!(obj.VIEW_NAME)) {
                		  return false;
                	  }
                	  if(obj.cache && obj.app && (sap.suite.smartbusiness.modelerAppCache[obj.app].hanaViewFormatValid !== undefined)) {
                		  return sap.suite.smartbusiness.modelerAppCache[obj.app].hanaViewFormatValid;
                	  }
                	  else {
                		  if((obj.VIEW_NAME.indexOf("/") == -1) && (obj.VIEW_NAME.indexOf("::") == -1)) {
                			  if(obj.app) {
                				  sap.suite.smartbusiness.modelerAppCache[obj.app].hanaViewFormatValid = false;
                			  }
                			  return false;
                		  }
                		  if(obj.app) {
                			  sap.suite.smartbusiness.modelerAppCache[obj.app].hanaViewFormatValid = true;
                		  }
                		  return true;
                	  }
                  },

                  isODataURLValidForHanaView: function(obj) {
                	  sap.suite.smartbusiness = sap.suite.smartbusiness || {};
                	  sap.suite.smartbusiness.modelerAppCache = sap.suite.smartbusiness.modelerAppCache || {};
                	  sap.suite.smartbusiness.modelerAppCache[obj.app] = sap.suite.smartbusiness.modelerAppCache[obj.app] || {};
                	  if(obj.cache && obj.app && (sap.suite.smartbusiness.modelerAppCache[obj.app].oDataURLValid !== undefined)) {
                		  return sap.suite.smartbusiness.modelerAppCache[obj.app].oDataURLValid;
                	  }
                	  else {
                		  var entity = "/ODATA_FOR_ENTITY" + "(" + "P_PACKAGE=" + "'" + obj.VIEW_NAME.substr(0, obj.VIEW_NAME.indexOf("/")) + "'" + "," + "P_OBJECT=" + "'" +  obj.VIEW_NAME.substr(obj.VIEW_NAME.indexOf("/") + 1) + "'" + ")/Results";
                		  obj.model = obj.model || new sap.ui.model.odata.ODataModel("/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata", true);
                		  obj.model.read(entity, null, null, false, function(data) {
                			  if(data.results.length) {
                				  if(data.results.indexOf(odata)) {
                					  if(obj.app) {
                						  sap.suite.smartbusiness.modelerAppCache[obj.app].oDataURLValid = true;
                						  sap.suite.smartbusiness.modelerAppCache[obj.app].oDataURLValidForHanaView = true;
                					  }
                					  return true;
                				  }
                				  else {
                					  if(obj.app) {
                						  sap.suite.smartbusiness.modelerAppCache[obj.app].oDataURLValid = false;
                						  sap.suite.smartbusiness.modelerAppCache[obj.app].oDataURLValidForHanaView = false;
                					  }
                					  return false;
                				  }
                			  }
                			  else {
                				  if(obj.app) {
                					  sap.suite.smartbusiness.modelerAppCache[obj.app].oDataURLValid = false;
                					  sap.suite.smartbusiness.modelerAppCache[obj.app].oDataURLValidForHanaView = false;
                				  }
                				  return false;
                			  }
                		  }, function() {
                			  if(obj.app) {
                				  sap.suite.smartbusiness.modelerAppCache[obj.app].oDataURLValid = false;
                				  sap.suite.smartbusiness.modelerAppCache[obj.app].oDataURLValidForHanaView = false;
                			  }
                			  return false;
                		  });
                	  }
                  },

                  isODataURLValidByExistence: function(obj) {
                	  sap.suite.smartbusiness = sap.suite.smartbusiness || {};
                	  sap.suite.smartbusiness.modelerAppCache = sap.suite.smartbusiness.modelerAppCache || {};
                	  sap.suite.smartbusiness.modelerAppCache[obj.app] = sap.suite.smartbusiness.modelerAppCache[obj.app] || {};
                	  if(obj.cache && obj.app && (sap.suite.smartbusiness.modelerAppCache[obj.app].oDataURLValid !== undefined)) {
                		  return sap.suite.smartbusiness.modelerAppCache[obj.app].oDataURLValid;
                	  }
                	  else {
                		  var model = new sap.ui.model.odata.ODataModel(obj.ODATA_URL,true);
                		  if(model.getServiceMetadata()) {
                			  odataExists = true;
                		  }
                		  else {
                			  odataExists = false;
                		  }
                		  if(obj.app) {
                			  sap.suite.smartbusiness.modelerAppCache[obj.app].oDataURLValid = odataExists;
                			  sap.suite.smartbusiness.modelerAppCache[obj.app].oDataURLValidByExistence = odataExists;
                		  }
                		  return odataExists;
                	  }
                  },

                  isODataURLValid: function(obj) {
                	  if(obj.VIEW_NAME) {
                		  return sap.suite.smartbusiness.utils.isODataURLValidForHanaView(obj);
                	  }
                	  else {
                		  return sap.suite.smartbusiness.utils.isODataURLValidByExistence(obj);
                	  }
                  },

                  isEntitysetValid: function(obj) {
                	  sap.suite.smartbusiness = sap.suite.smartbusiness || {};
                	  sap.suite.smartbusiness.modelerAppCache = sap.suite.smartbusiness.modelerAppCache || {};
                	  sap.suite.smartbusiness.modelerAppCache[obj.app] = sap.suite.smartbusiness.modelerAppCache[obj.app] || {};
                	  if(obj.cache && obj.app && (sap.suite.smartbusiness.modelerAppCache[obj.app].entitysetValid !== undefined)) {
                		  return sap.suite.smartbusiness.modelerAppCache[obj.app].entitysetValid;
                	  }
                	  else {
                		  try {
                			  if(obj.VIEW_NAME) {

                			  }
                			  else {
                				  if(sap.suite.smartbusiness.odata.getAllEntitySet(obj.ODATA_URL).indexOf(obj.ODATA_ENTITYSET) == -1){
                					  if(obj.app) {
                						  sap.suite.smartbusiness.modelerAppCache[obj.app].entitysetValid = false;
                					  }
                					  return false;
                				  }
                				  else {
                					  if(obj.app) {
                						  sap.suite.smartbusiness.modelerAppCache[obj.app].entitysetValid = true;
                					  }
                					  return true;
                				  }
                			  }
                		  } catch(e) {
                			  if(obj.app) {
                				  sap.suite.smartbusiness.modelerAppCache[obj.app].entitysetValid = false; 
                			  }
                			  return false;
                		  }
                	  }
                  },

                  isMeasureValid: function(obj) {
                	  sap.suite.smartbusiness = sap.suite.smartbusiness || {};
                	  sap.suite.smartbusiness.modelerAppCache = sap.suite.smartbusiness.modelerAppCache || {};
                	  sap.suite.smartbusiness.modelerAppCache[obj.app] = sap.suite.smartbusiness.modelerAppCache[obj.app] || {};
                	  if(obj.cache && obj.app && (sap.suite.smartbusiness.modelerAppCache[obj.app].measureValid !== undefined)) {
                		  return sap.suite.smartbusiness.modelerAppCache[obj.app].measureValid;
                	  }
                	  try {
                		  if(sap.suite.smartbusiness.odata.getAllMeasures(obj.ODATA_URL, obj.ODATA_ENTITYSET).indexOf(obj.COLUMN_NAME) == -1) {
                			  if(obj.app) {
                				  sap.suite.smartbusiness.modelerAppCache[obj.app].measureValid = false;
                			  }
                			  return false;
                		  } 
                		  else {
                			  if(obj.app) {
                				  sap.suite.smartbusiness.modelerAppCache[obj.app].validValueMeasure = true;
                			  }
                			  return true;
                		  }
                	  } catch(e) {
                		  if(obj.app) {
                			  sap.suite.smartbusiness.modelerAppCache[obj.app].validValueMeasure = false;
                		  }
                		  return false;
                	  }
                  },

                  getHanaSystem : function() {
                	  var hashObj = hasher || window.hasher; 
                	  var hashArr = hashObj.getHashAsArray();
                	  if(hashArr && hashArr.length && hashArr[0]) {
                		  var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
                		  for(var i=0,l=hashParameters.length; i<l; i++) {
                			  if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                				  return hashParameters[i].split("=")[1]; 
                			  }
                		  }
                	  }
                	  return "";
                  },

                  fetchCSRFToken: function() {
                	  var tokenFetchServiceUrl = "/sap/hba/r/sb/core/logic/__token.xsjs";
                	  if(sap.ushell && sap.ushell.Container) {
                		  tokenFetchServiceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(tokenFetchServiceUrl, this.getHanaSystem());
                	  }
                	  return jQuery.ajax({
                		  type: "HEAD",
                		  async: false,
                		  dataType: "json",
                		  url: tokenFetchServiceUrl,
                		  headers: {"X-CSRF-Token": "Fetch"},
                		  success: function(d, s, x) {

                		  },
                		  error: function() {
                			  
                		  }
                	  });
                  },
                  
                  appendUrlParameters: function(url, urlParameters) {
                	  var urlParts = url.split("?");
                	  if(urlParts.length > 2) {
                		  throw new Error("Url not formed properly");
                	  }
                	  if(sap.ushell && sap.ushell.Container) {
                		  urlParts[0] = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(urlParts[0], this.getHanaSystem());
                	  }
                	  url = urlParts[0];
                	  if(urlParts.length == 2) {
                		  url += "?" + urlParts[1];
                	  }
                	  if(urlParameters && Object.keys(urlParameters) && Object.keys(urlParameters).length) {
                		  url = url + "?" + jQuery.param(urlParameters);
                	  }
                	  return url;
                  },
                  
                  getLocaleLanguage: function() {
                	  return ((sap.ui.getCore().getConfiguration().getLanguage()) ? sap.ui.getCore().getConfiguration().getLanguage().split("-")[0].toUpperCase() : "");
                  },
                  
                  create: function(url, payload, parameters, success, error, async, urlParameters) {
                	  var that = this;
                	  async = async ? true : false;
                	  sap.suite.smartbusiness.utils.fetchCSRFToken().done(function(d,s,x) {
                		  jQuery.ajax({
                    		  type: "POST",
                    		  async: async,
                    		  url: sap.suite.smartbusiness.utils.appendUrlParameters(url, urlParameters),
                    		  data: encodeURIComponent(JSON.stringify(payload)),
                    		  headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language":that.getLocaleLanguage()},
                    		  success: success,
                    		  error: error
                    	  });
                	  });
                  },
                  
                  update: function(url, payload, parameters, success, error, merge, eTag, async, urlParameters) {
                	  var that = this;
                	  async = async ? true : false;
                	  sap.suite.smartbusiness.utils.fetchCSRFToken().done(function(d,s,x) {
                		  jQuery.ajax({
                    		  type: "PUT",
                    		  async: async,
                    		  url: sap.suite.smartbusiness.utils.appendUrlParameters(url, urlParameters),
                    		  data: encodeURIComponent(JSON.stringify(payload)),
                    		  headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language":that.getLocaleLanguage(), "If-None-Match": (eTag || "")},
                    		  success: success,
                    		  error: error
                    	  });
                	  });
                  },
                  
                  remove: function(url, payload, success, error, eTag, additionalPayload, async, urlParameters) {
                	  var that = this;
                	  async = async ? true : false;
                	  sap.suite.smartbusiness.utils.fetchCSRFToken().done(function(d,s,x) {
                		  jQuery.ajax({
                    		  type: "DELETE",
                    		  async: async,
                    		  url: sap.suite.smartbusiness.utils.appendUrlParameters(url, urlParameters),
                    		  data: encodeURIComponent(JSON.stringify(payload)),
                    		  headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language":that.getLocaleLanguage(), "If-None-Match": (eTag || "")},
                    		  success: success,
                    		  error: error
                    	  });
                	  });
                  },
                  
                  serviceUrl: function(url) {
                	  var Constants = {
                			  INDICATOR_SERVICE_URI : "/sap/hba/r/sb/core/logic/indicators.xsjs",
                			  EVALUATION_SERVICE_URI : "/sap/hba/r/sb/core/logic/evaluations.xsjs",
                			  CHIP_SERVICE_URI: "/sap/hba/r/sb/core/logic/chips.xsjs",
                			  ACTIVATE_INDICATOR_SERVICE_URI: "/sap/hba/r/sb/core/logic/activateIndicator.xsjs",
                			  ACTIVATE_EVALUATION_SERVICE_URI: "/sap/hba/r/sb/core/logic/activateEvaluation.xsjs",
                			  INDICATOR_FAVOURITE_SERVICE_URI: "/sap/hba/r/sb/core/logic/favouriteIndicator.xsjs",
                			  EVALUATION_FAVOURITE_SERVICE_URI: "/sap/hba/r/sb/core/logic/favouriteEvaluation.xsjs",
                			  ASSOCIATIONS_CUD: "/sap/hba/r/sb/core/logic/associations_cud.xsjs",
                			  ACTIVATE_ASSOCIATION_SERVICE_URI: "/sap/hba/r/sb/core/logic/activateAssociation.xsjs",
                			  ACTIVATE_CHIP_SERVICE_URI: "/sap/hba/r/sb/core/logic/activateChip.xsjs",
                			  AUTHORIZATION_SERVICE_URI: "/sap/hba/r/sb/core/logic/authorization.xsjs",
                			  COPY_DDA_CONFIGURATION_SERVICE_URI: "/sap/hba/r/sb/core/logic/copyDrilldownConfiguration.xsjs"
                	  }
                	  return Constants[url];
                  }
       }
})();
/**
* KPI Related API
*/
sap.suite.smartbusiness.kpi = (function() {
    var Constants = {
            KPI_SERVICE_URI : "/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata",
            KPI_RUNTIME_SERVICE_URI : "/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata",
            EVALUATIONS_ENTITY_SET : "/EVALUATIONS",
            EVALUATIONS_DDA_ENTITY_SET: "/EVALUATIONS_DDA",
            ASSOCIATED_INDICATORS_ENTITY_SET:"ASSOCIATED_INDICATORS",
            DESIGN_TIME_SERVICE_URI:"/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata"
    };
    function getCacheKey(oParam, bRuntime) {
        var prefix = bRuntime ? "_rt" : "_dt";
        var key = oParam.id;
        if(oParam.filters) {
            key+="_FILTERS";
        } if(oParam.thresholds) {
            key+="_VALUES";
        }
        key+=prefix;
        return key;
    };
    var _appendSystemAlias = function(uri, sysAlias) {
    	if(sap.ushell && sap.ushell.Container && sap.ushell.Container.getService) {
    		var urlParsingService = sap.ushell.Container.getService("URLParsing");
    		if(urlParsingService) {
    			uri = urlParsingService.addSystemToServiceUrl(uri, sysAlias);
    		}
    	}
    	return uri;
    };
    return  {
        /**
         * @param :oParam
         * @retrurn  : evaluationObject
         * @description : OParam should be an object with following properties
         * {
         *   id : 'evaluationId',
         *   success : function(data) {}, //callback function with OData Evaluation Response
         *   error : function() {},
         *   cache :  true/false //default false
         *   expand : 'csv' //will add expand params to Evaluation OData Call
         *   
         * }
         * 
         * If Success property is specified, then call will  be made async, other wise synchronous
         */
        getSiblingEvaluations:function(oParam){

            if(!oParam.indicator) {
                throw new Error("Indicator Not Found")
            }
            var model =null;
            if(sap.suite.smartbusiness.odata){
                model = sap.suite.smartbusiness.odata.getModelByServiceUri(Constants.KPI_SERVICE_URI);
            } else {
                model = new sap.ui.model.odata.ODataModel(Constants.KPI_SERVICE_URI, true);
            }
            var async = !!oParam.success;
            var filterValue = "INDICATOR eq '#INDICATOR_ID'".replace("#INDICATOR_ID",oParam.indicator);
            var siblingData = [];
            var oDataParamObject = {};
            oDataParamObject["$filter"] = filterValue;
            var expandParams = "";
            if(oParam.filters) {
                expandParams += "FILTERS,";
            }
            if(oParam.thresholds) {
                expandParams += "VALUES,";
            }
            if(expandParams) {
                oDataParamObject["$expand"] = expandParams.substring(0,expandParams.length-1);
            }
            var entity = Constants.EVALUATIONS_ENTITY_SET;
            if(oParam.getDDAEvaluation) {
            	entity = Constants.EVALUATIONS_DDA_ENTITY_SET;
            }
            model.read(entity,null, oDataParamObject, async, function(data) {
                if(data.results && data.results.length) {
                    var tmp=data.results||[];
                    siblingData=tmp;
                    
                   // sap.suite.smartbusiness.cache.setEvaluationById(cache_key, evalData);
                }
                if(async) {
                    oParam.success.call(oParam.context || null, siblingData);
                }
            }, function(){
                jQuery.sap.log.error("Error fetching Evaluation : ",oParam.id);
                if(oParam.error) {
                    oParam.error.apply(oParam.context || null, arguments);
                }
            });
            return siblingData;
        
        },
        getAssociatedEvaluations:function(oParam){

            if(!oParam.id) {
                throw new Error("Evaluation Not Found")
            }
            var model =null;
            if(sap.suite.smartbusiness.odata){
                model = sap.suite.smartbusiness.odata.getModelByServiceUri(Constants.DESIGN_TIME_SERVICE_URI);
            } else {
                model = new sap.ui.model.odata.ODataModel(Constants.DESIGN_TIME_SERVICE_URI, true);
            }
            var async = !!oParam.success;
            var filterValue = "SOURCE_EVALS eq '#EVALUATION_ID' or TARGET_EVALS eq '#EVALUATION_ID'".replace("#EVALUATION_ID",oParam.id);
            var associatedEvalsData = [];
            var oDataParamObject = {};
            oDataParamObject["$filter"] = filterValue;
            var expandParams = "SOURCE_EVALUATION,TARGET_EVALUATION";
            if(oParam.filters) {
                expandParams += "FILTERS,";
            }
            if(oParam.thresholds) {
                expandParams += "VALUES,";
            }
            if(expandParams) {
                oDataParamObject["$expand"] = expandParams.substring(0,expandParams.length);
            }
            model.read(Constants.ASSOCIATED_INDICATORS_ENTITY_SET,null, oDataParamObject, async, function(data) {
            	data=(data.results && data.results.length)?data.results:[];
            	data.forEach(function(o){
            		if(o.TARGET_EVALS==oParam.id){
            			associatedEvalsData.push(o.SOURCE_EVALUATION);
            		}else if(o.SOURCE_EVALS==oParam.id){
            			associatedEvalsData.push(o.TARGET_EVALUATION);
            			}
            	});
                if(async) {
                    oParam.success.call(oParam.context || null, associatedEvalsData);
                }
            }, function(){
                jQuery.sap.log.error("Error fetching Evaluation : ",oParam.id);
                if(oParam.error) {
                    oParam.error.apply(oParam.context || null, arguments);
                }
            });
            return associatedEvalsData;
        
        },
        getEvaluationById : function(oParam) {
            if(!oParam.id) {
                throw new Error("Evaluation Id Not Found")
            }
            var bUseRuntimeService = !!oParam.useRuntimeService; 
            var cache_key = getCacheKey(oParam, bUseRuntimeService);
            if(oParam.cache) {
                var evaluationObject = sap.suite.smartbusiness.cache.getEvaluationById(cache_key);
                if(evaluationObject) {
                    if(oParam.success) {
                        oParam.success.call(oParam.context || null, evaluationObject);
                        return null;
                    } else {
                        return evaluationObject;
                    }
                }
            }
            var model =null;
            var _serviceUri = bUseRuntimeService ? Constants.KPI_RUNTIME_SERVICE_URI : Constants.KPI_SERVICE_URI;
            var _serviceUri = _appendSystemAlias(_serviceUri, oParam.sapSystem);
            if(sap.suite.smartbusiness.odata){
                model = sap.suite.smartbusiness.odata.getModelByServiceUri(_serviceUri);
            } else {
                model = new sap.ui.model.odata.ODataModel(_serviceUri, true);
            }
            var async = !!oParam.success;
            var filterValue = "ID eq '#EVALUATION_ID'".replace("#EVALUATION_ID",oParam.id);
            var evalData = null;
            var oDataParamObject = {};
            oDataParamObject["$filter"] = filterValue;
            var expandParams = "";
            if(oParam.filters) {
                expandParams += "FILTERS,";
            }
            if(oParam.thresholds) {
                expandParams += "VALUES,";
            }
            if(expandParams) {
                oDataParamObject["$expand"] = expandParams.substring(0,expandParams.length-1);
            }
            var entity = Constants.EVALUATIONS_ENTITY_SET;
            if(oParam.getDDAEvaluation) {
            	entity = Constants.EVALUATIONS_DDA_ENTITY_SET; 
            }
            else {
            	
            }
            model.read(entity,null, oDataParamObject, async, function(data) {
                if(data.results && data.results.length) {
                    evalData = data.results[0];
                    sap.suite.smartbusiness.cache.setEvaluationById(cache_key, evalData);
                }
                if(async) {
                    oParam.success.call(oParam.context || null, evalData);
                }
            }, function(){
                jQuery.sap.log.error("Error fetching Evaluation : ",oParam.id);
                if(oParam.error) {
                    oParam.error.apply(oParam.context || null, arguments);
                }
            });
            return evalData;
        },
        parseEvaluation : function(evaluationData) {
            return new sap.suite.smartbusiness.kpi.Evaluation(evaluationData);
        }
    } 
 })();

/**
  *  EVALUATION - Parse Evaluation Json Response and Form JavaScript Object
  */
sap.suite.smartbusiness.kpi.Thresholds = function(thresholdsData) {
     this.thresholdsData = thresholdsData;
     var T_MAPPING = {
             "TA" : {
                 prop : '_target',
                 func : "getTarget"
             },
             "CL" : {
                 prop : '_criticalLow',
                 func : "getCriticalLow"
             },
             "CH" : {
                 prop : '_criticalHigh',
                 func : "getCriticalHigh"
             },
             "WL" : {
                 prop : '_warningLow',
                 func : "getWarningLow"
             },
             "WH" : {
                 prop : '_warningHigh',
                 func : "getWarningHigh"
             },
             "TC" : {
                 prop : '_trend',
                 func : "getTrend"
             },
             "RE" : {
                 prop : "_reference",
                 func : "getReference"
             }
     }
     var getType = function(obj) {
         if(obj.FIXED) {
             return 'FIXED';
         }
         if(obj.COLUMN_NAME) {
             return 'COLUMN_NAME';
         }
         if(obj.ODATA_URL) {
             return 'ODATA_URL'
         }
         return null;
     };
     this.parse = function(allThresholds) {
         allThresholds.forEach(function(oThreshold) {
             var mapping = T_MAPPING[oThreshold.TYPE];
             if(mapping) {
                 var tType = getType(oThreshold);
                 this[mapping.prop+"Type"] = tType;
                 this[mapping.prop+"Value"] = oThreshold[tType];
                 sap.suite.smartbusiness.kpi.Thresholds.prototype[mapping.func+"Type"] = function() {
                     return this[mapping.prop+"Type"];
                 };
                 sap.suite.smartbusiness.kpi.Thresholds.prototype[mapping.func] = function() {
                     return this[mapping.prop+"Value"];
                 };
             }
         },this);
         for(var each in T_MAPPING) {
             var o = T_MAPPING[each]
             if(!sap.suite.smartbusiness.kpi.Thresholds.prototype[o.func]) {
                 sap.suite.smartbusiness.kpi.Thresholds.prototype[o.func+"Type"] = function() {
                     return null;
                 };
                 sap.suite.smartbusiness.kpi.Thresholds.prototype[o.func] = function() {
                     return null;
                 };
             }
         }
     };
     this.parse(this.thresholdsData.results);
};
sap.suite.smartbusiness.kpi.Evaluation = function(evaluationData) {
     this.evaluationData = evaluationData;
     this.thresholds = null;
     if(this.evaluationData && this.evaluationData.VALUES) {
         this._init();
         this.thresholds = new sap.suite.smartbusiness.kpi.Thresholds(this.evaluationData.VALUES);
     }
};
sap.suite.smartbusiness.kpi.Evaluation.PropertyMapping = {
         ID : "getId",
         ODATA_URL : "getODataUrl",
         ODATA_ENTITYSET : "getEntitySet",
         GOAL_TYPE : "getGoalType",
         INDICATOR : "getKpiId",
         TITLE : "getTitle",
         DESCRIPTION : "getDescription",
         SCALING : "getScaling",
         COLUMN_NAME : "getKpiMeasureName",
         INDICATOR_TITLE : "getKpiName",
         SEMANTIC_OBJECT : "getSemanticObject",
         ACTION : "getAction",
         OWNER_NAME : "getOwnerName",
         OWNER_ID : "getOwnerId",
         VALUES_SOURCE : "getThresholdValueType",
         //EXPAND PROPERTIES
         FILTERS : "getFilters",
         VALUES : "getValues",
         PROPERTIES : "getProperties",
         TAGS : "getTags",
         INDICATOR_PROPERTIES : "getKpiDetail"
};
sap.suite.smartbusiness.kpi.Evaluation.prototype = {
     _init : function() {
         for(var each in sap.suite.smartbusiness.kpi.Evaluation.PropertyMapping) {
             (function(each){
                 var func = sap.suite.smartbusiness.kpi.Evaluation.PropertyMapping[each];
                 sap.suite.smartbusiness.kpi.Evaluation.prototype[func] = function() {
                     return this.evaluationData[each];
                 }
             })(each);
         }
     },
     getThresholds : function() {
         return this.thresholds;
     },
     isMaximizingKpi : function() {
         return this.getGoalType() == "MA";
     },
     isMinimizingKpi : function() {
         return this.getGoalType() == "MI";
     },
     isTargetKpi : function() {
         return this.getGoalType() == "RA";
     }
};
//

}; // end of sap/suite/ui/smartbusiness/lib/Util.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.tiles.Generic') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.tiles.Generic");

sap.ui.core.Control.extend("sap.suite.ui.smartbusiness.tiles.Generic", {
    metadata : {
        properties : {
            evaluationId : "string",
            associationEvaluationId : {
                type : "string",
                defaultValue : null
            },
            header : "string",
            subheader : "string",
            mode : {
                type : "string",
                defaultValue : "RUNTIME"
            },
            size : {
                type : "string",
                defaultValue : "S"
            },
            dimension : {
                type : "string",
                defaultValue : null
            },
            frameType : {
                type : "string",
                defaultValue :"OneByOne"
            },
            contentOnly : {
            	type : "boolean",
            	defaultValue : false
            },
            kpiValueRequired : {
                type : "boolean",
                defaultValue : true
            },
            sapSystem : {
                type : "string",
                defaultValue : null
            },
            additionalFilters : {
                type: "object",
                defaultValue: {}
            	
            },
            visible : {
                type : "boolean",
                defaultValue : true
            },
            click : {
                type : "boolean",
                defaultValue: true
            },
            tileConfiguration : {
            	type : "object",
            	defaultValue : null
            	/** Expected Format
            	 {
            	 	MEASURES : [
            	  		{name : 'X', color : <SemanticName>}
            	  	],
            	  	SORTING : {
            	  		order : 'asc/desc',
            	  		by : 'M/D'
            	  	}, 
            	  	
            	 }
            	 */
            }
        },
        aggregations : {
            _tile : {
                type:"sap.ui.core.Control",
                multiple:false,
                visibility : "hidden"
            }
        }
    }
});
sap.suite.ui.smartbusiness.tiles.Generic.Mode = {
        "RUNTIME" : "RUNTIME",
        "DUMMY" : "DUMMY",
};

sap.suite.ui.smartbusiness.tiles.Generic.prototype._addSystemAliasToUri = function(uri, sysAlias) {
	if(sap.ushell && sap.ushell.Container && sap.ushell.Container.getService) {
		var parsingService = sap.ushell.Container.getService("URLParsing");
		if(parsingService) {
			uri = parsingService.addSystemToServiceUrl(uri, sysAlias);
		}
	}
	return uri;
}; 
sap.suite.ui.smartbusiness.tiles.Generic.prototype.init = function () {
    this._oScalingFactor = {
            "0" : "",    
            "3" : "Kilo",
            "6" : "Million",
            "9" : "Billion",
            "-9" : "Nano",
            "-6" : "Micro",
            "-3" : "Milli"
    };
    this.EVALUATION_DATA = null;
    this.evaluationApi = null;
    this.THRESHOLD_MAPPING = {
        "TA" : {
            prop : 'TARGET_VALUE',
        },
        "CL" : {
            prop : 'CRITICAL_LOW_VALUE'
        },
        "CH" : {
            prop : 'CRITICAL_HIGH_VALUE'
        },
        "WL" : {
            prop : 'WARNING_LOW_VALUE'
        },
        "WH" : {
            prop : 'WARNING_HIGH_VALUE'
        },
        "TC" : {
            prop : 'TREND_VALUE',
        },
        "RE" : {
            prop : "REFERENCE_VALUE"
        }
    };
    for(var each in this.THRESHOLD_MAPPING) {
        var prop = this.THRESHOLD_MAPPING[each].prop;
        this[prop] = null;
    }
    this.setAggregation("_tile", new sap.suite.ui.commons.GenericTile({
        
    }));
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.onBeforeRendering = function () {
    //do nothing
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype._initODataMetadata = function() {
	var serviceUrl = this._addSystemAliasToUri(this.evaluationApi.getODataUrl(), this.getSapSystem());
    var oProperties = sap.suite.smartbusiness.odata.properties(serviceUrl, this.evaluationApi.getEntitySet());
    var columns = [];
    columns.push(this.evaluationApi.getKpiMeasureName());
    if(this.getDimension()) {
        columns.push(this.getDimension()); 
    }
    this.LABEL_PROPERTY_MAPPING = oProperties.getLabelMappingObject();
    this.TEXT_PROPERTY_MAPPING = oProperties.getTextPropertyMappingObject();
    this.UOM_PROPERTY_MAPPING = oProperties.getUnitPropertyMappingObject();
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.renderTile = function() {
    var evaluationId = this.getEvaluationId();
    if(this.isAssociatedKpi()) {
        evaluationId  = this.getAssociationEvaluationId();
    }
    this.setLoadingState();
    this.oData_Call_Ref_Evaluation_Details = sap.suite.smartbusiness.drilldown.getEvaluationById({
        id : evaluationId,
        cache : true,
        filters : true,
        thresholds : true,
        sapSystem : this.getSapSystem(),
        success : function(evaluationData) {
            if(evaluationData.ID) {
                this.EVALUATION_DATA = evaluationData;
                this.evaluationApi = sap.suite.smartbusiness.kpi.parseEvaluation(evaluationData);
                this._initODataMetadata();
                this._fetchKpiValue(function() {
                    if(!this.getVisible()){
                        //this.$().hide(1000);
                        this.$().css("opacity","0.2");
                    }
                    else{
                        this.$().show(1000);
                       //this.$().css("display", "inline-block");
                    }
                    if(this.getClick())
                        this.$().off("click");
                    else
                        this.$().click(function(){
                            return false;
                        });
                    this._initThresholdPopOver();
                    try {
                        this.doProcess();
                    } catch(e) {
                        jQuery.sap.log.error("Error in doProcess() : "+ e.message);
                        this.setFailedState();
                    }
                });
            } else {
                this.logError("Empty results for evaluation Id : "+evaluationId);
            }
        },
        error : function(errorMessage) {
            this.logError(errorMessage);
        },
        context : this
    })
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype._getOtherThresholdMeasures = function() {
    var thresholds = this.EVALUATION_DATA.VALUES.results;
    var mObject = {};
    if(this.evaluationApi.getThresholdValueType() == "MEASURE") {
        thresholds.forEach(function(threshold) {
            var sMeasureColumn = threshold.COLUMN_NAME;
            if(sMeasureColumn) {
            	var tType = this.THRESHOLD_MAPPING[threshold.TYPE];
            	if(tType) {
                    mObject[tType.prop] = sMeasureColumn;
            	}
            }
        },this);
        return mObject;
    } else {
        thresholds.forEach(function(threshold) {
            var tType = this.THRESHOLD_MAPPING[threshold.TYPE];
            if(tType) {
                this[tType.prop] = threshold.FIXED;
            }
        }, this);
        return null;
    }
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype._getThresholdsValues = function(queryResult, thresholdMeasures) {
    if(thresholdMeasures) {
        for(var each in thresholdMeasures) {
            this[each] = queryResult[thresholdMeasures[each]];
        }
    }
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype._fetchKpiValue = function(sCallback) {
    if(this.getKpiValueRequired()) {
        var kpiMeasure = this.evaluationApi.getKpiMeasureName();
        var thresholdMeasures = this._getOtherThresholdMeasures();
        var kpiMeasures = [kpiMeasure];
        if(thresholdMeasures) {
            kpiMeasures.push(this.evaluationApi.getKpiMeasureName());
            for(var each in thresholdMeasures) {
                kpiMeasures.push(thresholdMeasures[each]);
            }
        }
        var uom = this.UOM_PROPERTY_MAPPING[kpiMeasure];
        var urlFilters = this.getUrlFilters();
        var evaluationFilters = this.evaluationApi.getFilters()["results"];
        var oQueryUri = sap.suite.smartbusiness.odata.getUri({
            serviceUri : this._addSystemAliasToUri(this.evaluationApi.getODataUrl(), this.getSapSystem()),
            entitySet : this.evaluationApi.getEntitySet(),
            measure : kpiMeasures,
            dimension : null,
            filter : this.getAllFilters()
        });
        var oThis = this;
        var evaluationId = this.getEvaluationId();
        if(this.isAssociatedKpi()) {
            evaluationId  = this.getAssociationEvaluationId();
        }
        this.Fetch_Kpi_Value_Success = function(data) {
                if(data && data.results.length) {
                    var results = data.results[0];
                    oThis.KPI_VALUE = results[kpiMeasure];
                    oThis.UOM = "";
                    if(uom) {
                        oThis.UOM = results[uom];
                    }
                    oThis._getThresholdsValues(results, thresholdMeasures);
                    // entering data into cache
                    sap.suite.smartbusiness.cache.setKpiDetailsById(evaluationId,data);
                    // removing from current_calls 
                  
                    if(sap.suite.smartbusiness.cache.current_calls[evaluationId]) {
                        var x = sap.suite.smartbusiness.cache.current_calls[evaluationId];
                        delete sap.suite.smartbusiness.cache.current_calls[evaluationId];
                        x.resolve();
                        
                    }
                    sCallback.call(oThis);
                    
                } else {
                    oThis.logError("Empty results fetching KPi Value : "+oQueryUri.uri);
                }
            };
        this.Fetch_Kpi_Value_Fail = function(errObject) {
            if(sap.suite.smartbusiness.cache.current_calls[evaluationId]){
                sap.suite.smartbusiness.cache.current_calls[evaluationId].reject();
            }
            oThis.logError("Error Fetching Kpi Value : "+oQueryUri.uri);
        };
        var fromCache = sap.suite.smartbusiness.cache.getKpiDetailsById(evaluationId);
        //checking if data exists in cache or not
        if(fromCache) {
            this.Fetch_Kpi_Value_Success(fromCache);
        }
        //if the call is currently in progress
        else if(sap.suite.smartbusiness.cache.current_calls[evaluationId]){
            jQuery.when(sap.suite.smartbusiness.cache.current_calls[evaluationId]).then(function() {
                var data = sap.suite.smartbusiness.cache.getKpiDetailsById(evaluationId);
                oThis.Fetch_Kpi_Value_Success(data);
            },function(errorMessage){oThis.logError(errorMessage)});
        }
        else {
            sap.suite.smartbusiness.cache.current_calls[evaluationId] = jQuery.Deferred();
            this.OData_Call_Ref_Fetch_Kpi_Value = oQueryUri.model.read(oQueryUri.uri, null, null, true, this.Fetch_Kpi_Value_Success,this.Fetch_Kpi_Value_Fail);
        }
    } else {
        sCallback.call(this, null);
    }
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.getAllFilters = function() {
   //return this.getUrlFilters().concat(this.evaluationApi.getFilters()["results"]);
   var ret = [].concat(this.evaluationApi.getFilters()["results"]);
   if(this.getAdditionalFilters())
       return ret.concat(this.getAdditionalFilters());
   return ret;
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.getUrlFilters = function() {
    var params = sap.suite.smartbusiness.url.hash.getApplicationParameters(["viewId"]/*Excludes array keys*/);
    var urlFilters = [];
    for (var key in params) {
        var aFilterValues = params[key];
        if(aFilterValues && aFilterValues.length) {
            aFilterValues.forEach(function(sFilterValue) {
                var Obj = {};
                Obj["NAME"] = key;
                Obj["OPERATOR"] = "EQ";
                Obj["VALUE_1"] = sFilterValue;
                Obj["VALUE_2"] = "";
                Obj["TYPE"] = "FI";
                urlFilters.push(Obj);
            });
        }
    }
    return urlFilters;
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.onAfterRendering = function () {
    try {
        if(this.getMode() == sap.suite.ui.smartbusiness.tiles.Generic.Mode.RUNTIME) {
            this.renderTile();
        } else {
            this.doDummyProcess();
        }
    } catch(e) {
        jQuery.sap.log.error(e);
        this.setFailedState();
    }
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.numberOfLeadingZeros = function(num) {
    num = String(num);
    var count = 0;
    var decimal_index = num.indexOf('.');
    if (decimal_index == -1) return 0;
    if(Number(num.split('.')[0]) != 0)
        return 0;
    var i = decimal_index + 1;
    while(num[i++] == '0') {
        ++count;
    }
    return count;
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.formatValue = function(value, scalingFactor, MAX_LEN) {
    MAX_LEN= MAX_LEN || 4;
    var unit={3:"K",6:"M",9:"B",12:"T",0:""};
    unit["-3"] = "m";
    unit["-6"] = "u";
    unit["-9"] = "n";
    unit["-12"] = "t";
    unit["-2"] = "%";
    var temp,pre,suff;
    temp=Number(value).toPrecision(MAX_LEN);
    var zeroes = this.numberOfLeadingZeros(temp);
    if(zeroes > 0 && scalingFactor < 0){
        pre = temp*Math.pow(10,zeroes+MAX_LEN);
        suff = -(zeroes+MAX_LEN);
    }
    else
    {
        pre=Number(temp.split("e")[0]);
        suff=Number(temp.split("e")[1])||0;
    }
    if(!value && value!=0)
        return {value:"",unitPrefix:""};
        if(scalingFactor>=0)
        {
            if(suff%3!=0){
                if(suff%3==2){
                    if(suff+1==scalingFactor){
                        suff=suff+1;
                        pre=pre/10;
                    }
                    else{
                        suff=suff-2;
                        pre=pre*100;
                    }
                }
                else{
                    if(suff+2==scalingFactor){
                        suff=suff+2;
                        pre=pre/100;
                    }
                    else{
                        suff--;
                        pre=pre*10;
                    }
                }
            }


            else if(suff==15){
                pre=pre*1000;
                suff=12;
            }
        }
        // for negative scale factor and suff
        else{
        	if (scalingFactor=="-2"){
        		var x = this.formatValue((value*100),0);
            }
            else if (suff>=0 && value<10 && scalingFactor=="-3"){
                pre = value*Math.pow(10,3);
                suff = -3;
            }
            else if(suff>=0)
                return this.formatValue(value,0);

            else{
                suff = Math.abs(suff);
                scalingFactor = Math.abs(scalingFactor);
                if(scalingFactor > suff){
                    pre = pre/(Math.pow(10,suff%3));
                    suff = suff - (suff%3);
                }
                else{
                    var diff = suff - scalingFactor;
                    pre = pre/(Math.pow(10,diff));
                    suff  = suff - diff;
                }
                suff = 0-suff;
            }

        }
        // ending of neg scale factor
        pre+="";
        if(scalingFactor=="-2"){
            var valstr = (x.unitPrefix == "") ? Number(x.value+"").toFixed(4 - (x.value+"").indexOf('.')) : Number(x.value+"").toFixed(3 - (x.value+"").indexOf('.')) ;
            return {value:Number(valstr),unitPrefix:(x.unitPrefix)+unit[-2]};
        }
        pre = Number(pre).toFixed(4 - pre.indexOf('.'));
        return {value:Number(pre),unitPrefix:unit[suff]};
   
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.formatOdataObjectToString = function (value){
    if(value && value.constructor == Object){
        if(value.__edmType=="Edm.Time"){
            var milliseconds = value.ms;
            var seconds = Math.floor((milliseconds / 1000) % 60 );
            var minutes = Math.floor((milliseconds / 60000) % 60);
            var hours   = Math.floor((milliseconds / 3600000) % 24);
            return hours+"H"+minutes+"M"+seconds+"S";
        }
    }
    return value;
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.getScalingFactorMapping = function() {
    return this._oScalingFactor;
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.isAssociatedKpi = function(){
    if(this.getAssociationEvaluationId() && (this.getAssociationEvaluationId() !== this.getEvaluationId())){
        return true;
    }
    return false;
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.getTileControl = function() {
    return this.getAggregation("_tile");
};  
sap.suite.ui.smartbusiness.tiles.Generic.prototype.setFailedState = function() {
	if(this.getTileControl().setState) {
	    this.getTileControl().setState(sap.suite.ui.commons.LoadState.Failed);
	}
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.setLoadingState = function() {
	if(this.getTileControl().setState) {
		this.getTileControl().setState(sap.suite.ui.commons.LoadState.Loading);
	}
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.setDoneState = function() {
	if(this.getTileControl().setState) {
		this.getTileControl().setState(sap.suite.ui.commons.LoadState.Loaded);
	}
};

sap.suite.ui.smartbusiness.tiles.Generic.prototype.logError = function(errorMessage) {
    jQuery.sap.log.error(errorMessage);
    this.setFailedState();
};  
sap.suite.ui.smartbusiness.tiles.Generic.prototype.abortODataCalls = function() {
    var _abort = function(ref) {
        if(ref) {
            ref.abort();
        }
    };
    _abort(this.comparisionChartODataRef);
    _abort(this.OData_Call_Ref_Fetch_Kpi_Value);
    _abort(this.areaChartODataRef);
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.onExit = function() {
    this.abortODataCalls();
};

/**
 * Dummy Department Below
 */

sap.suite.ui.smartbusiness.tiles.Generic.prototype.getDummyDataForNumericTile = function() {
    var data = {  
        subheader : "Expenses by Region",
        header : "Comparative Annual Totals",
        footerNum : "",
        footerComp : "",
        scale: "M",
        unit: "EUR",
        value: "10.34",
        size:"Auto",
        color:"Good",
    };
    return this._cleanUpDummyData(data);
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.getDummyDataForBulletTile = function() {
    var data =  {
        subheader : "Lorem Epsom" ,
        header : "Lorem Epsom" ,
        footerNum : "",
        footerComp : "Compare across regions",
        frameType:"OneByOne",
        scale: "M",
        actual: { value: 120, color: sap.suite.ui.commons.InfoTileValueColor.Good},
        targetValue: 100,
        thresholds: [
                     { value: 0, color: sap.suite.ui.commons.InfoTileValueColor.Error },
                     { value: 50, color: sap.suite.ui.commons.InfoTileValueColor.Critical },
                     { value: 150, color: sap.suite.ui.commons.InfoTileValueColor.Critical },
                     { value: 200, color: sap.suite.ui.commons.InfoTileValueColor.Error }
                     ],
                     showActualValue: true,
                     showTargetValue: true
    };
    return this._cleanUpDummyData(data);
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.getDummyDataForComparisonTile = function(){
    var data = {
        subheader : "Expenses By Region",
        header : "Comparative Anual Totals",
        footerNum : "",
        footerComp : "Compare across regions",
        scale: "MM",
        unit: "EUR",
        value: 8888,
        data: [
               { title: "Americas", value: 10},
               { title: "EMEA", value: 50},
               { title: "APAC", value: -20}
               ],
    };
    return this._cleanUpDummyData(data);
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.getDummyDataForMeasureComparisonTile = function(){
    var data = {
        subheader : "Lorem Epsom",
        header : "Lorem Epsom",
        footerNum : "",
        footerComp : "Compare across regions",
        scale: "M",
        unit: "EUR",
        value: 8888,
        data: [
               { title: "Measure 1", value: 50, color: "Good" },
               { title: "Measure 2", value: -20, color: "Error" },
               { title: "Measure 3", value: 10, color: "Critical" }
               ],
    };
    return this._cleanUpDummyData(data);
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.getDummyDataForAreaChartTile = function(){
    var data = {
        subheader: "Expenses By Region",
        header: "Comparative Anual Totals",
        footerNum: "",
        footerComp: "Compare across regions",
        scale: "MM",
        unit: "EUR",
        value: 8888,
        size: "S",
        frameType: "OneByOne",
        state: sap.suite.ui.commons.LoadState.Loaded,
        title: "US Profit Margin",
        footer: "Current Quarter",
        description: "Maximum deviation",
        width: "100%",
        height: "100%",
        chart: {
            color: "Good",
            data: [{
                day: 0,
                balance: 0
            }, {
                day: 30,
                balance: 20
            }, {
                day: 60,
                balance: 20
            }, {
                day: 100,
                balance: 80
            }]
        },
        target: {
            color: "Error",
            data: [{
                day: 0,
                balance: 0
            }, {
                day: 30,
                balance: 30
            }, {
                day: 60,
                balance: 40
            }, {
                day: 100,
                balance: 90
            }]
        },
        maxThreshold: {
            color: "Good",
            data: [{
                day: 0,
                balance: 0
            }, {
                day: 30,
                balance: 40
            }, {
                day: 60,
                balance: 50
            }, {
                day: 100,
                balance: 100
            }]
        },
        innerMaxThreshold: {
            color: "Error",
            data: []
        },
        innerMinThreshold: {
            color: "Neutral",
            data: []
        },
        minThreshold: {
            color: "Error",
            data: [{
                day: 0,
                balance: 0
            }, {
                day: 30,
                balance: 20
            }, {
                day: 60,
                balance: 30
            }, {
                day: 100,
                balance: 70
            }, ]
        },
        minXValue: 0,
        maxXValue: 100,
        minYValue: 0,
        maxYValue: 100,
        firstXLabel: {
            label: "June 123",
            color: "Error"
        },
        lastXLabel: {
            label: "June 30",
            color: "Error"
        },
        firstYLabel: {
            label: "0M",
            color: "Good"
        },
        lastYLabel: {
            label: "80M",
            color: "Critical"
        },
        minLabel: {},
        maxLabel: {}
    };
    return this._cleanUpDummyData(data);
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype._cleanUpDummyData = function(data) {
    /*
    if(!this.isAssociatedKpi()) {
        data.header = "";
        data.subheader = "";
    }*/
    data.header = this.getHeader() || "Lorem Epsom";
    data.subheader = this.getSubheader() || "Lorem Epsom";
    return data;
};
sap.suite.ui.smartbusiness.tiles.GenericRenderer = {};
sap.suite.ui.smartbusiness.tiles.GenericRenderer.render = function(oRm, oControl) {
    oRm.write("<div");
    oRm.writeControlData(oControl);
    oRm.addClass("drilldownKpiTile");
    oRm.writeClasses();
    oRm.write(">");
    oRm.renderControl(oControl.getTileControl());
    oRm.write("</div>");
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype._closePopover = function() {
    if(this._popOver.isOpen()) {
        this._popOver.close();
    }
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype._initThresholdPopOver = function() {
    var model = new sap.ui.model.json.JSONModel(modelData);
    var modelData = {"THRESHOLDS":[]};
    var thresholdList = new sap.m.List({
    });
    thresholdList.bindItems("/THRESHOLDS", new sap.m.DisplayListItem({
        label : "{name}",
        value : "{value}"
    }));
    thresholdList.setModel(model);
    
    var thresholdVals = {} ; 
	thresholdVals.targetVal = this.TARGET_VALUE ;
	thresholdVals.critLowVal = this.CRITICAL_LOW_VALUE ;
	thresholdVals.warnLowVal = this.WARNING_LOW_VALUE ;
	thresholdVals.critHighVal = this.CRITICAL_HIGH_VALUE ;
	thresholdVals.warnHighVal = this.WARNING_HIGH_VALUE ;
	
    if(this.evaluationApi.getScaling() == -2) {    	
//    	if(this.evaluationApi.getThresholdValueType() == "FIXED") {
//    		for(var each in thresholdVals) {
//    			if(thresholdVals[each])
//    				thresholdVals[each] = thresholdVals[each] + " %" ;
//    		}
//    	} else if(this.evaluationApi.getThresholdValueType() == "MEASURE") {
//    		for(var each in thresholdVals) {
//    			if(thresholdVals[each]) {
//    				var otemp = this.formatValue(thresholdVals[each], "-2") ;
//    				thresholdVals[each] = otemp.value + otemp.unitPrefix ;
//    			}    				
//    		}
//    	}
    	for(var each in thresholdVals) {
			if(thresholdVals[each]) {
				//var otemp = sap.suite.smartbusiness.utils.getLocaleFormattedValue((thresholdVals[each]*100), -2);
				thresholdVals[each] = (thresholdVals[each]*100) + " %" ;
			}    				
		}
    } 
    
    if(this.evaluationApi.isMaximizingKpi()) {
        modelData.THRESHOLDS.push({
            name : this.getModel("i18n").getProperty("TARGET_LABEL"),
            value : thresholdVals.targetVal
        });
        modelData.THRESHOLDS.push({
            name : this.getModel("i18n").getProperty("WARNING_LOW_LABEL"),
            value : thresholdVals.warnLowVal
        });
        modelData.THRESHOLDS.push({
            name : this.getModel("i18n").getProperty("CRITICAL_LOW_LABEL"),
            value : thresholdVals.critLowVal
        });
    } else if(this.evaluationApi.isMinimizingKpi()) {
        modelData.THRESHOLDS.push({
            name : this.getModel("i18n").getProperty("CRITICAL_HIGH_LABEL"),
            value : thresholdVals.critHighVal
        });
        modelData.THRESHOLDS.push({
            name : this.getModel("i18n").getProperty("WARNING_HIGH_LABEL"),
            value : thresholdVals.warnHighVal
        });
        modelData.THRESHOLDS.push({
            name : this.getModel("i18n").getProperty("TARGET_LABEL"),
            value : thresholdVals.targetVal
        });
    } else if(this.evaluationApi.isTargetKpi()) {
        modelData.THRESHOLDS.push({
            name : this.getModel("i18n").getProperty("CRITICAL_HIGH_LABEL"),
            value : thresholdVals.critHighVal
        });
        modelData.THRESHOLDS.push({
            name : this.getModel("i18n").getProperty("WARNING_HIGH_LABEL"),
            value : thresholdVals.warnHighVal
        });
        modelData.THRESHOLDS.push({
            name : this.getModel("i18n").getProperty("TARGET_LABEL"),
            value : thresholdVals.targetVal
        });
        modelData.THRESHOLDS.push({
            name : this.getModel("i18n").getProperty("WARNING_LOW_LABEL"),
            value : thresholdVals.warnLowVal
        });
        modelData.THRESHOLDS.push({
            name : this.getModel("i18n").getProperty("CRITICAL_LOW_LABEL"),
            value : thresholdVals.critLowVal
        });
    }
    
    model.setData(modelData);
    var oCustomHeader = new sap.m.Bar({
        contentMiddle:[ new sap.m.Label({
            text:this.getModel("i18n").getProperty("THRESHOLD_LABEL")
        })],
        contentRight:(jQuery.device.is.phone) ? [] :
            [new sap.m.Button({
                icon:"sap-icon://decline",
                width : "2.375rem",
                press:jQuery.proxy(this._closePopover, this)
            })]
    });
    this._popOver = new sap.m.ResponsivePopover({
        modal:false,
        enableScrolling:true,
        verticalScrolling:true,
        horizontalScrolling:false,
        placement:sap.m.PlacementType.Auto,
        contentWidth:"18rem",
        customHeader:oCustomHeader,
        content:[thresholdList]
    });
    var oStaticArea = sap.ui.getCore().getUIArea(sap.ui.getCore().getStaticAreaRef());
    oStaticArea.addContent(this._popOver, true);
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.showThresholds = function(){
    this._popOver.openBy(this);
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.tilePressed = function() {
    if(!this.isAssociatedKpi() && this.getMode() == sap.suite.ui.smartbusiness.tiles.Generic.Mode.RUNTIME) {
        if(this.getTileType()=="NT" || this.getTileType() == "AT") {
            this.showThresholds();
         }
    }
    //tiles should navigate to the drilldown of associated evaluations
    else if(this.isAssociatedKpi() && this.getMode() == sap.suite.ui.smartbusiness.tiles.Generic.Mode.RUNTIME) {
    	var startupParam = sap.suite.smartbusiness.url.hash.getStartupParameters();
    	var appParam = sap.suite.smartbusiness.url.hash.getApplicationParameters(["viewId"]);
    	startupParam["evaluationId"] = [];
    	var evalId = this.getAssociationEvaluationId();
    	startupParam.evaluationId.push(evalId);
    	sap.suite.smartbusiness.url.hash.setApplicationParameters(appParam, false);
    	sap.suite.smartbusiness.url.hash.setStartupParameters(startupParam, false);
    	var configuration = sap.suite.smartbusiness.drilldown.getConfigurationFromCache(evalId);
    	try {
        	if(configuration) {
        		configurationApi = sap.suite.smartbusiness.drilldown.parse(evalId, configuration);
        		if(configurationApi) {
        			var defaultView =  configurationApi.getDefaultView();
        			if(defaultView) {
        				var viewId = defaultView.getId();
        				if(viewId) {
        					sap.suite.smartbusiness.url.hash.updateApplicationParameters({"viewId" : [viewId]}, false);
        				}
        			}
        		}
        	}
    	} catch(e) {
    		//Just to handle Exception
    	}
    	sap.suite.smartbusiness.url.hash.updateHash();
    }
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.hasSomeValue = function() {
    var flag = true;
    if(arguments.length) {
        for(var i=0, l=arguments.length; i< l; i++) {
            if(arguments[i] || arguments[i] == "0") {
            } else {
                flag = false;
                break;
            }
        }
    } else {
        flag = false;
    }
    return flag;
};


}; // end of sap/suite/ui/smartbusiness/tiles/Generic.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.tiles.MeasureComparison') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.tiles.MeasureComparison");

sap.suite.ui.smartbusiness.tiles.Generic.extend("sap.suite.ui.smartbusiness.tiles.MeasureComparison", {
    metadata : {
        properties : {
            kpiValueRequired : {
                type : "boolean",
                defaultValue : false
            },
            tileType : {
                type : "string",
                defaultValue : "CM"
            }
        }
    },
    renderer : {} //No need to write Anything
});

sap.suite.ui.smartbusiness.tiles.MeasureComparison.prototype.init = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.init.apply(this);
    this._bShowUOM = false;
    this._bUseFormattedVDMValue = false;
    this._bShowKpiMeasureUOMInFooter = false;
    this._bHasKpiMeasure = null;
    this.setAggregation("_tile", new sap.suite.ui.commons.GenericTile({
        header  :"{/header}",
        subheader  : "{/subheader}",
        size : this.getSize(),
        frameType : this.getFrameType(),
        tileContent : new sap.suite.ui.commons.TileContent({
            unit : "{/unit}",
            size: this.getSize(),
            footer : "{/footerNum}",
            content: new sap.suite.ui.commons.ComparisonChart({
                scale : "{/scale}",
                size: this.getSize(),
                state: "{/state}",
                data: {
                    template: new sap.suite.ui.commons.ComparisonData({
                        title: "{title}",
                        value : "{value}",
                        color: "{color}",
                        displayValue : "{displayValue}"
                    }),
                    path: "/data"
                }
            })
        }),
        press: jQuery.proxy(this.tilePressed, this)
    }));
    this.jsonModel = new sap.ui.model.json.JSONModel();
    this.setModel(this.jsonModel);
};
sap.suite.ui.smartbusiness.tiles.MeasureComparison.prototype.onBeforeRendering = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.onBeforeRendering.apply(this);
    if(this.getContentOnly()) {
        this.setAggregation("_tile", new sap.suite.ui.commons.ComparisonChart({
            scale : "{/scale}",
            size: this.getSize(),
            state: "{/state}",
            data: {
                template: new sap.suite.ui.commons.ComparisonData({
                    title: "{title}",
                    value : "{value}",
                    color: "{color}",
                    displayValue : "{displayValue}"
                }),
                path: "/data"
            }
        }));
    }
};

sap.suite.ui.smartbusiness.tiles.MeasureComparison.prototype.doProcess = function() {
    var that = this;
    this._fetchDataForMeasureComparisonTile(function(comparisionData) {
        var jsonData={};
        this._processedComparisionData = this._processMeasureComparisionData(comparisionData);
        jsonData.data = this._processedComparisionData;
        if(true || that.isAssociatedKpi()) {
        	jsonData.subheader= this.evaluationApi.getTitle();
        	jsonData.header= this.evaluationApi.getKpiName();
        }
        if(this._bShowKpiMeasureUOMInFooter && this._bHasKpiMeasure) {
        	var kpiMeasureUOMProperty = this.UOM_PROPERTY_MAPPING[this.evaluationApi.getKpiMeasureName()];
        	if(kpiMeasureUOMProperty) {
        		jsonData.unit = comparisionData[kpiMeasureUOMProperty];
        	}
        }
        that.jsonModel.setData(jsonData);
        that.setDoneState();
    }, this.logError);
};

sap.suite.ui.smartbusiness.tiles.MeasureComparison.prototype._fetchDataForMeasureComparisonTile = function(fnSuccess,fnError){
    var that = this;
    var _getAllMeasures  = function(tileConfiguration) {
    	var measures = [];
    	if(tileConfiguration && tileConfiguration.MEASURES && tileConfiguration.MEASURES.length) {
    		var configMeasures = tileConfiguration.MEASURES;
    		for(var i=0, l=configMeasures.length; i < l;i++) {
    			measures.push(configMeasures[i].name);
    		}
    	}
    	if(measures.length) {
        	return measures;
    	} else {
    		throw new Error("No Measures Defined for Measure Comparision Tile");
    	}
    };
    /* Preparing arguments for the prepareQueryServiceUri function */
    var oParam = {};
    oParam.serviceUri = this._addSystemAliasToUri(this.evaluationApi.getODataUrl(), this.getSapSystem());
    oParam.entitySet = this.evaluationApi.getEntitySet();
    oParam.measure = _getAllMeasures(this.getTileConfiguration());
    if(oParam.measure.indexOf(this.evaluationApi.getKpiMeasureName()) > -1) {
    	this._bHasKpiMeasure = true;
    }
    oParam.filter = this.getAllFilters();
    var finalQuery = sap.suite.smartbusiness.odata.getUri(oParam);
    this.comparisionChartODataRef = finalQuery.model.read(finalQuery.uri, null, null, true, function(data) {
        if(data && data.results && data.results.length) {
            fnSuccess.call(that,data.results[0]);
        } else {
            fnError.call(that,"no Response from QueryServiceUri");
        }
    },function(eObject) {
        if(eObject && eObject.response) {
            jQuery.sap.log.error(eObject.message +" : "+eObject.request.requestUri);
        }
    });
};
sap.suite.ui.smartbusiness.tiles.MeasureComparison.prototype._processMeasureComparisionData = function(rawComparisionData) {
	var processedData = [],formattedValue, VDMFormattedProperty,UOM,measureTile, measureName,i, measures, obj;
	measures = this.getTileConfiguration().MEASURES;
	for(i=0, l=measures.length; i < l; i++) {
		obj = {};
		measureName = measures[i].name;
		measureTile = this.LABEL_PROPERTY_MAPPING[measureName];
		obj["title"] = measureTile;
		
		UOM = this.UOM_PROPERTY_MAPPING[measureName];
		VDMFormattedProperty = this.TEXT_PROPERTY_MAPPING[measureName];
		if(this._bUseFormattedVDMValue && VDMFormattedProperty && (VDMFormattedProperty != measureName)) {
			formattedValue = rawComparisionData[VDMFormattedProperty];
		} else {
	        formattedValue = sap.suite.smartbusiness.utils.getLocaleFormattedValue(Number(rawComparisionData[measureName]));
		}
        obj.value = Number(rawComparisionData[measureName]); 
        obj.displayValue = "" + formattedValue;
        if(this._bShowUOM && UOM) {
        	obj.displayValue += " " + rawComparisionData[UOM];
        }
        obj.color = measures[i].color;
        processedData.push(obj);
	}
	return processedData;
};
sap.suite.ui.smartbusiness.tiles.MeasureComparison.prototype.doDummyProcess = function() {
    this.jsonModel.setData(this.getDummyDataForMeasureComparisonTile());
};



}; // end of sap/suite/ui/smartbusiness/tiles/MeasureComparison.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.tiles.Numeric') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.tiles.Numeric");

sap.suite.ui.smartbusiness.tiles.Generic.extend("sap.suite.ui.smartbusiness.tiles.Numeric", {
    metadata : {
        properties : {
            kpiValueRequired : {
                type : "boolean",
                defaultValue : true//For Comparision Tile, this can be set as false
            },
            tileType : {
                type : "string",
                defaultValue : "NT" //All Tiles Should define their type "Numeric/Bullet/Comparison/AreaChart"
            }
        }
    },
    renderer : {} //No need to write Anything
});

sap.suite.ui.smartbusiness.tiles.Numeric.prototype.init = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.init.apply(this);
    
    //Write Init Code Here
    
    //Tiles will be always in Full/Complete Mode
    this.setAggregation("_tile", new sap.suite.ui.commons.GenericTile({
        header  :"{/header}",
        subheader  : "{/subheader}",
        size : this.getSize(),
        frameType : this.getFrameType(),
        tileContent : new sap.suite.ui.commons.TileContent({
            unit : "{/unit}",
            size: this.getSize(),
            footer : "{/footerNum}",
            content: new sap.suite.ui.commons.NumericContent({
                value : "{/value}",
                scale : "{/scale}",
                unit : "{/unit}",
                indicator : "{/indicator}",
                valueColor: "{/valueColor}",
                size: this.getSize(),
                state: "{/state}",
                formatterValue : "{/formatterValue}",
                truncateValueTo : 6,
                nullifyValue : false
            })
        }),
        press: jQuery.proxy(this.tilePressed, this)        
    }));
    this.jsonModel = new sap.ui.model.json.JSONModel();
    this.setModel(this.jsonModel);
};
sap.suite.ui.smartbusiness.tiles.Numeric.prototype.onBeforeRendering = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.onBeforeRendering.apply(this);
    //Write onBeforeRendering Code Here
    
    //Override fulltile to only COntent
    if(this.getContentOnly()) {
        this.setAggregation("_tile", new sap.suite.ui.commons.NumericContent({
            value : "{/value}",
            scale : "{/scale}",
            unit : "{/unit}",
            indicator : "{/indicator}",
            valueColor: "{/valueColor}",
            size: this.getSize(),
            state: "{/state}",
            formatterValue : true,
            truncateValueTo : 6,
        }));
    }
    
    //Later Just Update the Model Data
    
};
/*
 * All Tiles must implement this methods.. This method is called once parent controls finishes loading Evaluation Details and 
 * Kpi Value(if required)
 * 
 * Don't enclose your any code in try/Catch. Parent Control is already doing it.
 * In other words, Do not handle any exception
 */
sap.suite.ui.smartbusiness.tiles.Numeric.prototype.doProcess = function() {
    /**
     * PROPERTIES AVAILABLE which can be accessed in this Method
     * 
     * 
     * this.EVALUATION_ID
     * this.EVALUATION_DATA //Evaluation-Data
     * this.KPI_VALUE
     * this.UOM //if present else empty string
     * this.WARNING_LOW_VALUE
     * this.WARNING_HIGH_VALUE,
     * this.CRITICAL_LOW_VALUE
     * this.CRITICAL_HIGH_VALUE
     * this.TARGET_VALUE
     * this.TREND_VALUE
     * this.LABEL_PROPERTY_MAPPING //Object with key as Original Dimension/Measure and value as Dimension/Measure Label
     * this.TEXT_PROPERTY_MAPPING //
     * this.UOM_PROPERTY_MAPPING //
     * this.getScalingFactorMapping() //{"0":"","3" : "Kilo" ......}
     * this.getTileControl() //returns the Aggregation _tile reference
     * 
     * to Check if current kpi is associated call
     * this.isAssociatedKpi()
     * 
     * Note* : All the thresholds values at this point will be ABSOLUTE VALUE. So you don't need to check, whether its FIXED or MEASURE
     * Use these value blindly (But react on NULL)
     */
		
		var numericTileObj={};
		numericTileObj.valueColor = this._applyTrendColor();
		numericTileObj.indicator = this._applyTrendIndicator();
		numericTileObj.frameType = this.getFrameType();
		numericTileObj.unit = this.UOM;
		var oScaledValue = "";
        var calculatedValueForScaling = this.KPI_VALUE;
        if(this.EVALUATION_DATA.SCALING == -2){
            calculatedValueForScaling *= 100;
            numericTileObj.formatterValue = false;
        }
		var formatValue = sap.suite.smartbusiness.utils.getLocaleFormattedValue(calculatedValueForScaling, this.EVALUATION_DATA.SCALING);
		if(this.EVALUATION_DATA.SCALING == -2) 
		    numericTileObj.scale = "%"
		numericTileObj.value = formatValue.toString();
		if(true || this.isAssociatedKpi()){
			numericTileObj.header = this.EVALUATION_DATA.INDICATOR_TITLE;
			numericTileObj.subheader = this.EVALUATION_DATA.TITLE;
		}
		this.jsonModel.setData(numericTileObj);
		this.jsonModel.updateBindings();
		this.setDoneState();
				
	
};

/**
 * This method is called if tile is runing in DUMMY Mode
 */
sap.suite.ui.smartbusiness.tiles.Numeric.prototype.doDummyProcess = function() {
    /*
     * this.getDummyDataForNumericTile();
     * this.getDummyDataForBulletTile();
     * this.getDummyDataForAreaChartTile();
     * this.getDummyDataForComparisonTile();
     * 
     * and bind with Control
     */
    this.jsonModel.setData(this.getDummyDataForNumericTile());
};

sap.suite.ui.smartbusiness.tiles.Numeric.prototype._applyTrendColor = function() {
	
	var returnColor = null;
	var wL = window.parseFloat(this.WARNING_LOW_VALUE);
	var cL = window.parseFloat(this.CRITICAL_LOW_VALUE);
	var cH = window.parseFloat(this.CRITICAL_HIGH_VALUE);
	var wH = window.parseFloat(this.WARNING_HIGH_VALUE);
	var improvementDirection = this.EVALUATION_DATA.GOAL_TYPE;
    if(this.evaluationApi.isMinimizingKpi()) {
        if(this.hasSomeValue(cH, wH)) {
            if(this.KPI_VALUE < wH) {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
            } else if(this.KPI_VALUE <= cH) {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
            } else {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
            }
        }

    } else if(this.evaluationApi.isMaximizingKpi()) {
        if(this.hasSomeValue(cL, wL)) {
            if(this.KPI_VALUE < cL) {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
            } else if(this.KPI_VALUE <= wL) {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
            } else {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
            }
        }
    } else {
        if(this.hasSomeValue(wL, wH, cL, cH)) {
            if(this.KPI_VALUE < cL || this.KPI_VALUE > cH) {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
            } else if((this.KPI_VALUE >= cL && this.KPI_VALUE <= wL) || 
                    (this.KPI_VALUE >= wH && this.KPI_VALUE <= cH)
            ) {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
            } else {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
            }
        }
    }
    return returnColor;
};

sap.suite.ui.smartbusiness.tiles.Numeric.prototype._applyTrendIndicator = function() {
	
	var trendIndicator = sap.suite.ui.commons.DeviationIndicator.None;
	if(this.TREND_VALUE || this.TREND_VALUE == "0") {
	    if(this.TREND_VALUE > this.KPI_VALUE){
	        trendIndicator = sap.suite.ui.commons.DeviationIndicator.Down;
	    }
	    else if(this.TREND_VALUE < this.KPI_VALUE){
	        trendIndicator = sap.suite.ui.commons.DeviationIndicator.Up;
	    }
	}
	return trendIndicator;
}



}; // end of sap/suite/ui/smartbusiness/tiles/Numeric.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.drilldown.view.configureNewView.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.drilldown.view.configureNewView.controller');
jQuery.sap.require('sap.ca.scfld.md.controller.ScfldMasterController'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained

sap.ca.scfld.md.controller.ScfldMasterController.extend("sap.suite.ui.smartbusiness.designtime.drilldown.view.configureNewView",{
	onInit:function(){
		this.DDA_MODEL = null;
		this.evaluationId = null;
		this.measureDimensionList=this.byId(sap.ui.core.Fragment.createId('measureDimensionsList','measureDimensionsList'));
		this._oDimensionList=sap.ui.xmlfragment("sap.suite.ui.smartbusiness.designtime.drilldown.view.list",this);
		this._oMeasureList=sap.ui.xmlfragment("sap.suite.ui.smartbusiness.designtime.drilldown.view.list",this);

		try{
			if(sap.ui.core.Fragment.byId("measureDimensionDialog","measureDimensionDialog")){
				sap.ui.core.Fragment.byId("measureDimensionDialog","measureDimensionDialog").destroy();
			} 
			if(sap.ui.core.Fragment.byId("thresholdDialog","dialogRef")){
				sap.ui.core.Fragment.byId("thresholdDialog","dialogRef").destroy();
			}
			if(sap.ui.core.Fragment.byId("editDialog","editDialog")){
				sap.ui.core.Fragment.byId("editDialog","editDialog").destroy();
			}
			if(sap.ui.core.Fragment.byId("dualAxisConfig","dualAxisConfig")){
				sap.ui.core.Fragment.byId("dualAxisConfig","dualAxisConfig").destroy();
			}
			if(sap.ui.core.Fragment.byId("msrDialogForStack1","stack1SelectDialog")){
				sap.ui.core.Fragment.byId("msrDialogForStack1","stack1SelectDialog").destroy();
			}
			if( sap.ui.core.Fragment.byId("additionalLanguageDialog","additionalLanguageDialog")){
				sap.ui.core.Fragment.byId("additionalLanguageDialog","additionalLanguageDialog").destroy();
			}
			if( sap.ui.core.Fragment.byId("chartTypeConfig","chartTypeConfig")){
				sap.ui.core.Fragment.byId("chartTypeConfig","chartTypeConfig").getParent().destroy();
			}

		}catch(e){};
		this._oShowMeasureDialog = sap.ui.xmlfragment("measureDimensionDialog","sap.suite.ui.smartbusiness.designtime.drilldown.view.measureDimensionDialog", this);
		this._oShowMeasureDialog.addStyleClass("dialog");
		this.addThresholdMeasureDialog=sap.ui.xmlfragment("thresholdDialog","sap.suite.ui.smartbusiness.designtime.drilldown.view.addThresholdMeasure", this);
		this._editMeasureDialog = sap.ui.xmlfragment("editDialog","sap.suite.ui.smartbusiness.designtime.drilldown.view.editDialog", this);
		this._dualAxisConfig = sap.ui.xmlfragment("dualAxisConfig","sap.suite.ui.smartbusiness.designtime.drilldown.view.dualAxisConfig", this);
		this._msrDialogForStack1 = sap.ui.xmlfragment("msrDialogForStack1","sap.suite.ui.smartbusiness.designtime.drilldown.view.msrDialogForStack1", this);
		this.AdditionalLanguagesDialog = new sap.ui.xmlfragment("additionalLanguageDialog" ,"sap.suite.ui.smartbusiness.designtime.drilldown.view.additionalLanguagesDialog", this);
		this._chartTypeConfig = sap.ui.xmlfragment("chartTypeConfig","sap.suite.ui.smartbusiness.designtime.drilldown.view.chartTypeConfig", this);         
		this.oRouter.attachRoutePatternMatched(this.onRoutePatternMatched, this);
		this.busyIndicator = new sap.m.BusyDialog();
	},
	onRoutePatternMatched:function(oEvent){
		if (oEvent.getParameter("name") === "configureChart") {

			try {

				this.evaluationId = oEvent.getParameter("arguments")["evaluationId"];
				this.currentViewId = oEvent.getParameter("arguments")["viewId"];
				this.DDA_MODEL = sap.suite.smartbusiness.ddaconfig.Model.getInstance(this.evaluationId,false,this.getView().getModel("i18n"));
				if(this.currentViewId !== "~NA~") {
					this.DDA_MODEL.setViewId(this.currentViewId);	
				}
				this.bindUiToModel();
				this.EVALUATION = sap.suite.smartbusiness.kpi.parseEvaluation(this.DDA_MODEL.EVALUATION_DATA);
				this._oModel = this.getView().getModel("SB_DDACONFIG");
				this.mProperties = sap.suite.smartbusiness.odata.properties(this._oModel.getData().QUERY_SERVICE_URI,this._oModel.getData().QUERY_ENTITY_SET);
				this.COLUMN_LABEL_MAPPING = this.mProperties.getLabelMappingObject();
				this._oTextsModel = this.getView().getModel("i18n");
				this._editMeasureDialog.setModel(this._oTextsModel,"i18n");
				this._dualAxisConfig.setModel(this._oTextsModel,"i18n");
				this._msrDialogForStack1.setModel(this._oTextsModel,"i18n");
				this._oShowMeasureDialog.setModel(this._oTextsModel,"i18n");
				this.addThresholdMeasureDialog.setModel(this._oTextsModel,"i18n");
				this.prepareInitialModelData(this._oModel);
				this.takeConfigMasterSnapShot();
				this._updateMeasureDimensionBindings();
				this.refreshChart();
				this.chartTypeInit();

			}
			catch(e) {
				sap.suite.smartbusiness.utils.showErrorMessage(this.oApplicationFacade.getResourceBundle().getText("FAILED_TO_LOAD_ODATA"), e.message);
			}
		}
	},
	displayLabelsFormatter:function(s){
		return this.COLUMN_LABEL_MAPPING[s];
	},
	bindUiToModel:function(){
		this.DDA_MODEL.bindModel(this.getView(),"SB_DDACONFIG");
		this.DDA_MODEL.bindModel(this._editMeasureDialog,"SB_DDACONFIG");
		this.DDA_MODEL.bindModel(this._editMeasureDialog);
		this.DDA_MODEL.bindModel(this._oShowMeasureDialog,"SB_DDACONFIG");
		this.DDA_MODEL.bindModel(this._oShowMeasureDialog);
		this.DDA_MODEL.bindModel(this.addThresholdMeasureDialog,"SB_DDACONFIG");
		this.DDA_MODEL.bindModel(this.AdditionalLanguagesDialog,"SB_DDACONFIG");
	},
	_cloneObj:function(ele){
		var tmp;
		if(ele instanceof Array){
			tmp=[];
			for(var i=0;i<ele.length;i++){
				tmp[i]=this._cloneObj(ele[i]);
			}
		}else if(ele instanceof Object){
			tmp={};
			for(var each in ele){
				if(ele.hasOwnProperty(each)){
					tmp[each]=this._cloneObj(ele[each]);  
				}
			}
		}else{
			tmp=ele;
		}
		return tmp;
	},
	takeConfigMasterSnapShot:function(){
		this._masterConfig=this._cloneObj(this._oModel.getData());
	},
	restoreFromConfigMasterSnapShot:function(){
		this._oModel.setData(this._masterConfig);
	},
	copyConfigSnapshot:function(){
		this._config=this._cloneObj(this._oModel.getData());
		this.enableOrDisableSave();//check for presence of atleast 1 msr or dim, disable save if nothing is selected
	},
	restorePrevConfig:function(){
		this._oModel.setData(this._config);
	},
	prepareInitialModelData:function(oModel){
		var tmpData=oModel.getData();
		var dim=tmpData.ALL_DIMENSIONS;
		var msr=tmpData.ALL_MEASURES;
		var data=[],isColumnConfigured={};
		var configuredColumns=tmpData.COLUMNS;
		for(var i=0;i<configuredColumns.length;i++){
			configuredColumns[i].SELECTED=true;
			configuredColumns[i].LABEL=this.COLUMN_LABEL_MAPPING[configuredColumns[i].NAME];
			data.push(configuredColumns[i]);
			isColumnConfigured[configuredColumns[i].NAME]=true;
		}
		for(var i=0;i<dim.length;i++){
			if(isColumnConfigured[dim[i]])
				continue;
			data.push({AXIS: 1,NAME: dim[i],SORT_BY: dim[i],SORT_ORDER: "none",STACKING: 0,
				TYPE: "DIMENSION",VISIBILITY: "BOTH",SELECTED:false,LABEL:this.COLUMN_LABEL_MAPPING[dim[i]]});
		}
		for(var i=0;i<msr.length;i++){
			if(isColumnConfigured[msr[i]])
				continue;
			data.push({0: Object,AXIS: 2,COLOR1: "",COLOR2:"",NAME: msr[i],SORT_BY: msr[i],
				SORT_ORDER: "none",STACKING: 0,TYPE: "MEASURE",VISIBILITY: "BOTH",SELECTED:false,LABEL:this.COLUMN_LABEL_MAPPING[msr[i]]
			});
		}
		tmpData.items=data;
		oModel.setData(tmpData);
	},
	_updateMeasureDimensionBindings:function(){
		var filter= new sap.ui.model.Filter("SELECTED",sap.ui.model.FilterOperator.EQ,true);
		var binding=this.measureDimensionList.getBinding("items");
		binding.filter(filter);
	},
	onChartTypeChange:function(oEvent){

		//this.copyConfigSnapshot();
		if (! this._chartTypeConfig) {
			this._chartTypeConfig = sap.ui.xmlfragment("chartTypeConfig","sap.suite.ui.smartbusiness.designtime.drilldown.view.chartTypeConfig", this);
		}
		this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartTypeConfig"));
		var chart_type = this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartType"));
//		if(chart_type.getSelectedKey().toUpperCase()!="BUBBLE")
//		this.copyConfigSnapshot();
		this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","singleDual")).setVisible((chart_type.getSelectedKey().toUpperCase()!="BUBBLE" && chart_type.getSelectedKey().toUpperCase()!="TABLE" && chart_type.getSelectedKey().toUpperCase().toUpperCase()!="LINE" && chart_type.getSelectedKey().toUpperCase()!="COMBINATION")?true:false);
		this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","isAbsolute")).setVisible((chart_type.getSelectedKey().toUpperCase()!="BUBBLE" &&  chart_type.getSelectedKey().toUpperCase()!="TABLE"&& chart_type.getSelectedKey().toUpperCase().toUpperCase()!="LINE" && chart_type.getSelectedKey().toUpperCase()!="COMBINATION")?true:false);
		this.updateSemanticColorComboBox(chart_type.getSelectedKey());
		this.refreshChart();
		this.enableOrDisableSave();
	},

	chartTypeInit:function(oEvent){

		//this.copyConfigSnapshot();
		if (! this._chartTypeConfig) {
			this._chartTypeConfig = sap.ui.xmlfragment("chartTypeConfig","sap.suite.ui.smartbusiness.designtime.drilldown.view.chartTypeConfig", this);
		}
		this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartTypeConfig"));
		var chart_type = this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartType"));
		if(chart_type.getSelectedKey().toUpperCase()!="BUBBLE")
			this.copyConfigSnapshot();
		this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","singleDual")).setVisible((chart_type.getSelectedKey().toUpperCase()!="BUBBLE" && chart_type.getSelectedKey().toUpperCase()!="TABLE" && chart_type.getSelectedKey().toUpperCase().toUpperCase()!="LINE" && chart_type.getSelectedKey().toUpperCase()!="COMBINATION")?true:false);
		this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","isAbsolute")).setVisible((chart_type.getSelectedKey().toUpperCase()!="BUBBLE" &&  chart_type.getSelectedKey().toUpperCase()!="TABLE"&& chart_type.getSelectedKey().toUpperCase().toUpperCase()!="LINE" && chart_type.getSelectedKey().toUpperCase()!="COMBINATION")?true:false);
		this.setSemanticColorComboBox(chart_type.getSelectedKey());
		this.refreshChart();
		this.enableOrDisableSave();
	},

	updateSemanticColorComboBox:function(chart_type){
		if (! this._chartTypeConfig) {

			this._chartTypeConfig = sap.ui.xmlfragment("chartTypeConfig","sap.suite.ui.smartbusiness.designtime.drilldown.view.chartTypeConfig", this);

		}
		chart_type = chart_type.toUpperCase();

		var semanticComboBox = this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors"));

		if(chart_type == "BAR" || chart_type=="COLUMN"){
			semanticComboBox.setVisible(true);
			semanticComboBox.setEnabled(true);
			semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(true);
			semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(true);
			semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(true);

			// if stacking by dimension is applied , disable manual coloring .
			if(this.isStackDim) {
				semanticComboBox.setSelectedKey("NONE");
				semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(false);
				semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(false);
				semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(false);
			}

		}else if(chart_type=="BUBBLE"){
			semanticComboBox.setSelectedKey("NONE");
			semanticComboBox.setVisible(false);

		} else if(chart_type=="TABLE"){

			semanticComboBox.setVisible(true);
			semanticComboBox.setEnabled(true);
			if(!(semanticComboBox.getSelectedKey().toUpperCase() == "NONE" || semanticComboBox.getSelectedKey().toUpperCase() == "AUTO_SEMANTIC"))
				semanticComboBox.setSelectedKey("NONE");
			semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(true);
			semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(false);
			semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(false);

		} else if(chart_type=="LINE"|| chart_type=="COMBINATION" ){
			semanticComboBox.setSelectedKey("MANUAL_NON_SEMANTIC");
			semanticComboBox.setVisible(true);
			semanticComboBox.setEnabled(true);
			semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(true);
			semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(false);
			semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(true);
		}

	},

	setSemanticColorComboBox:function(chart_type){
		chart_type = chart_type.toUpperCase();
		var semanticComboBox = this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors"));
		if(chart_type == "BAR" || chart_type=="COLUMN"){
			semanticComboBox.setVisible(true);
			semanticComboBox.setEnabled(true);
			semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(true);
			semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(true);
			semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(true);

			// if stacking by dimension is applied , disable manual coloring .
			if(this.isStackDim) {
				semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(false);
				semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(false);
				semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(false);
			}

		}else if(chart_type=="BUBBLE"){
			semanticComboBox.setVisible(false);

		} else if(chart_type=="TABLE"){
			semanticComboBox.setVisible(true);
			semanticComboBox.setEnabled(true);
			semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(true);
			semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(false);
			semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(false);

		} else if(chart_type=="LINE"|| chart_type=="COMBINATION" ){
			semanticComboBox.setVisible(true);
			semanticComboBox.setEnabled(true);
			semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(true);
			semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(false);
			semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(true);
		}

	},

	formatcolor:function(s){

		return s?sap.ui.core.theming.Parameters.get(s):"transparent";
	},
	formatEditColor:function(s){

		return s?sap.ui.core.theming.Parameters.get(s):"black";
	},
	sortByMeasureVisibility:function(s){
		return s?(s.toUpperCase()=="MEASURE"||s.toUpperCase()=="KPI MEASURE"):false;
	},
	sortByDimensionVisibility:function(s){
		return s?s.toUpperCase()=="DIMENSION":false;
	},
	openAllMeasuresDimension:function(){
		this.copyConfigSnapshot();
		this._oShowMeasureDialog.open();
		var buttonContainer=this._oShowMeasureDialog.getContent()[0];
		if(buttonContainer.getSelectedButton()==buttonContainer.getButtons()[1].getId()){
			this.showDimensionList();
		}else{
			this.showMeasureList();
		}

	},
	_isAddDimensionMode:function(){
		var buttonContainer=this._oShowMeasureDialog.getContent()[0];
		return buttonContainer.getSelectedButton()==buttonContainer.getButtons()[1].getId()
	},
	onMeasureDimensionSearch:function(oEvt){
		var mode=this._isAddDimensionMode()?"DIMENSION":"MEASURE";
		var curList=this._isAddDimensionMode()?this._oDimensionList:this._oMeasureList;
		var filter=[new sap.ui.model.Filter("TYPE",sap.ui.model.FilterOperator.Contains,mode)];
		var sKey = oEvt.getSource().getValue();
		if (sKey && sKey.length > 0) {
			filter.push(new sap.ui.model.Filter("LABEL", sap.ui.model.FilterOperator.StartsWith, sKey));
		}
		var binding = curList.getBinding("items");
		binding.filter(filter);
	},
	onMeasureDimensionAdded:function(){
		this._updateMeasureDimensionBindings();
		this._oShowMeasureDialog.close();
//		this.copyConfigSnapshot();
		this.refreshChart();
		this.enableOrDisableSave(); //check for presence of atleast 1 msr or dim, disable save if nothing is selected
	},
	onMeasureDimensionCancel:function(){
		this.restorePrevConfig();
		this._updateMeasureDimensionBindings();
		this._oShowMeasureDialog.close();
	},

	showDimensionList:function(){
		this._oShowMeasureDialog.removeContent(this._oMeasureList);
		this._oShowMeasureDialog.addContent(this._oDimensionList);
		this._oDimensionList.getBinding("items").filter(new sap.ui.model.Filter("TYPE",sap.ui.model.FilterOperator.EQ,"DIMENSION"));

	},
	showMeasureList:function(){
		this._oShowMeasureDialog.removeContent(this._oDimensionList);
		this._oShowMeasureDialog.addContent(this._oMeasureList);
		this._oMeasureList.getBinding("items").filter(new sap.ui.model.Filter("TYPE",sap.ui.model.FilterOperator.EQ,"MEASURE"));

	},
	formatSortOrder:function(s){
		if(s=="asc"){
			return "sap-icon://up"
		}else if(s=="desc"){
			return "sap-icon://down"
		}
		else{
			return "";
		}
	},
	colorButtonVisiblity:function(s,colorMode){
		if(s)
			return (colorMode=="MANUAL_SEMANTIC"||colorMode=="MANUAL_NON_SEMANTIC")&& s.toLowerCase()=='measure';
	},
	colorButton1Visiblity:function(s){
		return s=="MANUAL_NON_SEMANTIC";
	},
	colorButton2Visiblity:function(s){
		return s=="MANUAL_SEMANTIC";
	},
	onEditIconPress:function(oEvent){
		var that = this;
		this.copyConfigSnapshot();
		var bindingContext=oEvent.getSource().getBindingContext("SB_DDACONFIG");

		this.columnBeingEdited = bindingContext.getObject();

		this._editMeasureDialog.bindElement(bindingContext.getPath());

		if(bindingContext.getObject().TYPE.toLowerCase()=="kpi measure"){
			sap.ui.core.Fragment.byId("editDialog","typeOf").setText(this.getView().getModel("i18n").getProperty("KPI_MEASURE"));
		}

		// showing fields relevant to measure or dimension :
		if(bindingContext.getObject().VISIBILITY.toUpperCase() === "CHART")
			sap.ui.core.Fragment.byId("editDialog","hideInTable").setSelected(true);
		else
			sap.ui.core.Fragment.byId("editDialog","hideInTable").setSelected(false);              

		// if dual axis charts chosen .
		if((((this.dda_config.chartConfig.type).toUpperCase() === "BAR") || ((this.dda_config.chartConfig.type).toUpperCase() === "COLUMN")) && ((this.dda_config.chartConfig.axis).toUpperCase() === "DUAL")) {
			sap.ui.core.Fragment.byId("editDialog","Dual_config_1").setVisible(true);
			sap.ui.core.Fragment.byId("editDialog","Dual_config_2").setVisible(true);
			var DualModel = new sap.ui.model.json.JSONModel();
			DualModel.setData({DATA: that.chartMeasures});
			sap.ui.core.Fragment.byId("editDialog","Dual_config_1").setModel(DualModel,"DUAL_MODEL");

			sap.ui.core.Fragment.byId("editDialog","axis_1_label_edit").setText(that._oTextsModel.getResourceBundle().getText("AXIS",1));
			sap.ui.core.Fragment.byId("editDialog","axis_2_label_edit").setText(that._oTextsModel.getResourceBundle().getText("AXIS",2));
			sap.ui.core.Fragment.byId("editDialog","In_stack1_label_edit").setText(that._oTextsModel.getResourceBundle().getText("IN_STACK",1));

			var dualMsr = this.getMeasuresByAxis(this.chartMeasures);
			sap.ui.core.Fragment.byId("editDialog","stack1MsrsLabel_edit").setText(dualMsr.axis1.nameArr.join(","));
			sap.ui.core.Fragment.byId("editDialog","stack2MsrsLabel_edit").setText(dualMsr.axis2.nameArr.join(","));
			if(dualMsr.axis1.nameArr.length) {sap.ui.core.Fragment.byId("editDialog","AxisMsr1_edit").setSelectedKey(dualMsr.axis1.nameArr[0])};
			if(dualMsr.axis2.nameArr.length) {sap.ui.core.Fragment.byId("editDialog","AxisMsr2_edit").setSelectedKey(dualMsr.axis2.nameArr[0])};
		} else {
			sap.ui.core.Fragment.byId("editDialog","Dual_config_1").setVisible(false);
			sap.ui.core.Fragment.byId("editDialog","Dual_config_2").setVisible(false);
		}

		var StackConfig = that.getStacking(that.chartMeasures, that.chartDimensions);
		sap.ui.core.Fragment.byId("editDialog","enableStacking").setEnabled(true);
		if (StackConfig.isEnabled) {
			sap.ui.core.Fragment.byId("editDialog","enableStacking").setSelected(true);
			sap.ui.core.Fragment.byId("editDialog","stackingOptions").setVisible(true);
			if(StackConfig.type === "M") {
				sap.ui.core.Fragment.byId("editDialog","addMsrToStack").setSelected(true);
				sap.ui.core.Fragment.byId("editDialog","dimsToStack").setVisible(false);
			} else if(StackConfig.type === "D") {
				sap.ui.core.Fragment.byId("editDialog","addMsrToStack").setSelected(false);
				sap.ui.core.Fragment.byId("editDialog","dimStack").setSelected(true);
				sap.ui.core.Fragment.byId("editDialog","dimsToStack").setVisible(true);
				var oJSONModel = new sap.ui.model.json.JSONModel();
				oJSONModel.setData({STdata:that.chartDimensions});
				sap.ui.core.Fragment.byId("editDialog","dimsToStack").setModel(oJSONModel);
				var otemplate = new sap.ui.core.Item({
					key: "{name}",
					text: "{name}", 
				});
				sap.ui.core.Fragment.byId("editDialog","dimsToStack").bindItems("/STdata",otemplate);
				if(that.getDimensionToBeStacked(that.chartDimensions)) {
					sap.ui.core.Fragment.byId("editDialog","dimsToStack").setSelectedKey(that.getDimensionToBeStacked(that.chartDimensions).name);
				}
			}
		} else {
			sap.ui.core.Fragment.byId("editDialog","enableStacking").setSelected(false);
			sap.ui.core.Fragment.byId("editDialog","stackingOptions").setVisible(false);
		}

		// disable stacking option if dual charts / percentage charts :
		if((((this.dda_config.chartConfig.type).toUpperCase() === "BAR") || ((this.dda_config.chartConfig.type).toUpperCase() === "COLUMN")) && (((this.dda_config.chartConfig.axis).toUpperCase() === "DUAL") || ((this.dda_config.chartConfig.value).toUpperCase() === "PERCENTAGE"))) {
			sap.ui.core.Fragment.byId("editDialog","stackingOptions").setVisible(false);
			sap.ui.core.Fragment.byId("editDialog","enableStacking").setEnabled(false);
		}
		// disable stacking option for all charts except bar and column :
		if(!(((this.dda_config.chartConfig.type).toUpperCase() === "BAR") || ((this.dda_config.chartConfig.type).toUpperCase() === "COLUMN"))) {
			sap.ui.core.Fragment.byId("editDialog","stackingOptions").setVisible(false);
			sap.ui.core.Fragment.byId("editDialog","enableStacking").setEnabled(false);
		}


		if(bindingContext.getObject().TYPE.toUpperCase()=="MEASURE") {
			sap.ui.core.Fragment.byId("editDialog","useAsThreshold").setVisible(true);     
			if(bindingContext.getObject().NAME === that._oModel.getData().THRESHOLD_MEASURE)
				sap.ui.core.Fragment.byId("editDialog","useAsThreshold").setSelected(true);     
			else
				sap.ui.core.Fragment.byId("editDialog","useAsThreshold").setSelected(false);     
		} else if(bindingContext.getObject().TYPE.toUpperCase()=="DIMENSION") {
			sap.ui.core.Fragment.byId("editDialog","useAsThreshold").setVisible(false);          
		}

		this._editMeasureDialog.open();
	},

	onEnableStacking: function() {
		var isChecked = sap.ui.core.Fragment.byId("editDialog","enableStacking").getSelected();
		if(isChecked) {
			sap.ui.core.Fragment.byId("editDialog","stackingOptions").setVisible(true);
		} else {
			sap.ui.core.Fragment.byId("editDialog","stackingOptions").setVisible(false);
		}
	},

	onMsrStacking: function() {
		if(sap.ui.core.Fragment.byId("editDialog","addMsrToStack").getSelected()) {
			sap.ui.core.Fragment.byId("editDialog","dimsToStack").setVisible(false);
		}
	},

	onDimStacking: function() {
		var that = this;
		if(sap.ui.core.Fragment.byId("editDialog","dimStack").getSelected()) {
			sap.ui.core.Fragment.byId("editDialog","dimsToStack").setVisible(true);
			var oJSONModel = new sap.ui.model.json.JSONModel();
			oJSONModel.setData({STdata:that.chartDimensions});
			sap.ui.core.Fragment.byId("editDialog","dimsToStack").setModel(oJSONModel);
			var otemplate = new sap.ui.core.Item({
				key: "{name}",
				text: "{name}", 
			});
			sap.ui.core.Fragment.byId("editDialog","dimsToStack").bindItems("/STdata",otemplate);
			if(that.getDimensionToBeStacked(that.chartDimensions)) {
				sap.ui.core.Fragment.byId("editDialog","dimsToStack").setSelectedKey(that.getDimensionToBeStacked(that.chartDimensions).name);
			}
		} else {
			sap.ui.core.Fragment.byId("editDialog","dimsToStack").setVisible(false);
		}
	},

	onAfterRendering : function() {
		this._fixSplitterHeight();
		sap.ui.Device.resize.attachHandler(this._fixSplitterHeight,this);
	},
	_fixSplitterHeight : function() {
		var _height = $(window).height();
		var _headerHeight = 48;
		var _footerHeight = 49;
		this.byId('splitContainer').$().css("height",(_height-(_headerHeight + _footerHeight))+"px");
	},
	showGeneral:function(){
		sap.ui.core.Fragment.byId("editDialog","FormEditMeasureGeneral").setVisible(true);
		sap.ui.core.Fragment.byId("editDialog","FormEditMeasureAdvanced").setVisible(false);


	},
	showAdvanced:function(){
		sap.ui.core.Fragment.byId("editDialog","FormEditMeasureGeneral").setVisible(false);
		sap.ui.core.Fragment.byId("editDialog","FormEditMeasureAdvanced").setVisible(true);

	},
	onEditDialogOk:function(oEvent){
		var that = this;
		// updating the model
		var bindingContext=oEvent.getSource().getBindingContext("SB_DDACONFIG");

		if(sap.ui.core.Fragment.byId("editDialog","hideInTable").getSelected()) {                                                     // hide in table
			that.updateColumnProperty(that._oModel.getData().items, that.columnBeingEdited.NAME, "VISIBILITY", "CHART");
		} else {
			that.updateColumnProperty(that._oModel.getData().items, that.columnBeingEdited.NAME, "VISIBILITY", "BOTH");
		}

		if(that.columnBeingEdited.TYPE.toUpperCase() === "MEASURE") {                                                            // setting threshold measure
			if(sap.ui.core.Fragment.byId("editDialog","useAsThreshold").getSelected()) {
				that._oModel.getData().THRESHOLD_MEASURE = that.columnBeingEdited.NAME ;
			}
			else {
				if(that.columnBeingEdited.NAME === that._config.THRESHOLD_MEASURE) {
					that._oModel.getData().THRESHOLD_MEASURE = "";
				}
			}
		}

		if(sap.ui.core.Fragment.byId("editDialog","enableStacking").getSelected()) {                                                   // setting stacking options   
			if(sap.ui.core.Fragment.byId("editDialog","addMsrToStack").getSelected()) {
				that.setStacking(true, "M", that._oModel.getData().items);
				var semanticComboBox = that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors"));     
				var chartTypeComboBox = that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartType"));
				if(chartTypeComboBox.getSelectedKey().toUpperCase() == "BAR" || chartTypeComboBox.getSelectedKey().toUpperCase()=="COLUMN") {
					// semanticComboBox.setSelectedKey("NONE");
					semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(true);
					semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(true);
					semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(true);                    
				}
			} else if(sap.ui.core.Fragment.byId("editDialog","dimStack").getSelected()) {
				var oDim = sap.ui.core.Fragment.byId("editDialog","dimsToStack").getSelectedKey();
				that.setStacking(true, "D", that._oModel.getData().items);
				that.setDimensionToBeStacked(that._oModel.getData().items, oDim);
				var semanticComboBox = that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors"));     
				var chartTypeComboBox = that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartType"));
				if(chartTypeComboBox.getSelectedKey().toUpperCase() == "BAR" || chartTypeComboBox.getSelectedKey().toUpperCase()=="COLUMN") {
					semanticComboBox.setSelectedKey("NONE");
					semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(false);
					semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(false);
					semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(false);                    
				}
			}
		} else {
			that.setStacking(false, "N", that._oModel.getData().items);
			var semanticComboBox = that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors"));     
			var chartTypeComboBox = that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartType"));
			if(chartTypeComboBox.getSelectedKey().toUpperCase() == "BAR" || chartTypeComboBox.getSelectedKey().toUpperCase()=="COLUMN") {
				// semanticComboBox.setSelectedKey("NONE");
				semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(true);
				semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(true);
				semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(true);                    
			}
		}

		// dual axis config setting :
		if((((this.dda_config.chartConfig.type).toUpperCase() === "BAR") || ((this.dda_config.chartConfig.type).toUpperCase() === "COLUMN")) && ((this.dda_config.chartConfig.axis).toUpperCase() === "DUAL")) {
			var axis1 = sap.ui.getCore().byId(sap.ui.core.Fragment.createId("editDialog","AxisMsr1_edit"));
			var axis2 = sap.ui.getCore().byId(sap.ui.core.Fragment.createId("editDialog","AxisMsr2_edit"));
			if(axis1.getSelectedKey() === axis2.getSelectedKey()) {
//				var alert_text = "Please choose a different measure for each axis .";
//				sap.m.MessageBox.alert(that._oTextsModel.getResourceBundle().getText("SAME_MEASURE_CHOSEN_FOR_BOTH_AXES"));     
				jQuery.sap.log.error("Same measure chosen for both axes");
			} //else {
			var tmpData = this._oModel.getData();           
			for(var i=0;i<tmpData.items.length;i++){
				if(tmpData.items[i].TYPE.toUpperCase() === "MEASURE") {
					tmpData.items[i].AXIS = 2;              
					for(var j=0;j<that.chartMeasures.length;j++) {
						if(tmpData.items[i].NAME === that.chartMeasures[j].name) {
							tmpData.items[i].AXIS = that.chartMeasures[j].axis ;
							break;
						}
					}
				}
			}
			this._oModel.setData(tmpData);
//			}
		}

		this._updateMeasureDimensionBindings();
		this._editMeasureDialog.close();
		this.refreshChart();
	},
	onEditDialogCancel:function(){
		this.restorePrevConfig();
		this._updateMeasureDimensionBindings();
		this._editMeasureDialog.close();
	},
	_getColorPaletteTemplate:function(oButton){

		var iconTemplate= new sap.ui.core.Icon({
			color:{
				path:"SB_DDACONFIG>color",
				formatter:this.formatcolor
			},
			src:"sap-icon://color-fill",
			size:"32px",
			width:"5%",
			press:function(e){
				var colorType=oButton.getModel("SB_DDACONFIG").getProperty("/COLOR_SCHEME");
				colorType=(colorType=="MANUAL_NON_SEMANTIC")?"COLOR1":(colorType=="MANUAL_SEMANTIC")?"COLOR2":"";
				oButton.getBindingContext().getObject()[colorType]=this.getBindingContext("SB_DDACONFIG").getProperty("color");
				oButton.getModel().refresh();
			}
		});
		var colorCategory= new sap.m.Label({
			text:{
				path:"SB_DDACONFIG>index",
				formatter:function(ind){
					var text="";
					switch(ind){
					case 1 : text="Neutral";break;
					case 4    : text="Good";break;
					case 7:   text="Warning";break;
					case 10: text="Bad";
					}
					return text;
				}
			},
			visible:{
				path:"SB_DDACONFIG>/COLOR_SCHEME",
				formatter:function(s){return s=="MANUAL_SEMANTIC"}
			}
		})
		return new sap.m.HBox({items:[iconTemplate,colorCategory]});

	},
	showColorPopUp:function(oEvent){
		var chosenColor;
		var oButton = oEvent.getSource();
		var colorScheme=this._oModel.getProperty("/COLOR_SCHEME");
		var colorsVerticalLayout = new sap.m.VBox();
		colorsVerticalLayout.bindAggregation("items","SB_DDACONFIG>/"+colorScheme,this._getColorPaletteTemplate(oButton));
		var colorPopup = new sap.m.Popover({
			visible:{
				path:"SB_DDACONFIG>/COLOR_SCHEME",
				formatter:function(s){return s=="MANUAL_SEMANTIC"||s=="MANUAL_NON_SEMANTIC";}
			},
			showHeader:false,
			content:[ colorsVerticalLayout],

		});
		colorPopup.setModel(this._oModel,"SB_DDACONFIG");
		colorPopup.openBy(oButton);  
	},

	onEditDialogCloseButton:function(){
		this._editMeasureDialog.close();
	},

	onSingleDualChange: function(){
		var that=this;
		var selectedAxis = ((this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","singleDual"))).getSelectedKey()).toUpperCase() ;
		switch(selectedAxis) {
		case "SINGLE":
			this.refreshChart();
			break;
		case "DUAL":
			if(this.chartMeasures.length < 2) {
				//that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","singleDual")).setSelectedKey("SINGLE");
				sap.m.MessageBox.alert(that._oTextsModel.getResourceBundle().getText("DUAL_AXIS_CHART_MIN_MEASURE"),{onClose:function(){
					that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","singleDual")).setSelectedKey("SINGLE");
				}});                    
			} else {
				var DualModel = new sap.ui.model.json.JSONModel();
				DualModel.setData({DATA: this.chartMeasures});
				this._dualAxisConfig.setModel(DualModel,"DUAL_AXIS_MODEL");

				// if dual chart is chosen , disable stacking by dimension :        
				this.setStacking(true, "M", this._oModel.getData().items);

				sap.ui.core.Fragment.byId("dualAxisConfig","select_msr_for_axis_lbl").setText(that._oTextsModel.getResourceBundle().getText("SELECT_MEASURE_FOR_AXIS"," "));
				sap.ui.core.Fragment.byId("dualAxisConfig","axis_1_label").setText(that._oTextsModel.getResourceBundle().getText("AXIS",1));
				sap.ui.core.Fragment.byId("dualAxisConfig","axis_2_label").setText(that._oTextsModel.getResourceBundle().getText("AXIS",2));
				sap.ui.core.Fragment.byId("dualAxisConfig","In_stack1_label").setText(that._oTextsModel.getResourceBundle().getText("IN_STACK",1));

				var dualMsr = this.getMeasuresByAxis(this.chartMeasures);
				sap.ui.core.Fragment.byId("dualAxisConfig","stack1MsrsLabel").setText(dualMsr.axis1.nameArr.join(","));
				sap.ui.core.Fragment.byId("dualAxisConfig","stack2MsrsLabel").setText(dualMsr.axis2.nameArr.join(","));
				if(dualMsr.axis1.nameArr.length) {sap.ui.core.Fragment.byId("dualAxisConfig","AxisMsr1").setSelectedKey(dualMsr.axis1.nameArr[0])};
				if(dualMsr.axis2.nameArr.length) {sap.ui.core.Fragment.byId("dualAxisConfig","AxisMsr2").setSelectedKey(dualMsr.axis2.nameArr[0])};
				this._dualAxisConfig.open();               
			}
			break;
		default:
			break;
		}
	},

	onDualAxisDialogOk: function(){
		var that=this;
		var axis1 = sap.ui.getCore().byId(sap.ui.core.Fragment.createId("dualAxisConfig","AxisMsr1"));
		var axis2 = sap.ui.getCore().byId(sap.ui.core.Fragment.createId("dualAxisConfig","AxisMsr2"));
		if(axis1.getSelectedKey() === axis2.getSelectedKey()) {
//			var alert_text = "Please choose a different measure for each axis .";
//			sap.m.MessageBox.alert(that._oTextsModel.getResourceBundle().getText("SAME_MEASURE_CHOSEN_FOR_BOTH_AXES"));     
			jQuery.sap.log.error("Same measure chosen for both axes");
		}// else {
		var tmpData = this._oModel.getData();           
		for(var i=0;i<tmpData.items.length;i++){
			if(tmpData.items[i].TYPE.toUpperCase() === "MEASURE") {
				tmpData.items[i].AXIS = 2;              
				for(var j=0;j<that.chartMeasures.length;j++) {
					if(tmpData.items[i].NAME === that.chartMeasures[j].name) {
						tmpData.items[i].AXIS = that.chartMeasures[j].axis ;
						break;
					}
				}
			}
		}
		this._oModel.setData(tmpData);             
//		}         
		this.refreshChart();
		this._dualAxisConfig.close();
	},

	onDualAxisDialogCancel: function(){
		this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","singleDual")).setSelectedKey("SINGLE");
		this._dualAxisConfig.close();
	},

	setStackMsrs: function() {
		var that=this;
		var axis1 = sap.ui.getCore().byId(sap.ui.core.Fragment.createId("dualAxisConfig","AxisMsr1"));
		var axis2 = sap.ui.getCore().byId(sap.ui.core.Fragment.createId("dualAxisConfig","AxisMsr2"));
		if(axis1.getSelectedKey() === axis2.getSelectedKey()) {
//			var alert_text = "Please choose a different measure for each axis .";
			sap.m.MessageBox.alert(that._oTextsModel.getResourceBundle().getText("SAME_MEASURE_CHOSEN_FOR_BOTH_AXES"));     
			jQuery.sap.log.error("Same measure chosen for both axes");
		} else {
			for(var i=0;i<that.chartMeasures.length;i++){
				if(that.chartMeasures[i].name === axis1.getSelectedKey()) {
					that.chartMeasures[i].axis = 1;
				} else if(that.chartMeasures[i].name === axis2.getSelectedKey()) {
					that.chartMeasures[i].axis = 2;
				}                            
			}
			var dualMsr = this.getMeasuresByAxis(this.chartMeasures);
			sap.ui.core.Fragment.byId("dualAxisConfig","stack1MsrsLabel").setText(dualMsr.axis1.nameArr.join(","));
			sap.ui.core.Fragment.byId("dualAxisConfig","stack2MsrsLabel").setText(dualMsr.axis2.nameArr.join(","));              
		}         
	},

	setStackMsrs_edit: function() {
		var that=this;
		var axis1 = sap.ui.getCore().byId(sap.ui.core.Fragment.createId("editDialog","AxisMsr1_edit"));
		var axis2 = sap.ui.getCore().byId(sap.ui.core.Fragment.createId("editDialog","AxisMsr2_edit"));
		if(axis1.getSelectedKey() === axis2.getSelectedKey()) {
//			var alert_text = "Please choose a different measure for each axis .";
			sap.m.MessageBox.alert(that._oTextsModel.getResourceBundle().getText("SAME_MEASURE_CHOSEN_FOR_BOTH_AXES"));     
			jQuery.sap.log.error("Same measure chosen for both axes");
		} else {
			for(var i=0;i<that.chartMeasures.length;i++){
				if(that.chartMeasures[i].name === axis1.getSelectedKey()) {
					that.chartMeasures[i].axis = 1;
				} else if(that.chartMeasures[i].name === axis2.getSelectedKey()) {
					that.chartMeasures[i].axis = 2;
				}                            
			}
			var dualMsr = this.getMeasuresByAxis(this.chartMeasures);
			sap.ui.core.Fragment.byId("editDialog","stack1MsrsLabel_edit").setText(dualMsr.axis1.nameArr.join(","));
			sap.ui.core.Fragment.byId("editDialog","stack2MsrsLabel_edit").setText(dualMsr.axis2.nameArr.join(","));              
		}    
	},

	formatAxisToBool: function(a) {
		if(a === 1)
			return true;
		else
			return false;
	},

	openMsrDialogForStack1: function() {
		var that = this;
		if (! this._msrDialogForStack1) {
			this._msrDialogForStack1 = sap.ui.xmlfragment("msrDialogForStack1","sap.suite.ui.smartbusiness.designtime.drilldown.view.msrDialogForStack1", this);
		}

		var Stack1Model = new sap.ui.model.json.JSONModel();
		Stack1Model.setData({DATA: that.chartMeasures});
		this._msrDialogForStack1.setModel(Stack1Model);
		this._msrDialogForStack1.open();
	},

	onSearchInStack1SelectDialog: function(oEvent) {
		var sValue = oEvent.getParameter("value");
		var oFilter = new sap.ui.model.Filter("name", sap.ui.model.FilterOperator.Contains, sValue);
		var oBinding = oEvent.getSource().getBinding("items");
		oBinding.filter([oFilter]);
	},

	onStack1SelectDialogOK: function(oEvent) {
		var that=this;
		var aContexts = oEvent.getParameter("selectedItems");
		if (aContexts.length) {
			for(var i=0;i<that.chartMeasures.length;i++) {
				that.chartMeasures[i].axis = 2;            
				for(var j=0;j<aContexts.length;j++) {
					if(that.chartMeasures[i].name === aContexts[j].getTitle()) {
						that.chartMeasures[i].axis = 1;
						break;
					}
				}
			}
			oEvent.getSource().getBinding("items").filter([]);
			var dualMsr = this.getMeasuresByAxis(this.chartMeasures);
			sap.ui.core.Fragment.byId("dualAxisConfig","stack1MsrsLabel").setText(dualMsr.axis1.nameArr.join(","));
			sap.ui.core.Fragment.byId("dualAxisConfig","stack2MsrsLabel").setText(dualMsr.axis2.nameArr.join(","));          
			if(dualMsr.axis1.nameArr.length) {sap.ui.core.Fragment.byId("dualAxisConfig","AxisMsr1").setSelectedKey(dualMsr.axis1.nameArr[0])};
			if(dualMsr.axis2.nameArr.length) {sap.ui.core.Fragment.byId("dualAxisConfig","AxisMsr2").setSelectedKey(dualMsr.axis2.nameArr[0])};

			sap.ui.core.Fragment.byId("editDialog","stack1MsrsLabel_edit").setText(dualMsr.axis1.nameArr.join(","));
			sap.ui.core.Fragment.byId("editDialog","stack2MsrsLabel_edit").setText(dualMsr.axis2.nameArr.join(","));          
			if(dualMsr.axis1.nameArr.length) {sap.ui.core.Fragment.byId("editDialog","AxisMsr1_edit").setSelectedKey(dualMsr.axis1.nameArr[0])};
			if(dualMsr.axis2.nameArr.length) {sap.ui.core.Fragment.byId("editDialog","AxisMsr2_edit").setSelectedKey(dualMsr.axis2.nameArr[0])};

		} else {
			sap.suite.smartbusiness.utils.showErrorMessage(that._oTextsModel.getResourceBundle().getText("SELECT_MEASURE_FOR_AXIS",1));
		}         
	},

	onStack1SelectDialogCancel: function() {

	},

	onDataModeChange: function() {
		this.refreshChart();
	},

	onIsAbsoluteChange: function(){
		var valueType = ((this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","isAbsolute"))).getSelectedKey()).toUpperCase() ;
		// if percentage is chosen , disable stacking by dimension :
		if(valueType === "PERCENTAGE")
			this.setStacking(true, "M", this._oModel.getData().items);
		this.refreshChart();
	},

	onSemanticColorOptionChange: function(){
		this.refreshChart();
		if(this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors")).getSelectedKey()=="AUTO_SEMANTIC"){
			var filters=[];
			var filterObject = {
					"type": (new sap.ui.model.Filter("TYPE",sap.ui.model.FilterOperator.EQ,"MEASURE")),
					"selected": (new sap.ui.model.Filter("SELECTED", sap.ui.model.FilterOperator.EQ,true)),
			};
			for(var item in filterObject) {
				filters.push(filterObject[item]);
			}
			var selectionBox=sap.ui.getCore().byId(sap.ui.core.Fragment.createId("thresholdDialog","thresholdMeasure"));
			var selectionItems= selectionBox.getItems()?selectionBox.getItems():[];
			if(selectionItems.length && selectionBox.getBinding('items')) {
				selectionBox.getBinding('items').filter(filters);
			}
			if(this._oModel.getData().THRESHOLD_MEASURE)  
				selectionBox.setSelectedKey(this._oModel.getData().THRESHOLD_MEASURE); 
			this.addThresholdMeasureDialog.open();
		}
	},
	onThresholdMeasureAdded:function(){
		this._oModel.getData().THRESHOLD_MEASURE = sap.ui.getCore().byId(sap.ui.core.Fragment.createId("thresholdDialog","thresholdMeasure")).getSelectedKey();  
		this.copyConfigSnapshot();
		this.refreshChart();
		this.addThresholdMeasureDialog.close();

	},
	onThresholdMeasureCancel:function(){
		this.addThresholdMeasureDialog.close();

	},

	/******* methods for Chart Name Additional Languages : BEGIN ************/
	//utility fn
	getLAISOfromSPRAS: function(key) {
		var allLangs = this.getView().getModel('SB_DDACONFIG').getData().ALL_LANGUAGES;
		for(var i = 0; i < allLangs.length; ++i) {
			if(allLangs[i]["SPRAS"] == key)
				return allLangs[i]["LAISO"];
		}
	},
	//utilify fn: gives the index of duplicate if exists, else returns -1. @param data. @param SAP_LANGUAGE_KEY.
	getIndexOfDuplicate: function(data, lang){
		for(var i = 0; i < data.length; ++i) {
			if(data[i]["SAP_LANGUAGE_KEY"] == lang)
				return i; //duplicate at position i
		}
		//no duplicate
		return -1;
	},

	openAdditionalLanguagesDialog: function() {
		var self = this;
		this.AdditionalLanguagesDialog.setModel(this._oTextsModel,"i18n");
		//take a copy of model incase the user needs to cancel
		this.copyConfigSnapshot();
		//reset input field as blank
		sap.ui.core.Fragment.byId("additionalLanguageDialog", "newTitle").setValue("")
		var ALTable = sap.ui.core.Fragment.byId("additionalLanguageDialog", "ALTable");
		ALTable.bindAggregation("items", "SB_DDACONFIG>/ADDITIONAL_LANGUAGE_TITLES", new sap.m.ColumnListItem({
			cells:[
			       new sap.m.Label({text: "{SB_DDACONFIG>TEXT}"}),
			       new sap.m.Label({text: {path: "SB_DDACONFIG>SAP_LANGUAGE_KEY", formatter: function(s){return self.getLAISOfromSPRAS(s)}}}),
			       new sap.ui.core.Icon({src: "sap-icon://decline", press: this.deleteEntry})
			       ],
			       //text in locale language not to be shown
			       visible: {
			    	   path: "SB_DDACONFIG>SAP_LANGUAGE_KEY",
			    	   formatter: function(s){
			    		   return s != self._oModel.getData()["CURRENT_LANGUAGE"]
			    	   }
			       }
		}));
		this.AdditionalLanguagesDialog.open();
		return;
	},

	closeAdditionalLanguagesDialog_OK: function(evt) {
		//set the clipboard variable since OK pressed
		this.copyConfigSnapshot();
		this.AdditionalLanguagesDialog.close();
		return;
	},

	closeAdditionalLanguagesDialog_Cancel: function(evt) {
		//restore to the model copied when dialog is open
		this.restorePrevConfig();
		this.AdditionalLanguagesDialog.close();
		return;
	},



	deleteEntry: function(evt) {
		var bindingPath = evt.getSource().getParent().getBindingContextPath();
		var index = parseInt(bindingPath.split("/").pop());
		var ALTable = sap.ui.core.Fragment.byId("additionalLanguageDialog", "ALTable");
		//remove the entry from model
		ALTable.getModel("SB_DDACONFIG").getData()["ADDITIONAL_LANGUAGE_TITLES"].splice(index, 1);
		ALTable.getModel("SB_DDACONFIG").refresh();
		return;
	},

	addEntry: function() {
		var newTitle = sap.ui.core.Fragment.byId("additionalLanguageDialog", "newTitle").getValue();
		var newTitleLanguage = sap.ui.core.Fragment.byId("additionalLanguageDialog", "newTitleLanguage").getSelectedKey();

		//die silently if both not valid
		if (newTitle && newTitleLanguage) {} else return;

		var ALTable = sap.ui.core.Fragment.byId("additionalLanguageDialog", "ALTable");
		var tableData = ALTable.getModel("SB_DDACONFIG").getData();
		//add entry to the model
		var newEntry = {
				EVALUATION_ID : this.DDA_MODEL.getConfigurator().evaluationId,
				CONFIGURATION_ID : this._oModel.getData().ID,
				SAP_LANGUAGE_KEY : newTitleLanguage,
				TEXT : newTitle,
				IS_ACTIVE : this._oModel.getData()["IS_ACTIVE"] || 1
		};
		var index;
		if((index = this.getIndexOfDuplicate(tableData["ADDITIONAL_LANGUAGE_TITLES"], newTitleLanguage)) == -1)
			tableData["ADDITIONAL_LANGUAGE_TITLES"].push(newEntry);
		else {
			tableData["ADDITIONAL_LANGUAGE_TITLES"].splice(index, 1);
			tableData["ADDITIONAL_LANGUAGE_TITLES"].push(newEntry);
		}

		ALTable.getModel("SB_DDACONFIG").refresh();
		return;
	},
	formatName:function(a,b){
		return a+" "+b;
	},


	/******* methods for Chart Name Additional Languages : END ************/

//	All Chart Refresh Functions :

	refreshChart: function() {

		var oController = this ;

		// for checking proper configuration while saving .
		this.canSave = false;

		var button = this.getView().byId("chartToolbar_config").getToolBar().getContentRight();
		if (button) {
			if(button[0] && (!(button[0].getVisible()))) { button[0].setVisible(true); }
			if(button[1] && (!(button[1].getVisible()))) { button[1].setVisible(true); }
			if(button[3] && (!(button[3].getVisible()))) { button[3].setVisible(true); }
			if(button[0])
				button[0].firePress();
		}

		this.oChartDataModel = new sap.ui.model.json.JSONModel() ;
		this.oChartData = [] ;

		this.dda_chart = this.getView().byId("oChartRef") ;  
		this.dda_chart.setStackedChartWidthEnhancer(false);
		this.dda_table = this.getView().byId("oChartTable") ;     

		var tmpData = this._oModel.getData();
		this.dda_config = {} ;
		this.dda_config.chartConfig = {
				mode: tmpData.DATA_MODE || "DUMMY",
				title: "",
				dataLimit: tmpData.DATA_LIMIT || null,  
				dataLimitations: tmpData.DATA_LIMITATIONS || false,
				type: (tmpData.CHART_TYPE).toUpperCase() || "BAR",
				axis: tmpData.AXIS_TYPE || "SINGLE",
				value: tmpData.VALUE_TYPE || "ABSOLUTE",
				colorScheme: tmpData.COLOR_SCHEME || "NONE",
				thresholdMeasure: tmpData.THRESHOLD_MEASURE || ""
		} ;

		this.dda_config.columnsConfig = [] ;
		for(var i=0;i<tmpData.items.length;i++) {
			this.dda_config.columnsConfig.push({
				name: tmpData.items[i].NAME,
				type: tmpData.items[i].TYPE,
				selected: tmpData.items[i].SELECTED || false,
				visibility: tmpData.items[i].VISIBILITY || "BOTH",
				sortOrder: tmpData.items[i].SORT_ORDER || "NONE",
				sortBy: tmpData.items[i].SORT_BY || "",
				axis: tmpData.items[i].AXIS || 2,
				stacking: tmpData.items[i].STACKING || 0,
				color:tmpData.COLOR_SCHEME=="MANUAL_NON_SEMANTIC"?tmpData.items[i].COLOR1:tmpData.COLOR_SCHEME=="MANUAL_SEMANTIC"?tmpData.items[i].COLOR2:""
			}) ;
		}             

		this.oColumns = [] ;
		this.oDimensions = [] ;
		this.oMeasures = [] ;
		this.dimNameArray = [] ;
		this.msrNameArray = [] ;
		this.chartDimensions = [] ;
		this.chartDimNames = [] ;
		this.chartMeasures = [] ;
		this.chartMsrNames = [] ;
		this.tableDimensions = [] ;
		this.tableDimNames = [] ;
		this.tableMeasures = [] ;
		this.tableMsrNames = [] ;
		for(var i=0;i<this.dda_config.columnsConfig.length;i++) {
			if(this.dda_config.columnsConfig[i].selected) {
				this.oColumns.push(this.dda_config.columnsConfig[i]);
				if((this.dda_config.columnsConfig[i].type).toUpperCase() === "DIMENSION") {
					this.oDimensions.push(this.dda_config.columnsConfig[i]) ;
					this.dimNameArray.push(this.dda_config.columnsConfig[i].name) ;
					if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "CHART") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
						this.chartDimensions.push(this.dda_config.columnsConfig[i]) ;
						this.chartDimNames.push(this.dda_config.columnsConfig[i].name) ;
					}
					if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "TABLE") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
						this.tableDimensions.push(this.dda_config.columnsConfig[i]) ;
						this.tableDimNames.push(this.dda_config.columnsConfig[i].name) ;
					}     
				} else if((this.dda_config.columnsConfig[i].type).toUpperCase() === "MEASURE") {
					this.oMeasures.push(this.dda_config.columnsConfig[i]) ;
					this.msrNameArray.push(this.dda_config.columnsConfig[i].name) ;
					if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "CHART") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
						this.chartMeasures.push(this.dda_config.columnsConfig[i]) ;
						this.chartMsrNames.push(this.dda_config.columnsConfig[i].name) ;
					}
					if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "TABLE") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
						this.tableMeasures.push(this.dda_config.columnsConfig[i]) ;
						this.tableMsrNames.push(this.dda_config.columnsConfig[i].name) ;
					}
				}
			} 
		}

		// check for atleast one dimension & measure :
		if((!(this.chartDimensions.length)) || (!(this.chartMeasures.length))) {
			this.dda_chart.setDataset(new sap.viz.core.FlattenedDataset({}));
			return ;
		}             
		// -------------------------------------------

		this.stacking = this.getStacking(this.chartMeasures,this.chartDimensions);                        // TODO      workaround for stacking .
		this.isStackMsr = false;
		this.isStackDim = false;
		if(this.stacking.isEnabled && (this.stacking.type == "M"))                                     
			this.isStackMsr = true;
		else if(this.stacking.isEnabled && (this.stacking.type == "D")) 
			this.isStackDim = true;

		// getting chart type
		this.sapCaChartType = this.getSapCaChartType() ;     

		this.dda_chart.setAdvancedChartSettings({plotArea: {
			animation: {
				dataLoading: false,
				dataUpdating: false,
				resizing: false
			}
		},
		legend:   {
			title: { visible: false }
		}          
		});


		// get data for chart.....................
		if((this.dda_config.chartConfig.mode).toUpperCase() === "DUMMY") {
			this.oChartData = this.getDummyDataForChart(this.dimNameArray,this.msrNameArray) ;
			this.oChartDataModel.setData({businessData: oController.oChartData}) ;
		} else if((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME") {
			this.getRuntimeChartData(this.dimNameArray,this.msrNameArray,this.oDimensions,this.oMeasures) ;           // TODO        P.S.  write code for avoiding multiple calls - caching .
		}                            


		//getting labels , texts etc.
		try {
			var mProperties = sap.suite.smartbusiness.odata.properties(this._oModel.getData().QUERY_SERVICE_URI,this._oModel.getData().QUERY_ENTITY_SET);
		}
		catch(e) {
			jQuery.sap.log.error("Failed to instantiate the odata model");
			throw e;
		}

		this.column_labels_mapping = mProperties.getLabelMappingObject();
		this.dimension_text_property_mapping = mProperties.getTextPropertyMappingObject();
		this.measure_unit_property_mapping = mProperties.getUnitPropertyMappingObject();

		//----------------------------------------       

		// if chart type = Table , do following :
		if((this.sapCaChartType).toUpperCase() === "TABLE") {
			this.updateTable(this.tableDimensions, this.tableMeasures);
			if (button) {
				if(button[0]) { button[0].setVisible(false); }
				if(button[1]) { button[1].setVisible(true); }
				if(button[3]) { button[3].setVisible(false); }
				if(button[1]) { button[1].firePress(); }
			}
			this.canSave = true;
			return ;
		}
		// --------------------------------------------

		// if dual chart is chosen , but less than 2 measures selected .
		if((((this.dda_config.chartConfig.type).toUpperCase() == "BAR") && (this.dda_config.chartConfig.axis == "DUAL")) || (((this.dda_config.chartConfig.type).toUpperCase() == "COLUMN") && (this.dda_config.chartConfig.axis == "DUAL"))) {
			if(this.chartMeasures.length < 2) {
				sap.m.MessageBox.alert(oController._oTextsModel.getResourceBundle().getText("DUAL_AXIS_CHART_MIN_MEASURE"),{onClose:function(){
					if(oController._config)
						oController.restorePrevConfig();
					else
						oController.restoreFromConfigMasterSnapShot();
					oController.onChartTypeChange();
					oController.refreshChart();
					//oController.dda_chart.setDataset(new sap.viz.core.FlattenedDataset({}));
				}});               
				return;
			}
		}    

		// --------------------------------------------

		// if dual chart is chosen and there is no measure with axis 1 or 2 :
		if((((this.dda_config.chartConfig.type).toUpperCase() == "BAR") && (this.dda_config.chartConfig.axis == "DUAL")) || (((this.dda_config.chartConfig.type).toUpperCase() == "COLUMN") && (this.dda_config.chartConfig.axis == "DUAL"))) {
			var isOneMsrAxis1 = false;
			var isOneMsrAxis2 = false;
			for(var i=0;i<this.chartMeasures.length;i++) {
				if(this.chartMeasures[i].axis == 1)
					isOneMsrAxis1 = true;
				else if(this.chartMeasures[i].axis == 2)
					isOneMsrAxis2 = true;
			}

			if(!(isOneMsrAxis1) || !(isOneMsrAxis2)) {
				//var alert_text = "There is no measure with axis : "+(isOneMsrAxis1 ? 2 : 1)+". Dual Axis charts require atleast one measure with axis 1 and one with axis 2 . Kindly configure the same for proper simulation.";
				sap.m.MessageBox.alert(oController._oTextsModel.getResourceBundle().getText("SELECT_MEASURE_FOR_AXIS",(isOneMsrAxis1 ? 2 : 1)),{onClose:function(){
					if(oController._config)
						oController.restorePrevConfig();
					else
						oController.restoreFromConfigMasterSnapShot();
					oController.onChartTypeChange();
					oController.refreshChart();
					//oController.dda_chart.setDataset(new sap.viz.core.FlattenedDataset({}));
				}});
				return ;
			}
		}
		// --------------------------------------------
		// if bubble chart chosen , but less than 3 measures selected .
		if(((this.dda_config.chartConfig.type).toUpperCase() === "BUBBLE") && (this.chartMeasures.length < 3)) {
			sap.m.MessageBox.alert(oController._oTextsModel.getResourceBundle().getText("BUBBLE_CHART_MEASURE_COUNT"),{onClose:function(){
				if(oController._config && (((oController._config.CHART_TYPE).toUpperCase() != "BUBBLE") || (oController.getSelectedMeasuresCount(oController._config.COLUMNS) >= 3)))
					oController.restorePrevConfig();
				else
					oController.restoreFromConfigMasterSnapShot();
				oController.onChartTypeChange();
				oController.refreshChart();
				//oController.dda_chart.setDataset(new sap.viz.core.FlattenedDataset({}));
			}});
			return;
		}    

		// --------------------------------------------

		if((this.dda_config.chartConfig.type).toUpperCase() === "BUBBLE") {
			this.oDataset = this.create_Dataset(this.chartDimensions,this.chartMeasures) ; 
			this.dda_chart.setDataset(this.oDataset) ;
		}

		this.dda_chart.setChartType(this.sapCaChartType) ;   

		this.oDataset = this.create_Dataset(this.chartDimensions,this.chartMeasures) ;                                

		// axis formatters : 
		var chartType = this.dda_config.chartConfig.type ;
		var axisType = this.dda_config.chartConfig.axis ;
		var valueType = this.dda_config.chartConfig.value ;
		var locale=new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
		var percentFormatter = sap.ca.ui.model.format.NumberFormat.getInstance({},locale);
		if ((chartType == 'BAR') && (valueType == "ABSOLUTE")) {
			this.dda_chart.setXAxisLabelFormatter(this.formatChartNumbers.bind(this));
			this.dda_chart.setYAxisLabelFormatter(this.pseudoChartFormatter);
			if(axisType == 'DUAL')
			{
				this.dda_chart.setXAxis2LabelFormatter(this.formatChartNumbers.bind(this));
			}
		} else if(chartType == 'BUBBLE') {
			this.dda_chart.setXAxisLabelFormatter(this.formatChartNumbers.bind(this));
			this.dda_chart.setYAxisLabelFormatter(this.formatChartNumbers.bind(this));
		} else if(((chartType == 'BAR') || (chartType == 'COLUMN')) && (valueType == 'PERCENTAGE')) {
			if(chartType == 'BAR') {
				this.dda_chart.setXAxisLabelFormatter(function(rawValue){return percentFormatter.format_percentage(rawValue);});
				this.dda_chart.setYAxisLabelFormatter(this.pseudoChartFormatter);
				if(axisType == 'DUAL') {
					this.dda_chart.setXAxis2LabelFormatter(function(rawValue){return percentFormatter.format_percentage(rawValue);});
				}
			}
			else {
				this.dda_chart.setYAxisLabelFormatter(function(rawValue){return percentFormatter.format_percentage(rawValue);});
				this.dda_chart.setXAxisLabelFormatter(this.pseudoChartFormatter);
				if(axisType == 'DUAL') {
					this.dda_chart.setYAxis2LabelFormatter(function(rawValue){return percentFormatter.format_percentage(rawValue);});
				}
			}
		} else {
			this.dda_chart.setYAxisLabelFormatter(this.formatChartNumbers.bind(this));
			this.dda_chart.setXAxisLabelFormatter(this.pseudoChartFormatter);
			if((chartType == 'COLUMN') && (axisType == 'DUAL'))
			{
				this.dda_chart.setYAxis2LabelFormatter(this.formatChartNumbers.bind(this));
			}
		}
		//--------------------------------------

		// data label :
		this.dda_chart.setDataLabelFormatter([
		                                      [this.formatChartNumbers.bind(this)],[this.formatChartNumbers.bind(this)],[this.formatChartNumbers.bind(this)]
		                                      ]);
		//--------------------------------------

		// chart popover :
		var formatterArray=[[],[],[]] ;
		for(var k=0;k<this.chartMsrNames.length;k++){
			formatterArray[0].push(this.getChartNumberFormatter(true));
			formatterArray[1].push(this.getChartNumberFormatter(true));
			formatterArray[2].push(this.getChartNumberFormatter(true));
		}
		this.dda_chart.setPopoverFormatter(formatterArray);
		//---------------------------------------------------------

		// Setting "in %" in axis for 100 percent charts :
		//this.set_percentCharts_uom();

		// Setting % in chart popover for percent charts :
		if(((chartType == 'BAR') || (chartType == 'COLUMN')) && (valueType == 'PERCENTAGE')) {
			var formatterArray=[[],[],[]] ;
			for(var k=0;k<this.chartMsrNames.length;k++){
				formatterArray[0].push(oController.getChartPercentFormatter(true));
				formatterArray[1].push(oController.getChartPercentFormatter(true));
			}
			this.dda_chart.setPopoverFormatter(formatterArray);
		}

		// when scale factor = % and mode is runtime , show % in chart :
		if(((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME") && (this.EVALUATION.getScaling() == -2) && !(((chartType == 'BAR') || (chartType == 'COLUMN')) && (valueType == 'PERCENTAGE'))) {
			this.addPercentToChart(this.chartMsrNames);
		}


		this.dda_chart.setDataset(this.oDataset) ;
		this.dda_chart.setModel(this.oChartDataModel) ;

		// show or hide legend 
		this.showChartLegendIfApplicable(this.chartDimNames,this.chartMsrNames);

		// implement custom coloring ..............................
		if((this.dda_config.chartConfig.type == "BAR") || (this.dda_config.chartConfig.type == "COLUMN") || (this.dda_config.chartConfig.type == "COMBINATION") || (this.dda_config.chartConfig.type == "LINE")) {
			if((this.dda_config.chartConfig.colorScheme).toUpperCase() === "AUTO_SEMANTIC") {
				var thresholdmsr = this.dda_config.chartConfig.thresholdMeasure || "";                 // || (this.chartMeasures)[0].name ;         // TODO                                       
				var colorArray = [];
				var tmsr = -1;
				for(var i=0;i<this.chartMeasures.length;i++) {
					colorArray.push({color: sap.ca.ui.charts.ChartSemanticColor.GoodLight}) ;
					if(this.chartMeasures[i].name === thresholdmsr)
						tmsr = i ;
				}
				if(tmsr >= 0)
					colorArray[tmsr].color = sap.ca.ui.charts.ChartSemanticColor.Neutral ;
				this.applyCustomColoring(this.dda_chart, this.dda_config.chartConfig.colorScheme, colorArray, thresholdmsr, this.DDA_MODEL.EVALUATION_DATA.GOAL_TYPE) ;
			} else if(((this.dda_config.chartConfig.colorScheme).toUpperCase() === "MANUAL_SEMANTIC") || ((this.dda_config.chartConfig.colorScheme).toUpperCase() === "MANUAL_NON_SEMANTIC")) {
				this.applyCustomColoring(this.dda_chart, this.dda_config.chartConfig.colorScheme, this.chartMeasures) ;
			}
		}
		//---------------------------------------------------------        

		// update table :
		this.updateTable(this.tableDimensions, this.tableMeasures);
		this.canSave = true;
		this.copyConfigSnapshot();
	},  

	getSapCaChartType: function() {

		var sapCaChartType = sap.ca.ui.charts.ChartType.Bar ;
		var chartType = this.dda_config.chartConfig.type ;
		var axisType = this.dda_config.chartConfig.axis ;
		var valueType = this.dda_config.chartConfig.value ;
		var stacking = (this.isStackMsr || (this.isStackDim && (this.chartDimensions.length > 1))) ? true : false ;

		switch (chartType) {
		case "BAR":
			if(axisType === "SINGLE") {
				if(valueType === "ABSOLUTE") {
					if(stacking) {
						sapCaChartType = sap.ca.ui.charts.ChartType.StackedBar;
					} else {
						sapCaChartType = sap.ca.ui.charts.ChartType.Bar;
					}
				} else if(valueType === "PERCENTAGE") {
					sapCaChartType = sap.ca.ui.charts.ChartType.StackedBar100;
				}
			} else if(axisType === "DUAL") {
				if(valueType === "ABSOLUTE") {
					sapCaChartType = sap.ca.ui.charts.ChartType.DualStackedBar;
				} else if(valueType === "PERCENTAGE") {
					sapCaChartType = sap.ca.ui.charts.ChartType.DualStackedBar100;
				}
			} 
			break;

		case "COLUMN":
			if(axisType === "SINGLE") {
				if(valueType === "ABSOLUTE") {
					if(stacking) {
						sapCaChartType = sap.ca.ui.charts.ChartType.StackedColumn;
					} else {
						sapCaChartType = sap.ca.ui.charts.ChartType.Column;
					}
				} else if(valueType === "PERCENTAGE") {
					sapCaChartType = sap.ca.ui.charts.ChartType.StackedColumn100;
				}
			} else if(axisType === "DUAL") {
				if(valueType === "ABSOLUTE") {
					sapCaChartType = sap.ca.ui.charts.ChartType.DualStackedColumn;
				} else if(valueType === "PERCENTAGE") {
					sapCaChartType = sap.ca.ui.charts.ChartType.DualStackedColumn100;
				}
			} 
			break;

		case "LINE":
			sapCaChartType = sap.ca.ui.charts.ChartType.Line;
			break;

		case "COMBINATION":
			sapCaChartType = sap.ca.ui.charts.ChartType.Combination;
			break;

		case "BUBBLE":
			sapCaChartType = sap.ca.ui.charts.ChartType.Bubble;
			break;

		case "TABLE":
			sapCaChartType = "TABLE";
			break;

		default:
			sapCaChartType = sap.ca.ui.charts.ChartType.Bar ;

		}

		return sapCaChartType;
	},

	showChartLegendIfApplicable : function(dimensions, measures) {
		var that = this;
		var otoolbar = this.getView().byId("chartToolbar_config") ;
		var chtype = this.dda_config.chartConfig.type ;

		var isStackApplied = (((chtype == "BAR") || (chtype == "COLUMN")) && (this.isStackDim) && (this.getDimensionToBeStacked(that.chartDimensions)) && (dimensions.length > 1)) ? true : false ;        

		if((measures.length > 1) || (isStackApplied)) {             
			otoolbar.setShowLegend(true);
		} else {
			otoolbar.setShowLegend(false);
		}
	},

	getStacking: function(measures,dimensions) {                                                                 // TODO
		var oStacking = {};
		oStacking.isEnabled = false;
		oStacking.type = "none";

		for(var i=0;i<measures.length;i++) {
			if(measures[i].stacking === 1) {
				oStacking.isEnabled = true;
				oStacking.type = "M";
			}                  
		}
		if(!(oStacking.isEnabled)) {
			for(var i=0;i<dimensions.length;i++) {
				if(dimensions[i].stacking === 1) {
					oStacking.isEnabled = true;
					oStacking.type = "D";
				}                  
			}
		}

		return oStacking;
	},

	setStacking: function(isEnabled,type,columns) {                                                                         // TODO     type : M for measure , D for dimension and N for none .
		var that = this;
		if(isEnabled) {
			if(type == "M") {
				for(var i=0;i<columns.length;i++) {
					if((columns[i].TYPE).toUpperCase() === "MEASURE") {
						columns[i].STACKING = 1;
					} else if((columns[i].TYPE).toUpperCase() === "DIMENSION") {
						columns[i].STACKING = 0;
					}    
				}
			} else if(type == "D") {
				for(var i=0;i<columns.length;i++) {
					if((columns[i].TYPE).toUpperCase() === "MEASURE") {
						columns[i].STACKING = 0;
					} else if((columns[i].TYPE).toUpperCase() === "DIMENSION") {
						columns[i].STACKING = 1;
					}                  
				}
			}
		} else {
			for(var i=0;i<columns.length;i++) {
				columns[i].STACKING = 0;
			}
		}         
	},

	getDimensionToBeStacked: function(dimensions) {
		var oDim = null;
		for(var i=0;i<dimensions.length;i++) {
			if(dimensions[i].axis === 2) {
				oDim = dimensions[i];
				break;
			}
		}

		return oDim ;
	},

	setDimensionToBeStacked: function(columns,stackDim) {
		if(stackDim) {
			for(var i=0;i<columns.length;i++) {
				if((columns[i].TYPE).toUpperCase() === "DIMENSION") {
					columns[i].AXIS = 1;
					if(columns[i].NAME === stackDim) {
						columns[i].AXIS = 2;
					}
				}
			}
		}
	},

	updateColumnProperty: function(columns,name,property,value) {
		for(var i=0;i<columns.length;i++) {
			if(columns[i].NAME === name) {
				(columns[i])[property] = value;
				break;
			}
		}
	},

	getMeasuresByAxis: function(columns) {
		var dualMsr = {};
		dualMsr.axis1 = {};
		dualMsr.axis1.objArr = [];
		dualMsr.axis1.nameArr = [];
		dualMsr.axis2 = {};
		dualMsr.axis2.objArr = [];
		dualMsr.axis2.nameArr = [];

		for(var i=0;i<columns.length;i++) {
			if(columns[i].axis === 1) {
				dualMsr.axis1.objArr.push(columns[i]);
				dualMsr.axis1.nameArr.push(columns[i].name);
			} else if(columns[i].axis === 2) {
				dualMsr.axis2.objArr.push(columns[i]);
				dualMsr.axis2.nameArr.push(columns[i].name);
			}
		}
		return dualMsr;
	},

	getAxisOfMsr: function(oMeasure) {
		var axis = 2 ; 
		for(var i=0;i<this.chartMeasures.length;i++) {
			if((this.chartMeasures[i]).name === oMeasure) {
				axis = (this.chartMeasures[i]).axis ;
				break;
			}
		}
		return axis;
	},

	getSelectedMeasuresCount: function(msrObjArray) {
		var count=0;
		for(var i=0;i<msrObjArray.length;i++) {
			if((msrObjArray[i].TYPE).toUpperCase() == "MEASURE" && (msrObjArray[i].SELECTED))
				++count;
		}
		return count;
	},

	create_Dataset: function(dimensions,measures) {

		var oController = this;

		var chtype = this.dda_config.chartConfig.type || "BAR";
		var axisType = this.dda_config.chartConfig.axis || "SINGLE";
		var valueType = this.dda_config.chartConfig.value || "ABSOLUTE";
		var stacking = this.isStackMsr;
		var dimensionToBeStacked = this.getDimensionToBeStacked(dimensions);

		var dataset = new sap.viz.core.FlattenedDataset({
			data: {
				path: "/businessData"
			}
		});

		// setting dimensions :

		for (var i = 0; i < dimensions.length; i++) {
			var val = ((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME")? this.dimension_text_property_mapping[dimensions[i].name] : dimensions[i].name;
			var oAxis = 1;
			if(((chtype == "BAR") || (chtype == "COLUMN")) && (this.isStackDim) && (dimensionToBeStacked) && (val === dimensionToBeStacked.name) && (dimensions.length > 1)) {
				oAxis = 2;
				this.dda_chart.setStackedChartWidthEnhancer(true);
			}

			var dimchart = new sap.viz.ui5.data.DimensionDefinition({
				axis: oAxis,
				value: "{" + val + "}",
				name: this.column_labels_mapping[dimensions[i].name] || dimensions[i].name
			});
			dataset.addDimension(dimchart);
		}

		// setting measures :

		if ((chtype == "LINE") || (chtype == "COMBINATION") || ((chtype == "BAR") && (axisType == "SINGLE")) || ((chtype == "COLUMN") && (axisType == "SINGLE"))) {   

			for (var i = 0; i < measures.length; i++) {
				var val = measures[i].name;
				var msrchart = new sap.viz.ui5.data.MeasureDefinition({
					name: this.column_labels_mapping[val] || val,
					value: "{" + val + "}"
				});
				dataset.addMeasure(msrchart);
			}

		} else if (chtype == "BUBBLE") {

			for(var i=0;i<3;i++) {
				var val = measures[i].name ;
				var msrchart = new sap.viz.ui5.data.MeasureDefinition({
					group : i+1,
					name : this.column_labels_mapping[val] || val,
					value : "{"+val+"}",
				});
				dataset.addMeasure(msrchart);
			}                  

		} else if (((chtype == "BAR") && (axisType == "DUAL")) || ((chtype == "COLUMN") && (axisType == "DUAL"))) {

			for (var i=0;i<measures.length;i++) {
				var val = measures[i].name;
				var grp = (measures[i].axis == 1 || measures[i].axis == 2) ? measures[i].axis : 2 ;

				var msrchart = new sap.viz.ui5.data.MeasureDefinition({
					group: grp,
					name: this.column_labels_mapping[val] || val,
					value: "{" + val + "}"

				});
				dataset.addMeasure(msrchart);
			}                                                                                                                            

		} 

		return dataset;
	},

	/*
	 * 2 Table related methods follow - same as runtime methods. 
	 */
	_getValueState : function(actualValue, thresholdValue) {
		if(!this.EVALUATION.isTargetKpi()) {
			if(actualValue < thresholdValue) {
				return this.EVALUATION.isMaximizingKpi() ? sap.ui.core.ValueState.Error : sap.ui.core.ValueState.Success;
			} else if (actualValue == thresholdValue) {
				return sap.ui.core.ValueState.None;
			} else {
				return this.EVALUATION.isMaximizingKpi() ? sap.ui.core.ValueState.Success : sap.ui.core.ValueState.Error;
			}
		} else {
			return sap.ui.core.ValueState.None;
		}
	},
	_getTableCellFormatter: function(originalMeasure, isPercentScaled, axisScaled) {
		var that = this;
		var formatter;
		var chartType = this.dda_config.chartConfig.type ;
		var valueType = this.dda_config.chartConfig.value ;
		var axisType = this.dda_config.chartConfig.axis ;
		if(isPercentScaled) {
			if(chartType.toUpperCase() == "TABLE") {
				if(that._isEvaluationThresholdMeasure(originalMeasure))
					formatter= this.getChartPercentFormatter(true);
				else
					formatter= this.getChartNumberFormatter(true);
			} else if((axisType == 'DUAL') && (valueType == "ABSOLUTE") && (chartType == 'BAR' || chartType == 'COLUMN')) {
				if(axisScaled[(that.getAxisOfMsr(originalMeasure))-1])
					formatter= this.getChartPercentFormatter(true);
				else
					formatter= this.getChartNumberFormatter(true);
			} else {
				formatter= this.getChartPercentFormatter(true);
			}
		}
		else	
			formatter= this.getChartNumberFormatter(true);
		return formatter;
	},
	_getTableCell : function(originalMeasure, thresholdMeasure, is_percent_scale, axisScale) {
		var that = this;
		if(thresholdMeasure && (originalMeasure !== thresholdMeasure)) {
			return new sap.m.ObjectNumber({
				number: {
					path: originalMeasure,
					formatter: that._getTableCellFormatter(originalMeasure, is_percent_scale, axisScale)  
				},
				state : {
					parts : [
					         {path : originalMeasure},
					         {path : thresholdMeasure}
					         ],
					         formatter : function(oMeasureValue, tMeasureValue) {
					        	 try {
					        		 oMeasureValue = window.parseFloat(oMeasureValue);
					        		 tMeasureValue = window.parseFloat(tMeasureValue);
					        		 return that._getValueState(oMeasureValue, tMeasureValue);
					        	 }catch(e) {
					        		 return sap.ui.core.ValueState.None;
					        	 }
					         }
				}
			});
		} else {
			return new sap.m.Label({
				text : {
					path : originalMeasure,
					formatter: that._getTableCellFormatter(originalMeasure, is_percent_scale, axisScale)
				}
			})
		}
	},

	updateTable: function(dimensions,measures) {

		this.dda_table.destroyColumns();
		this.dda_table.destroyItems();

		for(var i=0;i<dimensions.length;i++) {
			var val = dimensions[i].name;
			var Label = new sap.m.Label({
				text: this.column_labels_mapping[val] || val
			});
			var columns = new sap.m.Column({
				hAlign: "Left",                                      
				header: Label,
				minScreenWidth: "Tablet",
				demandPopin: true,
			});
			this.dda_table.addColumn(columns);
		}

		for (var i=0;i<measures.length;i++) {
			var val = measures[i].name;
			var Label = new sap.m.Label({
				text: this.column_labels_mapping[val] || val
			});
			var columns = new sap.m.Column({
				hAlign: "Right",
				header: Label,
				minScreenWidth: "Tablet",
				demandPopin: true,
			});

			this.dda_table.addColumn(columns);
		}

		var template = new sap.m.ColumnListItem({
			//type : "Navigation",
			unread : false,              
		});

		for(var i=0;i<dimensions.length;i++){
			var val = ((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME")? this.dimension_text_property_mapping[dimensions[i].name] : dimensions[i].name;
			var ocell = new sap.m.Label({
				text : "{"+val+"}"
			});
			template.addCell(ocell);

		}
		var thresholdmsr = this._oModel.getData()["THRESHOLD_MEASURE"];

		var is_percent_scale = false;
		var chartType = this.dda_config.chartConfig.type ;
		var valueType = this.dda_config.chartConfig.value ;
		var axisType = this.dda_config.chartConfig.axis ;
		if((this.sapCaChartType).toUpperCase() === "TABLE")
			var oMsrs = this.tableMsrNames ;
		else
			var oMsrs = this.chartMsrNames ;
		if(((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME") && (this.EVALUATION.getScaling() == -2) && this.getIsPercentScaled(oMsrs) && !(((chartType == 'BAR') || (chartType == 'COLUMN')) && (valueType == 'PERCENTAGE'))) {
			is_percent_scale = true;
		}
		var axisScale = [] ;
		if(is_percent_scale) {
			if((axisType == 'DUAL') && (valueType == "ABSOLUTE") && (chartType == 'BAR' || chartType == 'COLUMN')) {
				var msrsObj = this.getMeasuresByAxis(this.chartMeasures);	        	
				axisScale.push(this.getIsPercentScaled(msrsObj.axis1.nameArr));
				axisScale.push(this.getIsPercentScaled(msrsObj.axis2.nameArr));
			}
		}

		for(var i=0;i<measures.length;i++){
			var val = measures[i].name;
			if(this._oModel.getData()["COLOR_SCHEME"] == "AUTO_SEMANTIC")
				var ocell = this._getTableCell(val, thresholdmsr, is_percent_scale, axisScale);
			else
				var ocell = this._getTableCell(val, val, is_percent_scale, axisScale);
			template.addCell(ocell);
		}

		this.dda_table.setModel(this.oChartDataModel);
		this.dda_table.bindAggregation("items", "/businessData", template);

	},   

	applyCustomColoring: function(oChart, colorScheme, arr, thresholdMeasure, improvementDirection) {                       // pass chart reference , type of coloring , measures obj , threshold measure (if applicable) and improvementDirection(either 0, 1 or 2)

		var oController = this;

		if((colorScheme).toUpperCase() === "AUTO_SEMANTIC") {                                                       

			if(((improvementDirection == "MA") || (improvementDirection == "MI")) && thresholdMeasure) {                                                                
				oController.setCustomColors(oChart,arr,colorScheme) ;

				oChart.setChartSemanticColorFormatter(function(oContext) {

					var data = oChart.getModel().getData().businessData;
					var bindingContext = oContext.ctx.path.dii_a1;
					var bindingData = data[bindingContext];
					var referenceMeasureValue = bindingData[thresholdMeasure];
					if(referenceMeasureValue!=null && typeof referenceMeasureValue!='undefined') {
						if(oContext.val > referenceMeasureValue) {
							if(improvementDirection == "MA")
								return sap.ca.ui.charts.ChartSemanticColor.GoodLight;
							else if(improvementDirection == "MI")
								return sap.ca.ui.charts.ChartSemanticColor.BadLight;
						} else if(oContext.val < referenceMeasureValue) {
							if(improvementDirection == "MA")
								return sap.ca.ui.charts.ChartSemanticColor.BadLight;
							else if(improvementDirection == "MI")
								return sap.ca.ui.charts.ChartSemanticColor.GoodLight;
						} else {
							return sap.ca.ui.charts.ChartSemanticColor.Neutral;
						}
					} else {
						jQuery.sap.log.error("Threshold Measure:'"+thresholdMeasure+"' not in Dataset. Error Applying Semantic Color");
						return sap.ca.ui.charts.ChartSemanticColor.NeutralLight;
					}
				});
			} else {
				jQuery.sap.log.error("Threshold Measure not available or Goal type is RA . Error Applying Semantic Color");
			}

		} else if(((colorScheme).toUpperCase() === "MANUAL_SEMANTIC") || ((colorScheme).toUpperCase() === "MANUAL_NON_SEMANTIC")) {                                           
			oController.setCustomColors(oChart,arr,colorScheme) ;
		}

	},

	setCustomColors: function(oChart,msrObj,colorScheme){                           // pass chart reference and msr obj.

		var dset = oChart.getDataset() ;
		var msr = dset.getMeasures() ;

		var defaultColor = "";
		if((colorScheme).toUpperCase() === "AUTO_SEMANTIC" || (colorScheme).toUpperCase() === "MANUAL_SEMANTIC")
			defaultColor = sap.ca.ui.charts.ChartSemanticColor.Neutral;

		for(var i=0;i<msr.length;i++)
		{
			msr[i].addCustomData(new sap.ui.core.CustomData({
				key: "fillColor",
				value: msrObj[i].color || defaultColor
			})) ;
		}              

	},

	set_percentCharts_uom: function() {

		var oController = this; 
		var chartType = this.dda_config.chartConfig.type ;
		var axisType = this.dda_config.chartConfig.axis ;
		var valueType = this.dda_config.chartConfig.value ;

		var msrLabels = [];
		for(var i=0;i<this.chartMsrNames.length;i++) {
			msrLabels.push(this.column_labels_mapping[this.chartMsrNames[i]] || this.chartMsrNames[i]);
		}

		var dualMsr = this.getMeasuresByAxis(this.chartMeasures);
		var dualMsrAxis1 = [],dualMsrAxis2 = [] ;
		for(var i=0;i<dualMsr.axis1.nameArr.length;i++) {
			dualMsrAxis1.push(this.column_labels_mapping[dualMsr.axis1.nameArr[i]] || dualMsr.axis1.nameArr[i]);
		}
		for(var i=0;i<dualMsr.axis2.nameArr.length;i++) {
			dualMsrAxis2.push(this.column_labels_mapping[dualMsr.axis2.nameArr[i]] || dualMsr.axis2.nameArr[i]);
		}

		var msrLabelStr = (axisType == 'DUAL') ? dualMsrAxis1.join(" & ") : msrLabels.join(" & ");

		var oChartSettings = {} ;

		if(this.dda_chart)
			oChartSettings = this.dda_chart.getAdvancedChartSettings() ? this.dda_chart.getAdvancedChartSettings() : {} ;

			if(((chartType == 'BAR') || (chartType == "COLUMN")) && (valueType == "PERCENTAGE")) {	
				if(chartType == 'COLUMN') {
					oChartSettings.yAxis = {
							title : {visible : true, text : (msrLabelStr+" ("+(oController._oTextsModel.getResourceBundle().getText("IN_PERCENTAGE"))+")")}
					};
					if(axisType == 'DUAL') {
						oChartSettings.yAxis2 = {
								title : {visible : true, text : (dualMsrAxis2.join(" & ")+" ("+(oController._oTextsModel.getResourceBundle().getText("IN_PERCENTAGE"))+")")}
						};
					}
				}
				else if(chartType == 'BAR') {
					oChartSettings.xAxis = {
							title : {visible : true, text : (msrLabelStr+" ("+(oController._oTextsModel.getResourceBundle().getText("IN_PERCENTAGE"))+")")}
					};
					if(axisType == 'DUAL') {
						oChartSettings.xAxis2 = {
								title : {visible : true, text : (msrLabelStr+" ("+(oController._oTextsModel.getResourceBundle().getText("IN_PERCENTAGE"))+")")}
						};
						oChartSettings.xAxis = {
								title : {visible : true, text : (dualMsrAxis2.join(" & ")+" ("+(oController._oTextsModel.getResourceBundle().getText("IN_PERCENTAGE"))+")")}
						};
					}
				}

				if(this.dda_chart)
					this.dda_chart.setAdvancedChartSettings(oChartSettings) ;
			}
	},

	formatChartNumbers: function (value) {
		var locale = new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
		function isNumber(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}

		if (isNumber(value)) {
			if (!this.chartFormatter) {
				var dec = 1;                              //   TODO            numberOfDecimals
				jQuery.sap.require("sap.ca.ui.model.format.NumberFormat");
				if (dec || dec==0){
					this.chartFormatter = sap.ca.ui.model.format.NumberFormat.getInstance({
						style: 'short',
						shortDecimals: dec
					},locale);
				}

				else{
					this.chartFormatter = sap.ca.ui.model.format.NumberFormat.getInstance({
						style: 'short'
					},locale);
				}
			}
			value = this.chartFormatter.format(value);
		}

		return value;
	},
	pseudoChartFormatter: function (value) {
		return value;
	},

	getRuntimeChartData: function(dimensions,measures,dimObjArr,msrObjArr) {                          // TODO
		var that = this;

		var chartToolbarRef = this.getView().byId("chartToolbar_config");
		chartToolbarRef.setBusy(true);

		var oDims = [];
		var oMsrs = [];

		dimensions.forEach(function(x){oDims.push(x)}) ;
		measures.forEach(function(x){oMsrs.push(x)}) ;

		this.COLUMNS_SORT = [];
		for(var i=0;i<that.oColumns.length;i++) {
			if(that.oColumns[i].sortBy && that.oColumns[i].sortOrder) {
				if((that.oColumns[i].sortOrder).toUpperCase() == "ASC" || (that.oColumns[i].sortOrder).toUpperCase() == "DESC") {
					this.COLUMNS_SORT.push({
						name : that.oColumns[i].sortBy,
						order : that.oColumns[i].sortOrder
					});
					if(that.oColumns[i].sortBy != that.oColumns[i].name) {
						if((that.oColumns[i].type).toUpperCase() == "DIMENSION") {
							if((oDims.indexOf(that.oColumns[i].sortBy)) == -1) {
								oDims.push(that.oColumns[i].sortBy) ;
							}
						} else if((that.oColumns[i].type).toUpperCase() == "MEASURE") {
							if((oMsrs.indexOf(that.oColumns[i].sortBy)) == -1) {
								oMsrs.push(that.oColumns[i].sortBy) ;
							}
						}
					}
				}
			}
		}        

		try{
			var oUriObject = sap.suite.smartbusiness.odata.getUri({
				serviceUri : this._oModel.getData().QUERY_SERVICE_URI,
				entitySet : this._oModel.getData().QUERY_ENTITY_SET,
				dimension : oDims,
				measure : oMsrs,
				filter : this.DDA_MODEL.EVALUATION_DATA.FILTERS.results,
				sort : this.COLUMNS_SORT,
				dataLimit : (((this.dda_config.chartConfig.dataLimitations) && (this.dda_config.chartConfig.dataLimit > 0)) ? (this.dda_config.chartConfig.dataLimit) : null),
				//includeDimensionKeyTextAttribute : true/false, default true,
				//includeMeasureRawFormattedValueUnit : true/false, default True,
			});

			oUriObject.model.read(oUriObject.uri, null, null, true, function(data) {
				if(data.results.length) {
					that.oChartData = data.results ;      
					that.oChartDataModel.setData({businessData: that.oChartData}) ;
				} else {
					jQuery.sap.log.info("Chart data Table Returned Empty Results");
					that.oChartData = [];        
					that.oChartDataModel.setData({businessData: that.oChartData}) ;
				}
				chartToolbarRef.setBusy(false);
			}, function() {
				jQuery.sap.log.error("Error fetching data : "+oUriObject.uri);
				that.oChartData = [];        
				that.oChartDataModel.setData({businessData: that.oChartData}) ;
				chartToolbarRef.setBusy(false);
			});
		} catch(exp){
			jQuery.sap.log.error(exp.toString());
			that.oChartData = [];        
			that.oChartDataModel.setData({businessData: that.oChartData}) ;
			chartToolbarRef.setBusy(false);
		}
	},

	getChartPercentFormatter: function(isStandard){
		var locale=new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
		function isNumber(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}
		var formatterConstructor={style:isStandard?'standard':'short'};
		//if(dec||dec==0){formatterConstructor["shortDecimals"]=dec;}
		var chartFormatter=sap.ca.ui.model.format.NumberFormat.getInstance(formatterConstructor,locale);
		return function(s){
			return isNumber(s)?chartFormatter.format_percentage(s):s;
		};
	},

	getChartNumberFormatter: function(isStandard){
		var locale=new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
		function isNumber(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}
		var formatterConstructor={style:isStandard?'standard':'short'};
		//if(dec||dec==0){formatterConstructor["shortDecimals"]=dec;}
		var chartFormatter=sap.ca.ui.model.format.NumberFormat.getInstance(formatterConstructor,locale);
		return function(s){
			return isNumber(s)?chartFormatter.format(s):s;
		};
	},

	getIsPercentScaled: function(measures) {
		if(this.thresholdMeasuresArray && this.thresholdMeasuresArray.length) {
			var thresholdMsrsArray = this.thresholdMeasuresArray;
		} else {
			var thresholdMsrsArray = this._getEvaluationThresholdMeasures();
		}
		var isPercentScaled = false ;
		if(thresholdMsrsArray && thresholdMsrsArray.length) {
			for(var i=0;i<measures.length;i++) {
				if(thresholdMsrsArray.indexOf(measures[i]) != -1) {
					isPercentScaled = true ;
					break ;
				} 
			}
		}
		return isPercentScaled;
	},

	_getEvaluationThresholdMeasures : function(){
		var thresholdMeasuresArray = [];
		thresholdMeasuresArray.push(this.EVALUATION.getKpiMeasureName());
		if(this.EVALUATION.getThresholdValueType() === "MEASURE") {
			var thresholdObjArray = this.EVALUATION.getValues().results ;
			if(thresholdObjArray && thresholdObjArray.length) {
				for(var i=0;i<thresholdObjArray.length;i++) {
					if((thresholdObjArray[i]).COLUMN_NAME && !((thresholdObjArray[i]).FIXED)) {
						thresholdMeasuresArray.push((thresholdObjArray[i]).COLUMN_NAME);
					}
				}
			}
		}
		return thresholdMeasuresArray;
	},

	_isEvaluationThresholdMeasure : function(oMsr) {
		if(this.thresholdMeasuresArray && this.thresholdMeasuresArray.length) {
			var thresholdMsrsArray = this.thresholdMeasuresArray;
		} else {
			var thresholdMsrsArray = this._getEvaluationThresholdMeasures();
		}
		if(thresholdMsrsArray && thresholdMsrsArray.length) {
			if(thresholdMsrsArray.indexOf(oMsr) != -1) {
				return true;					
			} 
		}
		return false;
	},

	addPercentToChart: function(measures) {
		var that = this;     	
		var isPercentScaled = this.getIsPercentScaled(measures);

		if(isPercentScaled) {
			if(this.dda_chart) {
				var chartType = this.dda_config.chartConfig.type ;
				var axisType = this.dda_config.chartConfig.axis ;
				var valueType = this.dda_config.chartConfig.value ;
				if(((chartType == 'BAR') || (chartType == 'COLUMN')) && (valueType == "ABSOLUTE") && (axisType == 'DUAL')) {
					var msrsObj = this.getMeasuresByAxis(this.chartMeasures);
					var isAxis1Scaled = this.getIsPercentScaled(msrsObj.axis1.nameArr);
					var isAxis2Scaled = this.getIsPercentScaled(msrsObj.axis2.nameArr);
					// data label & chart popover :
					var labelFormatter = [[],[]];
					var formatterArray=[[],[],[]] ;
					if(isAxis1Scaled) {
						labelFormatter[0].push(that.getChartPercentFormatter());
						for(var k=0;k<msrsObj.axis1.nameArr.length;k++){
							formatterArray[0].push(that.getChartPercentFormatter(true));
						}
					} else {
						labelFormatter[0].push(that.formatChartNumbers.bind(that));
						for(var k=0;k<msrsObj.axis1.nameArr.length;k++){
							formatterArray[0].push(that.getChartNumberFormatter(true));
						}
					}
					if(isAxis2Scaled) {
						labelFormatter[1].push(that.getChartPercentFormatter());
						for(var k=0;k<msrsObj.axis2.nameArr.length;k++){
							formatterArray[1].push(that.getChartPercentFormatter(true));
						}
					} else {
						labelFormatter[1].push(that.formatChartNumbers.bind(that));
						for(var k=0;k<msrsObj.axis2.nameArr.length;k++){
							formatterArray[1].push(that.getChartNumberFormatter(true));
						}
					}
					this.dda_chart.setDataLabelFormatter(labelFormatter);
					this.dda_chart.setPopoverFormatter(formatterArray);
					// chart axis :
					if(chartType == 'BAR') {
						this.dda_chart.setXAxisLabelFormatter(isAxis1Scaled?that.getChartPercentFormatter():that.formatChartNumbers.bind(that));
						this.dda_chart.setYAxisLabelFormatter(that.pseudoChartFormatter);
						this.dda_chart.setXAxis2LabelFormatter(isAxis2Scaled?that.getChartPercentFormatter():that.formatChartNumbers.bind(that));
						this.dda_chart.setYAxis2LabelFormatter(that.pseudoChartFormatter); 
					} else if(chartType == 'COLUMN') {
						this.dda_chart.setXAxisLabelFormatter(that.pseudoChartFormatter);
						this.dda_chart.setYAxisLabelFormatter(isAxis1Scaled?that.getChartPercentFormatter():that.formatChartNumbers.bind(that));
						this.dda_chart.setXAxis2LabelFormatter(that.pseudoChartFormatter);
						this.dda_chart.setYAxis2LabelFormatter(isAxis2Scaled?that.getChartPercentFormatter():that.formatChartNumbers.bind(that));
					}
				} else {
					// data label :
					this.dda_chart.setDataLabelFormatter([[this.getChartPercentFormatter()],[this.getChartPercentFormatter()],[this.getChartPercentFormatter()]]);
					// chart popover :
					var formatterArray=[[],[],[]] ;
					for(var k=0;k<measures.length;k++){
						formatterArray[0].push(that.getChartPercentFormatter(true));
						formatterArray[1].push(that.getChartPercentFormatter(true));
						formatterArray[2].push(that.getChartPercentFormatter(true));
					}
					this.dda_chart.setPopoverFormatter(formatterArray);
					// chart axis :					
					if ((chartType == 'BAR') && (valueType == "ABSOLUTE")) {
						this.dda_chart.setXAxisLabelFormatter(that.getChartPercentFormatter());
						if(axisType == 'DUAL')
						{
							this.dda_chart.setXAxis2LabelFormatter(that.getChartPercentFormatter());
						}
					} else if(chartType == 'BUBBLE') {
						this.dda_chart.setXAxisLabelFormatter(that.getChartPercentFormatter());
						this.dda_chart.setYAxisLabelFormatter(that.getChartPercentFormatter());
					} else if(((chartType == 'BAR') || (chartType == 'COLUMN')) && (valueType == 'PERCENTAGE')) {
						// do nothing .
					} else {
						this.dda_chart.setYAxisLabelFormatter(that.getChartPercentFormatter());
						if((chartType == 'COLUMN') && (axisType == 'DUAL'))
						{
							this.dda_chart.setYAxis2LabelFormatter(that.getChartPercentFormatter());
						}
					}
				}
			}
		}
	},

	getDummyDataForChart: function(dim,measure,MAX_D,DATA_SZ) {
		MAX_D=MAX_D|| 5;
		DATA_SZ= DATA_SZ||10;
		var chartData=[];
		var tmp,dimension={};
		for(var i=0;i<dim.length;i++){
			dimension[dim[i]]=[];
			for(var j=0;j<MAX_D;j++){
				dimension[dim[i]].push(dim[i]+"_"+j);
			}
		}

		for(var i=0;i<DATA_SZ;i++){
			tmp={};
			for(var j=0;j<dim.length;j++){
				var count= dimension[dim[j]].length;
				var p=sap.suite.smartbusiness.utils.getRandomNumber(count);
				tmp[dim[j]]=dimension[dim[j]][p];
			}
			for(var j=0;j<measure.length;j++){
				tmp[measure[j]]=sap.suite.smartbusiness.utils.getRandomNumber(100);
			}
			chartData.push(tmp);
		}
		chartData=this.sortChartData(chartData,dim);
		return chartData;
	},

	sortChartData: function(arr,dim) {
		var data=[];
		arr.sort(function(a,b){
			var i=0;
			while(i<dim.length){
				if(a[dim[i]]>b[dim[i]]){
					return -1;
				}
				else if(a[dim[i]]<b[dim[i]]){
					return 1;
				}
				i++;

			}

		});
		var tmp={};
		for(var i=0,k=0;i<arr.length;i++){
			var s="";
			for(var j=0;j<dim.length;j++){
				s+=arr[i][dim[j]];
			}
			if(!tmp[s]){
				tmp[s]=true;
				data[k++]=arr[i];
			}
		}
		return data;
	},

	// --------------------------------------------------------------------------------------------

	/*
	 * START - VALIDATE AND SAVE FUNCTIONS
	 */
	/**
	 * No need to make odata call, as all the configurations available locally.
	 */
	//called on change as well as before save
	validateChartId: function(oEvent){
		//@TODO get Field reference using fragment
		var chartIdField = oEvent ? oEvent.getSource() : this.getView().getContent()[0].getContent()[0].getMasterPages()[0].getContent()[2].getItems()[1];
		var chartId =  chartIdField.getValue();
		//chartId shouldn't be blank, must contain only words,numbers,.,_
		if(/^[\w\d\.\_]+$/.test(chartId)) {
			if(this.DDA_MODEL.getConfigurator().findViewById(chartId)) {
				if(!this._oModel.getData().ID_EDITABLE){
					chartIdField.setValueState(sap.ui.core.ValueState.None);
					return true;
				} else {
					chartIdField.setValueState(sap.ui.core.ValueState.Error);
					chartIdField.focus();
					return false;
				}
			} else {
				chartIdField.setValueState(sap.ui.core.ValueState.None);
				return true;
			}
		} else {
			chartIdField.setValueState(sap.ui.core.ValueState.Error);
			return false;
		}
	},

	validateChartName: function() {
		//@TODO get Field reference using fragment
		var chartNameField = this.getView().getContent()[0].getContent()[0].getMasterPages()[0].getContent()[2].getItems()[3];
		var chartName = chartNameField.getValue();
		if(chartName) {
			chartNameField.setValueState(sap.ui.core.ValueState.None);
			return true;
		} else {
			chartNameField.setValueState(sap.ui.core.ValueState.Error);
			chartNameField.focus();
			return false;
		}
	},

	validateDataLimit:function(oEvent){
		var datafield = oEvent ? oEvent.getSource() :this.getView().getContent()[0].getContent()[0].getMasterPages()[0].getContent()[2].getItems()[7];	
		var dataLimit = datafield.getValue();
		if(/^\d+$/gi.test(dataLimit)) {

			var parseDataLimit=parseInt(dataLimit,10);
			if( parseDataLimit>0){
				datafield.setValueState(sap.ui.core.ValueState.None);
				return true;
			}
		}else{
			datafield.setValueState(sap.ui.core.ValueState.Error);
			return false; 
		}

	},
	onSave:function(){
		if(this.validateChartId() && this.validateChartName()&&this.validateDataLimit()) {
			var self = this;
			if(this.currentViewId == this.DDA_MODEL.NEW_VIEWID) {
				this.oApplicationFacade.__newViewAdded = true;
				this.oApplicationFacade.createdViewId = this.getView().getModel("SB_DDACONFIG").getData().SELECTED_VIEW;
			}
			this.busyIndicator.open() && this.getView().setBusy(true);
			var modelData=this.getView().getModel("SB_DDACONFIG").getData();
			var saveService=sap.suite.smartbusiness.ddaconfig.DrilldownSaveService;
			saveService.saveViewConfiguration(this.evaluationId,modelData,"update",function(){
				jQuery.sap.log.info("all calls success");
				self.busyIndicator.close() && self.getView().setBusy(false);
				sap.m.MessageToast.show(self._oTextsModel.getResourceBundle().getText("CHART_CONFIG_SAVE_SUCCESS"));
				self.oApplicationFacade.__refreshModel = 1;
				window.history.back();
				self.takeConfigMasterSnapShot();

			},function(){
				jQuery.sap.log.error(x + " failed");
				self.busyIndicator.close() && self.getView().setBusy(false);
				sap.suite.smartbusiness.utils.showErrorMessage(self._oTextsModel.getResourceBundle().getText("SAVE_ERROR"));
			});
		}
	},
	formatMeasureName : function(s){
		s = this.COLUMN_LABEL_MAPPING[s];
		if(s==this.DDA_MODEL.EVALUATION_DATA.COLUMN_NAME){

			s=s+ "(" + this.getView().getModel("i18n").getProperty("KPI_MEASURE") +")";
		}

		return s;
	},
	formatMeasureNameInList: function(name,type){
		if(type=="MEASURE")
			type=this.getView().getModel("i18n").getProperty("MEASURE");
		if(type=="DIMENSION")
			type=this.getView().getModel("i18n").getProperty("DIMENSION");
		if(name==this.DDA_MODEL.EVALUATION_DATA.COLUMN_NAME){

			type=this.getView().getModel("i18n").getProperty("KPI_MEASURE");
		}


		return type;
	},

	formatType:  function(type){
		if(type=="MEASURE")
			type=this.getView().getModel("i18n").getProperty("MEASURE");
		if(type=="DIMENSION")
			type=this.getView().getModel("i18n").getProperty("DIMENSION");
		return type;
	},

	/**
	 * Change the order of Dimensions And Measures Added
	 */
	sortDimensionsAndMeasures : function() {
		var oController = this;
		new sap.suite.ui.smartbusiness.lib.ListPersona({
			title : this.getView().getModel("i18n").getProperty("CHANGE_ORDER"),
			view : this.getView(),
			context : '/items',
			listItemContext : 'LABEL',
			formatter:jQuery.proxy(this.formatMeasureName,this),
			namedModel : 'SB_DDACONFIG',
			filter : {
				property : 'SELECTED',
				value : true
			},
			callback : function() {
				oController.refreshChart();
			}
		}).start();
	},

	onBack : function() {
		this.restoreFromConfigMasterSnapShot();
		window.history.back();
	},

	onCancel: function() {
		var self = this;
		new sap.m.Dialog({
			icon:"sap-icon://warning2",
			title:self._oTextsModel.getResourceBundle().getText("WARNING"),
			state:"Error",
			type:"Message",
			content:[new sap.m.Text({text:self._oTextsModel.getResourceBundle().getText("ARE_YOU_SURE")})],
			beginButton: new sap.m.Button({
				text:self._oTextsModel.getResourceBundle().getText("OK"),
				press: function(){
					self.restoreFromConfigMasterSnapShot();
					this.getParent().close();
					window.history.back();
				}
			}),
			endButton: new sap.m.Button({
				text:self._oTextsModel.getResourceBundle().getText("CANCEL"),
				press:function(){this.getParent().close();}
			})                                           
		}).open();
	},
	onExit:function(){
		this.restoreFromConfigMasterSnapShot();
	},

	//disable save button when no measure/dimension is selected
	enableOrDisableSave : function(){
		var msrDimArr = this._config.items.filter(function(s){return s.SELECTED});
		if(this.dda_config.chartConfig.type.toUpperCase() == "TABLE") this.canSave = true;
		if(msrDimArr.length && this.canSave){
			this.getView().byId("save-btn").setEnabled(true);
		}
		else{
			this.getView().byId("save-btn").setEnabled(false);
		}
	}
});

}; // end of sap/suite/ui/smartbusiness/designtime/drilldown/view/configureNewView.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.Chip') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.Chip");

sap.suite = sap.suite || {};
sap.suite.smartbusiness = sap.suite.smartbusiness || {};
sap.suite.smartbusiness.chip = (function() {
    var dryrun = false;
    var chipUrlMapping = {
            "NT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatornumeric/NumericTileChip.xml",
            "CT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorcontribution/ContributionTileChip.xml",
            "TT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorArea/AreaChartTileChip.xml",
            "AT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatordeviation/DeviationTileChip.xml"
    };
    var generateChipId = function(evaluation, timestamp) {
        var username = "ATH";
        try {
            if(sap.ushell && sap.ushell.Container && sap.ushell.Container.getService) {
                var userInfoService = sap.ushell.Container.getService("UserInfo");
                if(userInfoService && userInfoService.getId) {
                    username = userInfoService.getId() || "ATH";
                }
            }
        }catch(e){}
        return evaluation.ID + "_"+ username + "_"+ timestamp;
    };
    var getTileProperties = function(evaluation, tileType, semanticObject, semanticAction) {
        return  {
            "tileType" : tileType,
            "frameType" : "OneByOne",
            "navType" : 0,
            "semanticObject" : semanticObject || evaluation.COLUMN_NAME,
            "semanticAction"  : semanticAction || "analyzeSBKPIDetails",
            "appParameters" : {}
        };
    };
    var EVALUATION_PROPERTY_REQUIRED = [
      "ID","INDICATOR","INDICATOR_TITLE","INDICATOR_TYPE","GOAL_TYPE", "TITLE","SCALING",
      "ODATA_URL", "ODATA_ENTITYSET", "VIEW_NAME", "COLUMN_NAME", "OWNER_NAME","VALUES_SOURCE"
    ];
    var getEvaluationFilters = function(evaluation) {
        var filters = [];
        evaluation.FILTERS["results"].forEach(function(jsonObject) {
            delete jsonObject.__metadata;
            var obj = {};
            for(var prop in jsonObject) {
                if(jsonObject.hasOwnProperty(prop)) {
                    obj[prop] = jsonObject[prop];
                }
            }
            filters.push(obj);
        });
        return filters;
    };
    var getEvaluationValues = function(evaluation, oEvaluationValues) {
        if(oEvaluationValues) {
            return oEvaluationValues.evaluationValues;
        } else {
            var values = [];
            evaluation.VALUES["results"].forEach(function(jsonObject) {
                delete jsonObject.__metadata;
                var obj = {};
                for(var prop in jsonObject) {
                    if(jsonObject.hasOwnProperty(prop)) {
                        obj[prop] = jsonObject[prop];
                    }
                }
                values.push(obj);
            });
            return values;
        }
    };
    var _getAdditionFilters = function(filters) {
        var finalArray=  [];
        if(filters && filters.length) {
            filters.forEach(function(eachArray) {
                var object = {};
                object["NAME"] = eachArray[0];
                object["OPERATOR"] = eachArray[1];
                object["VALUE_1"] = eachArray[2];
                object["VALUE_2"] = eachArray[3];
                object["TYPE"] = "FI";
                finalArray.push(object);
            });
        }
        return finalArray;
    };
    var getEvaluationDetails = function(evaluation) {
        var evalObject = {};
        EVALUATION_PROPERTY_REQUIRED.forEach(function(eachEvalProperty){
            evalObject[eachEvalProperty] = evaluation[eachEvalProperty];
        });
        return evalObject;
    };
    var _appendSystemAlias = function(uri, sysAlias) {
    	if(sap.ushell && sap.ushell.Container && sap.ushell.Container.getService) {
    		var urlParsingService = sap.ushell.Container.getService("URLParsing");
    		if(urlParsingService) {
    			uri = urlParsingService.addSystemToServiceUrl(uri, sysAlias);
    		}
    	}
    	return uri;
    };
    var publishTileODataWrite = function(payload, systemAlias, sCallback, fCallback) {
    	var serviceUri = "/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata";
    	serviceUri = _appendSystemAlias(serviceUri, systemAlias);
        var ODataModel = sap.suite.smartbusiness.odata.getModelByServiceUri(serviceUri);
        ODataModel.create("/CHIPS_USER", payload, null, function() {
            sCallback.call();
        }, function(err) {
            fCallback.call(null,err);
        }, false);
    };
    var publishTileXsjsService = function(payload, systemAlias, sCallback, fCallback) {
    	var serviceUri = "/sap/hba/r/sb/core/logic/__token.xsjs";
    	serviceUri = _appendSystemAlias(serviceUri, systemAlias);
    	jQuery.ajax({
    		url : serviceUri,
    		type : "HEAD",
    		async : false,
    		headers : {
    			"X-CSRF-Token" : "Fetch"
    		},
    		success : function(data, status, xhr) {
    	    	serviceUri = "/sap/hba/r/sb/core/logic/addToCatalog.xsjs";
    	    	serviceUri = _appendSystemAlias(serviceUri, systemAlias);
        		var token = xhr.getResponseHeader("x-csrf-token");
        		jQuery.ajax({
        			url : serviceUri,
        			type : "POST",
        			async : false,
        			data : encodeURIComponent(JSON.stringify(payload)),
        			dataType : "json",
        			headers : {
        				"x-csrf-token" : token
        			},
        			success : function(data) {
        				sCallback.call(null, data);
        			},
        			error : function(err) {
        				fCallback.call(null, err);
        			}
        		});
    		},
    		error : function(err) {
    			fCallback.call(null, err);
    		}
    	});
    };
    return {
        savePersonalizedTile : function(oParam) {
            var response = {};
            /**
             * oParam {
             *         title : '',
             *         description:''
             *         evaluationId : '',//Mandatory
             *         tileType : '' , //Mandatory - PossibleValues : NT, TT, CT, AT
             *         semanticObject : '',
             *         semanticAction : '',
             *         additionalFilters : [
             *              ["COUNTRY","EQ","INDIA",""],
             *              ["TIME","BT","10:20","11:20"]
             *          ],
             *          additionalAppParameters : {
             *              StoryId : '',
             *              
             *          },
             *          evaluationValues : [
             *              //for Maximizing Kpi
             *              {"TYPE" : "TA", FIXED : 2000},
             *              {"TYPE" : "CL", FIXED : 3000},
             *              {"TYPE" : "WL", FIXED : 2500}
             *              //For MINiMIZING KPI
             *              {"TYPE" : "TA", FIXED : 2000},
             *              {"TYPE" : "CH", FIXED : 3000},
             *              {"TYPE" : "WH", FIXED : 2500}

             *              //for Target Kpi
             *              {"TYPE" : "CL", FIXED : 3000},
             *              {"TYPE" : "WL", FIXED : 2500}
             *              {"TYPE" : "TA", FIXED : 2000},
             *              {"TYPE" : "CH", FIXED : 3000},
             *              {"TYPE" : "WH", FIXED : 2500}
             *              
             *          ] 
             * }
             */
            if(oParam.evaluationId && oParam.tileType) {
                var evaluationData = sap.suite.smartbusiness.kpi.getEvaluationById({
                    id  : oParam.evaluationId,
                    cache : true,
                    filters : true,
                    thresholds : true,
                    useRuntimeService : true,
                    sapSystem : oParam.sapSystem
                });
                if(evaluationData && evaluationData.ID) {
                    var TIMESTAMP = Date.now()+"";
                    var CHIP_ID = generateChipId(evaluationData,TIMESTAMP);
                    var MASTER_OBJECT = {};
                    MASTER_OBJECT["id"] = CHIP_ID;
                    MASTER_OBJECT["tileType"] = oParam.tileType;
                    MASTER_OBJECT["url"] = chipUrlMapping[oParam.tileType];
                    MASTER_OBJECT["description"] = oParam.title || evaluationData.TITLE;
                    MASTER_OBJECT["title"] = evaluationData.INDICATOR_TITLE;
                    MASTER_OBJECT["catalogId"] = "HANA_CATALOG";
                    MASTER_OBJECT["configuration"] = {tileConfiguration:{}};
                    var TILE_PROPERTIES  =  getTileProperties(evaluationData, oParam.tileType, oParam.semanticObject, oParam.semanticAction);
                    TILE_PROPERTIES["id"] = CHIP_ID;
                    TILE_PROPERTIES["dimension"] = oParam.dimension;
                    var EVALUATION_FILTERS = JSON.stringify(getEvaluationFilters(evaluationData));
                    var EVALUATION_VALUES = getEvaluationValues(evaluationData, oParam.evaluationValues);
                    var EVALUATION = JSON.stringify(getEvaluationDetails(evaluationData));
                    MASTER_OBJECT.configuration.tileConfiguration["TILE_PROPERTIES"] = JSON.stringify(TILE_PROPERTIES);
                    MASTER_OBJECT.configuration.tileConfiguration["EVALUATION_VALUES"] = JSON.stringify(EVALUATION_VALUES);
                    MASTER_OBJECT.configuration.tileConfiguration["EVALUATION"] = EVALUATION;
                    MASTER_OBJECT.configuration.tileConfiguration["ADDITIONAL_FILTERS"] = JSON.stringify(_getAdditionFilters(oParam.additionalFilters));
                    MASTER_OBJECT.configuration.tileConfiguration["ADDITIONAL_APP_PARAMETERS"] = JSON.stringify(oParam.additionalAppParameters || {});
                    MASTER_OBJECT.configuration.tileConfiguration["timestamp"] = TIMESTAMP;
                    MASTER_OBJECT.configuration["isSufficient"] = "0";
                    MASTER_OBJECT["evaluationId"] = evaluationData.ID;
                    MASTER_OBJECT["keywords"] = oParam.keywords || null;
                    var configurationLength = JSON.stringify(MASTER_OBJECT.configuration).length;
                    if(configurationLength > 4096) {
                        MASTER_OBJECT.configuration.tileConfiguration["EVALUATION_FILTERS"] = JSON.stringify([]);
                        MASTER_OBJECT.configuration["isSufficient"] = "0";
                    }
                    MASTER_OBJECT["configuration"].tileConfiguration = JSON.stringify(MASTER_OBJECT["configuration"].tileConfiguration);
                    MASTER_OBJECT["configuration"] = JSON.stringify(MASTER_OBJECT["configuration"]);
                    publishTileXsjsService(MASTER_OBJECT, oParam.sapSystem, function(responseObject) {
                        response.status = "Success",
                        response.chipId = responseObject.chipId,
                        response.message="Tile Created Successfully";
                    }, function(errorObject) {
                        response.status="Failed",
                        response.message="Error Creating Tile";
                        response.errorDescription = errorObject;
                    });
                } else {
                    response.status="Failed",
                    response.message="Invalid Evaluation Id : "+oParam.evaluationId;
                }
            } else {
                response.status="Failed",
                response.message="Mandatory Param evaluationId or TileType is Missing";
            }
            return response;
        }
    };
})();

}; // end of sap/suite/ui/smartbusiness/lib/Chip.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.tiles.AreaChart') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.tiles.AreaChart");

sap.suite.ui.smartbusiness.tiles.Generic.extend("sap.suite.ui.smartbusiness.tiles.AreaChart", {
    metadata : {
        properties : {
            kpiValueRequired : {
                type : "boolean",
                defaultValue : false
            },
            tileType : {
                type : "string",
                defaultValue : "TT"
            }
        }
    },
    renderer : {} //No need to write Anything
});

sap.suite.ui.smartbusiness.tiles.AreaChart.prototype.init = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.init.apply(this);
    var buildChartItem = function (sName) {
        return new sap.suite.ui.commons.MicroAreaChartItem({
            color: "Neutral",
            points: {
                path: "/" + sName + "/data",
                template: new sap.suite.ui.commons.MicroAreaChartPoint({
                    x: "{day}",
                    y: "{balance}"

                })
            }
        });
    };
    var buildMACLabel = function (sName) {
        return new sap.suite.ui.commons.MicroAreaChartLabel({
            label: "{/" + sName + "/label}",
            color: "{/" + sName + "/color}"
        });
    };
    this.setAggregation("_tile", new sap.suite.ui.commons.GenericTile({
        header  :"{/header}",
        subheader  : "{/subheader}",
        size : this.getSize(),
        frameType : this.getFrameType(),
        tileContent : new sap.suite.ui.commons.TileContent({
            unit : "{/unit}",
            size: this.getSize(),
            footer : "{/footerNum}",
            content: new  sap.suite.ui.commons.MicroAreaChart({
                width: "{/width}",
                height: "{/height}",
                size: this.getSize(),
                target: buildChartItem("target"),
                innerMinThreshold: buildChartItem("innerMinThreshold"),
                innerMaxThreshold: buildChartItem("innerMaxThreshold"),
                minThreshold: buildChartItem("minThreshold"),
                maxThreshold: buildChartItem("maxThreshold"),
                chart: buildChartItem("chart"),
                minXValue: "{/minXValue}",
                maxXValue: "{/maxXValue}",
                minYValue: "{/minYValue}",
                maxYValue: "{/maxYValue}",
                firstXLabel: buildMACLabel("firstXLabel"),
                lastXLabel: buildMACLabel("lastXLabel"),
                firstYLabel: buildMACLabel("firstYLabel"),
                lastYLabel: buildMACLabel("lastYLabel"),
                minLabel: buildMACLabel("minLabel"),
                maxLabel: buildMACLabel("maxLabel"),
                
            })
        }),
        press: jQuery.proxy(this.tilePressed, this)
    }));
    this.jsonModel = new sap.ui.model.json.JSONModel();
    this.setModel(this.jsonModel);
};
sap.suite.ui.smartbusiness.tiles.AreaChart.prototype.onBeforeRendering = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.onBeforeRendering.apply(this);
    if(this.getContentOnly()) {
        var buildChartItem = function (sName) {
            return new sap.suite.ui.commons.MicroAreaChartItem({
                color: "Neutral",
                points: {
                    path: "/" + sName + "/data",
                    template: new sap.suite.ui.commons.MicroAreaChartPoint({
                        x: "{day}",
                        y: "{balance}"

                    })
                }
            });
        };
        var buildMACLabel = function (sName) {
            return new sap.suite.ui.commons.MicroAreaChartLabel({
                label: "{/" + sName + "/label}",
                color: "{/" + sName + "/color}"
            });
        };
        this.setAggregation("_tile", new sap.suite.ui.commons.TileContent({
            unit : "",
            size: this.getSize(),
            footer : "",
            content: new  sap.suite.ui.commons.MicroAreaChart({
                width: "{/width}",
                height: "{/height}",
                size: this.getSize(),
                target: buildChartItem("target"),
                innerMinThreshold: buildChartItem("innerMinThreshold"),
                innerMaxThreshold: buildChartItem("innerMaxThreshold"),
                minThreshold: buildChartItem("minThreshold"),
                maxThreshold: buildChartItem("maxThreshold"),
                chart: buildChartItem("chart"),
                minXValue: "{/minXValue}",
                maxXValue: "{/maxXValue}",
                minYValue: "{/minYValue}",
                maxYValue: "{/maxYValue}",
                firstXLabel: buildMACLabel("firstXLabel"),
                lastXLabel: buildMACLabel("lastXLabel"),
                firstYLabel: buildMACLabel("firstYLabel"),
                lastYLabel: buildMACLabel("lastYLabel"),
                minLabel: buildMACLabel("minLabel"),
                maxLabel: buildMACLabel("maxLabel"),
                
            })
        }));
    }
};
sap.suite.ui.smartbusiness.tiles.AreaChart.prototype.getEvalValueMeasureName = function(oConfig, type, retType){
    var evalValue = oConfig.VALUES.results;
    for(var i = 0; i < evalValue.length; i++){
        if(evalValue[i].TYPE == type)
            if(retType === "FIXED")
                return evalValue[i].FIXED;
            else
                return evalValue[i].COLUMN_NAME;
    }
};

sap.suite.ui.smartbusiness.tiles.AreaChart.prototype.doProcess = function() {
    var that = this;
    this._fetchDataForAreaChartTile(function(modelData) {
      var deviationTileObj={};
        /*deviationTileObj.data=kpiValue.kpiData;
        if(kpiValue.unitPrefix){
            deviationTileObj.unit = kpiValue.unitPrefix;
        }*/
        if(true || that.isAssociatedKpi()) {
            deviationTileObj.subheader= this.oConfig.TITLE;
            deviationTileObj.header= this.oConfig.INDICATOR_TITLE;
        }
        deviationTileObj=jQuery.extend({},deviationTileObj,modelData);
        that.jsonModel.setData(deviationTileObj);
        that.setDoneState();
    }, this.logError);
};

sap.suite.ui.smartbusiness.tiles.AreaChart.prototype._fetchDataForAreaChartTile = function(fnSuccess,fnError){
    var that = this;
    /* Preparing arguments for the prepareQueryServiceUri function */
    var oParam = {};
    this.oConfig=this.EVALUATION_DATA;
    oParam.serviceUri = this._addSystemAliasToUri(this.oConfig.ODATA_URL, this.getSapSystem());
    oParam.entitySet = this.oConfig.ODATA_ENTITYSET;
    oParam.measure = this.oConfig.COLUMN_NAME;
    oParam.dimension = this.getDimension();
    if(!this.getDimension()) {
        this.logError("Dimension is Missing : Can't Render Area Chart");
        return;
    }
    oParam.filter = this.getAllFilters();
    if(this.oConfig.VALUES_SOURCE == "MEASURE"){
        var fullyFormedMeasure = that.oConfig.COLUMN_NAME;
        switch(that.oConfig.GOAL_TYPE){
        case "MI" :
            that.sWarningHigh =  that.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
            that.sCriticalHigh =  that.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
            that.sTarget =  that.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
            that.sTrend =  that.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
            //fullyFormedMeasure += ","+that.sWarningHigh +"," +that.sCriticalHigh+","+ that.sTarget;
            break;
        case "MA" :
            that.sWarningLow =  that.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
            that.sCriticalLow =  that.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
            that.sTarget =  that.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
            that.sTrend =  that.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
            //fullyFormedMeasure += ","+that.sWarningLow +"," +that.sCriticalLow+","+ that.sTarget;
            break;
        case "RA" :
            that.sWarningHigh =  that.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
            that.sCriticalHigh =  that.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
            that.sTarget =  that.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
            that.sTrend =  that.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
            that.sWarningLow =  that.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
            that.sCriticalLow =  that.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
            //fullyFormedMeasure += ","+that.sWarningLow +"," +that.sCriticalLow+","+ that.sTarget + "," + that.sWarningHigh + "," + that.sCriticalHigh;
            break;
        }
        var _allMeasures = [that.sWarningHigh, that.sCriticalHigh, that.sTarget, that.sTrend, that.sWarningLow, that.sCriticalLow];
        _allMeasures.forEach(function(eachMeasureName) {
            if(eachMeasureName) {
                fullyFormedMeasure +=","+eachMeasureName;
            }
        }, this);
        oParam.measure = fullyFormedMeasure;
    }
    var finalQuery = sap.suite.smartbusiness.odata.getUri(oParam);
    var UOMPROPERTY = this.UOM_PROPERTY_MAPPING[this.oConfig.COLUMN_NAME];
    var UOMValue = "";
    this.areaChartODataRef = finalQuery.model.read(finalQuery.uri, null, null, true, function(data) {
        if(data && data.results && data.results.length) {
            if(UOMPROPERTY) {
                UOMValue = data.results[0][UOMPROPERTY];
            }
            oParam.dimension = that.TEXT_PROPERTY_MAPPING[that.getDimension()];
            var modelData=  that. _processDataForAreaChart(data,that.oConfig.VALUES_SOURCE,oParam.dimension,that.oConfig.COLUMN_NAME);
            modelData.unit = UOMValue ;
            fnSuccess.call(that,modelData);
        } else {
            fnError.call(that,"no Response from QueryServiceUri");
        }
    },function(eObject) {
        if(eObject && eObject.response) {
            jQuery.sap.log.error(eObject.message +" : "+eObject.request.requestUri);
        }
    });
};

sap.suite.ui.smartbusiness.tiles.AreaChart.prototype._processDataForAreaChart= function(data,type,dimensionName,sMeasure){
    var that = this;
    var evaluationValues = that.oConfig.VALUES.results;
    var dimensionArray = [];
    var measureArray = [];
    var wHArray = [];
    var cHArray = [];
    var cLArray = [];
    var wLArray = [];
    var dataLength = data.results.length;
    var scaleFactor = that.oConfig.SCALING;
    var firstXlabel = data.results[0][dimensionName];
    var minThresholdMeasure, maxThresholdMeasure, innerMinThresholdMeasure, innerMaxThresholdMeasure, targetMeasure;
    var lastXlabel = data.results[data.results.length - 1][dimensionName];
    var firstYLabelValue = Number(data.results[0][sMeasure]);
    var lastYLabelValue = Number(data.results[data.results.length - 1][sMeasure]);
    var goaltype = that.oConfig.GOAL_TYPE;

    for (i in data.results) {
        data.results[i][dimensionName] = Number(i);
        data.results[i][sMeasure] = Number(data.results[i][sMeasure]);
        that.sWarningHigh ? data.results[i][that.sWarningHigh] = Number(data.results[i][that.sWarningHigh]) :"";
        that.sCriticalHigh ? data.results[i][that.sCriticalHigh] = Number(data.results[i][that.sCriticalHigh]) :"";
        that.sCriticalLow ? data.results[i][that.sCriticalLow] = Number(data.results[i][that.sCriticalLow]) :"";
        that.sWarningLow ? data.results[i][that.sWarningLow] = Number(data.results[i][that.sWarningLow]) :"";
        that.sTarget ? data.results[i][that.sTarget] = Number(data.results[i][that.sTarget]) :"";
        that.sWarningHigh ? wHArray.push(data.results[i][that.sWarningHigh]) :"";
        that.sCriticalHigh ? cHArray.push(data.results[i][that.sCriticalHigh]) :"";
        that.sCriticalLow ? cLArray.push(data.results[i][that.sCriticalLow]):"";
        that.sWarningLow ?  wLArray.push(data.results[i][that.sWarningLow]) :"";
        dimensionArray.push(data.results[i][dimensionName]);
        measureArray.push(data.results[i][sMeasure]);
    }
    try {
        firstXlabel = that.formatOdataObjectToString(firstXlabel);
        lastXlabel = that.formatOdataObjectToString(lastXlabel);   
    } catch (e) {
        that.logError(e);
    }
    var minMeasure = Math.min.apply(Math, measureArray); //to obtain the starting value
    var oScaledValueFirst = "";
    var calculatedValueForScaling = firstYLabelValue;
    if(this.oConfig.SCALING == -2)
        calculatedValueForScaling *= 100;
    var formattedFirstYLabel = sap.suite.smartbusiness.utils.getLocaleFormattedValue(calculatedValueForScaling, this.oConfig.SCALING);
    var firstYLabel = formattedFirstYLabel.toString();
    if(this.oConfig.SCALING == -2)
        firstYLabel += " %";
    var maxMeasure = Math.max.apply(Math, measureArray); //to obtain the last value
    calculatedValueForScaling = lastYLabelValue;
    if(this.oConfig.SCALING == -2)
        calculatedValueForScaling *= 100;
    sap.ui.getCore().byId("m1e1 title")
    var formattedLastYLabel = sap.suite.smartbusiness.utils.getLocaleFormattedValue(calculatedValueForScaling, this.oConfig.SCALING);
    var lastYLabel = formattedLastYLabel.toString();
    if(this.oConfig.SCALING == -2)
        lastYLabel += " %";
    try {
        var minDimension = that.formatOdataObjectToString(Math.min.apply(Math, dimensionArray)); //to obtain the starting value 
        var maxDimension = that.formatOdataObjectToString(Math.max.apply(Math, dimensionArray)); //to obtain the last value
    } catch (e) {
        that.logError(e);
    }
    if(type == "MEASURE"){
        (wHArray.length !=0) ? (that.firstwH = wHArray[minDimension]) &&  (that.lastwH = wHArray[maxDimension]) :""; 
        (cHArray.length !=0) ? (that.firstcH = cHArray[minDimension]) && (that.lastcH = cHArray[maxDimension]) : ""; 
        (cLArray.length !=0) ? (that.firstcL = cLArray[minDimension]) && (that.lastcL = cLArray[maxDimension]) :"";
        (wLArray.length !=0) ? ( that.firstwL = wLArray[minDimension]) && (that.lastwL = wLArray[maxDimension]):"";
    }

    var updatedModel = {
        width: "100%",
        height: "100%",
        unit: that.unit || "",
        chart: {
            color: "Neutral",
            data: data.results
        },
        minXValue: minDimension,
        maxXValue: maxDimension,
        minYValue: minMeasure,
        maxYValue: maxMeasure,
        firstXLabel: {
            label: firstXlabel + "",
            color: "Neutral"
        },
        lastXLabel: {
            label: lastXlabel + "",
            color: "Neutral"
        },
        firstYLabel: {
            label: firstYLabel + "",
            color: "Neutral"
        },
        lastYLabel: {
            label: lastYLabel + "",
            color: "Neutral"
        },
        minLabel: {},
        maxLabel: {}
    };

    switch (goaltype) {
    case "MA":
        for (i in evaluationValues) {
            if (evaluationValues[i].TYPE == "CL") {
                updatedModel.minThreshold = {
                        color: "Error",
                    };
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                that.cl = Number(evaluationValues[i].FIXED);
                updatedModel.minThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                minThresholdMeasure = (type  == "MEASURE") ? that.sCriticalLow : sMeasure;
               
            } else if (evaluationValues[i].TYPE == "WL") {
                updatedModel.maxThreshold = {
                        color: "Good"
                    };
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                updatedModel.maxThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                maxThresholdMeasure= (type  == "MEASURE") ?  that.sWarningLow : sMeasure;
                that.wl = Number(evaluationValues[i].FIXED);
                   
                }
                 else if (evaluationValues[i].TYPE == "TA") {
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                updatedModel.target = {
                    color: "Neutral",
                };
                updatedModel.target.data = (type  == "MEASURE") ? data.results : [newObj];
                targetMeasure= (type  == "MEASURE") ? that.sTarget : sMeasure;
            }
        }
            updatedModel.innerMinThreshold = {
                data: [

                ]
            };
            updatedModel.innerMaxThreshold = {
                data: [

                ]
            };
            if(type  == "FIXED"){
                updatedModel.firstYLabel.color =  firstYLabelValue < that.cl ? "Error" : ((that.cl <= firstYLabelValue) && (firstYLabelValue <= that.wl)) ? "Critical" : (firstYLabelValue > that.wl) ? "Good" : "Neutral" ;
                updatedModel.lastYLabel.color = lastYLabelValue < that.cl ? "Error" : ((that.cl <= lastYLabelValue) && (lastYLabelValue <= that.wl)) ? "Critical" : (lastYLabelValue > that.wl) ? "Good" : "Neutral" ;
            }
            else if(type == "MEASURE" && that.firstwL && that.lastwL && that.firstcL && that.lastcL){
                updatedModel.firstYLabel.color = firstYLabelValue < that.firstcL ? "Error" : ((that.firstcL <= firstYLabelValue) && (firstYLabelValue <= that.firstwL)) ? "Critical" : (firstYLabelValue > that.firstwL) ? "Good": "Neutral" ;
                updatedModel.lastYLabel.color = lastYLabelValue < that.lastcL ? "Error" : ((that.lastcL <= lastYLabelValue) && (lastYLabelValue <= that.lastwL)) ? "Critical" : (lastYLabelValue > that.lastwL) ? "Good" : "Neutral" ;
            }

        break;
    case "MI":
        for (i in evaluationValues) {

            if (evaluationValues[i].TYPE == "CH") {
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                that.ch =  Number(evaluationValues[i].FIXED);
                updatedModel.maxThreshold = {
                    color: "Error",
                };
                updatedModel.maxThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                maxThresholdMeasure= (type  == "MEASURE") ? that.sCriticalHigh : sMeasure;
            } else if (evaluationValues[i].TYPE == "WH") {
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                that.wh = Number(evaluationValues[i].FIXED);
                updatedModel.minThreshold = {
                    color: "Good",
                };
                updatedModel.minThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                minThresholdMeasure= (type  == "MEASURE") ? that.sWarningHigh : sMeasure;
                
            } else if (evaluationValues[i].TYPE == "TA") {
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                updatedModel.target = {
                    color: "Neutral",
                };
                updatedModel.target.data = (type  == "MEASURE") ? data.results : [newObj];
                targetMeasure= (type  == "MEASURE") ? that.sTarget : sMeasure;
            }


        }
        if(type  == "FIXED"){
            updatedModel.firstYLabel.color = firstYLabelValue > that.ch ? "Error" : ((that.wh <= firstYLabelValue) && (firstYLabelValue <= that.ch)) ? "Critical" : (firstYLabelValue < that.wh) ? "Good" : "Neutral" ;
            updatedModel.lastYLabel.color = lastYLabelValue > that.ch ? "Error" : ((that.wh <= lastYLabelValue) && (lastYLabelValue <= that.ch)) ? "Critical" : (lastYLabelValue < that.wh) ? "Good" : "Neutral" ;
        }
        else if(type == "MEASURE" && that.firstwH && that.lastwH && that.firstcH && that.lastcH){
            updatedModel.firstYLabel.color = firstYLabelValue > that.firstcH ? "Error" : ((that.firstwH <= firstYLabelValue) && (firstYLabelValue <= that.firstcH)) ? "Critical" : (firstYLabelValue < that.firstwH) ? "Good" : "Neutral" ;
            updatedModel.lastYLabel.color = lastYLabelValue > that.lastcH ? "Error" : ((that.lastwH <= lastYLabelValue) && (lastYLabelValue <= that.lastcH)) ? "Critical" : (lastYLabelValue < that.lastwH) ? "Good" : "Neutral" ;
            
        }
        updatedModel.innerMaxThreshold = {
            data: [

            ]
        };
        updatedModel.innerMinThreshold = {
            data: [

            ]
        };
        break;
    case "RA":
        for (i in evaluationValues) {

            if (evaluationValues[i].TYPE == "CH") {
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                that.ch = Number(evaluationValues[i].FIXED);
                updatedModel.maxThreshold = {
                    color: "Error",
                };
                updatedModel.maxThreshold.data = (type  == "MEASURE") ?  data.results : [newObj];
                maxThresholdMeasure= (type  == "MEASURE") ? that.sCriticalHigh : sMeasure;
            } else if (evaluationValues[i].TYPE == "WH") {
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                that.wh = Number(evaluationValues[i].FIXED);
                updatedModel.innerMaxThreshold = {
                    color: "Good",
                };
                updatedModel.innerMaxThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                innerMaxThresholdMeasure= (type  == "MEASURE") ? that.sWarningHigh : sMeasure;
            } else if (evaluationValues[i].TYPE == "WL") {
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                that.wl = Number(evaluationValues[i].FIXED);
                updatedModel.innerMinThreshold = {
                    color: "Good",
                };
                updatedModel.innerMinThreshold.data = (type  == "MEASURE") ?  data.results : [newObj];
                innerMinThresholdMeasure= (type  == "MEASURE") ? that.sWarningLow : sMeasure;
            } else if (evaluationValues[i].TYPE == "CL") {
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                that.cl = Number(evaluationValues[i].FIXED);
                updatedModel.minThreshold = {
                    color: "Error",
                };
                updatedModel.minThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                minThresholdMeasure= (type  == "MEASURE") ? that.sCriticalLow : sMeasure;
            } else if (evaluationValues[i].TYPE == "TA") {
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                updatedModel.target = {
                    color: "Neutral",
                };
                updatedModel.target.data = (type  == "MEASURE") ? data.results : [newObj];
                targetMeasure= (type  == "MEASURE") ? that.sTarget : sMeasure;
            }
        }
        if(type  == "FIXED"){
            updatedModel.firstYLabel.color = (firstYLabelValue > that.ch || firstYLabelValue < that.cl ) ? "Error" : ((that.wh <= firstYLabelValue) && (firstYLabelValue <= that.ch)) || ((that.cl <= firstYLabelValue) && (firstYLabelValue <= that.wl))  ? "Critical" : ((firstYLabelValue >= that.wl) && (firstYLabelValue <= that.wh)) ? "Good" : "Neutral" ;
            updatedModel.lastYLabel.color = (lastYLabelValue > that.ch || lastYLabelValue < that.cl ) ? "Error" : ((that.wh <= lastYLabelValue) && (lastYLabelValue <= that.ch)) || ((that.cl <= lastYLabelValue) && (lastYLabelValue <= that.wl))  ? "Critical" : ((lastYLabelValue >= that.wl) && (lastYLabelValue <= that.wh)) ? "Good"  : "Neutral" ;
        }
        else if(type == "MEASURE" && that.firstwL && that.lastwL && that.firstcL && that.lastcL && that.firstwH && that.lastwH && that.firstcH && that.lastcH){
            updatedModel.firstYLabel.color = (firstYLabelValue > that.firstcH || firstYLabelValue < that.firstcL ) ? "Error" : ((that.firstwH <= firstYLabelValue) && (firstYLabelValue <= that.firstcH)) || ((that.firstcL <= firstYLabelValue) && (firstYLabelValue <= that.firstwL))  ? "Critical" : ((firstYLabelValue >= that.firstwL) && (firstYLabelValue <= that.firstwH)) ? "Good" : "Neutral" ;
            updatedModel.lastYLabel.color = (lastYLabelValue > that.lastcH || lastYLabelValue < that.lastcL ) ? "Error" : ((that.lastwH <= lastYLabelValue) && (lastYLabelValue <= that.lastcH)) || ((that.lastcL <= lastYLabelValue) && (lastYLabelValue <= that.lastwL))  ? "Critical" : ((lastYLabelValue >= that.lastwL) && (lastYLabelValue <= that.lastwH)) ? "Good" : "Neutral" ;
        }
        break;

    }

    var buildChartItem = function (sName, a, b, type) {
            return new sap.suite.ui.commons.MicroAreaChartItem({
                color: "{/" + sName + "/color}",
                points: {
                    path: "/" + sName + "/data",
                    template: new sap.suite.ui.commons.MicroAreaChartPoint({
                        x: "{" + a + "}",
                        y: "{" + b + "}"

                    })
                }
            });
    };
    var tileControlRef = null;
    if(this.getContentOnly()) {
    	tileControlRef = that.getTileControl();
    } else {
    	tileControlRef = that.getTileControl().getTileContent()[0].getContent();
    }
    tileControlRef.setTarget(buildChartItem("target", dimensionName, targetMeasure));
    tileControlRef.setInnerMinThreshold(buildChartItem("innerMinThreshold", dimensionName, innerMinThresholdMeasure));
    tileControlRef.setInnerMaxThreshold(buildChartItem("innerMaxThreshold", dimensionName, innerMaxThresholdMeasure));
    tileControlRef.setMinThreshold(buildChartItem("minThreshold", dimensionName, minThresholdMeasure));
    tileControlRef.setMaxThreshold(buildChartItem("maxThreshold", dimensionName, maxThresholdMeasure));
    tileControlRef.setChart(buildChartItem("chart", dimensionName, sMeasure));
    return updatedModel;



  
};
sap.suite.ui.smartbusiness.tiles.AreaChart.prototype.doDummyProcess = function() {
    this.jsonModel.setData(this.getDummyDataForAreaChartTile());
};



}; // end of sap/suite/ui/smartbusiness/tiles/AreaChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.tiles.Bullet') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.tiles.Bullet");

sap.suite.ui.smartbusiness.tiles.Generic.extend("sap.suite.ui.smartbusiness.tiles.Bullet", {
    metadata : {
        properties : {
            kpiValueRequired : {
                type : "boolean",
                defaultValue : true
            },
            tileType : {
                type : "string",
                defaultValue : "AT"
            }
        }
    },
    renderer : {} 
});

sap.suite.ui.smartbusiness.tiles.Bullet.prototype.init = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.init.apply(this);
    //Write Init Code Here

    //Tiles will be always in Full/Complete Mode
    this.setAggregation("_tile", new sap.suite.ui.commons.GenericTile({
        header  :"{/header}",
        subheader  : "{/subheader}",
        size : this.getSize(),
        frameType : this.getFrameType(),
        tileContent : new sap.suite.ui.commons.TileContent({
            unit : "{/unit}",
            size: this.getSize(),
            footer : "{/footerNum}",
            content: new sap.suite.ui.commons.BulletChart({  
                size: this.getSize(),
                state: "{/state}",
                scale : "{/scale}",
                actual: {
                    value: "{/actual/value}",
                    color: "{/actual/color}"
                },
                actualValueLabel: "{/actualValueLabel}",
                targetValue: "{/targetValue}",
                targetValueLabel: "{/targetValueLabel}",
                thresholds: {
                    template: new sap.suite.ui.commons.BulletChartData({
                        value: "{value}",
                        color: "{color}"
                    }),
                    path: "/thresholds"
                },
                showActualValue: "{/showActualValue}",
                showTargetValue: "{/showTargetValue}",

            })
        }),
        press: jQuery.proxy(this.tilePressed, this)
    }));    
    this.jsonModel = new sap.ui.model.json.JSONModel();
    this.setModel(this.jsonModel);
};
sap.suite.ui.smartbusiness.tiles.Bullet.prototype.onBeforeRendering = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.onBeforeRendering.apply(this);
    //Write onBeforeRendering Code Here

    if(this.getContentOnly()) {
        this.setAggregation("_tile", new sap.suite.ui.commons.BulletChart({  
            size: this.getSize(),
            state: "{/state}",
            scale : "{/scale}",
            actual: {
                value: "{/actual/value}",
                color: "{/actual/color}"
            },
            actualValueLabel: "{/actualValueLabel}",
            targetValue: "{/targetValue}",
            targetValueLabel: "{/targetValueLabel}",
            thresholds: {
                template: new sap.suite.ui.commons.BulletChartData({
                    value: "{value}",
                    color: "{color}"
                }),
                path: "/thresholds"
            },
            showActualValue: "{/showActualValue}",
            showTargetValue: "{/showTargetValue}",

        }));
    }

    //Later Just Update the Model Data

};

sap.suite.ui.smartbusiness.tiles.Bullet.prototype.doProcess = function() {
    var deviationTileObj={};
    var thresholdsArrayObjAndColor = this.getThresholdsObjAndColor(this.KPI_VALUE, this.EVALUATION_DATA.GOAL_TYPE,this.WARNING_LOW_VALUE,this.WARNING_HIGH_VALUE,this.CRITICAL_LOW_VALUE,this.CRITICAL_HIGH_VALUE);  
    var actualKpiObj={value:Number(this.KPI_VALUE),color:thresholdsArrayObjAndColor.returnColor};
    var calculatedValueForScaling = Number(this.KPI_VALUE);
    if(this.EVALUATION_DATA.SCALING == -2)
        calculatedValueForScaling *= 100;
    var formattedKpiValue  = sap.suite.smartbusiness.utils.getLocaleFormattedValue(calculatedValueForScaling, this.EVALUATION_DATA.SCALING);
    calculatedValueForScaling = Number(this.TARGET_VALUE);
    if(this.EVALUATION_DATA.SCALING == -2)
        calculatedValueForScaling *= 100;
    var formattedTargetValue = sap.suite.smartbusiness.utils.getLocaleFormattedValue(calculatedValueForScaling, this.EVALUATION_DATA.SCALING);
    if(true || this.isAssociatedKpi()) {
        deviationTileObj.subheader= this.EVALUATION_DATA.TITLE;
        deviationTileObj.header= this.EVALUATION_DATA.INDICATOR_TITLE;
    }
    deviationTileObj.actual=actualKpiObj;
    deviationTileObj.thresholds = [];
    deviationTileObj.thresholds = thresholdsArrayObjAndColor.arrObj;
    deviationTileObj.targetValue=Number(this.TARGET_VALUE);
    deviationTileObj.unit=this.UOM;
    //deviationTileObj.scale=this._oScalingFactor[this.EVALUATION_DATA.SCALING]; 
    deviationTileObj.actualValueLabel = formattedKpiValue.toString();
    deviationTileObj.targetValueLabel = formattedTargetValue.toString();
    if(this.EVALUATION_DATA.SCALING == -2){
        deviationTileObj.actualValueLabel += " %";
        deviationTileObj.targetValueLabel += " %";
    }

    this.jsonModel.setData(deviationTileObj);
    this.setDoneState();
};

/**
 * This method is called if tile is runing in DUMMY Mode
 */
sap.suite.ui.smartbusiness.tiles.Bullet.prototype.doDummyProcess = function() {
    this.jsonModel.setData(this.getDummyDataForBulletTile());
    this.setDoneState();
};
sap.suite.ui.smartbusiness.tiles.Bullet.prototype.getThresholdsObjAndColor = function(kpiValue,goalType,wL,wH,cL,cH) {
    var oThresholdObjAndColor = {};
    oThresholdObjAndColor.arrObj = [];
    oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Neutral;

    if(goalType === "MI") {
        if(this.hasSomeValue(cH,wH)) {
            cH = window.parseFloat(cH);
            wH = window.parseFloat(wH);
            oThresholdObjAndColor.arrObj.push({value:cH,color:sap.suite.ui.commons.InfoTileValueColor.Error});
            oThresholdObjAndColor.arrObj.push({value:wH,color:sap.suite.ui.commons.InfoTileValueColor.Critical});

            if(kpiValue < wH) {
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
            } 
            else if(kpiValue <= cH) {
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
            } 
            else {
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
            }
        }
        else{
            jQuery.sap.log.warning("One of the threshold values for Minimizing type KPI is missing");
        }

    } 
    else if(goalType === "MA") {
        if(this.hasSomeValue(cL, wL)) {
            cL = window.parseFloat(cL);
            wL = window.parseFloat(wL);
            oThresholdObjAndColor.arrObj.push({value:cL,color:sap.suite.ui.commons.InfoTileValueColor.Error});
            oThresholdObjAndColor.arrObj.push({value:wL,color:sap.suite.ui.commons.InfoTileValueColor.Critical});

            if(kpiValue < cL) {
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
            } 
            else if(kpiValue <= wL) {
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
            }
            else {
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
            }
        }
        else{
            jQuery.sap.log.warning("One of the threshold values for Maximizing type KPI is missing");
        }
    } 
    else {
        if(this.hasSomeValue(wL, wH, cL, cH)) {
            cH = window.parseFloat(cH);
            wH = window.parseFloat(wH);
            wL = window.parseFloat(wL);
            cL = window.parseFloat(cL);
            oThresholdObjAndColor.arrObj.push({value:cH,color:sap.suite.ui.commons.InfoTileValueColor.Error});
            oThresholdObjAndColor.arrObj.push({value:wH,color:sap.suite.ui.commons.InfoTileValueColor.Critical});
            oThresholdObjAndColor.arrObj.push({value:wL,color:sap.suite.ui.commons.InfoTileValueColor.Critical});
            oThresholdObjAndColor.arrObj.push({value:cL,color:sap.suite.ui.commons.InfoTileValueColor.Error});

            if(kpiValue < cL || kpiValue > cH) {
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
            } 
            else if((kpiValue >= cL && kpiValue <= wL) || (kpiValue >= wH && kpiValue <= cH)){
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
            } else {
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
            }
        }
        else{
            jQuery.sap.log.warning("One of the threshold values for Range type KPI is missing");
        }
    }
    return oThresholdObjAndColor; 
};


}; // end of sap/suite/ui/smartbusiness/tiles/Bullet.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.tiles.Comparison') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.tiles.Comparison");

sap.suite.ui.smartbusiness.tiles.Generic.extend("sap.suite.ui.smartbusiness.tiles.Comparison", {
    metadata : {
        properties : {
            kpiValueRequired : {
                type : "boolean",
                defaultValue : false
            },
            tileType : {
                type : "string",
                defaultValue : "CT"
            }
        }
    },
    renderer : {} //No need to write Anything
});

sap.suite.ui.smartbusiness.tiles.Comparison.prototype.init = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.init.apply(this);
    this.setAggregation("_tile", new sap.suite.ui.commons.GenericTile({
        header  :"{/header}",
        subheader  : "{/subheader}",
        size : this.getSize(),
        frameType : this.getFrameType(),
        tileContent : new sap.suite.ui.commons.TileContent({
            unit : "{/unit}",
            size: this.getSize(),
            footer : "{/footerNum}",
            content: new sap.suite.ui.commons.ComparisonChart({
                scale : "{/scale}",
                size: this.getSize(),
                state: "{/state}",
                data: {
                    template: new sap.suite.ui.commons.ComparisonData({
                        title: "{title}",
                        value : "{value}",
                        color: "{color}",
                        displayValue : "{displayValue}"
                    }),
                    path: "/data"
                }
            })
        }),
        press: jQuery.proxy(this.tilePressed, this)
    }));
    this.jsonModel = new sap.ui.model.json.JSONModel();
    this.setModel(this.jsonModel);
};
sap.suite.ui.smartbusiness.tiles.Comparison.prototype.onBeforeRendering = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.onBeforeRendering.apply(this);

    if(this.getContentOnly()) {
        this.setAggregation("_tile", new sap.suite.ui.commons.ComparisonChart({
            scale : "{/scale}",
            size: this.getSize(),
            state: "{/state}",
            data: {
                template: new sap.suite.ui.commons.ComparisonData({
                    title: "{title}",
                    value : "{value}",
                    color: "{color}",
                    displayValue : "{displayValue}"
                }),
                path: "/data"
            }
        }));
    }
};

sap.suite.ui.smartbusiness.tiles.Comparison.prototype.doProcess = function() {
    var that = this;
    this._fetchDataForComparisonTile(function(kpiValue) {
        var deviationTileObj={};
        deviationTileObj.data=kpiValue.kpiData;
        if(kpiValue.unitPrefix){
            deviationTileObj.unit = kpiValue.unitPrefix;
        }
        if(true || that.isAssociatedKpi()) {
            deviationTileObj.subheader= this.evaluationApi.getTitle();
            deviationTileObj.header= this.evaluationApi.getKpiName();
        }
        that.jsonModel.setData(deviationTileObj);
        that.setDoneState();
    }, this.logError);
};

sap.suite.ui.smartbusiness.tiles.Comparison.prototype._fetchDataForComparisonTile = function(fnSuccess,fnError) {
    var _getSortByClauseObject = function(tileConfiguration) {
        var fallback = [{name:this.EVALUATION_DATA.COLUMN_NAME, order : "desc"}];
        if(tileConfiguration && tileConfiguration.SORTING) {
            var sortingObject = tileConfiguration.SORTING;
            if((sortingObject.order == 'asc' || sortingObject.order == 'desc') && (sortingObject.by == 'M' || sortingObject.by == 'D')) {
                var rSortingClauseObject = [];
                rSortingClauseObject.push({
                    name : (sortingObject.by == 'M' ? this.evaluationApi.getKpiMeasureName() :  this.getDimension()),
                    order : sortingObject.order
                });
                return rSortingClauseObject;
            }
        }
        return fallback;
    };
    var that = this;
    /* Preparing arguments for the prepareQueryServiceUri function */
    var oParam = {};
    this.oConfig=this.EVALUATION_DATA;
    oParam.serviceUri = this._addSystemAliasToUri(this.evaluationApi.getODataUrl(), this.getSapSystem());
    oParam.entitySet = this.evaluationApi.getEntitySet();
    oParam.measure = this.evaluationApi.getKpiMeasureName();
    oParam.dimension = this.getDimension();
    oParam.filter = this.getAllFilters();
    oParam.sort = _getSortByClauseObject.apply(this, [this.getTileConfiguration()]);
    oParam.dataLimit = 3;        
    that.oConfig.FINALVALUE = {};
    oParam.sortingColumn =  this.evaluationApi.getKpiMeasureName();
    var finalQuery = sap.suite.smartbusiness.odata.getUri(oParam);
    var oUnitPrefix = this.UOM_PROPERTY_MAPPING[this.evaluationApi.getKpiMeasureName()];
    var oDimensions = this.TEXT_PROPERTY_MAPPING;
    this.comparisionChartODataRef = finalQuery.model.read(finalQuery.uri, null, null, true, function(data) {
        if(data && data.results && data.results.length) {
            if(oUnitPrefix) {
                that.oConfig.FINALVALUE.unitPrefix = data.results[0][oUnitPrefix];
            }
            that.oConfig.FINALVALUE.kpiData=data;
            oParam.dimension = oDimensions[that.getDimension()];
            that.oConfig.FINALVALUE.kpiData = that._processDataForComparisonChart(that.oConfig.FINALVALUE.kpiData,oParam.measure,oParam.dimension);
            fnSuccess.call(that,that.oConfig.FINALVALUE);
        } else {
            fnError.call(that,"no Response from QueryServiceUri");
        }
    },function(eObject) {
        if(eObject && eObject.response) {
            jQuery.sap.log.error(eObject.message +" : "+eObject.request.requestUri);
        }
    });
};

sap.suite.ui.smartbusiness.tiles.Comparison.prototype._processDataForComparisonChart= function(data,measure,dimension){
    var semanticMeasure = this.oConfig.PROPERTIES.semanticMeasure;
    var finalOutput= [];
    var tempVar;
    var that = this;
    for(var i=0;i<data.results.length;i++) {
        var eachData=data.results[i];
        var temp={};
        try {
            temp.title = eachData[dimension].toString();
        } 
        catch(e){
            temp.title = "";
        };
        temp.value=Number(eachData[measure]);
        var calculatedValueForScaling = Number(eachData[measure]);
        if(this.oConfig.SCALING == -2)
            calculatedValueForScaling *= 100;
        var tempVar = sap.suite.smartbusiness.utils.getLocaleFormattedValue(calculatedValueForScaling, this.oConfig.SCALING);
        temp.displayValue = tempVar.toString();
        if(this.oConfig.SCALING == -2)
            temp.displayValue += " %";
        if(typeof semanticMeasure === 'undefined' /*Instead semanticMeasure == void (0)*/){
            temp.color= "Neutral";
        }
        else {
            if(this.evaluationApi.isMaximizingKpi()){
                if(temp.value > eachData[semanticMeasure]){
                    temp.color= "Good";
                }
                else {
                    temp.color= "Error";
                }
            }
            else if(this.evaluationApi.isMinimizingKpi()){
                if(temp.value < eachData[semanticMeasure]){
                    temp.color= "Good";
                }
                else {
                    temp.color= "Error";
                }
            }
            else {
                temp.color= "Neutral";
            }
        }
        finalOutput.push(temp);
    }
    return finalOutput;     
};
sap.suite.ui.smartbusiness.tiles.Comparison.prototype.doDummyProcess = function() {
    this.jsonModel.setData(this.getDummyDataForComparisonTile());
};



}; // end of sap/suite/ui/smartbusiness/tiles/Comparison.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.drilldown.view.S3.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.drilldown.view.S3.controller');
sap.ui.getCore().loadLibrary("sap.suite.ui.commons");
jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained





jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained

sap.ca.scfld.md.controller.BaseDetailController.extend("sap.suite.ui.smartbusiness.designtime.drilldown.view.S3", {

	onInit : function() {
		this.DDA_MODEL = null;
		this.evaluationId = null;
		this.viewId = null;
		this.ddaFilter=this.byId("ddaFilter");
		this.initializeTileHeader();
		this.defineHeaderFooterOptions();
		this.oRouter.attachRoutePatternMatched(this.onRoutePatternMatched, this);
		this.busyIndicator = new sap.m.BusyDialog();

	},
	tileTypeMapping:{
		NT : "Numeric",
		AT : "Bullet",
		CT : "Comparison",
		TT : "AreaChart",
		CM:"MeasureComparison"
	},
	headerNumberFormatter:function(s){
		return s?"12,345.67":"";
	},
	headerNumberUnitFormatter:function(s){
		return s?"EUR":"";
	},
	bindUiToModel:function(){
		this.DDA_MODEL.bindModel(this.getView(),"SB_DDACONFIG");
	},
	initializeTileHeader:function(){
		var that=this;
		var tileContainer=this.byId("tileContainer");
		//var filter= new sap.ui.model.Filter("visible",sap.ui.model.FilterOperator.EQ,true);
		tileContainer.bindAggregation("items",{
			path:"SB_DDACONFIG>/HEADERS_VISIBLE",
			factory:function(sId,oBindingContext){
				var type=oBindingContext.getProperty("VISUALIZATION_TYPE");
				return new sap.suite.ui.smartbusiness.tiles[that.tileTypeMapping[type]]({
					evaluationId:that.evaluationId,
					mode:"DUMMY",
					header:	"{SB_DDACONFIG>TITLE}",
					subheader: "{SB_DDACONFIG>SUBTITLE}"
				}).addStyleClass("drilldownKpiTiles");

			},
			//filters:[filter]
		});
	},
	lauchConfigurator: function() {
		this.oRouter.navTo("configurator", {evaluationId: this.evaluationId, viewId: this.viewId});
		//this.evaluationId = null;
	},
	onRoutePatternMatched: function(oEvent) {
		var view = this.getView();

		if (oEvent.getParameter("name") === "detail") {
			
			try {
				
				//check if the model has to be refreshed due to an eval level save/delete
				if(this.oApplicationFacade.__refreshModel && this.oApplicationFacade.__refreshModel === 1) {
					this.getView().getModel() && this.getView().getModel().refresh();
				}
				var str=oEvent.getParameter("arguments").contextPath;
				var context = new sap.ui.model.Context(view.getModel(), '/' + str);
				view.setBindingContext(context);
				try{
					this.evaluationId = view.getBindingContext().getObject()["ID"];
				}catch(e){
					try{
						this.evaluationId=  str.match(/ID=[^,]+/g)[0].replace(/(ID=')|(')/g,"");
					}catch(e){
						this.evaluationId=str.replace(/EVALUATIONS_DDA\('|'\)/g,"")
					}
				}

				var evaluationId=oEvent.getParameter("arguments")["evaluationId"];
				if(evaluationId !== this.evaluationId) {
					this.DDA_MODEL =  sap.suite.smartbusiness.ddaconfig.Model.getInstance(this.evaluationId, true, this.getView().getModel("i18n"));
					this.EVALUATION = sap.suite.smartbusiness.kpi.parseEvaluation(this.DDA_MODEL.EVALUATION_DATA);
					var newViewId=this.DDA_MODEL.NEW_VIEWID;
					var viewId = this.DDA_MODEL.getConfigurator().getDefaultViewId();
					if(viewId != null) {
						this.viewId = viewId;
						this.DDA_MODEL.setViewId(viewId);
					} else {
						this.viewId = newViewId;
					}
					this.bindUiToModel();
					this.ddaFilter.setEvaluationData(this.EVALUATION);
					this.ddaFilter.setEvaluationId(this.evaluationId);
					var filterDimensions=[];
					this.getView().getModel("SB_DDACONFIG").getProperty("/FILTERS").forEach(function(s){
						filterDimensions.push(s.name); 
					})
					this.ddaFilter.setDimensions(filterDimensions);
				}else{
					this.bindUiToModel();
					if(this.viewId==newViewId && this.getView().getModel("SB_DDACONFIG").getProperty("/ID")!=newViewId ){

					}
				}
				//store init count of headers and filters
				this.INIT_COUNT_HEADERS = this.getView().getModel("SB_DDACONFIG").getData()["HEADERS"].length;
				this.INIT_COUNT_FILTERS = this.getView().getModel("SB_DDACONFIG").getData()["FILTERS"].length;

				this._oTextsModel = this.getView().getModel("i18n");
				var otoolBar = this.getView().byId("chartToolbar");
				otoolBar._oFirstDimensionSelect.bindProperty("selectedKey","SB_DDACONFIG>/ID");

				this._oModel = this.getView().getModel("SB_DDACONFIG").getData();
				this.refreshChart();
				
				if(this.copyClipboard && Object.keys(this.copyClipboard) && Object.keys(this.copyClipboard).length) {
					this.checkEvaluationForPaste();
				}

				if(this.getPage().getFooter()) {
					this.checkForCopy();
				}
				
			}
			catch(e) {
				sap.suite.smartbusiness.utils.showErrorMessage(this.oApplicationFacade.getResourceBundle().getText("FAILED_TO_LOAD_ODATA"), e.message);
			}
			
		}
	}, 
	
	defineHeaderFooterOptions:function(){
		var that = this;
		this.oHeaderFooterOptions = { 
				bSuppressBookmarkButton : true,
				sI18NDetailTitle: "DRILLDOWN_CONFIG_DETAILS",
				oEditBtn : {
					sI18nBtnTxt : "CONFIGURE",
					onBtnPressed : function(evt) {
						that.lauchConfigurator()
					},
					bEnabled : false, // default true
				},
				buttonList : [
				              {
				            	  sId : "Delete", // optional
				            	  sI18nBtnTxt : "DELETE",
				            	  onBtnPressed : function(evt) {

				            		  that.onDeleteConfiguration();
				            	  }
				              },
				              {
				            	  sId : "Copy", // optional
				            	  sI18nBtnTxt : "COPY",
				            	  onBtnPressed : function(evt) {
				            		  that.copyEvaluationToClipboard();
				            	  }
				              },
				              {
				            	  sId : "Paste", // optional
				            	  sI18nBtnTxt : "PASTE",
				            	  onBtnPressed : function(evt) {
				            		  that.copyDDAConfiguration();
				            	  }
				              }
				              /* {
				                  sId : "cancel", // optional
				                  sI18nBtnTxt : "Cancel",
				                  onBtnPressed : function(evt) {
				                  }
				             },*/

				              ]
		
		};
	},
	
	getHeaderFooterOptions : function() {
		return this.oHeaderFooterOptions;
	},

	refreshChart: function() {
		var oController = this ;
		var button = this.getView().byId("chartToolbar").getToolBar().getContentRight();
		if (button) {
			if(button[0] && (!(button[0].getVisible()))) { button[0].setVisible(true); }
			if(button[1] && (!(button[1].getVisible()))) { button[1].setVisible(true); }
			if(button[3] && (!(button[3].getVisible()))) { button[3].setVisible(true); }
			if(button[0])
				button[0].firePress();
		}
				
		this.oChartDataModel = new sap.ui.model.json.JSONModel() ;
		this.oChartData = [] ;
				
		this.dda_chart = this.getView().byId("chartRef") ;	
		this.dda_chart.setStackedChartWidthEnhancer(false);
		this.dda_table = this.getView().byId("chartTable") ;		

		var tmpData = this._oModel;
		this.dda_config = {} ;
		this.dda_config.chartConfig = {
				mode: tmpData.DATA_MODE || "DUMMY",
				title: "",
				dataLimit: tmpData.DATA_LIMIT || null,	
				dataLimitations: tmpData.DATA_LIMITATIONS || false,
				type: (tmpData.CHART_TYPE).toUpperCase() || "BAR",
				axis: tmpData.AXIS_TYPE || "SINGLE",
				value: tmpData.VALUE_TYPE || "ABSOLUTE",
				colorScheme: tmpData.COLOR_SCHEME || "NONE",
				thresholdMeasure: tmpData.THRESHOLD_MEASURE || ""
		} ;

		this.dda_config.columnsConfig = [] ;
		for(var i=0;i<tmpData.COLUMNS.length;i++) {
			this.dda_config.columnsConfig.push({
				name: tmpData.COLUMNS[i].NAME,
				type: tmpData.COLUMNS[i].TYPE,
				visibility: tmpData.COLUMNS[i].VISIBILITY || "BOTH",
				sortOrder: tmpData.COLUMNS[i].SORT_ORDER || "NONE",
				sortBy: tmpData.COLUMNS[i].SORT_BY || "",
				axis: tmpData.COLUMNS[i].AXIS || 1,
				stacking: tmpData.COLUMNS[i].STACKING || 0,
				color:tmpData.COLOR_SCHEME=="MANUAL_NON_SEMANTIC"?tmpData.COLUMNS[i].COLOR1:tmpData.COLOR_SCHEME=="MANUAL_SEMANTIC"?tmpData.COLUMNS[i].COLOR2:""
			}) ;
		}			

		this.oColumns = [] ;
		this.oDimensions = [] ;
		this.oMeasures = [] ;
		this.dimNameArray = [] ;
		this.msrNameArray = [] ;
		this.chartDimensions = [] ;
		this.chartDimNames = [] ;
		this.chartMeasures = [] ;
		this.chartMsrNames = [] ;
		this.tableDimensions = [] ;
		this.tableDimNames = [] ;
		this.tableMeasures = [] ;
		this.tableMsrNames = [] ;
		for(var i=0;i<this.dda_config.columnsConfig.length;i++) {
			this.oColumns.push(this.dda_config.columnsConfig[i]);
			if((this.dda_config.columnsConfig[i].type).toUpperCase() === "DIMENSION") {
				this.oDimensions.push(this.dda_config.columnsConfig[i]) ;
				this.dimNameArray.push(this.dda_config.columnsConfig[i].name) ;
				if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "CHART") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
					this.chartDimensions.push(this.dda_config.columnsConfig[i]) ;
					this.chartDimNames.push(this.dda_config.columnsConfig[i].name) ;
			    }
				if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "TABLE") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
			    	this.tableDimensions.push(this.dda_config.columnsConfig[i]) ;
			    	this.tableDimNames.push(this.dda_config.columnsConfig[i].name) ;
			    }	
			} else if((this.dda_config.columnsConfig[i].type).toUpperCase() === "MEASURE") {
				this.oMeasures.push(this.dda_config.columnsConfig[i]) ;
				this.msrNameArray.push(this.dda_config.columnsConfig[i].name) ;
				if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "CHART") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
					this.chartMeasures.push(this.dda_config.columnsConfig[i]) ;
					this.chartMsrNames.push(this.dda_config.columnsConfig[i].name) ;
			    }
				if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "TABLE") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
			    	this.tableMeasures.push(this.dda_config.columnsConfig[i]) ;
			    	this.tableMsrNames.push(this.dda_config.columnsConfig[i].name) ;
			    }
			}
		}
		
		// check for atleast one dimension & measure :
		if((!(this.chartDimensions.length)) || (!(this.chartMeasures.length))) {
			this.dda_chart.setDataset(new sap.viz.core.FlattenedDataset({}));
			return ;
		}			
		// -------------------------------------------
		
		this.stacking = this.getStacking(this.chartMeasures,this.chartDimensions);                        // TODO      workaround for stacking .
		this.isStackMsr = false;
		this.isStackDim = false;
		if(this.stacking.isEnabled && (this.stacking.type == "M"))                                     
			this.isStackMsr = true;
		else if(this.stacking.isEnabled && (this.stacking.type == "D")) 
			this.isStackDim = true;
		
		// getting chart type
		this.sapCaChartType = this.getSapCaChartType() ;	
		
		this.dda_chart.setAdvancedChartSettings({plotArea: {
													            animation: {
													                dataLoading: false,
													                dataUpdating: false,
													                resizing: false
													            }
															},
															legend:   {
															  title: { visible: false }
															}          
												});
		

		// get data for chart.....................
			if((this.dda_config.chartConfig.mode).toUpperCase() === "DUMMY") {
				this.oChartData = this.getDummyDataForChart(this.dimNameArray,this.msrNameArray) ;
				this.oChartDataModel.setData({businessData: oController.oChartData}) ;
			} else if((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME") {
				this.getRuntimeChartData(this.dimNameArray,this.msrNameArray) ;           // TODO        P.S.  write code for avoiding multiple calls - caching .
			}						
			
			//getting labels , texts etc.
			try {
				var mProperties = sap.suite.smartbusiness.odata.properties(this._oModel.QUERY_SERVICE_URI,this._oModel.QUERY_ENTITY_SET);
			}
			catch(e) {
				jQuery.sap.log.error("Failed to instantiate the odata model");
				throw e;
			}
	        this.column_labels_mapping = mProperties.getLabelMappingObject();
	        this.dimension_text_property_mapping = mProperties.getTextPropertyMappingObject();
	        this.measure_unit_property_mapping = mProperties.getUnitPropertyMappingObject();
			
		//----------------------------------------	
						
		// if chart type = Table , do following :
		if((this.sapCaChartType).toUpperCase() === "TABLE") {
			this.updateTable(this.tableDimensions, this.tableMeasures);
			if (button) {
				if(button[0]) { button[0].setVisible(false); }
				if(button[1]) { button[1].setVisible(true); }
				if(button[3]) { button[3].setVisible(false); }
				if(button[1]) { button[1].firePress(); }
			}
			return ;
		}
		// --------------------------------------------
		
		// if dual chart is chosen and there is no measure with axis 1 or 2 :
		if((((this.dda_config.chartConfig.type).toUpperCase() == "BAR") && (this.dda_config.chartConfig.axis == "DUAL")) || (((this.dda_config.chartConfig.type).toUpperCase() == "COLUMN") && (this.dda_config.chartConfig.axis == "DUAL"))) {
			var isOneMsrAxis1 = false;
			var isOneMsrAxis2 = false;
			for(var i=0;i<this.chartMeasures.length;i++) {
				if(this.chartMeasures[i].axis == 1)
					isOneMsrAxis1 = true;
				else if(this.chartMeasures[i].axis == 2)
					isOneMsrAxis2 = true;
			}
			
			if(!(isOneMsrAxis1) || !(isOneMsrAxis2)) {
				//var alert_text = "There is no measure with axis : "+(isOneMsrAxis1 ? 2 : 1)+". Dual Axis charts require atleast one measure with axis 1 and one with axis 2 . Kindly configure the same for proper simulation.";
				sap.m.MessageBox.alert(oController._oTextsModel.getResourceBundle().getText("SELECT_MEASURE_FOR_AXIS",(isOneMsrAxis1 ? 2 : 1)));
				return ;
			}
		}
		// --------------------------------------------
		// if bubble chart chosen , but less than 3 measures selected .
		if(((this.dda_config.chartConfig.type).toUpperCase() === "BUBBLE") && (this.chartMeasures.length < 3)) {
			sap.m.MessageBox.alert(oController._oTextsModel.getResourceBundle().getText("BUBBLE_CHART_MEASURE_COUNT"));
			return;
		} 	
		
		// --------------------------------------------
				
		this.dda_chart.setChartType(this.sapCaChartType) ;	
				
		this.oDataset = this.create_Dataset(this.chartDimensions,this.chartMeasures) ;                                
		
		// axis formatters : 
		var chartType = this.dda_config.chartConfig.type ;
		var axisType = this.dda_config.chartConfig.axis ;
		var valueType = this.dda_config.chartConfig.value ;
		var locale=new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
    	var percentFormatter = sap.ca.ui.model.format.NumberFormat.getInstance({},locale);
		if ((chartType == 'BAR') && (valueType == "ABSOLUTE")) {
			this.dda_chart.setXAxisLabelFormatter(this.formatChartNumbers.bind(this));
			this.dda_chart.setYAxisLabelFormatter(this.pseudoChartFormatter);
			if(axisType == 'DUAL')
			{
				this.dda_chart.setXAxis2LabelFormatter(this.formatChartNumbers.bind(this));
			}
		} else if(chartType == 'BUBBLE') {
			this.dda_chart.setXAxisLabelFormatter(this.formatChartNumbers.bind(this));
			this.dda_chart.setYAxisLabelFormatter(this.formatChartNumbers.bind(this));
		} else if(((chartType == 'BAR') || (chartType == 'COLUMN')) && (valueType == 'PERCENTAGE')) {
			if(chartType == 'BAR') {
				this.dda_chart.setXAxisLabelFormatter(function(rawValue){return percentFormatter.format_percentage(rawValue);});
				this.dda_chart.setYAxisLabelFormatter(this.pseudoChartFormatter);
				if(axisType == 'DUAL') {
					this.dda_chart.setXAxis2LabelFormatter(function(rawValue){return percentFormatter.format_percentage(rawValue);});
				}
			}
			else {
				this.dda_chart.setYAxisLabelFormatter(function(rawValue){return percentFormatter.format_percentage(rawValue);});
				this.dda_chart.setXAxisLabelFormatter(this.pseudoChartFormatter);
				if(axisType == 'DUAL') {
					this.dda_chart.setYAxis2LabelFormatter(function(rawValue){return percentFormatter.format_percentage(rawValue);});
				}
			}
		} else {
			this.dda_chart.setYAxisLabelFormatter(this.formatChartNumbers.bind(this));
			this.dda_chart.setXAxisLabelFormatter(this.pseudoChartFormatter);
			if((chartType == 'COLUMN') && (axisType == 'DUAL'))
			{
				this.dda_chart.setYAxis2LabelFormatter(this.formatChartNumbers.bind(this));
			}
		}
		//--------------------------------------
		
		// data label :
		this.dda_chart.setDataLabelFormatter([
		                                     [this.formatChartNumbers.bind(this)]
		                                     ]);
		//--------------------------------------
		
		// Setting "in %" in axis for 100 percent charts :
		if(((chartType == 'BAR') || (chartType == 'COLUMN')) && (valueType == 'PERCENTAGE')) {
			var formatterArray=[[],[],[]] ;
			for(var k=0;k<this.chartMsrNames.length;k++){
				formatterArray[0].push(oController.getChartPercentFormatter(true));
				formatterArray[1].push(oController.getChartPercentFormatter(true));
			}
			this.dda_chart.setPopoverFormatter(formatterArray);
		}

		this.dda_chart.setDataset(this.oDataset) ;
		this.dda_chart.setModel(this.oChartDataModel) ;

		// show or hide legend 
		this.showChartLegendIfApplicable(this.chartDimNames,this.chartMsrNames);


		// implement custom coloring ..............................
		if((this.dda_config.chartConfig.type == "BAR") || (this.dda_config.chartConfig.type == "COLUMN") || (this.dda_config.chartConfig.type == "COMBINATION") || (this.dda_config.chartConfig.type == "LINE")) {
			if((this.dda_config.chartConfig.colorScheme).toUpperCase() === "AUTO_SEMANTIC") {
				var thresholdmsr = this.dda_config.chartConfig.thresholdMeasure || "";                 // || (this.chartMeasures)[0].name ;         // TODO                                       
				var colorArray = [];
				var tmsr = -1;
				for(var i=0;i<this.chartMeasures.length;i++) {
					colorArray.push({color: sap.ca.ui.charts.ChartSemanticColor.GoodLight}) ;
					if(this.chartMeasures[i].name === thresholdmsr)
						tmsr = i ;
				}
				if(tmsr >= 0)
					colorArray[tmsr].color = sap.ca.ui.charts.ChartSemanticColor.Neutral ;
				this.applyCustomColoring(this.dda_chart, this.dda_config.chartConfig.colorScheme, colorArray, thresholdmsr, this.DDA_MODEL.EVALUATION_DATA.GOAL_TYPE) ;
			} else if(((this.dda_config.chartConfig.colorScheme).toUpperCase() === "MANUAL_SEMANTIC") || ((this.dda_config.chartConfig.colorScheme).toUpperCase() === "MANUAL_NON_SEMANTIC")) {
				this.applyCustomColoring(this.dda_chart, this.dda_config.chartConfig.colorScheme, this.chartMeasures) ;
			}
		}
		//---------------------------------------------------------		
		
		// update table :
		this.updateTable(this.tableDimensions, this.tableMeasures);
	},  

	getSapCaChartType: function() {
		
		var sapCaChartType = sap.ca.ui.charts.ChartType.Bar ;
		var chartType = this.dda_config.chartConfig.type ;
		var axisType = this.dda_config.chartConfig.axis ;
		var valueType = this.dda_config.chartConfig.value ;
		var stacking = (this.isStackMsr || (this.isStackDim && (this.chartDimensions.length > 1))) ? true : false ;
		
		switch (chartType) {
		case "BAR":
			if(axisType === "SINGLE") {
				if(valueType === "ABSOLUTE") {
					if(stacking) {
						sapCaChartType = sap.ca.ui.charts.ChartType.StackedBar;
					} else {
						sapCaChartType = sap.ca.ui.charts.ChartType.Bar;
					}
				} else if(valueType === "PERCENTAGE") {
					sapCaChartType = sap.ca.ui.charts.ChartType.StackedBar100;
				}
			} else if(axisType === "DUAL") {
				if(valueType === "ABSOLUTE") {
					sapCaChartType = sap.ca.ui.charts.ChartType.DualStackedBar;
				} else if(valueType === "PERCENTAGE") {
					sapCaChartType = sap.ca.ui.charts.ChartType.DualStackedBar100;
				}
			} 
			break;

		case "COLUMN":
			if(axisType === "SINGLE") {
				if(valueType === "ABSOLUTE") {
					if(stacking) {
						sapCaChartType = sap.ca.ui.charts.ChartType.StackedColumn;
					} else {
						sapCaChartType = sap.ca.ui.charts.ChartType.Column;
					}
				} else if(valueType === "PERCENTAGE") {
					sapCaChartType = sap.ca.ui.charts.ChartType.StackedColumn100;
				}
			} else if(axisType === "DUAL") {
				if(valueType === "ABSOLUTE") {
					sapCaChartType = sap.ca.ui.charts.ChartType.DualStackedColumn;
				} else if(valueType === "PERCENTAGE") {
					sapCaChartType = sap.ca.ui.charts.ChartType.DualStackedColumn100;
				}
			} 
			break;

		case "LINE":
			sapCaChartType = sap.ca.ui.charts.ChartType.Line;
			break;

		case "COMBINATION":
			sapCaChartType = sap.ca.ui.charts.ChartType.Combination;
			break;

		case "BUBBLE":
			sapCaChartType = sap.ca.ui.charts.ChartType.Bubble;
			break;

		case "TABLE":
			sapCaChartType = "TABLE";
			break;

		default:
			sapCaChartType = sap.ca.ui.charts.ChartType.Bar ;

		}
		
		return sapCaChartType;
	},
	
	showChartLegendIfApplicable : function(dimensions, measures) {
   	 	var that = this;
        var otoolbar = this.getView().byId("chartToolbar") ;
        var chtype = this.dda_config.chartConfig.type ;
           
        var isStackApplied = (((chtype == "BAR") || (chtype == "COLUMN")) && (this.isisStackDim) && (this.getDimensionToBeStacked(that.chartDimensions)) && (dimensions.length > 1)) ? true : false ;        
        
        if((measures.length > 1) || (isStackApplied)) {             
        	otoolbar.setShowLegend(true);
        } else {
        	otoolbar.setShowLegend(false);
        }
    },
    
    getChartPercentFormatter: function(isStandard){
 		var locale=new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
 		function isNumber(n) {
 			return !isNaN(parseFloat(n)) && isFinite(n);
 		}
 		var formatterConstructor={style:isStandard?'standard':'short'};
 		//if(dec||dec==0){formatterConstructor["shortDecimals"]=dec;}
 		var chartFormatter=sap.ca.ui.model.format.NumberFormat.getInstance(formatterConstructor,locale);
 		return function(s){
 			return isNumber(s)?chartFormatter.format_percentage(s):s;
 		};
     },
	
	getStacking: function(measures,dimensions) {													    // TODO
		var oStacking = {};
		oStacking.isEnabled = false;
		oStacking.type = "none";
		
		for(var i=0;i<measures.length;i++) {
			if(measures[i].stacking === 1) {
				oStacking.isEnabled = true;
				oStacking.type = "M";
			}				
		}
		if(!(oStacking.isEnabled)) {
			for(var i=0;i<dimensions.length;i++) {
				if(dimensions[i].stacking === 1) {
					oStacking.isEnabled = true;
					oStacking.type = "D";
				}				
			}
		}
		
		return oStacking;
	},
	
	setStacking: function(isEnabled,type,columns) {																// TODO     type : M for measure , D for dimension and N for none .
		var that = this;
		if(isEnabled) {
			if(type == "M") {
				for(var i=0;i<columns.length;i++) {
					if((columns[i].TYPE).toUpperCase() === "MEASURE") {
						columns[i].STACKING = 1;
					} else if((columns[i].TYPE).toUpperCase() === "DIMENSION") {
						columns[i].STACKING = 0;
					}	
				}
			} else if(type == "D") {
				for(var i=0;i<columns.length;i++) {
					if((columns[i].TYPE).toUpperCase() === "MEASURE") {
						columns[i].STACKING = 0;
					} else if((columns[i].TYPE).toUpperCase() === "DIMENSION") {
						columns[i].STACKING = 1;
					}				
				}
			}
		} else {
			for(var i=0;i<columns.length;i++) {
				columns[i].STACKING = 0;
			}
		}		
	},
	
	getDimensionToBeStacked: function(dimensions) {
		var oDim = null;
		for(var i=0;i<dimensions.length;i++) {
			if(dimensions[i].axis === 2) {
				oDim = dimensions[i];
				break;
			}
		}
		
		return oDim ;
	},
	
	setDimensionToBeStacked: function(columns,stackDim) {
		if(stackDim) {
			for(var i=0;i<columns.length;i++) {
				if((columns[i].TYPE).toUpperCase() === "DIMENSION") {
					columns[i].AXIS = 1;
					if(columns[i].NAME === stackDim) {
						columns[i].AXIS = 2;
					}
				}
			}
		}
	},
	
	updateColumnProperty: function(columns,name,property,value) {
		for(var i=0;i<columns.length;i++) {
			if(columns[i].NAME === name) {
				(columns[i])[property] = value;
				break;
			}
		}
	},
	
	getMeasuresByAxis: function(columns) {
		var dualMsr = {};
		dualMsr.axis1 = {};
		dualMsr.axis1.objArr = [];
		dualMsr.axis1.nameArr = [];
		dualMsr.axis2 = {};
		dualMsr.axis2.objArr = [];
		dualMsr.axis2.nameArr = [];
		
		for(var i=0;i<columns.length;i++) {
			if(columns[i].axis === 1) {
				dualMsr.axis1.objArr.push(columns[i]);
				dualMsr.axis1.nameArr.push(columns[i].name);
			} else if(columns[i].axis === 2) {
				dualMsr.axis2.objArr.push(columns[i]);
				dualMsr.axis2.nameArr.push(columns[i].name);
			}
		}
		return dualMsr;
	},
	
	create_Dataset: function(dimensions,measures) {
		
		var oController = this;
		
		var chtype = this.dda_config.chartConfig.type || "BAR";
		var axisType = this.dda_config.chartConfig.axis || "SINGLE";
		var valueType = this.dda_config.chartConfig.value || "ABSOLUTE";
		var stacking = this.isStackMsr;
		var dimensionToBeStacked = this.getDimensionToBeStacked(dimensions);
		
		var dataset = new sap.viz.core.FlattenedDataset({
			data: {
				path: "/businessData"
			}
		});
		
		// setting dimensions :

		for (var i = 0; i < dimensions.length; i++) {
			var val = ((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME")? this.dimension_text_property_mapping[dimensions[i].name] : dimensions[i].name;
			var oAxis = 1;
			if(((chtype == "BAR") || (chtype == "COLUMN")) && (this.isStackDim) && (dimensionToBeStacked) && (val === dimensionToBeStacked.name) && (dimensions.length > 1)) {
				oAxis = 2;
				this.dda_chart.setStackedChartWidthEnhancer(true);
			}
			
			var dimchart = new sap.viz.ui5.data.DimensionDefinition({
				axis: oAxis,
				value: "{" + val + "}",
				name: this.column_labels_mapping[dimensions[i].name] || dimensions[i].name
			});
			dataset.addDimension(dimchart);
		}
		
		// setting measures :

		if ((chtype == "LINE") || (chtype == "COMBINATION") || ((chtype == "BAR") && (axisType == "SINGLE")) || ((chtype == "COLUMN") && (axisType == "SINGLE"))) {	

			for (var i = 0; i < measures.length; i++) {
				var val = measures[i].name;
				var msrchart = new sap.viz.ui5.data.MeasureDefinition({
					name: this.column_labels_mapping[val] || val,
					value: "{" + val + "}"
				});
				dataset.addMeasure(msrchart);
			}

		} else if (chtype == "BUBBLE") {

			for(var i=0;i<3;i++) {
				var val = measures[i].name ;
				var msrchart = new sap.viz.ui5.data.MeasureDefinition({
					group : i+1,
					name : this.column_labels_mapping[val] || val,
					value : "{"+val+"}",
				});
				dataset.addMeasure(msrchart);
			}				
			
		} else if (((chtype == "BAR") && (axisType == "DUAL")) || ((chtype == "COLUMN") && (axisType == "DUAL"))) {

			for (var i=0;i<measures.length;i++) {
				var val = measures[i].name;
				var grp = (measures[i].axis == 1 || measures[i].axis == 2) ? measures[i].axis : 2 ;
				
				var msrchart = new sap.viz.ui5.data.MeasureDefinition({
					group: grp,
					name: this.column_labels_mapping[val] || val,
					value: "{" + val + "}"

				});
				dataset.addMeasure(msrchart);
			}																										

		} 
		
		return dataset;
	},

	/*
	 * 2 Table related methods follow - same as runtime methods. 
	 */
	_getValueState : function(actualValue, thresholdValue) {
        if(!this.EVALUATION.isTargetKpi()) {
            if(actualValue < thresholdValue) {
                return this.EVALUATION.isMaximizingKpi() ? sap.ui.core.ValueState.Error : sap.ui.core.ValueState.Success;
            } else if (actualValue == thresholdValue) {
                return sap.ui.core.ValueState.None;
            } else {
                return this.EVALUATION.isMaximizingKpi() ? sap.ui.core.ValueState.Success : sap.ui.core.ValueState.Error;
            }
        } else {
            return sap.ui.core.ValueState.None;
        }
    },
    _getTableCell : function(originalMeasure, thresholdMeasure) {
        var that = this;
        if(thresholdMeasure && (originalMeasure !== thresholdMeasure)) {
            return new sap.m.ObjectNumber({
                number: {
                    path: originalMeasure
                },
                state : {
                    parts : [
                             {path : originalMeasure},
                             {path : thresholdMeasure}
                    ],
                    formatter : function(oMeasureValue, tMeasureValue) {
                        try {
                            oMeasureValue = window.parseFloat(oMeasureValue);
                            tMeasureValue = window.parseFloat(tMeasureValue);
                            return that._getValueState(oMeasureValue, tMeasureValue);
                        }catch(e) {
                            return sap.ui.core.ValueState.None;
                        }
                    }
                }
            });
        } else {
            return new sap.m.Label({
                text : {
                    path : originalMeasure
                }
            })
        }
    },
	
	updateTable: function(dimensions,measures) {
		
		this.dda_table.destroyColumns();
		this.dda_table.destroyItems();
		
		for(var i=0;i<dimensions.length;i++) {
			var val = dimensions[i].name;
			var Label = new sap.m.Label({
				text: this.column_labels_mapping[val] || val
			});
			var columns = new sap.m.Column({
				hAlign: "Left",								
				header: Label,
				minScreenWidth: "Tablet",
				demandPopin: true,
			});
			this.dda_table.addColumn(columns);
		}
		
		for (var i=0;i<measures.length;i++) {
			var val = measures[i].name;
			var Label = new sap.m.Label({
				text: this.column_labels_mapping[val] || val
			});
			var columns = new sap.m.Column({
				hAlign: "Right",
				header: Label,
				minScreenWidth: "Tablet",
				demandPopin: true,
			});

			this.dda_table.addColumn(columns);
		}
	
		var template = new sap.m.ColumnListItem({
			//type : "Navigation",
			unread : false,			
		});
		
        for(var i=0;i<dimensions.length;i++){
          var val = ((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME")? this.dimension_text_property_mapping[dimensions[i].name] : dimensions[i].name;
          var ocell = new sap.m.Label({
				text : "{"+val+"}"
			});
          template.addCell(ocell);

	    }
        var thresholdmsr = this._oModel["THRESHOLD_MEASURE"];
	    
        for(var i=0;i<measures.length;i++){
	          var val = measures[i].name;
	          if(this._oModel["COLOR_SCHEME"] == "AUTO_SEMANTIC")
	        	  var ocell = this._getTableCell(val, thresholdmsr);
	          else
	        	  var ocell = this._getTableCell(val, val);
	        template.addCell(ocell);
	    }
            
       this.dda_table.setModel(this.oChartDataModel);
       this.dda_table.bindAggregation("items", "/businessData", template);
		
	},	

	applyCustomColoring: function(oChart, colorScheme, arr, thresholdMeasure, improvementDirection) {                       // pass chart reference , type of coloring , measures obj , threshold measure (if applicable) and improvementDirection(either 0, 1 or 2)

		var oController = this;

		if((colorScheme).toUpperCase() === "AUTO_SEMANTIC") {                                                       

			if(((improvementDirection == "MA") || (improvementDirection == "MI")) && thresholdMeasure) {	 		                                                     
				oController.setCustomColors(oChart,arr,colorScheme) ;

				oChart.setChartSemanticColorFormatter(function(oContext) {

					var data = oChart.getModel().getData().businessData;
					var bindingContext = oContext.ctx.path.dii_a1;
					var bindingData = data[bindingContext];
					var referenceMeasureValue = bindingData[thresholdMeasure];
					if(referenceMeasureValue!=null && typeof referenceMeasureValue!='undefined') {
						if(oContext.val > referenceMeasureValue) {
							if(improvementDirection == "MA")
								return sap.ca.ui.charts.ChartSemanticColor.GoodLight;
							else if(improvementDirection == "MI")
								return sap.ca.ui.charts.ChartSemanticColor.BadLight;
						} else if(oContext.val < referenceMeasureValue) {
							if(improvementDirection == "MA")
								return sap.ca.ui.charts.ChartSemanticColor.BadLight;
							else if(improvementDirection == "MI")
								return sap.ca.ui.charts.ChartSemanticColor.GoodLight;
						} else {
							return sap.ca.ui.charts.ChartSemanticColor.Neutral;
						}
					} else {
						jQuery.sap.log.error("Threshold Measure:'"+thresholdMeasure+"' not in Dataset. Error Applying Semantic Color");
						return sap.ca.ui.charts.ChartSemanticColor.NeutralLight;
					}
				});
			} else {
				jQuery.sap.log.error("Threshold Measure not available or Goal type is RA . Error Applying Semantic Color");
			}
			
		} else if(((colorScheme).toUpperCase() === "MANUAL_SEMANTIC") || ((colorScheme).toUpperCase() === "MANUAL_NON_SEMANTIC")) {                                           
			oController.setCustomColors(oChart,arr,colorScheme) ;
		}

	},

	setCustomColors: function(oChart,msrObj,colorScheme){                           // pass chart reference and msr obj.

		var dset = oChart.getDataset() ;
		var msr = dset.getMeasures() ;
		
		var defaultColor = "";
		if((colorScheme).toUpperCase() === "AUTO_SEMANTIC" || (colorScheme).toUpperCase() === "MANUAL_SEMANTIC")
			defaultColor = sap.ca.ui.charts.ChartSemanticColor.Neutral;
		
		for(var i=0;i<msr.length;i++)
		{
			msr[i].addCustomData(new sap.ui.core.CustomData({
				key: "fillColor",
				value: msrObj[i].color || defaultColor
			})) ;
		}	          

	},
	
	set_percentCharts_uom: function() {
    	 
    	 var oController = this; 
    	 var chartType = this.dda_config.chartConfig.type ;
         var axisType = this.dda_config.chartConfig.axis ;
         var valueType = this.dda_config.chartConfig.value ;
         
         var msrLabels = [];
         for(var i=0;i<this.chartMsrNames.length;i++) {
        	 msrLabels.push(this.column_labels_mapping[this.chartMsrNames[i]] || this.chartMsrNames[i]);
         }
         
         var dualMsr = this.getMeasuresByAxis(this.chartMeasures);
         var dualMsrAxis1 = [],dualMsrAxis2 = [] ;
         for(var i=0;i<dualMsr.axis1.nameArr.length;i++) {
        	 dualMsrAxis1.push(this.column_labels_mapping[dualMsr.axis1.nameArr[i]] || dualMsr.axis1.nameArr[i]);
         }
         for(var i=0;i<dualMsr.axis2.nameArr.length;i++) {
        	 dualMsrAxis2.push(this.column_labels_mapping[dualMsr.axis2.nameArr[i]] || dualMsr.axis2.nameArr[i]);
         }
         
         var msrLabelStr = (axisType == 'DUAL') ? dualMsrAxis1.join(" & ") : msrLabels.join(" & ");
         
 		 var oChartSettings = {} ;
         
         if(this.dda_chart)
        	 oChartSettings = this.dda_chart.getAdvancedChartSettings() ? this.dda_chart.getAdvancedChartSettings() : {} ;
		
    	 if(((chartType == 'BAR') || (chartType == "COLUMN")) && (valueType == "PERCENTAGE")) {	
 			if(chartType == 'COLUMN') {
 				oChartSettings.yAxis = {
 						title : {visible : true, text : (msrLabelStr+" ("+(oController._oTextsModel.getResourceBundle().getText("IN_PERCENTAGE"))+")")}
 				};
 				if(axisType == 'DUAL') {
 	 				oChartSettings.yAxis2 = {
 	 						title : {visible : true, text : (dualMsrAxis2.join(" & ")+" ("+(oController._oTextsModel.getResourceBundle().getText("IN_PERCENTAGE"))+")")}
 	 				};
 				}
 			}
 			else if(chartType == 'BAR') {
 				oChartSettings.xAxis = {
 						title : {visible : true, text : (msrLabelStr+" ("+(oController._oTextsModel.getResourceBundle().getText("IN_PERCENTAGE"))+")")}
 				};
 				if(axisType == 'DUAL') {
 					oChartSettings.xAxis2 = {
 	 						title : {visible : true, text : (msrLabelStr+" ("+(oController._oTextsModel.getResourceBundle().getText("IN_PERCENTAGE"))+")")}
 	 				};
 					oChartSettings.xAxis = {
 	 						title : {visible : true, text : (dualMsrAxis2.join(" & ")+" ("+(oController._oTextsModel.getResourceBundle().getText("IN_PERCENTAGE"))+")")}
 	 				};
 				}
 			}
 			
 			if(this.dda_chart)
 				this.dda_chart.setAdvancedChartSettings(oChartSettings) ;
 		}
     },
	
	formatChartNumbers: function (value) {
		var locale = new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
		function isNumber(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}

		if (isNumber(value)) {
			if (!this.chartFormatter) {
				var dec = 1;                              //   TODO            numberOfDecimals
				jQuery.sap.require("sap.ca.ui.model.format.NumberFormat");
				if (dec || dec==0){
					this.chartFormatter = sap.ca.ui.model.format.NumberFormat.getInstance({
						style: 'short',
						shortDecimals: dec
					},locale);
				}

				else{
					this.chartFormatter = sap.ca.ui.model.format.NumberFormat.getInstance({
						style: 'short'
					},locale);
				}
			}
			value = this.chartFormatter.format(value);
		}

		return value;
	},
	pseudoChartFormatter: function (value) {
		return value;
	},
	
	getRuntimeChartData: function(dimensions,measures) {                          // TODO
		var that = this;
		
		var chartToolbarRef = this.getView().byId("chartToolbar");
		chartToolbarRef.setBusy(true);
		
		this.COLUMNS_SORT = [];
        for(var i=0;i<that.oColumns.length;i++) {
            if(that.oColumns[i].sortBy && that.oColumns[i].sortOrder) {
                if((that.oColumns[i].sortOrder).toUpperCase() == "ASC" || (that.oColumns[i].sortOrder).toUpperCase == "DESC") {
                    this.COLUMNS_SORT.push({
                        name : that.oColumns[i].sortBy,
                        order : that.oColumns[i].sortOrder
                    });
                }
            }
        }
        
        try{
			var oUriObject = sap.suite.smartbusiness.odata.getUri({
		        serviceUri : this._oModel.QUERY_SERVICE_URI,
		        entitySet : this._oModel.QUERY_ENTITY_SET,
		        dimension : dimensions,
		        measure : measures,
		        filter : this.DDA_MODEL.EVALUATION_DATA.FILTERS.results,
		        sort : this.COLUMNS_SORT,
	            dataLimit : (((this.dda_config.chartConfig.dataLimitations) && (this.dda_config.chartConfig.dataLimit > 0)) ? (this.dda_config.chartConfig.dataLimit) : null),
	            //includeDimensionKeyTextAttribute : true/false, default true,
	            //includeMeasureRawFormattedValueUnit : true/false, default True,
		    });
		    
		    oUriObject.model.read(oUriObject.uri, null, null, true, function(data) {
		    	if(data.results.length) {
		    		that.oChartData = data.results ;		
					that.oChartDataModel.setData({businessData: that.oChartData}) ;
				} else {
					jQuery.sap.log.info("Chart data Table Returned Empty Results");
					that.oChartData = [];		
					that.oChartDataModel.setData({businessData: that.oChartData}) ;
				}
		    	chartToolbarRef.setBusy(false);
		    }, function() {
		    	jQuery.sap.log.error("Error fetching data : "+oUriObject.uri);
		    	that.oChartData = [];		
				that.oChartDataModel.setData({businessData: that.oChartData}) ;
				chartToolbarRef.setBusy(false);
		    });
		} catch(exp){
			jQuery.sap.log.error(exp.toString());
			that.oChartData = [];		
			that.oChartDataModel.setData({businessData: that.oChartData}) ;
			chartToolbarRef.setBusy(false);
		}
	},
	
	getDummyDataForChart: function(dim,measure,MAX_D,DATA_SZ) {
		MAX_D=MAX_D|| 5;
		DATA_SZ= DATA_SZ||10;
		var chartData=[];
		var tmp,dimension={};
		for(var i=0;i<dim.length;i++){
			dimension[dim[i]]=[];
			for(var j=0;j<MAX_D;j++){
				dimension[dim[i]].push(dim[i]+"_"+j);
			}
		}

		for(var i=0;i<DATA_SZ;i++){
			tmp={};
			for(var j=0;j<dim.length;j++){
				var count= dimension[dim[j]].length;
				var p=sap.suite.smartbusiness.utils.getRandomNumber(count);
				tmp[dim[j]]=dimension[dim[j]][p];
			}
			for(var j=0;j<measure.length;j++){
				tmp[measure[j]]=sap.suite.smartbusiness.utils.getRandomNumber(100);
			}
			chartData.push(tmp);
		}
		chartData=this.sortChartData(chartData,dim);
		return chartData;
	},
	
	sortChartData: function(arr,dim) {
		var data=[];
		arr.sort(function(a,b){
			var i=0;
			while(i<dim.length){
				if(a[dim[i]]>b[dim[i]]){
					return -1;
				}
				else if(a[dim[i]]<b[dim[i]]){
					return 1;
				}
				i++;

			}

		});
		var tmp={};
		for(var i=0,k=0;i<arr.length;i++){
			var s="";
			for(var j=0;j<dim.length;j++){
				s+=arr[i][dim[j]];
			}
			if(!tmp[s]){
				tmp[s]=true;
				data[k++]=arr[i];
			}
		}
		return data;
	},

//	** For deleting a view :

	onDeleteConfiguration: function() {
		  var that=this;
		
    	  var self = that;
     	  this.confirmDialog = new sap.m.Dialog({
     		 icon:"sap-icon://warning2",
     		 title:self._oTextsModel.getResourceBundle().getText("WARNING"),
     		 state:"Error",
     		 type:"Message",
     		 content:[new sap.m.Text({text:self._oTextsModel.getResourceBundle().getText("DELETE_ALL_CONFIGURATIONS")})],
     		 beginButton: new sap.m.Button({
     			 text:self._oTextsModel.getResourceBundle().getText("OK"),
     			 press: function(){
     				//go into busy mode.
     				that.busyIndicator.open() && that.getView().setBusy(true);
     				self.deleteMaster();
     			 }
     		 }),
     		 endButton: new sap.m.Button({
     			 text:self._oTextsModel.getResourceBundle().getText("CANCEL"),
     			 press:function(){this.getParent().close();}
     		 })
     	 });
     	 this.confirmDialog.open();
	},	
	deleteMaster: function() {	
		var that = this;
		var modelData=this.getView().getModel("SB_DDACONFIG").getData();
		this.busyIndicator.open() && this.getView().setBusy(true);
		var saveService=sap.suite.smartbusiness.ddaconfig.DrilldownSaveService;
		saveService.saveEvalConfiguration(this.evaluationId,modelData,"delete",function(){
    		  jQuery.sap.log.info("Deleted master configuration for the evaluation");
      		  that.busyIndicator.close() && that.getView().setBusy(false);
      		  sap.m.MessageToast.show(that._oTextsModel.getResourceBundle().getText("EVAL_CONFIG_DELETE_SUCCESS"));
      		  that.confirmDialog.close();
      		  that.DDA_MODEL.removeAllViews();
      		  that.DDA_MODEL.setViewId("");
      		  that.bindUiToModel();
      		  that._oModel = that.DDA_MODEL.getModelDataForDDAConfiguration();
      		  that.refreshChart();
      		  that.getView().getModel().refresh();
		},function(e){
      		  jQuery.sap.log.error(e + " failed");
      		  that.busyIndicator.close() && that.getView().setBusy(false);
      		  sap.suite.smartbusiness.utils.showErrorMessage(that._oTextsModel.getResourceBundle().getText("DELETE_ERROR"));
      	  });
	},
	// --------------------------------------------------------------------------------------------

	onViewSwitch: function(oEvent) {
		var sKey = oEvent.getParameter("selectedKey");
		this.viewId = sKey;
		this.DDA_MODEL.setViewId(this.viewId);
		this._oModel = this.DDA_MODEL.getModelDataForDDAConfiguration();
		this.bindUiToModel();
		this.refreshChart();
	},
	
	updateHeaderFooterOptions: function(paste) {
		this.setBtnEnabled("Paste",paste);
	},
	
	checkEvaluationForPaste: function() {
		var currentEvaluationData = this.EVALUATION.evaluationData;
		var currentMasterData = this.getView().getModel("SB_DDACONFIG").getData();

		if((this.copyClipboard.evaluationData.ID == currentEvaluationData.ID) || this.checkEvaluationForPaste1()) {
			this.updateHeaderFooterOptions(false);
		}
		else {
			this.updateHeaderFooterOptions(true);
		}
		
//		if(this.copyClipboard.evaluationData.ID != currentEvaluationData.ID) {
//			for(var i=0,l=this.copyClipboard.MasterData.ALL_MEASURES.length; i<l; i++) {
//				if(currentMasterData.ALL_MEASURES.indexOf(this.copyClipboard.MasterData.ALL_MEASURES[i]) == -1) {
//					this.updateHeaderFooterOptions(false);
//					return;
//				}
//			}
//			for(var i=0,l=this.copyClipboard.MasterData.ALL_DIMENSIONS.length; i<l; i++) {
//				if(currentMasterData.ALL_DIMENSIONS.indexOf(this.copyClipboard.MasterData.ALL_DIMENSIONS[i]) == -1) {
//					this.updateHeaderFooterOptions(false);
//					return;
//				}
//			}
//			this.updateHeaderFooterOptions(true);
//		}
//		else {
//			this.updateHeaderFooterOptions(false);
//		}
//		return;
	},
	
	checkEvaluationForPaste1: function() {
		//var currentEvaluationData = this.EVALUATION.evaluationData;
		var masterData = this.copyClipboard.masterData;
		var measures = {};
		var dimensions = {};
		if(this.getView().getModel("SB_DDACONFIG").getData().ALL_MEASURES.length) {
			if(this.getView().getModel("SB_DDACONFIG").getData().ALL_MEASURES.length == 1) {
				measures[this.getView().getModel("SB_DDACONFIG").getData().ALL_MEASURES[0]] = "M";
			}
			else {
				measures = this.getView().getModel("SB_DDACONFIG").getData().ALL_MEASURES.reduce(function(p,c,i,a) { measures = measures || {}; if(i == 1){ measures[a[0]] = "M"; }  measures[a[i]] = "M"; return measures;});
			}
		}
		if(this.getView().getModel("SB_DDACONFIG").getData().ALL_DIMENSIONS.length) {
			if(this.getView().getModel("SB_DDACONFIG").getData().ALL_DIMENSIONS.length == 1) {
				dimensions[this.getView().getModel("SB_DDACONFIG").getData().ALL_DIMENSIONS[0]] = "D";
			}
			else {
				dimensions = this.getView().getModel("SB_DDACONFIG").getData().ALL_DIMENSIONS.reduce(function(p,c,i,a) { dimensions = dimensions || {}; if(i == 1){ dimensions[a[0]] = "D"; }  dimensions[a[i]] = "D"; return dimensions;});
			}
		}
		
		var error = null;
		this.diffHeaders = [];
		
		for(var i=0,l=masterData.FILTERS.length; i<l; i++) {
			delete masterData.FILTERS[i].__metadata;
			if(dimensions[masterData.FILTERS[i].DIMENSION] != "D") {
				if(error == null) {
					error = {};
				}
				if(error.DIMENSIONS == undefined) {
					error.DIMENSIONS = {};
				}
				if(error.DIMENSIONS[masterData.FILTERS[i].DIMENSION] == undefined) {
					error.DIMENSIONS[masterData.FILTERS[i].DIMENSION] = [];
				} 
				masterData.FILTERS[i].entityType = "FILTER";
				error.DIMENSIONS[masterData.FILTERS[i].DIMENSION].push(masterData.FILTERS[i]);
			}
		}
		
		for(var i=0,l=masterData.CHART.length; i<l; i++) {
			delete masterData.CHART[i].__metadata;
			if(masterData.CHART[i].THRESHOLD_MEASURE) {
				if(measures[masterData.CHART[i].THRESHOLD_MEASURE] != "M") {
					if(error == null) {
						error = {};
					}
					if(error.MEASURES == undefined) {
						error.MEASURES = {};
					}
					if(error.MEASURES[masterData.CHART[i].THRESHOLD_MEASURE] == undefined) {
						error.MEASURES[masterData.CHART[i].THRESHOLD_MEASURE] = [];	
					}
					masterData.CHART[i].entityType = "THRESHOLD_MEASURE";
					error.MEASURES[masterData.CHART[i].THRESHOLD_MEASURE].push(masterData.CHART[i]);
				}
			}
		}

		for(var i=0,l=masterData.COLUMNS.length; i<l; i++) {
			delete masterData.COLUMNS[i].__metadata;
			var measure = null;
			var dimension = null;
			if(masterData.COLUMNS[i].TYPE == "MEASURE") {
				if((measures[masterData.COLUMNS[i].NAME] != "M")) {
					if(error == null) {
						error = {};
					}
					if(error.MEASURES == undefined) {
						error.MEASURES = {};
					}
					if(error.MEASURES[masterData.COLUMNS[i].NAME] == undefined) {
						error.MEASURES[masterData.COLUMNS[i].NAME] = [];	
					}
					masterData.COLUMNS[i].entityType = "MEASURE";
					error.MEASURES[masterData.COLUMNS[i].NAME].push(masterData.COLUMNS[i]);
					//error.MEASURES[masterData.COLUMNS[i].NAME][error.MEASURES[masterData.COLUMNS[i].NAME].length-1].entityType = "MEASURE";
				}
				if((measures[masterData.COLUMNS[i].SORT_BY] != "M")) {
					if(error == null) {
						error = {};
					}
					if(error.MEASURES == undefined) {
						error.MEASURES = {};
					}
					if(error.MEASURES[masterData.COLUMNS[i].SORT_BY] == undefined) {
						error.MEASURES[masterData.COLUMNS[i].SORT_BY] = [];	
					}
					measure = jQuery.extend(true, {}, masterData.COLUMNS[i], {});
					measure.entityType = "SORT_BY";
					error.MEASURES[masterData.COLUMNS[i].SORT_BY].push(measure);
				}
			}
			else if(masterData.COLUMNS[i].TYPE == "DIMENSION") {
				if((dimensions[masterData.COLUMNS[i].NAME] != "D")) {
					if(error == null) {
						error = {};
					}
					if(error.DIMENSIONS == undefined) {
						error.DIMENSIONS = {};
					}
					if(error.DIMENSIONS[masterData.COLUMNS[i].NAME] == undefined) {
						error.DIMENSIONS[masterData.COLUMNS[i].NAME] = [];	
					}
					masterData.COLUMNS[i].entityType = "DIMENSION";
					error.DIMENSIONS[masterData.COLUMNS[i].NAME].push(masterData.COLUMNS[i]);
					//error.DIMENSIONS[masterData.COLUMNS[i].NAME][error.DIMENSIONS[masterData.COLUMNS[i].NAME].length-1].entityType = "DIMENSION";
				}
				if((dimensions[masterData.COLUMNS[i].SORT_BY] != "D")) {
					if(error == null) {
						error = {};
					}
					if(error.DIMENSIONS == undefined) {
						error.DIMENSIONS = {};
					}
					if(error.DIMENSIONS[masterData.COLUMNS[i].SORT_BY] == undefined) {
						error.DIMENSIONS[masterData.COLUMNS[i].SORT_BY] = [];	
					}
					dimension = jQuery.extend(true, {}, masterData.COLUMNS[i], {});
					dimension.entityType = "SORT_BY";
					error.DIMENSIONS[masterData.COLUMNS[i].SORT_BY].push(dimension);
				}
			}
		}
		
		for(var i=0,l=masterData.HEADER.length; i<l; i++) {
			if(masterData.HEADER[i].EVALUATION_ID !== masterData.HEADER[i].REFERENCE_EVALUATION_ID) {
				this.diffHeaders.push(masterData.HEADER[i]);
			}
			else {
				if((masterData.HEADER[i].VISUALIZATION_TYPE != "NT") && (masterData.HEADER[i].VISUALIZATION_TYPE != "AT")) {
					if((masterData.HEADER[i].VISUALIZATION_TYPE === "CM")) {
						var measuresArr = undefined;
						try{
							measuresArr = JSON.parse(JSON.parse(masterData.HEADER[i].CONFIGURATION).MEASURES);
						}
						catch(e) {
							throw new Error("Failed to parse multiple measures of Comparison Chart Multiple Measures");
						}
						
						for(var j=0,m=measuresArr.length; i<m; i++) {
							if(measures[measuresArr[j]["name"]] != "M") {
								masterData.HEADER[i].entityType = "HEADERS";
								if(error == null) {
									error = {};
								}
								if(error.MEASURES == undefined) {
									error.MEASURES = {};
								}
								if(error.MEASURES[measuresArr[j]["name"]] == undefined) {
									error.MEASURES[measuresArr[j]["name"]] = [];	
								}
								error.MEASURES[measuresArr[j]["name"]].push(masterData.HEADER[i]);
								break;
							}
						}
					}
					else {
						if(dimensions[masterData.HEADER[i].DIMENSION] != "D") {
							masterData.HEADER[i].entityType = "HEADERS";
							if(error == null) {
								error = {};
							}
							if(error.DIMENSIONS == undefined) {
								error.DIMENSIONS = {};
							}
							if(error.DIMENSIONS[masterData.HEADER[i].DIMENSION] == undefined) {
								error.DIMENSIONS[masterData.HEADER[i].DIMENSION] = [];	
							}
							error.DIMENSIONS[masterData.HEADER[i].DIMENSION].push(masterData.HEADER[i]);
						}
					}
				}
			}
		}
		return error;
	},
	
	copyEvaluationToClipboard: function() {
		var that = this;
		var copyToClipboard = function() {
			that.copyClipboard = {};
			that.copyClipboard.MasterData = that.getView().getModel("SB_DDACONFIG").getData();
			that.copyClipboard.masterData = sap.suite.smartbusiness.ddaconfig.MasterData;
			that.copyClipboard.evaluationData = that.EVALUATION.evaluationData;
			sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("COPY_DDA_TO_CLIPBOARD", that.EVALUATION.evaluationData.TITLE || (that.EVALUATION.evaluationData.ID + "*")));
			that.updateHeaderFooterOptions(false);
		}
		if(sap.suite.smartbusiness.ddaconfig.MasterData.HEADER && sap.suite.smartbusiness.ddaconfig.MasterData.HEADER.length) {
			var diffHeaders = [];
			for(var i=0,l=sap.suite.smartbusiness.ddaconfig.MasterData.HEADER.length; i<l; i++) {
				if(sap.suite.smartbusiness.ddaconfig.MasterData.HEADER[i].EVALUATION_ID != sap.suite.smartbusiness.ddaconfig.MasterData.HEADER[i].REFERENCE_EVALUATION_ID) {
					diffHeaders.push(sap.suite.smartbusiness.ddaconfig.MasterData.HEADER[i]);
				}
			}
			if(diffHeaders && diffHeaders.length) {
				that.warnDialog = that.warnDialog || new sap.m.Dialog({
					icon:"sap-icon://warning2",
					title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
					state:"Warning",
					type:"Message",
					content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("RELATED_KPIS_HEADER_TILES_EXIST_WARN")})],
					beginButton: new sap.m.Button({
						text:that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
						press: function(){
							that.warnDialog.close();
							copyToClipboard();
						}
					})//,
//					endButton: new sap.m.Button({
//						text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
//						press:function(){
//							that.warnDialog.close();
//						}
//					})   	                                           
				});
				that.warnDialog.open();
			}
			else {
				copyToClipboard();
			}
		}
		else {
			copyToClipboard();
		}
	},
	
	copyDDAConfiguration: function() {
		var that = this;
		if(this.copyClipboard && this.copyClipboard.evaluationData) {
			var payload = {sourceEvaluationId:this.copyClipboard.evaluationData.ID, targetEvaluationId: this.EVALUATION.evaluationData.ID};
			var callCopyDDA = function(){
				sap.suite.smartbusiness.utils.create(sap.suite.smartbusiness.utils.serviceUrl("COPY_DDA_CONFIGURATION_SERVICE_URI"),payload,null,function(data){
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DDA_COPY_SUCCESS"));
					that.getView().getModel().refresh();
					var evt = {
							getParameter: function(param) {
								var evtObj = {
										name:"detail",
										arguments:{contextPath: "EVALUATIONS_DDA('" + that.evaluationId + "')"}  
								};
								return evtObj[param];
							}	
					};
					that.onRoutePatternMatched(evt);
				},function(err){
					sap.suite.smartbusiness.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DDA_COPY_ERROR"), err.responseText);
				});
			};
			if(sap.suite.smartbusiness && sap.suite.smartbusiness.ddaconfig && sap.suite.smartbusiness.ddaconfig && sap.suite.smartbusiness.ddaconfig.MasterData && sap.suite.smartbusiness.ddaconfig.MasterData.MASTER && sap.suite.smartbusiness.ddaconfig.MasterData.MASTER.length) {
				this.warnOverwriteDialog = this.warnOverwriteDialog || new sap.m.Dialog({
				icon:"sap-icon://warning2",
				title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
				state:"Warning",
				type:"Message",
				content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("DDA_CONFIG_EXISTING_WARN")})],
				beginButton: new sap.m.Button({
					text:that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
					press: function(){
						that.warnOverwriteDialog.close();
						callCopyDDA();
					}
				}),
				endButton: new sap.m.Button({
					text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
					press:function(){
						that.warnOverwriteDialog.close();
					}
				})   	                                           
			});
			this.warnOverwriteDialog.open();
			}
			else {
				callCopyDDA();
			}
		}
	},
	
	checkForCopy: function() {
		if(sap.suite.smartbusiness.ddaconfig && sap.suite.smartbusiness.ddaconfig.MasterData && sap.suite.smartbusiness.ddaconfig.MasterData.MASTER && sap.suite.smartbusiness.ddaconfig.MasterData.MASTER.length) {
			this.setBtnEnabled("Copy",true);
		}
		else {
			this.setBtnEnabled("Copy",false);
		}
	},
	
	onAfterRendering: function() {
		this.setBtnEnabled("Paste",false);
		this.checkForCopy();
	}
	

});
}; // end of sap/suite/ui/smartbusiness/designtime/drilldown/view/S3.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.drilldown.view.configurator.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.drilldown.view.configurator.controller');
sap.ui.getCore().loadLibrary("sap.suite.ui.commons");
jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained






jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained

sap.ca.scfld.md.controller.BaseDetailController.extend("sap.suite.ui.smartbusiness.designtime.drilldown.view.configurator", {
	onInit : function() {
		this.DDA_MODEL = null;
		this.evaluationId = null;
		this.viewId = null;
		this.ddaFilter=this.byId("ddaFilter");
		
		try{
            if(sap.ui.core.Fragment.byId("addTileDialog","addTileDialog")){
            	sap.ui.core.Fragment.byId("addTileDialog","addTileDialog").destroy();
             }
            if(sap.ui.core.Fragment.byId("addRelatedTilesDialog","evaluationTilesList")){
            	sap.ui.core.Fragment.byId("addRelatedTilesDialog","evaluationTilesList").getParent().destroy();
            }
            if(sap.ui.core.Fragment.byId("configureTileDialog","multipleMeasureDialog")){
            	sap.ui.core.Fragment.byId("configureTileDialog","multipleMeasureDialog").destroy();
             }
			
		}catch(e){
			
		}
		this._addTileDialog=sap.ui.xmlfragment("addTileDialog","sap.suite.ui.smartbusiness.designtime.drilldown.view.addTileDialog", this);
		this._addRelatedTilesDialog=sap.ui.xmlfragment("addRelatedTilesDialog","sap.suite.ui.smartbusiness.designtime.drilldown.view.addRelatedTilesDialog", this);
		this._configureTileDialog=sap.ui.xmlfragment("configureTileDialog","sap.suite.ui.smartbusiness.designtime.drilldown.view.multipleMeasureDialog", this);
		this.initializeTileHeader();
		this.initializeAddTileDialog();
		this.defineHeaderFooterOptions();
		this.oRouter.attachRoutePatternMatched(this.onRoutePatternMatched, this);
		//flag to show if views ever re-ordered
		this.viewsReordered = false;
		this.busyIndicator = new sap.m.BusyDialog();
		var header=this.byId("headerRibbon");
		this.HeaderRibbonModel = new sap.ui.model.json.JSONModel();
		header.setModel(this.HeaderRibbonModel);
		//warning when leaving the page
		var self = this;
		window.onbeforeunload = function(){return self._oTextsModel.getResourceBundle().getText("ARE_YOU_SURE")};
	},
	
	leftArrowAction: function(){
		var that = this;
		var i, tempObj;
		var headerArrayModel = that.getView().getModel("SB_DDACONFIG").getData().HEADERS_VISIBLE;
		var visibleArrayHeader = that.byId("tileContainer").getAggregation("scrollContainer").getAggregation("content");
		try{
			var selectedTile=this._getSelectedTile().tile.getBindingContext("SB_DDACONFIG").getObject();
		}catch(e){selectedTile=null;}
		for(i=0;i<headerArrayModel.length;i++){
			if(headerArrayModel[i] == selectedTile){
				tempObj = headerArrayModel.splice(i,1);
				headerArrayModel.splice(i-1,0,tempObj[0]);
				break;
			}
		}
		that.getView().getModel("SB_DDACONFIG").setProperty("/HEADERS_VISIBLE",headerArrayModel);
		that.getView().getModel("SB_DDACONFIG").updateBindings();
		that._setSelectedTile(that._getSelectedTile().index-1);
	},
	rightArrowAction: function(){
		var that = this;
		var i, tempObj;
		var headerArrayModel = that.getView().getModel("SB_DDACONFIG").getData().HEADERS_VISIBLE;
		var visibleArrayHeader = that.byId("tileContainer").getAggregation("scrollContainer").getAggregation("content");
		try{
			var selectedTile=this._getSelectedTile().tile.getBindingContext("SB_DDACONFIG").getObject();
		}catch(e){selectedTile=null;}
		for(i=0;i<headerArrayModel.length;i++){
			if(headerArrayModel[i] == selectedTile){
				tempObj = headerArrayModel.splice(i,1);
				headerArrayModel.splice(i+1,0,tempObj[0]);
				break;
			}
		}
		that.getView().getModel("SB_DDACONFIG").setProperty("/HEADERS_VISIBLE",headerArrayModel);
		that.getView().getModel("SB_DDACONFIG").updateBindings();
		that._setSelectedTile(that._getSelectedTile().index+1);
	},
	selectedTilesFormatter:function(curId,allHeaders){
		var str=""
		var tileTypeText={
				NT : "Numeric",
		        CT : "Comparison",
		        AT : "Bullet",
		        TT : "Trend"
		};
		allHeaders.forEach(function(s){
			if(s.REFERENCE_EVALUATION_ID==curId && s.visible)
			str+=tileTypeText[s.VISUALIZATION_TYPE]+", ";
		});
		return str?"Selected: "+str.replace(/, $/g,""):"";
	},
	_cloneObj:function(ele){
		var tmp;
		if(ele instanceof Array){
			tmp=[];
			for(var i=0;i<ele.length;i++){
				tmp[i]=this._cloneObj(ele[i]);
			}
		}else if(ele instanceof Object){
			tmp={};
			for(var each in ele){
				if(ele.hasOwnProperty(each)){
					tmp[each]=this._cloneObj(ele[each]);	
				}
			}
		}else{
			tmp=ele;
		}
		return tmp;
	},
	takeConfigSnapShot:function(){
		this._configSnapShot=this._cloneObj(this.getView().getModel("SB_DDACONFIG").getData());
	},
	restoreFromConfigSnapShot:function(){
		this.getView().getModel("SB_DDACONFIG").setData(this._configSnapShot);
	},
	bindUiToModel:function(){
		this.DDA_MODEL.bindModel(this.getView(),"SB_DDACONFIG");
		this.DDA_MODEL.bindModel(this._addTileDialog,"SB_DDACONFIG");
		this.DDA_MODEL.bindModel(this._addRelatedTilesDialog,"SB_DDACONFIG");
		this.DDA_MODEL.bindModel(this._configureTileDialog,"SB_DDACONFIG");
	},
	onRoutePatternMatched:function(oEvent){
		var that=this;
		if (oEvent.getParameter("name") === "configurator") {
			
			try {
			
				var evaluationId = oEvent.getParameter("arguments")["evaluationId"];
				var viewId = oEvent.getParameter("arguments")["viewId"];
				if(that.oApplicationFacade.__newViewAdded && that.oApplicationFacade.createdViewId) {
					viewId = that.oApplicationFacade.createdViewId;
					that.oApplicationFacade.createdViewId = null;
					that.oApplicationFacade.__newViewAdded = false;
					window.location.replace(window.location.hash.substring(0,window.location.hash.lastIndexOf("/")) + "/" + viewId);
				}
				that.oApplicationFacade.createdViewId = null;
				that.oApplicationFacade.__newViewAdded = false;
				that._setSelectedTile(-1);
				if(evaluationId !== this.evaluationId) {
					this.evaluationId = evaluationId;
					this.DDA_MODEL =  sap.suite.smartbusiness.ddaconfig.Model.getInstance(this.evaluationId, true,this.getView().getModel("i18n"));
					this.EVALUATION = sap.suite.smartbusiness.kpi.parseEvaluation(this.DDA_MODEL.EVALUATION_DATA);
					var newViewId=this.DDA_MODEL.NEW_VIEWID;
					if(!viewId) {
						viewId = this.DDA_MODEL.getConfigurator().getDefaultViewId();
					}
					this._oTextsModel = this.getView().getModel("i18n");
					this._addTileDialog.setModel(this._oTextsModel,"i18n");
					this._addRelatedTilesDialog.setModel(this._oTextsModel,"i18n");
					this._configureTileDialog.setModel(this._oTextsModel,"i18n");
//					var url=this.getView().getModel("SB_DDACONFIG").getData().QUERY_SERVICE_URI;
//					var entitySet=this.getView().getModel("SB_DDACONFIG").getData().QUERY_ENTITY_SET;
//					var mProperties = sap.suite.smartbusiness.odata.properties(url,entitySet);
//					this.COLUMN_LABEL_MAPPING = this.mProperties.getLabelMappingObject();
					if(viewId != null) {
						this.viewId = viewId;
						this.DDA_MODEL.setViewId(viewId);
					} else {
						this.viewId = newViewId;
					}
					this.bindUiToModel();
					this.ddaFilter.setEvaluationData(this.EVALUATION);
					this.ddaFilter.setEvaluationId(this.evaluationId);
					var filterDimensions=[];
					this.getView().getModel("SB_DDACONFIG").getProperty("/FILTERS").forEach(function(s){
						filterDimensions.push(s.name); 
					})
					this.ddaFilter.setDimensions(filterDimensions);
					try{
						this.ddaFilter.rerender();					
					}catch(e){};
				}else{
					if(this.viewId==newViewId && this.getView().getModel("SB_DDACONFIG").getProperty("/ID")!=newViewId ){
						
					}
				}
				
				//store init count of headers and filters
				this.INIT_COUNT_HEADERS = function(){
					h = that.getView().getModel("SB_DDACONFIG").getData()["HEADERS"];
					var count = 0;
					for(var i = 0; i < h.length; ++i) {
						if (h[i]["visible"] == true)
							++count;
					}
					return count;
				}();
				this.INIT_COUNT_FILTERS = this.getView().getModel("SB_DDACONFIG").getData()["FILTERS"].length;
				if(!this.init_filters) {
					this.init_filters = [];
					this.getView().getModel("SB_DDACONFIG").getData()["FILTERS"].forEach(function(x){that.init_filters.push(x.name)});
				}
				
				//var otoolBar = this.getView().byId("chartToolbar");
				//otoolBar._oFirstDimensionSelect.bindProperty("selectedKey","SB_DDACONFIG>/ID");
				
				this._oModel = this.getView().getModel("SB_DDACONFIG").getData();
				this.refreshChart();

				this.fetchAndRenderHeaderRibbon();
	            this.displayAggregate();
				
			}
			catch(e) {
				sap.suite.smartbusiness.utils.showErrorMessage(this.oApplicationFacade.getResourceBundle().getText("FAILED_TO_LOAD_ODATA"), e.message);
			} 

		}
	},
	/**
	 * Change the Order of View
	 */
	changeViewOrder : function() {
	    var that = this;
	    new sap.suite.ui.smartbusiness.lib.ListPersona({
	        view : this.getView(),
	        context : '/ALL_VIEWS',
	        listItemContext : 'TITLE',
	        namedModel : 'SB_DDACONFIG',
	        callback : function() {
	            var configId = that.DDA_MODEL.selectedView.getId();
	            that.byId('chartToolbar')._oFirstDimensionSelect.setSelectedItem(that.byId('chartToolbar')._oFirstDimensionSelect.getItemByKey(configId));
	            that.viewsReordered = true;
	        }
	    }).start();
	},
	SaveConfig: function() {
		var self = this;
		this.warn_header = false;
		var modelData=this.getView().getModel("SB_DDACONFIG").getData();
		modelData.CURRENT_FILTERS=this.getView().byId("ddaFilter").getActiveDimensions();
		var saveService=sap.suite.smartbusiness.ddaconfig.DrilldownSaveService;
		if(modelData.ALL_VIEWS.length > 0 ) {
			this.busyIndicator.open() && this.getView().setBusy(true);
			saveService.saveEvalConfiguration(this.evaluationId,modelData,"update",function(){
				jQuery.sap.log.info("all calls success");
				self.busyIndicator.close() && self.getView().setBusy(false);
				sap.m.MessageToast.show(self._oTextsModel.getResourceBundle().getText("EVAL_CONFIG_SAVE_SUCCESS"));
				self.oRouter.navTo("detail",{"contextPath" : "EVALUATIONS_DDA('" + self.evaluationId + "')"});
				//this tells the detail route that model has to be refreshed due to eval level save
				self.oApplicationFacade.__refreshModel = 1;
			},function(e){
				jQuery.sap.log.error(e + " failed");
				self.busyIndicator.close() && self.getView().setBusy(false);
				sap.suite.smartbusiness.utils.showErrorMessage(self._oTextsModel.getResourceBundle().getText("SAVE_ERROR"));
			});
		}
		else {
			sap.suite.smartbusiness.utils.showErrorMessage(self._oTextsModel.getResourceBundle().getText("SAVE_ERROR_NO_VIEW_CONFIGURED"));
			jQuery.sap.log.error("No Views Configured. Please configure Views before adding filters/headers");
		}
	},
	
	defineHeaderFooterOptions:function(){
		var that = this;
		this.oHeaderFooterOptions = { 
				onBack: function () {
					var self = that;
					new sap.m.Dialog({
		              icon:"sap-icon://warning2",
		              title:self._oTextsModel.getResourceBundle().getText("WARNING"),
		              state:"Error",
		              type:"Message",
		              content:[new sap.m.Text({text:self._oTextsModel.getResourceBundle().getText("ARE_YOU_SURE")})],
		              beginButton: new sap.m.Button({
		                   text:self._oTextsModel.getResourceBundle().getText("OK"),
		                   press: function(){
		                	   	self.evaluationId = null;
		                	   	this.getParent().close();
		   						window.history.back();
		                   }
		              }),
		              endButton: new sap.m.Button({
		                   text:self._oTextsModel.getResourceBundle().getText("CANCEL"),
		                   press:function(){this.getParent().close();}
		              })                                           
					}).open();
				},
				sI18NDetailTitle:"SB_GENERIC_DRILLDOWN",
		        bSuppressBookmarkButton : true,
				buttonList : [{
                    sI18nBtnTxt : "Save",
                    onBtnPressed : function(evt) {
                    	jQuery.sap.log.info("Save button pressed");
                    	that.SaveConfig();
                    },
               },
//               {
//                   sId : "SaveAndActivate", // optional
//                   sI18nBtnTxt : "Save and Activate",
//                   onBtnPressed : function(evt) {
//                	   jQuery.sap.log.info("Save and Activate button pressed");  
//                	   that.SaveConfig();
//                   }
//              },
              {
                  sId : "Delete", // optional
                  sI18nBtnTxt : "Delete",
                  onBtnPressed : function(evt) {
                 	  new sap.m.Dialog({
                 		 icon:"sap-icon://warning2",
                 		 title:that._oTextsModel.getResourceBundle().getText("WARNING"),
                 		 state:"Error",
                 		 type:"Message",
                 		 content:[new sap.m.Text({text:that._oTextsModel.getResourceBundle().getText("DELETE_ALL_CONFIGURATIONS")})],
                 		 beginButton: new sap.m.Button({
                 			 text:that._oTextsModel.getResourceBundle().getText("OK"),
                 			 press: function(){
                 				//go into busy mode.
                 				this.getParent().close();
                 				that.busyIndicator.open() && that.getView().setBusy(true);
                 				that.deleteMaster();
                 			 }
                 		 }),
                 		 endButton: new sap.m.Button({
                 			 text:that._oTextsModel.getResourceBundle().getText("CANCEL"),
                 			 press:function(){this.getParent().close();}
                 		 })
                 	 }).open();
                  }
             },
             {
                 sId : "cancel", // optional
                 sI18nBtnTxt : "Cancel",
                 onBtnPressed : function(evt) {
                	 var self = that;
                	 new sap.m.Dialog({
                		 icon:"sap-icon://warning2",
                		 title:self._oTextsModel.getResourceBundle().getText("WARNING"),
                		 state:"Error",
                		 type:"Message",
                		 content:[new sap.m.Text({text:self._oTextsModel.getResourceBundle().getText("ARE_YOU_SURE")})],
                		 beginButton: new sap.m.Button({
                			 text:self._oTextsModel.getResourceBundle().getText("OK"),
                			 press: function(){
                				 this.getParent().close();
                				 //self.oRouter.navTo("detail",{"contextPath" : "EVALUATIONS_DDA('" + self.evaluationId + "')"});
                				  //this tells the detail route that model has to be refreshed due to eval level save
                				 //self.oApplicationFacade.__refreshModel = 1;
                				 self.evaluationId = null;
                				 window.history.back();
                			 }
                		 }),
                		 endButton: new sap.m.Button({
                			 text:self._oTextsModel.getResourceBundle().getText("CANCEL"),
                			 press:function(){this.getParent().close();}
                		 })                                           
                	 }).open();
                 }
            },
               
               ]
		};
	},
	getHeaderFooterOptions : function() {
		return this.oHeaderFooterOptions;
	},
	onBeforeRendering : function() {
	},
	navigateToConfigureChart:function(){
		var routeObject = {evaluationId: this.evaluationId, viewId: this.viewId+""};
		this.evaluationId=null;/*added by chan to invalidate 
		the drilldown confiuration when navigating to addnew view		
		*/
//		this.DDA_MODEL.setViewId(this.viewId);
//		this.getView().setModel(sap.ui.getCore().getModel("SB_DDACONFIG"),"SB_DDACONFIG");
//		this.getView().getModel("SB_DDACONFIG").refresh();
		this.oRouter.navTo('configureChart', routeObject);
	},
	onAddView: function() {
		var self = this;
		var current_filters = this.getView().byId("ddaFilter").getActiveDimensions();
		if(this.warn_header || String(this.init_filters) != String(current_filters)) {
			//navigation warning
	       	 new sap.m.Dialog({
	       		 icon:"sap-icon://warning2",
	       		 title:self._oTextsModel.getResourceBundle().getText("WARNING"),
	       		 state:"Error",
	       		 type:"Message",
	       		 content:[new sap.m.Text({text:self._oTextsModel.getResourceBundle().getText("ARE_YOU_SURE")})],
	       		 beginButton: new sap.m.Button({
	       			 text:self._oTextsModel.getResourceBundle().getText("OK"),
	       			 press: function(){
	       				
	       				self.warn_header = false;
	       				self.viewId=self.DDA_MODEL.NEW_VIEWID;
	       				self.DDA_MODEL.setViewId(self.viewId);
	       				self.bindUiToModel();
	       				this.getParent().close();
	       				self.navigateToConfigureChart();
	       			 }
	       		 }),
	       		 endButton: new sap.m.Button({
	       			 text:self._oTextsModel.getResourceBundle().getText("CANCEL"),
	       			 press:function(){this.getParent().close();}
	       		 })                                           
	       	 }).open();
		} else {
			this.viewId=this.DDA_MODEL.NEW_VIEWID;
			this.DDA_MODEL.setViewId(this.viewId);
			this.bindUiToModel();
			this.navigateToConfigureChart();
		}
	},

	onEditView:function(){
		var self = this;
		var current_filters = this.getView().byId("ddaFilter").getActiveDimensions();
		if(this.warn_header || String(this.init_filters) != String(current_filters)) {
			//navigation warning
	       	 new sap.m.Dialog({
	       		 icon:"sap-icon://warning2",
	       		 title:self._oTextsModel.getResourceBundle().getText("WARNING"),
	       		 state:"Error",
	       		 type:"Message",
	       		 content:[new sap.m.Text({text:self._oTextsModel.getResourceBundle().getText("ARE_YOU_SURE")})],
	       		 beginButton: new sap.m.Button({
	       			 text:self._oTextsModel.getResourceBundle().getText("OK"),
	       			 press: function(){
	       				 self.warn_header = false;
	       				 this.getParent().close();
	       				 self.navigateToConfigureChart();
	       			 }
	       		 }),
	       		 endButton: new sap.m.Button({
	       			 text:self._oTextsModel.getResourceBundle().getText("CANCEL"),
	       			 press:function(){this.getParent().close();}
	       		 })                                           
	       	 }).open();
		} else {
			this.navigateToConfigureChart();
		}
	},
	tileTypeMapping:{
				NT : "Numeric",
                AT : "Bullet",
                CT : "Comparison",
                TT : "AreaChart",
                CM:"MeasureComparison"
	},
	_getSelectedTile:function(){
		var tiles=this.byId("tileContainer").getItems()||[];
		return {
			tile:tiles[this._selectedTileIndex],
			index:this._selectedTileIndex
		}
		
	},
	_setSelectedTile:function(i){
		this._selectedTileIndex=i;
		var tiles=this.byId("tileContainer").getItems()||[];
		for(j=0;j<tiles.length;j++){
			tiles[j].getTileControl().removeStyleClass("mySelectedStyle");
		}
		this.byId("deleteTile").setEnabled(i!=-1);
		if(i!=-1){
			tiles[i].getTileControl().addStyleClass("mySelectedStyle");
		}
		/*
		if(i!=-1){
			tiles[i].getTileControl().addStyleClass("mySelectedStyle");
			var contextData=tiles[i].getBindingContext("SB_DDACONFIG").getObject();
			this.byId("deleteTile").setEnabled(!(contextData.VISUALIZATION_TYPE=="NT" && contextData.EVALUATION_ID==contextData.REFERENCE_EVALUATION_ID));			
		}else{
			this.byId("deleteTile").setEnabled(i!=-1);
		}
		*/
		this.byId("leftMoveArrow").setEnabled((i!=-1)&&i!=0);
		this.byId("rightMoveArrow").setEnabled((i!=-1)&& i!=tiles.length-1);
	},
	deleteTile:function(){
		var that = this;
		var confirmDialog = new sap.m.Dialog({
			title:"Delete",
			type:"Message",
			content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("DELETE_CONFIRMATION")})],
			beginButton: new sap.m.Button({
				text:"Ok",
				press: function(oEvent){
					confirmDialog.close();
					var tileRef=that._getSelectedTile().tile;
					var visibleHeaderTiles=tileRef.getModel("SB_DDACONFIG").getData().HEADERS_VISIBLE;
					visibleHeaderTiles.splice(that._getSelectedTile().index,1);
					that._setSelectedTile(-1);
					that.refreshTileBindings();
				}
			}),
			endButton: new sap.m.Button({
				text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
				press:function(){
					confirmDialog.close();}
			})
		});
		confirmDialog.open(); 
	},
	initializeTileHeader:function(){
		var that=this;
		var tileContainer=this.byId("tileContainer");
		tileContainer.bindAggregation("items",{
				path:"SB_DDACONFIG>/HEADERS_VISIBLE",
				factory:function(sId,oBindingContext){
					var type=oBindingContext.getProperty("VISUALIZATION_TYPE");
					return new sap.suite.ui.smartbusiness.tiles[that.tileTypeMapping[type]]({
						evaluationId:that.evaluationId,
						mode:"DUMMY",
						header:	"{SB_DDACONFIG>TITLE}",
						subheader: "{SB_DDACONFIG>SUBTITLE}"
					}).addStyleClass("drilldownKpiTiles").attachBrowserEvent("click",function(evt){
								var visibleHeaderArray = this.getParent().getAggregation("content");
								that._setSelectedTile(visibleHeaderArray.indexOf(this));
					});
				},
				//filters:[filter]
			});
	},
	initializeAddTileDialog:function(){
		var that=this;
		this._tileEvaluationList=sap.ui.core.Fragment.byId("addRelatedTilesDialog","evaluationTilesList");
		var tileTypeText={
			NT : "NUMBER_TILE",
	        AT : "ACTUAL_VS_TARGET_TILE",
	        CT : "COMPARISON_TILE",
	        TT : "TREND_TILE",
	        CM:"COMPARISON_MM_TILE"
		};
		var sorter1=new sap.ui.model.Sorter('SB_DDACONFIG>GROUPING_TITLE',false,function(oContext){
			return oContext.getProperty('GROUPING_TITLE');
		});
		var sorter2=new sap.ui.model.Sorter('SB_DDACONFIG>VISUALIZATION_TYPE_INDEX',false);
		this._tileEvaluationList.bindAggregation("items",{
			path:"SB_DDACONFIG>/HEADERS",
			factory:function(sId,oBindingContext){
				var type=oBindingContext.getProperty("VISUALIZATION_TYPE");
				var miniTile=new sap.suite.ui.smartbusiness.tiles[that.tileTypeMapping[type]]({
					evaluationId:that.evaluationId,
				 	mode:"DUMMY",
				 	header:	"TITLE",
					subheader: "SUBTITLE",
					contentOnly:true
				});
				var miniTile1=new sap.suite.ui.smartbusiness.tiles[that.tileTypeMapping[type]]({
					evaluationId:that.evaluationId,
				 	mode:"DUMMY",
				 	header:	"TITLE",
					subheader: "SUBTITLE",
					contentOnly:true
				});
				var tilePane= new sap.m.HBox({
					justifyContent:"Start",
					width:"98%",
					items:[miniTile,new sap.m.Label({
			        		 text:{
			        			 path:"SB_DDACONFIG>VISUALIZATION_TYPE",
			        			 formatter:function(s){return that._oTextsModel.getResourceBundle().getText(tileTypeText[s]);}
			        		 }
		        	 		})]
				});
				return new sap.m.CustomListItem({
					type:(type=='NT'||type=='AT')?'Active':'Navigation',
					press:function(){
						var oBindingcontext=this.getBindingContext('SB_DDACONFIG').getObject();
						oBindingcontext['visible']=true;
						if(oBindingcontext.VISUALIZATION_TYPE=='NT'||oBindingcontext.VISUALIZATION_TYPE=='AT'){
							that.getView().getModel("SB_DDACONFIG").getData().HEADERS_VISIBLE.push(that._cloneObj(oBindingcontext));
							that.onAddTileOk();
							that.refreshTileBindings();
						}else{
							that._addRelatedTilesDialog.close();
							try{
								var index=oBindingcontext.VISUALIZATION_TYPE=='CM'?1:0;
								that._configureTileDialog.getContent()[index].getItems()[1].removeAllContent();
								that._configureTileDialog.getContent()[index].getItems()[1].addContent(miniTile1);	
								
							}catch(e){}
							 that._configureTileDialog.bindElement('SB_DDACONFIG>'+this.getBindingContextPath());
							 that._configureTileDialog.open();
								var oI18nModel = that.getView().getModel("i18n");
								
								 var otemplate = new sap.ui.core.Item({
				                        key: "_none^",
				                        text: oI18nModel.getResourceBundle().getText("SELECT_NONE"),

				                   });
								 
								
								 
								 if(!sap.ui.core.Fragment.byId("configureTileDialog","measuresForTile3").getItemByKey("_none^"))

								 sap.ui.core.Fragment.byId("configureTileDialog","measuresForTile3").insertItem(otemplate,"0");
				
						}
					},
					content:[new sap.m.HBox({
						justifyContent:"SpaceAround",
						items:[tilePane]
					})]
				});
			},
			sorter:[sorter1,sorter2]
		});
	},
	onMiniChartConfigureOk:function(){
		var oBindingcontext=this._configureTileDialog.getBindingContext("SB_DDACONFIG").getObject();
		oBindingcontext['visible']=true;
		this.getView().getModel("SB_DDACONFIG").getData().HEADERS_VISIBLE.push(this._cloneObj(oBindingcontext));
		this.onAddTileOk();
		this.refreshTileBindings();
	},
	showConfigureTileMeasure:function(sVal){
		return sVal!='CT'&& sVal!='TT';
	},
	showConfigureTileDimension:function(sVal){
		return sVal=='CT'|| sVal=='TT';
	},
	showConfigureTileSortOrder:function(sVal){
		return sVal=='CT';
	},
	showThirdMeasure:function(sVal){
		return !!sVal;
	},
	refreshTileBindings:function(){
		try{
			var tileContainer=this.byId("tileContainer");
			tileContainer.getModel("SB_DDACONFIG").refresh();
		}catch(e){}
	},
	_refreshEvaluationsBinding:function(){
//		var siblingEvaluations=sap.ui.core.Fragment.byId('addRelatedTilesDialog','siblingEvaluations');
//		var associatedEvaluations=sap.ui.core.Fragment.byId('addRelatedTilesDialog','associatedEvaluations');
//		if(siblingEvaluations.getItems().length){
//			siblingEvaluations.updateItems();
//		}
//		if(associatedEvaluations.getItems().length){
//			associatedEvaluations.updateItems();
//		}
	},
	onAddTileOk:function(oEvent){
		this.takeConfigSnapShot();
		this._setSelectedTile(-1);
		this.refreshTileBindings();
		try{
			this._configureTileDialog.close();
			this._addRelatedTilesDialog.close();	
		}catch(e){}
		this._refreshEvaluationsBinding();
		//to know if navigation warning is to be shown on not.
		this.warn_header = true;
	},
	onAddTileCancel:function(oEvent){
		this.restoreFromConfigSnapShot();
		this._setSelectedTile(-1);
		this.refreshTileBindings();
		try{
			this._configureTileDialog.close();
			this._addRelatedTilesDialog.close();	
		}catch(e){}
		this._refreshEvaluationsBinding();
	},
    _getEvalData:function(sId){
		try{
    		var evalData=sap.suite.smartbusiness.kpi.getEvaluationById({
 	           id : sId, cache : true, filters:false, thresholds:false, getDDAEvaluation:true
 	        });
    		return evalData;
		}catch(e){
			return {};
		}
    },
	createTileMenuForCurrentEvaluation:function(evalId){
		var that=this;
		 var tileOrder = ['NT', 'AT', 'CT', 'TT', 'CM'];
    	function _getAllDimensionsForEval(sId){
    		try{
        		var evalData=that._getEvalData(sId);
        		return sap.suite.smartbusiness.odata.getAllDimensions(evalData.ODATA_URL,evalData.ODATA_ENTITYSET);
    		}catch(e){
    			return [];
    		}
    	}
    	function _getAllMeasuresForEval(sId){
    		try{
        		var evalData=that._getEvalData(sId);
        		return sap.suite.smartbusiness.odata.getAllMeasures(evalData.ODATA_URL,evalData.ODATA_ENTITYSET);
    		}catch(e){
    			return [];
    		}
    	}
    	function _getEvaluationTitle(sId){
    		return that._getEvalData(sId).INDICATOR_TITLE;
    	}
    	function _getEvaluationSubTitle(sId){
    		return that._getEvalData(sId).TITLE;
    	}
    	function _getEvaluationIndicator(sId){
    		return that._getEvalData(sId).INDICATOR;
    	}
		var model=this.getView().getModel("SB_DDACONFIG");
		var measures=_getAllMeasuresForEval(evalId);
		if(!model.getProperty("/HEADER_EVALUATIONID")[evalId]){
			model.getProperty("/HEADER_EVALUATIONID")[evalId]=true;
			var header=model.getProperty("/HEADERS");
			for(var each in this.tileTypeMapping){
				header.push({
                        EVALUATION_ID : this.evaluationId,
                        CONFIGURATION_ID : this.viewId,
                        REFERENCE_EVALUATION_ID : evalId,
                        VISUALIZATION_TYPE : each,
                        VISUALIZATION_TYPE_INDEX:tileOrder.indexOf(each),
                        VISUALIZATION_ORDER : 1,
                        ALL_DIMENSIONS:_getAllDimensionsForEval(evalId),
                        DIMENSION : _getAllDimensionsForEval(evalId)[0]||'',
                        SORT_BY: '',
                        SORT_ORDER:'MD',
                        MEASURE1	:measures[0],
                        MEASURE2	:measures[1]||measures[0],
                        MEASURE3	:measures[2]||"",
                        COLOR1:"Good",
                        COLOR2:"Critical",
                        COLOR3:"Error",
                        ALL_MEASURES:measures,
                        VISIBILITY : 1,
                        visible : false ,
                        TITLE : _getEvaluationTitle(evalId),
                        SUBTITLE : _getEvaluationSubTitle(evalId),
                        INDICATOR:_getEvaluationIndicator(evalId)
				});
			}
		}
	},
	openEvaluationsDialog:function(){
		//this.openMinichartsCancel();
		this._addRelatedTilesDialog.open();
		sap.ui.core.Fragment.byId('addRelatedTilesDialog','showCurrentKpiEvals').firePress();
		
	},
	evaluationGroupTextFormatter:function(context){
		return {text:context.getProperty("GROUPING_TEXT"),key:context.getProperty("GROUPING_TEXT")};
	},
	relatedEvalGroupTextFormatter:function(context){
		var rBundle=this.getView().getModel("i18n").getResourceBundle();
		return {text: (rBundle.getText("KPI")+": " + context.getProperty("INDICATOR")), key: context.getProperty("INDICATOR")}; 
	},
	
	showCurrentKPIEvals:function(){
		var that=this;
		var oModel=this.getView().getModel('SB_DDACONFIG');
		var rBundle=this.getView().getModel("i18n").getResourceBundle();
		if(!oModel.getProperty('/SIBLING_EVALUATIONS').length){
			var tmp=sap.suite.smartbusiness.kpi.getSiblingEvaluations({
		           indicator : oModel.getProperty('/INDICATOR'),
		           id:this.evaluationId,
		           cache : false,
		           filters: false,
		           thresholds: false,
		           getDDAEvaluation: true
		        });
            tmp.forEach(function(s){
        		that.createTileMenuForCurrentEvaluation(s.ID);
            });
            oModel.getData().SIBLING_EVALUATIONS=tmp;
            oModel.getData().HEADERS.forEach(function(s){
    			var prefix=s.REFERENCE_EVALUATION_ID==s.EVALUATION_ID?'('+that._oTextsModel.getResourceBundle().getText('CURRENT_EVALUATION')+')':'';
    			s.GROUPING_TITLE=prefix+s.TITLE+" "+s.SUBTITLE;
            });
		}
		this.takeConfigSnapShot();
		var binding=this._tileEvaluationList.getBinding("items");
		var currentIndicator=this.getView().getModel("SB_DDACONFIG").getProperty("/INDICATOR");
		binding.filter(new sap.ui.model.Filter("INDICATOR",sap.ui.model.FilterOperator.EQ,currentIndicator));
		oModel.refresh();
	},
	showAssociatedEvals:function(){
		var that=this;
		var oModel=this.getView().getModel('SB_DDACONFIG');
		if(!oModel.getProperty('/ASSOCIATED_EVALUATIONS').length){
			oModel.getData().ASSOCIATED_EVALUATIONS=sap.suite.smartbusiness.kpi.getAssociatedEvaluations({
		           indicator : oModel.getProperty('/INDICATOR'),
		           id:this.evaluationId,
		           cache : true
		        });
			oModel.getData().ASSOCIATED_EVALUATIONS.forEach(function(s){
        		that.createTileMenuForCurrentEvaluation(s.ID);
			});
            oModel.getData().HEADERS.forEach(function(s){
    			s.GROUPING_TITLE=s.TITLE+" "+s.SUBTITLE;
            });
		}
		this.takeConfigSnapShot();
		var binding=this._tileEvaluationList.getBinding("items");
		var currentIndicator=this.getView().getModel("SB_DDACONFIG").getProperty("/INDICATOR");
		binding.filter(new sap.ui.model.Filter("INDICATOR",sap.ui.model.FilterOperator.NE,currentIndicator));
		oModel.refresh();
		//sap.ui.core.Fragment.byId('addRelatedTilesDialog','siblingEvaluations').setVisible(false);
		//sap.ui.core.Fragment.byId('addRelatedTilesDialog','associatedEvaluations').setVisible(true);
	},
	
	refreshChart: function() {
		
		var oController = this ;
		
		var button = this.getView().byId("chartToolbar").getToolBar().getContentRight();
		if (button) {
			if(button[0] && (!(button[0].getVisible()))) { button[0].setVisible(true); }
			if(button[1] && (!(button[1].getVisible()))) { button[1].setVisible(true); }
			if(button[3] && (!(button[3].getVisible()))) { button[3].setVisible(true); }
			if(button[0])
				button[0].firePress();
		}
				
		this.oChartDataModel = new sap.ui.model.json.JSONModel() ;
		this.oChartData = [] ;
				
		this.dda_chart = this.getView().byId("chartRef") ;	
		this.dda_chart.setStackedChartWidthEnhancer(false);
		this.dda_table = this.getView().byId("chartTable") ;		

		var tmpData = this._oModel;
		this.dda_config = {} ;
		this.dda_config.chartConfig = {
				mode: tmpData.DATA_MODE || "DUMMY",
				title: "",
				dataLimit: tmpData.DATA_LIMIT || null,	
				dataLimitations: tmpData.DATA_LIMITATIONS || false,
				type: (tmpData.CHART_TYPE).toUpperCase() || "BAR",
				axis: tmpData.AXIS_TYPE || "SINGLE",
				value: tmpData.VALUE_TYPE || "ABSOLUTE",
				colorScheme: tmpData.COLOR_SCHEME || "NONE",
				thresholdMeasure: tmpData.THRESHOLD_MEASURE || ""
		} ;

		this.dda_config.columnsConfig = [] ;
		for(var i=0;i<tmpData.COLUMNS.length;i++) {
			this.dda_config.columnsConfig.push({
				name: tmpData.COLUMNS[i].NAME,
				type: tmpData.COLUMNS[i].TYPE,
				visibility: tmpData.COLUMNS[i].VISIBILITY || "BOTH",
				sortOrder: tmpData.COLUMNS[i].SORT_ORDER || "NONE",
				sortBy: tmpData.COLUMNS[i].SORT_BY || "",
				axis: tmpData.COLUMNS[i].AXIS || 1,
				stacking: tmpData.COLUMNS[i].STACKING || 0,
				color:tmpData.COLOR_SCHEME=="MANUAL_NON_SEMANTIC"?tmpData.COLUMNS[i].COLOR1:tmpData.COLOR_SCHEME=="MANUAL_SEMANTIC"?tmpData.COLUMNS[i].COLOR2:""
			}) ;
		}			

		this.oColumns = [] ;
		this.oDimensions = [] ;
		this.oMeasures = [] ;
		this.dimNameArray = [] ;
		this.msrNameArray = [] ;
		this.chartDimensions = [] ;
		this.chartDimNames = [] ;
		this.chartMeasures = [] ;
		this.chartMsrNames = [] ;
		this.tableDimensions = [] ;
		this.tableDimNames = [] ;
		this.tableMeasures = [] ;
		this.tableMsrNames = [] ;
		for(var i=0;i<this.dda_config.columnsConfig.length;i++) {
			this.oColumns.push(this.dda_config.columnsConfig[i]);
			if((this.dda_config.columnsConfig[i].type).toUpperCase() === "DIMENSION") {
				this.oDimensions.push(this.dda_config.columnsConfig[i]) ;
				this.dimNameArray.push(this.dda_config.columnsConfig[i].name) ;
				if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "CHART") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
					this.chartDimensions.push(this.dda_config.columnsConfig[i]) ;
					this.chartDimNames.push(this.dda_config.columnsConfig[i].name) ;
			    }
				if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "TABLE") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
			    	this.tableDimensions.push(this.dda_config.columnsConfig[i]) ;
			    	this.tableDimNames.push(this.dda_config.columnsConfig[i].name) ;
			    }	
			} else if((this.dda_config.columnsConfig[i].type).toUpperCase() === "MEASURE") {
				this.oMeasures.push(this.dda_config.columnsConfig[i]) ;
				this.msrNameArray.push(this.dda_config.columnsConfig[i].name) ;
				if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "CHART") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
					this.chartMeasures.push(this.dda_config.columnsConfig[i]) ;
					this.chartMsrNames.push(this.dda_config.columnsConfig[i].name) ;
			    }
				if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "TABLE") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
			    	this.tableMeasures.push(this.dda_config.columnsConfig[i]) ;
			    	this.tableMsrNames.push(this.dda_config.columnsConfig[i].name) ;
			    }
			}
			 
		}
		
		// check for atleast one dimension & measure :
		if((!(this.chartDimensions.length)) || (!(this.chartMeasures.length))) {
			this.dda_chart.setDataset(new sap.viz.core.FlattenedDataset({}));
			return ;
		}			
		// -------------------------------------------
		
		this.stacking = this.getStacking(this.chartMeasures,this.chartDimensions);                        // TODO      workaround for stacking .
		this.isStackMsr = false;
		this.isStackDim = false;
		if(this.stacking.isEnabled && (this.stacking.type == "M"))                                     
			this.isStackMsr = true;
		else if(this.stacking.isEnabled && (this.stacking.type == "D")) 
			this.isStackDim = true;
		
		// getting chart type
		this.sapCaChartType = this.getSapCaChartType() ;	
		
		this.dda_chart.setAdvancedChartSettings({plotArea: {
															            animation: {
															                dataLoading: false,
															                dataUpdating: false,
															                resizing: false
															            }
															},
															legend:   {
															  title: { visible: false }
															}          
												});
		

		// get data for chart.....................
			if((this.dda_config.chartConfig.mode).toUpperCase() === "DUMMY") {
				this.oChartData = this.getDummyDataForChart(this.dimNameArray,this.msrNameArray) ;
				this.oChartDataModel.setData({businessData: oController.oChartData}) ;
			} else if((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME") {
				this.getRuntimeChartData(this.dimNameArray,this.msrNameArray) ;           // TODO        P.S.  write code for avoiding multiple calls - caching .
			}						
			
			
			//getting labels , texts etc.
			try {
				var mProperties = sap.suite.smartbusiness.odata.properties(this._oModel.QUERY_SERVICE_URI,this._oModel.QUERY_ENTITY_SET);
			}
			catch(e) {
				jQuery.sap.log.error("Failed to instantiate the odata model");
				throw e;
			}
	        this.column_labels_mapping = mProperties.getLabelMappingObject();
	        this.dimension_text_property_mapping = mProperties.getTextPropertyMappingObject();
	        this.measure_unit_property_mapping = mProperties.getUnitPropertyMappingObject();
	    	    
		//----------------------------------------	
			
		// if chart type = Table , do following :
		if((this.sapCaChartType).toUpperCase() === "TABLE") {
			this.updateTable(this.tableDimensions, this.tableMeasures);
			if (button) {
				if(button[0]) { button[0].setVisible(false); }
				if(button[1]) { button[1].setVisible(true); }
				if(button[3]) { button[3].setVisible(false); }
				if(button[1]) { button[1].firePress(); }
			}
			return ;
		}
		// --------------------------------------------
		
		// if dual chart is chosen and there is no measure with axis 1 or 2 :
		if((((this.dda_config.chartConfig.type).toUpperCase() == "BAR") && (this.dda_config.chartConfig.axis == "DUAL")) || (((this.dda_config.chartConfig.type).toUpperCase() == "COLUMN") && (this.dda_config.chartConfig.axis == "DUAL"))) {
			var isOneMsrAxis1 = false;
			var isOneMsrAxis2 = false;
			for(var i=0;i<this.chartMeasures.length;i++) {
				if(this.chartMeasures[i].axis == 1)
					isOneMsrAxis1 = true;
				else if(this.chartMeasures[i].axis == 2)
					isOneMsrAxis2 = true;
			}
			
			if(!(isOneMsrAxis1) || !(isOneMsrAxis2)) {
				//var alert_text = "There is no measure with axis : "+(isOneMsrAxis1 ? 2 : 1)+". Dual Axis charts require atleast one measure with axis 1 and one with axis 2 . Kindly configure the same for proper simulation.";
				sap.m.MessageBox.alert(oController._oTextsModel.getResourceBundle().getText("SELECT_MEASURE_FOR_AXIS",(isOneMsrAxis1 ? 2 : 1)));
				return ;
			}
		}
		// --------------------------------------------
		// if bubble chart chosen , but less than 3 measures selected .
		if(((this.dda_config.chartConfig.type).toUpperCase() === "BUBBLE") && (this.chartMeasures.length < 3)) {
			sap.m.MessageBox.alert(oController._oTextsModel.getResourceBundle().getText("BUBBLE_CHART_MEASURE_COUNT"));
			return;
		} 	
		
		// --------------------------------------------
				
		this.dda_chart.setChartType(this.sapCaChartType) ;	
				
		this.oDataset = this.create_Dataset(this.chartDimensions,this.chartMeasures) ;                                
		
		// axis formatters : 
		var chartType = this.dda_config.chartConfig.type ;
		var axisType = this.dda_config.chartConfig.axis ;
		var valueType = this.dda_config.chartConfig.value ;
		var locale=new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
    	var percentFormatter = sap.ca.ui.model.format.NumberFormat.getInstance({},locale);
		if ((chartType == 'BAR') && (valueType == "ABSOLUTE")) {
			this.dda_chart.setXAxisLabelFormatter(this.formatChartNumbers.bind(this));
			this.dda_chart.setYAxisLabelFormatter(this.pseudoChartFormatter);
			if(axisType == 'DUAL')
			{
				this.dda_chart.setXAxis2LabelFormatter(this.formatChartNumbers.bind(this));
			}
		} else if(chartType == 'BUBBLE') {
			this.dda_chart.setXAxisLabelFormatter(this.formatChartNumbers.bind(this));
			this.dda_chart.setYAxisLabelFormatter(this.formatChartNumbers.bind(this));
		} else if(((chartType == 'BAR') || (chartType == 'COLUMN')) && (valueType == 'PERCENTAGE')) {
			if(chartType == 'BAR') {
				this.dda_chart.setXAxisLabelFormatter(function(rawValue){return percentFormatter.format_percentage(rawValue);});
				this.dda_chart.setYAxisLabelFormatter(this.pseudoChartFormatter);
				if(axisType == 'DUAL') {
					this.dda_chart.setXAxis2LabelFormatter(function(rawValue){return percentFormatter.format_percentage(rawValue);});
				}
			}
			else {
				this.dda_chart.setYAxisLabelFormatter(function(rawValue){return percentFormatter.format_percentage(rawValue);});
				this.dda_chart.setXAxisLabelFormatter(this.pseudoChartFormatter);
				if(axisType == 'DUAL') {
					this.dda_chart.setYAxis2LabelFormatter(function(rawValue){return percentFormatter.format_percentage(rawValue);});
				}
			}
		} else {
			this.dda_chart.setYAxisLabelFormatter(this.formatChartNumbers.bind(this));
			this.dda_chart.setXAxisLabelFormatter(this.pseudoChartFormatter);
			if((chartType == 'COLUMN') && (axisType == 'DUAL'))
			{
				this.dda_chart.setYAxis2LabelFormatter(this.formatChartNumbers.bind(this));
			}
		}
		//--------------------------------------
		
		// data label :
		this.dda_chart.setDataLabelFormatter([
		                                     [this.formatChartNumbers.bind(this)]
		                                     ]);
		//--------------------------------------
		
		// Setting "in %" in axis for 100 percent charts :
        //this.set_percentCharts_uom();
		
		// Setting % in chart popover for percent charts :
        if(((chartType == 'BAR') || (chartType == 'COLUMN')) && (valueType == 'PERCENTAGE')) {
	          var formatterArray=[[],[],[]] ;
	          for(var k=0;k<this.chartMsrNames.length;k++){
					formatterArray[0].push(oController.getChartPercentFormatter(true));
					formatterArray[1].push(oController.getChartPercentFormatter(true));
				}
	          this.dda_chart.setPopoverFormatter(formatterArray);
        }
		
		this.dda_chart.setDataset(this.oDataset) ;
		this.dda_chart.setModel(this.oChartDataModel) ;
		
		// show or hide legend 
        this.showChartLegendIfApplicable(this.chartDimNames,this.chartMsrNames);
		
		// implement custom coloring ..............................
		if((this.dda_config.chartConfig.type == "BAR") || (this.dda_config.chartConfig.type == "COLUMN") || (this.dda_config.chartConfig.type == "COMBINATION") || (this.dda_config.chartConfig.type == "LINE")) {
			if((this.dda_config.chartConfig.colorScheme).toUpperCase() === "AUTO_SEMANTIC") {
				var thresholdmsr = this.dda_config.chartConfig.thresholdMeasure || "";                 // || (this.chartMeasures)[0].name ;         // TODO                                       
				var colorArray = [];
				var tmsr = -1;
				for(var i=0;i<this.chartMeasures.length;i++) {
					colorArray.push({color: sap.ca.ui.charts.ChartSemanticColor.GoodLight}) ;
					if(this.chartMeasures[i].name === thresholdmsr)
						tmsr = i ;
				}
				if(tmsr >= 0)
					colorArray[tmsr].color = sap.ca.ui.charts.ChartSemanticColor.Neutral ;
				this.applyCustomColoring(this.dda_chart, this.dda_config.chartConfig.colorScheme, colorArray, thresholdmsr, this.DDA_MODEL.EVALUATION_DATA.GOAL_TYPE) ;
			} else if(((this.dda_config.chartConfig.colorScheme).toUpperCase() === "MANUAL_SEMANTIC") || ((this.dda_config.chartConfig.colorScheme).toUpperCase() === "MANUAL_NON_SEMANTIC")) {
				this.applyCustomColoring(this.dda_chart, this.dda_config.chartConfig.colorScheme, this.chartMeasures) ;
			}
		}
		//---------------------------------------------------------		
		
		// update table :
		this.updateTable(this.tableDimensions, this.tableMeasures);
	},  

	getSapCaChartType: function() {
		
		var sapCaChartType = sap.ca.ui.charts.ChartType.Bar ;
		var chartType = this.dda_config.chartConfig.type ;
		var axisType = this.dda_config.chartConfig.axis ;
		var valueType = this.dda_config.chartConfig.value ;
		var stacking = (this.isStackMsr || (this.isStackDim && (this.chartDimensions.length > 1))) ? true : false ;
		
		switch (chartType) {
		case "BAR":
			if(axisType === "SINGLE") {
				if(valueType === "ABSOLUTE") {
					if(stacking) {
						sapCaChartType = sap.ca.ui.charts.ChartType.StackedBar;
					} else {
						sapCaChartType = sap.ca.ui.charts.ChartType.Bar;
					}
				} else if(valueType === "PERCENTAGE") {
					sapCaChartType = sap.ca.ui.charts.ChartType.StackedBar100;
				}
			} else if(axisType === "DUAL") {
				if(valueType === "ABSOLUTE") {
					sapCaChartType = sap.ca.ui.charts.ChartType.DualStackedBar;
				} else if(valueType === "PERCENTAGE") {
					sapCaChartType = sap.ca.ui.charts.ChartType.DualStackedBar100;
				}
			} 
			break;

		case "COLUMN":
			if(axisType === "SINGLE") {
				if(valueType === "ABSOLUTE") {
					if(stacking) {
						sapCaChartType = sap.ca.ui.charts.ChartType.StackedColumn;
					} else {
						sapCaChartType = sap.ca.ui.charts.ChartType.Column;
					}
				} else if(valueType === "PERCENTAGE") {
					sapCaChartType = sap.ca.ui.charts.ChartType.StackedColumn100;
				}
			} else if(axisType === "DUAL") {
				if(valueType === "ABSOLUTE") {
					sapCaChartType = sap.ca.ui.charts.ChartType.DualStackedColumn;
				} else if(valueType === "PERCENTAGE") {
					sapCaChartType = sap.ca.ui.charts.ChartType.DualStackedColumn100;
				}
			} 
			break;

		case "LINE":
			sapCaChartType = sap.ca.ui.charts.ChartType.Line;
			break;

		case "COMBINATION":
			sapCaChartType = sap.ca.ui.charts.ChartType.Combination;
			break;

		case "BUBBLE":
			sapCaChartType = sap.ca.ui.charts.ChartType.Bubble;
			break;

		case "TABLE":
			sapCaChartType = "TABLE";
			break;

		default:
			sapCaChartType = sap.ca.ui.charts.ChartType.Bar ;

		}
		
		return sapCaChartType;
	},
	
	showChartLegendIfApplicable : function(dimensions, measures) {
   	 	var that = this;
        var otoolbar = this.getView().byId("chartToolbar") ;
        var chtype = this.dda_config.chartConfig.type ;
           
        var isStackApplied = (((chtype == "BAR") || (chtype == "COLUMN")) && (this.isStackDim) && (this.getDimensionToBeStacked(that.chartDimensions)) && (dimensions.length > 1)) ? true : false ;        
        
        if((measures.length > 1) || (isStackApplied)) {             
        	otoolbar.setShowLegend(true);
        } else {
        	otoolbar.setShowLegend(false);
        }
    },
    
    getChartPercentFormatter: function(isStandard){
 		var locale=new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
 		function isNumber(n) {
 			return !isNaN(parseFloat(n)) && isFinite(n);
 		}
 		var formatterConstructor={style:isStandard?'standard':'short'};
 		//if(dec||dec==0){formatterConstructor["shortDecimals"]=dec;}
 		var chartFormatter=sap.ca.ui.model.format.NumberFormat.getInstance(formatterConstructor,locale);
 		return function(s){
 			return isNumber(s)?chartFormatter.format_percentage(s):s;
 		};
     },
	
	getStacking: function(measures,dimensions) {													    // TODO
		var oStacking = {};
		oStacking.isEnabled = false;
		oStacking.type = "none";
		
		for(var i=0;i<measures.length;i++) {
			if(measures[i].stacking === 1) {
				oStacking.isEnabled = true;
				oStacking.type = "M";
			}				
		}
		if(!(oStacking.isEnabled)) {
			for(var i=0;i<dimensions.length;i++) {
				if(dimensions[i].stacking === 1) {
					oStacking.isEnabled = true;
					oStacking.type = "D";
				}				
			}
		}
		
		return oStacking;
	},
	
	setStacking: function(isEnabled,type,columns) {																// TODO     type : M for measure , D for dimension and N for none .
		var that = this;
		if(isEnabled) {
			if(type == "M") {
				for(var i=0;i<columns.length;i++) {
					if((columns[i].TYPE).toUpperCase() === "MEASURE") {
						columns[i].STACKING = 1;
					} else if((columns[i].TYPE).toUpperCase() === "DIMENSION") {
						columns[i].STACKING = 0;
					}	
				}
			} else if(type == "D") {
				for(var i=0;i<columns.length;i++) {
					if((columns[i].TYPE).toUpperCase() === "MEASURE") {
						columns[i].STACKING = 0;
					} else if((columns[i].TYPE).toUpperCase() === "DIMENSION") {
						columns[i].STACKING = 1;
					}				
				}
			}
		} else {
			for(var i=0;i<columns.length;i++) {
				columns[i].STACKING = 0;
			}
		}		
	},
	
	getDimensionToBeStacked: function(dimensions) {
		var oDim = null;
		for(var i=0;i<dimensions.length;i++) {
			if(dimensions[i].axis === 2) {
				oDim = dimensions[i];
				break;
			}
		}
		
		return oDim ;
	},
	
	setDimensionToBeStacked: function(columns,stackDim) {
		if(stackDim) {
			for(var i=0;i<columns.length;i++) {
				if((columns[i].TYPE).toUpperCase() === "DIMENSION") {
					columns[i].AXIS = 1;
					if(columns[i].NAME === stackDim) {
						columns[i].AXIS = 2;
					}
				}
			}
		}
	},
	
	updateColumnProperty: function(columns,name,property,value) {
		for(var i=0;i<columns.length;i++) {
			if(columns[i].NAME === name) {
				(columns[i])[property] = value;
				break;
			}
		}
	},
	
	getMeasuresByAxis: function(columns) {
		var dualMsr = {};
		dualMsr.axis1 = {};
		dualMsr.axis1.objArr = [];
		dualMsr.axis1.nameArr = [];
		dualMsr.axis2 = {};
		dualMsr.axis2.objArr = [];
		dualMsr.axis2.nameArr = [];
		
		for(var i=0;i<columns.length;i++) {
			if(columns[i].axis === 1) {
				dualMsr.axis1.objArr.push(columns[i]);
				dualMsr.axis1.nameArr.push(columns[i].name);
			} else if(columns[i].axis === 2) {
				dualMsr.axis2.objArr.push(columns[i]);
				dualMsr.axis2.nameArr.push(columns[i].name);
			}
		}
		return dualMsr;
	},
	
	create_Dataset: function(dimensions,measures) {
		
		var oController = this;
		
		var chtype = this.dda_config.chartConfig.type || "BAR";
		var axisType = this.dda_config.chartConfig.axis || "SINGLE";
		var valueType = this.dda_config.chartConfig.value || "ABSOLUTE";
		var stacking = this.isStackMsr;
		var dimensionToBeStacked = this.getDimensionToBeStacked(dimensions);
		
		var dataset = new sap.viz.core.FlattenedDataset({
			data: {
				path: "/businessData"
			}
		});
		
		// setting dimensions :

		for (var i = 0; i < dimensions.length; i++) {
			var val = ((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME")? this.dimension_text_property_mapping[dimensions[i].name] : dimensions[i].name;
			var oAxis = 1;
			if(((chtype == "BAR") || (chtype == "COLUMN")) && (this.isStackDim) && (dimensionToBeStacked) && (val === dimensionToBeStacked.name) && (dimensions.length > 1)) {
				oAxis = 2;
				this.dda_chart.setStackedChartWidthEnhancer(true);
			}
			
			var dimchart = new sap.viz.ui5.data.DimensionDefinition({
				axis: oAxis,
				value: "{" + val + "}",
				name: this.column_labels_mapping[dimensions[i].name] || dimensions[i].name
			});
			dataset.addDimension(dimchart);
		}
		
		// setting measures :

		if ((chtype == "LINE") || (chtype == "COMBINATION") || ((chtype == "BAR") && (axisType == "SINGLE")) || ((chtype == "COLUMN") && (axisType == "SINGLE"))) {	

			for (var i = 0; i < measures.length; i++) {
				var val = measures[i].name;
				var msrchart = new sap.viz.ui5.data.MeasureDefinition({
					name: this.column_labels_mapping[val] || val,
					value: "{" + val + "}"
				});
				dataset.addMeasure(msrchart);
			}

		} else if (chtype == "BUBBLE") {

			for(var i=0;i<3;i++) {
				var val = measures[i].name ;
				var msrchart = new sap.viz.ui5.data.MeasureDefinition({
					group : i+1,
					name : this.column_labels_mapping[val] || val,
					value : "{"+val+"}",
				});
				dataset.addMeasure(msrchart);
			}				
			
		} else if (((chtype == "BAR") && (axisType == "DUAL")) || ((chtype == "COLUMN") && (axisType == "DUAL"))) {

			for (var i=0;i<measures.length;i++) {
				var val = measures[i].name;
				var grp = (measures[i].axis == 1 || measures[i].axis == 2) ? measures[i].axis : 2 ;
				
				var msrchart = new sap.viz.ui5.data.MeasureDefinition({
					group: grp,
					name: this.column_labels_mapping[val] || val,
					value: "{" + val + "}"

				});
				dataset.addMeasure(msrchart);
			}																										

		} 
		
		return dataset;
	},

	/*
	 * 2 Table related methods follow - same as runtime methods. 
	 */
	_getValueState : function(actualValue, thresholdValue) {
        if(!this.EVALUATION.isTargetKpi()) {
            if(actualValue < thresholdValue) {
                return this.EVALUATION.isMaximizingKpi() ? sap.ui.core.ValueState.Error : sap.ui.core.ValueState.Success;
            } else if (actualValue == thresholdValue) {
                return sap.ui.core.ValueState.None;
            } else {
                return this.EVALUATION.isMaximizingKpi() ? sap.ui.core.ValueState.Success : sap.ui.core.ValueState.Error;
            }
        } else {
            return sap.ui.core.ValueState.None;
        }
    },
    _getTableCell : function(originalMeasure, thresholdMeasure) {
        var that = this;
        if(thresholdMeasure && (originalMeasure !== thresholdMeasure)) {
            return new sap.m.ObjectNumber({
                number: {
                    path: originalMeasure
                },
                state : {
                    parts : [
                             {path : originalMeasure},
                             {path : thresholdMeasure}
                    ],
                    formatter : function(oMeasureValue, tMeasureValue) {
                        try {
                            oMeasureValue = window.parseFloat(oMeasureValue);
                            tMeasureValue = window.parseFloat(tMeasureValue);
                            return that._getValueState(oMeasureValue, tMeasureValue);
                        }catch(e) {
                            return sap.ui.core.ValueState.None;
                        }
                    }
                }
            });
        } else {
            return new sap.m.Label({
                text : {
                    path : originalMeasure
                }
            })
        }
    },
	
	updateTable: function(dimensions,measures) {
		
		this.dda_table.destroyColumns();
		this.dda_table.destroyItems();
		
		for(var i=0;i<dimensions.length;i++) {
			var val = dimensions[i].name;
			var Label = new sap.m.Label({
				text: this.column_labels_mapping[val] || val
			});
			var columns = new sap.m.Column({
				hAlign: "Left",								
				header: Label,
				minScreenWidth: "Tablet",
				demandPopin: true,
			});
			this.dda_table.addColumn(columns);
		}
		
		for (var i=0;i<measures.length;i++) {
			var val = measures[i].name;
			var Label = new sap.m.Label({
				text: this.column_labels_mapping[val] || val
			});
			var columns = new sap.m.Column({
				hAlign: "Right",
				header: Label,
				minScreenWidth: "Tablet",
				demandPopin: true,
			});

			this.dda_table.addColumn(columns);
		}
	
		var template = new sap.m.ColumnListItem({
			//type : "Navigation",
			unread : false,			
		});
		
        for(var i=0;i<dimensions.length;i++){
          var val = ((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME")? this.dimension_text_property_mapping[dimensions[i].name] : dimensions[i].name;
          var ocell = new sap.m.Label({
				text : "{"+val+"}"
			});
          template.addCell(ocell);

	    }
        var thresholdmsr = this._oModel["THRESHOLD_MEASURE"];
	    
        for(var i=0;i<measures.length;i++){
	          var val = measures[i].name;
	          if(this._oModel["COLOR_SCHEME"] == "AUTO_SEMANTIC")
	        	  var ocell = this._getTableCell(val, thresholdmsr);
	          else
	        	  var ocell = this._getTableCell(val, val);
	        template.addCell(ocell);
	    }
            
       this.dda_table.setModel(this.oChartDataModel);
       this.dda_table.bindAggregation("items", "/businessData", template);
		
	},	

	applyCustomColoring: function(oChart, colorScheme, arr, thresholdMeasure, improvementDirection) {                       // pass chart reference , type of coloring , measures obj , threshold measure (if applicable) and improvementDirection(either 0, 1 or 2)

		var oController = this;

		if((colorScheme).toUpperCase() === "AUTO_SEMANTIC") {                                                       

			if(((improvementDirection == "MA") || (improvementDirection == "MI")) && thresholdMeasure) {	 		                                                     
				oController.setCustomColors(oChart,arr,colorScheme) ;

				oChart.setChartSemanticColorFormatter(function(oContext) {

					var data = oChart.getModel().getData().businessData;
					var bindingContext = oContext.ctx.path.dii_a1;
					var bindingData = data[bindingContext];
					var referenceMeasureValue = bindingData[thresholdMeasure];
					if(referenceMeasureValue!=null && typeof referenceMeasureValue!='undefined') {
						if(oContext.val > referenceMeasureValue) {
							if(improvementDirection == "MA")
								return sap.ca.ui.charts.ChartSemanticColor.GoodLight;
							else if(improvementDirection == "MI")
								return sap.ca.ui.charts.ChartSemanticColor.BadLight;
						} else if(oContext.val < referenceMeasureValue) {
							if(improvementDirection == "MA")
								return sap.ca.ui.charts.ChartSemanticColor.BadLight;
							else if(improvementDirection == "MI")
								return sap.ca.ui.charts.ChartSemanticColor.GoodLight;
						} else {
							return sap.ca.ui.charts.ChartSemanticColor.Neutral;
						}
					} else {
						jQuery.sap.log.error("Threshold Measure:'"+thresholdMeasure+"' not in Dataset. Error Applying Semantic Color");
						return sap.ca.ui.charts.ChartSemanticColor.NeutralLight;
					}
				});
			} else {
				jQuery.sap.log.error("Threshold Measure not available or Goal type is RA . Error Applying Semantic Color");
			}
			
		} else if(((colorScheme).toUpperCase() === "MANUAL_SEMANTIC") || ((colorScheme).toUpperCase() === "MANUAL_NON_SEMANTIC")) {                                           
			oController.setCustomColors(oChart,arr,colorScheme) ;
		}

	},

	setCustomColors: function(oChart,msrObj,colorScheme){                           // pass chart reference and msr obj.

		var dset = oChart.getDataset() ;
		var msr = dset.getMeasures() ;
		
		var defaultColor = "";
		if((colorScheme).toUpperCase() === "AUTO_SEMANTIC" || (colorScheme).toUpperCase() === "MANUAL_SEMANTIC")
			defaultColor = sap.ca.ui.charts.ChartSemanticColor.Neutral;
		
		for(var i=0;i<msr.length;i++)
		{
			msr[i].addCustomData(new sap.ui.core.CustomData({
				key: "fillColor",
				value: msrObj[i].color || defaultColor
			})) ;
		}	          

	},
	
	set_percentCharts_uom: function() {
    	 
    	 var oController = this; 
    	 var chartType = this.dda_config.chartConfig.type ;
         var axisType = this.dda_config.chartConfig.axis ;
         var valueType = this.dda_config.chartConfig.value ;
         
         var msrLabels = [];
         for(var i=0;i<this.chartMsrNames.length;i++) {
        	 msrLabels.push(this.column_labels_mapping[this.chartMsrNames[i]] || this.chartMsrNames[i]);
         }
         
         var dualMsr = this.getMeasuresByAxis(this.chartMeasures);
         var dualMsrAxis1 = [],dualMsrAxis2 = [] ;
         for(var i=0;i<dualMsr.axis1.nameArr.length;i++) {
        	 dualMsrAxis1.push(this.column_labels_mapping[dualMsr.axis1.nameArr[i]] || dualMsr.axis1.nameArr[i]);
         }
         for(var i=0;i<dualMsr.axis2.nameArr.length;i++) {
        	 dualMsrAxis2.push(this.column_labels_mapping[dualMsr.axis2.nameArr[i]] || dualMsr.axis2.nameArr[i]);
         }
         
         var msrLabelStr = (axisType == 'DUAL') ? dualMsrAxis1.join(" & ") : msrLabels.join(" & ");
         
 		 var oChartSettings = {} ;
         
         if(this.dda_chart)
        	 oChartSettings = this.dda_chart.getAdvancedChartSettings() ? this.dda_chart.getAdvancedChartSettings() : {} ;
		
    	 if(((chartType == 'BAR') || (chartType == "COLUMN")) && (valueType == "PERCENTAGE")) {	
 			if(chartType == 'COLUMN') {
 				oChartSettings.yAxis = {
 						title : {visible : true, text : (msrLabelStr+" ("+(oController._oTextsModel.getResourceBundle().getText("IN_PERCENTAGE"))+")")}
 				};
 				if(axisType == 'DUAL') {
 	 				oChartSettings.yAxis2 = {
 	 						title : {visible : true, text : (dualMsrAxis2.join(" & ")+" ("+(oController._oTextsModel.getResourceBundle().getText("IN_PERCENTAGE"))+")")}
 	 				};
 				}
 			}
 			else if(chartType == 'BAR') {
 				oChartSettings.xAxis = {
 						title : {visible : true, text : (msrLabelStr+" ("+(oController._oTextsModel.getResourceBundle().getText("IN_PERCENTAGE"))+")")}
 				};
 				if(axisType == 'DUAL') {
 					oChartSettings.xAxis2 = {
 	 						title : {visible : true, text : (msrLabelStr+" ("+(oController._oTextsModel.getResourceBundle().getText("IN_PERCENTAGE"))+")")}
 	 				};
 					oChartSettings.xAxis = {
 	 						title : {visible : true, text : (dualMsrAxis2.join(" & ")+" ("+(oController._oTextsModel.getResourceBundle().getText("IN_PERCENTAGE"))+")")}
 	 				};
 				}
 			}
 			
 			if(this.dda_chart)
 				this.dda_chart.setAdvancedChartSettings(oChartSettings) ;
 		}
     },
	
	formatChartNumbers: function (value) {
		var locale = new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
		function isNumber(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}

		if (isNumber(value)) {
			if (!this.chartFormatter) {
				var dec = 1;                              //   TODO            numberOfDecimals
				jQuery.sap.require("sap.ca.ui.model.format.NumberFormat");
				if (dec || dec==0){
					this.chartFormatter = sap.ca.ui.model.format.NumberFormat.getInstance({
						style: 'short',
						shortDecimals: dec
					},locale);
				}

				else{
					this.chartFormatter = sap.ca.ui.model.format.NumberFormat.getInstance({
						style: 'short'
					},locale);
				}
			}
			value = this.chartFormatter.format(value);
		}

		return value;
	},
	pseudoChartFormatter: function (value) {
		return value;
	},
	
	getRuntimeChartData: function(dimensions,measures) {                          // TODO
		var that = this;
		
		var chartToolbarRef = this.getView().byId("chartToolbar");
		chartToolbarRef.setBusy(true);
		
		this.COLUMNS_SORT = [];
        for(var i=0;i<that.oColumns.length;i++) {
            if(that.oColumns[i].sortBy && that.oColumns[i].sortOrder) {
                if((that.oColumns[i].sortOrder).toUpperCase() == "ASC" || (that.oColumns[i].sortOrder).toUpperCase == "DESC") {
                    this.COLUMNS_SORT.push({
                        name : that.oColumns[i].sortBy,
                        order : that.oColumns[i].sortOrder
                    });
                }
            }
        }
        
        try{
			var oUriObject = sap.suite.smartbusiness.odata.getUri({
		        serviceUri : this._oModel.QUERY_SERVICE_URI,
		        entitySet : this._oModel.QUERY_ENTITY_SET,
		        dimension : dimensions,
		        measure : measures,
		        filter : this.DDA_MODEL.EVALUATION_DATA.FILTERS.results,
		        sort : this.COLUMNS_SORT,
	            dataLimit : (((this.dda_config.chartConfig.dataLimitations) && (this.dda_config.chartConfig.dataLimit > 0)) ? (this.dda_config.chartConfig.dataLimit) : null),
	            //includeDimensionKeyTextAttribute : true/false, default true,
	            //includeMeasureRawFormattedValueUnit : true/false, default True,
		    });
		    
		    oUriObject.model.read(oUriObject.uri, null, null, true, function(data) {
		    	if(data.results.length) {
		    		that.oChartData = data.results ;		
					that.oChartDataModel.setData({businessData: that.oChartData}) ;
				} else {
					jQuery.sap.log.info("Chart data Table Returned Empty Results");
					that.oChartData = [];		
					that.oChartDataModel.setData({businessData: that.oChartData}) ;
				}
		    	chartToolbarRef.setBusy(false);
		    }, function() {
		    	jQuery.sap.log.error("Error fetching data : "+oUriObject.uri);
		    	that.oChartData = [];		
				that.oChartDataModel.setData({businessData: that.oChartData}) ;
				chartToolbarRef.setBusy(false);
		    });
		} catch(exp){
			jQuery.sap.log.error(exp.toString());
			that.oChartData = [];		
			that.oChartDataModel.setData({businessData: that.oChartData}) ;
			chartToolbarRef.setBusy(false);
		}
	},
	
	getDummyDataForChart: function(dim,measure,MAX_D,DATA_SZ) {
		MAX_D=MAX_D|| 5;
		DATA_SZ= DATA_SZ||10;
		var chartData=[];
		var tmp,dimension={};
		for(var i=0;i<dim.length;i++){
			dimension[dim[i]]=[];
			for(var j=0;j<MAX_D;j++){
				dimension[dim[i]].push(dim[i]+"_"+j);
			}
		}

		for(var i=0;i<DATA_SZ;i++){
			tmp={};
			for(var j=0;j<dim.length;j++){
				var count= dimension[dim[j]].length;
				var p=sap.suite.smartbusiness.utils.getRandomNumber(count);
				tmp[dim[j]]=dimension[dim[j]][p];
			}
			for(var j=0;j<measure.length;j++){
				tmp[measure[j]]=sap.suite.smartbusiness.utils.getRandomNumber(100);
			}
			chartData.push(tmp);
		}
		chartData=this.sortChartData(chartData,dim);
		return chartData;
	},
	
	sortChartData: function(arr,dim) {
		var data=[];
		arr.sort(function(a,b){
			var i=0;
			while(i<dim.length){
				if(a[dim[i]]>b[dim[i]]){
					return -1;
				}
				else if(a[dim[i]]<b[dim[i]]){
					return 1;
				}
				i++;

			}

		});
		var tmp={};
		for(var i=0,k=0;i<arr.length;i++){
			var s="";
			for(var j=0;j<dim.length;j++){
				s+=arr[i][dim[j]];
			}
			if(!tmp[s]){
				tmp[s]=true;
				data[k++]=arr[i];
			}
		}
		return data;
	},
	
// ** For deleting a view :
	onDeleteView:function(){
		var that = this;
		this.warn_header = false;
		var tmpData=this.getView().getModel("SB_DDACONFIG").getData();
		var saveService=sap.suite.smartbusiness.ddaconfig.DrilldownSaveService;
		//save headers and filters only if views are already configured
		if(tmpData.ALL_VIEWS.length > 0 ) {
			this.busyIndicator.open() && this.getView().setBusy(true);
			saveService.saveViewConfiguration(this.evaluationId,tmpData,"delete",function(){
				jQuery.sap.log.info("view delete success");
				that.busyIndicator.close() && that.getView().setBusy(false);
				sap.m.MessageToast.show(that._oTextsModel.getResourceBundle().getText("CHART_CONFIG_DELETE_SUCCESS"));						
				for(var i=0,index;i<tmpData.ALL_VIEWS.length;i++){
					if(tmpData.ALL_VIEWS[i].ID == that.viewId) {
						index = i;break;
					}				
				}
				if(index || (index==0)){
					tmpData.ALL_VIEWS.splice(index,1);	
				}
				that.viewId=(tmpData.ALL_VIEWS.length <=0 ? "" : (tmpData.ALL_VIEWS.length == (index)? tmpData.ALL_VIEWS[0].ID : tmpData.ALL_VIEWS[index].ID));					
				that.DDA_MODEL.getConfigurator().removeViewById(tmpData.ID);
				that.DDA_MODEL.setViewId(that.viewId);
				that.bindUiToModel();
				that._oModel = that.DDA_MODEL.getModelDataForDDAConfiguration();
				that.refreshChart();
			},function(e){
				jQuery.sap.log.error(e + " failed");
				//go out of busy mode.
				that.busyIndicator.close() && that.getView().setBusy(false);
				sap.suite.smartbusiness.utils.showErrorMessage(that._oTextsModel.getResourceBundle().getText("DELETE_ERROR"));
			});
		}
	},
	// --------------------------------------------------------------------------------------------

	onViewSwitch: function(oEvent) {
		var sKey = oEvent.getParameter("selectedKey");
		this.viewId = sKey;
		this.DDA_MODEL.setViewId(this.viewId);
		this.bindUiToModel();
		this._oModel = this.DDA_MODEL.getModelDataForDDAConfiguration();
		this.refreshChart();
		window.location.replace(window.location.hash.substring(0,window.location.hash.lastIndexOf("/")) + "/" + this.viewId);
	},
	//--------------------------------------------------------------------------------------------
//	openminicharts:function(){
//		
//		this._oMiniCharts=sap.ui.xmlfragment("sap.suite.ui.smartbusiness.designtime.drilldown.view.minichartsDialog",this);
//		this._oMiniCharts.setModel(this._oTextsModel,"i18n");
//		
//		this._oMiniCharts.open();
//	},
//	openMinichartsCancel:function(){
//		this._oMiniCharts.close();	
//
//	},
	
	/*
	 * START - SAVE AND DELETE FUNCTIONS 
	 */
	
	deleteMaster: function() {

		var that = this;
		this.warn_header = false;
		var modelData=this.getView().getModel("SB_DDACONFIG").getData();
		var saveService=sap.suite.smartbusiness.ddaconfig.DrilldownSaveService;
		this.busyIndicator.open() && this.getView().setBusy(true);
		saveService.saveEvalConfiguration(this.evaluationId,modelData,"delete",function(){
    		  jQuery.sap.log.info("Deleted master configuration for the evaluation");
      		  that.busyIndicator.close() && that.getView().setBusy(false);
      		  that.DDA_MODEL.removeAllViews();
      		  sap.m.MessageToast.show(that._oTextsModel.getResourceBundle().getText("EVAL_CONFIG_DELETE_SUCCESS"));
      		  that.oRouter.navTo("detail",{"contextPath" : "EVALUATIONS_DDA('" + that.evaluationId + "')"});
      		  that.evaluationId=null;
      		  that.oApplicationFacade.__refreshModel = 1;
		},function(e){
      		  jQuery.sap.log.error(e + " failed");
      		  //go out of busy mode.
      		  that.busyIndicator.close() && that.getView().setBusy(false);
      		  sap.suite.smartbusiness.utils.showErrorMessage(that._oTextsModel.getResourceBundle().getText("DELETE_ERROR"));
      	  });
	},
	
	/*
	 * END - SAVE AND DELETE FUNCTIONS
	 */

	



/*ENABLE AGGREGATE*/

	fetchAndRenderHeaderRibbon: function(filters) {
		      
	        var self = this;
	        var Evaluation = this.DDA_MODEL.EVALUATION_DATA;
			var mProperties = sap.suite.smartbusiness.odata.properties(Evaluation.ODATA_URL,Evaluation.ODATA_ENTITYSET);
			var MEASURE_UNIT_PROPERTY_MAPPING = mProperties.getUnitPropertyMappingObject();
	        //on init load, take evaluation's filters; otherwise consider combined filters.
			var oUriObject = sap.suite.smartbusiness.odata.getUri({
	        	serviceUri : Evaluation.ODATA_URL,
	            entitySet : Evaluation.ODATA_ENTITYSET,
	            measure: Evaluation.COLUMN_NAME,
	            filter : Evaluation.FILTERS["results"]
	        });
	        oUriObject.model.read(oUriObject.uri, null, null, true, function(data) {
	            if(data) {
	                self.HeaderRibbonModel.setData({data:data.results[0]});
	            } else {
	                jQuery.sap.log.error("Couldn't fetch Aggregate Value. Response was "+data+" for uri : "+oUriObject.uri);
	            }
	        });
	        var kpiMeasureUnitProperty = MEASURE_UNIT_PROPERTY_MAPPING[Evaluation.COLUMN_NAME];
	       
	        
	        var oI18nModel = this.getView().getModel("i18n");
	       
	        this.byId("aggregate_number").bindProperty("text","/data/"+Evaluation.COLUMN_NAME,function(value){
	        	
	        	if(value==""||value==null)
	        		{
	        		value= oI18nModel.getResourceBundle().getText("NO_DATA");
	        		}
	        	return value;
	        	
	        	
	        });
	        
	        if(kpiMeasureUnitProperty) {
	            this.byId("aggregate_number_unit").bindProperty("text", "/data/" + kpiMeasureUnitProperty,function(value){
	            	return value;
	            });
	        }
	       
	        
	    },

	    displayAggregate:function(){
	    	
		    var oI18nModel = this.getView().getModel("i18n");
		    	 
		    if(this.byId("enableAggregate").getSelected()==false){
		    	this.byId("enableAggregate").setText(oI18nModel.getResourceBundle().getText("ENABLE_KPI_AGGREGATE"));
		    	this.byId("enableAggregate").invalidate();
		    	}else if(this.byId("enableAggregate").getSelected()==true) {
		    		this.byId("enableAggregate").setText("");
		    		
		    	}
		    	
		    }		
});

}; // end of sap/suite/ui/smartbusiness/designtime/drilldown/view/configurator.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.lib.AllLibrary') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.drilldown.lib.AllLibrary");







jQuery.sap.require('sap.ca.ui.model.format.NumberFormat'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.model.type.Date'); // unlisted dependency retained

}; // end of sap/suite/ui/smartbusiness/drilldown/lib/AllLibrary.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.view.AddToHome.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.drilldown.view.AddToHome.controller');
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained


sap.ui.controller("sap.suite.ui.smartbusiness.drilldown.view.AddToHome", {
    onInit : function() {
        this.drilldownController = this.getView().getViewData();
        this.evaluationApi  = this.drilldownController.EVALUATION;
        this.thresholds = this.evaluationApi.getThresholds();
        this.LAYOUT = this.byId("container");
        this.SAP_SYSTEM  = this.drilldownController.SAP_SYSTEM;
        try {
            this.LAYOUT_MODEL = new sap.ui.model.json.JSONModel({
                TITLE : "",
                CL : this.thresholds.getCriticalLow(),
                CH : this.thresholds.getCriticalHigh(),
                WL : this.thresholds.getWarningLow(),
                WH : this.thresholds.getWarningHigh(),
                TA : this.thresholds.getTarget(),
                TC : this.thresholds.getTrend(),
                RE : this.thresholds.getReference(),
                MINIMIZING_KPI : this.evaluationApi.isMinimizingKpi(),
                MAXIMIZING_KPI : this.evaluationApi.isMaximizingKpi(),
                TARGET_KPI : this.evaluationApi.isTargetKpi()
            });
            this.LAYOUT.setModel(this.LAYOUT_MODEL),
            this.createForm(this.evaluationApi.getThresholdValueType() == "MEASURE");
        }catch(e) {
            
        }
    },
    createForm : function(bIsDynamicFilter) {
        var _getVisibilityObject = function(modelProperty) {
            return  {
                parts : [
                    {path : modelProperty},
                    {path : "/TARGET_KPI"}
                ],
                formatter : function(MinOrMax, target) {
                    if(MinOrMax || target) {
                        return true;
                    }
                    return false;
                }
            }
        };
        var formLayout = null;
        var nonEditableLabel = null;
        if(!bIsDynamicFilter) {
            formLayout = new sap.ui.layout.form.SimpleForm({
                content : [
                   new sap.m.Label({text : "{i18n>SUB_TITLE_LABEL}", required : true}),
                   new sap.m.Input({value : "{/TITLE}", id:"subtitleInput"}),
                   
                   new sap.m.Label({text : "{i18n>CRITICAL_HIGH_LABEL}", visible : _getVisibilityObject("/MINIMIZING_KPI")}),
                   new sap.m.Input({value : "{/CH}", visible : _getVisibilityObject("/MINIMIZING_KPI"), valueState : sap.ui.core.ValueState.Error, valueStateText : "{i18n>CRITICAL_HIGH_VALUE_HELP}"}),
                   new sap.m.Label({text : "{i18n>WARNING_HIGH_LABEL}", visible : _getVisibilityObject("/MINIMIZING_KPI")}),
                   new sap.m.Input({value : "{/WH}", visible : _getVisibilityObject("/MINIMIZING_KPI"), valueState : sap.ui.core.ValueState.Warning, valueStateText : "{i18n>WARNING_HIGH_VALUE_HELP}"}),
                   
                   new sap.m.Label({text : "{i18n>TARGET_LABEL}"}),
                   new sap.m.Input({value : "{/TA}", valueState : sap.ui.core.ValueState.None, valueStateText : "{i18n>TARGET_VALUE_HELP}"}),
                   
                   new sap.m.Label({text : "{i18n>WARNING_LOW_LABEL}", visible : _getVisibilityObject("/MAXIMIZING_KPI")}),
                   new sap.m.Input({value : "{/WL}",visible :  _getVisibilityObject("/MAXIMIZING_KPI"), valueState : sap.ui.core.ValueState.Warning, valueStateText : "{i18n>WARNING_LOW_VALUE_HELP}"}),
                   new sap.m.Label({text : "{i18n>CRITICAL_LOW_LABEL}",visible :  _getVisibilityObject("/MAXIMIZING_KPI")}),
                   new sap.m.Input({value : "{/CL}", visible : _getVisibilityObject("/MAXIMIZING_KPI"), valueState : sap.ui.core.ValueState.Error, valueStateText : "{i18n>CRITICAL_LOW_VALUE_HELP}"}),
                ]
            });
        } else {
            formLayout = new sap.ui.layout.form.SimpleForm({
                content : [
                   new sap.m.Label({text : "{i18n>SUB_TITLE_LABEL}", required : true}),
                   new sap.m.Input({value : "{/TITLE}"}),
                ]
            });
            nonEditableLabel = new sap.m.Label({
                text : "{i18n>DYNAMIC_MEASURE_NOT_EDITABLE}"
            });
            nonEditableLabel.addStyleClass("labelDynamicThresholdNotEditable")
        }
        this.LAYOUT.removeAllItems();
        this.LAYOUT.addItem(formLayout);
        if(nonEditableLabel) {
            this.LAYOUT.addItem(nonEditableLabel);
        }
    },
    validate : function(sCallback, fCallback) {
        var modelData = this.LAYOUT_MODEL.getData();
        modelData.TITLE = sap.ui.getCore().byId("subtitleInput").getValue();
        var object = {title : ""};
        if(this.evaluationApi.getThresholdValueType() == "MEASURE") {
            if(!modelData.TITLE.trim()) {
                fCallback.call(this, {errorMessage : this.drilldownController.getView().getModel("i18n").getProperty("VALIDATION_ERROR_TITLE_MISSING")});
            } else {
                object.title  = modelData.TITLE.trim();
                sCallback.call(this, object);
            }
        } else {
            if(!modelData.TITLE.trim()) {
                fCallback.call(this, {errorMessage : this.drilldownController.getView().getModel("i18n").getProperty("VALIDATION_ERROR_TITLE_MISSING")});
                return;
            }
            object.title  = modelData.TITLE.trim();
            object.evaluationValues = [];
            var targetValue = modelData.TA ? modelData.TA.trim() : null;
            var CLValue = modelData.CL ? modelData.CL.trim() : null;
            var CHValue = modelData.CH ? modelData.CH.trim() : null;
            var WLValue = modelData.WL? modelData.WL.trim() : null;
            var WHValue = modelData.WH? modelData.WH.trim() : null;
            if(targetValue) {
                object.evaluationValues.push({
                    TYPE :"TA",
                    FIXED : targetValue,
                    ID : this.evaluationApi.getId(),
                    COLUMN_NAME : null,
                    ODATA_PROPERTY : null
                });
            }
            if(CLValue) {
                object.evaluationValues.push({
                    TYPE :"CL",
                    FIXED : CLValue,
                    ID : this.evaluationApi.getId(),
                    COLUMN_NAME : null,
                    ODATA_PROPERTY : null
                });
            }
            if(CHValue) {
                object.evaluationValues.push({
                    TYPE :"CH",
                    FIXED : CHValue,
                    ID : this.evaluationApi.getId(),
                    COLUMN_NAME : null,
                    ODATA_PROPERTY : null
                });
            }
            if(WLValue) {
                object.evaluationValues.push({
                    TYPE :"WL",
                    FIXED : WLValue,
                    ID : this.evaluationApi.getId(),
                    COLUMN_NAME : null,
                    ODATA_PROPERTY : null
                });
            }
            if(WHValue) {
                object.evaluationValues.push({
                    TYPE :"WH",
                    FIXED : WHValue,
                    ID : this.evaluationApi.getId(),
                    COLUMN_NAME : null,
                    ODATA_PROPERTY : null
                });
            }
            if(object.evaluationValues.length ==0) {
                object.evaluationValues = null;
            }
            sCallback.call(this, object);
        }
    },
    _addTileToHomePage : function(chipId) {
        var oBookmarkService = sap.ushell.Container.getService("Bookmark");
        var categoryId = null ; //Adds to Default Group (My Home)
        oBookmarkService.addCatalogTileToGroup(chipId, categoryId, {
            baseUrl : "/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata",
            remoteId : "HANA_CATALOG"
        }).done(function() {
            jQuery.sap.log.info("Tile Added to HOME");
        }).fail(function(oError) {
            jQuery.sap.log.error("Failed to add tile to home : "+oError);
        });
    },
    _notifyShell : function(chipId) {
        var oService =  sap.ushell && sap.ushell.Container && sap.ushell.Container.getService;
        if(oService) {
            oNotifyShell = oService("LaunchPage");
            if(oNotifyShell && oNotifyShell.onCatalogTileAdded) {
                oNotifyShell.onCatalogTileAdded(chipId);
            }
        }
    },
    publishTile : function(callback) {
        this.validate(function(tObject) {
            var response  = sap.suite.smartbusiness.chip.savePersonalizedTile({
                evaluationId : this.evaluationApi.getId(),
                tileType : this.drilldownController.TILE_TYPE,
                dimension : this.drilldownController.DIMENSION,
                additionalFilters : this.drilldownController.getAdditionFiltersForChipConfiguration(),
                evaluationValues : tObject.evaluationValues ? tObject : null,
                title : tObject.title,
                sapSystem : this.SAP_SYSTEM
            });
            if(response.status == 'Success') {
                sap.m.MessageToast.show(this.drilldownController.getView().getModel("i18n").getProperty("PERSONALIZED_TILE_CREATED_SUCCESSFULLY"));
                callback.call();
                this._addTileToHomePage(response.chipId);
                this._notifyShell(response.chipId);
            } else {
                jQuery.sap.log.error(response.message);
                sap.m.MessageToast.show(this.drilldownController.getView().getModel("i18n").getProperty("PERSONALIZED_TILE_CREATION_FAILED"));
                callback.call();
            }
        }, function(oError){
            sap.m.MessageBox.show(oError.errorMessage,null,this.drilldownController.getView().getModel("i18n").getProperty("VALIDATION_ERROR_HEADER"))
        });
    }, 
    onAfterRendering : function() {
        
    }
});

}; // end of sap/suite/ui/smartbusiness/drilldown/view/AddToHome.controller.js
